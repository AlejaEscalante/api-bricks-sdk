// <auto-generated>
/*
 * FX Realtime REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.FinFeedAPI.CurrenciesAPI.REST.V1.Realtime.Client.ClientUtils;
using APIBricks.FinFeedAPI.CurrenciesAPI.REST.V1.Realtime.Client;

namespace APIBricks.FinFeedAPI.CurrenciesAPI.REST.V1.Realtime.Model
{
    /// <summary>
    /// Contains information about assets&#39; chain network addresses
    /// </summary>
    public partial class V1ChainNetworkAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1ChainNetworkAddress" /> class.
        /// </summary>
        /// <param name="chainId">Gets or sets chain id</param>
        /// <param name="networkId">Gets or sets network id</param>
        /// <param name="address">Gets or sets chain address</param>
        [JsonConstructor]
        public V1ChainNetworkAddress(Option<string?> chainId = default, Option<string?> networkId = default, Option<string?> address = default)
        {
            ChainIdOption = chainId;
            NetworkIdOption = networkId;
            AddressOption = address;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ChainId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ChainIdOption { get; private set; }

        /// <summary>
        /// Gets or sets chain id
        /// </summary>
        /// <value>Gets or sets chain id</value>
        [JsonPropertyName("chain_id")]
        public string? ChainId { get { return this.ChainIdOption; } set { this.ChainIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of NetworkId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NetworkIdOption { get; private set; }

        /// <summary>
        /// Gets or sets network id
        /// </summary>
        /// <value>Gets or sets network id</value>
        [JsonPropertyName("network_id")]
        public string? NetworkId { get { return this.NetworkIdOption; } set { this.NetworkIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Address
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressOption { get; private set; }

        /// <summary>
        /// Gets or sets chain address
        /// </summary>
        /// <value>Gets or sets chain address</value>
        [JsonPropertyName("address")]
        public string? Address { get { return this.AddressOption; } set { this.AddressOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V1ChainNetworkAddress {\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  NetworkId: ").Append(NetworkId).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="V1ChainNetworkAddress" />
    /// </summary>
    public class V1ChainNetworkAddressJsonConverter : JsonConverter<V1ChainNetworkAddress>
    {
        /// <summary>
        /// Deserializes json to <see cref="V1ChainNetworkAddress" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override V1ChainNetworkAddress Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> chainId = default;
            Option<string?> networkId = default;
            Option<string?> address = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "chain_id":
                            chainId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "network_id":
                            networkId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "address":
                            address = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new V1ChainNetworkAddress(chainId, networkId, address);
        }

        /// <summary>
        /// Serializes a <see cref="V1ChainNetworkAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1ChainNetworkAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, V1ChainNetworkAddress v1ChainNetworkAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, v1ChainNetworkAddress, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="V1ChainNetworkAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1ChainNetworkAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, V1ChainNetworkAddress v1ChainNetworkAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            if (v1ChainNetworkAddress.ChainIdOption.IsSet)
                if (v1ChainNetworkAddress.ChainIdOption.Value != null)
                    writer.WriteString("chain_id", v1ChainNetworkAddress.ChainId);
                else
                    writer.WriteNull("chain_id");

            if (v1ChainNetworkAddress.NetworkIdOption.IsSet)
                if (v1ChainNetworkAddress.NetworkIdOption.Value != null)
                    writer.WriteString("network_id", v1ChainNetworkAddress.NetworkId);
                else
                    writer.WriteNull("network_id");

            if (v1ChainNetworkAddress.AddressOption.IsSet)
                if (v1ChainNetworkAddress.AddressOption.Value != null)
                    writer.WriteString("address", v1ChainNetworkAddress.Address);
                else
                    writer.WriteNull("address");
        }
    }
}
