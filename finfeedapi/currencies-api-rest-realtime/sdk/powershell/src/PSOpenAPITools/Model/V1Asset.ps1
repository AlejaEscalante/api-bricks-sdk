#
# FX Realtime REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents an asset.

.PARAMETER AssetId
Gets or sets the asset ID.
.PARAMETER Name
Gets or sets the name of the asset.
.PARAMETER TypeIsCrypto
Gets or sets a value indicating whether the asset is a cryptocurrency.
.PARAMETER DataQuoteStart
Gets or sets the start date of quote data.
.PARAMETER DataQuoteEnd
Gets or sets the end date of quote data.
.PARAMETER DataOrderbookStart
Gets or sets the start date of order book data.
.PARAMETER DataOrderbookEnd
Gets or sets the end date of order book data.
.PARAMETER DataTradeStart
Gets or sets the start date of trade data.
.PARAMETER DataTradeEnd
Gets or sets the end date of trade data.
.PARAMETER DataSymbolsCount
Gets or sets the number of symbols.
.PARAMETER Volume1hrsUsd
Gets or sets the USD volume in the last 1 hour.
.PARAMETER Volume1dayUsd
Gets or sets the USD volume in the last 1 day.
.PARAMETER Volume1mthUsd
Gets or sets the USD volume in the last 1 month.
.PARAMETER PriceUsd
Gets or sets the USD price of the asset.
.PARAMETER IdIcon
Gets or sets the ID of the icon for the asset.
.PARAMETER SupplyCurrent
Gets or sets the current supply of the asset.
.PARAMETER SupplyTotal
Gets or sets the total supply of the asset.
.PARAMETER SupplyMax
Gets or sets the maximum supply of the asset.
.PARAMETER ChainAddresses

.PARAMETER DataStart
No description available.
.PARAMETER DataEnd
No description available.
.OUTPUTS

V1Asset<PSCustomObject>
#>

function Initialize-V1Asset {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TypeIsCrypto},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataQuoteStart},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataQuoteEnd},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataOrderbookStart},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataOrderbookEnd},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataTradeStart},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataTradeEnd},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DataSymbolsCount},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Volume1hrsUsd},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Volume1dayUsd},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Volume1mthUsd},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${PriceUsd},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IdIcon},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${SupplyCurrent},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${SupplyTotal},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${SupplyMax},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ChainAddresses},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DataStart},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DataEnd}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => V1Asset' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "asset_id" = ${AssetId}
            "name" = ${Name}
            "type_is_crypto" = ${TypeIsCrypto}
            "data_quote_start" = ${DataQuoteStart}
            "data_quote_end" = ${DataQuoteEnd}
            "data_orderbook_start" = ${DataOrderbookStart}
            "data_orderbook_end" = ${DataOrderbookEnd}
            "data_trade_start" = ${DataTradeStart}
            "data_trade_end" = ${DataTradeEnd}
            "data_symbols_count" = ${DataSymbolsCount}
            "volume_1hrs_usd" = ${Volume1hrsUsd}
            "volume_1day_usd" = ${Volume1dayUsd}
            "volume_1mth_usd" = ${Volume1mthUsd}
            "price_usd" = ${PriceUsd}
            "id_icon" = ${IdIcon}
            "supply_current" = ${SupplyCurrent}
            "supply_total" = ${SupplyTotal}
            "supply_max" = ${SupplyMax}
            "chain_addresses" = ${ChainAddresses}
            "data_start" = ${DataStart}
            "data_end" = ${DataEnd}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to V1Asset<PSCustomObject>

.DESCRIPTION

Convert from JSON to V1Asset<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

V1Asset<PSCustomObject>
#>
function ConvertFrom-JsonToV1Asset {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => V1Asset' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V1Asset
        $AllProperties = ("asset_id", "name", "type_is_crypto", "data_quote_start", "data_quote_end", "data_orderbook_start", "data_orderbook_end", "data_trade_start", "data_trade_end", "data_symbols_count", "volume_1hrs_usd", "volume_1day_usd", "volume_1mth_usd", "price_usd", "id_icon", "supply_current", "supply_total", "supply_max", "chain_addresses", "data_start", "data_end")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_id"))) { #optional property not found
            $AssetId = $null
        } else {
            $AssetId = $JsonParameters.PSobject.Properties["asset_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type_is_crypto"))) { #optional property not found
            $TypeIsCrypto = $null
        } else {
            $TypeIsCrypto = $JsonParameters.PSobject.Properties["type_is_crypto"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_quote_start"))) { #optional property not found
            $DataQuoteStart = $null
        } else {
            $DataQuoteStart = $JsonParameters.PSobject.Properties["data_quote_start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_quote_end"))) { #optional property not found
            $DataQuoteEnd = $null
        } else {
            $DataQuoteEnd = $JsonParameters.PSobject.Properties["data_quote_end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_orderbook_start"))) { #optional property not found
            $DataOrderbookStart = $null
        } else {
            $DataOrderbookStart = $JsonParameters.PSobject.Properties["data_orderbook_start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_orderbook_end"))) { #optional property not found
            $DataOrderbookEnd = $null
        } else {
            $DataOrderbookEnd = $JsonParameters.PSobject.Properties["data_orderbook_end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_trade_start"))) { #optional property not found
            $DataTradeStart = $null
        } else {
            $DataTradeStart = $JsonParameters.PSobject.Properties["data_trade_start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_trade_end"))) { #optional property not found
            $DataTradeEnd = $null
        } else {
            $DataTradeEnd = $JsonParameters.PSobject.Properties["data_trade_end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_symbols_count"))) { #optional property not found
            $DataSymbolsCount = $null
        } else {
            $DataSymbolsCount = $JsonParameters.PSobject.Properties["data_symbols_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_1hrs_usd"))) { #optional property not found
            $Volume1hrsUsd = $null
        } else {
            $Volume1hrsUsd = $JsonParameters.PSobject.Properties["volume_1hrs_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_1day_usd"))) { #optional property not found
            $Volume1dayUsd = $null
        } else {
            $Volume1dayUsd = $JsonParameters.PSobject.Properties["volume_1day_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_1mth_usd"))) { #optional property not found
            $Volume1mthUsd = $null
        } else {
            $Volume1mthUsd = $JsonParameters.PSobject.Properties["volume_1mth_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price_usd"))) { #optional property not found
            $PriceUsd = $null
        } else {
            $PriceUsd = $JsonParameters.PSobject.Properties["price_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id_icon"))) { #optional property not found
            $IdIcon = $null
        } else {
            $IdIcon = $JsonParameters.PSobject.Properties["id_icon"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "supply_current"))) { #optional property not found
            $SupplyCurrent = $null
        } else {
            $SupplyCurrent = $JsonParameters.PSobject.Properties["supply_current"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "supply_total"))) { #optional property not found
            $SupplyTotal = $null
        } else {
            $SupplyTotal = $JsonParameters.PSobject.Properties["supply_total"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "supply_max"))) { #optional property not found
            $SupplyMax = $null
        } else {
            $SupplyMax = $JsonParameters.PSobject.Properties["supply_max"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "chain_addresses"))) { #optional property not found
            $ChainAddresses = $null
        } else {
            $ChainAddresses = $JsonParameters.PSobject.Properties["chain_addresses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_start"))) { #optional property not found
            $DataStart = $null
        } else {
            $DataStart = $JsonParameters.PSobject.Properties["data_start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_end"))) { #optional property not found
            $DataEnd = $null
        } else {
            $DataEnd = $JsonParameters.PSobject.Properties["data_end"].value
        }

        $PSO = [PSCustomObject]@{
            "asset_id" = ${AssetId}
            "name" = ${Name}
            "type_is_crypto" = ${TypeIsCrypto}
            "data_quote_start" = ${DataQuoteStart}
            "data_quote_end" = ${DataQuoteEnd}
            "data_orderbook_start" = ${DataOrderbookStart}
            "data_orderbook_end" = ${DataOrderbookEnd}
            "data_trade_start" = ${DataTradeStart}
            "data_trade_end" = ${DataTradeEnd}
            "data_symbols_count" = ${DataSymbolsCount}
            "volume_1hrs_usd" = ${Volume1hrsUsd}
            "volume_1day_usd" = ${Volume1dayUsd}
            "volume_1mth_usd" = ${Volume1mthUsd}
            "price_usd" = ${PriceUsd}
            "id_icon" = ${IdIcon}
            "supply_current" = ${SupplyCurrent}
            "supply_total" = ${SupplyTotal}
            "supply_max" = ${SupplyMax}
            "chain_addresses" = ${ChainAddresses}
            "data_start" = ${DataStart}
            "data_end" = ${DataEnd}
        }

        return $PSO
    }

}

