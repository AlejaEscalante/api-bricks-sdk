/**
 * FX Realtime REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import V1ExchangeRate from '../model/V1ExchangeRate';
import V1ExchangeRates from '../model/V1ExchangeRates';

/**
* ExchangeRates service.
* @module api/ExchangeRatesApi
* @version v1
*/
export default class ExchangeRatesApi {

    /**
    * Constructs a new ExchangeRatesApi. 
    * @alias module:api/ExchangeRatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSpecificRate operation.
     * @callback module:api/ExchangeRatesApi~getSpecificRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ExchangeRate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific rate
     * Retrieves the exchange rate for a specific base and quote asset at a given time or the current rate.                :::info  If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements.  :::
     * @param {String} assetIdBase Requested exchange rate base asset identifier (from the Metadata -> Assets)
     * @param {String} assetIdQuote Requested exchange rate quote asset identifier (from the Metadata -> Assets)
     * @param {module:api/ExchangeRatesApi~getSpecificRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ExchangeRate}
     */
    getSpecificRate(assetIdBase, assetIdQuote, callback) {
      let postBody = null;
      // verify the required parameter 'assetIdBase' is set
      if (assetIdBase === undefined || assetIdBase === null) {
        throw new Error("Missing the required parameter 'assetIdBase' when calling getSpecificRate");
      }
      // verify the required parameter 'assetIdQuote' is set
      if (assetIdQuote === undefined || assetIdQuote === null) {
        throw new Error("Missing the required parameter 'assetIdQuote' when calling getSpecificRate");
      }

      let pathParams = {
        'asset_id_base': assetIdBase,
        'asset_id_quote': assetIdQuote
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = V1ExchangeRate;
      return this.apiClient.callApi(
        '/v1/exchangerate/{asset_id_base}/{asset_id_quote}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ExchangerateAssetIdBaseGet operation.
     * @callback module:api/ExchangeRatesApi~v1ExchangerateAssetIdBaseGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ExchangeRates} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all current rates
     * Get the current exchange rate between requested asset and all other assets.                :::info  If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements.  :::                :::info  You can invert the rates by using Y = 1 / X equation, for example BTC/USD = 1 / (USD/BTC);  :::
     * @param {String} assetIdBase Requested exchange rates base asset identifier (from the Metadata -> Assets)
     * @param {Object} opts Optional parameters
     * @param {String} [filterAssetId] Comma or semicolon delimited asset identifiers used to filter response (optional)
     * @param {Boolean} [invert = false)] True will invert all the rates (optional, if true then rates will be calculated as `rate = 1 / actual_rate` eg. `USD/BTC` as `BTC/USD`)
     * @param {module:api/ExchangeRatesApi~v1ExchangerateAssetIdBaseGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ExchangeRates}
     */
    v1ExchangerateAssetIdBaseGet(assetIdBase, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assetIdBase' is set
      if (assetIdBase === undefined || assetIdBase === null) {
        throw new Error("Missing the required parameter 'assetIdBase' when calling v1ExchangerateAssetIdBaseGet");
      }

      let pathParams = {
        'asset_id_base': assetIdBase
      };
      let queryParams = {
        'filter_asset_id': opts['filterAssetId'],
        'invert': opts['invert']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = V1ExchangeRates;
      return this.apiClient.callApi(
        '/v1/exchangerate/{asset_id_base}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
