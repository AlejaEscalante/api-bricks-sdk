--  FX Realtime REST API
--  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
--
--  The version of the OpenAPI document: v1
--  Contact: support@apibricks.io
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.15.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with Swagger.Streams;
package body .Clients is
   pragma Style_Checks ("-bmrIu");

   Mime_1 : aliased constant String := "application/x-msgpack";
   Mime_2 : aliased constant String := "text/json";
   Media_List_1 : constant Swagger.Mime_List := (
     1 => Swagger.Mime_Json,
   
     2 => Mime_1'Access,
   
     3 => Mime_2'Access,
   
     4 => Swagger.Mime_Text   );


   --  Get specific rate
   --  Retrieves the exchange rate for a specific base and quote asset at a given time or the current rate.
   --              
   --  :::info
   --  If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements.
   --  :::
   procedure Get_Specific_Rate
      (Client : in out Client_Type;
       Asset_Id_Base : in Swagger.UString;
       Asset_Id_Quote : in Swagger.UString;
       Result : out .Models.V1ExchangeRate_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/exchangerate/{asset_id_base}/{asset_id_quote}");
      URI.Set_Path_Param ("asset_id_base", Asset_Id_Base);
      URI.Set_Path_Param ("asset_id_quote", Asset_Id_Quote);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Specific_Rate;

   --  Get all current rates
   --  Get the current exchange rate between requested asset and all other assets.
   --              
   --  :::info
   --  If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements.
   --  :::
   --              
   --  :::info
   --  You can invert the rates by using Y = 1 / X equation, for example BTC/USD = 1 / (USD/BTC);
   --  :::
   procedure V_1Exchangerate_Asset_Id_Base_Get
      (Client : in out Client_Type;
       Asset_Id_Base : in Swagger.UString;
       Filter_Asset_Id : in Swagger.Nullable_UString;
       Invert : in Swagger.Nullable_Boolean;
       Result : out .Models.V1ExchangeRates_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("filter_asset_id", Filter_Asset_Id);
      URI.Add_Param ("invert", Invert);
      URI.Set_Path ("/v1/exchangerate/{asset_id_base}");
      URI.Set_Path_Param ("asset_id_base", Asset_Id_Base);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Exchangerate_Asset_Id_Base_Get;

   --  List all assets by asset ID
   procedure V_1Assets_Asset_Id_Get
      (Client : in out Client_Type;
       Asset_Id : in Swagger.UString;
       Result : out .Models.V1Asset_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/assets/{asset_id}");
      URI.Set_Path_Param ("asset_id", Asset_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Assets_Asset_Id_Get;

   --  List all assets
   --  Retrieves all assets.
   --              
   --  :::info
   --  Our asset identifiers are aligned with the ISO 4217 currency codes standard only for fiat money (government or law regulated currency).
   --  :::
   --              
   --  :::info
   --  Properties of the output are providing aggregated information from across all symbols related to the specific asset. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source.
   --  :::
   procedure V_1Assets_Get
      (Client : in out Client_Type;
       Filter_Asset_Id : in Swagger.Nullable_UString;
       Result : out .Models.V1Asset_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("filter_asset_id", Filter_Asset_Id);
      URI.Set_Path ("/v1/assets");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Assets_Get;

   --  List all asset icons
   --  Gets the list of icons (of the given size) for all the assets.
   procedure V_1Assets_Icons_Size_Get
      (Client : in out Client_Type;
       Size : in Integer;
       Result : out .Models.V1Icon_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/assets/icons/{size}");
      URI.Set_Path_Param ("size", .Models.To_String (Size));
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Assets_Icons_Size_Get;
end .Clients;
