// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.FinFeedAPI.SECAPI.REST.V1.Client.ClientUtils;
using APIBricks.FinFeedAPI.SECAPI.REST.V1.Client;

namespace APIBricks.FinFeedAPI.SECAPI.REST.V1.Model
{
    /// <summary>
    /// Represents the result of a filing extraction.
    /// </summary>
    public partial class DTOFilingExtractResultDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DTOFilingExtractResultDto" /> class.
        /// </summary>
        /// <param name="accessionNumber">accessionNumber</param>
        /// <param name="formType">formType</param>
        /// <param name="items">items</param>
        [JsonConstructor]
        public DTOFilingExtractResultDto(Option<string?> accessionNumber = default, Option<string?> formType = default, Option<List<DTOFilingItemDto>?> items = default)
        {
            AccessionNumberOption = accessionNumber;
            FormTypeOption = formType;
            ItemsOption = items;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AccessionNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AccessionNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccessionNumber
        /// </summary>
        [JsonPropertyName("accession_number")]
        public string? AccessionNumber { get { return this.AccessionNumberOption; } set { this.AccessionNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FormTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets FormType
        /// </summary>
        [JsonPropertyName("form_type")]
        public string? FormType { get { return this.FormTypeOption; } set { this.FormTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Items
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DTOFilingItemDto>?> ItemsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [JsonPropertyName("items")]
        public List<DTOFilingItemDto>? Items { get { return this.ItemsOption; } set { this.ItemsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DTOFilingExtractResultDto {\n");
            sb.Append("  AccessionNumber: ").Append(AccessionNumber).Append("\n");
            sb.Append("  FormType: ").Append(FormType).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DTOFilingExtractResultDto" />
    /// </summary>
    public class DTOFilingExtractResultDtoJsonConverter : JsonConverter<DTOFilingExtractResultDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="DTOFilingExtractResultDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DTOFilingExtractResultDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> accessionNumber = default;
            Option<string?> formType = default;
            Option<List<DTOFilingItemDto>?> items = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accession_number":
                            accessionNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "form_type":
                            formType = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "items":
                            items = new Option<List<DTOFilingItemDto>?>(JsonSerializer.Deserialize<List<DTOFilingItemDto>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new DTOFilingExtractResultDto(accessionNumber, formType, items);
        }

        /// <summary>
        /// Serializes a <see cref="DTOFilingExtractResultDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dTOFilingExtractResultDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DTOFilingExtractResultDto dTOFilingExtractResultDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dTOFilingExtractResultDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DTOFilingExtractResultDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dTOFilingExtractResultDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DTOFilingExtractResultDto dTOFilingExtractResultDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dTOFilingExtractResultDto.AccessionNumberOption.IsSet)
                if (dTOFilingExtractResultDto.AccessionNumberOption.Value != null)
                    writer.WriteString("accession_number", dTOFilingExtractResultDto.AccessionNumber);
                else
                    writer.WriteNull("accession_number");

            if (dTOFilingExtractResultDto.FormTypeOption.IsSet)
                if (dTOFilingExtractResultDto.FormTypeOption.Value != null)
                    writer.WriteString("form_type", dTOFilingExtractResultDto.FormType);
                else
                    writer.WriteNull("form_type");

            if (dTOFilingExtractResultDto.ItemsOption.IsSet)
                if (dTOFilingExtractResultDto.ItemsOption.Value != null)
                {
                    writer.WritePropertyName("items");
                    JsonSerializer.Serialize(writer, dTOFilingExtractResultDto.Items, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("items");
        }
    }
}
