/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DTO_FilingItemDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

DTO_FilingItemDto::DTO_FilingItemDto()
{
    m_Item_number = utility::conversions::to_string_t("");
    m_Item_numberIsSet = false;
    m_Item_title = utility::conversions::to_string_t("");
    m_Item_titleIsSet = false;
    m_Content = utility::conversions::to_string_t("");
    m_ContentIsSet = false;
}

DTO_FilingItemDto::~DTO_FilingItemDto()
{
}

void DTO_FilingItemDto::validate()
{
    // TODO: implement validation
}

web::json::value DTO_FilingItemDto::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Item_numberIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("item_number"))] = ModelBase::toJson(m_Item_number);
    }
    if(m_Item_titleIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("item_title"))] = ModelBase::toJson(m_Item_title);
    }
    if(m_ContentIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("content"))] = ModelBase::toJson(m_Content);
    }

    return val;
}

bool DTO_FilingItemDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("item_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("item_number")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setItemNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItemNumber);
            setItemNumber(refVal_setItemNumber);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("item_title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("item_title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setItemTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItemTitle);
            setItemTitle(refVal_setItemTitle);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("content"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("content")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContent);
            setContent(refVal_setContent);
            
        }
    }
    return ok;
}

void DTO_FilingItemDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Item_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("item_number")), m_Item_number));
    }
    if(m_Item_titleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("item_title")), m_Item_title));
    }
    if(m_ContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("content")), m_Content));
    }
}

bool DTO_FilingItemDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("item_number"))))
    {
        utility::string_t refVal_setItemNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("item_number"))), refVal_setItemNumber );
        setItemNumber(refVal_setItemNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("item_title"))))
    {
        utility::string_t refVal_setItemTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("item_title"))), refVal_setItemTitle );
        setItemTitle(refVal_setItemTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("content"))))
    {
        utility::string_t refVal_setContent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("content"))), refVal_setContent );
        setContent(refVal_setContent);
    }
    return ok;
}


utility::string_t DTO_FilingItemDto::getItemNumber() const
{
    return m_Item_number;
}


void DTO_FilingItemDto::setItemNumber(const utility::string_t& value)
{
    m_Item_number = value;
    m_Item_numberIsSet = true;
}

bool DTO_FilingItemDto::itemNumberIsSet() const
{
    return m_Item_numberIsSet;
}

void DTO_FilingItemDto::unsetItem_number()
{
    m_Item_numberIsSet = false;
}
utility::string_t DTO_FilingItemDto::getItemTitle() const
{
    return m_Item_title;
}


void DTO_FilingItemDto::setItemTitle(const utility::string_t& value)
{
    m_Item_title = value;
    m_Item_titleIsSet = true;
}

bool DTO_FilingItemDto::itemTitleIsSet() const
{
    return m_Item_titleIsSet;
}

void DTO_FilingItemDto::unsetItem_title()
{
    m_Item_titleIsSet = false;
}
utility::string_t DTO_FilingItemDto::getContent() const
{
    return m_Content;
}


void DTO_FilingItemDto::setContent(const utility::string_t& value)
{
    m_Content = value;
    m_ContentIsSet = true;
}

bool DTO_FilingItemDto::contentIsSet() const
{
    return m_ContentIsSet;
}

void DTO_FilingItemDto::unsetContent()
{
    m_ContentIsSet = false;
}

}
}
}
}


