/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DTO_FilingMetadataDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

DTO_FilingMetadataDto::DTO_FilingMetadataDto()
{
    m_Cik = 0L;
    m_CikIsSet = false;
    m_Accession_number = utility::conversions::to_string_t("");
    m_Accession_numberIsSet = false;
    m_Filing_dateIsSet = false;
    m_Report_dateIsSet = false;
    m_Acceptance_date_time = utility::datetime();
    m_Acceptance_date_timeIsSet = false;
    m_Act = utility::conversions::to_string_t("");
    m_ActIsSet = false;
    m_Form = utility::conversions::to_string_t("");
    m_FormIsSet = false;
    m_File_number = utility::conversions::to_string_t("");
    m_File_numberIsSet = false;
    m_Film_number = utility::conversions::to_string_t("");
    m_Film_numberIsSet = false;
    m_Items = utility::conversions::to_string_t("");
    m_ItemsIsSet = false;
    m_Core_type = utility::conversions::to_string_t("");
    m_Core_typeIsSet = false;
    m_Size = 0;
    m_SizeIsSet = false;
    m_Is_xbrl = false;
    m_Is_xbrlIsSet = false;
    m_Is_inline_xbrl = false;
    m_Is_inline_xbrlIsSet = false;
    m_Primary_document = utility::conversions::to_string_t("");
    m_Primary_documentIsSet = false;
    m_Primary_doc_description = utility::conversions::to_string_t("");
    m_Primary_doc_descriptionIsSet = false;
    m_Source_file = utility::conversions::to_string_t("");
    m_Source_fileIsSet = false;
}

DTO_FilingMetadataDto::~DTO_FilingMetadataDto()
{
}

void DTO_FilingMetadataDto::validate()
{
    // TODO: implement validation
}

web::json::value DTO_FilingMetadataDto::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_CikIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("cik"))] = ModelBase::toJson(m_Cik);
    }
    if(m_Accession_numberIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("accession_number"))] = ModelBase::toJson(m_Accession_number);
    }
    if(m_Filing_dateIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("filing_date"))] = ModelBase::toJson(m_Filing_date);
    }
    if(m_Report_dateIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("report_date"))] = ModelBase::toJson(m_Report_date);
    }
    if(m_Acceptance_date_timeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("acceptance_date_time"))] = ModelBase::toJson(m_Acceptance_date_time);
    }
    if(m_ActIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("act"))] = ModelBase::toJson(m_Act);
    }
    if(m_FormIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("form"))] = ModelBase::toJson(m_Form);
    }
    if(m_File_numberIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("file_number"))] = ModelBase::toJson(m_File_number);
    }
    if(m_Film_numberIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("film_number"))] = ModelBase::toJson(m_Film_number);
    }
    if(m_ItemsIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("items"))] = ModelBase::toJson(m_Items);
    }
    if(m_Core_typeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("core_type"))] = ModelBase::toJson(m_Core_type);
    }
    if(m_SizeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("size"))] = ModelBase::toJson(m_Size);
    }
    if(m_Is_xbrlIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_xbrl"))] = ModelBase::toJson(m_Is_xbrl);
    }
    if(m_Is_inline_xbrlIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_inline_xbrl"))] = ModelBase::toJson(m_Is_inline_xbrl);
    }
    if(m_Primary_documentIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("primary_document"))] = ModelBase::toJson(m_Primary_document);
    }
    if(m_Primary_doc_descriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("primary_doc_description"))] = ModelBase::toJson(m_Primary_doc_description);
    }
    if(m_Source_fileIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("source_file"))] = ModelBase::toJson(m_Source_file);
    }

    return val;
}

bool DTO_FilingMetadataDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("cik"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cik")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCik;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCik);
            setCik(refVal_setCik);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accession_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accession_number")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccessionNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccessionNumber);
            setAccessionNumber(refVal_setAccessionNumber);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("filing_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("filing_date")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setFilingDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilingDate);
            setFilingDate(refVal_setFilingDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("report_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("report_date")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setReportDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReportDate);
            setReportDate(refVal_setReportDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("acceptance_date_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("acceptance_date_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setAcceptanceDateTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAcceptanceDateTime);
            setAcceptanceDateTime(refVal_setAcceptanceDateTime);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("act"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("act")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAct;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAct);
            setAct(refVal_setAct);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("form"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("form")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setForm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setForm);
            setForm(refVal_setForm);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("file_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("file_number")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFileNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFileNumber);
            setFileNumber(refVal_setFileNumber);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("film_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("film_number")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFilmNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilmNumber);
            setFilmNumber(refVal_setFilmNumber);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("items"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("items")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setItems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItems);
            setItems(refVal_setItems);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("core_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("core_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCoreType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCoreType);
            setCoreType(refVal_setCoreType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSize);
            setSize(refVal_setSize);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_xbrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_xbrl")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsXbrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsXbrl);
            setIsXbrl(refVal_setIsXbrl);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_inline_xbrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_inline_xbrl")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsInlineXbrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsInlineXbrl);
            setIsInlineXbrl(refVal_setIsInlineXbrl);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("primary_document"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("primary_document")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrimaryDocument;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrimaryDocument);
            setPrimaryDocument(refVal_setPrimaryDocument);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("primary_doc_description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("primary_doc_description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrimaryDocDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrimaryDocDescription);
            setPrimaryDocDescription(refVal_setPrimaryDocDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("source_file"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("source_file")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSourceFile;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSourceFile);
            setSourceFile(refVal_setSourceFile);
            
        }
    }
    return ok;
}

void DTO_FilingMetadataDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CikIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cik")), m_Cik));
    }
    if(m_Accession_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accession_number")), m_Accession_number));
    }
    if(m_Filing_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("filing_date")), m_Filing_date));
    }
    if(m_Report_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("report_date")), m_Report_date));
    }
    if(m_Acceptance_date_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("acceptance_date_time")), m_Acceptance_date_time));
    }
    if(m_ActIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("act")), m_Act));
    }
    if(m_FormIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("form")), m_Form));
    }
    if(m_File_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("file_number")), m_File_number));
    }
    if(m_Film_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("film_number")), m_Film_number));
    }
    if(m_ItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("items")), m_Items));
    }
    if(m_Core_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("core_type")), m_Core_type));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size")), m_Size));
    }
    if(m_Is_xbrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_xbrl")), m_Is_xbrl));
    }
    if(m_Is_inline_xbrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_inline_xbrl")), m_Is_inline_xbrl));
    }
    if(m_Primary_documentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("primary_document")), m_Primary_document));
    }
    if(m_Primary_doc_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("primary_doc_description")), m_Primary_doc_description));
    }
    if(m_Source_fileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("source_file")), m_Source_file));
    }
}

bool DTO_FilingMetadataDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("cik"))))
    {
        int64_t refVal_setCik;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cik"))), refVal_setCik );
        setCik(refVal_setCik);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accession_number"))))
    {
        utility::string_t refVal_setAccessionNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accession_number"))), refVal_setAccessionNumber );
        setAccessionNumber(refVal_setAccessionNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("filing_date"))))
    {
        utility::datetime refVal_setFilingDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("filing_date"))), refVal_setFilingDate );
        setFilingDate(refVal_setFilingDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("report_date"))))
    {
        utility::datetime refVal_setReportDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("report_date"))), refVal_setReportDate );
        setReportDate(refVal_setReportDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("acceptance_date_time"))))
    {
        utility::datetime refVal_setAcceptanceDateTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("acceptance_date_time"))), refVal_setAcceptanceDateTime );
        setAcceptanceDateTime(refVal_setAcceptanceDateTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("act"))))
    {
        utility::string_t refVal_setAct;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("act"))), refVal_setAct );
        setAct(refVal_setAct);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("form"))))
    {
        utility::string_t refVal_setForm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("form"))), refVal_setForm );
        setForm(refVal_setForm);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("file_number"))))
    {
        utility::string_t refVal_setFileNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("file_number"))), refVal_setFileNumber );
        setFileNumber(refVal_setFileNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("film_number"))))
    {
        utility::string_t refVal_setFilmNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("film_number"))), refVal_setFilmNumber );
        setFilmNumber(refVal_setFilmNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("items"))))
    {
        utility::string_t refVal_setItems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("items"))), refVal_setItems );
        setItems(refVal_setItems);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("core_type"))))
    {
        utility::string_t refVal_setCoreType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("core_type"))), refVal_setCoreType );
        setCoreType(refVal_setCoreType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("size"))))
    {
        int32_t refVal_setSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size"))), refVal_setSize );
        setSize(refVal_setSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_xbrl"))))
    {
        bool refVal_setIsXbrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_xbrl"))), refVal_setIsXbrl );
        setIsXbrl(refVal_setIsXbrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_inline_xbrl"))))
    {
        bool refVal_setIsInlineXbrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_inline_xbrl"))), refVal_setIsInlineXbrl );
        setIsInlineXbrl(refVal_setIsInlineXbrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("primary_document"))))
    {
        utility::string_t refVal_setPrimaryDocument;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("primary_document"))), refVal_setPrimaryDocument );
        setPrimaryDocument(refVal_setPrimaryDocument);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("primary_doc_description"))))
    {
        utility::string_t refVal_setPrimaryDocDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("primary_doc_description"))), refVal_setPrimaryDocDescription );
        setPrimaryDocDescription(refVal_setPrimaryDocDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("source_file"))))
    {
        utility::string_t refVal_setSourceFile;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("source_file"))), refVal_setSourceFile );
        setSourceFile(refVal_setSourceFile);
    }
    return ok;
}


int64_t DTO_FilingMetadataDto::getCik() const
{
    return m_Cik;
}

void DTO_FilingMetadataDto::setCik(int64_t value)
{
    m_Cik = value;
    m_CikIsSet = true;
}

bool DTO_FilingMetadataDto::cikIsSet() const
{
    return m_CikIsSet;
}

void DTO_FilingMetadataDto::unsetCik()
{
    m_CikIsSet = false;
}
utility::string_t DTO_FilingMetadataDto::getAccessionNumber() const
{
    return m_Accession_number;
}


void DTO_FilingMetadataDto::setAccessionNumber(const utility::string_t& value)
{
    m_Accession_number = value;
    m_Accession_numberIsSet = true;
}

bool DTO_FilingMetadataDto::accessionNumberIsSet() const
{
    return m_Accession_numberIsSet;
}

void DTO_FilingMetadataDto::unsetAccession_number()
{
    m_Accession_numberIsSet = false;
}
utility::datetime DTO_FilingMetadataDto::getFilingDate() const
{
    return m_Filing_date;
}


void DTO_FilingMetadataDto::setFilingDate(const utility::datetime& value)
{
    m_Filing_date = value;
    m_Filing_dateIsSet = true;
}

bool DTO_FilingMetadataDto::filingDateIsSet() const
{
    return m_Filing_dateIsSet;
}

void DTO_FilingMetadataDto::unsetFiling_date()
{
    m_Filing_dateIsSet = false;
}
utility::datetime DTO_FilingMetadataDto::getReportDate() const
{
    return m_Report_date;
}


void DTO_FilingMetadataDto::setReportDate(const utility::datetime& value)
{
    m_Report_date = value;
    m_Report_dateIsSet = true;
}

bool DTO_FilingMetadataDto::reportDateIsSet() const
{
    return m_Report_dateIsSet;
}

void DTO_FilingMetadataDto::unsetReport_date()
{
    m_Report_dateIsSet = false;
}
utility::datetime DTO_FilingMetadataDto::getAcceptanceDateTime() const
{
    return m_Acceptance_date_time;
}


void DTO_FilingMetadataDto::setAcceptanceDateTime(const utility::datetime& value)
{
    m_Acceptance_date_time = value;
    m_Acceptance_date_timeIsSet = true;
}

bool DTO_FilingMetadataDto::acceptanceDateTimeIsSet() const
{
    return m_Acceptance_date_timeIsSet;
}

void DTO_FilingMetadataDto::unsetAcceptance_date_time()
{
    m_Acceptance_date_timeIsSet = false;
}
utility::string_t DTO_FilingMetadataDto::getAct() const
{
    return m_Act;
}


void DTO_FilingMetadataDto::setAct(const utility::string_t& value)
{
    m_Act = value;
    m_ActIsSet = true;
}

bool DTO_FilingMetadataDto::actIsSet() const
{
    return m_ActIsSet;
}

void DTO_FilingMetadataDto::unsetAct()
{
    m_ActIsSet = false;
}
utility::string_t DTO_FilingMetadataDto::getForm() const
{
    return m_Form;
}


void DTO_FilingMetadataDto::setForm(const utility::string_t& value)
{
    m_Form = value;
    m_FormIsSet = true;
}

bool DTO_FilingMetadataDto::formIsSet() const
{
    return m_FormIsSet;
}

void DTO_FilingMetadataDto::unsetForm()
{
    m_FormIsSet = false;
}
utility::string_t DTO_FilingMetadataDto::getFileNumber() const
{
    return m_File_number;
}


void DTO_FilingMetadataDto::setFileNumber(const utility::string_t& value)
{
    m_File_number = value;
    m_File_numberIsSet = true;
}

bool DTO_FilingMetadataDto::fileNumberIsSet() const
{
    return m_File_numberIsSet;
}

void DTO_FilingMetadataDto::unsetFile_number()
{
    m_File_numberIsSet = false;
}
utility::string_t DTO_FilingMetadataDto::getFilmNumber() const
{
    return m_Film_number;
}


void DTO_FilingMetadataDto::setFilmNumber(const utility::string_t& value)
{
    m_Film_number = value;
    m_Film_numberIsSet = true;
}

bool DTO_FilingMetadataDto::filmNumberIsSet() const
{
    return m_Film_numberIsSet;
}

void DTO_FilingMetadataDto::unsetFilm_number()
{
    m_Film_numberIsSet = false;
}
utility::string_t DTO_FilingMetadataDto::getItems() const
{
    return m_Items;
}


void DTO_FilingMetadataDto::setItems(const utility::string_t& value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}

bool DTO_FilingMetadataDto::itemsIsSet() const
{
    return m_ItemsIsSet;
}

void DTO_FilingMetadataDto::unsetItems()
{
    m_ItemsIsSet = false;
}
utility::string_t DTO_FilingMetadataDto::getCoreType() const
{
    return m_Core_type;
}


void DTO_FilingMetadataDto::setCoreType(const utility::string_t& value)
{
    m_Core_type = value;
    m_Core_typeIsSet = true;
}

bool DTO_FilingMetadataDto::coreTypeIsSet() const
{
    return m_Core_typeIsSet;
}

void DTO_FilingMetadataDto::unsetCore_type()
{
    m_Core_typeIsSet = false;
}
int32_t DTO_FilingMetadataDto::getSize() const
{
    return m_Size;
}

void DTO_FilingMetadataDto::setSize(int32_t value)
{
    m_Size = value;
    m_SizeIsSet = true;
}

bool DTO_FilingMetadataDto::sizeIsSet() const
{
    return m_SizeIsSet;
}

void DTO_FilingMetadataDto::unsetSize()
{
    m_SizeIsSet = false;
}
bool DTO_FilingMetadataDto::isIsXbrl() const
{
    return m_Is_xbrl;
}

void DTO_FilingMetadataDto::setIsXbrl(bool value)
{
    m_Is_xbrl = value;
    m_Is_xbrlIsSet = true;
}

bool DTO_FilingMetadataDto::isXbrlIsSet() const
{
    return m_Is_xbrlIsSet;
}

void DTO_FilingMetadataDto::unsetIs_xbrl()
{
    m_Is_xbrlIsSet = false;
}
bool DTO_FilingMetadataDto::isIsInlineXbrl() const
{
    return m_Is_inline_xbrl;
}

void DTO_FilingMetadataDto::setIsInlineXbrl(bool value)
{
    m_Is_inline_xbrl = value;
    m_Is_inline_xbrlIsSet = true;
}

bool DTO_FilingMetadataDto::isInlineXbrlIsSet() const
{
    return m_Is_inline_xbrlIsSet;
}

void DTO_FilingMetadataDto::unsetIs_inline_xbrl()
{
    m_Is_inline_xbrlIsSet = false;
}
utility::string_t DTO_FilingMetadataDto::getPrimaryDocument() const
{
    return m_Primary_document;
}


void DTO_FilingMetadataDto::setPrimaryDocument(const utility::string_t& value)
{
    m_Primary_document = value;
    m_Primary_documentIsSet = true;
}

bool DTO_FilingMetadataDto::primaryDocumentIsSet() const
{
    return m_Primary_documentIsSet;
}

void DTO_FilingMetadataDto::unsetPrimary_document()
{
    m_Primary_documentIsSet = false;
}
utility::string_t DTO_FilingMetadataDto::getPrimaryDocDescription() const
{
    return m_Primary_doc_description;
}


void DTO_FilingMetadataDto::setPrimaryDocDescription(const utility::string_t& value)
{
    m_Primary_doc_description = value;
    m_Primary_doc_descriptionIsSet = true;
}

bool DTO_FilingMetadataDto::primaryDocDescriptionIsSet() const
{
    return m_Primary_doc_descriptionIsSet;
}

void DTO_FilingMetadataDto::unsetPrimary_doc_description()
{
    m_Primary_doc_descriptionIsSet = false;
}
utility::string_t DTO_FilingMetadataDto::getSourceFile() const
{
    return m_Source_file;
}


void DTO_FilingMetadataDto::setSourceFile(const utility::string_t& value)
{
    m_Source_file = value;
    m_Source_fileIsSet = true;
}

bool DTO_FilingMetadataDto::sourceFileIsSet() const
{
    return m_Source_fileIsSet;
}

void DTO_FilingMetadataDto::unsetSource_file()
{
    m_Source_fileIsSet = false;
}

}
}
}
}


