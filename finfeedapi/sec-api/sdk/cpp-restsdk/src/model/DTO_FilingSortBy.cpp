/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DTO_FilingSortBy.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

namespace
{
using EnumUnderlyingType = utility::string_t;

DTO_FilingSortBy::eDTO_FilingSortBy toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("AccessionNumber")))
        return DTO_FilingSortBy::eDTO_FilingSortBy::DTO_FilingSortBy_ACCESSIONNUMBER;
    if (val == utility::conversions::to_string_t(U("FilingDate")))
        return DTO_FilingSortBy::eDTO_FilingSortBy::DTO_FilingSortBy_FILINGDATE;
    if (val == utility::conversions::to_string_t(U("ReportDate")))
        return DTO_FilingSortBy::eDTO_FilingSortBy::DTO_FilingSortBy_REPORTDATE;
    if (val == utility::conversions::to_string_t(U("AcceptanceDateTime")))
        return DTO_FilingSortBy::eDTO_FilingSortBy::DTO_FilingSortBy_ACCEPTANCEDATETIME;
    if (val == utility::conversions::to_string_t(U("Size")))
        return DTO_FilingSortBy::eDTO_FilingSortBy::DTO_FilingSortBy_SIZE;
    return {};
}

EnumUnderlyingType fromEnum(DTO_FilingSortBy::eDTO_FilingSortBy e)
{
    switch (e)
    {
    case DTO_FilingSortBy::eDTO_FilingSortBy::DTO_FilingSortBy_ACCESSIONNUMBER:
        return U("AccessionNumber");
    case DTO_FilingSortBy::eDTO_FilingSortBy::DTO_FilingSortBy_FILINGDATE:
        return U("FilingDate");
    case DTO_FilingSortBy::eDTO_FilingSortBy::DTO_FilingSortBy_REPORTDATE:
        return U("ReportDate");
    case DTO_FilingSortBy::eDTO_FilingSortBy::DTO_FilingSortBy_ACCEPTANCEDATETIME:
        return U("AcceptanceDateTime");
    case DTO_FilingSortBy::eDTO_FilingSortBy::DTO_FilingSortBy_SIZE:
        return U("Size");
    default:
        break;
    }
    return {};
}
}

DTO_FilingSortBy::DTO_FilingSortBy()
{
}

DTO_FilingSortBy::~DTO_FilingSortBy()
{
}

void DTO_FilingSortBy::validate()
{
    // TODO: implement validation
}

web::json::value DTO_FilingSortBy::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool DTO_FilingSortBy::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void DTO_FilingSortBy::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool DTO_FilingSortBy::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

DTO_FilingSortBy::eDTO_FilingSortBy DTO_FilingSortBy::getValue() const
{
   return m_value;
}

void DTO_FilingSortBy::setValue(DTO_FilingSortBy::eDTO_FilingSortBy const value)
{
   m_value = value;
}

}
}
}
}


