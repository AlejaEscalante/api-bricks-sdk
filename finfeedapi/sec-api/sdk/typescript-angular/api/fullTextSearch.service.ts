/**
 * REST API
 *
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { DTOSecFilingResultDto } from '../model/dTOSecFilingResultDto';
// @ts-ignore
import { MvcProblemDetails } from '../model/mvcProblemDetails';
// @ts-ignore
import { MvcValidationProblemDetails } from '../model/mvcValidationProblemDetails';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class FullTextSearchService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Full-text search of SEC filing documents
     * Search across SEC filing documents with advanced filtering and sorting capabilities.    ### Available Sort Fields    Field Name | Description  -----------|-------------  AccessionNumber | SEC filing accession number  FormType | Type of the filing document  FilingDate | Date when filing was submitted  CompanyName | Name of the company  CIK | Central Index Key  DocumentFilename | Name of the filing document  DocumentDescription | Description of the document    ### Search Options    Option | Description  --------|-------------  text_contains | Keywords that must appear in the document  text_not_contain | Keywords that must not appear in the document    ### Date Format  All dates must be provided in YYYY-MM-DD format    :::tip  Use text_contains and text_not_contain with multiple keywords separated by commas for more precise searches  :::    :::note  The search is case-insensitive and supports partial word matches  :::
     * @param formType Filter by form type (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated
     * @param fillingDateStart Filter by filling date start (inclusive), format YYYY-MM-DD
     * @param fillingDateEnd Filter by filling date end (inclusive), format YYYY-MM-DD
     * @param textContains Keywords that the text must contain. Multiple values can be comma-separated
     * @param textNotContain Keywords that the text must not contain. Multiple values can be comma-separated
     * @param pageSize Number of results per page (default: 100)
     * @param pageNumber Page number to retrieve (default: 1)
     * @param sortBy Field to sort by (default: AccessionNumber)
     * @param sortOrder Sort order (asc or desc). Defaults to asc
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1FullTextGet(formType?: string, fillingDateStart?: string, fillingDateEnd?: string, textContains?: string, textNotContain?: string, pageSize?: number, pageNumber?: number, sortBy?: string, sortOrder?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<DTOSecFilingResultDto>>;
    public v1FullTextGet(formType?: string, fillingDateStart?: string, fillingDateEnd?: string, textContains?: string, textNotContain?: string, pageSize?: number, pageNumber?: number, sortBy?: string, sortOrder?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<DTOSecFilingResultDto>>>;
    public v1FullTextGet(formType?: string, fillingDateStart?: string, fillingDateEnd?: string, textContains?: string, textNotContain?: string, pageSize?: number, pageNumber?: number, sortBy?: string, sortOrder?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<DTOSecFilingResultDto>>>;
    public v1FullTextGet(formType?: string, fillingDateStart?: string, fillingDateEnd?: string, textContains?: string, textNotContain?: string, pageSize?: number, pageNumber?: number, sortBy?: string, sortOrder?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>formType, 'form_type');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>fillingDateStart, 'filling_date_start');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>fillingDateEnd, 'filling_date_end');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>textContains, 'text_contains');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>textNotContain, 'text_not_contain');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageSize, 'page_size');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageNumber, 'page_number');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sortBy, 'sort_by');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sortOrder, 'sort_order');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/full-text`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<DTOSecFilingResultDto>>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
