/*
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DTOSecFilingResultDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-14T11:10:17.800482560Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class DTOSecFilingResultDto {
  public static final String SERIALIZED_NAME_ACCESSION_NUMBER = "accession_number";
  @SerializedName(SERIALIZED_NAME_ACCESSION_NUMBER)
  @javax.annotation.Nullable
  private String accessionNumber;

  public static final String SERIALIZED_NAME_FORM_TYPE = "form_type";
  @SerializedName(SERIALIZED_NAME_FORM_TYPE)
  @javax.annotation.Nullable
  private String formType;

  public static final String SERIALIZED_NAME_FILING_DATE = "filing_date";
  @SerializedName(SERIALIZED_NAME_FILING_DATE)
  @javax.annotation.Nullable
  private LocalDate filingDate;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "company_name";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  @javax.annotation.Nullable
  private String companyName;

  public static final String SERIALIZED_NAME_CIK = "cik";
  @SerializedName(SERIALIZED_NAME_CIK)
  @javax.annotation.Nullable
  private Long cik;

  public static final String SERIALIZED_NAME_DOCUMENT_FILENAME = "document_filename";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_FILENAME)
  @javax.annotation.Nullable
  private String documentFilename;

  public static final String SERIALIZED_NAME_DOCUMENT_DESCRIPTION = "document_description";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_DESCRIPTION)
  @javax.annotation.Nullable
  private String documentDescription;

  public static final String SERIALIZED_NAME_SOURCE_FILE = "source_file";
  @SerializedName(SERIALIZED_NAME_SOURCE_FILE)
  @javax.annotation.Nullable
  private String sourceFile;

  public DTOSecFilingResultDto() {
  }

  public DTOSecFilingResultDto accessionNumber(@javax.annotation.Nullable String accessionNumber) {
    this.accessionNumber = accessionNumber;
    return this;
  }

  /**
   * Get accessionNumber
   * @return accessionNumber
   */
  @javax.annotation.Nullable
  public String getAccessionNumber() {
    return accessionNumber;
  }

  public void setAccessionNumber(@javax.annotation.Nullable String accessionNumber) {
    this.accessionNumber = accessionNumber;
  }


  public DTOSecFilingResultDto formType(@javax.annotation.Nullable String formType) {
    this.formType = formType;
    return this;
  }

  /**
   * Get formType
   * @return formType
   */
  @javax.annotation.Nullable
  public String getFormType() {
    return formType;
  }

  public void setFormType(@javax.annotation.Nullable String formType) {
    this.formType = formType;
  }


  public DTOSecFilingResultDto filingDate(@javax.annotation.Nullable LocalDate filingDate) {
    this.filingDate = filingDate;
    return this;
  }

  /**
   * Get filingDate
   * @return filingDate
   */
  @javax.annotation.Nullable
  public LocalDate getFilingDate() {
    return filingDate;
  }

  public void setFilingDate(@javax.annotation.Nullable LocalDate filingDate) {
    this.filingDate = filingDate;
  }


  public DTOSecFilingResultDto companyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Get companyName
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(@javax.annotation.Nullable String companyName) {
    this.companyName = companyName;
  }


  public DTOSecFilingResultDto cik(@javax.annotation.Nullable Long cik) {
    this.cik = cik;
    return this;
  }

  /**
   * Get cik
   * @return cik
   */
  @javax.annotation.Nullable
  public Long getCik() {
    return cik;
  }

  public void setCik(@javax.annotation.Nullable Long cik) {
    this.cik = cik;
  }


  public DTOSecFilingResultDto documentFilename(@javax.annotation.Nullable String documentFilename) {
    this.documentFilename = documentFilename;
    return this;
  }

  /**
   * Get documentFilename
   * @return documentFilename
   */
  @javax.annotation.Nullable
  public String getDocumentFilename() {
    return documentFilename;
  }

  public void setDocumentFilename(@javax.annotation.Nullable String documentFilename) {
    this.documentFilename = documentFilename;
  }


  public DTOSecFilingResultDto documentDescription(@javax.annotation.Nullable String documentDescription) {
    this.documentDescription = documentDescription;
    return this;
  }

  /**
   * Get documentDescription
   * @return documentDescription
   */
  @javax.annotation.Nullable
  public String getDocumentDescription() {
    return documentDescription;
  }

  public void setDocumentDescription(@javax.annotation.Nullable String documentDescription) {
    this.documentDescription = documentDescription;
  }


  public DTOSecFilingResultDto sourceFile(@javax.annotation.Nullable String sourceFile) {
    this.sourceFile = sourceFile;
    return this;
  }

  /**
   * Get sourceFile
   * @return sourceFile
   */
  @javax.annotation.Nullable
  public String getSourceFile() {
    return sourceFile;
  }

  public void setSourceFile(@javax.annotation.Nullable String sourceFile) {
    this.sourceFile = sourceFile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DTOSecFilingResultDto dtOSecFilingResultDto = (DTOSecFilingResultDto) o;
    return Objects.equals(this.accessionNumber, dtOSecFilingResultDto.accessionNumber) &&
        Objects.equals(this.formType, dtOSecFilingResultDto.formType) &&
        Objects.equals(this.filingDate, dtOSecFilingResultDto.filingDate) &&
        Objects.equals(this.companyName, dtOSecFilingResultDto.companyName) &&
        Objects.equals(this.cik, dtOSecFilingResultDto.cik) &&
        Objects.equals(this.documentFilename, dtOSecFilingResultDto.documentFilename) &&
        Objects.equals(this.documentDescription, dtOSecFilingResultDto.documentDescription) &&
        Objects.equals(this.sourceFile, dtOSecFilingResultDto.sourceFile);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessionNumber, formType, filingDate, companyName, cik, documentFilename, documentDescription, sourceFile);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DTOSecFilingResultDto {\n");
    sb.append("    accessionNumber: ").append(toIndentedString(accessionNumber)).append("\n");
    sb.append("    formType: ").append(toIndentedString(formType)).append("\n");
    sb.append("    filingDate: ").append(toIndentedString(filingDate)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    cik: ").append(toIndentedString(cik)).append("\n");
    sb.append("    documentFilename: ").append(toIndentedString(documentFilename)).append("\n");
    sb.append("    documentDescription: ").append(toIndentedString(documentDescription)).append("\n");
    sb.append("    sourceFile: ").append(toIndentedString(sourceFile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accession_number");
    openapiFields.add("form_type");
    openapiFields.add("filing_date");
    openapiFields.add("company_name");
    openapiFields.add("cik");
    openapiFields.add("document_filename");
    openapiFields.add("document_description");
    openapiFields.add("source_file");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DTOSecFilingResultDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DTOSecFilingResultDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DTOSecFilingResultDto is not found in the empty JSON string", DTOSecFilingResultDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DTOSecFilingResultDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DTOSecFilingResultDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accession_number") != null && !jsonObj.get("accession_number").isJsonNull()) && !jsonObj.get("accession_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accession_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accession_number").toString()));
      }
      if ((jsonObj.get("form_type") != null && !jsonObj.get("form_type").isJsonNull()) && !jsonObj.get("form_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `form_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("form_type").toString()));
      }
      if ((jsonObj.get("company_name") != null && !jsonObj.get("company_name").isJsonNull()) && !jsonObj.get("company_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_name").toString()));
      }
      if ((jsonObj.get("document_filename") != null && !jsonObj.get("document_filename").isJsonNull()) && !jsonObj.get("document_filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_filename").toString()));
      }
      if ((jsonObj.get("document_description") != null && !jsonObj.get("document_description").isJsonNull()) && !jsonObj.get("document_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_description").toString()));
      }
      if ((jsonObj.get("source_file") != null && !jsonObj.get("source_file").isJsonNull()) && !jsonObj.get("source_file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_file").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DTOSecFilingResultDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DTOSecFilingResultDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DTOSecFilingResultDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DTOSecFilingResultDto.class));

       return (TypeAdapter<T>) new TypeAdapter<DTOSecFilingResultDto>() {
           @Override
           public void write(JsonWriter out, DTOSecFilingResultDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DTOSecFilingResultDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DTOSecFilingResultDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DTOSecFilingResultDto
   * @throws IOException if the JSON string is invalid with respect to DTOSecFilingResultDto
   */
  public static DTOSecFilingResultDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DTOSecFilingResultDto.class);
  }

  /**
   * Convert an instance of DTOSecFilingResultDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

