=begin comment

REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Contact: support@apibricks.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::FullTextSearchApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# v1_full_text_get
#
# Full-text search of SEC filing documents
#
# @param string $form_type Filter by form type (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated (optional)
# @param string $filling_date_start Filter by filling date start (inclusive), format YYYY-MM-DD (optional)
# @param string $filling_date_end Filter by filling date end (inclusive), format YYYY-MM-DD (optional)
# @param string $text_contains Keywords that the text must contain. Multiple values can be comma-separated (optional)
# @param string $text_not_contain Keywords that the text must not contain. Multiple values can be comma-separated (optional)
# @param int $page_size Number of results per page (default: 100) (optional)
# @param int $page_number Page number to retrieve (default: 1) (optional)
# @param string $sort_by Field to sort by (default: AccessionNumber) (optional, default to 'AccessionNumber')
# @param string $sort_order Sort order (asc or desc). Defaults to asc (optional, default to 'asc')
{
    my $params = {
    'form_type' => {
        data_type => 'string',
        description => 'Filter by form type (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated',
        required => '0',
    },
    'filling_date_start' => {
        data_type => 'string',
        description => 'Filter by filling date start (inclusive), format YYYY-MM-DD',
        required => '0',
    },
    'filling_date_end' => {
        data_type => 'string',
        description => 'Filter by filling date end (inclusive), format YYYY-MM-DD',
        required => '0',
    },
    'text_contains' => {
        data_type => 'string',
        description => 'Keywords that the text must contain. Multiple values can be comma-separated',
        required => '0',
    },
    'text_not_contain' => {
        data_type => 'string',
        description => 'Keywords that the text must not contain. Multiple values can be comma-separated',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Number of results per page (default: 100)',
        required => '0',
    },
    'page_number' => {
        data_type => 'int',
        description => 'Page number to retrieve (default: 1)',
        required => '0',
    },
    'sort_by' => {
        data_type => 'string',
        description => 'Field to sort by (default: AccessionNumber)',
        required => '0',
    },
    'sort_order' => {
        data_type => 'string',
        description => 'Sort order (asc or desc). Defaults to asc',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1_full_text_get' } = {
        summary => 'Full-text search of SEC filing documents',
        params => $params,
        returns => 'ARRAY[DTOSecFilingResultDto]',
        };
}
# @return ARRAY[DTOSecFilingResultDto]
#
sub v1_full_text_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/full-text';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'form_type'}) {
        $query_params->{'form_type'} = $self->{api_client}->to_query_value($args{'form_type'});
    }

    # query params
    if ( exists $args{'filling_date_start'}) {
        $query_params->{'filling_date_start'} = $self->{api_client}->to_query_value($args{'filling_date_start'});
    }

    # query params
    if ( exists $args{'filling_date_end'}) {
        $query_params->{'filling_date_end'} = $self->{api_client}->to_query_value($args{'filling_date_end'});
    }

    # query params
    if ( exists $args{'text_contains'}) {
        $query_params->{'text_contains'} = $self->{api_client}->to_query_value($args{'text_contains'});
    }

    # query params
    if ( exists $args{'text_not_contain'}) {
        $query_params->{'text_not_contain'} = $self->{api_client}->to_query_value($args{'text_not_contain'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'page_size'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # query params
    if ( exists $args{'page_number'}) {
        $query_params->{'page_number'} = $self->{api_client}->to_query_value($args{'page_number'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'sort_order'}) {
        $query_params->{'sort_order'} = $self->{api_client}->to_query_value($args{'sort_order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DTOSecFilingResultDto]', $response);
    return $_response_object;
}

1;
