{-
   REST API
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   The version of the OpenAPI document: v1
   Contact: support@apibricks.io

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( DTOExtractorType(..), dTOExtractorTypeVariants
    , DTOFilingExtractResultDto
    , DTOFilingItemDto
    , DTOFilingMetadataDto
    , DTOFilingSortBy(..), dTOFilingSortByVariants
    , DTOSecFilingResultDto
    , MvcProblemDetails
    , MvcValidationProblemDetails
    , encodeDTOExtractorType
    , encodeDTOFilingExtractResultDto
    , encodeDTOFilingItemDto
    , encodeDTOFilingMetadataDto
    , encodeDTOFilingSortBy
    , encodeDTOSecFilingResultDto
    , encodeMvcProblemDetails
    , encodeMvcValidationProblemDetails
    , stringFromDTOExtractorType
    , stringFromDTOFilingSortBy
    , dTOExtractorTypeDecoder
    , dTOFilingExtractResultDtoDecoder
    , dTOFilingItemDtoDecoder
    , dTOFilingMetadataDtoDecoder
    , dTOFilingSortByDecoder
    , dTOSecFilingResultDtoDecoder
    , mvcProblemDetailsDecoder
    , mvcValidationProblemDetailsDecoder
    )

import Api
import Api.Time exposing (Posix)
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type DTOExtractorType
    = DTOExtractorTypeText
    | DTOExtractorTypeHtml


dTOExtractorTypeVariants : List DTOExtractorType
dTOExtractorTypeVariants =
    [ DTOExtractorTypeText
    , DTOExtractorTypeHtml
    ]


{-| Represents the result of a filing extraction.
-}
type alias DTOFilingExtractResultDto =
    { accessionNumber : Maybe String
    , formType : Maybe String
    , items : Maybe ( List DTOFilingItemDto )
    }


type alias DTOFilingItemDto =
    { itemNumber : Maybe String
    , itemTitle : Maybe String
    , content : Maybe String
    }


{-| Represents the response for a single SEC filing metadata record.  Maps fields from the edgar_submissions table.
-}
type alias DTOFilingMetadataDto =
    { cik : Maybe Int
    , accessionNumber : Maybe String
    , filingDate : Maybe Posix
    , reportDate : Maybe Posix
    , acceptanceDateTime : Maybe Posix
    , act : Maybe String
    , form : Maybe String
    , fileNumber : Maybe String
    , filmNumber : Maybe String
    , items : Maybe String
    , coreType : Maybe String
    , size : Maybe Int
    , isXbrl : Maybe Bool
    , isInlineXbrl : Maybe Bool
    , primaryDocument : Maybe String
    , primaryDocDescription : Maybe String
    , sourceFile : Maybe String
    }


{-| Defines sorting options for the filing query.
-}
type DTOFilingSortBy
    = DTOFilingSortByAccessionNumber
    | DTOFilingSortByFilingDate
    | DTOFilingSortByReportDate
    | DTOFilingSortByAcceptanceDateTime
    | DTOFilingSortBySize


dTOFilingSortByVariants : List DTOFilingSortBy
dTOFilingSortByVariants =
    [ DTOFilingSortByAccessionNumber
    , DTOFilingSortByFilingDate
    , DTOFilingSortByReportDate
    , DTOFilingSortByAcceptanceDateTime
    , DTOFilingSortBySize
    ]


type alias DTOSecFilingResultDto =
    { accessionNumber : Maybe String
    , formType : Maybe String
    , filingDate : Maybe Posix
    , companyName : Maybe String
    , cik : Maybe Int
    , documentFilename : Maybe String
    , documentDescription : Maybe String
    , sourceFile : Maybe String
    }


type alias MvcProblemDetails =
    { type_ : Maybe String
    , title : Maybe String
    , status : Maybe Int
    , detail : Maybe String
    , instance : Maybe String
    }


type alias MvcValidationProblemDetails =
    { type_ : Maybe String
    , title : Maybe String
    , status : Maybe Int
    , detail : Maybe String
    , instance : Maybe String
    , errors : Maybe ( Dict.Dict String (List String) )
    }


-- ENCODER


stringFromDTOExtractorType : DTOExtractorType -> String
stringFromDTOExtractorType model =
    case model of
        DTOExtractorTypeText ->
            "text"

        DTOExtractorTypeHtml ->
            "html"


encodeDTOExtractorType : DTOExtractorType -> Json.Encode.Value
encodeDTOExtractorType =
    Json.Encode.string << stringFromDTOExtractorType


encodeDTOFilingExtractResultDto : DTOFilingExtractResultDto -> Json.Encode.Value
encodeDTOFilingExtractResultDto =
    encodeObject << encodeDTOFilingExtractResultDtoPairs


encodeDTOFilingExtractResultDtoWithTag : ( String, String ) -> DTOFilingExtractResultDto -> Json.Encode.Value
encodeDTOFilingExtractResultDtoWithTag (tagField, tag) model =
    encodeObject (encodeDTOFilingExtractResultDtoPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDTOFilingExtractResultDtoPairs : DTOFilingExtractResultDto -> List EncodedField
encodeDTOFilingExtractResultDtoPairs model =
    let
        pairs =
            [ maybeEncodeNullable "accession_number" Json.Encode.string model.accessionNumber
            , maybeEncodeNullable "form_type" Json.Encode.string model.formType
            , maybeEncodeNullable "items" (Json.Encode.list encodeDTOFilingItemDto) model.items
            ]
    in
    pairs


encodeDTOFilingItemDto : DTOFilingItemDto -> Json.Encode.Value
encodeDTOFilingItemDto =
    encodeObject << encodeDTOFilingItemDtoPairs


encodeDTOFilingItemDtoWithTag : ( String, String ) -> DTOFilingItemDto -> Json.Encode.Value
encodeDTOFilingItemDtoWithTag (tagField, tag) model =
    encodeObject (encodeDTOFilingItemDtoPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDTOFilingItemDtoPairs : DTOFilingItemDto -> List EncodedField
encodeDTOFilingItemDtoPairs model =
    let
        pairs =
            [ maybeEncodeNullable "item_number" Json.Encode.string model.itemNumber
            , maybeEncodeNullable "item_title" Json.Encode.string model.itemTitle
            , maybeEncodeNullable "content" Json.Encode.string model.content
            ]
    in
    pairs


encodeDTOFilingMetadataDto : DTOFilingMetadataDto -> Json.Encode.Value
encodeDTOFilingMetadataDto =
    encodeObject << encodeDTOFilingMetadataDtoPairs


encodeDTOFilingMetadataDtoWithTag : ( String, String ) -> DTOFilingMetadataDto -> Json.Encode.Value
encodeDTOFilingMetadataDtoWithTag (tagField, tag) model =
    encodeObject (encodeDTOFilingMetadataDtoPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDTOFilingMetadataDtoPairs : DTOFilingMetadataDto -> List EncodedField
encodeDTOFilingMetadataDtoPairs model =
    let
        pairs =
            [ maybeEncode "cik" Json.Encode.int model.cik
            , maybeEncodeNullable "accession_number" Json.Encode.string model.accessionNumber
            , maybeEncode "filing_date" Api.Time.encodeDate model.filingDate
            , maybeEncodeNullable "report_date" Api.Time.encodeDate model.reportDate
            , maybeEncodeNullable "acceptance_date_time" Api.Time.encodeDateTime model.acceptanceDateTime
            , maybeEncodeNullable "act" Json.Encode.string model.act
            , maybeEncodeNullable "form" Json.Encode.string model.form
            , maybeEncodeNullable "file_number" Json.Encode.string model.fileNumber
            , maybeEncodeNullable "film_number" Json.Encode.string model.filmNumber
            , maybeEncodeNullable "items" Json.Encode.string model.items
            , maybeEncodeNullable "core_type" Json.Encode.string model.coreType
            , maybeEncodeNullable "size" Json.Encode.int model.size
            , maybeEncodeNullable "is_xbrl" Json.Encode.bool model.isXbrl
            , maybeEncodeNullable "is_inline_xbrl" Json.Encode.bool model.isInlineXbrl
            , maybeEncodeNullable "primary_document" Json.Encode.string model.primaryDocument
            , maybeEncodeNullable "primary_doc_description" Json.Encode.string model.primaryDocDescription
            , maybeEncodeNullable "source_file" Json.Encode.string model.sourceFile
            ]
    in
    pairs


stringFromDTOFilingSortBy : DTOFilingSortBy -> String
stringFromDTOFilingSortBy model =
    case model of
        DTOFilingSortByAccessionNumber ->
            "AccessionNumber"

        DTOFilingSortByFilingDate ->
            "FilingDate"

        DTOFilingSortByReportDate ->
            "ReportDate"

        DTOFilingSortByAcceptanceDateTime ->
            "AcceptanceDateTime"

        DTOFilingSortBySize ->
            "Size"


encodeDTOFilingSortBy : DTOFilingSortBy -> Json.Encode.Value
encodeDTOFilingSortBy =
    Json.Encode.string << stringFromDTOFilingSortBy


encodeDTOSecFilingResultDto : DTOSecFilingResultDto -> Json.Encode.Value
encodeDTOSecFilingResultDto =
    encodeObject << encodeDTOSecFilingResultDtoPairs


encodeDTOSecFilingResultDtoWithTag : ( String, String ) -> DTOSecFilingResultDto -> Json.Encode.Value
encodeDTOSecFilingResultDtoWithTag (tagField, tag) model =
    encodeObject (encodeDTOSecFilingResultDtoPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDTOSecFilingResultDtoPairs : DTOSecFilingResultDto -> List EncodedField
encodeDTOSecFilingResultDtoPairs model =
    let
        pairs =
            [ maybeEncodeNullable "accession_number" Json.Encode.string model.accessionNumber
            , maybeEncodeNullable "form_type" Json.Encode.string model.formType
            , maybeEncode "filing_date" Api.Time.encodeDate model.filingDate
            , maybeEncodeNullable "company_name" Json.Encode.string model.companyName
            , maybeEncode "cik" Json.Encode.int model.cik
            , maybeEncodeNullable "document_filename" Json.Encode.string model.documentFilename
            , maybeEncodeNullable "document_description" Json.Encode.string model.documentDescription
            , maybeEncodeNullable "source_file" Json.Encode.string model.sourceFile
            ]
    in
    pairs


encodeMvcProblemDetails : MvcProblemDetails -> Json.Encode.Value
encodeMvcProblemDetails =
    encodeObject << encodeMvcProblemDetailsPairs


encodeMvcProblemDetailsWithTag : ( String, String ) -> MvcProblemDetails -> Json.Encode.Value
encodeMvcProblemDetailsWithTag (tagField, tag) model =
    encodeObject (encodeMvcProblemDetailsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMvcProblemDetailsPairs : MvcProblemDetails -> List EncodedField
encodeMvcProblemDetailsPairs model =
    let
        pairs =
            [ maybeEncodeNullable "type" Json.Encode.string model.type_
            , maybeEncodeNullable "title" Json.Encode.string model.title
            , maybeEncodeNullable "status" Json.Encode.int model.status
            , maybeEncodeNullable "detail" Json.Encode.string model.detail
            , maybeEncodeNullable "instance" Json.Encode.string model.instance
            ]
    in
    pairs


encodeMvcValidationProblemDetails : MvcValidationProblemDetails -> Json.Encode.Value
encodeMvcValidationProblemDetails =
    encodeObject << encodeMvcValidationProblemDetailsPairs


encodeMvcValidationProblemDetailsWithTag : ( String, String ) -> MvcValidationProblemDetails -> Json.Encode.Value
encodeMvcValidationProblemDetailsWithTag (tagField, tag) model =
    encodeObject (encodeMvcValidationProblemDetailsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMvcValidationProblemDetailsPairs : MvcValidationProblemDetails -> List EncodedField
encodeMvcValidationProblemDetailsPairs model =
    let
        pairs =
            [ maybeEncodeNullable "type" Json.Encode.string model.type_
            , maybeEncodeNullable "title" Json.Encode.string model.title
            , maybeEncodeNullable "status" Json.Encode.int model.status
            , maybeEncodeNullable "detail" Json.Encode.string model.detail
            , maybeEncodeNullable "instance" Json.Encode.string model.instance
            , maybeEncodeNullable "errors" (Json.Encode.dict identity (Json.Encode.list Json.Encode.string)) model.errors
            ]
    in
    pairs


-- DECODER


dTOExtractorTypeDecoder : Json.Decode.Decoder DTOExtractorType
dTOExtractorTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "text" ->
                        Json.Decode.succeed DTOExtractorTypeText

                    "html" ->
                        Json.Decode.succeed DTOExtractorTypeHtml

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


dTOFilingExtractResultDtoDecoder : Json.Decode.Decoder DTOFilingExtractResultDto
dTOFilingExtractResultDtoDecoder =
    Json.Decode.succeed DTOFilingExtractResultDto
        |> maybeDecodeNullable "accession_number" Json.Decode.string Nothing
        |> maybeDecodeNullable "form_type" Json.Decode.string Nothing
        |> maybeDecodeNullable "items" (Json.Decode.list dTOFilingItemDtoDecoder) Nothing


dTOFilingItemDtoDecoder : Json.Decode.Decoder DTOFilingItemDto
dTOFilingItemDtoDecoder =
    Json.Decode.succeed DTOFilingItemDto
        |> maybeDecodeNullable "item_number" Json.Decode.string Nothing
        |> maybeDecodeNullable "item_title" Json.Decode.string Nothing
        |> maybeDecodeNullable "content" Json.Decode.string Nothing


dTOFilingMetadataDtoDecoder : Json.Decode.Decoder DTOFilingMetadataDto
dTOFilingMetadataDtoDecoder =
    Json.Decode.succeed DTOFilingMetadataDto
        |> maybeDecode "cik" Json.Decode.int Nothing
        |> maybeDecodeNullable "accession_number" Json.Decode.string Nothing
        |> maybeDecode "filing_date" Api.Time.dateDecoder Nothing
        |> maybeDecodeNullable "report_date" Api.Time.dateDecoder Nothing
        |> maybeDecodeNullable "acceptance_date_time" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "act" Json.Decode.string Nothing
        |> maybeDecodeNullable "form" Json.Decode.string Nothing
        |> maybeDecodeNullable "file_number" Json.Decode.string Nothing
        |> maybeDecodeNullable "film_number" Json.Decode.string Nothing
        |> maybeDecodeNullable "items" Json.Decode.string Nothing
        |> maybeDecodeNullable "core_type" Json.Decode.string Nothing
        |> maybeDecodeNullable "size" Json.Decode.int Nothing
        |> maybeDecodeNullable "is_xbrl" Json.Decode.bool Nothing
        |> maybeDecodeNullable "is_inline_xbrl" Json.Decode.bool Nothing
        |> maybeDecodeNullable "primary_document" Json.Decode.string Nothing
        |> maybeDecodeNullable "primary_doc_description" Json.Decode.string Nothing
        |> maybeDecodeNullable "source_file" Json.Decode.string Nothing


dTOFilingSortByDecoder : Json.Decode.Decoder DTOFilingSortBy
dTOFilingSortByDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "AccessionNumber" ->
                        Json.Decode.succeed DTOFilingSortByAccessionNumber

                    "FilingDate" ->
                        Json.Decode.succeed DTOFilingSortByFilingDate

                    "ReportDate" ->
                        Json.Decode.succeed DTOFilingSortByReportDate

                    "AcceptanceDateTime" ->
                        Json.Decode.succeed DTOFilingSortByAcceptanceDateTime

                    "Size" ->
                        Json.Decode.succeed DTOFilingSortBySize

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


dTOSecFilingResultDtoDecoder : Json.Decode.Decoder DTOSecFilingResultDto
dTOSecFilingResultDtoDecoder =
    Json.Decode.succeed DTOSecFilingResultDto
        |> maybeDecodeNullable "accession_number" Json.Decode.string Nothing
        |> maybeDecodeNullable "form_type" Json.Decode.string Nothing
        |> maybeDecode "filing_date" Api.Time.dateDecoder Nothing
        |> maybeDecodeNullable "company_name" Json.Decode.string Nothing
        |> maybeDecode "cik" Json.Decode.int Nothing
        |> maybeDecodeNullable "document_filename" Json.Decode.string Nothing
        |> maybeDecodeNullable "document_description" Json.Decode.string Nothing
        |> maybeDecodeNullable "source_file" Json.Decode.string Nothing


mvcProblemDetailsDecoder : Json.Decode.Decoder MvcProblemDetails
mvcProblemDetailsDecoder =
    Json.Decode.succeed MvcProblemDetails
        |> maybeDecodeNullable "type" Json.Decode.string Nothing
        |> maybeDecodeNullable "title" Json.Decode.string Nothing
        |> maybeDecodeNullable "status" Json.Decode.int Nothing
        |> maybeDecodeNullable "detail" Json.Decode.string Nothing
        |> maybeDecodeNullable "instance" Json.Decode.string Nothing


mvcValidationProblemDetailsDecoder : Json.Decode.Decoder MvcValidationProblemDetails
mvcValidationProblemDetailsDecoder =
    Json.Decode.succeed MvcValidationProblemDetails
        |> maybeDecodeNullable "type" Json.Decode.string Nothing
        |> maybeDecodeNullable "title" Json.Decode.string Nothing
        |> maybeDecodeNullable "status" Json.Decode.int Nothing
        |> maybeDecodeNullable "detail" Json.Decode.string Nothing
        |> maybeDecodeNullable "instance" Json.Decode.string Nothing
        |> maybeDecodeNullable "errors" (Json.Decode.dict (Json.Decode.list Json.Decode.string)) Nothing




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f