/**
 * FX Historical REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.ExchangeRate
import org.openapitools.client.model.ExchangeRates
import org.openapitools.client.model.ExchangeRatesTimeseriesItem
import org.openapitools.client.model.TimeseriesPeriod
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object ExchangeRatesApi {

  def apply(baseUrl: String = "https://api-historical.fx.finfeedapi.com") = new ExchangeRatesApi(baseUrl)
}

class ExchangeRatesApi(baseUrl: String) {

  /**
   * Retrieves the exchange rate for a specific base and quote asset at a given time or the current rate.                :::info  If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements.  :::
   * 
   * Expected answers:
   *   code 200 : ExchangeRate (successful operation)
   * 
   * Available security schemes:
   *   APIKey (apiKey)
   * 
   * @param assetIdBase Requested exchange rate base asset identifier (from the Metadata -> Assets)
   * @param assetIdQuote Requested exchange rate quote asset identifier (from the Metadata -> Assets)
   * @param time Time at which exchange rate is calculated (optional, if not supplied then current rate is returned)
   */
  def getSpecificRate(assetIdBase: String, assetIdQuote: String, time: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[ExchangeRate] =
    ApiRequest[ExchangeRate](ApiMethods.GET, baseUrl, "/v1/exchangerate/{asset_id_base}/{asset_id_quote}", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withQueryParam("time", time)
      .withPathParam("asset_id_base", assetIdBase)
      .withPathParam("asset_id_quote", assetIdQuote)
      .withSuccessResponse[ExchangeRate](200)
      

  /**
   * Get the historical exchange rates between two assets in the form of the timeseries.
   * 
   * Expected answers:
   *   code 200 : Seq[ExchangeRatesTimeseriesItem] (successful operation)
   * 
   * Available security schemes:
   *   APIKey (apiKey)
   * 
   * @param assetIdBase Requested exchange rates base asset identifier (from the Metadata -> Assets)
   * @param assetIdQuote Requested exchange rates base asset identifier (from the Metadata -> Assets)
   * @param periodId Identifier of requested timeseries period (required, e.g. `5SEC` or `1HRS`)
   * @param timeStart Timeseries starting time in ISO 8601 (required)
   * @param timeEnd Timeseries ending time in ISO 8601 (required)
   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   */
  def v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGet(assetIdBase: String, assetIdQuote: String, periodId: Option[String] = None, timeStart: Option[String] = None, timeEnd: Option[String] = None, limit: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[ExchangeRatesTimeseriesItem]] =
    ApiRequest[Seq[ExchangeRatesTimeseriesItem]](ApiMethods.GET, baseUrl, "/v1/exchangerate/{asset_id_base}/{asset_id_quote}/history", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withQueryParam("period_id", periodId)
      .withQueryParam("time_start", timeStart)
      .withQueryParam("time_end", timeEnd)
      .withQueryParam("limit", limit)
      .withPathParam("asset_id_base", assetIdBase)
      .withPathParam("asset_id_quote", assetIdQuote)
      .withSuccessResponse[Seq[ExchangeRatesTimeseriesItem]](200)
      

  /**
   * Get the current exchange rate between requested asset and all other assets.                :::info  If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements.  :::                :::info  You can invert the rates by using Y = 1 / X equation, for example BTC/USD = 1 / (USD/BTC);  :::
   * 
   * Expected answers:
   *   code 200 : ExchangeRates (successful operation)
   * 
   * Available security schemes:
   *   APIKey (apiKey)
   * 
   * @param assetIdBase Requested exchange rates base asset identifier (from the Metadata -> Assets)
   * @param filterAssetId Comma or semicolon delimited asset identifiers used to filter response (optional)
   * @param invert True will invert all the rates (optional, if true then rates will be calculated as `rate = 1 / actual_rate` eg. `USD/BTC` as `BTC/USD`)
   * @param time Time for historical rates (optional)
   */
  def v1ExchangerateAssetIdBaseGet(assetIdBase: String, filterAssetId: Option[String] = None, invert: Option[Boolean] = None, time: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[ExchangeRates] =
    ApiRequest[ExchangeRates](ApiMethods.GET, baseUrl, "/v1/exchangerate/{asset_id_base}", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withQueryParam("filter_asset_id", filterAssetId)
      .withQueryParam("invert", invert)
      .withQueryParam("time", time)
      .withPathParam("asset_id_base", assetIdBase)
      .withSuccessResponse[ExchangeRates](200)
      

  /**
   * You can also obtain historical exchange rates of any asset pair, grouped into time periods.  Get full list of supported time periods available for requesting exchange rates historical timeseries data.                ## Timeseries periods  Time unit | Period identifiers  --- | ---  Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC  Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN  Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS  Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY
   * 
   * Expected answers:
   *   code 200 : Seq[TimeseriesPeriod] (successful operation)
   * 
   * Available security schemes:
   *   APIKey (apiKey)
   */
  def v1ExchangerateHistoryPeriodsGet()(implicit apiKey: ApiKeyValue): ApiRequest[Seq[TimeseriesPeriod]] =
    ApiRequest[Seq[TimeseriesPeriod]](ApiMethods.GET, baseUrl, "/v1/exchangerate/history/periods", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withSuccessResponse[Seq[TimeseriesPeriod]](200)
      



}

