/*
 * FX Historical REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.V1ExchangeRate;
import org.openapitools.client.model.V1ExchangeRates;
import org.openapitools.client.model.V1ExchangeRatesTimeseriesItem;
import org.openapitools.client.model.V1TimeseriesPeriod;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExchangeRatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExchangeRatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExchangeRatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getSpecificRate
     * @param assetIdBase Requested exchange rate base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param assetIdQuote Requested exchange rate quote asset identifier (from the Metadata -&gt; Assets) (required)
     * @param time Time at which exchange rate is calculated (optional, if not supplied then current rate is returned) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpecificRateCall(@javax.annotation.Nonnull String assetIdBase, @javax.annotation.Nonnull String assetIdQuote, @javax.annotation.Nullable String time, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/exchangerate/{asset_id_base}/{asset_id_quote}"
            .replace("{" + "asset_id_base" + "}", localVarApiClient.escapeString(assetIdBase.toString()))
            .replace("{" + "asset_id_quote" + "}", localVarApiClient.escapeString(assetIdQuote.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificRateValidateBeforeCall(@javax.annotation.Nonnull String assetIdBase, @javax.annotation.Nonnull String assetIdQuote, @javax.annotation.Nullable String time, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetIdBase' is set
        if (assetIdBase == null) {
            throw new ApiException("Missing the required parameter 'assetIdBase' when calling getSpecificRate(Async)");
        }

        // verify the required parameter 'assetIdQuote' is set
        if (assetIdQuote == null) {
            throw new ApiException("Missing the required parameter 'assetIdQuote' when calling getSpecificRate(Async)");
        }

        return getSpecificRateCall(assetIdBase, assetIdQuote, time, _callback);

    }

    /**
     * Get specific rate
     * Retrieves the exchange rate for a specific base and quote asset at a given time or the current rate.              :::info If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements. :::
     * @param assetIdBase Requested exchange rate base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param assetIdQuote Requested exchange rate quote asset identifier (from the Metadata -&gt; Assets) (required)
     * @param time Time at which exchange rate is calculated (optional, if not supplied then current rate is returned) (optional)
     * @return V1ExchangeRate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public V1ExchangeRate getSpecificRate(@javax.annotation.Nonnull String assetIdBase, @javax.annotation.Nonnull String assetIdQuote, @javax.annotation.Nullable String time) throws ApiException {
        ApiResponse<V1ExchangeRate> localVarResp = getSpecificRateWithHttpInfo(assetIdBase, assetIdQuote, time);
        return localVarResp.getData();
    }

    /**
     * Get specific rate
     * Retrieves the exchange rate for a specific base and quote asset at a given time or the current rate.              :::info If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements. :::
     * @param assetIdBase Requested exchange rate base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param assetIdQuote Requested exchange rate quote asset identifier (from the Metadata -&gt; Assets) (required)
     * @param time Time at which exchange rate is calculated (optional, if not supplied then current rate is returned) (optional)
     * @return ApiResponse&lt;V1ExchangeRate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1ExchangeRate> getSpecificRateWithHttpInfo(@javax.annotation.Nonnull String assetIdBase, @javax.annotation.Nonnull String assetIdQuote, @javax.annotation.Nullable String time) throws ApiException {
        okhttp3.Call localVarCall = getSpecificRateValidateBeforeCall(assetIdBase, assetIdQuote, time, null);
        Type localVarReturnType = new TypeToken<V1ExchangeRate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get specific rate (asynchronously)
     * Retrieves the exchange rate for a specific base and quote asset at a given time or the current rate.              :::info If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements. :::
     * @param assetIdBase Requested exchange rate base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param assetIdQuote Requested exchange rate quote asset identifier (from the Metadata -&gt; Assets) (required)
     * @param time Time at which exchange rate is calculated (optional, if not supplied then current rate is returned) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpecificRateAsync(@javax.annotation.Nonnull String assetIdBase, @javax.annotation.Nonnull String assetIdQuote, @javax.annotation.Nullable String time, final ApiCallback<V1ExchangeRate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificRateValidateBeforeCall(assetIdBase, assetIdQuote, time, _callback);
        Type localVarReturnType = new TypeToken<V1ExchangeRate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGet
     * @param assetIdBase Requested exchange rates base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param assetIdQuote Requested exchange rates base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param periodId Identifier of requested timeseries period (required, e.g. &#x60;5SEC&#x60; or &#x60;1HRS&#x60;) (optional)
     * @param timeStart Timeseries starting time in ISO 8601 (required) (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (required) (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGetCall(@javax.annotation.Nonnull String assetIdBase, @javax.annotation.Nonnull String assetIdQuote, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable String timeStart, @javax.annotation.Nullable String timeEnd, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/exchangerate/{asset_id_base}/{asset_id_quote}/history"
            .replace("{" + "asset_id_base" + "}", localVarApiClient.escapeString(assetIdBase.toString()))
            .replace("{" + "asset_id_quote" + "}", localVarApiClient.escapeString(assetIdQuote.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (periodId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period_id", periodId));
        }

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_start", timeStart));
        }

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_end", timeEnd));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGetValidateBeforeCall(@javax.annotation.Nonnull String assetIdBase, @javax.annotation.Nonnull String assetIdQuote, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable String timeStart, @javax.annotation.Nullable String timeEnd, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetIdBase' is set
        if (assetIdBase == null) {
            throw new ApiException("Missing the required parameter 'assetIdBase' when calling v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGet(Async)");
        }

        // verify the required parameter 'assetIdQuote' is set
        if (assetIdQuote == null) {
            throw new ApiException("Missing the required parameter 'assetIdQuote' when calling v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGet(Async)");
        }

        return v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGetCall(assetIdBase, assetIdQuote, periodId, timeStart, timeEnd, limit, _callback);

    }

    /**
     * Timeseries data
     * Get the historical exchange rates between two assets in the form of the timeseries.
     * @param assetIdBase Requested exchange rates base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param assetIdQuote Requested exchange rates base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param periodId Identifier of requested timeseries period (required, e.g. &#x60;5SEC&#x60; or &#x60;1HRS&#x60;) (optional)
     * @param timeStart Timeseries starting time in ISO 8601 (required) (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (required) (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List&lt;V1ExchangeRatesTimeseriesItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1ExchangeRatesTimeseriesItem> v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGet(@javax.annotation.Nonnull String assetIdBase, @javax.annotation.Nonnull String assetIdQuote, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable String timeStart, @javax.annotation.Nullable String timeEnd, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<List<V1ExchangeRatesTimeseriesItem>> localVarResp = v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGetWithHttpInfo(assetIdBase, assetIdQuote, periodId, timeStart, timeEnd, limit);
        return localVarResp.getData();
    }

    /**
     * Timeseries data
     * Get the historical exchange rates between two assets in the form of the timeseries.
     * @param assetIdBase Requested exchange rates base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param assetIdQuote Requested exchange rates base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param periodId Identifier of requested timeseries period (required, e.g. &#x60;5SEC&#x60; or &#x60;1HRS&#x60;) (optional)
     * @param timeStart Timeseries starting time in ISO 8601 (required) (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (required) (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return ApiResponse&lt;List&lt;V1ExchangeRatesTimeseriesItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1ExchangeRatesTimeseriesItem>> v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGetWithHttpInfo(@javax.annotation.Nonnull String assetIdBase, @javax.annotation.Nonnull String assetIdQuote, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable String timeStart, @javax.annotation.Nullable String timeEnd, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGetValidateBeforeCall(assetIdBase, assetIdQuote, periodId, timeStart, timeEnd, limit, null);
        Type localVarReturnType = new TypeToken<List<V1ExchangeRatesTimeseriesItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Timeseries data (asynchronously)
     * Get the historical exchange rates between two assets in the form of the timeseries.
     * @param assetIdBase Requested exchange rates base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param assetIdQuote Requested exchange rates base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param periodId Identifier of requested timeseries period (required, e.g. &#x60;5SEC&#x60; or &#x60;1HRS&#x60;) (optional)
     * @param timeStart Timeseries starting time in ISO 8601 (required) (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (required) (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGetAsync(@javax.annotation.Nonnull String assetIdBase, @javax.annotation.Nonnull String assetIdQuote, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable String timeStart, @javax.annotation.Nullable String timeEnd, @javax.annotation.Nullable Integer limit, final ApiCallback<List<V1ExchangeRatesTimeseriesItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGetValidateBeforeCall(assetIdBase, assetIdQuote, periodId, timeStart, timeEnd, limit, _callback);
        Type localVarReturnType = new TypeToken<List<V1ExchangeRatesTimeseriesItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ExchangerateAssetIdBaseGet
     * @param assetIdBase Requested exchange rates base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param filterAssetId Comma or semicolon delimited asset identifiers used to filter response (optional) (optional)
     * @param invert True will invert all the rates (optional, if true then rates will be calculated as &#x60;rate &#x3D; 1 / actual_rate&#x60; eg. &#x60;USD/BTC&#x60; as &#x60;BTC/USD&#x60;) (optional, default to false)
     * @param time Time for historical rates (optional) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExchangerateAssetIdBaseGetCall(@javax.annotation.Nonnull String assetIdBase, @javax.annotation.Nullable String filterAssetId, @javax.annotation.Nullable Boolean invert, @javax.annotation.Nullable String time, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/exchangerate/{asset_id_base}"
            .replace("{" + "asset_id_base" + "}", localVarApiClient.escapeString(assetIdBase.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterAssetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_asset_id", filterAssetId));
        }

        if (invert != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invert", invert));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ExchangerateAssetIdBaseGetValidateBeforeCall(@javax.annotation.Nonnull String assetIdBase, @javax.annotation.Nullable String filterAssetId, @javax.annotation.Nullable Boolean invert, @javax.annotation.Nullable String time, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetIdBase' is set
        if (assetIdBase == null) {
            throw new ApiException("Missing the required parameter 'assetIdBase' when calling v1ExchangerateAssetIdBaseGet(Async)");
        }

        return v1ExchangerateAssetIdBaseGetCall(assetIdBase, filterAssetId, invert, time, _callback);

    }

    /**
     * Get all current rates
     * Get the current exchange rate between requested asset and all other assets.              :::info If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements. :::              :::info You can invert the rates by using Y &#x3D; 1 / X equation, for example BTC/USD &#x3D; 1 / (USD/BTC); :::
     * @param assetIdBase Requested exchange rates base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param filterAssetId Comma or semicolon delimited asset identifiers used to filter response (optional) (optional)
     * @param invert True will invert all the rates (optional, if true then rates will be calculated as &#x60;rate &#x3D; 1 / actual_rate&#x60; eg. &#x60;USD/BTC&#x60; as &#x60;BTC/USD&#x60;) (optional, default to false)
     * @param time Time for historical rates (optional) (optional)
     * @return V1ExchangeRates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public V1ExchangeRates v1ExchangerateAssetIdBaseGet(@javax.annotation.Nonnull String assetIdBase, @javax.annotation.Nullable String filterAssetId, @javax.annotation.Nullable Boolean invert, @javax.annotation.Nullable String time) throws ApiException {
        ApiResponse<V1ExchangeRates> localVarResp = v1ExchangerateAssetIdBaseGetWithHttpInfo(assetIdBase, filterAssetId, invert, time);
        return localVarResp.getData();
    }

    /**
     * Get all current rates
     * Get the current exchange rate between requested asset and all other assets.              :::info If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements. :::              :::info You can invert the rates by using Y &#x3D; 1 / X equation, for example BTC/USD &#x3D; 1 / (USD/BTC); :::
     * @param assetIdBase Requested exchange rates base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param filterAssetId Comma or semicolon delimited asset identifiers used to filter response (optional) (optional)
     * @param invert True will invert all the rates (optional, if true then rates will be calculated as &#x60;rate &#x3D; 1 / actual_rate&#x60; eg. &#x60;USD/BTC&#x60; as &#x60;BTC/USD&#x60;) (optional, default to false)
     * @param time Time for historical rates (optional) (optional)
     * @return ApiResponse&lt;V1ExchangeRates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1ExchangeRates> v1ExchangerateAssetIdBaseGetWithHttpInfo(@javax.annotation.Nonnull String assetIdBase, @javax.annotation.Nullable String filterAssetId, @javax.annotation.Nullable Boolean invert, @javax.annotation.Nullable String time) throws ApiException {
        okhttp3.Call localVarCall = v1ExchangerateAssetIdBaseGetValidateBeforeCall(assetIdBase, filterAssetId, invert, time, null);
        Type localVarReturnType = new TypeToken<V1ExchangeRates>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all current rates (asynchronously)
     * Get the current exchange rate between requested asset and all other assets.              :::info If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements. :::              :::info You can invert the rates by using Y &#x3D; 1 / X equation, for example BTC/USD &#x3D; 1 / (USD/BTC); :::
     * @param assetIdBase Requested exchange rates base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param filterAssetId Comma or semicolon delimited asset identifiers used to filter response (optional) (optional)
     * @param invert True will invert all the rates (optional, if true then rates will be calculated as &#x60;rate &#x3D; 1 / actual_rate&#x60; eg. &#x60;USD/BTC&#x60; as &#x60;BTC/USD&#x60;) (optional, default to false)
     * @param time Time for historical rates (optional) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExchangerateAssetIdBaseGetAsync(@javax.annotation.Nonnull String assetIdBase, @javax.annotation.Nullable String filterAssetId, @javax.annotation.Nullable Boolean invert, @javax.annotation.Nullable String time, final ApiCallback<V1ExchangeRates> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ExchangerateAssetIdBaseGetValidateBeforeCall(assetIdBase, filterAssetId, invert, time, _callback);
        Type localVarReturnType = new TypeToken<V1ExchangeRates>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ExchangerateHistoryPeriodsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExchangerateHistoryPeriodsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/exchangerate/history/periods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ExchangerateHistoryPeriodsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v1ExchangerateHistoryPeriodsGetCall(_callback);

    }

    /**
     * Timeseries periods
     * You can also obtain historical exchange rates of any asset pair, grouped into time periods. Get full list of supported time periods available for requesting exchange rates historical timeseries data.              ## Timeseries periods Time unit | Period identifiers --- | --- Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY
     * @return List&lt;V1TimeseriesPeriod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1TimeseriesPeriod> v1ExchangerateHistoryPeriodsGet() throws ApiException {
        ApiResponse<List<V1TimeseriesPeriod>> localVarResp = v1ExchangerateHistoryPeriodsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Timeseries periods
     * You can also obtain historical exchange rates of any asset pair, grouped into time periods. Get full list of supported time periods available for requesting exchange rates historical timeseries data.              ## Timeseries periods Time unit | Period identifiers --- | --- Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY
     * @return ApiResponse&lt;List&lt;V1TimeseriesPeriod&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1TimeseriesPeriod>> v1ExchangerateHistoryPeriodsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1ExchangerateHistoryPeriodsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<V1TimeseriesPeriod>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Timeseries periods (asynchronously)
     * You can also obtain historical exchange rates of any asset pair, grouped into time periods. Get full list of supported time periods available for requesting exchange rates historical timeseries data.              ## Timeseries periods Time unit | Period identifiers --- | --- Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExchangerateHistoryPeriodsGetAsync(final ApiCallback<List<V1TimeseriesPeriod>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ExchangerateHistoryPeriodsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<V1TimeseriesPeriod>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
