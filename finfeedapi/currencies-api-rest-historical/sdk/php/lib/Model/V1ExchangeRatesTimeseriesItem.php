<?php
/**
 * V1ExchangeRatesTimeseriesItem
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FX Historical REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * V1ExchangeRatesTimeseriesItem Class Doc Comment
 *
 * @category Class
 * @description Represents an item in the exchange rate timeseries.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V1ExchangeRatesTimeseriesItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'v1.ExchangeRatesTimeseriesItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'time_period_start' => '\DateTime',
        'time_period_end' => '\DateTime',
        'time_open' => '\DateTime',
        'time_close' => '\DateTime',
        'rate_open' => 'float',
        'rate_high' => 'float',
        'rate_low' => 'float',
        'rate_close' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'time_period_start' => 'date-time',
        'time_period_end' => 'date-time',
        'time_open' => 'date-time',
        'time_close' => 'date-time',
        'rate_open' => 'double',
        'rate_high' => 'double',
        'rate_low' => 'double',
        'rate_close' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'time_period_start' => false,
        'time_period_end' => false,
        'time_open' => true,
        'time_close' => true,
        'rate_open' => true,
        'rate_high' => true,
        'rate_low' => true,
        'rate_close' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'time_period_start' => 'time_period_start',
        'time_period_end' => 'time_period_end',
        'time_open' => 'time_open',
        'time_close' => 'time_close',
        'rate_open' => 'rate_open',
        'rate_high' => 'rate_high',
        'rate_low' => 'rate_low',
        'rate_close' => 'rate_close'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'time_period_start' => 'setTimePeriodStart',
        'time_period_end' => 'setTimePeriodEnd',
        'time_open' => 'setTimeOpen',
        'time_close' => 'setTimeClose',
        'rate_open' => 'setRateOpen',
        'rate_high' => 'setRateHigh',
        'rate_low' => 'setRateLow',
        'rate_close' => 'setRateClose'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'time_period_start' => 'getTimePeriodStart',
        'time_period_end' => 'getTimePeriodEnd',
        'time_open' => 'getTimeOpen',
        'time_close' => 'getTimeClose',
        'rate_open' => 'getRateOpen',
        'rate_high' => 'getRateHigh',
        'rate_low' => 'getRateLow',
        'rate_close' => 'getRateClose'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('time_period_start', $data ?? [], null);
        $this->setIfExists('time_period_end', $data ?? [], null);
        $this->setIfExists('time_open', $data ?? [], null);
        $this->setIfExists('time_close', $data ?? [], null);
        $this->setIfExists('rate_open', $data ?? [], null);
        $this->setIfExists('rate_high', $data ?? [], null);
        $this->setIfExists('rate_low', $data ?? [], null);
        $this->setIfExists('rate_close', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets time_period_start
     *
     * @return \DateTime|null
     */
    public function getTimePeriodStart()
    {
        return $this->container['time_period_start'];
    }

    /**
     * Sets time_period_start
     *
     * @param \DateTime|null $time_period_start Gets or sets the start time of the period.
     *
     * @return self
     */
    public function setTimePeriodStart($time_period_start)
    {
        if (is_null($time_period_start)) {
            throw new \InvalidArgumentException('non-nullable time_period_start cannot be null');
        }
        $this->container['time_period_start'] = $time_period_start;

        return $this;
    }

    /**
     * Gets time_period_end
     *
     * @return \DateTime|null
     */
    public function getTimePeriodEnd()
    {
        return $this->container['time_period_end'];
    }

    /**
     * Sets time_period_end
     *
     * @param \DateTime|null $time_period_end Gets or sets the end time of the period.
     *
     * @return self
     */
    public function setTimePeriodEnd($time_period_end)
    {
        if (is_null($time_period_end)) {
            throw new \InvalidArgumentException('non-nullable time_period_end cannot be null');
        }
        $this->container['time_period_end'] = $time_period_end;

        return $this;
    }

    /**
     * Gets time_open
     *
     * @return \DateTime|null
     */
    public function getTimeOpen()
    {
        return $this->container['time_open'];
    }

    /**
     * Sets time_open
     *
     * @param \DateTime|null $time_open Gets or sets the opening time of the period.
     *
     * @return self
     */
    public function setTimeOpen($time_open)
    {
        if (is_null($time_open)) {
            array_push($this->openAPINullablesSetToNull, 'time_open');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_open', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_open'] = $time_open;

        return $this;
    }

    /**
     * Gets time_close
     *
     * @return \DateTime|null
     */
    public function getTimeClose()
    {
        return $this->container['time_close'];
    }

    /**
     * Sets time_close
     *
     * @param \DateTime|null $time_close Gets or sets the closing time of the period.
     *
     * @return self
     */
    public function setTimeClose($time_close)
    {
        if (is_null($time_close)) {
            array_push($this->openAPINullablesSetToNull, 'time_close');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_close', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_close'] = $time_close;

        return $this;
    }

    /**
     * Gets rate_open
     *
     * @return float|null
     */
    public function getRateOpen()
    {
        return $this->container['rate_open'];
    }

    /**
     * Sets rate_open
     *
     * @param float|null $rate_open Gets or sets the opening rate for the period.
     *
     * @return self
     */
    public function setRateOpen($rate_open)
    {
        if (is_null($rate_open)) {
            array_push($this->openAPINullablesSetToNull, 'rate_open');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rate_open', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rate_open'] = $rate_open;

        return $this;
    }

    /**
     * Gets rate_high
     *
     * @return float|null
     */
    public function getRateHigh()
    {
        return $this->container['rate_high'];
    }

    /**
     * Sets rate_high
     *
     * @param float|null $rate_high Gets or sets the highest rate for the period.
     *
     * @return self
     */
    public function setRateHigh($rate_high)
    {
        if (is_null($rate_high)) {
            array_push($this->openAPINullablesSetToNull, 'rate_high');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rate_high', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rate_high'] = $rate_high;

        return $this;
    }

    /**
     * Gets rate_low
     *
     * @return float|null
     */
    public function getRateLow()
    {
        return $this->container['rate_low'];
    }

    /**
     * Sets rate_low
     *
     * @param float|null $rate_low Gets or sets the lowest rate for the period.
     *
     * @return self
     */
    public function setRateLow($rate_low)
    {
        if (is_null($rate_low)) {
            array_push($this->openAPINullablesSetToNull, 'rate_low');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rate_low', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rate_low'] = $rate_low;

        return $this;
    }

    /**
     * Gets rate_close
     *
     * @return float|null
     */
    public function getRateClose()
    {
        return $this->container['rate_close'];
    }

    /**
     * Sets rate_close
     *
     * @param float|null $rate_close Gets or sets the closing rate for the period.
     *
     * @return self
     */
    public function setRateClose($rate_close)
    {
        if (is_null($rate_close)) {
            array_push($this->openAPINullablesSetToNull, 'rate_close');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rate_close', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rate_close'] = $rate_close;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


