/*
 * FX Historical REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using APIBricks.FinFeedAPI.CurrenciesAPI.REST.V1.Historical.Api;
using APIBricks.FinFeedAPI.CurrenciesAPI.REST.V1.Historical.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace APIBricks.FinFeedAPI.CurrenciesAPI.REST.V1.Historical.Test.Api
{
    /// <summary>
    ///  Class for testing ExchangeRatesApi
    /// </summary>
    public sealed class ExchangeRatesApiTests : ApiTestsBase
    {
        private readonly IExchangeRatesApi _instance;

        public ExchangeRatesApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IExchangeRatesApi>();
        }

        /// <summary>
        /// Test GetSpecificRate
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSpecificRateAsyncTest()
        {
            string assetIdBase = default!;
            string assetIdQuote = default!;
            Client.Option<string> time = default!;
            var response = await _instance.GetSpecificRateAsync(assetIdBase, assetIdQuote, time);
            var model = response.Ok();
            Assert.IsType<V1ExchangeRate>(model);
        }

        /// <summary>
        /// Test V1ExchangerateAssetIdBaseAssetIdQuoteHistoryGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1ExchangerateAssetIdBaseAssetIdQuoteHistoryGetAsyncTest()
        {
            string assetIdBase = default!;
            string assetIdQuote = default!;
            Client.Option<string> periodId = default!;
            Client.Option<string> timeStart = default!;
            Client.Option<string> timeEnd = default!;
            Client.Option<int> limit = default!;
            var response = await _instance.V1ExchangerateAssetIdBaseAssetIdQuoteHistoryGetAsync(assetIdBase, assetIdQuote, periodId, timeStart, timeEnd, limit);
            var model = response.Ok();
            Assert.IsType<List<V1ExchangeRatesTimeseriesItem>>(model);
        }

        /// <summary>
        /// Test V1ExchangerateAssetIdBaseGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1ExchangerateAssetIdBaseGetAsyncTest()
        {
            string assetIdBase = default!;
            Client.Option<string> filterAssetId = default!;
            Client.Option<bool> invert = default!;
            Client.Option<string> time = default!;
            var response = await _instance.V1ExchangerateAssetIdBaseGetAsync(assetIdBase, filterAssetId, invert, time);
            var model = response.Ok();
            Assert.IsType<V1ExchangeRates>(model);
        }

        /// <summary>
        /// Test V1ExchangerateHistoryPeriodsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1ExchangerateHistoryPeriodsGetAsyncTest()
        {
            var response = await _instance.V1ExchangerateHistoryPeriodsGetAsync();
            var model = response.Ok();
            Assert.IsType<List<V1TimeseriesPeriod>>(model);
        }
    }
}
