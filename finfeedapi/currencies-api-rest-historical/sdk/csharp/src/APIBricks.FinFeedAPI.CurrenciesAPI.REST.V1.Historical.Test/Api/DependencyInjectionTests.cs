/*
 * FX Historical REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using APIBricks.FinFeedAPI.CurrenciesAPI.REST.V1.Historical.Client;
using APIBricks.FinFeedAPI.CurrenciesAPI.REST.V1.Historical.Api;
using APIBricks.FinFeedAPI.CurrenciesAPI.REST.V1.Historical.Extensions;
using Xunit;

namespace APIBricks.FinFeedAPI.CurrenciesAPI.REST.V1.Historical.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.X_CoinAPI_Key, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken1);
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.X_CoinAPI_Key, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken1);
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.X_CoinAPI_Key, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken1);
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.X_CoinAPI_Key, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken1);
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var exchangeRatesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IExchangeRatesApi>();
            Assert.True(exchangeRatesApi.HttpClient.BaseAddress != null);

            var metadataApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMetadataApi>();
            Assert.True(metadataApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var exchangeRatesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IExchangeRatesApi>();
            Assert.True(exchangeRatesApi.HttpClient.BaseAddress != null);

            var metadataApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMetadataApi>();
            Assert.True(metadataApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var exchangeRatesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IExchangeRatesApi>();
            Assert.True(exchangeRatesApi.HttpClient.BaseAddress != null);
            
            var metadataApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMetadataApi>();
            Assert.True(metadataApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var exchangeRatesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IExchangeRatesApi>();
            Assert.True(exchangeRatesApi.HttpClient.BaseAddress != null);

            var metadataApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMetadataApi>();
            Assert.True(metadataApi.HttpClient.BaseAddress != null);
        }
    }
}
