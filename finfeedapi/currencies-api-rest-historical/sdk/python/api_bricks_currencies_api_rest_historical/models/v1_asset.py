# coding: utf-8

"""
    FX Historical REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from api_bricks_currencies_api_rest_historical.models.v1_chain_network_address import V1ChainNetworkAddress
from typing import Optional, Set
from typing_extensions import Self

class V1Asset(BaseModel):
    """
    Represents an asset.
    """ # noqa: E501
    asset_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the asset ID.")
    name: Optional[StrictStr] = Field(default=None, description="Gets or sets the name of the asset.")
    type_is_crypto: Optional[StrictInt] = Field(default=None, description="Gets or sets a value indicating whether the asset is a cryptocurrency.")
    data_quote_start: Optional[datetime] = Field(default=None, description="Gets or sets the start date of quote data.")
    data_quote_end: Optional[datetime] = Field(default=None, description="Gets or sets the end date of quote data.")
    data_orderbook_start: Optional[datetime] = Field(default=None, description="Gets or sets the start date of order book data.")
    data_orderbook_end: Optional[datetime] = Field(default=None, description="Gets or sets the end date of order book data.")
    data_trade_start: Optional[datetime] = Field(default=None, description="Gets or sets the start date of trade data.")
    data_trade_end: Optional[datetime] = Field(default=None, description="Gets or sets the end date of trade data.")
    data_symbols_count: Optional[StrictInt] = Field(default=None, description="Gets or sets the number of symbols.")
    volume_1hrs_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets the USD volume in the last 1 hour.")
    volume_1day_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets the USD volume in the last 1 day.")
    volume_1mth_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets the USD volume in the last 1 month.")
    price_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets the USD price of the asset.")
    id_icon: Optional[StrictStr] = Field(default=None, description="Gets or sets the ID of the icon for the asset.")
    supply_current: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets the current supply of the asset.")
    supply_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets the total supply of the asset.")
    supply_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets the maximum supply of the asset.")
    chain_addresses: Optional[List[V1ChainNetworkAddress]] = None
    data_start: Optional[StrictStr] = None
    data_end: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["asset_id", "name", "type_is_crypto", "data_quote_start", "data_quote_end", "data_orderbook_start", "data_orderbook_end", "data_trade_start", "data_trade_end", "data_symbols_count", "volume_1hrs_usd", "volume_1day_usd", "volume_1mth_usd", "price_usd", "id_icon", "supply_current", "supply_total", "supply_max", "chain_addresses", "data_start", "data_end"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1Asset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "data_start",
            "data_end",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in chain_addresses (list)
        _items = []
        if self.chain_addresses:
            for _item_chain_addresses in self.chain_addresses:
                if _item_chain_addresses:
                    _items.append(_item_chain_addresses.to_dict())
            _dict['chain_addresses'] = _items
        # set to None if asset_id (nullable) is None
        # and model_fields_set contains the field
        if self.asset_id is None and "asset_id" in self.model_fields_set:
            _dict['asset_id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if data_quote_start (nullable) is None
        # and model_fields_set contains the field
        if self.data_quote_start is None and "data_quote_start" in self.model_fields_set:
            _dict['data_quote_start'] = None

        # set to None if data_quote_end (nullable) is None
        # and model_fields_set contains the field
        if self.data_quote_end is None and "data_quote_end" in self.model_fields_set:
            _dict['data_quote_end'] = None

        # set to None if data_orderbook_start (nullable) is None
        # and model_fields_set contains the field
        if self.data_orderbook_start is None and "data_orderbook_start" in self.model_fields_set:
            _dict['data_orderbook_start'] = None

        # set to None if data_orderbook_end (nullable) is None
        # and model_fields_set contains the field
        if self.data_orderbook_end is None and "data_orderbook_end" in self.model_fields_set:
            _dict['data_orderbook_end'] = None

        # set to None if data_trade_start (nullable) is None
        # and model_fields_set contains the field
        if self.data_trade_start is None and "data_trade_start" in self.model_fields_set:
            _dict['data_trade_start'] = None

        # set to None if data_trade_end (nullable) is None
        # and model_fields_set contains the field
        if self.data_trade_end is None and "data_trade_end" in self.model_fields_set:
            _dict['data_trade_end'] = None

        # set to None if data_symbols_count (nullable) is None
        # and model_fields_set contains the field
        if self.data_symbols_count is None and "data_symbols_count" in self.model_fields_set:
            _dict['data_symbols_count'] = None

        # set to None if volume_1hrs_usd (nullable) is None
        # and model_fields_set contains the field
        if self.volume_1hrs_usd is None and "volume_1hrs_usd" in self.model_fields_set:
            _dict['volume_1hrs_usd'] = None

        # set to None if volume_1day_usd (nullable) is None
        # and model_fields_set contains the field
        if self.volume_1day_usd is None and "volume_1day_usd" in self.model_fields_set:
            _dict['volume_1day_usd'] = None

        # set to None if volume_1mth_usd (nullable) is None
        # and model_fields_set contains the field
        if self.volume_1mth_usd is None and "volume_1mth_usd" in self.model_fields_set:
            _dict['volume_1mth_usd'] = None

        # set to None if price_usd (nullable) is None
        # and model_fields_set contains the field
        if self.price_usd is None and "price_usd" in self.model_fields_set:
            _dict['price_usd'] = None

        # set to None if id_icon (nullable) is None
        # and model_fields_set contains the field
        if self.id_icon is None and "id_icon" in self.model_fields_set:
            _dict['id_icon'] = None

        # set to None if supply_current (nullable) is None
        # and model_fields_set contains the field
        if self.supply_current is None and "supply_current" in self.model_fields_set:
            _dict['supply_current'] = None

        # set to None if supply_total (nullable) is None
        # and model_fields_set contains the field
        if self.supply_total is None and "supply_total" in self.model_fields_set:
            _dict['supply_total'] = None

        # set to None if supply_max (nullable) is None
        # and model_fields_set contains the field
        if self.supply_max is None and "supply_max" in self.model_fields_set:
            _dict['supply_max'] = None

        # set to None if chain_addresses (nullable) is None
        # and model_fields_set contains the field
        if self.chain_addresses is None and "chain_addresses" in self.model_fields_set:
            _dict['chain_addresses'] = None

        # set to None if data_start (nullable) is None
        # and model_fields_set contains the field
        if self.data_start is None and "data_start" in self.model_fields_set:
            _dict['data_start'] = None

        # set to None if data_end (nullable) is None
        # and model_fields_set contains the field
        if self.data_end is None and "data_end" in self.model_fields_set:
            _dict['data_end'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1Asset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asset_id": obj.get("asset_id"),
            "name": obj.get("name"),
            "type_is_crypto": obj.get("type_is_crypto"),
            "data_quote_start": obj.get("data_quote_start"),
            "data_quote_end": obj.get("data_quote_end"),
            "data_orderbook_start": obj.get("data_orderbook_start"),
            "data_orderbook_end": obj.get("data_orderbook_end"),
            "data_trade_start": obj.get("data_trade_start"),
            "data_trade_end": obj.get("data_trade_end"),
            "data_symbols_count": obj.get("data_symbols_count"),
            "volume_1hrs_usd": obj.get("volume_1hrs_usd"),
            "volume_1day_usd": obj.get("volume_1day_usd"),
            "volume_1mth_usd": obj.get("volume_1mth_usd"),
            "price_usd": obj.get("price_usd"),
            "id_icon": obj.get("id_icon"),
            "supply_current": obj.get("supply_current"),
            "supply_total": obj.get("supply_total"),
            "supply_max": obj.get("supply_max"),
            "chain_addresses": [V1ChainNetworkAddress.from_dict(_item) for _item in obj["chain_addresses"]] if obj.get("chain_addresses") is not None else None,
            "data_start": obj.get("data_start"),
            "data_end": obj.get("data_end")
        })
        return _obj


