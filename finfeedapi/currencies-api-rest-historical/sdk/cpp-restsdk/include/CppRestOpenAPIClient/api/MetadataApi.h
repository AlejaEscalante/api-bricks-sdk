/**
 * FX Historical REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MetadataApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_MetadataApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_MetadataApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/V1_Asset.h"
#include "CppRestOpenAPIClient/model/V1_Icon.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  MetadataApi 
{
public:

    explicit MetadataApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~MetadataApi();

    /// <summary>
    /// List all assets by asset ID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="assetId">The asset ID.</param>
    pplx::task<std::vector<std::shared_ptr<V1_Asset>>> v1AssetsAssetIdGet(
        utility::string_t assetId
    ) const;
    /// <summary>
    /// List all assets
    /// </summary>
    /// <remarks>
    /// Retrieves all assets.              :::info Our asset identifiers are aligned with the ISO 4217 currency codes standard only for fiat money (government or law regulated currency). :::              :::info Properties of the output are providing aggregated information from across all symbols related to the specific asset. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source. :::
    /// </remarks>
    /// <param name="filterAssetId">Comma or semicolon delimited asset identifiers used to filter response. (optional, eg. &#x60;BTC;ETH&#x60;). (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<V1_Asset>>> v1AssetsGet(
        boost::optional<utility::string_t> filterAssetId
    ) const;
    /// <summary>
    /// List all asset icons
    /// </summary>
    /// <remarks>
    /// Gets the list of icons (of the given size) for all the assets.
    /// </remarks>
    /// <param name="size">The size of the icons.</param>
    pplx::task<std::vector<std::shared_ptr<V1_Icon>>> v1AssetsIconsSizeGet(
        int32_t size
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_MetadataApi_H_ */

