/**
 * FX Historical REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_ExchangeRates.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_ExchangeRates::V1_ExchangeRates()
{
    m_Asset_id_base = utility::conversions::to_string_t("");
    m_Asset_id_baseIsSet = false;
    m_RatesIsSet = false;
}

V1_ExchangeRates::~V1_ExchangeRates()
{
}

void V1_ExchangeRates::validate()
{
    // TODO: implement validation
}

web::json::value V1_ExchangeRates::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Asset_id_baseIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("asset_id_base"))] = ModelBase::toJson(m_Asset_id_base);
    }
    if(m_RatesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("rates"))] = ModelBase::toJson(m_Rates);
    }

    return val;
}

bool V1_ExchangeRates::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("asset_id_base"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("asset_id_base")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetIdBase;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetIdBase);
            setAssetIdBase(refVal_setAssetIdBase);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("rates"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("rates")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V1_ExchangeRatesRate>> refVal_setRates;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRates);
            setRates(refVal_setRates);
            
        }
    }
    return ok;
}

void V1_ExchangeRates::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Asset_id_baseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("asset_id_base")), m_Asset_id_base));
    }
    if(m_RatesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("rates")), m_Rates));
    }
}

bool V1_ExchangeRates::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_base"))))
    {
        utility::string_t refVal_setAssetIdBase;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_base"))), refVal_setAssetIdBase );
        setAssetIdBase(refVal_setAssetIdBase);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("rates"))))
    {
        std::vector<std::shared_ptr<V1_ExchangeRatesRate>> refVal_setRates;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("rates"))), refVal_setRates );
        setRates(refVal_setRates);
    }
    return ok;
}


utility::string_t V1_ExchangeRates::getAssetIdBase() const
{
    return m_Asset_id_base;
}


void V1_ExchangeRates::setAssetIdBase(const utility::string_t& value)
{
    m_Asset_id_base = value;
    m_Asset_id_baseIsSet = true;
}

bool V1_ExchangeRates::assetIdBaseIsSet() const
{
    return m_Asset_id_baseIsSet;
}

void V1_ExchangeRates::unsetAsset_id_base()
{
    m_Asset_id_baseIsSet = false;
}
std::vector<std::shared_ptr<V1_ExchangeRatesRate>> V1_ExchangeRates::getRates() const
{
    return m_Rates;
}


void V1_ExchangeRates::setRates(const std::vector<std::shared_ptr<V1_ExchangeRatesRate>>& value)
{
    m_Rates = value;
    m_RatesIsSet = true;
}

bool V1_ExchangeRates::ratesIsSet() const
{
    return m_RatesIsSet;
}

void V1_ExchangeRates::unsetRates()
{
    m_RatesIsSet = false;
}

}
}
}
}


