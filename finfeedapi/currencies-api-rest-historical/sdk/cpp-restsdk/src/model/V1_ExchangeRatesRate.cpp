/**
 * FX Historical REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_ExchangeRatesRate.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_ExchangeRatesRate::V1_ExchangeRatesRate()
{
    m_Time = utility::datetime();
    m_TimeIsSet = false;
    m_Asset_id_quote = utility::conversions::to_string_t("");
    m_Asset_id_quoteIsSet = false;
    m_Rate = 0.0;
    m_RateIsSet = false;
}

V1_ExchangeRatesRate::~V1_ExchangeRatesRate()
{
}

void V1_ExchangeRatesRate::validate()
{
    // TODO: implement validation
}

web::json::value V1_ExchangeRatesRate::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_TimeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("time"))] = ModelBase::toJson(m_Time);
    }
    if(m_Asset_id_quoteIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("asset_id_quote"))] = ModelBase::toJson(m_Asset_id_quote);
    }
    if(m_RateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("rate"))] = ModelBase::toJson(m_Rate);
    }

    return val;
}

bool V1_ExchangeRatesRate::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTime);
            setTime(refVal_setTime);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetIdQuote;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetIdQuote);
            setAssetIdQuote(refVal_setAssetIdQuote);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("rate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("rate")));
        if(!fieldValue.is_null())
        {
            double refVal_setRate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRate);
            setRate(refVal_setRate);
            
        }
    }
    return ok;
}

void V1_ExchangeRatesRate::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_TimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("time")), m_Time));
    }
    if(m_Asset_id_quoteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("asset_id_quote")), m_Asset_id_quote));
    }
    if(m_RateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("rate")), m_Rate));
    }
}

bool V1_ExchangeRatesRate::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("time"))))
    {
        utility::datetime refVal_setTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("time"))), refVal_setTime );
        setTime(refVal_setTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote"))))
    {
        utility::string_t refVal_setAssetIdQuote;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote"))), refVal_setAssetIdQuote );
        setAssetIdQuote(refVal_setAssetIdQuote);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("rate"))))
    {
        double refVal_setRate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("rate"))), refVal_setRate );
        setRate(refVal_setRate);
    }
    return ok;
}


utility::datetime V1_ExchangeRatesRate::getTime() const
{
    return m_Time;
}


void V1_ExchangeRatesRate::setTime(const utility::datetime& value)
{
    m_Time = value;
    m_TimeIsSet = true;
}

bool V1_ExchangeRatesRate::timeIsSet() const
{
    return m_TimeIsSet;
}

void V1_ExchangeRatesRate::unsetTime()
{
    m_TimeIsSet = false;
}
utility::string_t V1_ExchangeRatesRate::getAssetIdQuote() const
{
    return m_Asset_id_quote;
}


void V1_ExchangeRatesRate::setAssetIdQuote(const utility::string_t& value)
{
    m_Asset_id_quote = value;
    m_Asset_id_quoteIsSet = true;
}

bool V1_ExchangeRatesRate::assetIdQuoteIsSet() const
{
    return m_Asset_id_quoteIsSet;
}

void V1_ExchangeRatesRate::unsetAsset_id_quote()
{
    m_Asset_id_quoteIsSet = false;
}
double V1_ExchangeRatesRate::getRate() const
{
    return m_Rate;
}

void V1_ExchangeRatesRate::setRate(double value)
{
    m_Rate = value;
    m_RateIsSet = true;
}

bool V1_ExchangeRatesRate::rateIsSet() const
{
    return m_RateIsSet;
}

void V1_ExchangeRatesRate::unsetRate()
{
    m_RateIsSet = false;
}

}
}
}
}


