#
# REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

Get Admin Messages

.DESCRIPTION

No description available.

.PARAMETER Symbol
The symbol identifier

.PARAMETER Date
Optional date in format YYYY-MM-DD (defaults to latest available data)

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

AdminAdminMessageModel[]
#>
function Invoke-V1NativeIexAdminMessagesSymbolGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Symbol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.DateTime]
        ${Date},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-V1NativeIexAdminMessagesSymbolGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/v1/native/iex/admin/messages/{symbol}'
        if (!$Symbol) {
            throw "Error! The required parameter `Symbol` missing when calling v1NativeIexAdminMessagesSymbolGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{symbol}', [System.Web.HTTPUtility]::UrlEncode($Symbol))

        if (!$Date) {
            throw "Error! The required parameter `Date` missing when calling v1NativeIexAdminMessagesSymbolGet."
        }
        $LocalVarQueryParameters['date'] = $Date

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "AdminAdminMessageModel[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Get System Events

.DESCRIPTION

No description available.

.PARAMETER Date
Date in format YYYY-MM-DD

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

AdminSystemEventModel[]
#>
function Invoke-V1NativeIexAdminSystemEventGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.DateTime]
        ${Date},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-V1NativeIexAdminSystemEventGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/v1/native/iex/admin/system-event'

        if (!$Date) {
            throw "Error! The required parameter `Date` missing when calling v1NativeIexAdminSystemEventGet."
        }
        $LocalVarQueryParameters['date'] = $Date

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "AdminSystemEventModel[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Get Level-1 Quotes

.DESCRIPTION

No description available.

.PARAMETER Symbol
The symbol identifier

.PARAMETER Date
Optional date in format YYYY-MM-DD (defaults to latest available data)

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Level1QuoteUpdateModel[]
#>
function Invoke-V1NativeIexLevel1QuoteSymbolGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Symbol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.DateTime]
        ${Date},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-V1NativeIexLevel1QuoteSymbolGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/v1/native/iex/level1-quote/{symbol}'
        if (!$Symbol) {
            throw "Error! The required parameter `Symbol` missing when calling v1NativeIexLevel1QuoteSymbolGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{symbol}', [System.Web.HTTPUtility]::UrlEncode($Symbol))

        if (!$Date) {
            throw "Error! The required parameter `Date` missing when calling v1NativeIexLevel1QuoteSymbolGet."
        }
        $LocalVarQueryParameters['date'] = $Date

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Level1QuoteUpdateModel[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Get Level-2 Price Level Book

.DESCRIPTION

No description available.

.PARAMETER Symbol
The symbol identifier

.PARAMETER Date
Optional date in format YYYY-MM-DD (defaults to latest available data)

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Level2PriceLevelUpdateModel[]
#>
function Invoke-V1NativeIexLevel2PriceLevelUpdateSymbolGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Symbol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.DateTime]
        ${Date},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-V1NativeIexLevel2PriceLevelUpdateSymbolGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/v1/native/iex/level2-price-level-update/{symbol}'
        if (!$Symbol) {
            throw "Error! The required parameter `Symbol` missing when calling v1NativeIexLevel2PriceLevelUpdateSymbolGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{symbol}', [System.Web.HTTPUtility]::UrlEncode($Symbol))

        if (!$Date) {
            throw "Error! The required parameter `Date` missing when calling v1NativeIexLevel2PriceLevelUpdateSymbolGet."
        }
        $LocalVarQueryParameters['date'] = $Date

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Level2PriceLevelUpdateModel[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Get Level-3 Order Book

.DESCRIPTION

No description available.

.PARAMETER Symbol
The symbol identifier

.PARAMETER Date
Optional date in format YYYY-MM-DD (defaults to latest available data)

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Level3OrderBookModel[]
#>
function Invoke-V1NativeIexLevel3OrderBookSymbolGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Symbol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.DateTime]
        ${Date},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-V1NativeIexLevel3OrderBookSymbolGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/v1/native/iex/level3-order-book/{symbol}'
        if (!$Symbol) {
            throw "Error! The required parameter `Symbol` missing when calling v1NativeIexLevel3OrderBookSymbolGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{symbol}', [System.Web.HTTPUtility]::UrlEncode($Symbol))

        if (!$Date) {
            throw "Error! The required parameter `Date` missing when calling v1NativeIexLevel3OrderBookSymbolGet."
        }
        $LocalVarQueryParameters['date'] = $Date

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Level3OrderBookModel[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Get Trades

.DESCRIPTION

No description available.

.PARAMETER Symbol
The symbol identifier

.PARAMETER Date
Optional date in format YYYY-MM-DD (defaults to latest available data)

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

TradeTradeModel[]
#>
function Invoke-V1NativeIexTradeSymbolGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Symbol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.DateTime]
        ${Date},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-V1NativeIexTradeSymbolGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/v1/native/iex/trade/{symbol}'
        if (!$Symbol) {
            throw "Error! The required parameter `Symbol` missing when calling v1NativeIexTradeSymbolGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{symbol}', [System.Web.HTTPUtility]::UrlEncode($Symbol))

        if (!$Date) {
            throw "Error! The required parameter `Date` missing when calling v1NativeIexTradeSymbolGet."
        }
        $LocalVarQueryParameters['date'] = $Date

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "TradeTradeModel[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

