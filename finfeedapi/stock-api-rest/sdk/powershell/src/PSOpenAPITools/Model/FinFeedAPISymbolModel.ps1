#
# REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SymbolId
No description available.
.PARAMETER ExchangeId
No description available.
.PARAMETER SecurityCategory
No description available.
.PARAMETER Name
No description available.
.PARAMETER Date
No description available.
.PARAMETER AssetClass
No description available.
.OUTPUTS

FinFeedAPISymbolModel<PSCustomObject>
#>

function Initialize-FinFeedAPISymbolModel {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SymbolId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExchangeId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SecurityCategory},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Date},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetClass}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => FinFeedAPISymbolModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "symbol_id" = ${SymbolId}
            "exchange_id" = ${ExchangeId}
            "security_category" = ${SecurityCategory}
            "name" = ${Name}
            "date" = ${Date}
            "asset_class" = ${AssetClass}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FinFeedAPISymbolModel<PSCustomObject>

.DESCRIPTION

Convert from JSON to FinFeedAPISymbolModel<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FinFeedAPISymbolModel<PSCustomObject>
#>
function ConvertFrom-JsonToFinFeedAPISymbolModel {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => FinFeedAPISymbolModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $FinFeedAPISymbolModelAdditionalProperties = @{}

        # check if Json contains properties not defined in FinFeedAPISymbolModel
        $AllProperties = ("symbol_id", "exchange_id", "security_category", "name", "date", "asset_class")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $FinFeedAPISymbolModelAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol_id"))) { #optional property not found
            $SymbolId = $null
        } else {
            $SymbolId = $JsonParameters.PSobject.Properties["symbol_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exchange_id"))) { #optional property not found
            $ExchangeId = $null
        } else {
            $ExchangeId = $JsonParameters.PSobject.Properties["exchange_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "security_category"))) { #optional property not found
            $SecurityCategory = $null
        } else {
            $SecurityCategory = $JsonParameters.PSobject.Properties["security_category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "date"))) { #optional property not found
            $Date = $null
        } else {
            $Date = $JsonParameters.PSobject.Properties["date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_class"))) { #optional property not found
            $AssetClass = $null
        } else {
            $AssetClass = $JsonParameters.PSobject.Properties["asset_class"].value
        }

        $PSO = [PSCustomObject]@{
            "symbol_id" = ${SymbolId}
            "exchange_id" = ${ExchangeId}
            "security_category" = ${SecurityCategory}
            "name" = ${Name}
            "date" = ${Date}
            "asset_class" = ${AssetClass}
            "AdditionalProperties" = $FinFeedAPISymbolModelAdditionalProperties
        }

        return $PSO
    }

}

