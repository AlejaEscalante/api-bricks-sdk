#
# REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents the response DTO for system event information

.PARAMETER TimestampNanos
Original timestamp in nanoseconds since epoch
.PARAMETER Timestamp
Time when the system event was recorded as DateTime
.PARAMETER SystemEvent
System event as byte value
.PARAMETER SystemEventCode
System event as string
.PARAMETER SystemEventText
Human-readable description of the system event
.PARAMETER IsSystemEventStartOfMessages
Indicates if the system event is 'Start of Messages' (O).  Outside of heartbeat messages on the lower level protocol,   the start of day message is the first message sent in any trading session.
.PARAMETER IsSystemEventStartOfSystemHours
Indicates if the system event is 'Start of System Hours' (S).  This message indicates that IEX is open and ready to start accepting orders.
.PARAMETER IsSystemEventStartOfRegularMarketHours
Indicates if the system event is 'Start of Regular Market Hours' (R).  This message indicates that DAY and GTX orders, as well as market orders and pegged orders,   are available for execution on IEX.
.PARAMETER IsSystemEventEndOfRegularMarketHours
Indicates if the system event is 'End of Regular Market Hours' (M).  This message indicates that DAY orders, market orders, and pegged orders   are no longer accepted by IEX.
.PARAMETER IsSystemEventEndOfSystemHours
Indicates if the system event is 'End of System Hours' (E).  This message indicates that IEX is now closed and will not accept   any new orders during this trading session. It is still possible   to receive messages after the end of day.
.PARAMETER IsSystemEventEndOfMessages
Indicates if the system event is 'End of Messages' (C).  This is always the last message sent in any trading session.
.OUTPUTS

AdminSystemEventModel<PSCustomObject>
#>

function Initialize-AdminSystemEventModel {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TimestampNanos},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SystemEvent},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemEventCode},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SystemEventText},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSystemEventStartOfMessages},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSystemEventStartOfSystemHours},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSystemEventStartOfRegularMarketHours},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSystemEventEndOfRegularMarketHours},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSystemEventEndOfSystemHours},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSystemEventEndOfMessages}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AdminSystemEventModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "timestamp_nanos" = ${TimestampNanos}
            "timestamp" = ${Timestamp}
            "system_event" = ${SystemEvent}
            "system_event_code" = ${SystemEventCode}
            "system_event_text" = ${SystemEventText}
            "is_system_event_start_of_messages" = ${IsSystemEventStartOfMessages}
            "is_system_event_start_of_system_hours" = ${IsSystemEventStartOfSystemHours}
            "is_system_event_start_of_regular_market_hours" = ${IsSystemEventStartOfRegularMarketHours}
            "is_system_event_end_of_regular_market_hours" = ${IsSystemEventEndOfRegularMarketHours}
            "is_system_event_end_of_system_hours" = ${IsSystemEventEndOfSystemHours}
            "is_system_event_end_of_messages" = ${IsSystemEventEndOfMessages}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AdminSystemEventModel<PSCustomObject>

.DESCRIPTION

Convert from JSON to AdminSystemEventModel<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AdminSystemEventModel<PSCustomObject>
#>
function ConvertFrom-JsonToAdminSystemEventModel {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AdminSystemEventModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AdminSystemEventModel
        $AllProperties = ("timestamp_nanos", "timestamp", "system_event", "system_event_code", "system_event_text", "is_system_event_start_of_messages", "is_system_event_start_of_system_hours", "is_system_event_start_of_regular_market_hours", "is_system_event_end_of_regular_market_hours", "is_system_event_end_of_system_hours", "is_system_event_end_of_messages")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp_nanos"))) { #optional property not found
            $TimestampNanos = $null
        } else {
            $TimestampNanos = $JsonParameters.PSobject.Properties["timestamp_nanos"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "system_event"))) { #optional property not found
            $SystemEvent = $null
        } else {
            $SystemEvent = $JsonParameters.PSobject.Properties["system_event"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "system_event_code"))) { #optional property not found
            $SystemEventCode = $null
        } else {
            $SystemEventCode = $JsonParameters.PSobject.Properties["system_event_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "system_event_text"))) { #optional property not found
            $SystemEventText = $null
        } else {
            $SystemEventText = $JsonParameters.PSobject.Properties["system_event_text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_system_event_start_of_messages"))) { #optional property not found
            $IsSystemEventStartOfMessages = $null
        } else {
            $IsSystemEventStartOfMessages = $JsonParameters.PSobject.Properties["is_system_event_start_of_messages"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_system_event_start_of_system_hours"))) { #optional property not found
            $IsSystemEventStartOfSystemHours = $null
        } else {
            $IsSystemEventStartOfSystemHours = $JsonParameters.PSobject.Properties["is_system_event_start_of_system_hours"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_system_event_start_of_regular_market_hours"))) { #optional property not found
            $IsSystemEventStartOfRegularMarketHours = $null
        } else {
            $IsSystemEventStartOfRegularMarketHours = $JsonParameters.PSobject.Properties["is_system_event_start_of_regular_market_hours"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_system_event_end_of_regular_market_hours"))) { #optional property not found
            $IsSystemEventEndOfRegularMarketHours = $null
        } else {
            $IsSystemEventEndOfRegularMarketHours = $JsonParameters.PSobject.Properties["is_system_event_end_of_regular_market_hours"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_system_event_end_of_system_hours"))) { #optional property not found
            $IsSystemEventEndOfSystemHours = $null
        } else {
            $IsSystemEventEndOfSystemHours = $JsonParameters.PSobject.Properties["is_system_event_end_of_system_hours"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_system_event_end_of_messages"))) { #optional property not found
            $IsSystemEventEndOfMessages = $null
        } else {
            $IsSystemEventEndOfMessages = $JsonParameters.PSobject.Properties["is_system_event_end_of_messages"].value
        }

        $PSO = [PSCustomObject]@{
            "timestamp_nanos" = ${TimestampNanos}
            "timestamp" = ${Timestamp}
            "system_event" = ${SystemEvent}
            "system_event_code" = ${SystemEventCode}
            "system_event_text" = ${SystemEventText}
            "is_system_event_start_of_messages" = ${IsSystemEventStartOfMessages}
            "is_system_event_start_of_system_hours" = ${IsSystemEventStartOfSystemHours}
            "is_system_event_start_of_regular_market_hours" = ${IsSystemEventStartOfRegularMarketHours}
            "is_system_event_end_of_regular_market_hours" = ${IsSystemEventEndOfRegularMarketHours}
            "is_system_event_end_of_system_hours" = ${IsSystemEventEndOfSystemHours}
            "is_system_event_end_of_messages" = ${IsSystemEventEndOfMessages}
        }

        return $PSO
    }

}

