#
# FinFeedAPI Stock REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents the response DTO for official price information

.PARAMETER Symbol
The stock symbol
.PARAMETER TimestampNanos
Original timestamp in nanoseconds since epoch
.PARAMETER Timestamp
Time when the official price was recorded as DateTime
.PARAMETER PriceType
Type of price as byte value
.PARAMETER PriceTypeCode
Type of price as character string
.PARAMETER PriceTypeText
Human-readable description of the price type
.PARAMETER IsPriceTypeOpening
Indicates if the price type is 'IEX Official Opening Price' ('Q'/0x51).
.PARAMETER IsPriceTypeClosing
Indicates if the price type is 'IEX Official Closing Price' ('M'/0x4d).
.PARAMETER OfficialPrice
Official price as decimal
.OUTPUTS

AdminOfficialPriceModel<PSCustomObject>
#>

function Initialize-AdminOfficialPriceModel {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Symbol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TimestampNanos},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PriceType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PriceTypeCode},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PriceTypeText},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsPriceTypeOpening},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsPriceTypeClosing},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${OfficialPrice}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AdminOfficialPriceModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "symbol" = ${Symbol}
            "timestamp_nanos" = ${TimestampNanos}
            "timestamp" = ${Timestamp}
            "price_type" = ${PriceType}
            "price_type_code" = ${PriceTypeCode}
            "price_type_text" = ${PriceTypeText}
            "is_price_type_opening" = ${IsPriceTypeOpening}
            "is_price_type_closing" = ${IsPriceTypeClosing}
            "official_price" = ${OfficialPrice}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AdminOfficialPriceModel<PSCustomObject>

.DESCRIPTION

Convert from JSON to AdminOfficialPriceModel<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AdminOfficialPriceModel<PSCustomObject>
#>
function ConvertFrom-JsonToAdminOfficialPriceModel {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AdminOfficialPriceModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AdminOfficialPriceModel
        $AllProperties = ("symbol", "timestamp_nanos", "timestamp", "price_type", "price_type_code", "price_type_text", "is_price_type_opening", "is_price_type_closing", "official_price")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol"))) { #optional property not found
            $Symbol = $null
        } else {
            $Symbol = $JsonParameters.PSobject.Properties["symbol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp_nanos"))) { #optional property not found
            $TimestampNanos = $null
        } else {
            $TimestampNanos = $JsonParameters.PSobject.Properties["timestamp_nanos"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price_type"))) { #optional property not found
            $PriceType = $null
        } else {
            $PriceType = $JsonParameters.PSobject.Properties["price_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price_type_code"))) { #optional property not found
            $PriceTypeCode = $null
        } else {
            $PriceTypeCode = $JsonParameters.PSobject.Properties["price_type_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price_type_text"))) { #optional property not found
            $PriceTypeText = $null
        } else {
            $PriceTypeText = $JsonParameters.PSobject.Properties["price_type_text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_price_type_opening"))) { #optional property not found
            $IsPriceTypeOpening = $null
        } else {
            $IsPriceTypeOpening = $JsonParameters.PSobject.Properties["is_price_type_opening"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_price_type_closing"))) { #optional property not found
            $IsPriceTypeClosing = $null
        } else {
            $IsPriceTypeClosing = $JsonParameters.PSobject.Properties["is_price_type_closing"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "official_price"))) { #optional property not found
            $OfficialPrice = $null
        } else {
            $OfficialPrice = $JsonParameters.PSobject.Properties["official_price"].value
        }

        $PSO = [PSCustomObject]@{
            "symbol" = ${Symbol}
            "timestamp_nanos" = ${TimestampNanos}
            "timestamp" = ${Timestamp}
            "price_type" = ${PriceType}
            "price_type_code" = ${PriceTypeCode}
            "price_type_text" = ${PriceTypeText}
            "is_price_type_opening" = ${IsPriceTypeOpening}
            "is_price_type_closing" = ${IsPriceTypeClosing}
            "official_price" = ${OfficialPrice}
        }

        return $PSO
    }

}

