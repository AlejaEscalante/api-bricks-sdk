#
# FinFeedAPI Stock REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents the response DTO for order executed information

.PARAMETER Symbol
The stock symbol
.PARAMETER TimestampNanos
Original timestamp in nanoseconds since epoch
.PARAMETER Timestamp
Time when the order was executed as DateTime
.PARAMETER OrderIdReference
Order identifier reference
.PARAMETER SaleConditionFlags
Sale condition flags for the execution as byte value
.PARAMETER IsIntermarketSweep
Bit 7 (Mask 0x80): Intermarket Sweep Flag True: Intermarket Sweep Order (""ISO"") False: Non-Intermarket Sweep Order
.PARAMETER IsExtendedHoursTrade
Bit 6 (Mask 0x40): Extended Hours Flag True: Extended Hours Trade (i.e., Form T sale condition) False: Regular Market Session Trade
.PARAMETER IsOddLotTrade
Bit 5 (Mask 0x20): Odd Lot Flag True: Odd Lot Trade False: Round or Mixed Lot Trade
.PARAMETER IsTradeThroughExempt
Bit 4 (Mask 0x10): Trade Through Exempt Flag True: Trade is not subject to Rule 611 (Trade Through) of SEC Reg. NMS False: Trade is subject to Rule 611 (Trade Through) of SEC Reg. NMS
.PARAMETER IsSinglePriceCrossTrade
Bit 3 (Mask 0x08): Single-price Cross Trade Flag True: Trade resulting from a single-price cross False: Execution during continuous trading
.PARAMETER Size
Trade volume in number of shares
.PARAMETER Price
Execution price as decimal
.PARAMETER TradeId
IEX trade identifier
.OUTPUTS

Level3ExecutedOrderModel<PSCustomObject>
#>

function Initialize-Level3ExecutedOrderModel {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Symbol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TimestampNanos},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${OrderIdReference},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SaleConditionFlags},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsIntermarketSweep},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsExtendedHoursTrade},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsOddLotTrade},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsTradeThroughExempt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSinglePriceCrossTrade},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Size},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Price},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TradeId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Level3ExecutedOrderModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "symbol" = ${Symbol}
            "timestamp_nanos" = ${TimestampNanos}
            "timestamp" = ${Timestamp}
            "order_id_reference" = ${OrderIdReference}
            "sale_condition_flags" = ${SaleConditionFlags}
            "is_intermarket_sweep" = ${IsIntermarketSweep}
            "is_extended_hours_trade" = ${IsExtendedHoursTrade}
            "is_odd_lot_trade" = ${IsOddLotTrade}
            "is_trade_through_exempt" = ${IsTradeThroughExempt}
            "is_single_price_cross_trade" = ${IsSinglePriceCrossTrade}
            "size" = ${Size}
            "price" = ${Price}
            "trade_id" = ${TradeId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Level3ExecutedOrderModel<PSCustomObject>

.DESCRIPTION

Convert from JSON to Level3ExecutedOrderModel<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Level3ExecutedOrderModel<PSCustomObject>
#>
function ConvertFrom-JsonToLevel3ExecutedOrderModel {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Level3ExecutedOrderModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Level3ExecutedOrderModel
        $AllProperties = ("symbol", "timestamp_nanos", "timestamp", "order_id_reference", "sale_condition_flags", "is_intermarket_sweep", "is_extended_hours_trade", "is_odd_lot_trade", "is_trade_through_exempt", "is_single_price_cross_trade", "size", "price", "trade_id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol"))) { #optional property not found
            $Symbol = $null
        } else {
            $Symbol = $JsonParameters.PSobject.Properties["symbol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp_nanos"))) { #optional property not found
            $TimestampNanos = $null
        } else {
            $TimestampNanos = $JsonParameters.PSobject.Properties["timestamp_nanos"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "order_id_reference"))) { #optional property not found
            $OrderIdReference = $null
        } else {
            $OrderIdReference = $JsonParameters.PSobject.Properties["order_id_reference"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sale_condition_flags"))) { #optional property not found
            $SaleConditionFlags = $null
        } else {
            $SaleConditionFlags = $JsonParameters.PSobject.Properties["sale_condition_flags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_intermarket_sweep"))) { #optional property not found
            $IsIntermarketSweep = $null
        } else {
            $IsIntermarketSweep = $JsonParameters.PSobject.Properties["is_intermarket_sweep"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_extended_hours_trade"))) { #optional property not found
            $IsExtendedHoursTrade = $null
        } else {
            $IsExtendedHoursTrade = $JsonParameters.PSobject.Properties["is_extended_hours_trade"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_odd_lot_trade"))) { #optional property not found
            $IsOddLotTrade = $null
        } else {
            $IsOddLotTrade = $JsonParameters.PSobject.Properties["is_odd_lot_trade"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_trade_through_exempt"))) { #optional property not found
            $IsTradeThroughExempt = $null
        } else {
            $IsTradeThroughExempt = $JsonParameters.PSobject.Properties["is_trade_through_exempt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_single_price_cross_trade"))) { #optional property not found
            $IsSinglePriceCrossTrade = $null
        } else {
            $IsSinglePriceCrossTrade = $JsonParameters.PSobject.Properties["is_single_price_cross_trade"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price"))) { #optional property not found
            $Price = $null
        } else {
            $Price = $JsonParameters.PSobject.Properties["price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "trade_id"))) { #optional property not found
            $TradeId = $null
        } else {
            $TradeId = $JsonParameters.PSobject.Properties["trade_id"].value
        }

        $PSO = [PSCustomObject]@{
            "symbol" = ${Symbol}
            "timestamp_nanos" = ${TimestampNanos}
            "timestamp" = ${Timestamp}
            "order_id_reference" = ${OrderIdReference}
            "sale_condition_flags" = ${SaleConditionFlags}
            "is_intermarket_sweep" = ${IsIntermarketSweep}
            "is_extended_hours_trade" = ${IsExtendedHoursTrade}
            "is_odd_lot_trade" = ${IsOddLotTrade}
            "is_trade_through_exempt" = ${IsTradeThroughExempt}
            "is_single_price_cross_trade" = ${IsSinglePriceCrossTrade}
            "size" = ${Size}
            "price" = ${Price}
            "trade_id" = ${TradeId}
        }

        return $PSO
    }

}

