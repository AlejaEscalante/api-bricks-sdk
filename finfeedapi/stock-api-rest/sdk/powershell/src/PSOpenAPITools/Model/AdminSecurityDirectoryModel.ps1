#
# REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents the response DTO for security directory information

.PARAMETER Symbol
The stock symbol
.PARAMETER TimestampNanos
Original timestamp in nanoseconds since epoch
.PARAMETER Timestamp
Time when the security directory information was recorded as DateTime
.PARAMETER Flags
Flags for the security
.PARAMETER RoundLotSize
Number of shares that represent a round lot
.PARAMETER AdjustedPocPrice
Adjusted previous official closing price as decimal
.PARAMETER LuldTier
LULD tier as byte value
.PARAMETER LuldTierCode
LULD tier as numeric string
.PARAMETER LuldTierText
Human-readable description of the LULD tier
.PARAMETER IsLuldTierNotApplicable
Indicates if LULD Tier is 'Not applicable' (0x0).
.PARAMETER IsLuldTier1
Indicates if LULD Tier is 'Tier 1 NMS Stock' (0x1).
.PARAMETER IsLuldTier2
Indicates if LULD Tier is 'Tier 2 NMS Stock' (0x2).
.OUTPUTS

AdminSecurityDirectoryModel<PSCustomObject>
#>

function Initialize-AdminSecurityDirectoryModel {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Symbol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TimestampNanos},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Flags},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RoundLotSize},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${AdjustedPocPrice},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LuldTier},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LuldTierCode},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LuldTierText},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsLuldTierNotApplicable},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsLuldTier1},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsLuldTier2}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AdminSecurityDirectoryModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "symbol" = ${Symbol}
            "timestamp_nanos" = ${TimestampNanos}
            "timestamp" = ${Timestamp}
            "flags" = ${Flags}
            "round_lot_size" = ${RoundLotSize}
            "adjusted_poc_price" = ${AdjustedPocPrice}
            "luld_tier" = ${LuldTier}
            "luld_tier_code" = ${LuldTierCode}
            "luld_tier_text" = ${LuldTierText}
            "is_luld_tier_not_applicable" = ${IsLuldTierNotApplicable}
            "is_luld_tier1" = ${IsLuldTier1}
            "is_luld_tier2" = ${IsLuldTier2}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AdminSecurityDirectoryModel<PSCustomObject>

.DESCRIPTION

Convert from JSON to AdminSecurityDirectoryModel<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AdminSecurityDirectoryModel<PSCustomObject>
#>
function ConvertFrom-JsonToAdminSecurityDirectoryModel {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AdminSecurityDirectoryModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AdminSecurityDirectoryModel
        $AllProperties = ("symbol", "timestamp_nanos", "timestamp", "flags", "round_lot_size", "adjusted_poc_price", "luld_tier", "luld_tier_code", "luld_tier_text", "is_luld_tier_not_applicable", "is_luld_tier1", "is_luld_tier2")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol"))) { #optional property not found
            $Symbol = $null
        } else {
            $Symbol = $JsonParameters.PSobject.Properties["symbol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp_nanos"))) { #optional property not found
            $TimestampNanos = $null
        } else {
            $TimestampNanos = $JsonParameters.PSobject.Properties["timestamp_nanos"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "flags"))) { #optional property not found
            $Flags = $null
        } else {
            $Flags = $JsonParameters.PSobject.Properties["flags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "round_lot_size"))) { #optional property not found
            $RoundLotSize = $null
        } else {
            $RoundLotSize = $JsonParameters.PSobject.Properties["round_lot_size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "adjusted_poc_price"))) { #optional property not found
            $AdjustedPocPrice = $null
        } else {
            $AdjustedPocPrice = $JsonParameters.PSobject.Properties["adjusted_poc_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "luld_tier"))) { #optional property not found
            $LuldTier = $null
        } else {
            $LuldTier = $JsonParameters.PSobject.Properties["luld_tier"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "luld_tier_code"))) { #optional property not found
            $LuldTierCode = $null
        } else {
            $LuldTierCode = $JsonParameters.PSobject.Properties["luld_tier_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "luld_tier_text"))) { #optional property not found
            $LuldTierText = $null
        } else {
            $LuldTierText = $JsonParameters.PSobject.Properties["luld_tier_text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_luld_tier_not_applicable"))) { #optional property not found
            $IsLuldTierNotApplicable = $null
        } else {
            $IsLuldTierNotApplicable = $JsonParameters.PSobject.Properties["is_luld_tier_not_applicable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_luld_tier1"))) { #optional property not found
            $IsLuldTier1 = $null
        } else {
            $IsLuldTier1 = $JsonParameters.PSobject.Properties["is_luld_tier1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_luld_tier2"))) { #optional property not found
            $IsLuldTier2 = $null
        } else {
            $IsLuldTier2 = $JsonParameters.PSobject.Properties["is_luld_tier2"].value
        }

        $PSO = [PSCustomObject]@{
            "symbol" = ${Symbol}
            "timestamp_nanos" = ${TimestampNanos}
            "timestamp" = ${Timestamp}
            "flags" = ${Flags}
            "round_lot_size" = ${RoundLotSize}
            "adjusted_poc_price" = ${AdjustedPocPrice}
            "luld_tier" = ${LuldTier}
            "luld_tier_code" = ${LuldTierCode}
            "luld_tier_text" = ${LuldTierText}
            "is_luld_tier_not_applicable" = ${IsLuldTierNotApplicable}
            "is_luld_tier1" = ${IsLuldTier1}
            "is_luld_tier2" = ${IsLuldTier2}
        }

        return $PSO
    }

}

