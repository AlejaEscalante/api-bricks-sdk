#
# FinFeedAPI Stock REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents the response DTO for operational halt status information

.PARAMETER Symbol
The stock symbol
.PARAMETER TimestampNanos
Original timestamp in nanoseconds since epoch
.PARAMETER Timestamp
Time when the operational halt status was recorded as DateTime
.PARAMETER OperationalHaltStatus
Operational halt status as byte value
.PARAMETER OperationalHaltStatusCode
Operational halt status as character string
.PARAMETER OperationalHaltStatusText
Human-readable description of the operational halt status
.PARAMETER IsOperationallyHalted
Indicates if the status is 'IEX specific operational trading halt' ('O'/0x4f).
.PARAMETER IsNotOperationallyHalted
Indicates if the status is 'Not operationally halted on IEX' ('N'/0x4e).
.OUTPUTS

AdminOperationalHaltStatusModel<PSCustomObject>
#>

function Initialize-AdminOperationalHaltStatusModel {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Symbol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TimestampNanos},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${OperationalHaltStatus},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OperationalHaltStatusCode},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OperationalHaltStatusText},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsOperationallyHalted},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsNotOperationallyHalted}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AdminOperationalHaltStatusModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "symbol" = ${Symbol}
            "timestamp_nanos" = ${TimestampNanos}
            "timestamp" = ${Timestamp}
            "operational_halt_status" = ${OperationalHaltStatus}
            "operational_halt_status_code" = ${OperationalHaltStatusCode}
            "operational_halt_status_text" = ${OperationalHaltStatusText}
            "is_operationally_halted" = ${IsOperationallyHalted}
            "is_not_operationally_halted" = ${IsNotOperationallyHalted}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AdminOperationalHaltStatusModel<PSCustomObject>

.DESCRIPTION

Convert from JSON to AdminOperationalHaltStatusModel<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AdminOperationalHaltStatusModel<PSCustomObject>
#>
function ConvertFrom-JsonToAdminOperationalHaltStatusModel {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AdminOperationalHaltStatusModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AdminOperationalHaltStatusModel
        $AllProperties = ("symbol", "timestamp_nanos", "timestamp", "operational_halt_status", "operational_halt_status_code", "operational_halt_status_text", "is_operationally_halted", "is_not_operationally_halted")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol"))) { #optional property not found
            $Symbol = $null
        } else {
            $Symbol = $JsonParameters.PSobject.Properties["symbol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp_nanos"))) { #optional property not found
            $TimestampNanos = $null
        } else {
            $TimestampNanos = $JsonParameters.PSobject.Properties["timestamp_nanos"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operational_halt_status"))) { #optional property not found
            $OperationalHaltStatus = $null
        } else {
            $OperationalHaltStatus = $JsonParameters.PSobject.Properties["operational_halt_status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operational_halt_status_code"))) { #optional property not found
            $OperationalHaltStatusCode = $null
        } else {
            $OperationalHaltStatusCode = $JsonParameters.PSobject.Properties["operational_halt_status_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operational_halt_status_text"))) { #optional property not found
            $OperationalHaltStatusText = $null
        } else {
            $OperationalHaltStatusText = $JsonParameters.PSobject.Properties["operational_halt_status_text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_operationally_halted"))) { #optional property not found
            $IsOperationallyHalted = $null
        } else {
            $IsOperationallyHalted = $JsonParameters.PSobject.Properties["is_operationally_halted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_not_operationally_halted"))) { #optional property not found
            $IsNotOperationallyHalted = $null
        } else {
            $IsNotOperationallyHalted = $JsonParameters.PSobject.Properties["is_not_operationally_halted"].value
        }

        $PSO = [PSCustomObject]@{
            "symbol" = ${Symbol}
            "timestamp_nanos" = ${TimestampNanos}
            "timestamp" = ${Timestamp}
            "operational_halt_status" = ${OperationalHaltStatus}
            "operational_halt_status_code" = ${OperationalHaltStatusCode}
            "operational_halt_status_text" = ${OperationalHaltStatusText}
            "is_operationally_halted" = ${IsOperationallyHalted}
            "is_not_operationally_halted" = ${IsNotOperationallyHalted}
        }

        return $PSO
    }

}

