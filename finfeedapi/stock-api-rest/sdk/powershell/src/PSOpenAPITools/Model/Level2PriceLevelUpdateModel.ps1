#
# REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents the response DTO for price level update information

.PARAMETER Symbol
The stock symbol
.PARAMETER TimestampNanos
Original timestamp in nanoseconds since epoch
.PARAMETER Timestamp
Time when the price level update was recorded as DateTime
.PARAMETER IsSideBuy
Indicates if this is a price level update for the Buy Side.
.PARAMETER IsEventProcessingComplete
Indicates if event processing is complete.
.PARAMETER Size
Aggregate quoted size at the price level
.PARAMETER Price
Price level as decimal
.OUTPUTS

Level2PriceLevelUpdateModel<PSCustomObject>
#>

function Initialize-Level2PriceLevelUpdateModel {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Symbol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TimestampNanos},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSideBuy},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsEventProcessingComplete},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Size},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Price}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Level2PriceLevelUpdateModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "symbol" = ${Symbol}
            "timestamp_nanos" = ${TimestampNanos}
            "timestamp" = ${Timestamp}
            "is_side_buy" = ${IsSideBuy}
            "is_event_processing_complete" = ${IsEventProcessingComplete}
            "size" = ${Size}
            "price" = ${Price}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Level2PriceLevelUpdateModel<PSCustomObject>

.DESCRIPTION

Convert from JSON to Level2PriceLevelUpdateModel<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Level2PriceLevelUpdateModel<PSCustomObject>
#>
function ConvertFrom-JsonToLevel2PriceLevelUpdateModel {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Level2PriceLevelUpdateModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Level2PriceLevelUpdateModel
        $AllProperties = ("symbol", "timestamp_nanos", "timestamp", "is_side_buy", "is_event_processing_complete", "size", "price")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol"))) { #optional property not found
            $Symbol = $null
        } else {
            $Symbol = $JsonParameters.PSobject.Properties["symbol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp_nanos"))) { #optional property not found
            $TimestampNanos = $null
        } else {
            $TimestampNanos = $JsonParameters.PSobject.Properties["timestamp_nanos"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_side_buy"))) { #optional property not found
            $IsSideBuy = $null
        } else {
            $IsSideBuy = $JsonParameters.PSobject.Properties["is_side_buy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_event_processing_complete"))) { #optional property not found
            $IsEventProcessingComplete = $null
        } else {
            $IsEventProcessingComplete = $JsonParameters.PSobject.Properties["is_event_processing_complete"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price"))) { #optional property not found
            $Price = $null
        } else {
            $Price = $JsonParameters.PSobject.Properties["price"].value
        }

        $PSO = [PSCustomObject]@{
            "symbol" = ${Symbol}
            "timestamp_nanos" = ${TimestampNanos}
            "timestamp" = ${Timestamp}
            "is_side_buy" = ${IsSideBuy}
            "is_event_processing_complete" = ${IsEventProcessingComplete}
            "size" = ${Size}
            "price" = ${Price}
        }

        return $PSO
    }

}

