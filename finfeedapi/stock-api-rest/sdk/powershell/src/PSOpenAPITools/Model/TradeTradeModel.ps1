#
# FinFeedAPI Stock REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents the response DTO for a single trade event (report or break).

.PARAMETER IsTradeBreak
Indicates if this record represents a trade break (true) or a trade report (false).
.PARAMETER Symbol
The stock symbol.
.PARAMETER TimestampNanos
Original timestamp in nanoseconds since epoch.
.PARAMETER Timestamp
Time when the event was recorded as DateTime (UTC).
.PARAMETER Size
Trade volume (or break volume) in number of shares.
.PARAMETER Price
Trade price (or break price) as decimal.
.PARAMETER TradeId
IEX trade identifier (same for report and its corresponding break).
.PARAMETER IsIntermarketSweep
Bit 7 (Mask 0x80): Intermarket Sweep Flag. True: Intermarket Sweep Order (""ISO""). False: Non-Intermarket Sweep Order.
.PARAMETER IsExtendedHoursTrade
Bit 6 (Mask 0x40): Extended Hours Flag. True: Extended Hours Trade (i.e., Form T sale condition). False: Regular Market Session Trade.
.PARAMETER IsOddLotTrade
Bit 5 (Mask 0x20): Odd Lot Flag. True: Odd Lot Trade. False: Round or Mixed Lot Trade.
.PARAMETER IsTradeThroughExempt
Bit 4 (Mask 0x10): Trade Through Exempt Flag. True: Trade is not subject to Rule 611 (Trade Through) of SEC Reg. NMS. False: Trade is subject to Rule 611 (Trade Through) of SEC Reg. NMS. Applied when the taking order was an ISO that traded through a protected quotation, OR the NBBO was crossed at the time of the trade, OR the trade occurred through a self-helped venue's quotation, OR the trade was a single-price cross.
.PARAMETER IsSinglePriceCrossTrade
Bit 3 (Mask 0x08): Single-price Cross Trade Flag. True: Trade resulting from a single-price cross. False: Execution during continuous trading.
.OUTPUTS

TradeTradeModel<PSCustomObject>
#>

function Initialize-TradeTradeModel {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsTradeBreak},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Symbol},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TimestampNanos},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Size},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Price},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TradeId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsIntermarketSweep},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsExtendedHoursTrade},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsOddLotTrade},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsTradeThroughExempt},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSinglePriceCrossTrade}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => TradeTradeModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "is_trade_break" = ${IsTradeBreak}
            "symbol" = ${Symbol}
            "timestamp_nanos" = ${TimestampNanos}
            "timestamp" = ${Timestamp}
            "size" = ${Size}
            "price" = ${Price}
            "trade_id" = ${TradeId}
            "is_intermarket_sweep" = ${IsIntermarketSweep}
            "is_extended_hours_trade" = ${IsExtendedHoursTrade}
            "is_odd_lot_trade" = ${IsOddLotTrade}
            "is_trade_through_exempt" = ${IsTradeThroughExempt}
            "is_single_price_cross_trade" = ${IsSinglePriceCrossTrade}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TradeTradeModel<PSCustomObject>

.DESCRIPTION

Convert from JSON to TradeTradeModel<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TradeTradeModel<PSCustomObject>
#>
function ConvertFrom-JsonToTradeTradeModel {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => TradeTradeModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TradeTradeModel
        $AllProperties = ("is_trade_break", "symbol", "timestamp_nanos", "timestamp", "size", "price", "trade_id", "is_intermarket_sweep", "is_extended_hours_trade", "is_odd_lot_trade", "is_trade_through_exempt", "is_single_price_cross_trade")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_trade_break"))) { #optional property not found
            $IsTradeBreak = $null
        } else {
            $IsTradeBreak = $JsonParameters.PSobject.Properties["is_trade_break"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol"))) { #optional property not found
            $Symbol = $null
        } else {
            $Symbol = $JsonParameters.PSobject.Properties["symbol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp_nanos"))) { #optional property not found
            $TimestampNanos = $null
        } else {
            $TimestampNanos = $JsonParameters.PSobject.Properties["timestamp_nanos"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price"))) { #optional property not found
            $Price = $null
        } else {
            $Price = $JsonParameters.PSobject.Properties["price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "trade_id"))) { #optional property not found
            $TradeId = $null
        } else {
            $TradeId = $JsonParameters.PSobject.Properties["trade_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_intermarket_sweep"))) { #optional property not found
            $IsIntermarketSweep = $null
        } else {
            $IsIntermarketSweep = $JsonParameters.PSobject.Properties["is_intermarket_sweep"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_extended_hours_trade"))) { #optional property not found
            $IsExtendedHoursTrade = $null
        } else {
            $IsExtendedHoursTrade = $JsonParameters.PSobject.Properties["is_extended_hours_trade"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_odd_lot_trade"))) { #optional property not found
            $IsOddLotTrade = $null
        } else {
            $IsOddLotTrade = $JsonParameters.PSobject.Properties["is_odd_lot_trade"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_trade_through_exempt"))) { #optional property not found
            $IsTradeThroughExempt = $null
        } else {
            $IsTradeThroughExempt = $JsonParameters.PSobject.Properties["is_trade_through_exempt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_single_price_cross_trade"))) { #optional property not found
            $IsSinglePriceCrossTrade = $null
        } else {
            $IsSinglePriceCrossTrade = $JsonParameters.PSobject.Properties["is_single_price_cross_trade"].value
        }

        $PSO = [PSCustomObject]@{
            "is_trade_break" = ${IsTradeBreak}
            "symbol" = ${Symbol}
            "timestamp_nanos" = ${TimestampNanos}
            "timestamp" = ${Timestamp}
            "size" = ${Size}
            "price" = ${Price}
            "trade_id" = ${TradeId}
            "is_intermarket_sweep" = ${IsIntermarketSweep}
            "is_extended_hours_trade" = ${IsExtendedHoursTrade}
            "is_odd_lot_trade" = ${IsOddLotTrade}
            "is_trade_through_exempt" = ${IsTradeThroughExempt}
            "is_single_price_cross_trade" = ${IsSinglePriceCrossTrade}
        }

        return $PSO
    }

}

