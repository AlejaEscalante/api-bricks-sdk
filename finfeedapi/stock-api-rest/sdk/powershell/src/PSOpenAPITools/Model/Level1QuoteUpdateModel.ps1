#
# FinFeedAPI Stock REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents the response DTO for quote update information

.PARAMETER Symbol
The stock symbol
.PARAMETER TimestampNanos
Original timestamp in nanoseconds since epoch
.PARAMETER Timestamp
Time when the quote update was recorded as DateTime
.PARAMETER IsSymbolAvailable
Gets whether the symbol is available for trading True if active, False if halted, paused, or otherwise not available
.PARAMETER IsPrePostMarketSession
Gets whether the market session is regular or pre/post-market True if pre/post-market session, False if regular market session
.PARAMETER AskSize
Ask size in number of shares
.PARAMETER AskPrice
Ask price as decimal
.PARAMETER BidPrice
Bid price as decimal
.PARAMETER BidSize
Bid size in number of shares
.OUTPUTS

Level1QuoteUpdateModel<PSCustomObject>
#>

function Initialize-Level1QuoteUpdateModel {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Symbol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TimestampNanos},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSymbolAvailable},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsPrePostMarketSession},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AskSize},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${AskPrice},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${BidPrice},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${BidSize}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Level1QuoteUpdateModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "symbol" = ${Symbol}
            "timestamp_nanos" = ${TimestampNanos}
            "timestamp" = ${Timestamp}
            "is_symbol_available" = ${IsSymbolAvailable}
            "is_pre_post_market_session" = ${IsPrePostMarketSession}
            "ask_size" = ${AskSize}
            "ask_price" = ${AskPrice}
            "bid_price" = ${BidPrice}
            "bid_size" = ${BidSize}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Level1QuoteUpdateModel<PSCustomObject>

.DESCRIPTION

Convert from JSON to Level1QuoteUpdateModel<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Level1QuoteUpdateModel<PSCustomObject>
#>
function ConvertFrom-JsonToLevel1QuoteUpdateModel {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Level1QuoteUpdateModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Level1QuoteUpdateModel
        $AllProperties = ("symbol", "timestamp_nanos", "timestamp", "is_symbol_available", "is_pre_post_market_session", "ask_size", "ask_price", "bid_price", "bid_size")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol"))) { #optional property not found
            $Symbol = $null
        } else {
            $Symbol = $JsonParameters.PSobject.Properties["symbol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp_nanos"))) { #optional property not found
            $TimestampNanos = $null
        } else {
            $TimestampNanos = $JsonParameters.PSobject.Properties["timestamp_nanos"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_symbol_available"))) { #optional property not found
            $IsSymbolAvailable = $null
        } else {
            $IsSymbolAvailable = $JsonParameters.PSobject.Properties["is_symbol_available"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_pre_post_market_session"))) { #optional property not found
            $IsPrePostMarketSession = $null
        } else {
            $IsPrePostMarketSession = $JsonParameters.PSobject.Properties["is_pre_post_market_session"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ask_size"))) { #optional property not found
            $AskSize = $null
        } else {
            $AskSize = $JsonParameters.PSobject.Properties["ask_size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ask_price"))) { #optional property not found
            $AskPrice = $null
        } else {
            $AskPrice = $JsonParameters.PSobject.Properties["ask_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bid_price"))) { #optional property not found
            $BidPrice = $null
        } else {
            $BidPrice = $JsonParameters.PSobject.Properties["bid_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bid_size"))) { #optional property not found
            $BidSize = $null
        } else {
            $BidSize = $JsonParameters.PSobject.Properties["bid_size"].value
        }

        $PSO = [PSCustomObject]@{
            "symbol" = ${Symbol}
            "timestamp_nanos" = ${TimestampNanos}
            "timestamp" = ${Timestamp}
            "is_symbol_available" = ${IsSymbolAvailable}
            "is_pre_post_market_session" = ${IsPrePostMarketSession}
            "ask_size" = ${AskSize}
            "ask_price" = ${AskPrice}
            "bid_price" = ${BidPrice}
            "bid_size" = ${BidSize}
        }

        return $PSO
    }

}

