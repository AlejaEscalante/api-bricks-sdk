note
 description:"[
		FinFeedAPI Stock REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class ADMIN_OFFICIAL_PRICE_MODEL




feature --Access

    symbol: detachable STRING_32
      -- The stock symbol
    timestamp_nanos: INTEGER_64
      -- Original timestamp in nanoseconds since epoch
    timestamp: detachable DATE_TIME
      -- Time when the official price was recorded as DateTime
    price_type: INTEGER_32
      -- Type of price as byte value
    price_type_code: detachable STRING_32
      -- Type of price as character string
    price_type_text: detachable STRING_32
      -- Human-readable description of the price type
    is_price_type_opening: BOOLEAN
      -- Indicates if the price type is 'IEX Official Opening Price' ('Q'/0x51).
    is_price_type_closing: BOOLEAN
      -- Indicates if the price type is 'IEX Official Closing Price' ('M'/0x4d).
    official_price: REAL_64
      -- Official price as decimal

feature -- Change Element

    set_symbol (a_name: like symbol)
        -- Set 'symbol' with 'a_name'.
      do
        symbol := a_name
      ensure
        symbol_set: symbol = a_name
      end

    set_timestamp_nanos (a_name: like timestamp_nanos)
        -- Set 'timestamp_nanos' with 'a_name'.
      do
        timestamp_nanos := a_name
      ensure
        timestamp_nanos_set: timestamp_nanos = a_name
      end

    set_timestamp (a_name: like timestamp)
        -- Set 'timestamp' with 'a_name'.
      do
        timestamp := a_name
      ensure
        timestamp_set: timestamp = a_name
      end

    set_price_type (a_name: like price_type)
        -- Set 'price_type' with 'a_name'.
      do
        price_type := a_name
      ensure
        price_type_set: price_type = a_name
      end

    set_price_type_code (a_name: like price_type_code)
        -- Set 'price_type_code' with 'a_name'.
      do
        price_type_code := a_name
      ensure
        price_type_code_set: price_type_code = a_name
      end

    set_price_type_text (a_name: like price_type_text)
        -- Set 'price_type_text' with 'a_name'.
      do
        price_type_text := a_name
      ensure
        price_type_text_set: price_type_text = a_name
      end

    set_is_price_type_opening (a_name: like is_price_type_opening)
        -- Set 'is_price_type_opening' with 'a_name'.
      do
        is_price_type_opening := a_name
      ensure
        is_price_type_opening_set: is_price_type_opening = a_name
      end

    set_is_price_type_closing (a_name: like is_price_type_closing)
        -- Set 'is_price_type_closing' with 'a_name'.
      do
        is_price_type_closing := a_name
      ensure
        is_price_type_closing_set: is_price_type_closing = a_name
      end

    set_official_price (a_name: like official_price)
        -- Set 'official_price' with 'a_name'.
      do
        official_price := a_name
      ensure
        official_price_set: official_price = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass ADMIN_OFFICIAL_PRICE_MODEL%N")
        if attached symbol as l_symbol then
          Result.append ("%Nsymbol:")
          Result.append (l_symbol.out)
          Result.append ("%N")
        end
        if attached timestamp_nanos as l_timestamp_nanos then
          Result.append ("%Ntimestamp_nanos:")
          Result.append (l_timestamp_nanos.out)
          Result.append ("%N")
        end
        if attached timestamp as l_timestamp then
          Result.append ("%Ntimestamp:")
          Result.append (l_timestamp.out)
          Result.append ("%N")
        end
        if attached price_type as l_price_type then
          Result.append ("%Nprice_type:")
          Result.append (l_price_type.out)
          Result.append ("%N")
        end
        if attached price_type_code as l_price_type_code then
          Result.append ("%Nprice_type_code:")
          Result.append (l_price_type_code.out)
          Result.append ("%N")
        end
        if attached price_type_text as l_price_type_text then
          Result.append ("%Nprice_type_text:")
          Result.append (l_price_type_text.out)
          Result.append ("%N")
        end
        if attached is_price_type_opening as l_is_price_type_opening then
          Result.append ("%Nis_price_type_opening:")
          Result.append (l_is_price_type_opening.out)
          Result.append ("%N")
        end
        if attached is_price_type_closing as l_is_price_type_closing then
          Result.append ("%Nis_price_type_closing:")
          Result.append (l_is_price_type_closing.out)
          Result.append ("%N")
        end
        if attached official_price as l_official_price then
          Result.append ("%Nofficial_price:")
          Result.append (l_official_price.out)
          Result.append ("%N")
        end
      end
end

