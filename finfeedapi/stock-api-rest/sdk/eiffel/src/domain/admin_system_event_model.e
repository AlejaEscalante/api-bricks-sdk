note
 description:"[
		FinFeedAPI Stock REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class ADMIN_SYSTEM_EVENT_MODEL




feature --Access

    timestamp_nanos: INTEGER_64
      -- Original timestamp in nanoseconds since epoch
    timestamp: detachable DATE_TIME
      -- Time when the system event was recorded as DateTime
    system_event: INTEGER_32
      -- System event as byte value
    system_event_code: detachable STRING_32
      -- System event as string
    system_event_text: detachable STRING_32
      -- Human-readable description of the system event
    is_system_event_start_of_messages: BOOLEAN
      -- Indicates if the system event is 'Start of Messages' (O). Outside of heartbeat messages on the lower level protocol,  the start of day message is the first message sent in any trading session.
    is_system_event_start_of_system_hours: BOOLEAN
      -- Indicates if the system event is 'Start of System Hours' (S). This message indicates that IEX is open and ready to start accepting orders.
    is_system_event_start_of_regular_market_hours: BOOLEAN
      -- Indicates if the system event is 'Start of Regular Market Hours' (R). This message indicates that DAY and GTX orders, as well as market orders and pegged orders,  are available for execution on IEX.
    is_system_event_end_of_regular_market_hours: BOOLEAN
      -- Indicates if the system event is 'End of Regular Market Hours' (M). This message indicates that DAY orders, market orders, and pegged orders  are no longer accepted by IEX.
    is_system_event_end_of_system_hours: BOOLEAN
      -- Indicates if the system event is 'End of System Hours' (E). This message indicates that IEX is now closed and will not accept  any new orders during this trading session. It is still possible  to receive messages after the end of day.
    is_system_event_end_of_messages: BOOLEAN
      -- Indicates if the system event is 'End of Messages' (C). This is always the last message sent in any trading session.

feature -- Change Element

    set_timestamp_nanos (a_name: like timestamp_nanos)
        -- Set 'timestamp_nanos' with 'a_name'.
      do
        timestamp_nanos := a_name
      ensure
        timestamp_nanos_set: timestamp_nanos = a_name
      end

    set_timestamp (a_name: like timestamp)
        -- Set 'timestamp' with 'a_name'.
      do
        timestamp := a_name
      ensure
        timestamp_set: timestamp = a_name
      end

    set_system_event (a_name: like system_event)
        -- Set 'system_event' with 'a_name'.
      do
        system_event := a_name
      ensure
        system_event_set: system_event = a_name
      end

    set_system_event_code (a_name: like system_event_code)
        -- Set 'system_event_code' with 'a_name'.
      do
        system_event_code := a_name
      ensure
        system_event_code_set: system_event_code = a_name
      end

    set_system_event_text (a_name: like system_event_text)
        -- Set 'system_event_text' with 'a_name'.
      do
        system_event_text := a_name
      ensure
        system_event_text_set: system_event_text = a_name
      end

    set_is_system_event_start_of_messages (a_name: like is_system_event_start_of_messages)
        -- Set 'is_system_event_start_of_messages' with 'a_name'.
      do
        is_system_event_start_of_messages := a_name
      ensure
        is_system_event_start_of_messages_set: is_system_event_start_of_messages = a_name
      end

    set_is_system_event_start_of_system_hours (a_name: like is_system_event_start_of_system_hours)
        -- Set 'is_system_event_start_of_system_hours' with 'a_name'.
      do
        is_system_event_start_of_system_hours := a_name
      ensure
        is_system_event_start_of_system_hours_set: is_system_event_start_of_system_hours = a_name
      end

    set_is_system_event_start_of_regular_market_hours (a_name: like is_system_event_start_of_regular_market_hours)
        -- Set 'is_system_event_start_of_regular_market_hours' with 'a_name'.
      do
        is_system_event_start_of_regular_market_hours := a_name
      ensure
        is_system_event_start_of_regular_market_hours_set: is_system_event_start_of_regular_market_hours = a_name
      end

    set_is_system_event_end_of_regular_market_hours (a_name: like is_system_event_end_of_regular_market_hours)
        -- Set 'is_system_event_end_of_regular_market_hours' with 'a_name'.
      do
        is_system_event_end_of_regular_market_hours := a_name
      ensure
        is_system_event_end_of_regular_market_hours_set: is_system_event_end_of_regular_market_hours = a_name
      end

    set_is_system_event_end_of_system_hours (a_name: like is_system_event_end_of_system_hours)
        -- Set 'is_system_event_end_of_system_hours' with 'a_name'.
      do
        is_system_event_end_of_system_hours := a_name
      ensure
        is_system_event_end_of_system_hours_set: is_system_event_end_of_system_hours = a_name
      end

    set_is_system_event_end_of_messages (a_name: like is_system_event_end_of_messages)
        -- Set 'is_system_event_end_of_messages' with 'a_name'.
      do
        is_system_event_end_of_messages := a_name
      ensure
        is_system_event_end_of_messages_set: is_system_event_end_of_messages = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass ADMIN_SYSTEM_EVENT_MODEL%N")
        if attached timestamp_nanos as l_timestamp_nanos then
          Result.append ("%Ntimestamp_nanos:")
          Result.append (l_timestamp_nanos.out)
          Result.append ("%N")
        end
        if attached timestamp as l_timestamp then
          Result.append ("%Ntimestamp:")
          Result.append (l_timestamp.out)
          Result.append ("%N")
        end
        if attached system_event as l_system_event then
          Result.append ("%Nsystem_event:")
          Result.append (l_system_event.out)
          Result.append ("%N")
        end
        if attached system_event_code as l_system_event_code then
          Result.append ("%Nsystem_event_code:")
          Result.append (l_system_event_code.out)
          Result.append ("%N")
        end
        if attached system_event_text as l_system_event_text then
          Result.append ("%Nsystem_event_text:")
          Result.append (l_system_event_text.out)
          Result.append ("%N")
        end
        if attached is_system_event_start_of_messages as l_is_system_event_start_of_messages then
          Result.append ("%Nis_system_event_start_of_messages:")
          Result.append (l_is_system_event_start_of_messages.out)
          Result.append ("%N")
        end
        if attached is_system_event_start_of_system_hours as l_is_system_event_start_of_system_hours then
          Result.append ("%Nis_system_event_start_of_system_hours:")
          Result.append (l_is_system_event_start_of_system_hours.out)
          Result.append ("%N")
        end
        if attached is_system_event_start_of_regular_market_hours as l_is_system_event_start_of_regular_market_hours then
          Result.append ("%Nis_system_event_start_of_regular_market_hours:")
          Result.append (l_is_system_event_start_of_regular_market_hours.out)
          Result.append ("%N")
        end
        if attached is_system_event_end_of_regular_market_hours as l_is_system_event_end_of_regular_market_hours then
          Result.append ("%Nis_system_event_end_of_regular_market_hours:")
          Result.append (l_is_system_event_end_of_regular_market_hours.out)
          Result.append ("%N")
        end
        if attached is_system_event_end_of_system_hours as l_is_system_event_end_of_system_hours then
          Result.append ("%Nis_system_event_end_of_system_hours:")
          Result.append (l_is_system_event_end_of_system_hours.out)
          Result.append ("%N")
        end
        if attached is_system_event_end_of_messages as l_is_system_event_end_of_messages then
          Result.append ("%Nis_system_event_end_of_messages:")
          Result.append (l_is_system_event_end_of_messages.out)
          Result.append ("%N")
        end
      end
end

