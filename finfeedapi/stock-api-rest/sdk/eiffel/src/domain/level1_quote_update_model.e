note
 description:"[
		FinFeedAPI Stock REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class LEVEL1_QUOTE_UPDATE_MODEL




feature --Access

    symbol: detachable STRING_32
      -- The stock symbol
    timestamp_nanos: INTEGER_64
      -- Original timestamp in nanoseconds since epoch
    timestamp: detachable DATE_TIME
      -- Time when the quote update was recorded as DateTime
    is_symbol_available: BOOLEAN
      -- Gets whether the symbol is available for trading True if active, False if halted, paused, or otherwise not available
    is_pre_post_market_session: BOOLEAN
      -- Gets whether the market session is regular or pre/post-market True if pre/post-market session, False if regular market session
    ask_size: INTEGER_32
      -- Ask size in number of shares
    ask_price: REAL_64
      -- Ask price as decimal
    bid_price: REAL_64
      -- Bid price as decimal
    bid_size: INTEGER_32
      -- Bid size in number of shares

feature -- Change Element

    set_symbol (a_name: like symbol)
        -- Set 'symbol' with 'a_name'.
      do
        symbol := a_name
      ensure
        symbol_set: symbol = a_name
      end

    set_timestamp_nanos (a_name: like timestamp_nanos)
        -- Set 'timestamp_nanos' with 'a_name'.
      do
        timestamp_nanos := a_name
      ensure
        timestamp_nanos_set: timestamp_nanos = a_name
      end

    set_timestamp (a_name: like timestamp)
        -- Set 'timestamp' with 'a_name'.
      do
        timestamp := a_name
      ensure
        timestamp_set: timestamp = a_name
      end

    set_is_symbol_available (a_name: like is_symbol_available)
        -- Set 'is_symbol_available' with 'a_name'.
      do
        is_symbol_available := a_name
      ensure
        is_symbol_available_set: is_symbol_available = a_name
      end

    set_is_pre_post_market_session (a_name: like is_pre_post_market_session)
        -- Set 'is_pre_post_market_session' with 'a_name'.
      do
        is_pre_post_market_session := a_name
      ensure
        is_pre_post_market_session_set: is_pre_post_market_session = a_name
      end

    set_ask_size (a_name: like ask_size)
        -- Set 'ask_size' with 'a_name'.
      do
        ask_size := a_name
      ensure
        ask_size_set: ask_size = a_name
      end

    set_ask_price (a_name: like ask_price)
        -- Set 'ask_price' with 'a_name'.
      do
        ask_price := a_name
      ensure
        ask_price_set: ask_price = a_name
      end

    set_bid_price (a_name: like bid_price)
        -- Set 'bid_price' with 'a_name'.
      do
        bid_price := a_name
      ensure
        bid_price_set: bid_price = a_name
      end

    set_bid_size (a_name: like bid_size)
        -- Set 'bid_size' with 'a_name'.
      do
        bid_size := a_name
      ensure
        bid_size_set: bid_size = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass LEVEL1_QUOTE_UPDATE_MODEL%N")
        if attached symbol as l_symbol then
          Result.append ("%Nsymbol:")
          Result.append (l_symbol.out)
          Result.append ("%N")
        end
        if attached timestamp_nanos as l_timestamp_nanos then
          Result.append ("%Ntimestamp_nanos:")
          Result.append (l_timestamp_nanos.out)
          Result.append ("%N")
        end
        if attached timestamp as l_timestamp then
          Result.append ("%Ntimestamp:")
          Result.append (l_timestamp.out)
          Result.append ("%N")
        end
        if attached is_symbol_available as l_is_symbol_available then
          Result.append ("%Nis_symbol_available:")
          Result.append (l_is_symbol_available.out)
          Result.append ("%N")
        end
        if attached is_pre_post_market_session as l_is_pre_post_market_session then
          Result.append ("%Nis_pre_post_market_session:")
          Result.append (l_is_pre_post_market_session.out)
          Result.append ("%N")
        end
        if attached ask_size as l_ask_size then
          Result.append ("%Nask_size:")
          Result.append (l_ask_size.out)
          Result.append ("%N")
        end
        if attached ask_price as l_ask_price then
          Result.append ("%Nask_price:")
          Result.append (l_ask_price.out)
          Result.append ("%N")
        end
        if attached bid_price as l_bid_price then
          Result.append ("%Nbid_price:")
          Result.append (l_bid_price.out)
          Result.append ("%N")
        end
        if attached bid_size as l_bid_size then
          Result.append ("%Nbid_size:")
          Result.append (l_bid_size.out)
          Result.append ("%N")
        end
      end
end

