note
 description:"[
		FinFeedAPI Stock REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	NATIVEIEX_API

inherit

    API_I


feature -- API Access


	v1_native_iex_admin_messages_symbol_get (symbol: STRING_32; date: DATE_TIME): detachable LIST [ADMIN_ADMIN_MESSAGE_MODEL]
			-- Get Admin Messages
			-- 
			-- 
			-- argument: symbol The symbol identifier (required)
			-- 
			-- argument: date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
			-- 
			-- 
			-- Result LIST [ADMIN_ADMIN_MESSAGE_MODEL]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/native/iex/admin/messages/{symbol}"
			l_path.replace_substring_all ("{"+"symbol"+"}", api_client.url_encode (symbol.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "date", date));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [ADMIN_ADMIN_MESSAGE_MODEL] } l_response.data ({ LIST [ADMIN_ADMIN_MESSAGE_MODEL] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_native_iex_admin_system_event_get (date: DATE_TIME): detachable LIST [ADMIN_SYSTEM_EVENT_MODEL]
			-- Get System Events
			-- 
			-- 
			-- argument: date Date in format YYYY-MM-DD (required)
			-- 
			-- 
			-- Result LIST [ADMIN_SYSTEM_EVENT_MODEL]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/native/iex/admin/system-event"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "date", date));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [ADMIN_SYSTEM_EVENT_MODEL] } l_response.data ({ LIST [ADMIN_SYSTEM_EVENT_MODEL] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_native_iex_level1_quote_symbol_get (symbol: STRING_32; date: DATE_TIME): detachable LIST [LEVEL1_QUOTE_UPDATE_MODEL]
			-- Get Level-1 Quotes
			-- 
			-- 
			-- argument: symbol The symbol identifier (required)
			-- 
			-- argument: date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
			-- 
			-- 
			-- Result LIST [LEVEL1_QUOTE_UPDATE_MODEL]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/native/iex/level1-quote/{symbol}"
			l_path.replace_substring_all ("{"+"symbol"+"}", api_client.url_encode (symbol.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "date", date));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [LEVEL1_QUOTE_UPDATE_MODEL] } l_response.data ({ LIST [LEVEL1_QUOTE_UPDATE_MODEL] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_native_iex_level2_price_level_update_symbol_get (symbol: STRING_32; date: DATE_TIME): detachable LIST [LEVEL2_PRICE_LEVEL_UPDATE_MODEL]
			-- Get Level-2 Price Level Book
			-- 
			-- 
			-- argument: symbol The symbol identifier (required)
			-- 
			-- argument: date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
			-- 
			-- 
			-- Result LIST [LEVEL2_PRICE_LEVEL_UPDATE_MODEL]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/native/iex/level2-price-level-update/{symbol}"
			l_path.replace_substring_all ("{"+"symbol"+"}", api_client.url_encode (symbol.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "date", date));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [LEVEL2_PRICE_LEVEL_UPDATE_MODEL] } l_response.data ({ LIST [LEVEL2_PRICE_LEVEL_UPDATE_MODEL] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_native_iex_level3_order_book_symbol_get (symbol: STRING_32; date: DATE_TIME): detachable LIST [LEVEL3_ORDER_BOOK_MODEL]
			-- Get Level-3 Order Book
			-- 
			-- 
			-- argument: symbol The symbol identifier (required)
			-- 
			-- argument: date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
			-- 
			-- 
			-- Result LIST [LEVEL3_ORDER_BOOK_MODEL]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/native/iex/level3-order-book/{symbol}"
			l_path.replace_substring_all ("{"+"symbol"+"}", api_client.url_encode (symbol.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "date", date));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [LEVEL3_ORDER_BOOK_MODEL] } l_response.data ({ LIST [LEVEL3_ORDER_BOOK_MODEL] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_native_iex_trade_symbol_get (symbol: STRING_32; date: DATE_TIME): detachable LIST [TRADE_TRADE_MODEL]
			-- Get Trades
			-- 
			-- 
			-- argument: symbol The symbol identifier (required)
			-- 
			-- argument: date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
			-- 
			-- 
			-- Result LIST [TRADE_TRADE_MODEL]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/native/iex/trade/{symbol}"
			l_path.replace_substring_all ("{"+"symbol"+"}", api_client.url_encode (symbol.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "date", date));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [TRADE_TRADE_MODEL] } l_response.data ({ LIST [TRADE_TRADE_MODEL] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
