/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.AdminAuctionInformationModel

class AdminAuctionInformationModelTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of AdminAuctionInformationModel
        //val modelInstance = AdminAuctionInformationModel()

        // to test the property `symbol` - The stock symbol
        should("test symbol") {
            // uncomment below to test the property
            //modelInstance.symbol shouldBe ("TODO")
        }

        // to test the property `timestampNanos` - Original timestamp in nanoseconds since epoch
        should("test timestampNanos") {
            // uncomment below to test the property
            //modelInstance.timestampNanos shouldBe ("TODO")
        }

        // to test the property `timestamp` - Time when the auction data was recorded as DateTime
        should("test timestamp") {
            // uncomment below to test the property
            //modelInstance.timestamp shouldBe ("TODO")
        }

        // to test the property `auctionType` - Type of auction as byte value
        should("test auctionType") {
            // uncomment below to test the property
            //modelInstance.auctionType shouldBe ("TODO")
        }

        // to test the property `auctionTypeCode` - Type of auction as character string
        should("test auctionTypeCode") {
            // uncomment below to test the property
            //modelInstance.auctionTypeCode shouldBe ("TODO")
        }

        // to test the property `auctionTypeText` - Human-readable description of the auction type
        should("test auctionTypeText") {
            // uncomment below to test the property
            //modelInstance.auctionTypeText shouldBe ("TODO")
        }

        // to test the property `isAuctionTypeOpening` - Indicates if the auction type is 'Opening Auction' ('O'/0x4f).
        should("test isAuctionTypeOpening") {
            // uncomment below to test the property
            //modelInstance.isAuctionTypeOpening shouldBe ("TODO")
        }

        // to test the property `isAuctionTypeClosing` - Indicates if the auction type is 'Closing Auction' ('C'/0x43).
        should("test isAuctionTypeClosing") {
            // uncomment below to test the property
            //modelInstance.isAuctionTypeClosing shouldBe ("TODO")
        }

        // to test the property `isAuctionTypeIpo` - Indicates if the auction type is 'IPO Auction' ('I'/0x49).
        should("test isAuctionTypeIpo") {
            // uncomment below to test the property
            //modelInstance.isAuctionTypeIpo shouldBe ("TODO")
        }

        // to test the property `isAuctionTypeHalt` - Indicates if the auction type is 'Halt Auction' ('H'/0x48).
        should("test isAuctionTypeHalt") {
            // uncomment below to test the property
            //modelInstance.isAuctionTypeHalt shouldBe ("TODO")
        }

        // to test the property `isAuctionTypeVolatility` - Indicates if the auction type is 'Volatility Auction' ('V'/0x56).
        should("test isAuctionTypeVolatility") {
            // uncomment below to test the property
            //modelInstance.isAuctionTypeVolatility shouldBe ("TODO")
        }

        // to test the property `pairedShares` - Number of shares paired at the Reference Price
        should("test pairedShares") {
            // uncomment below to test the property
            //modelInstance.pairedShares shouldBe ("TODO")
        }

        // to test the property `referencePrice` - Reference price as decimal
        should("test referencePrice") {
            // uncomment below to test the property
            //modelInstance.referencePrice shouldBe ("TODO")
        }

        // to test the property `indicativeClearingPrice` - Indicative clearing price as decimal
        should("test indicativeClearingPrice") {
            // uncomment below to test the property
            //modelInstance.indicativeClearingPrice shouldBe ("TODO")
        }

        // to test the property `imbalanceShares` - Number of unpaired shares at the Reference Price
        should("test imbalanceShares") {
            // uncomment below to test the property
            //modelInstance.imbalanceShares shouldBe ("TODO")
        }

        // to test the property `imbalanceSide` - Side of the imbalance as byte value
        should("test imbalanceSide") {
            // uncomment below to test the property
            //modelInstance.imbalanceSide shouldBe ("TODO")
        }

        // to test the property `imbalanceSideCode` - Side of the imbalance as character string
        should("test imbalanceSideCode") {
            // uncomment below to test the property
            //modelInstance.imbalanceSideCode shouldBe ("TODO")
        }

        // to test the property `imbalanceSideText` - Human-readable description of the imbalance side
        should("test imbalanceSideText") {
            // uncomment below to test the property
            //modelInstance.imbalanceSideText shouldBe ("TODO")
        }

        // to test the property `isImbalanceSideBuy` - Indicates if there is a buy-side imbalance ('B'/0x42).
        should("test isImbalanceSideBuy") {
            // uncomment below to test the property
            //modelInstance.isImbalanceSideBuy shouldBe ("TODO")
        }

        // to test the property `isImbalanceSideSell` - Indicates if there is a sell-side imbalance ('S'/0x53).
        should("test isImbalanceSideSell") {
            // uncomment below to test the property
            //modelInstance.isImbalanceSideSell shouldBe ("TODO")
        }

        // to test the property `isImbalanceSideNone` - Indicates if there is no imbalance ('N'/0x4e).
        should("test isImbalanceSideNone") {
            // uncomment below to test the property
            //modelInstance.isImbalanceSideNone shouldBe ("TODO")
        }

        // to test the property `extensionNumber` - Number of extensions to the auction
        should("test extensionNumber") {
            // uncomment below to test the property
            //modelInstance.extensionNumber shouldBe ("TODO")
        }

        // to test the property `scheduledAuctionTimeSeconds` - Scheduled auction time in seconds since epoch
        should("test scheduledAuctionTimeSeconds") {
            // uncomment below to test the property
            //modelInstance.scheduledAuctionTimeSeconds shouldBe ("TODO")
        }

        // to test the property `scheduledAuctionTime` - Scheduled time for the auction as DateTime
        should("test scheduledAuctionTime") {
            // uncomment below to test the property
            //modelInstance.scheduledAuctionTime shouldBe ("TODO")
        }

        // to test the property `auctionBookClearingPrice` - Auction book clearing price as decimal
        should("test auctionBookClearingPrice") {
            // uncomment below to test the property
            //modelInstance.auctionBookClearingPrice shouldBe ("TODO")
        }

        // to test the property `collarReferencePrice` - Collar reference price as decimal
        should("test collarReferencePrice") {
            // uncomment below to test the property
            //modelInstance.collarReferencePrice shouldBe ("TODO")
        }

        // to test the property `lowerAuctionCollar` - Lower auction collar as decimal
        should("test lowerAuctionCollar") {
            // uncomment below to test the property
            //modelInstance.lowerAuctionCollar shouldBe ("TODO")
        }

        // to test the property `upperAuctionCollar` - Upper auction collar as decimal
        should("test upperAuctionCollar") {
            // uncomment below to test the property
            //modelInstance.upperAuctionCollar shouldBe ("TODO")
        }

    }
}
