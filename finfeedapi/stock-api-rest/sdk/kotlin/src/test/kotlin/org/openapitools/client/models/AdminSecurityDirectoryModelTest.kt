/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.AdminSecurityDirectoryModel

class AdminSecurityDirectoryModelTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of AdminSecurityDirectoryModel
        //val modelInstance = AdminSecurityDirectoryModel()

        // to test the property `symbol` - The stock symbol
        should("test symbol") {
            // uncomment below to test the property
            //modelInstance.symbol shouldBe ("TODO")
        }

        // to test the property `timestampNanos` - Original timestamp in nanoseconds since epoch
        should("test timestampNanos") {
            // uncomment below to test the property
            //modelInstance.timestampNanos shouldBe ("TODO")
        }

        // to test the property `timestamp` - Time when the security directory information was recorded as DateTime
        should("test timestamp") {
            // uncomment below to test the property
            //modelInstance.timestamp shouldBe ("TODO")
        }

        // to test the property `flags` - Flags for the security
        should("test flags") {
            // uncomment below to test the property
            //modelInstance.flags shouldBe ("TODO")
        }

        // to test the property `roundLotSize` - Number of shares that represent a round lot
        should("test roundLotSize") {
            // uncomment below to test the property
            //modelInstance.roundLotSize shouldBe ("TODO")
        }

        // to test the property `adjustedPocPrice` - Adjusted previous official closing price as decimal
        should("test adjustedPocPrice") {
            // uncomment below to test the property
            //modelInstance.adjustedPocPrice shouldBe ("TODO")
        }

        // to test the property `luldTier` - LULD tier as byte value
        should("test luldTier") {
            // uncomment below to test the property
            //modelInstance.luldTier shouldBe ("TODO")
        }

        // to test the property `luldTierCode` - LULD tier as numeric string
        should("test luldTierCode") {
            // uncomment below to test the property
            //modelInstance.luldTierCode shouldBe ("TODO")
        }

        // to test the property `luldTierText` - Human-readable description of the LULD tier
        should("test luldTierText") {
            // uncomment below to test the property
            //modelInstance.luldTierText shouldBe ("TODO")
        }

        // to test the property `isLuldTierNotApplicable` - Indicates if LULD Tier is 'Not applicable' (0x0).
        should("test isLuldTierNotApplicable") {
            // uncomment below to test the property
            //modelInstance.isLuldTierNotApplicable shouldBe ("TODO")
        }

        // to test the property `isLuldTier1` - Indicates if LULD Tier is 'Tier 1 NMS Stock' (0x1).
        should("test isLuldTier1") {
            // uncomment below to test the property
            //modelInstance.isLuldTier1 shouldBe ("TODO")
        }

        // to test the property `isLuldTier2` - Indicates if LULD Tier is 'Tier 2 NMS Stock' (0x2).
        should("test isLuldTier2") {
            // uncomment below to test the property
            //modelInstance.isLuldTier2 shouldBe ("TODO")
        }

    }
}
