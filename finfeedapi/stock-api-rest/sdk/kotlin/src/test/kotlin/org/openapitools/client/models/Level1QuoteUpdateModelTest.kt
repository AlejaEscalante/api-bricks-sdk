/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.Level1QuoteUpdateModel

class Level1QuoteUpdateModelTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Level1QuoteUpdateModel
        //val modelInstance = Level1QuoteUpdateModel()

        // to test the property `symbol` - The stock symbol
        should("test symbol") {
            // uncomment below to test the property
            //modelInstance.symbol shouldBe ("TODO")
        }

        // to test the property `timestampNanos` - Original timestamp in nanoseconds since epoch
        should("test timestampNanos") {
            // uncomment below to test the property
            //modelInstance.timestampNanos shouldBe ("TODO")
        }

        // to test the property `timestamp` - Time when the quote update was recorded as DateTime
        should("test timestamp") {
            // uncomment below to test the property
            //modelInstance.timestamp shouldBe ("TODO")
        }

        // to test the property `isSymbolAvailable` - Gets whether the symbol is available for trading True if active, False if halted, paused, or otherwise not available
        should("test isSymbolAvailable") {
            // uncomment below to test the property
            //modelInstance.isSymbolAvailable shouldBe ("TODO")
        }

        // to test the property `isPrePostMarketSession` - Gets whether the market session is regular or pre/post-market True if pre/post-market session, False if regular market session
        should("test isPrePostMarketSession") {
            // uncomment below to test the property
            //modelInstance.isPrePostMarketSession shouldBe ("TODO")
        }

        // to test the property `askSize` - Ask size in number of shares
        should("test askSize") {
            // uncomment below to test the property
            //modelInstance.askSize shouldBe ("TODO")
        }

        // to test the property `askPrice` - Ask price as decimal
        should("test askPrice") {
            // uncomment below to test the property
            //modelInstance.askPrice shouldBe ("TODO")
        }

        // to test the property `bidPrice` - Bid price as decimal
        should("test bidPrice") {
            // uncomment below to test the property
            //modelInstance.bidPrice shouldBe ("TODO")
        }

        // to test the property `bidSize` - Bid size in number of shares
        should("test bidSize") {
            // uncomment below to test the property
            //modelInstance.bidSize shouldBe ("TODO")
        }

    }
}
