/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.Level3ExecutedOrderModel

class Level3ExecutedOrderModelTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Level3ExecutedOrderModel
        //val modelInstance = Level3ExecutedOrderModel()

        // to test the property `symbol` - The stock symbol
        should("test symbol") {
            // uncomment below to test the property
            //modelInstance.symbol shouldBe ("TODO")
        }

        // to test the property `timestampNanos` - Original timestamp in nanoseconds since epoch
        should("test timestampNanos") {
            // uncomment below to test the property
            //modelInstance.timestampNanos shouldBe ("TODO")
        }

        // to test the property `timestamp` - Time when the order was executed as DateTime
        should("test timestamp") {
            // uncomment below to test the property
            //modelInstance.timestamp shouldBe ("TODO")
        }

        // to test the property `orderIdReference` - Order identifier reference
        should("test orderIdReference") {
            // uncomment below to test the property
            //modelInstance.orderIdReference shouldBe ("TODO")
        }

        // to test the property `saleConditionFlags` - Sale condition flags for the execution as byte value
        should("test saleConditionFlags") {
            // uncomment below to test the property
            //modelInstance.saleConditionFlags shouldBe ("TODO")
        }

        // to test the property `isIntermarketSweep` - Bit 7 (Mask 0x80): Intermarket Sweep Flag  True: Intermarket Sweep Order (\"ISO\")  False: Non-Intermarket Sweep Order
        should("test isIntermarketSweep") {
            // uncomment below to test the property
            //modelInstance.isIntermarketSweep shouldBe ("TODO")
        }

        // to test the property `isExtendedHoursTrade` - Bit 6 (Mask 0x40): Extended Hours Flag  True: Extended Hours Trade (i.e., Form T sale condition)  False: Regular Market Session Trade
        should("test isExtendedHoursTrade") {
            // uncomment below to test the property
            //modelInstance.isExtendedHoursTrade shouldBe ("TODO")
        }

        // to test the property `isOddLotTrade` - Bit 5 (Mask 0x20): Odd Lot Flag  True: Odd Lot Trade  False: Round or Mixed Lot Trade
        should("test isOddLotTrade") {
            // uncomment below to test the property
            //modelInstance.isOddLotTrade shouldBe ("TODO")
        }

        // to test the property `isTradeThroughExempt` - Bit 4 (Mask 0x10): Trade Through Exempt Flag  True: Trade is not subject to Rule 611 (Trade Through) of SEC Reg. NMS  False: Trade is subject to Rule 611 (Trade Through) of SEC Reg. NMS
        should("test isTradeThroughExempt") {
            // uncomment below to test the property
            //modelInstance.isTradeThroughExempt shouldBe ("TODO")
        }

        // to test the property `isSinglePriceCrossTrade` - Bit 3 (Mask 0x08): Single-price Cross Trade Flag  True: Trade resulting from a single-price cross  False: Execution during continuous trading
        should("test isSinglePriceCrossTrade") {
            // uncomment below to test the property
            //modelInstance.isSinglePriceCrossTrade shouldBe ("TODO")
        }

        // to test the property `propertySize` - Trade volume in number of shares
        should("test propertySize") {
            // uncomment below to test the property
            //modelInstance.propertySize shouldBe ("TODO")
        }

        // to test the property `price` - Execution price as decimal
        should("test price") {
            // uncomment below to test the property
            //modelInstance.price shouldBe ("TODO")
        }

        // to test the property `tradeId` - IEX trade identifier
        should("test tradeId") {
            // uncomment below to test the property
            //modelInstance.tradeId shouldBe ("TODO")
        }

    }
}
