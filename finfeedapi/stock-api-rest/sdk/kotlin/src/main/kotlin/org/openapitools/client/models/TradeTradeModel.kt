/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Represents the response DTO for a single trade event (report or break).
 *
 * @param isTradeBreak Indicates if this record represents a trade break (true) or a trade report (false).
 * @param symbol The stock symbol.
 * @param timestampNanos Original timestamp in nanoseconds since epoch.
 * @param timestamp Time when the event was recorded as DateTime (UTC).
 * @param propertySize Trade volume (or break volume) in number of shares.
 * @param price Trade price (or break price) as decimal.
 * @param tradeId IEX trade identifier (same for report and its corresponding break).
 * @param isIntermarketSweep Bit 7 (Mask 0x80): Intermarket Sweep Flag. True: Intermarket Sweep Order (\"ISO\"). False: Non-Intermarket Sweep Order.
 * @param isExtendedHoursTrade Bit 6 (Mask 0x40): Extended Hours Flag. True: Extended Hours Trade (i.e., Form T sale condition). False: Regular Market Session Trade.
 * @param isOddLotTrade Bit 5 (Mask 0x20): Odd Lot Flag. True: Odd Lot Trade. False: Round or Mixed Lot Trade.
 * @param isTradeThroughExempt Bit 4 (Mask 0x10): Trade Through Exempt Flag. True: Trade is not subject to Rule 611 (Trade Through) of SEC Reg. NMS. False: Trade is subject to Rule 611 (Trade Through) of SEC Reg. NMS. Applied when the taking order was an ISO that traded through a protected quotation, OR the NBBO was crossed at the time of the trade, OR the trade occurred through a self-helped venue's quotation, OR the trade was a single-price cross.
 * @param isSinglePriceCrossTrade Bit 3 (Mask 0x08): Single-price Cross Trade Flag. True: Trade resulting from a single-price cross. False: Execution during continuous trading.
 */


data class TradeTradeModel (

    /* Indicates if this record represents a trade break (true) or a trade report (false). */
    @Json(name = "is_trade_break")
    val isTradeBreak: kotlin.Boolean? = null,

    /* The stock symbol. */
    @Json(name = "symbol")
    val symbol: kotlin.String? = null,

    /* Original timestamp in nanoseconds since epoch. */
    @Json(name = "timestamp_nanos")
    val timestampNanos: kotlin.Long? = null,

    /* Time when the event was recorded as DateTime (UTC). */
    @Json(name = "timestamp")
    val timestamp: java.time.OffsetDateTime? = null,

    /* Trade volume (or break volume) in number of shares. */
    @Json(name = "size")
    val propertySize: kotlin.Int? = null,

    /* Trade price (or break price) as decimal. */
    @Json(name = "price")
    val price: kotlin.Double? = null,

    /* IEX trade identifier (same for report and its corresponding break). */
    @Json(name = "trade_id")
    val tradeId: kotlin.Long? = null,

    /* Bit 7 (Mask 0x80): Intermarket Sweep Flag. True: Intermarket Sweep Order (\"ISO\"). False: Non-Intermarket Sweep Order. */
    @Json(name = "is_intermarket_sweep")
    val isIntermarketSweep: kotlin.Boolean? = null,

    /* Bit 6 (Mask 0x40): Extended Hours Flag. True: Extended Hours Trade (i.e., Form T sale condition). False: Regular Market Session Trade. */
    @Json(name = "is_extended_hours_trade")
    val isExtendedHoursTrade: kotlin.Boolean? = null,

    /* Bit 5 (Mask 0x20): Odd Lot Flag. True: Odd Lot Trade. False: Round or Mixed Lot Trade. */
    @Json(name = "is_odd_lot_trade")
    val isOddLotTrade: kotlin.Boolean? = null,

    /* Bit 4 (Mask 0x10): Trade Through Exempt Flag. True: Trade is not subject to Rule 611 (Trade Through) of SEC Reg. NMS. False: Trade is subject to Rule 611 (Trade Through) of SEC Reg. NMS. Applied when the taking order was an ISO that traded through a protected quotation, OR the NBBO was crossed at the time of the trade, OR the trade occurred through a self-helped venue's quotation, OR the trade was a single-price cross. */
    @Json(name = "is_trade_through_exempt")
    val isTradeThroughExempt: kotlin.Boolean? = null,

    /* Bit 3 (Mask 0x08): Single-price Cross Trade Flag. True: Trade resulting from a single-price cross. False: Execution during continuous trading. */
    @Json(name = "is_single_price_cross_trade")
    val isSinglePriceCrossTrade: kotlin.Boolean? = null

) {


}

