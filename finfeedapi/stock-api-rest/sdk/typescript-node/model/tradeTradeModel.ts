/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* Represents the response DTO for a single trade event (report or break).
*/
export class TradeTradeModel {
    /**
    * Indicates if this record represents a trade break (true) or a trade report (false).
    */
    'isTradeBreak'?: boolean;
    /**
    * The stock symbol.
    */
    'symbol'?: string | null;
    /**
    * Original timestamp in nanoseconds since epoch.
    */
    'timestampNanos'?: number;
    /**
    * Time when the event was recorded as DateTime (UTC).
    */
    'timestamp'?: Date;
    /**
    * Trade volume (or break volume) in number of shares.
    */
    'size'?: number;
    /**
    * Trade price (or break price) as decimal.
    */
    'price'?: number;
    /**
    * IEX trade identifier (same for report and its corresponding break).
    */
    'tradeId'?: number;
    /**
    * Bit 7 (Mask 0x80): Intermarket Sweep Flag.  True: Intermarket Sweep Order (\"ISO\").  False: Non-Intermarket Sweep Order.
    */
    'isIntermarketSweep'?: boolean;
    /**
    * Bit 6 (Mask 0x40): Extended Hours Flag.  True: Extended Hours Trade (i.e., Form T sale condition).  False: Regular Market Session Trade.
    */
    'isExtendedHoursTrade'?: boolean;
    /**
    * Bit 5 (Mask 0x20): Odd Lot Flag.  True: Odd Lot Trade.  False: Round or Mixed Lot Trade.
    */
    'isOddLotTrade'?: boolean;
    /**
    * Bit 4 (Mask 0x10): Trade Through Exempt Flag.  True: Trade is not subject to Rule 611 (Trade Through) of SEC Reg. NMS.  False: Trade is subject to Rule 611 (Trade Through) of SEC Reg. NMS.  Applied when the taking order was an ISO that traded through a protected quotation,  OR the NBBO was crossed at the time of the trade,  OR the trade occurred through a self-helped venue\'s quotation,  OR the trade was a single-price cross.
    */
    'isTradeThroughExempt'?: boolean;
    /**
    * Bit 3 (Mask 0x08): Single-price Cross Trade Flag.  True: Trade resulting from a single-price cross.  False: Execution during continuous trading.
    */
    'isSinglePriceCrossTrade'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "isTradeBreak",
            "baseName": "is_trade_break",
            "type": "boolean"
        },
        {
            "name": "symbol",
            "baseName": "symbol",
            "type": "string"
        },
        {
            "name": "timestampNanos",
            "baseName": "timestamp_nanos",
            "type": "number"
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date"
        },
        {
            "name": "size",
            "baseName": "size",
            "type": "number"
        },
        {
            "name": "price",
            "baseName": "price",
            "type": "number"
        },
        {
            "name": "tradeId",
            "baseName": "trade_id",
            "type": "number"
        },
        {
            "name": "isIntermarketSweep",
            "baseName": "is_intermarket_sweep",
            "type": "boolean"
        },
        {
            "name": "isExtendedHoursTrade",
            "baseName": "is_extended_hours_trade",
            "type": "boolean"
        },
        {
            "name": "isOddLotTrade",
            "baseName": "is_odd_lot_trade",
            "type": "boolean"
        },
        {
            "name": "isTradeThroughExempt",
            "baseName": "is_trade_through_exempt",
            "type": "boolean"
        },
        {
            "name": "isSinglePriceCrossTrade",
            "baseName": "is_single_price_cross_trade",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return TradeTradeModel.attributeTypeMap;
    }
}

