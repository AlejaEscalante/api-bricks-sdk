/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.ExchangeTimeseriesItem
import org.openapitools.client.model.TimeseriesItem
import org.openapitools.client.model.TimeseriesPeriod
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object OhlcvApi {

  def apply(baseUrl: String = "https://api-historical.stock.finfeedapi.com") = new OhlcvApi(baseUrl)
}

class OhlcvApi(baseUrl: String) {

  /**
   * Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific exchange.
   * 
   * Expected answers:
   *   code 200 : Seq[ExchangeTimeseriesItem] (successful operation)
   * 
   * @param exchangeId Exchange identifier of requested timeseries (from the Metadata -> Exchanges)
   * @param periodId Identifier of requested timeseries period (e.g. `5SEC` or `1DAY`)
   * @param timeStart Timeseries starting time in ISO 8601
   * @param timeEnd Timeseries ending time in ISO 8601
   */
  def v1OhlcvExchangeExchangeIdHistoryGet(exchangeId: String, periodId: String, timeStart: String, timeEnd: String): ApiRequest[Seq[ExchangeTimeseriesItem]] =
    ApiRequest[Seq[ExchangeTimeseriesItem]](ApiMethods.GET, baseUrl, "/v1/ohlcv/exchange/{exchange_id}/history", "application/json")
      .withQueryParam("period_id", periodId)
      .withQueryParam("time_start", timeStart)
      .withQueryParam("time_end", timeEnd)
      .withPathParam("exchange_id", exchangeId)
      .withSuccessResponse[Seq[ExchangeTimeseriesItem]](200)
      

  /**
   * Get OHLCV timeseries data returned in time ascending order.
   * 
   * Expected answers:
   *   code 200 : Seq[TimeseriesItem] (successful operation)
   * 
   * @param exchangeId Exchange identifier of requested timeseries (from the Metadata -> Exchanges)
   * @param symbolId Symbol identifier of requested timeseries (from the Metadata -> Symbols)
   * @param periodId Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`)
   * @param timeStart Timeseries starting time in ISO 8601
   * @param timeEnd Timeseries ending time in ISO 8601
   * @param limit Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   */
  def v1OhlcvExchangeSymbolExchangeIdSymbolIdHistoryGet(exchangeId: String, symbolId: String, periodId: String, timeStart: Option[String] = None, timeEnd: Option[String] = None, limit: Option[Int] = None): ApiRequest[Seq[TimeseriesItem]] =
    ApiRequest[Seq[TimeseriesItem]](ApiMethods.GET, baseUrl, "/v1/ohlcv/exchange-symbol/{exchange_id}/{symbol_id}/history", "application/json")
      .withQueryParam("period_id", periodId)
      .withQueryParam("time_start", timeStart)
      .withQueryParam("time_end", timeEnd)
      .withQueryParam("limit", limit)
      .withPathParam("exchange_id", exchangeId)
      .withPathParam("symbol_id", symbolId)
      .withSuccessResponse[Seq[TimeseriesItem]](200)
      

  /**
   * Get OHLCV latest timeseries data returned in time descending order. Data can be requested by the period and for the specific symbol eg `BITSTAMP_SPOT_BTC_USD`, if you need to query timeseries by asset pairs eg. `BTC/USD`, then please reffer to the Exchange Rates Timeseries data                :::info  OHLCV Latest endpoint is just the shortcut to the OHLCV Historical endpoint with substituted `time_start` and `time_end` parameters.   The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.  :::
   * 
   * Expected answers:
   *   code 200 : Seq[TimeseriesItem] (successful operation)
   * 
   * @param exchangeId Exchange identifier of requested timeseries (from the Metadata -> Exchanges)
   * @param symbolId Symbol identifier of requested timeseries (from the Metadata -> Symbols)
   * @param periodId Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`)
   * @param limit Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   */
  def v1OhlcvExchangeSymbolExchangeIdSymbolIdLatestGet(exchangeId: String, symbolId: String, periodId: String, limit: Option[Int] = None): ApiRequest[Seq[TimeseriesItem]] =
    ApiRequest[Seq[TimeseriesItem]](ApiMethods.GET, baseUrl, "/v1/ohlcv/exchange-symbol/{exchange_id}/{symbol_id}/latest", "application/json")
      .withQueryParam("period_id", periodId)
      .withQueryParam("limit", limit)
      .withPathParam("exchange_id", exchangeId)
      .withPathParam("symbol_id", symbolId)
      .withSuccessResponse[Seq[TimeseriesItem]](200)
      

  /**
   * Get full list of supported time periods available for requesting OHLCV timeseries data.                ### Available periods                Time unit | Period identifiers  --------- | -----------  Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC  Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN  Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS  Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY  Month | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH  Year | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS                :::tip  You can assume that we will not remove any periods from this response, however, we may add new ones.  :::
   * 
   * Expected answers:
   *   code 200 : Seq[TimeseriesPeriod] (successful operation)
   */
  def v1OhlcvPeriodsGet(): ApiRequest[Seq[TimeseriesPeriod]] =
    ApiRequest[Seq[TimeseriesPeriod]](ApiMethods.GET, baseUrl, "/v1/ohlcv/periods", "application/json")
      .withSuccessResponse[Seq[TimeseriesPeriod]](200)
      



}

