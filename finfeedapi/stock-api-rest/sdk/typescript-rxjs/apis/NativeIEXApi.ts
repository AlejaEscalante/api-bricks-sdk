// tslint:disable
/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AdminAdminMessageModel,
    AdminSystemEventModel,
    Level1QuoteUpdateModel,
    Level2PriceLevelUpdateModel,
    Level3OrderBookModel,
    TradeTradeModel,
} from '../models';

export interface V1NativeIexAdminMessagesSymbolGetRequest {
    symbol: string;
    date: string;
}

export interface V1NativeIexAdminSystemEventGetRequest {
    date: string;
}

export interface V1NativeIexLevel1QuoteSymbolGetRequest {
    symbol: string;
    date: string;
}

export interface V1NativeIexLevel2PriceLevelUpdateSymbolGetRequest {
    symbol: string;
    date: string;
}

export interface V1NativeIexLevel3OrderBookSymbolGetRequest {
    symbol: string;
    date: string;
}

export interface V1NativeIexTradeSymbolGetRequest {
    symbol: string;
    date: string;
}

/**
 * no description
 */
export class NativeIEXApi extends BaseAPI {

    /**
     * Get Admin Messages
     */
    v1NativeIexAdminMessagesSymbolGet({ symbol, date }: V1NativeIexAdminMessagesSymbolGetRequest): Observable<Array<AdminAdminMessageModel>>
    v1NativeIexAdminMessagesSymbolGet({ symbol, date }: V1NativeIexAdminMessagesSymbolGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<AdminAdminMessageModel>>>
    v1NativeIexAdminMessagesSymbolGet({ symbol, date }: V1NativeIexAdminMessagesSymbolGetRequest, opts?: OperationOpts): Observable<Array<AdminAdminMessageModel> | AjaxResponse<Array<AdminAdminMessageModel>>> {
        throwIfNullOrUndefined(symbol, 'symbol', 'v1NativeIexAdminMessagesSymbolGet');
        throwIfNullOrUndefined(date, 'date', 'v1NativeIexAdminMessagesSymbolGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'date': (date as any).toISOString(),
        };

        return this.request<Array<AdminAdminMessageModel>>({
            url: '/v1/native/iex/admin/messages/{symbol}'.replace('{symbol}', encodeURI(symbol)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get System Events
     */
    v1NativeIexAdminSystemEventGet({ date }: V1NativeIexAdminSystemEventGetRequest): Observable<Array<AdminSystemEventModel>>
    v1NativeIexAdminSystemEventGet({ date }: V1NativeIexAdminSystemEventGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<AdminSystemEventModel>>>
    v1NativeIexAdminSystemEventGet({ date }: V1NativeIexAdminSystemEventGetRequest, opts?: OperationOpts): Observable<Array<AdminSystemEventModel> | AjaxResponse<Array<AdminSystemEventModel>>> {
        throwIfNullOrUndefined(date, 'date', 'v1NativeIexAdminSystemEventGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'date': (date as any).toISOString(),
        };

        return this.request<Array<AdminSystemEventModel>>({
            url: '/v1/native/iex/admin/system-event',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get Level-1 Quotes
     */
    v1NativeIexLevel1QuoteSymbolGet({ symbol, date }: V1NativeIexLevel1QuoteSymbolGetRequest): Observable<Array<Level1QuoteUpdateModel>>
    v1NativeIexLevel1QuoteSymbolGet({ symbol, date }: V1NativeIexLevel1QuoteSymbolGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<Level1QuoteUpdateModel>>>
    v1NativeIexLevel1QuoteSymbolGet({ symbol, date }: V1NativeIexLevel1QuoteSymbolGetRequest, opts?: OperationOpts): Observable<Array<Level1QuoteUpdateModel> | AjaxResponse<Array<Level1QuoteUpdateModel>>> {
        throwIfNullOrUndefined(symbol, 'symbol', 'v1NativeIexLevel1QuoteSymbolGet');
        throwIfNullOrUndefined(date, 'date', 'v1NativeIexLevel1QuoteSymbolGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'date': (date as any).toISOString(),
        };

        return this.request<Array<Level1QuoteUpdateModel>>({
            url: '/v1/native/iex/level1-quote/{symbol}'.replace('{symbol}', encodeURI(symbol)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get Level-2 Price Level Book
     */
    v1NativeIexLevel2PriceLevelUpdateSymbolGet({ symbol, date }: V1NativeIexLevel2PriceLevelUpdateSymbolGetRequest): Observable<Array<Level2PriceLevelUpdateModel>>
    v1NativeIexLevel2PriceLevelUpdateSymbolGet({ symbol, date }: V1NativeIexLevel2PriceLevelUpdateSymbolGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<Level2PriceLevelUpdateModel>>>
    v1NativeIexLevel2PriceLevelUpdateSymbolGet({ symbol, date }: V1NativeIexLevel2PriceLevelUpdateSymbolGetRequest, opts?: OperationOpts): Observable<Array<Level2PriceLevelUpdateModel> | AjaxResponse<Array<Level2PriceLevelUpdateModel>>> {
        throwIfNullOrUndefined(symbol, 'symbol', 'v1NativeIexLevel2PriceLevelUpdateSymbolGet');
        throwIfNullOrUndefined(date, 'date', 'v1NativeIexLevel2PriceLevelUpdateSymbolGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'date': (date as any).toISOString(),
        };

        return this.request<Array<Level2PriceLevelUpdateModel>>({
            url: '/v1/native/iex/level2-price-level-update/{symbol}'.replace('{symbol}', encodeURI(symbol)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get Level-3 Order Book
     */
    v1NativeIexLevel3OrderBookSymbolGet({ symbol, date }: V1NativeIexLevel3OrderBookSymbolGetRequest): Observable<Array<Level3OrderBookModel>>
    v1NativeIexLevel3OrderBookSymbolGet({ symbol, date }: V1NativeIexLevel3OrderBookSymbolGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<Level3OrderBookModel>>>
    v1NativeIexLevel3OrderBookSymbolGet({ symbol, date }: V1NativeIexLevel3OrderBookSymbolGetRequest, opts?: OperationOpts): Observable<Array<Level3OrderBookModel> | AjaxResponse<Array<Level3OrderBookModel>>> {
        throwIfNullOrUndefined(symbol, 'symbol', 'v1NativeIexLevel3OrderBookSymbolGet');
        throwIfNullOrUndefined(date, 'date', 'v1NativeIexLevel3OrderBookSymbolGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'date': (date as any).toISOString(),
        };

        return this.request<Array<Level3OrderBookModel>>({
            url: '/v1/native/iex/level3-order-book/{symbol}'.replace('{symbol}', encodeURI(symbol)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get Trades
     */
    v1NativeIexTradeSymbolGet({ symbol, date }: V1NativeIexTradeSymbolGetRequest): Observable<Array<TradeTradeModel>>
    v1NativeIexTradeSymbolGet({ symbol, date }: V1NativeIexTradeSymbolGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<TradeTradeModel>>>
    v1NativeIexTradeSymbolGet({ symbol, date }: V1NativeIexTradeSymbolGetRequest, opts?: OperationOpts): Observable<Array<TradeTradeModel> | AjaxResponse<Array<TradeTradeModel>>> {
        throwIfNullOrUndefined(symbol, 'symbol', 'v1NativeIexTradeSymbolGet');
        throwIfNullOrUndefined(date, 'date', 'v1NativeIexTradeSymbolGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'date': (date as any).toISOString(),
        };

        return this.request<Array<TradeTradeModel>>({
            url: '/v1/native/iex/trade/{symbol}'.replace('{symbol}', encodeURI(symbol)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
