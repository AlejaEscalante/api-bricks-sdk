# coding: utf-8

"""
    FinFeedAPI Stock REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from api_bricks_stock_api_rest.models.admin_auction_information_model import AdminAuctionInformationModel
from api_bricks_stock_api_rest.models.admin_official_price_model import AdminOfficialPriceModel
from api_bricks_stock_api_rest.models.admin_operational_halt_status_model import AdminOperationalHaltStatusModel
from api_bricks_stock_api_rest.models.admin_retail_liquidity_indicator_model import AdminRetailLiquidityIndicatorModel
from api_bricks_stock_api_rest.models.admin_security_directory_model import AdminSecurityDirectoryModel
from api_bricks_stock_api_rest.models.admin_security_event_model import AdminSecurityEventModel
from api_bricks_stock_api_rest.models.admin_short_sale_price_test_status_model import AdminShortSalePriceTestStatusModel
from api_bricks_stock_api_rest.models.admin_system_event_model import AdminSystemEventModel
from api_bricks_stock_api_rest.models.admin_trading_status_model import AdminTradingStatusModel
from typing import Optional, Set
from typing_extensions import Self

class AdminAdminMessageModel(BaseModel):
    """
    Represents the response DTO for IEX admin information, combining all symbol-based admin message types
    """ # noqa: E501
    trading_status: Optional[AdminTradingStatusModel] = None
    official_price: Optional[AdminOfficialPriceModel] = None
    security_event: Optional[AdminSecurityEventModel] = None
    auction_information: Optional[AdminAuctionInformationModel] = None
    short_sale_price_test: Optional[AdminShortSalePriceTestStatusModel] = None
    operational_halt_status: Optional[AdminOperationalHaltStatusModel] = None
    retail_liquidity_indicator: Optional[AdminRetailLiquidityIndicatorModel] = None
    system_event: Optional[AdminSystemEventModel] = None
    security_directory: Optional[AdminSecurityDirectoryModel] = None
    __properties: ClassVar[List[str]] = ["trading_status", "official_price", "security_event", "auction_information", "short_sale_price_test", "operational_halt_status", "retail_liquidity_indicator", "system_event", "security_directory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdminAdminMessageModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of trading_status
        if self.trading_status:
            _dict['trading_status'] = self.trading_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of official_price
        if self.official_price:
            _dict['official_price'] = self.official_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_event
        if self.security_event:
            _dict['security_event'] = self.security_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auction_information
        if self.auction_information:
            _dict['auction_information'] = self.auction_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of short_sale_price_test
        if self.short_sale_price_test:
            _dict['short_sale_price_test'] = self.short_sale_price_test.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operational_halt_status
        if self.operational_halt_status:
            _dict['operational_halt_status'] = self.operational_halt_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retail_liquidity_indicator
        if self.retail_liquidity_indicator:
            _dict['retail_liquidity_indicator'] = self.retail_liquidity_indicator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of system_event
        if self.system_event:
            _dict['system_event'] = self.system_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_directory
        if self.security_directory:
            _dict['security_directory'] = self.security_directory.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdminAdminMessageModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "trading_status": AdminTradingStatusModel.from_dict(obj["trading_status"]) if obj.get("trading_status") is not None else None,
            "official_price": AdminOfficialPriceModel.from_dict(obj["official_price"]) if obj.get("official_price") is not None else None,
            "security_event": AdminSecurityEventModel.from_dict(obj["security_event"]) if obj.get("security_event") is not None else None,
            "auction_information": AdminAuctionInformationModel.from_dict(obj["auction_information"]) if obj.get("auction_information") is not None else None,
            "short_sale_price_test": AdminShortSalePriceTestStatusModel.from_dict(obj["short_sale_price_test"]) if obj.get("short_sale_price_test") is not None else None,
            "operational_halt_status": AdminOperationalHaltStatusModel.from_dict(obj["operational_halt_status"]) if obj.get("operational_halt_status") is not None else None,
            "retail_liquidity_indicator": AdminRetailLiquidityIndicatorModel.from_dict(obj["retail_liquidity_indicator"]) if obj.get("retail_liquidity_indicator") is not None else None,
            "system_event": AdminSystemEventModel.from_dict(obj["system_event"]) if obj.get("system_event") is not None else None,
            "security_directory": AdminSecurityDirectoryModel.from_dict(obj["security_directory"]) if obj.get("security_directory") is not None else None
        })
        return _obj


