# coding: utf-8

"""
    FinFeedAPI Stock REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdminShortSalePriceTestStatusModel(BaseModel):
    """
    Represents the response DTO for short sale price test status information
    """ # noqa: E501
    symbol: Optional[StrictStr] = Field(default=None, description="The stock symbol")
    timestamp_nanos: Optional[StrictInt] = Field(default=None, description="Original timestamp in nanoseconds since epoch")
    timestamp: Optional[datetime] = Field(default=None, description="Time when the short sale price test status was recorded as DateTime")
    short_sale_price_test_status: Optional[StrictInt] = Field(default=None, description="Short sale price test status as byte value")
    short_sale_price_test_status_code: Optional[StrictStr] = Field(default=None, description="Short sale price test status as hex string")
    short_sale_price_test_status_text: Optional[StrictStr] = Field(default=None, description="Human-readable description of the short sale price test status")
    is_short_sale_price_test_not_in_effect: Optional[StrictBool] = Field(default=None, description="Indicates if the short sale price test is not in effect")
    is_short_sale_price_test_in_effect: Optional[StrictBool] = Field(default=None, description="Indicates if the short sale price test is in effect")
    detail: Optional[StrictInt] = Field(default=None, description="Detail of the short sale price test as byte value")
    detail_code: Optional[StrictStr] = Field(default=None, description="Detail of the short sale price test as character string")
    detail_text: Optional[StrictStr] = Field(default=None, description="Human-readable description of the short sale price test detail")
    is_detail_no_price_test: Optional[StrictBool] = Field(default=None, description="Indicates if there is no price test in place")
    is_detail_activated: Optional[StrictBool] = Field(default=None, description="Indicates if the short sale price test restriction is in effect due to an intraday price drop")
    is_detail_continued: Optional[StrictBool] = Field(default=None, description="Indicates if the short sale price test restriction remains in effect from prior day")
    is_detail_deactivated: Optional[StrictBool] = Field(default=None, description="Indicates if the short sale price test restriction is deactivated")
    is_detail_not_available: Optional[StrictBool] = Field(default=None, description="Indicates if the detail is not available")
    __properties: ClassVar[List[str]] = ["symbol", "timestamp_nanos", "timestamp", "short_sale_price_test_status", "short_sale_price_test_status_code", "short_sale_price_test_status_text", "is_short_sale_price_test_not_in_effect", "is_short_sale_price_test_in_effect", "detail", "detail_code", "detail_text", "is_detail_no_price_test", "is_detail_activated", "is_detail_continued", "is_detail_deactivated", "is_detail_not_available"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdminShortSalePriceTestStatusModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if symbol (nullable) is None
        # and model_fields_set contains the field
        if self.symbol is None and "symbol" in self.model_fields_set:
            _dict['symbol'] = None

        # set to None if short_sale_price_test_status_code (nullable) is None
        # and model_fields_set contains the field
        if self.short_sale_price_test_status_code is None and "short_sale_price_test_status_code" in self.model_fields_set:
            _dict['short_sale_price_test_status_code'] = None

        # set to None if short_sale_price_test_status_text (nullable) is None
        # and model_fields_set contains the field
        if self.short_sale_price_test_status_text is None and "short_sale_price_test_status_text" in self.model_fields_set:
            _dict['short_sale_price_test_status_text'] = None

        # set to None if detail_code (nullable) is None
        # and model_fields_set contains the field
        if self.detail_code is None and "detail_code" in self.model_fields_set:
            _dict['detail_code'] = None

        # set to None if detail_text (nullable) is None
        # and model_fields_set contains the field
        if self.detail_text is None and "detail_text" in self.model_fields_set:
            _dict['detail_text'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdminShortSalePriceTestStatusModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "timestamp_nanos": obj.get("timestamp_nanos"),
            "timestamp": obj.get("timestamp"),
            "short_sale_price_test_status": obj.get("short_sale_price_test_status"),
            "short_sale_price_test_status_code": obj.get("short_sale_price_test_status_code"),
            "short_sale_price_test_status_text": obj.get("short_sale_price_test_status_text"),
            "is_short_sale_price_test_not_in_effect": obj.get("is_short_sale_price_test_not_in_effect"),
            "is_short_sale_price_test_in_effect": obj.get("is_short_sale_price_test_in_effect"),
            "detail": obj.get("detail"),
            "detail_code": obj.get("detail_code"),
            "detail_text": obj.get("detail_text"),
            "is_detail_no_price_test": obj.get("is_detail_no_price_test"),
            "is_detail_activated": obj.get("is_detail_activated"),
            "is_detail_continued": obj.get("is_detail_continued"),
            "is_detail_deactivated": obj.get("is_detail_deactivated"),
            "is_detail_not_available": obj.get("is_detail_not_available")
        })
        return _obj


