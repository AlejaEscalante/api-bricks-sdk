# coding: utf-8

"""
    REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FinFeedAPISymbolModel(BaseModel):
    """
    FinFeedAPISymbolModel
    """ # noqa: E501
    symbol_id: Optional[StrictStr] = None
    exchange_id: Optional[StrictStr] = None
    security_category: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    var_date: Optional[StrictStr] = Field(default=None, alias="date")
    asset_class: Optional[StrictStr] = None
    cfi_code: Optional[StrictStr] = None
    cfi_category: Optional[StrictStr] = None
    cfi_group: Optional[StrictStr] = None
    cfi_attribute1: Optional[StrictStr] = None
    cfi_attribute2: Optional[StrictStr] = None
    cfi_attribute3: Optional[StrictStr] = None
    cfi_attribute4: Optional[StrictStr] = None
    cfi_category_desc: Optional[StrictStr] = None
    cfi_group_desc: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["symbol_id", "exchange_id", "security_category", "name", "date", "asset_class", "cfi_code", "cfi_category", "cfi_group", "cfi_attribute1", "cfi_attribute2", "cfi_attribute3", "cfi_attribute4", "cfi_category_desc", "cfi_group_desc"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FinFeedAPISymbolModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "security_category",
            "cfi_category",
            "cfi_group",
            "cfi_attribute1",
            "cfi_attribute2",
            "cfi_attribute3",
            "cfi_attribute4",
            "cfi_category_desc",
            "cfi_group_desc",
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if symbol_id (nullable) is None
        # and model_fields_set contains the field
        if self.symbol_id is None and "symbol_id" in self.model_fields_set:
            _dict['symbol_id'] = None

        # set to None if exchange_id (nullable) is None
        # and model_fields_set contains the field
        if self.exchange_id is None and "exchange_id" in self.model_fields_set:
            _dict['exchange_id'] = None

        # set to None if security_category (nullable) is None
        # and model_fields_set contains the field
        if self.security_category is None and "security_category" in self.model_fields_set:
            _dict['security_category'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if var_date (nullable) is None
        # and model_fields_set contains the field
        if self.var_date is None and "var_date" in self.model_fields_set:
            _dict['date'] = None

        # set to None if asset_class (nullable) is None
        # and model_fields_set contains the field
        if self.asset_class is None and "asset_class" in self.model_fields_set:
            _dict['asset_class'] = None

        # set to None if cfi_code (nullable) is None
        # and model_fields_set contains the field
        if self.cfi_code is None and "cfi_code" in self.model_fields_set:
            _dict['cfi_code'] = None

        # set to None if cfi_category (nullable) is None
        # and model_fields_set contains the field
        if self.cfi_category is None and "cfi_category" in self.model_fields_set:
            _dict['cfi_category'] = None

        # set to None if cfi_group (nullable) is None
        # and model_fields_set contains the field
        if self.cfi_group is None and "cfi_group" in self.model_fields_set:
            _dict['cfi_group'] = None

        # set to None if cfi_attribute1 (nullable) is None
        # and model_fields_set contains the field
        if self.cfi_attribute1 is None and "cfi_attribute1" in self.model_fields_set:
            _dict['cfi_attribute1'] = None

        # set to None if cfi_attribute2 (nullable) is None
        # and model_fields_set contains the field
        if self.cfi_attribute2 is None and "cfi_attribute2" in self.model_fields_set:
            _dict['cfi_attribute2'] = None

        # set to None if cfi_attribute3 (nullable) is None
        # and model_fields_set contains the field
        if self.cfi_attribute3 is None and "cfi_attribute3" in self.model_fields_set:
            _dict['cfi_attribute3'] = None

        # set to None if cfi_attribute4 (nullable) is None
        # and model_fields_set contains the field
        if self.cfi_attribute4 is None and "cfi_attribute4" in self.model_fields_set:
            _dict['cfi_attribute4'] = None

        # set to None if cfi_category_desc (nullable) is None
        # and model_fields_set contains the field
        if self.cfi_category_desc is None and "cfi_category_desc" in self.model_fields_set:
            _dict['cfi_category_desc'] = None

        # set to None if cfi_group_desc (nullable) is None
        # and model_fields_set contains the field
        if self.cfi_group_desc is None and "cfi_group_desc" in self.model_fields_set:
            _dict['cfi_group_desc'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FinFeedAPISymbolModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol_id": obj.get("symbol_id"),
            "exchange_id": obj.get("exchange_id"),
            "security_category": obj.get("security_category"),
            "name": obj.get("name"),
            "date": obj.get("date"),
            "asset_class": obj.get("asset_class"),
            "cfi_code": obj.get("cfi_code"),
            "cfi_category": obj.get("cfi_category"),
            "cfi_group": obj.get("cfi_group"),
            "cfi_attribute1": obj.get("cfi_attribute1"),
            "cfi_attribute2": obj.get("cfi_attribute2"),
            "cfi_attribute3": obj.get("cfi_attribute3"),
            "cfi_attribute4": obj.get("cfi_attribute4"),
            "cfi_category_desc": obj.get("cfi_category_desc"),
            "cfi_group_desc": obj.get("cfi_group_desc")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


