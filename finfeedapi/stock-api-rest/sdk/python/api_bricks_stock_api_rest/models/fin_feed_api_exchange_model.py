# coding: utf-8

"""
    FinFeedAPI Stock REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FinFeedAPIExchangeModel(BaseModel):
    """
    FinFeedAPIExchangeModel
    """ # noqa: E501
    exchange_id: Optional[StrictStr] = None
    last_datapoint_date: Optional[StrictStr] = None
    mic: Optional[StrictStr] = None
    operating_mic: Optional[StrictStr] = None
    oprt_sgmt: Optional[StrictStr] = None
    market_name_institution_description: Optional[StrictStr] = None
    legal_entity_name: Optional[StrictStr] = None
    lei: Optional[StrictStr] = None
    market_category_code: Optional[StrictStr] = None
    acronym: Optional[StrictStr] = None
    iso_country_code: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    website: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    creation_date: Optional[datetime] = None
    last_update_date: Optional[datetime] = None
    last_validation_date: Optional[datetime] = None
    expiry_date: Optional[datetime] = None
    comments: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["exchange_id", "last_datapoint_date", "mic", "operating_mic", "oprt_sgmt", "market_name_institution_description", "legal_entity_name", "lei", "market_category_code", "acronym", "iso_country_code", "city", "website", "status", "creation_date", "last_update_date", "last_validation_date", "expiry_date", "comments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FinFeedAPIExchangeModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if exchange_id (nullable) is None
        # and model_fields_set contains the field
        if self.exchange_id is None and "exchange_id" in self.model_fields_set:
            _dict['exchange_id'] = None

        # set to None if last_datapoint_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_datapoint_date is None and "last_datapoint_date" in self.model_fields_set:
            _dict['last_datapoint_date'] = None

        # set to None if mic (nullable) is None
        # and model_fields_set contains the field
        if self.mic is None and "mic" in self.model_fields_set:
            _dict['mic'] = None

        # set to None if operating_mic (nullable) is None
        # and model_fields_set contains the field
        if self.operating_mic is None and "operating_mic" in self.model_fields_set:
            _dict['operating_mic'] = None

        # set to None if oprt_sgmt (nullable) is None
        # and model_fields_set contains the field
        if self.oprt_sgmt is None and "oprt_sgmt" in self.model_fields_set:
            _dict['oprt_sgmt'] = None

        # set to None if market_name_institution_description (nullable) is None
        # and model_fields_set contains the field
        if self.market_name_institution_description is None and "market_name_institution_description" in self.model_fields_set:
            _dict['market_name_institution_description'] = None

        # set to None if legal_entity_name (nullable) is None
        # and model_fields_set contains the field
        if self.legal_entity_name is None and "legal_entity_name" in self.model_fields_set:
            _dict['legal_entity_name'] = None

        # set to None if lei (nullable) is None
        # and model_fields_set contains the field
        if self.lei is None and "lei" in self.model_fields_set:
            _dict['lei'] = None

        # set to None if market_category_code (nullable) is None
        # and model_fields_set contains the field
        if self.market_category_code is None and "market_category_code" in self.model_fields_set:
            _dict['market_category_code'] = None

        # set to None if acronym (nullable) is None
        # and model_fields_set contains the field
        if self.acronym is None and "acronym" in self.model_fields_set:
            _dict['acronym'] = None

        # set to None if iso_country_code (nullable) is None
        # and model_fields_set contains the field
        if self.iso_country_code is None and "iso_country_code" in self.model_fields_set:
            _dict['iso_country_code'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if website (nullable) is None
        # and model_fields_set contains the field
        if self.website is None and "website" in self.model_fields_set:
            _dict['website'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if creation_date (nullable) is None
        # and model_fields_set contains the field
        if self.creation_date is None and "creation_date" in self.model_fields_set:
            _dict['creation_date'] = None

        # set to None if last_update_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_update_date is None and "last_update_date" in self.model_fields_set:
            _dict['last_update_date'] = None

        # set to None if last_validation_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_validation_date is None and "last_validation_date" in self.model_fields_set:
            _dict['last_validation_date'] = None

        # set to None if expiry_date (nullable) is None
        # and model_fields_set contains the field
        if self.expiry_date is None and "expiry_date" in self.model_fields_set:
            _dict['expiry_date'] = None

        # set to None if comments (nullable) is None
        # and model_fields_set contains the field
        if self.comments is None and "comments" in self.model_fields_set:
            _dict['comments'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FinFeedAPIExchangeModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exchange_id": obj.get("exchange_id"),
            "last_datapoint_date": obj.get("last_datapoint_date"),
            "mic": obj.get("mic"),
            "operating_mic": obj.get("operating_mic"),
            "oprt_sgmt": obj.get("oprt_sgmt"),
            "market_name_institution_description": obj.get("market_name_institution_description"),
            "legal_entity_name": obj.get("legal_entity_name"),
            "lei": obj.get("lei"),
            "market_category_code": obj.get("market_category_code"),
            "acronym": obj.get("acronym"),
            "iso_country_code": obj.get("iso_country_code"),
            "city": obj.get("city"),
            "website": obj.get("website"),
            "status": obj.get("status"),
            "creation_date": obj.get("creation_date"),
            "last_update_date": obj.get("last_update_date"),
            "last_validation_date": obj.get("last_validation_date"),
            "expiry_date": obj.get("expiry_date"),
            "comments": obj.get("comments")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


