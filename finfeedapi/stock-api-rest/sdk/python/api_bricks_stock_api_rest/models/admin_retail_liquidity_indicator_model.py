# coding: utf-8

"""
    REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdminRetailLiquidityIndicatorModel(BaseModel):
    """
    Represents the response DTO for retail liquidity indicator information
    """ # noqa: E501
    symbol: Optional[StrictStr] = Field(default=None, description="The stock symbol")
    timestamp_nanos: Optional[StrictInt] = Field(default=None, description="Original timestamp in nanoseconds since epoch")
    timestamp: Optional[datetime] = Field(default=None, description="Time when the retail liquidity indicator was recorded as DateTime")
    retail_liquidity_indicator: Optional[StrictInt] = Field(default=None, description="Retail liquidity indicator as byte value")
    retail_liquidity_indicator_code: Optional[StrictStr] = Field(default=None, description="Retail liquidity indicator as character string")
    retail_liquidity_indicator_text: Optional[StrictStr] = Field(default=None, description="Human-readable description of the retail liquidity indicator")
    is_retail_indicator_not_applicable: Optional[StrictBool] = Field(default=None, description="Indicates if the indicator is 'Not Applicable' (' '/0x20).")
    is_retail_indicator_buy_interest: Optional[StrictBool] = Field(default=None, description="Indicates if there is 'Buy interest for Retail' ('A'/0x41).")
    is_retail_indicator_sell_interest: Optional[StrictBool] = Field(default=None, description="Indicates if there is 'Sell interest for Retail' ('B'/0x42).")
    is_retail_indicator_buy_and_sell_interest: Optional[StrictBool] = Field(default=None, description="Indicates if there is 'Buy and sell interest for Retail' ('C'/0x43).")
    __properties: ClassVar[List[str]] = ["symbol", "timestamp_nanos", "timestamp", "retail_liquidity_indicator", "retail_liquidity_indicator_code", "retail_liquidity_indicator_text", "is_retail_indicator_not_applicable", "is_retail_indicator_buy_interest", "is_retail_indicator_sell_interest", "is_retail_indicator_buy_and_sell_interest"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdminRetailLiquidityIndicatorModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if symbol (nullable) is None
        # and model_fields_set contains the field
        if self.symbol is None and "symbol" in self.model_fields_set:
            _dict['symbol'] = None

        # set to None if retail_liquidity_indicator_code (nullable) is None
        # and model_fields_set contains the field
        if self.retail_liquidity_indicator_code is None and "retail_liquidity_indicator_code" in self.model_fields_set:
            _dict['retail_liquidity_indicator_code'] = None

        # set to None if retail_liquidity_indicator_text (nullable) is None
        # and model_fields_set contains the field
        if self.retail_liquidity_indicator_text is None and "retail_liquidity_indicator_text" in self.model_fields_set:
            _dict['retail_liquidity_indicator_text'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdminRetailLiquidityIndicatorModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "timestamp_nanos": obj.get("timestamp_nanos"),
            "timestamp": obj.get("timestamp"),
            "retail_liquidity_indicator": obj.get("retail_liquidity_indicator"),
            "retail_liquidity_indicator_code": obj.get("retail_liquidity_indicator_code"),
            "retail_liquidity_indicator_text": obj.get("retail_liquidity_indicator_text"),
            "is_retail_indicator_not_applicable": obj.get("is_retail_indicator_not_applicable"),
            "is_retail_indicator_buy_interest": obj.get("is_retail_indicator_buy_interest"),
            "is_retail_indicator_sell_interest": obj.get("is_retail_indicator_sell_interest"),
            "is_retail_indicator_buy_and_sell_interest": obj.get("is_retail_indicator_buy_and_sell_interest")
        })
        return _obj


