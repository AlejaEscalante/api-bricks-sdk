# coding: utf-8

"""
    REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from api_bricks_stock_api_rest.models.level3_add_order_model import Level3AddOrderModel
from api_bricks_stock_api_rest.models.level3_clear_book_model import Level3ClearBookModel
from api_bricks_stock_api_rest.models.level3_delete_order_model import Level3DeleteOrderModel
from api_bricks_stock_api_rest.models.level3_executed_order_model import Level3ExecutedOrderModel
from api_bricks_stock_api_rest.models.level3_modify_order_model import Level3ModifyOrderModel
from typing import Optional, Set
from typing_extensions import Self

class Level3OrderBookModel(BaseModel):
    """
    Represents the response DTO for Level-3 order book information
    """ # noqa: E501
    add_order: Optional[Level3AddOrderModel] = None
    delete_order: Optional[Level3DeleteOrderModel] = None
    modify_order: Optional[Level3ModifyOrderModel] = None
    executed_order: Optional[Level3ExecutedOrderModel] = None
    clear_book: Optional[Level3ClearBookModel] = None
    __properties: ClassVar[List[str]] = ["add_order", "delete_order", "modify_order", "executed_order", "clear_book"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Level3OrderBookModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of add_order
        if self.add_order:
            _dict['add_order'] = self.add_order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_order
        if self.delete_order:
            _dict['delete_order'] = self.delete_order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of modify_order
        if self.modify_order:
            _dict['modify_order'] = self.modify_order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of executed_order
        if self.executed_order:
            _dict['executed_order'] = self.executed_order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of clear_book
        if self.clear_book:
            _dict['clear_book'] = self.clear_book.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Level3OrderBookModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "add_order": Level3AddOrderModel.from_dict(obj["add_order"]) if obj.get("add_order") is not None else None,
            "delete_order": Level3DeleteOrderModel.from_dict(obj["delete_order"]) if obj.get("delete_order") is not None else None,
            "modify_order": Level3ModifyOrderModel.from_dict(obj["modify_order"]) if obj.get("modify_order") is not None else None,
            "executed_order": Level3ExecutedOrderModel.from_dict(obj["executed_order"]) if obj.get("executed_order") is not None else None,
            "clear_book": Level3ClearBookModel.from_dict(obj["clear_book"]) if obj.get("clear_book") is not None else None
        })
        return _obj


