# coding: utf-8

"""
    FinFeedAPI Stock REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TradeTradeModel(BaseModel):
    """
    Represents the response DTO for a single trade event (report or break).
    """ # noqa: E501
    is_trade_break: Optional[StrictBool] = Field(default=None, description="Indicates if this record represents a trade break (true) or a trade report (false).")
    symbol: Optional[StrictStr] = Field(default=None, description="The stock symbol.")
    timestamp_nanos: Optional[StrictInt] = Field(default=None, description="Original timestamp in nanoseconds since epoch.")
    timestamp: Optional[datetime] = Field(default=None, description="Time when the event was recorded as DateTime (UTC).")
    size: Optional[StrictInt] = Field(default=None, description="Trade volume (or break volume) in number of shares.")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Trade price (or break price) as decimal.")
    trade_id: Optional[StrictInt] = Field(default=None, description="IEX trade identifier (same for report and its corresponding break).")
    is_intermarket_sweep: Optional[StrictBool] = Field(default=None, description="Bit 7 (Mask 0x80): Intermarket Sweep Flag. True: Intermarket Sweep Order (\"ISO\"). False: Non-Intermarket Sweep Order.")
    is_extended_hours_trade: Optional[StrictBool] = Field(default=None, description="Bit 6 (Mask 0x40): Extended Hours Flag. True: Extended Hours Trade (i.e., Form T sale condition). False: Regular Market Session Trade.")
    is_odd_lot_trade: Optional[StrictBool] = Field(default=None, description="Bit 5 (Mask 0x20): Odd Lot Flag. True: Odd Lot Trade. False: Round or Mixed Lot Trade.")
    is_trade_through_exempt: Optional[StrictBool] = Field(default=None, description="Bit 4 (Mask 0x10): Trade Through Exempt Flag. True: Trade is not subject to Rule 611 (Trade Through) of SEC Reg. NMS. False: Trade is subject to Rule 611 (Trade Through) of SEC Reg. NMS. Applied when the taking order was an ISO that traded through a protected quotation, OR the NBBO was crossed at the time of the trade, OR the trade occurred through a self-helped venue's quotation, OR the trade was a single-price cross.")
    is_single_price_cross_trade: Optional[StrictBool] = Field(default=None, description="Bit 3 (Mask 0x08): Single-price Cross Trade Flag. True: Trade resulting from a single-price cross. False: Execution during continuous trading.")
    __properties: ClassVar[List[str]] = ["is_trade_break", "symbol", "timestamp_nanos", "timestamp", "size", "price", "trade_id", "is_intermarket_sweep", "is_extended_hours_trade", "is_odd_lot_trade", "is_trade_through_exempt", "is_single_price_cross_trade"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TradeTradeModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if symbol (nullable) is None
        # and model_fields_set contains the field
        if self.symbol is None and "symbol" in self.model_fields_set:
            _dict['symbol'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TradeTradeModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "is_trade_break": obj.get("is_trade_break"),
            "symbol": obj.get("symbol"),
            "timestamp_nanos": obj.get("timestamp_nanos"),
            "timestamp": obj.get("timestamp"),
            "size": obj.get("size"),
            "price": obj.get("price"),
            "trade_id": obj.get("trade_id"),
            "is_intermarket_sweep": obj.get("is_intermarket_sweep"),
            "is_extended_hours_trade": obj.get("is_extended_hours_trade"),
            "is_odd_lot_trade": obj.get("is_odd_lot_trade"),
            "is_trade_through_exempt": obj.get("is_trade_through_exempt"),
            "is_single_price_cross_trade": obj.get("is_single_price_cross_trade")
        })
        return _obj


