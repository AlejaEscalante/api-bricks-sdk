# coding: utf-8

"""
    REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from api_bricks_stock_api_rest.models.admin_admin_message_model import AdminAdminMessageModel

class TestAdminAdminMessageModel(unittest.TestCase):
    """AdminAdminMessageModel unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdminAdminMessageModel:
        """Test AdminAdminMessageModel
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdminAdminMessageModel`
        """
        model = AdminAdminMessageModel()
        if include_optional:
            return AdminAdminMessageModel(
                trading_status = api_bricks_stock_api_rest.models.admin/trading_status_model.Admin.TradingStatusModel(
                    symbol = '', 
                    timestamp_nanos = 56, 
                    timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    is_trading_live = True, 
                    is_trading_halted = True, 
                    is_trading_in_order_acceptance_period = True, 
                    is_trading_paused = True, 
                    is_reason_halt_news_pending = True, 
                    is_reason_ipo_not_yet_trading = True, 
                    is_reason_ipo_deferred = True, 
                    is_reason_halt_news_dissemination = True, 
                    is_reason_ipo_order_acceptance_period = True, 
                    is_reason_ipo_pre_launch_period = True, 
                    is_reason_market_wide_circuit_breaker_level1 = True, 
                    is_reason_market_wide_circuit_breaker_level2 = True, 
                    is_reason_market_wide_circuit_breaker_level3 = True, 
                    is_reason_not_applicable = True, 
                    is_reason_not_available = True, ),
                official_price = api_bricks_stock_api_rest.models.admin/official_price_model.Admin.OfficialPriceModel(
                    symbol = '', 
                    timestamp_nanos = 56, 
                    timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    price_type = 56, 
                    price_type_code = '', 
                    price_type_text = '', 
                    is_price_type_opening = True, 
                    is_price_type_closing = True, 
                    official_price = 1.337, ),
                security_event = api_bricks_stock_api_rest.models.admin/security_event_model.Admin.SecurityEventModel(
                    symbol = '', 
                    timestamp_nanos = 56, 
                    timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    security_event = 56, 
                    security_event_code = '', 
                    security_event_text = '', 
                    is_opening_process_complete = True, 
                    is_closing_process_complete = True, ),
                auction_information = api_bricks_stock_api_rest.models.admin/auction_information_model.Admin.AuctionInformationModel(
                    symbol = '', 
                    timestamp_nanos = 56, 
                    timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    auction_type = 56, 
                    auction_type_code = '', 
                    auction_type_text = '', 
                    is_auction_type_opening = True, 
                    is_auction_type_closing = True, 
                    is_auction_type_ipo = True, 
                    is_auction_type_halt = True, 
                    is_auction_type_volatility = True, 
                    paired_shares = 56, 
                    reference_price = 1.337, 
                    indicative_clearing_price = 1.337, 
                    imbalance_shares = 56, 
                    imbalance_side = 56, 
                    imbalance_side_code = '', 
                    imbalance_side_text = '', 
                    is_imbalance_side_buy = True, 
                    is_imbalance_side_sell = True, 
                    is_imbalance_side_none = True, 
                    extension_number = 56, 
                    scheduled_auction_time_seconds = 56, 
                    scheduled_auction_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    auction_book_clearing_price = 1.337, 
                    collar_reference_price = 1.337, 
                    lower_auction_collar = 1.337, 
                    upper_auction_collar = 1.337, ),
                short_sale_price_test = api_bricks_stock_api_rest.models.admin/short_sale_price_test_status_model.Admin.ShortSalePriceTestStatusModel(
                    symbol = '', 
                    timestamp_nanos = 56, 
                    timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    short_sale_price_test_status = 56, 
                    short_sale_price_test_status_code = '', 
                    short_sale_price_test_status_text = '', 
                    is_short_sale_price_test_not_in_effect = True, 
                    is_short_sale_price_test_in_effect = True, 
                    detail = 56, 
                    detail_code = '', 
                    detail_text = '', 
                    is_detail_no_price_test = True, 
                    is_detail_activated = True, 
                    is_detail_continued = True, 
                    is_detail_deactivated = True, 
                    is_detail_not_available = True, ),
                operational_halt_status = api_bricks_stock_api_rest.models.admin/operational_halt_status_model.Admin.OperationalHaltStatusModel(
                    symbol = '', 
                    timestamp_nanos = 56, 
                    timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    operational_halt_status = 56, 
                    operational_halt_status_code = '', 
                    operational_halt_status_text = '', 
                    is_operationally_halted = True, 
                    is_not_operationally_halted = True, ),
                retail_liquidity_indicator = api_bricks_stock_api_rest.models.admin/retail_liquidity_indicator_model.Admin.RetailLiquidityIndicatorModel(
                    symbol = '', 
                    timestamp_nanos = 56, 
                    timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    retail_liquidity_indicator = 56, 
                    retail_liquidity_indicator_code = '', 
                    retail_liquidity_indicator_text = '', 
                    is_retail_indicator_not_applicable = True, 
                    is_retail_indicator_buy_interest = True, 
                    is_retail_indicator_sell_interest = True, 
                    is_retail_indicator_buy_and_sell_interest = True, ),
                system_event = api_bricks_stock_api_rest.models.admin/system_event_model.Admin.SystemEventModel(
                    timestamp_nanos = 56, 
                    timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    system_event = 56, 
                    system_event_code = '', 
                    system_event_text = '', 
                    is_system_event_start_of_messages = True, 
                    is_system_event_start_of_system_hours = True, 
                    is_system_event_start_of_regular_market_hours = True, 
                    is_system_event_end_of_regular_market_hours = True, 
                    is_system_event_end_of_system_hours = True, 
                    is_system_event_end_of_messages = True, ),
                security_directory = api_bricks_stock_api_rest.models.admin/security_directory_model.Admin.SecurityDirectoryModel(
                    symbol = '', 
                    timestamp_nanos = 56, 
                    timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    flags = 56, 
                    round_lot_size = 56, 
                    adjusted_poc_price = 1.337, 
                    luld_tier = 56, 
                    luld_tier_code = '', 
                    luld_tier_text = '', 
                    is_luld_tier_not_applicable = True, 
                    is_luld_tier1 = True, 
                    is_luld_tier2 = True, )
            )
        else:
            return AdminAdminMessageModel(
        )
        """

    def testAdminAdminMessageModel(self):
        """Test AdminAdminMessageModel"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
