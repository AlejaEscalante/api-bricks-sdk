# coding: utf-8

"""
    FinFeedAPI Stock REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from api_bricks_stock_api_rest.models.ohlcv_exchange_timeseries_item import OHLCVExchangeTimeseriesItem
from api_bricks_stock_api_rest.models.ohlcv_timeseries_item import OHLCVTimeseriesItem
from api_bricks_stock_api_rest.models.ohlcv_timeseries_period import OHLCVTimeseriesPeriod

from api_bricks_stock_api_rest.api_client import ApiClient, RequestSerialized
from api_bricks_stock_api_rest.api_response import ApiResponse
from api_bricks_stock_api_rest.rest import RESTResponseType


class OhlcvApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def v1_ohlcv_exchange_exchange_id_history_get(
        self,
        exchange_id: Annotated[StrictStr, Field(description="Exchange identifier of requested timeseries (from the Metadata -> Exchanges)")],
        period_id: Annotated[StrictStr, Field(description="Identifier of requested timeseries period (e.g. `5SEC` or `1DAY`)")],
        time_start: Annotated[StrictStr, Field(description="Timeseries starting time in ISO 8601")],
        time_end: Annotated[StrictStr, Field(description="Timeseries ending time in ISO 8601")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OHLCVExchangeTimeseriesItem]:
        """Historical data by exchange

        Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific exchange.

        :param exchange_id: Exchange identifier of requested timeseries (from the Metadata -> Exchanges) (required)
        :type exchange_id: str
        :param period_id: Identifier of requested timeseries period (e.g. `5SEC` or `1DAY`) (required)
        :type period_id: str
        :param time_start: Timeseries starting time in ISO 8601 (required)
        :type time_start: str
        :param time_end: Timeseries ending time in ISO 8601 (required)
        :type time_end: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_ohlcv_exchange_exchange_id_history_get_serialize(
            exchange_id=exchange_id,
            period_id=period_id,
            time_start=time_start,
            time_end=time_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OHLCVExchangeTimeseriesItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1_ohlcv_exchange_exchange_id_history_get_with_http_info(
        self,
        exchange_id: Annotated[StrictStr, Field(description="Exchange identifier of requested timeseries (from the Metadata -> Exchanges)")],
        period_id: Annotated[StrictStr, Field(description="Identifier of requested timeseries period (e.g. `5SEC` or `1DAY`)")],
        time_start: Annotated[StrictStr, Field(description="Timeseries starting time in ISO 8601")],
        time_end: Annotated[StrictStr, Field(description="Timeseries ending time in ISO 8601")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OHLCVExchangeTimeseriesItem]]:
        """Historical data by exchange

        Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific exchange.

        :param exchange_id: Exchange identifier of requested timeseries (from the Metadata -> Exchanges) (required)
        :type exchange_id: str
        :param period_id: Identifier of requested timeseries period (e.g. `5SEC` or `1DAY`) (required)
        :type period_id: str
        :param time_start: Timeseries starting time in ISO 8601 (required)
        :type time_start: str
        :param time_end: Timeseries ending time in ISO 8601 (required)
        :type time_end: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_ohlcv_exchange_exchange_id_history_get_serialize(
            exchange_id=exchange_id,
            period_id=period_id,
            time_start=time_start,
            time_end=time_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OHLCVExchangeTimeseriesItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1_ohlcv_exchange_exchange_id_history_get_without_preload_content(
        self,
        exchange_id: Annotated[StrictStr, Field(description="Exchange identifier of requested timeseries (from the Metadata -> Exchanges)")],
        period_id: Annotated[StrictStr, Field(description="Identifier of requested timeseries period (e.g. `5SEC` or `1DAY`)")],
        time_start: Annotated[StrictStr, Field(description="Timeseries starting time in ISO 8601")],
        time_end: Annotated[StrictStr, Field(description="Timeseries ending time in ISO 8601")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Historical data by exchange

        Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific exchange.

        :param exchange_id: Exchange identifier of requested timeseries (from the Metadata -> Exchanges) (required)
        :type exchange_id: str
        :param period_id: Identifier of requested timeseries period (e.g. `5SEC` or `1DAY`) (required)
        :type period_id: str
        :param time_start: Timeseries starting time in ISO 8601 (required)
        :type time_start: str
        :param time_end: Timeseries ending time in ISO 8601 (required)
        :type time_end: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_ohlcv_exchange_exchange_id_history_get_serialize(
            exchange_id=exchange_id,
            period_id=period_id,
            time_start=time_start,
            time_end=time_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OHLCVExchangeTimeseriesItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1_ohlcv_exchange_exchange_id_history_get_serialize(
        self,
        exchange_id,
        period_id,
        time_start,
        time_end,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if exchange_id is not None:
            _path_params['exchange_id'] = exchange_id
        # process the query parameters
        if period_id is not None:
            
            _query_params.append(('period_id', period_id))
            
        if time_start is not None:
            
            _query_params.append(('time_start', time_start))
            
        if time_end is not None:
            
            _query_params.append(('time_end', time_end))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKey', 
            'JWT'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/ohlcv/exchange/{exchange_id}/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1_ohlcv_exchange_symbol_exchange_id_symbol_id_history_get(
        self,
        exchange_id: Annotated[StrictStr, Field(description="Exchange identifier of requested timeseries (from the Metadata -> Exchanges)")],
        symbol_id: Annotated[StrictStr, Field(description="Symbol identifier of requested timeseries (from the Metadata -> Symbols)")],
        period_id: Annotated[StrictStr, Field(description="Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`)")],
        time_start: Annotated[Optional[StrictStr], Field(description="Timeseries starting time in ISO 8601")] = None,
        time_end: Annotated[Optional[StrictStr], Field(description="Timeseries ending time in ISO 8601")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OHLCVTimeseriesItem]:
        """Historical data

        Get OHLCV timeseries data returned in time ascending order.

        :param exchange_id: Exchange identifier of requested timeseries (from the Metadata -> Exchanges) (required)
        :type exchange_id: str
        :param symbol_id: Symbol identifier of requested timeseries (from the Metadata -> Symbols) (required)
        :type symbol_id: str
        :param period_id: Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`) (required)
        :type period_id: str
        :param time_start: Timeseries starting time in ISO 8601
        :type time_start: str
        :param time_end: Timeseries ending time in ISO 8601
        :type time_end: str
        :param limit: Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_ohlcv_exchange_symbol_exchange_id_symbol_id_history_get_serialize(
            exchange_id=exchange_id,
            symbol_id=symbol_id,
            period_id=period_id,
            time_start=time_start,
            time_end=time_end,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OHLCVTimeseriesItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1_ohlcv_exchange_symbol_exchange_id_symbol_id_history_get_with_http_info(
        self,
        exchange_id: Annotated[StrictStr, Field(description="Exchange identifier of requested timeseries (from the Metadata -> Exchanges)")],
        symbol_id: Annotated[StrictStr, Field(description="Symbol identifier of requested timeseries (from the Metadata -> Symbols)")],
        period_id: Annotated[StrictStr, Field(description="Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`)")],
        time_start: Annotated[Optional[StrictStr], Field(description="Timeseries starting time in ISO 8601")] = None,
        time_end: Annotated[Optional[StrictStr], Field(description="Timeseries ending time in ISO 8601")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OHLCVTimeseriesItem]]:
        """Historical data

        Get OHLCV timeseries data returned in time ascending order.

        :param exchange_id: Exchange identifier of requested timeseries (from the Metadata -> Exchanges) (required)
        :type exchange_id: str
        :param symbol_id: Symbol identifier of requested timeseries (from the Metadata -> Symbols) (required)
        :type symbol_id: str
        :param period_id: Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`) (required)
        :type period_id: str
        :param time_start: Timeseries starting time in ISO 8601
        :type time_start: str
        :param time_end: Timeseries ending time in ISO 8601
        :type time_end: str
        :param limit: Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_ohlcv_exchange_symbol_exchange_id_symbol_id_history_get_serialize(
            exchange_id=exchange_id,
            symbol_id=symbol_id,
            period_id=period_id,
            time_start=time_start,
            time_end=time_end,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OHLCVTimeseriesItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1_ohlcv_exchange_symbol_exchange_id_symbol_id_history_get_without_preload_content(
        self,
        exchange_id: Annotated[StrictStr, Field(description="Exchange identifier of requested timeseries (from the Metadata -> Exchanges)")],
        symbol_id: Annotated[StrictStr, Field(description="Symbol identifier of requested timeseries (from the Metadata -> Symbols)")],
        period_id: Annotated[StrictStr, Field(description="Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`)")],
        time_start: Annotated[Optional[StrictStr], Field(description="Timeseries starting time in ISO 8601")] = None,
        time_end: Annotated[Optional[StrictStr], Field(description="Timeseries ending time in ISO 8601")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Historical data

        Get OHLCV timeseries data returned in time ascending order.

        :param exchange_id: Exchange identifier of requested timeseries (from the Metadata -> Exchanges) (required)
        :type exchange_id: str
        :param symbol_id: Symbol identifier of requested timeseries (from the Metadata -> Symbols) (required)
        :type symbol_id: str
        :param period_id: Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`) (required)
        :type period_id: str
        :param time_start: Timeseries starting time in ISO 8601
        :type time_start: str
        :param time_end: Timeseries ending time in ISO 8601
        :type time_end: str
        :param limit: Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_ohlcv_exchange_symbol_exchange_id_symbol_id_history_get_serialize(
            exchange_id=exchange_id,
            symbol_id=symbol_id,
            period_id=period_id,
            time_start=time_start,
            time_end=time_end,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OHLCVTimeseriesItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1_ohlcv_exchange_symbol_exchange_id_symbol_id_history_get_serialize(
        self,
        exchange_id,
        symbol_id,
        period_id,
        time_start,
        time_end,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if exchange_id is not None:
            _path_params['exchange_id'] = exchange_id
        if symbol_id is not None:
            _path_params['symbol_id'] = symbol_id
        # process the query parameters
        if period_id is not None:
            
            _query_params.append(('period_id', period_id))
            
        if time_start is not None:
            
            _query_params.append(('time_start', time_start))
            
        if time_end is not None:
            
            _query_params.append(('time_end', time_end))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKey', 
            'JWT'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/ohlcv/exchange-symbol/{exchange_id}/{symbol_id}/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1_ohlcv_exchange_symbol_exchange_id_symbol_id_latest_get(
        self,
        exchange_id: Annotated[StrictStr, Field(description="Exchange identifier of requested timeseries (from the Metadata -> Exchanges)")],
        symbol_id: Annotated[StrictStr, Field(description="Symbol identifier of requested timeseries (from the Metadata -> Symbols)")],
        period_id: Annotated[StrictStr, Field(description="Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`)")],
        limit: Annotated[Optional[StrictInt], Field(description="Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OHLCVTimeseriesItem]:
        """Latest data

        Get OHLCV latest timeseries data returned in time descending order. Data can be requested by the period and for the specific symbol eg `BITSTAMP_SPOT_BTC_USD`, if you need to query timeseries by asset pairs eg. `BTC/USD`, then please reffer to the Exchange Rates Timeseries data              :::info OHLCV Latest endpoint is just the shortcut to the OHLCV Historical endpoint with substituted `time_start` and `time_end` parameters.  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. :::

        :param exchange_id: Exchange identifier of requested timeseries (from the Metadata -> Exchanges) (required)
        :type exchange_id: str
        :param symbol_id: Symbol identifier of requested timeseries (from the Metadata -> Symbols) (required)
        :type symbol_id: str
        :param period_id: Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`) (required)
        :type period_id: str
        :param limit: Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_ohlcv_exchange_symbol_exchange_id_symbol_id_latest_get_serialize(
            exchange_id=exchange_id,
            symbol_id=symbol_id,
            period_id=period_id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OHLCVTimeseriesItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1_ohlcv_exchange_symbol_exchange_id_symbol_id_latest_get_with_http_info(
        self,
        exchange_id: Annotated[StrictStr, Field(description="Exchange identifier of requested timeseries (from the Metadata -> Exchanges)")],
        symbol_id: Annotated[StrictStr, Field(description="Symbol identifier of requested timeseries (from the Metadata -> Symbols)")],
        period_id: Annotated[StrictStr, Field(description="Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`)")],
        limit: Annotated[Optional[StrictInt], Field(description="Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OHLCVTimeseriesItem]]:
        """Latest data

        Get OHLCV latest timeseries data returned in time descending order. Data can be requested by the period and for the specific symbol eg `BITSTAMP_SPOT_BTC_USD`, if you need to query timeseries by asset pairs eg. `BTC/USD`, then please reffer to the Exchange Rates Timeseries data              :::info OHLCV Latest endpoint is just the shortcut to the OHLCV Historical endpoint with substituted `time_start` and `time_end` parameters.  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. :::

        :param exchange_id: Exchange identifier of requested timeseries (from the Metadata -> Exchanges) (required)
        :type exchange_id: str
        :param symbol_id: Symbol identifier of requested timeseries (from the Metadata -> Symbols) (required)
        :type symbol_id: str
        :param period_id: Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`) (required)
        :type period_id: str
        :param limit: Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_ohlcv_exchange_symbol_exchange_id_symbol_id_latest_get_serialize(
            exchange_id=exchange_id,
            symbol_id=symbol_id,
            period_id=period_id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OHLCVTimeseriesItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1_ohlcv_exchange_symbol_exchange_id_symbol_id_latest_get_without_preload_content(
        self,
        exchange_id: Annotated[StrictStr, Field(description="Exchange identifier of requested timeseries (from the Metadata -> Exchanges)")],
        symbol_id: Annotated[StrictStr, Field(description="Symbol identifier of requested timeseries (from the Metadata -> Symbols)")],
        period_id: Annotated[StrictStr, Field(description="Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`)")],
        limit: Annotated[Optional[StrictInt], Field(description="Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Latest data

        Get OHLCV latest timeseries data returned in time descending order. Data can be requested by the period and for the specific symbol eg `BITSTAMP_SPOT_BTC_USD`, if you need to query timeseries by asset pairs eg. `BTC/USD`, then please reffer to the Exchange Rates Timeseries data              :::info OHLCV Latest endpoint is just the shortcut to the OHLCV Historical endpoint with substituted `time_start` and `time_end` parameters.  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. :::

        :param exchange_id: Exchange identifier of requested timeseries (from the Metadata -> Exchanges) (required)
        :type exchange_id: str
        :param symbol_id: Symbol identifier of requested timeseries (from the Metadata -> Symbols) (required)
        :type symbol_id: str
        :param period_id: Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`) (required)
        :type period_id: str
        :param limit: Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_ohlcv_exchange_symbol_exchange_id_symbol_id_latest_get_serialize(
            exchange_id=exchange_id,
            symbol_id=symbol_id,
            period_id=period_id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OHLCVTimeseriesItem]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1_ohlcv_exchange_symbol_exchange_id_symbol_id_latest_get_serialize(
        self,
        exchange_id,
        symbol_id,
        period_id,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if exchange_id is not None:
            _path_params['exchange_id'] = exchange_id
        if symbol_id is not None:
            _path_params['symbol_id'] = symbol_id
        # process the query parameters
        if period_id is not None:
            
            _query_params.append(('period_id', period_id))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKey', 
            'JWT'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/ohlcv/exchange-symbol/{exchange_id}/{symbol_id}/latest',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1_ohlcv_periods_get(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OHLCVTimeseriesPeriod]:
        """List all periods

        Get full list of supported time periods available for requesting OHLCV timeseries data.              ### Available periods              Time unit | Period identifiers --------- | ----------- Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY Month | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH Year | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS              :::tip You can assume that we will not remove any periods from this response, however, we may add new ones. :::

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_ohlcv_periods_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OHLCVTimeseriesPeriod]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1_ohlcv_periods_get_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OHLCVTimeseriesPeriod]]:
        """List all periods

        Get full list of supported time periods available for requesting OHLCV timeseries data.              ### Available periods              Time unit | Period identifiers --------- | ----------- Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY Month | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH Year | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS              :::tip You can assume that we will not remove any periods from this response, however, we may add new ones. :::

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_ohlcv_periods_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OHLCVTimeseriesPeriod]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1_ohlcv_periods_get_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all periods

        Get full list of supported time periods available for requesting OHLCV timeseries data.              ### Available periods              Time unit | Period identifiers --------- | ----------- Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY Month | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH Year | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS              :::tip You can assume that we will not remove any periods from this response, however, we may add new ones. :::

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_ohlcv_periods_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OHLCVTimeseriesPeriod]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1_ohlcv_periods_get_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKey', 
            'JWT'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/ohlcv/periods',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


