/*
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.util.*;
import org.openapitools.client.model.OHLCVExchangeTimeseriesItem;
import org.openapitools.client.model.OHLCVTimeseriesItem;
import org.openapitools.client.model.OHLCVTimeseriesPeriod;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class OhlcvApi {
  String basePath = "https://api-historical.stock.finfeedapi.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Historical data by exchange
  * Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific exchange.
   * @param exchangeId Exchange identifier of requested timeseries (from the Metadata -&gt; Exchanges)
   * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;)
   * @param timeStart Timeseries starting time in ISO 8601
   * @param timeEnd Timeseries ending time in ISO 8601
   * @return List<OHLCVExchangeTimeseriesItem>
  */
  public List<OHLCVExchangeTimeseriesItem> v1OhlcvExchangeExchangeIdHistoryGet (String exchangeId, String periodId, String timeStart, String timeEnd) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling v1OhlcvExchangeExchangeIdHistoryGet",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling v1OhlcvExchangeExchangeIdHistoryGet"));
    }
    // verify the required parameter 'periodId' is set
    if (periodId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'periodId' when calling v1OhlcvExchangeExchangeIdHistoryGet",
        new ApiException(400, "Missing the required parameter 'periodId' when calling v1OhlcvExchangeExchangeIdHistoryGet"));
    }
    // verify the required parameter 'timeStart' is set
    if (timeStart == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'timeStart' when calling v1OhlcvExchangeExchangeIdHistoryGet",
        new ApiException(400, "Missing the required parameter 'timeStart' when calling v1OhlcvExchangeExchangeIdHistoryGet"));
    }
    // verify the required parameter 'timeEnd' is set
    if (timeEnd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'timeEnd' when calling v1OhlcvExchangeExchangeIdHistoryGet",
        new ApiException(400, "Missing the required parameter 'timeEnd' when calling v1OhlcvExchangeExchangeIdHistoryGet"));
    }

    // create path and map variables
    String path = "/v1/ohlcv/exchange/{exchange_id}/history".replaceAll("\\{" + "exchange_id" + "\\}", apiInvoker.escapeString(exchangeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "period_id", periodId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_start", timeStart));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_end", timeEnd));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<OHLCVExchangeTimeseriesItem>) ApiInvoker.deserialize(localVarResponse, "array", OHLCVExchangeTimeseriesItem.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Historical data by exchange
   * Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific exchange.
   * @param exchangeId Exchange identifier of requested timeseries (from the Metadata -&gt; Exchanges)   * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;)   * @param timeStart Timeseries starting time in ISO 8601   * @param timeEnd Timeseries ending time in ISO 8601
  */
  public void v1OhlcvExchangeExchangeIdHistoryGet (String exchangeId, String periodId, String timeStart, String timeEnd, final Response.Listener<List<OHLCVExchangeTimeseriesItem>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling v1OhlcvExchangeExchangeIdHistoryGet",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling v1OhlcvExchangeExchangeIdHistoryGet"));
    }
    // verify the required parameter 'periodId' is set
    if (periodId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'periodId' when calling v1OhlcvExchangeExchangeIdHistoryGet",
        new ApiException(400, "Missing the required parameter 'periodId' when calling v1OhlcvExchangeExchangeIdHistoryGet"));
    }
    // verify the required parameter 'timeStart' is set
    if (timeStart == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'timeStart' when calling v1OhlcvExchangeExchangeIdHistoryGet",
        new ApiException(400, "Missing the required parameter 'timeStart' when calling v1OhlcvExchangeExchangeIdHistoryGet"));
    }
    // verify the required parameter 'timeEnd' is set
    if (timeEnd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'timeEnd' when calling v1OhlcvExchangeExchangeIdHistoryGet",
        new ApiException(400, "Missing the required parameter 'timeEnd' when calling v1OhlcvExchangeExchangeIdHistoryGet"));
    }

    // create path and map variables
    String path = "/v1/ohlcv/exchange/{exchange_id}/history".replaceAll("\\{format\\}","json").replaceAll("\\{" + "exchange_id" + "\\}", apiInvoker.escapeString(exchangeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "period_id", periodId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_start", timeStart));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_end", timeEnd));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<OHLCVExchangeTimeseriesItem>) ApiInvoker.deserialize(localVarResponse,  "array", OHLCVExchangeTimeseriesItem.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Historical data
  * Get OHLCV timeseries data returned in time ascending order.
   * @param exchangeId Exchange identifier of requested timeseries (from the Metadata -&gt; Exchanges)
   * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)
   * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)
   * @param timeStart Timeseries starting time in ISO 8601
   * @param timeEnd Timeseries ending time in ISO 8601
   * @param limit Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   * @return List<OHLCVTimeseriesItem>
  */
  public List<OHLCVTimeseriesItem> v1OhlcvExchangeSymbolExchangeIdSymbolIdHistoryGet (String exchangeId, String symbolId, String periodId, String timeStart, String timeEnd, Integer limit) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdHistoryGet",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdHistoryGet"));
    }
    // verify the required parameter 'symbolId' is set
    if (symbolId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbolId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdHistoryGet",
        new ApiException(400, "Missing the required parameter 'symbolId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdHistoryGet"));
    }
    // verify the required parameter 'periodId' is set
    if (periodId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'periodId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdHistoryGet",
        new ApiException(400, "Missing the required parameter 'periodId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdHistoryGet"));
    }

    // create path and map variables
    String path = "/v1/ohlcv/exchange-symbol/{exchange_id}/{symbol_id}/history".replaceAll("\\{" + "exchange_id" + "\\}", apiInvoker.escapeString(exchangeId.toString())).replaceAll("\\{" + "symbol_id" + "\\}", apiInvoker.escapeString(symbolId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "period_id", periodId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_start", timeStart));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_end", timeEnd));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<OHLCVTimeseriesItem>) ApiInvoker.deserialize(localVarResponse, "array", OHLCVTimeseriesItem.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Historical data
   * Get OHLCV timeseries data returned in time ascending order.
   * @param exchangeId Exchange identifier of requested timeseries (from the Metadata -&gt; Exchanges)   * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)   * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)   * @param timeStart Timeseries starting time in ISO 8601   * @param timeEnd Timeseries ending time in ISO 8601   * @param limit Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
  */
  public void v1OhlcvExchangeSymbolExchangeIdSymbolIdHistoryGet (String exchangeId, String symbolId, String periodId, String timeStart, String timeEnd, Integer limit, final Response.Listener<List<OHLCVTimeseriesItem>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdHistoryGet",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdHistoryGet"));
    }
    // verify the required parameter 'symbolId' is set
    if (symbolId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbolId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdHistoryGet",
        new ApiException(400, "Missing the required parameter 'symbolId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdHistoryGet"));
    }
    // verify the required parameter 'periodId' is set
    if (periodId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'periodId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdHistoryGet",
        new ApiException(400, "Missing the required parameter 'periodId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdHistoryGet"));
    }

    // create path and map variables
    String path = "/v1/ohlcv/exchange-symbol/{exchange_id}/{symbol_id}/history".replaceAll("\\{format\\}","json").replaceAll("\\{" + "exchange_id" + "\\}", apiInvoker.escapeString(exchangeId.toString())).replaceAll("\\{" + "symbol_id" + "\\}", apiInvoker.escapeString(symbolId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "period_id", periodId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_start", timeStart));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_end", timeEnd));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<OHLCVTimeseriesItem>) ApiInvoker.deserialize(localVarResponse,  "array", OHLCVTimeseriesItem.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Latest data
  * Get OHLCV latest timeseries data returned in time descending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data              :::info OHLCV Latest endpoint is just the shortcut to the OHLCV Historical endpoint with substituted &#x60;time_start&#x60; and &#x60;time_end&#x60; parameters.  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. :::
   * @param exchangeId Exchange identifier of requested timeseries (from the Metadata -&gt; Exchanges)
   * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)
   * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)
   * @param limit Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   * @return List<OHLCVTimeseriesItem>
  */
  public List<OHLCVTimeseriesItem> v1OhlcvExchangeSymbolExchangeIdSymbolIdLatestGet (String exchangeId, String symbolId, String periodId, Integer limit) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdLatestGet",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdLatestGet"));
    }
    // verify the required parameter 'symbolId' is set
    if (symbolId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbolId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdLatestGet",
        new ApiException(400, "Missing the required parameter 'symbolId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdLatestGet"));
    }
    // verify the required parameter 'periodId' is set
    if (periodId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'periodId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdLatestGet",
        new ApiException(400, "Missing the required parameter 'periodId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdLatestGet"));
    }

    // create path and map variables
    String path = "/v1/ohlcv/exchange-symbol/{exchange_id}/{symbol_id}/latest".replaceAll("\\{" + "exchange_id" + "\\}", apiInvoker.escapeString(exchangeId.toString())).replaceAll("\\{" + "symbol_id" + "\\}", apiInvoker.escapeString(symbolId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "period_id", periodId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<OHLCVTimeseriesItem>) ApiInvoker.deserialize(localVarResponse, "array", OHLCVTimeseriesItem.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Latest data
   * Get OHLCV latest timeseries data returned in time descending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data              :::info OHLCV Latest endpoint is just the shortcut to the OHLCV Historical endpoint with substituted &#x60;time_start&#x60; and &#x60;time_end&#x60; parameters.  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. :::
   * @param exchangeId Exchange identifier of requested timeseries (from the Metadata -&gt; Exchanges)   * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)   * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)   * @param limit Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
  */
  public void v1OhlcvExchangeSymbolExchangeIdSymbolIdLatestGet (String exchangeId, String symbolId, String periodId, Integer limit, final Response.Listener<List<OHLCVTimeseriesItem>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdLatestGet",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdLatestGet"));
    }
    // verify the required parameter 'symbolId' is set
    if (symbolId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbolId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdLatestGet",
        new ApiException(400, "Missing the required parameter 'symbolId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdLatestGet"));
    }
    // verify the required parameter 'periodId' is set
    if (periodId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'periodId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdLatestGet",
        new ApiException(400, "Missing the required parameter 'periodId' when calling v1OhlcvExchangeSymbolExchangeIdSymbolIdLatestGet"));
    }

    // create path and map variables
    String path = "/v1/ohlcv/exchange-symbol/{exchange_id}/{symbol_id}/latest".replaceAll("\\{format\\}","json").replaceAll("\\{" + "exchange_id" + "\\}", apiInvoker.escapeString(exchangeId.toString())).replaceAll("\\{" + "symbol_id" + "\\}", apiInvoker.escapeString(symbolId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "period_id", periodId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<OHLCVTimeseriesItem>) ApiInvoker.deserialize(localVarResponse,  "array", OHLCVTimeseriesItem.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List all periods
  * Get full list of supported time periods available for requesting OHLCV timeseries data.              ### Available periods              Time unit | Period identifiers --------- | ----------- Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY Month | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH Year | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS              :::tip You can assume that we will not remove any periods from this response, however, we may add new ones. :::
   * @return List<OHLCVTimeseriesPeriod>
  */
  public List<OHLCVTimeseriesPeriod> v1OhlcvPeriodsGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/ohlcv/periods";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<OHLCVTimeseriesPeriod>) ApiInvoker.deserialize(localVarResponse, "array", OHLCVTimeseriesPeriod.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List all periods
   * Get full list of supported time periods available for requesting OHLCV timeseries data.              ### Available periods              Time unit | Period identifiers --------- | ----------- Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY Month | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH Year | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS              :::tip You can assume that we will not remove any periods from this response, however, we may add new ones. :::

  */
  public void v1OhlcvPeriodsGet (final Response.Listener<List<OHLCVTimeseriesPeriod>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/ohlcv/periods".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<OHLCVTimeseriesPeriod>) ApiInvoker.deserialize(localVarResponse,  "array", OHLCVTimeseriesPeriod.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
