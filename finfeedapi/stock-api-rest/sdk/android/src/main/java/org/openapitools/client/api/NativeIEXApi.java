/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AdminAdminMessageModel;
import org.openapitools.client.model.AdminSystemEventModel;
import java.util.Date;
import org.openapitools.client.model.Level1QuoteUpdateModel;
import org.openapitools.client.model.Level2PriceLevelUpdateModel;
import org.openapitools.client.model.Level3OrderBookModel;
import java.util.*;
import org.openapitools.client.model.TradeTradeModel;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class NativeIEXApi {
  String basePath = "https://api-historical.stock.finfeedapi.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get Admin Messages
  * 
   * @param symbol The symbol identifier
   * @param date Optional date in format YYYY-MM-DD (defaults to latest available data)
   * @return List<AdminAdminMessageModel>
  */
  public List<AdminAdminMessageModel> v1NativeIexAdminMessagesSymbolGet (String symbol, Date date) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling v1NativeIexAdminMessagesSymbolGet",
        new ApiException(400, "Missing the required parameter 'symbol' when calling v1NativeIexAdminMessagesSymbolGet"));
    }
    // verify the required parameter 'date' is set
    if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling v1NativeIexAdminMessagesSymbolGet",
        new ApiException(400, "Missing the required parameter 'date' when calling v1NativeIexAdminMessagesSymbolGet"));
    }

    // create path and map variables
    String path = "/v1/native/iex/admin/messages/{symbol}".replaceAll("\\{" + "symbol" + "\\}", apiInvoker.escapeString(symbol.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<AdminAdminMessageModel>) ApiInvoker.deserialize(localVarResponse, "array", AdminAdminMessageModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Admin Messages
   * 
   * @param symbol The symbol identifier   * @param date Optional date in format YYYY-MM-DD (defaults to latest available data)
  */
  public void v1NativeIexAdminMessagesSymbolGet (String symbol, Date date, final Response.Listener<List<AdminAdminMessageModel>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling v1NativeIexAdminMessagesSymbolGet",
        new ApiException(400, "Missing the required parameter 'symbol' when calling v1NativeIexAdminMessagesSymbolGet"));
    }
    // verify the required parameter 'date' is set
    if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling v1NativeIexAdminMessagesSymbolGet",
        new ApiException(400, "Missing the required parameter 'date' when calling v1NativeIexAdminMessagesSymbolGet"));
    }

    // create path and map variables
    String path = "/v1/native/iex/admin/messages/{symbol}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "symbol" + "\\}", apiInvoker.escapeString(symbol.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<AdminAdminMessageModel>) ApiInvoker.deserialize(localVarResponse,  "array", AdminAdminMessageModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get System Events
  * 
   * @param date Date in format YYYY-MM-DD
   * @return List<AdminSystemEventModel>
  */
  public List<AdminSystemEventModel> v1NativeIexAdminSystemEventGet (Date date) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'date' is set
    if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling v1NativeIexAdminSystemEventGet",
        new ApiException(400, "Missing the required parameter 'date' when calling v1NativeIexAdminSystemEventGet"));
    }

    // create path and map variables
    String path = "/v1/native/iex/admin/system-event";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<AdminSystemEventModel>) ApiInvoker.deserialize(localVarResponse, "array", AdminSystemEventModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get System Events
   * 
   * @param date Date in format YYYY-MM-DD
  */
  public void v1NativeIexAdminSystemEventGet (Date date, final Response.Listener<List<AdminSystemEventModel>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'date' is set
    if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling v1NativeIexAdminSystemEventGet",
        new ApiException(400, "Missing the required parameter 'date' when calling v1NativeIexAdminSystemEventGet"));
    }

    // create path and map variables
    String path = "/v1/native/iex/admin/system-event".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<AdminSystemEventModel>) ApiInvoker.deserialize(localVarResponse,  "array", AdminSystemEventModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Level-1 Quotes
  * 
   * @param symbol The symbol identifier
   * @param date Optional date in format YYYY-MM-DD (defaults to latest available data)
   * @return List<Level1QuoteUpdateModel>
  */
  public List<Level1QuoteUpdateModel> v1NativeIexLevel1QuoteSymbolGet (String symbol, Date date) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling v1NativeIexLevel1QuoteSymbolGet",
        new ApiException(400, "Missing the required parameter 'symbol' when calling v1NativeIexLevel1QuoteSymbolGet"));
    }
    // verify the required parameter 'date' is set
    if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling v1NativeIexLevel1QuoteSymbolGet",
        new ApiException(400, "Missing the required parameter 'date' when calling v1NativeIexLevel1QuoteSymbolGet"));
    }

    // create path and map variables
    String path = "/v1/native/iex/level1-quote/{symbol}".replaceAll("\\{" + "symbol" + "\\}", apiInvoker.escapeString(symbol.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Level1QuoteUpdateModel>) ApiInvoker.deserialize(localVarResponse, "array", Level1QuoteUpdateModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Level-1 Quotes
   * 
   * @param symbol The symbol identifier   * @param date Optional date in format YYYY-MM-DD (defaults to latest available data)
  */
  public void v1NativeIexLevel1QuoteSymbolGet (String symbol, Date date, final Response.Listener<List<Level1QuoteUpdateModel>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling v1NativeIexLevel1QuoteSymbolGet",
        new ApiException(400, "Missing the required parameter 'symbol' when calling v1NativeIexLevel1QuoteSymbolGet"));
    }
    // verify the required parameter 'date' is set
    if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling v1NativeIexLevel1QuoteSymbolGet",
        new ApiException(400, "Missing the required parameter 'date' when calling v1NativeIexLevel1QuoteSymbolGet"));
    }

    // create path and map variables
    String path = "/v1/native/iex/level1-quote/{symbol}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "symbol" + "\\}", apiInvoker.escapeString(symbol.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Level1QuoteUpdateModel>) ApiInvoker.deserialize(localVarResponse,  "array", Level1QuoteUpdateModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Level-2 Price Level Book
  * 
   * @param symbol The symbol identifier
   * @param date Optional date in format YYYY-MM-DD (defaults to latest available data)
   * @return List<Level2PriceLevelUpdateModel>
  */
  public List<Level2PriceLevelUpdateModel> v1NativeIexLevel2PriceLevelUpdateSymbolGet (String symbol, Date date) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling v1NativeIexLevel2PriceLevelUpdateSymbolGet",
        new ApiException(400, "Missing the required parameter 'symbol' when calling v1NativeIexLevel2PriceLevelUpdateSymbolGet"));
    }
    // verify the required parameter 'date' is set
    if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling v1NativeIexLevel2PriceLevelUpdateSymbolGet",
        new ApiException(400, "Missing the required parameter 'date' when calling v1NativeIexLevel2PriceLevelUpdateSymbolGet"));
    }

    // create path and map variables
    String path = "/v1/native/iex/level2-price-level-update/{symbol}".replaceAll("\\{" + "symbol" + "\\}", apiInvoker.escapeString(symbol.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Level2PriceLevelUpdateModel>) ApiInvoker.deserialize(localVarResponse, "array", Level2PriceLevelUpdateModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Level-2 Price Level Book
   * 
   * @param symbol The symbol identifier   * @param date Optional date in format YYYY-MM-DD (defaults to latest available data)
  */
  public void v1NativeIexLevel2PriceLevelUpdateSymbolGet (String symbol, Date date, final Response.Listener<List<Level2PriceLevelUpdateModel>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling v1NativeIexLevel2PriceLevelUpdateSymbolGet",
        new ApiException(400, "Missing the required parameter 'symbol' when calling v1NativeIexLevel2PriceLevelUpdateSymbolGet"));
    }
    // verify the required parameter 'date' is set
    if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling v1NativeIexLevel2PriceLevelUpdateSymbolGet",
        new ApiException(400, "Missing the required parameter 'date' when calling v1NativeIexLevel2PriceLevelUpdateSymbolGet"));
    }

    // create path and map variables
    String path = "/v1/native/iex/level2-price-level-update/{symbol}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "symbol" + "\\}", apiInvoker.escapeString(symbol.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Level2PriceLevelUpdateModel>) ApiInvoker.deserialize(localVarResponse,  "array", Level2PriceLevelUpdateModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Level-3 Order Book
  * 
   * @param symbol The symbol identifier
   * @param date Optional date in format YYYY-MM-DD (defaults to latest available data)
   * @return List<Level3OrderBookModel>
  */
  public List<Level3OrderBookModel> v1NativeIexLevel3OrderBookSymbolGet (String symbol, Date date) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling v1NativeIexLevel3OrderBookSymbolGet",
        new ApiException(400, "Missing the required parameter 'symbol' when calling v1NativeIexLevel3OrderBookSymbolGet"));
    }
    // verify the required parameter 'date' is set
    if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling v1NativeIexLevel3OrderBookSymbolGet",
        new ApiException(400, "Missing the required parameter 'date' when calling v1NativeIexLevel3OrderBookSymbolGet"));
    }

    // create path and map variables
    String path = "/v1/native/iex/level3-order-book/{symbol}".replaceAll("\\{" + "symbol" + "\\}", apiInvoker.escapeString(symbol.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Level3OrderBookModel>) ApiInvoker.deserialize(localVarResponse, "array", Level3OrderBookModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Level-3 Order Book
   * 
   * @param symbol The symbol identifier   * @param date Optional date in format YYYY-MM-DD (defaults to latest available data)
  */
  public void v1NativeIexLevel3OrderBookSymbolGet (String symbol, Date date, final Response.Listener<List<Level3OrderBookModel>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling v1NativeIexLevel3OrderBookSymbolGet",
        new ApiException(400, "Missing the required parameter 'symbol' when calling v1NativeIexLevel3OrderBookSymbolGet"));
    }
    // verify the required parameter 'date' is set
    if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling v1NativeIexLevel3OrderBookSymbolGet",
        new ApiException(400, "Missing the required parameter 'date' when calling v1NativeIexLevel3OrderBookSymbolGet"));
    }

    // create path and map variables
    String path = "/v1/native/iex/level3-order-book/{symbol}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "symbol" + "\\}", apiInvoker.escapeString(symbol.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Level3OrderBookModel>) ApiInvoker.deserialize(localVarResponse,  "array", Level3OrderBookModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Trades
  * 
   * @param symbol The symbol identifier
   * @param date Optional date in format YYYY-MM-DD (defaults to latest available data)
   * @return List<TradeTradeModel>
  */
  public List<TradeTradeModel> v1NativeIexTradeSymbolGet (String symbol, Date date) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling v1NativeIexTradeSymbolGet",
        new ApiException(400, "Missing the required parameter 'symbol' when calling v1NativeIexTradeSymbolGet"));
    }
    // verify the required parameter 'date' is set
    if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling v1NativeIexTradeSymbolGet",
        new ApiException(400, "Missing the required parameter 'date' when calling v1NativeIexTradeSymbolGet"));
    }

    // create path and map variables
    String path = "/v1/native/iex/trade/{symbol}".replaceAll("\\{" + "symbol" + "\\}", apiInvoker.escapeString(symbol.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<TradeTradeModel>) ApiInvoker.deserialize(localVarResponse, "array", TradeTradeModel.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Trades
   * 
   * @param symbol The symbol identifier   * @param date Optional date in format YYYY-MM-DD (defaults to latest available data)
  */
  public void v1NativeIexTradeSymbolGet (String symbol, Date date, final Response.Listener<List<TradeTradeModel>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'symbol' is set
    if (symbol == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbol' when calling v1NativeIexTradeSymbolGet",
        new ApiException(400, "Missing the required parameter 'symbol' when calling v1NativeIexTradeSymbolGet"));
    }
    // verify the required parameter 'date' is set
    if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling v1NativeIexTradeSymbolGet",
        new ApiException(400, "Missing the required parameter 'date' when calling v1NativeIexTradeSymbolGet"));
    }

    // create path and map variables
    String path = "/v1/native/iex/trade/{symbol}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "symbol" + "\\}", apiInvoker.escapeString(symbol.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<TradeTradeModel>) ApiInvoker.deserialize(localVarResponse,  "array", TradeTradeModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
