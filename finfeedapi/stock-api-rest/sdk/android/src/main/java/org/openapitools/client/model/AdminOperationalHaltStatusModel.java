/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Represents the response DTO for operational halt status information
 **/
@ApiModel(description = "Represents the response DTO for operational halt status information")
public class AdminOperationalHaltStatusModel {
  
  @SerializedName("symbol")
  private String symbol = null;
  @SerializedName("timestamp_nanos")
  private Long timestampNanos = null;
  @SerializedName("timestamp")
  private Date timestamp = null;
  @SerializedName("operational_halt_status")
  private Integer operationalHaltStatus = null;
  @SerializedName("operational_halt_status_code")
  private String operationalHaltStatusCode = null;
  @SerializedName("operational_halt_status_text")
  private String operationalHaltStatusText = null;
  @SerializedName("is_operationally_halted")
  private Boolean isOperationallyHalted = null;
  @SerializedName("is_not_operationally_halted")
  private Boolean isNotOperationallyHalted = null;

  /**
   * The stock symbol
   **/
  @ApiModelProperty(value = "The stock symbol")
  public String getSymbol() {
    return symbol;
  }
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  /**
   * Original timestamp in nanoseconds since epoch
   **/
  @ApiModelProperty(value = "Original timestamp in nanoseconds since epoch")
  public Long getTimestampNanos() {
    return timestampNanos;
  }
  public void setTimestampNanos(Long timestampNanos) {
    this.timestampNanos = timestampNanos;
  }

  /**
   * Time when the operational halt status was recorded as DateTime
   **/
  @ApiModelProperty(value = "Time when the operational halt status was recorded as DateTime")
  public Date getTimestamp() {
    return timestamp;
  }
  public void setTimestamp(Date timestamp) {
    this.timestamp = timestamp;
  }

  /**
   * Operational halt status as byte value
   **/
  @ApiModelProperty(value = "Operational halt status as byte value")
  public Integer getOperationalHaltStatus() {
    return operationalHaltStatus;
  }
  public void setOperationalHaltStatus(Integer operationalHaltStatus) {
    this.operationalHaltStatus = operationalHaltStatus;
  }

  /**
   * Operational halt status as character string
   **/
  @ApiModelProperty(value = "Operational halt status as character string")
  public String getOperationalHaltStatusCode() {
    return operationalHaltStatusCode;
  }
  public void setOperationalHaltStatusCode(String operationalHaltStatusCode) {
    this.operationalHaltStatusCode = operationalHaltStatusCode;
  }

  /**
   * Human-readable description of the operational halt status
   **/
  @ApiModelProperty(value = "Human-readable description of the operational halt status")
  public String getOperationalHaltStatusText() {
    return operationalHaltStatusText;
  }
  public void setOperationalHaltStatusText(String operationalHaltStatusText) {
    this.operationalHaltStatusText = operationalHaltStatusText;
  }

  /**
   * Indicates if the status is 'IEX specific operational trading halt' ('O'/0x4f).
   **/
  @ApiModelProperty(value = "Indicates if the status is 'IEX specific operational trading halt' ('O'/0x4f).")
  public Boolean getIsOperationallyHalted() {
    return isOperationallyHalted;
  }
  public void setIsOperationallyHalted(Boolean isOperationallyHalted) {
    this.isOperationallyHalted = isOperationallyHalted;
  }

  /**
   * Indicates if the status is 'Not operationally halted on IEX' ('N'/0x4e).
   **/
  @ApiModelProperty(value = "Indicates if the status is 'Not operationally halted on IEX' ('N'/0x4e).")
  public Boolean getIsNotOperationallyHalted() {
    return isNotOperationallyHalted;
  }
  public void setIsNotOperationallyHalted(Boolean isNotOperationallyHalted) {
    this.isNotOperationallyHalted = isNotOperationallyHalted;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminOperationalHaltStatusModel adminOperationalHaltStatusModel = (AdminOperationalHaltStatusModel) o;
    return (this.symbol == null ? adminOperationalHaltStatusModel.symbol == null : this.symbol.equals(adminOperationalHaltStatusModel.symbol)) &&
        (this.timestampNanos == null ? adminOperationalHaltStatusModel.timestampNanos == null : this.timestampNanos.equals(adminOperationalHaltStatusModel.timestampNanos)) &&
        (this.timestamp == null ? adminOperationalHaltStatusModel.timestamp == null : this.timestamp.equals(adminOperationalHaltStatusModel.timestamp)) &&
        (this.operationalHaltStatus == null ? adminOperationalHaltStatusModel.operationalHaltStatus == null : this.operationalHaltStatus.equals(adminOperationalHaltStatusModel.operationalHaltStatus)) &&
        (this.operationalHaltStatusCode == null ? adminOperationalHaltStatusModel.operationalHaltStatusCode == null : this.operationalHaltStatusCode.equals(adminOperationalHaltStatusModel.operationalHaltStatusCode)) &&
        (this.operationalHaltStatusText == null ? adminOperationalHaltStatusModel.operationalHaltStatusText == null : this.operationalHaltStatusText.equals(adminOperationalHaltStatusModel.operationalHaltStatusText)) &&
        (this.isOperationallyHalted == null ? adminOperationalHaltStatusModel.isOperationallyHalted == null : this.isOperationallyHalted.equals(adminOperationalHaltStatusModel.isOperationallyHalted)) &&
        (this.isNotOperationallyHalted == null ? adminOperationalHaltStatusModel.isNotOperationallyHalted == null : this.isNotOperationallyHalted.equals(adminOperationalHaltStatusModel.isNotOperationallyHalted));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.symbol == null ? 0: this.symbol.hashCode());
    result = 31 * result + (this.timestampNanos == null ? 0: this.timestampNanos.hashCode());
    result = 31 * result + (this.timestamp == null ? 0: this.timestamp.hashCode());
    result = 31 * result + (this.operationalHaltStatus == null ? 0: this.operationalHaltStatus.hashCode());
    result = 31 * result + (this.operationalHaltStatusCode == null ? 0: this.operationalHaltStatusCode.hashCode());
    result = 31 * result + (this.operationalHaltStatusText == null ? 0: this.operationalHaltStatusText.hashCode());
    result = 31 * result + (this.isOperationallyHalted == null ? 0: this.isOperationallyHalted.hashCode());
    result = 31 * result + (this.isNotOperationallyHalted == null ? 0: this.isNotOperationallyHalted.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminOperationalHaltStatusModel {\n");
    
    sb.append("  symbol: ").append(symbol).append("\n");
    sb.append("  timestampNanos: ").append(timestampNanos).append("\n");
    sb.append("  timestamp: ").append(timestamp).append("\n");
    sb.append("  operationalHaltStatus: ").append(operationalHaltStatus).append("\n");
    sb.append("  operationalHaltStatusCode: ").append(operationalHaltStatusCode).append("\n");
    sb.append("  operationalHaltStatusText: ").append(operationalHaltStatusText).append("\n");
    sb.append("  isOperationallyHalted: ").append(isOperationallyHalted).append("\n");
    sb.append("  isNotOperationallyHalted: ").append(isNotOperationallyHalted).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
