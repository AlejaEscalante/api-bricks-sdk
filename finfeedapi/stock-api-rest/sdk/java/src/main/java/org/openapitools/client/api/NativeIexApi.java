/*
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AdminAdminMessageModel;
import org.openapitools.client.model.AdminSystemEventModel;
import org.openapitools.client.model.Level1QuoteUpdateModel;
import org.openapitools.client.model.Level2PriceLevelUpdateModel;
import org.openapitools.client.model.Level3OrderBookModel;
import java.time.OffsetDateTime;
import org.openapitools.client.model.TradeTradeModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NativeIexApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NativeIexApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NativeIexApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1NativeIexAdminMessagesSymbolGet
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1NativeIexAdminMessagesSymbolGetCall(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/native/iex/admin/messages/{symbol}"
            .replace("{" + "symbol" + "}", localVarApiClient.escapeString(symbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1NativeIexAdminMessagesSymbolGetValidateBeforeCall(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling v1NativeIexAdminMessagesSymbolGet(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling v1NativeIexAdminMessagesSymbolGet(Async)");
        }

        return v1NativeIexAdminMessagesSymbolGetCall(symbol, date, _callback);

    }

    /**
     * Get Admin Messages
     * 
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @return List&lt;AdminAdminMessageModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<AdminAdminMessageModel> v1NativeIexAdminMessagesSymbolGet(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date) throws ApiException {
        ApiResponse<List<AdminAdminMessageModel>> localVarResp = v1NativeIexAdminMessagesSymbolGetWithHttpInfo(symbol, date);
        return localVarResp.getData();
    }

    /**
     * Get Admin Messages
     * 
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @return ApiResponse&lt;List&lt;AdminAdminMessageModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AdminAdminMessageModel>> v1NativeIexAdminMessagesSymbolGetWithHttpInfo(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date) throws ApiException {
        okhttp3.Call localVarCall = v1NativeIexAdminMessagesSymbolGetValidateBeforeCall(symbol, date, null);
        Type localVarReturnType = new TypeToken<List<AdminAdminMessageModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Admin Messages (asynchronously)
     * 
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1NativeIexAdminMessagesSymbolGetAsync(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date, final ApiCallback<List<AdminAdminMessageModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1NativeIexAdminMessagesSymbolGetValidateBeforeCall(symbol, date, _callback);
        Type localVarReturnType = new TypeToken<List<AdminAdminMessageModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1NativeIexAdminSystemEventGet
     * @param date Date in format YYYY-MM-DD (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1NativeIexAdminSystemEventGetCall(@javax.annotation.Nonnull OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/native/iex/admin/system-event";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1NativeIexAdminSystemEventGetValidateBeforeCall(@javax.annotation.Nonnull OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling v1NativeIexAdminSystemEventGet(Async)");
        }

        return v1NativeIexAdminSystemEventGetCall(date, _callback);

    }

    /**
     * Get System Events
     * 
     * @param date Date in format YYYY-MM-DD (required)
     * @return List&lt;AdminSystemEventModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<AdminSystemEventModel> v1NativeIexAdminSystemEventGet(@javax.annotation.Nonnull OffsetDateTime date) throws ApiException {
        ApiResponse<List<AdminSystemEventModel>> localVarResp = v1NativeIexAdminSystemEventGetWithHttpInfo(date);
        return localVarResp.getData();
    }

    /**
     * Get System Events
     * 
     * @param date Date in format YYYY-MM-DD (required)
     * @return ApiResponse&lt;List&lt;AdminSystemEventModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AdminSystemEventModel>> v1NativeIexAdminSystemEventGetWithHttpInfo(@javax.annotation.Nonnull OffsetDateTime date) throws ApiException {
        okhttp3.Call localVarCall = v1NativeIexAdminSystemEventGetValidateBeforeCall(date, null);
        Type localVarReturnType = new TypeToken<List<AdminSystemEventModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get System Events (asynchronously)
     * 
     * @param date Date in format YYYY-MM-DD (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1NativeIexAdminSystemEventGetAsync(@javax.annotation.Nonnull OffsetDateTime date, final ApiCallback<List<AdminSystemEventModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1NativeIexAdminSystemEventGetValidateBeforeCall(date, _callback);
        Type localVarReturnType = new TypeToken<List<AdminSystemEventModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1NativeIexLevel1QuoteSymbolGet
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1NativeIexLevel1QuoteSymbolGetCall(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/native/iex/level1-quote/{symbol}"
            .replace("{" + "symbol" + "}", localVarApiClient.escapeString(symbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1NativeIexLevel1QuoteSymbolGetValidateBeforeCall(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling v1NativeIexLevel1QuoteSymbolGet(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling v1NativeIexLevel1QuoteSymbolGet(Async)");
        }

        return v1NativeIexLevel1QuoteSymbolGetCall(symbol, date, _callback);

    }

    /**
     * Get Level-1 Quotes
     * 
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @return List&lt;Level1QuoteUpdateModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Level1QuoteUpdateModel> v1NativeIexLevel1QuoteSymbolGet(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date) throws ApiException {
        ApiResponse<List<Level1QuoteUpdateModel>> localVarResp = v1NativeIexLevel1QuoteSymbolGetWithHttpInfo(symbol, date);
        return localVarResp.getData();
    }

    /**
     * Get Level-1 Quotes
     * 
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @return ApiResponse&lt;List&lt;Level1QuoteUpdateModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Level1QuoteUpdateModel>> v1NativeIexLevel1QuoteSymbolGetWithHttpInfo(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date) throws ApiException {
        okhttp3.Call localVarCall = v1NativeIexLevel1QuoteSymbolGetValidateBeforeCall(symbol, date, null);
        Type localVarReturnType = new TypeToken<List<Level1QuoteUpdateModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Level-1 Quotes (asynchronously)
     * 
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1NativeIexLevel1QuoteSymbolGetAsync(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date, final ApiCallback<List<Level1QuoteUpdateModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1NativeIexLevel1QuoteSymbolGetValidateBeforeCall(symbol, date, _callback);
        Type localVarReturnType = new TypeToken<List<Level1QuoteUpdateModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1NativeIexLevel2PriceLevelUpdateSymbolGet
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1NativeIexLevel2PriceLevelUpdateSymbolGetCall(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/native/iex/level2-price-level-update/{symbol}"
            .replace("{" + "symbol" + "}", localVarApiClient.escapeString(symbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1NativeIexLevel2PriceLevelUpdateSymbolGetValidateBeforeCall(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling v1NativeIexLevel2PriceLevelUpdateSymbolGet(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling v1NativeIexLevel2PriceLevelUpdateSymbolGet(Async)");
        }

        return v1NativeIexLevel2PriceLevelUpdateSymbolGetCall(symbol, date, _callback);

    }

    /**
     * Get Level-2 Price Level Book
     * 
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @return List&lt;Level2PriceLevelUpdateModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Level2PriceLevelUpdateModel> v1NativeIexLevel2PriceLevelUpdateSymbolGet(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date) throws ApiException {
        ApiResponse<List<Level2PriceLevelUpdateModel>> localVarResp = v1NativeIexLevel2PriceLevelUpdateSymbolGetWithHttpInfo(symbol, date);
        return localVarResp.getData();
    }

    /**
     * Get Level-2 Price Level Book
     * 
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @return ApiResponse&lt;List&lt;Level2PriceLevelUpdateModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Level2PriceLevelUpdateModel>> v1NativeIexLevel2PriceLevelUpdateSymbolGetWithHttpInfo(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date) throws ApiException {
        okhttp3.Call localVarCall = v1NativeIexLevel2PriceLevelUpdateSymbolGetValidateBeforeCall(symbol, date, null);
        Type localVarReturnType = new TypeToken<List<Level2PriceLevelUpdateModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Level-2 Price Level Book (asynchronously)
     * 
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1NativeIexLevel2PriceLevelUpdateSymbolGetAsync(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date, final ApiCallback<List<Level2PriceLevelUpdateModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1NativeIexLevel2PriceLevelUpdateSymbolGetValidateBeforeCall(symbol, date, _callback);
        Type localVarReturnType = new TypeToken<List<Level2PriceLevelUpdateModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1NativeIexLevel3OrderBookSymbolGet
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1NativeIexLevel3OrderBookSymbolGetCall(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/native/iex/level3-order-book/{symbol}"
            .replace("{" + "symbol" + "}", localVarApiClient.escapeString(symbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1NativeIexLevel3OrderBookSymbolGetValidateBeforeCall(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling v1NativeIexLevel3OrderBookSymbolGet(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling v1NativeIexLevel3OrderBookSymbolGet(Async)");
        }

        return v1NativeIexLevel3OrderBookSymbolGetCall(symbol, date, _callback);

    }

    /**
     * Get Level-3 Order Book
     * 
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @return List&lt;Level3OrderBookModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Level3OrderBookModel> v1NativeIexLevel3OrderBookSymbolGet(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date) throws ApiException {
        ApiResponse<List<Level3OrderBookModel>> localVarResp = v1NativeIexLevel3OrderBookSymbolGetWithHttpInfo(symbol, date);
        return localVarResp.getData();
    }

    /**
     * Get Level-3 Order Book
     * 
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @return ApiResponse&lt;List&lt;Level3OrderBookModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Level3OrderBookModel>> v1NativeIexLevel3OrderBookSymbolGetWithHttpInfo(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date) throws ApiException {
        okhttp3.Call localVarCall = v1NativeIexLevel3OrderBookSymbolGetValidateBeforeCall(symbol, date, null);
        Type localVarReturnType = new TypeToken<List<Level3OrderBookModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Level-3 Order Book (asynchronously)
     * 
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1NativeIexLevel3OrderBookSymbolGetAsync(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date, final ApiCallback<List<Level3OrderBookModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1NativeIexLevel3OrderBookSymbolGetValidateBeforeCall(symbol, date, _callback);
        Type localVarReturnType = new TypeToken<List<Level3OrderBookModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1NativeIexTradeSymbolGet
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1NativeIexTradeSymbolGetCall(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/native/iex/trade/{symbol}"
            .replace("{" + "symbol" + "}", localVarApiClient.escapeString(symbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1NativeIexTradeSymbolGetValidateBeforeCall(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling v1NativeIexTradeSymbolGet(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling v1NativeIexTradeSymbolGet(Async)");
        }

        return v1NativeIexTradeSymbolGetCall(symbol, date, _callback);

    }

    /**
     * Get Trades
     * 
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @return List&lt;TradeTradeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<TradeTradeModel> v1NativeIexTradeSymbolGet(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date) throws ApiException {
        ApiResponse<List<TradeTradeModel>> localVarResp = v1NativeIexTradeSymbolGetWithHttpInfo(symbol, date);
        return localVarResp.getData();
    }

    /**
     * Get Trades
     * 
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @return ApiResponse&lt;List&lt;TradeTradeModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TradeTradeModel>> v1NativeIexTradeSymbolGetWithHttpInfo(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date) throws ApiException {
        okhttp3.Call localVarCall = v1NativeIexTradeSymbolGetValidateBeforeCall(symbol, date, null);
        Type localVarReturnType = new TypeToken<List<TradeTradeModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Trades (asynchronously)
     * 
     * @param symbol The symbol identifier (required)
     * @param date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1NativeIexTradeSymbolGetAsync(@javax.annotation.Nonnull String symbol, @javax.annotation.Nonnull OffsetDateTime date, final ApiCallback<List<TradeTradeModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1NativeIexTradeSymbolGetValidateBeforeCall(symbol, date, _callback);
        Type localVarReturnType = new TypeToken<List<TradeTradeModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
