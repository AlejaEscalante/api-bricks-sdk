{-
   REST API
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   The version of the OpenAPI document: v1
   Contact: support@apibricks.io

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( AdminAdminMessageModel
    , AdminAuctionInformationModel
    , AdminOfficialPriceModel
    , AdminOperationalHaltStatusModel
    , AdminRetailLiquidityIndicatorModel
    , AdminSecurityDirectoryModel
    , AdminSecurityEventModel
    , AdminShortSalePriceTestStatusModel
    , AdminSystemEventModel
    , AdminTradingStatusModel
    , FinFeedAPIExchangeModel
    , FinFeedAPISymbolModel
    , Level1QuoteUpdateModel
    , Level2PriceLevelUpdateModel
    , Level3AddOrderModel
    , Level3ClearBookModel
    , Level3DeleteOrderModel
    , Level3ExecutedOrderModel
    , Level3ModifyOrderModel
    , Level3OrderBookModel
    , OHLCVExchangeTimeseriesItem
    , OHLCVTimeseriesItem
    , OHLCVTimeseriesPeriod
    , TradeTradeModel
    , encodeAdminAdminMessageModel
    , encodeAdminAuctionInformationModel
    , encodeAdminOfficialPriceModel
    , encodeAdminOperationalHaltStatusModel
    , encodeAdminRetailLiquidityIndicatorModel
    , encodeAdminSecurityDirectoryModel
    , encodeAdminSecurityEventModel
    , encodeAdminShortSalePriceTestStatusModel
    , encodeAdminSystemEventModel
    , encodeAdminTradingStatusModel
    , encodeFinFeedAPIExchangeModel
    , encodeFinFeedAPISymbolModel
    , encodeLevel1QuoteUpdateModel
    , encodeLevel2PriceLevelUpdateModel
    , encodeLevel3AddOrderModel
    , encodeLevel3ClearBookModel
    , encodeLevel3DeleteOrderModel
    , encodeLevel3ExecutedOrderModel
    , encodeLevel3ModifyOrderModel
    , encodeLevel3OrderBookModel
    , encodeOHLCVExchangeTimeseriesItem
    , encodeOHLCVTimeseriesItem
    , encodeOHLCVTimeseriesPeriod
    , encodeTradeTradeModel
    , adminAdminMessageModelDecoder
    , adminAuctionInformationModelDecoder
    , adminOfficialPriceModelDecoder
    , adminOperationalHaltStatusModelDecoder
    , adminRetailLiquidityIndicatorModelDecoder
    , adminSecurityDirectoryModelDecoder
    , adminSecurityEventModelDecoder
    , adminShortSalePriceTestStatusModelDecoder
    , adminSystemEventModelDecoder
    , adminTradingStatusModelDecoder
    , finFeedAPIExchangeModelDecoder
    , finFeedAPISymbolModelDecoder
    , level1QuoteUpdateModelDecoder
    , level2PriceLevelUpdateModelDecoder
    , level3AddOrderModelDecoder
    , level3ClearBookModelDecoder
    , level3DeleteOrderModelDecoder
    , level3ExecutedOrderModelDecoder
    , level3ModifyOrderModelDecoder
    , level3OrderBookModelDecoder
    , oHLCVExchangeTimeseriesItemDecoder
    , oHLCVTimeseriesItemDecoder
    , oHLCVTimeseriesPeriodDecoder
    , tradeTradeModelDecoder
    )

import Api
import Api.Time exposing (Posix)
import Dict
import Json.Decode
import Json.Encode


-- MODEL


{-| Represents the response DTO for IEX admin information, combining all symbol-based admin message types
-}
type alias AdminAdminMessageModel =
    { tradingStatus : Maybe AdminTradingStatusModel
    , officialPrice : Maybe AdminOfficialPriceModel
    , securityEvent : Maybe AdminSecurityEventModel
    , auctionInformation : Maybe AdminAuctionInformationModel
    , shortSalePriceTest : Maybe AdminShortSalePriceTestStatusModel
    , operationalHaltStatus : Maybe AdminOperationalHaltStatusModel
    , retailLiquidityIndicator : Maybe AdminRetailLiquidityIndicatorModel
    , systemEvent : Maybe AdminSystemEventModel
    , securityDirectory : Maybe AdminSecurityDirectoryModel
    }


{-| Represents the response DTO for auction information
-}
type alias AdminAuctionInformationModel =
    { symbol : Maybe String
    , timestampNanos : Maybe Int
    , timestamp : Maybe Posix
    , auctionType : Maybe Int
    , auctionTypeCode : Maybe String
    , auctionTypeText : Maybe String
    , isAuctionTypeOpening : Maybe Bool
    , isAuctionTypeClosing : Maybe Bool
    , isAuctionTypeIpo : Maybe Bool
    , isAuctionTypeHalt : Maybe Bool
    , isAuctionTypeVolatility : Maybe Bool
    , pairedShares : Maybe Int
    , referencePrice : Maybe Float
    , indicativeClearingPrice : Maybe Float
    , imbalanceShares : Maybe Int
    , imbalanceSide : Maybe Int
    , imbalanceSideCode : Maybe String
    , imbalanceSideText : Maybe String
    , isImbalanceSideBuy : Maybe Bool
    , isImbalanceSideSell : Maybe Bool
    , isImbalanceSideNone : Maybe Bool
    , extensionNumber : Maybe Int
    , scheduledAuctionTimeSeconds : Maybe Int
    , scheduledAuctionTime : Maybe Posix
    , auctionBookClearingPrice : Maybe Float
    , collarReferencePrice : Maybe Float
    , lowerAuctionCollar : Maybe Float
    , upperAuctionCollar : Maybe Float
    }


{-| Represents the response DTO for official price information
-}
type alias AdminOfficialPriceModel =
    { symbol : Maybe String
    , timestampNanos : Maybe Int
    , timestamp : Maybe Posix
    , priceType : Maybe Int
    , priceTypeCode : Maybe String
    , priceTypeText : Maybe String
    , isPriceTypeOpening : Maybe Bool
    , isPriceTypeClosing : Maybe Bool
    , officialPrice : Maybe Float
    }


{-| Represents the response DTO for operational halt status information
-}
type alias AdminOperationalHaltStatusModel =
    { symbol : Maybe String
    , timestampNanos : Maybe Int
    , timestamp : Maybe Posix
    , operationalHaltStatus : Maybe Int
    , operationalHaltStatusCode : Maybe String
    , operationalHaltStatusText : Maybe String
    , isOperationallyHalted : Maybe Bool
    , isNotOperationallyHalted : Maybe Bool
    }


{-| Represents the response DTO for retail liquidity indicator information
-}
type alias AdminRetailLiquidityIndicatorModel =
    { symbol : Maybe String
    , timestampNanos : Maybe Int
    , timestamp : Maybe Posix
    , retailLiquidityIndicator : Maybe Int
    , retailLiquidityIndicatorCode : Maybe String
    , retailLiquidityIndicatorText : Maybe String
    , isRetailIndicatorNotApplicable : Maybe Bool
    , isRetailIndicatorBuyInterest : Maybe Bool
    , isRetailIndicatorSellInterest : Maybe Bool
    , isRetailIndicatorBuyAndSellInterest : Maybe Bool
    }


{-| Represents the response DTO for security directory information
-}
type alias AdminSecurityDirectoryModel =
    { symbol : Maybe String
    , timestampNanos : Maybe Int
    , timestamp : Maybe Posix
    , flags : Maybe Int
    , roundLotSize : Maybe Int
    , adjustedPocPrice : Maybe Float
    , luldTier : Maybe Int
    , luldTierCode : Maybe String
    , luldTierText : Maybe String
    , isLuldTierNotApplicable : Maybe Bool
    , isLuldTier1 : Maybe Bool
    , isLuldTier2 : Maybe Bool
    }


{-| Represents the response DTO for security event information
-}
type alias AdminSecurityEventModel =
    { symbol : Maybe String
    , timestampNanos : Maybe Int
    , timestamp : Maybe Posix
    , securityEvent : Maybe Int
    , securityEventCode : Maybe String
    , securityEventText : Maybe String
    , isOpeningProcessComplete : Maybe Bool
    , isClosingProcessComplete : Maybe Bool
    }


{-| Represents the response DTO for short sale price test status information
-}
type alias AdminShortSalePriceTestStatusModel =
    { symbol : Maybe String
    , timestampNanos : Maybe Int
    , timestamp : Maybe Posix
    , shortSalePriceTestStatus : Maybe Int
    , shortSalePriceTestStatusCode : Maybe String
    , shortSalePriceTestStatusText : Maybe String
    , isShortSalePriceTestNotInEffect : Maybe Bool
    , isShortSalePriceTestInEffect : Maybe Bool
    , detail : Maybe Int
    , detailCode : Maybe String
    , detailText : Maybe String
    , isDetailNoPriceTest : Maybe Bool
    , isDetailActivated : Maybe Bool
    , isDetailContinued : Maybe Bool
    , isDetailDeactivated : Maybe Bool
    , isDetailNotAvailable : Maybe Bool
    }


{-| Represents the response DTO for system event information
-}
type alias AdminSystemEventModel =
    { timestampNanos : Maybe Int
    , timestamp : Maybe Posix
    , systemEvent : Maybe Int
    , systemEventCode : Maybe String
    , systemEventText : Maybe String
    , isSystemEventStartOfMessages : Maybe Bool
    , isSystemEventStartOfSystemHours : Maybe Bool
    , isSystemEventStartOfRegularMarketHours : Maybe Bool
    , isSystemEventEndOfRegularMarketHours : Maybe Bool
    , isSystemEventEndOfSystemHours : Maybe Bool
    , isSystemEventEndOfMessages : Maybe Bool
    }


{-| Represents the response DTO for trading status information
-}
type alias AdminTradingStatusModel =
    { symbol : Maybe String
    , timestampNanos : Maybe Int
    , timestamp : Maybe Posix
    , isTradingLive : Maybe Bool
    , isTradingHalted : Maybe Bool
    , isTradingInOrderAcceptancePeriod : Maybe Bool
    , isTradingPaused : Maybe Bool
    , isReasonHaltNewsPending : Maybe Bool
    , isReasonIpoNotYetTrading : Maybe Bool
    , isReasonIpoDeferred : Maybe Bool
    , isReasonHaltNewsDissemination : Maybe Bool
    , isReasonIpoOrderAcceptancePeriod : Maybe Bool
    , isReasonIpoPreLaunchPeriod : Maybe Bool
    , isReasonMarketWideCircuitBreakerLevel1 : Maybe Bool
    , isReasonMarketWideCircuitBreakerLevel2 : Maybe Bool
    , isReasonMarketWideCircuitBreakerLevel3 : Maybe Bool
    , isReasonNotApplicable : Maybe Bool
    , isReasonNotAvailable : Maybe Bool
    }


type alias FinFeedAPIExchangeModel =
    { exchangeId : Maybe String
    , lastDatapointDate : Maybe String
    , mic : Maybe String
    , operatingMic : Maybe String
    , oprtSgmt : Maybe String
    , marketNameInstitutionDescription : Maybe String
    , legalEntityName : Maybe String
    , lei : Maybe String
    , marketCategoryCode : Maybe String
    , acronym : Maybe String
    , isoCountryCode : Maybe String
    , city : Maybe String
    , website : Maybe String
    , status : Maybe String
    , creationDate : Maybe Posix
    , lastUpdateDate : Maybe Posix
    , lastValidationDate : Maybe Posix
    , expiryDate : Maybe Posix
    , comments : Maybe String
    }


type alias FinFeedAPISymbolModel =
    { symbolId : Maybe String
    , exchangeId : Maybe String
    , securityCategory : Maybe String
    , name : Maybe String
    , date : Maybe String
    , assetClass : Maybe String
    , cfiCode : Maybe String
    , cfiCategory : Maybe String
    , cfiGroup : Maybe String
    , cfiAttribute1 : Maybe String
    , cfiAttribute2 : Maybe String
    , cfiAttribute3 : Maybe String
    , cfiAttribute4 : Maybe String
    , cfiCategoryDesc : Maybe String
    , cfiGroupDesc : Maybe String
    }


{-| Represents the response DTO for quote update information
-}
type alias Level1QuoteUpdateModel =
    { symbol : Maybe String
    , timestampNanos : Maybe Int
    , timestamp : Maybe Posix
    , isSymbolAvailable : Maybe Bool
    , isPrePostMarketSession : Maybe Bool
    , askSize : Maybe Int
    , askPrice : Maybe Float
    , bidPrice : Maybe Float
    , bidSize : Maybe Int
    }


{-| Represents the response DTO for price level update information
-}
type alias Level2PriceLevelUpdateModel =
    { symbol : Maybe String
    , timestampNanos : Maybe Int
    , timestamp : Maybe Posix
    , isSideBuy : Maybe Bool
    , isEventProcessingComplete : Maybe Bool
    , size : Maybe Int
    , price : Maybe Float
    }


{-| Represents the response DTO for add order information
-}
type alias Level3AddOrderModel =
    { symbol : Maybe String
    , timestampNanos : Maybe Int
    , timestamp : Maybe Posix
    , isSideBuy : Maybe Bool
    , size : Maybe Int
    , price : Maybe Float
    , orderId : Maybe Int
    }


{-| Represents the response DTO for clear book information
-}
type alias Level3ClearBookModel =
    { symbol : Maybe String
    , timestampNanos : Maybe Int
    , timestamp : Maybe Posix
    }


{-| Represents the response DTO for order delete information
-}
type alias Level3DeleteOrderModel =
    { symbol : Maybe String
    , timestampNanos : Maybe Int
    , timestamp : Maybe Posix
    , orderIdReference : Maybe Int
    }


{-| Represents the response DTO for order executed information
-}
type alias Level3ExecutedOrderModel =
    { symbol : Maybe String
    , timestampNanos : Maybe Int
    , timestamp : Maybe Posix
    , orderIdReference : Maybe Int
    , saleConditionFlags : Maybe Int
    , isIntermarketSweep : Maybe Bool
    , isExtendedHoursTrade : Maybe Bool
    , isOddLotTrade : Maybe Bool
    , isTradeThroughExempt : Maybe Bool
    , isSinglePriceCrossTrade : Maybe Bool
    , size : Maybe Int
    , price : Maybe Float
    , tradeId : Maybe Int
    }


{-| Represents the response DTO for order modify information
-}
type alias Level3ModifyOrderModel =
    { symbol : Maybe String
    , timestampNanos : Maybe Int
    , timestamp : Maybe Posix
    , orderIdReference : Maybe Int
    , isPriorityReset : Maybe Bool
    , size : Maybe Int
    , price : Maybe Float
    }


{-| Represents the response DTO for Level-3 order book information
-}
type alias Level3OrderBookModel =
    { addOrder : Maybe Level3AddOrderModel
    , deleteOrder : Maybe Level3DeleteOrderModel
    , modifyOrder : Maybe Level3ModifyOrderModel
    , executedOrder : Maybe Level3ExecutedOrderModel
    , clearBook : Maybe Level3ClearBookModel
    }


{-| Represents a timeseries item with price and volume information.
-}
type alias OHLCVExchangeTimeseriesItem =
    { timePeriodStart : Maybe Posix
    , timePeriodEnd : Maybe Posix
    , timeOpen : Maybe Posix
    , timeClose : Maybe Posix
    , priceOpen : Maybe Float
    , priceHigh : Maybe Float
    , priceLow : Maybe Float
    , priceClose : Maybe Float
    , volumeTraded : Maybe Float
    , tradesCount : Maybe Int
    , symbolIdExchange : Maybe String
    }


{-| Represents a timeseries item with price and volume information.
-}
type alias OHLCVTimeseriesItem =
    { timePeriodStart : Maybe Posix
    , timePeriodEnd : Maybe Posix
    , timeOpen : Maybe Posix
    , timeClose : Maybe Posix
    , priceOpen : Maybe Float
    , priceHigh : Maybe Float
    , priceLow : Maybe Float
    , priceClose : Maybe Float
    , volumeTraded : Maybe Float
    , tradesCount : Maybe Int
    }


{-| Represents a timeseries period used in exchange rate data.
-}
type alias OHLCVTimeseriesPeriod =
    { periodId : Maybe String
    , lengthSeconds : Maybe Int
    , lengthMonths : Maybe Int
    , unitCount : Maybe Int
    , unitName : Maybe String
    , displayName : Maybe String
    }


{-| Represents the response DTO for a single trade event (report or break).
-}
type alias TradeTradeModel =
    { isTradeBreak : Maybe Bool
    , symbol : Maybe String
    , timestampNanos : Maybe Int
    , timestamp : Maybe Posix
    , size : Maybe Int
    , price : Maybe Float
    , tradeId : Maybe Int
    , isIntermarketSweep : Maybe Bool
    , isExtendedHoursTrade : Maybe Bool
    , isOddLotTrade : Maybe Bool
    , isTradeThroughExempt : Maybe Bool
    , isSinglePriceCrossTrade : Maybe Bool
    }


-- ENCODER


encodeAdminAdminMessageModel : AdminAdminMessageModel -> Json.Encode.Value
encodeAdminAdminMessageModel =
    encodeObject << encodeAdminAdminMessageModelPairs


encodeAdminAdminMessageModelWithTag : ( String, String ) -> AdminAdminMessageModel -> Json.Encode.Value
encodeAdminAdminMessageModelWithTag (tagField, tag) model =
    encodeObject (encodeAdminAdminMessageModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAdminAdminMessageModelPairs : AdminAdminMessageModel -> List EncodedField
encodeAdminAdminMessageModelPairs model =
    let
        pairs =
            [ maybeEncode "trading_status" encodeAdminTradingStatusModel model.tradingStatus
            , maybeEncode "official_price" encodeAdminOfficialPriceModel model.officialPrice
            , maybeEncode "security_event" encodeAdminSecurityEventModel model.securityEvent
            , maybeEncode "auction_information" encodeAdminAuctionInformationModel model.auctionInformation
            , maybeEncode "short_sale_price_test" encodeAdminShortSalePriceTestStatusModel model.shortSalePriceTest
            , maybeEncode "operational_halt_status" encodeAdminOperationalHaltStatusModel model.operationalHaltStatus
            , maybeEncode "retail_liquidity_indicator" encodeAdminRetailLiquidityIndicatorModel model.retailLiquidityIndicator
            , maybeEncode "system_event" encodeAdminSystemEventModel model.systemEvent
            , maybeEncode "security_directory" encodeAdminSecurityDirectoryModel model.securityDirectory
            ]
    in
    pairs


encodeAdminAuctionInformationModel : AdminAuctionInformationModel -> Json.Encode.Value
encodeAdminAuctionInformationModel =
    encodeObject << encodeAdminAuctionInformationModelPairs


encodeAdminAuctionInformationModelWithTag : ( String, String ) -> AdminAuctionInformationModel -> Json.Encode.Value
encodeAdminAuctionInformationModelWithTag (tagField, tag) model =
    encodeObject (encodeAdminAuctionInformationModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAdminAuctionInformationModelPairs : AdminAuctionInformationModel -> List EncodedField
encodeAdminAuctionInformationModelPairs model =
    let
        pairs =
            [ maybeEncodeNullable "symbol" Json.Encode.string model.symbol
            , maybeEncode "timestamp_nanos" Json.Encode.int model.timestampNanos
            , maybeEncode "timestamp" Api.Time.encodeDateTime model.timestamp
            , maybeEncode "auction_type" Json.Encode.int model.auctionType
            , maybeEncodeNullable "auction_type_code" Json.Encode.string model.auctionTypeCode
            , maybeEncodeNullable "auction_type_text" Json.Encode.string model.auctionTypeText
            , maybeEncode "is_auction_type_opening" Json.Encode.bool model.isAuctionTypeOpening
            , maybeEncode "is_auction_type_closing" Json.Encode.bool model.isAuctionTypeClosing
            , maybeEncode "is_auction_type_ipo" Json.Encode.bool model.isAuctionTypeIpo
            , maybeEncode "is_auction_type_halt" Json.Encode.bool model.isAuctionTypeHalt
            , maybeEncode "is_auction_type_volatility" Json.Encode.bool model.isAuctionTypeVolatility
            , maybeEncode "paired_shares" Json.Encode.int model.pairedShares
            , maybeEncode "reference_price" Json.Encode.float model.referencePrice
            , maybeEncode "indicative_clearing_price" Json.Encode.float model.indicativeClearingPrice
            , maybeEncode "imbalance_shares" Json.Encode.int model.imbalanceShares
            , maybeEncode "imbalance_side" Json.Encode.int model.imbalanceSide
            , maybeEncodeNullable "imbalance_side_code" Json.Encode.string model.imbalanceSideCode
            , maybeEncodeNullable "imbalance_side_text" Json.Encode.string model.imbalanceSideText
            , maybeEncode "is_imbalance_side_buy" Json.Encode.bool model.isImbalanceSideBuy
            , maybeEncode "is_imbalance_side_sell" Json.Encode.bool model.isImbalanceSideSell
            , maybeEncode "is_imbalance_side_none" Json.Encode.bool model.isImbalanceSideNone
            , maybeEncode "extension_number" Json.Encode.int model.extensionNumber
            , maybeEncode "scheduled_auction_time_seconds" Json.Encode.int model.scheduledAuctionTimeSeconds
            , maybeEncode "scheduled_auction_time" Api.Time.encodeDateTime model.scheduledAuctionTime
            , maybeEncode "auction_book_clearing_price" Json.Encode.float model.auctionBookClearingPrice
            , maybeEncode "collar_reference_price" Json.Encode.float model.collarReferencePrice
            , maybeEncode "lower_auction_collar" Json.Encode.float model.lowerAuctionCollar
            , maybeEncode "upper_auction_collar" Json.Encode.float model.upperAuctionCollar
            ]
    in
    pairs


encodeAdminOfficialPriceModel : AdminOfficialPriceModel -> Json.Encode.Value
encodeAdminOfficialPriceModel =
    encodeObject << encodeAdminOfficialPriceModelPairs


encodeAdminOfficialPriceModelWithTag : ( String, String ) -> AdminOfficialPriceModel -> Json.Encode.Value
encodeAdminOfficialPriceModelWithTag (tagField, tag) model =
    encodeObject (encodeAdminOfficialPriceModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAdminOfficialPriceModelPairs : AdminOfficialPriceModel -> List EncodedField
encodeAdminOfficialPriceModelPairs model =
    let
        pairs =
            [ maybeEncodeNullable "symbol" Json.Encode.string model.symbol
            , maybeEncode "timestamp_nanos" Json.Encode.int model.timestampNanos
            , maybeEncode "timestamp" Api.Time.encodeDateTime model.timestamp
            , maybeEncode "price_type" Json.Encode.int model.priceType
            , maybeEncodeNullable "price_type_code" Json.Encode.string model.priceTypeCode
            , maybeEncodeNullable "price_type_text" Json.Encode.string model.priceTypeText
            , maybeEncode "is_price_type_opening" Json.Encode.bool model.isPriceTypeOpening
            , maybeEncode "is_price_type_closing" Json.Encode.bool model.isPriceTypeClosing
            , maybeEncode "official_price" Json.Encode.float model.officialPrice
            ]
    in
    pairs


encodeAdminOperationalHaltStatusModel : AdminOperationalHaltStatusModel -> Json.Encode.Value
encodeAdminOperationalHaltStatusModel =
    encodeObject << encodeAdminOperationalHaltStatusModelPairs


encodeAdminOperationalHaltStatusModelWithTag : ( String, String ) -> AdminOperationalHaltStatusModel -> Json.Encode.Value
encodeAdminOperationalHaltStatusModelWithTag (tagField, tag) model =
    encodeObject (encodeAdminOperationalHaltStatusModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAdminOperationalHaltStatusModelPairs : AdminOperationalHaltStatusModel -> List EncodedField
encodeAdminOperationalHaltStatusModelPairs model =
    let
        pairs =
            [ maybeEncodeNullable "symbol" Json.Encode.string model.symbol
            , maybeEncode "timestamp_nanos" Json.Encode.int model.timestampNanos
            , maybeEncode "timestamp" Api.Time.encodeDateTime model.timestamp
            , maybeEncode "operational_halt_status" Json.Encode.int model.operationalHaltStatus
            , maybeEncodeNullable "operational_halt_status_code" Json.Encode.string model.operationalHaltStatusCode
            , maybeEncodeNullable "operational_halt_status_text" Json.Encode.string model.operationalHaltStatusText
            , maybeEncode "is_operationally_halted" Json.Encode.bool model.isOperationallyHalted
            , maybeEncode "is_not_operationally_halted" Json.Encode.bool model.isNotOperationallyHalted
            ]
    in
    pairs


encodeAdminRetailLiquidityIndicatorModel : AdminRetailLiquidityIndicatorModel -> Json.Encode.Value
encodeAdminRetailLiquidityIndicatorModel =
    encodeObject << encodeAdminRetailLiquidityIndicatorModelPairs


encodeAdminRetailLiquidityIndicatorModelWithTag : ( String, String ) -> AdminRetailLiquidityIndicatorModel -> Json.Encode.Value
encodeAdminRetailLiquidityIndicatorModelWithTag (tagField, tag) model =
    encodeObject (encodeAdminRetailLiquidityIndicatorModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAdminRetailLiquidityIndicatorModelPairs : AdminRetailLiquidityIndicatorModel -> List EncodedField
encodeAdminRetailLiquidityIndicatorModelPairs model =
    let
        pairs =
            [ maybeEncodeNullable "symbol" Json.Encode.string model.symbol
            , maybeEncode "timestamp_nanos" Json.Encode.int model.timestampNanos
            , maybeEncode "timestamp" Api.Time.encodeDateTime model.timestamp
            , maybeEncode "retail_liquidity_indicator" Json.Encode.int model.retailLiquidityIndicator
            , maybeEncodeNullable "retail_liquidity_indicator_code" Json.Encode.string model.retailLiquidityIndicatorCode
            , maybeEncodeNullable "retail_liquidity_indicator_text" Json.Encode.string model.retailLiquidityIndicatorText
            , maybeEncode "is_retail_indicator_not_applicable" Json.Encode.bool model.isRetailIndicatorNotApplicable
            , maybeEncode "is_retail_indicator_buy_interest" Json.Encode.bool model.isRetailIndicatorBuyInterest
            , maybeEncode "is_retail_indicator_sell_interest" Json.Encode.bool model.isRetailIndicatorSellInterest
            , maybeEncode "is_retail_indicator_buy_and_sell_interest" Json.Encode.bool model.isRetailIndicatorBuyAndSellInterest
            ]
    in
    pairs


encodeAdminSecurityDirectoryModel : AdminSecurityDirectoryModel -> Json.Encode.Value
encodeAdminSecurityDirectoryModel =
    encodeObject << encodeAdminSecurityDirectoryModelPairs


encodeAdminSecurityDirectoryModelWithTag : ( String, String ) -> AdminSecurityDirectoryModel -> Json.Encode.Value
encodeAdminSecurityDirectoryModelWithTag (tagField, tag) model =
    encodeObject (encodeAdminSecurityDirectoryModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAdminSecurityDirectoryModelPairs : AdminSecurityDirectoryModel -> List EncodedField
encodeAdminSecurityDirectoryModelPairs model =
    let
        pairs =
            [ maybeEncodeNullable "symbol" Json.Encode.string model.symbol
            , maybeEncode "timestamp_nanos" Json.Encode.int model.timestampNanos
            , maybeEncode "timestamp" Api.Time.encodeDateTime model.timestamp
            , maybeEncode "flags" Json.Encode.int model.flags
            , maybeEncode "round_lot_size" Json.Encode.int model.roundLotSize
            , maybeEncode "adjusted_poc_price" Json.Encode.float model.adjustedPocPrice
            , maybeEncode "luld_tier" Json.Encode.int model.luldTier
            , maybeEncodeNullable "luld_tier_code" Json.Encode.string model.luldTierCode
            , maybeEncodeNullable "luld_tier_text" Json.Encode.string model.luldTierText
            , maybeEncode "is_luld_tier_not_applicable" Json.Encode.bool model.isLuldTierNotApplicable
            , maybeEncode "is_luld_tier1" Json.Encode.bool model.isLuldTier1
            , maybeEncode "is_luld_tier2" Json.Encode.bool model.isLuldTier2
            ]
    in
    pairs


encodeAdminSecurityEventModel : AdminSecurityEventModel -> Json.Encode.Value
encodeAdminSecurityEventModel =
    encodeObject << encodeAdminSecurityEventModelPairs


encodeAdminSecurityEventModelWithTag : ( String, String ) -> AdminSecurityEventModel -> Json.Encode.Value
encodeAdminSecurityEventModelWithTag (tagField, tag) model =
    encodeObject (encodeAdminSecurityEventModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAdminSecurityEventModelPairs : AdminSecurityEventModel -> List EncodedField
encodeAdminSecurityEventModelPairs model =
    let
        pairs =
            [ maybeEncodeNullable "symbol" Json.Encode.string model.symbol
            , maybeEncode "timestamp_nanos" Json.Encode.int model.timestampNanos
            , maybeEncode "timestamp" Api.Time.encodeDateTime model.timestamp
            , maybeEncode "security_event" Json.Encode.int model.securityEvent
            , maybeEncodeNullable "security_event_code" Json.Encode.string model.securityEventCode
            , maybeEncodeNullable "security_event_text" Json.Encode.string model.securityEventText
            , maybeEncode "is_opening_process_complete" Json.Encode.bool model.isOpeningProcessComplete
            , maybeEncode "is_closing_process_complete" Json.Encode.bool model.isClosingProcessComplete
            ]
    in
    pairs


encodeAdminShortSalePriceTestStatusModel : AdminShortSalePriceTestStatusModel -> Json.Encode.Value
encodeAdminShortSalePriceTestStatusModel =
    encodeObject << encodeAdminShortSalePriceTestStatusModelPairs


encodeAdminShortSalePriceTestStatusModelWithTag : ( String, String ) -> AdminShortSalePriceTestStatusModel -> Json.Encode.Value
encodeAdminShortSalePriceTestStatusModelWithTag (tagField, tag) model =
    encodeObject (encodeAdminShortSalePriceTestStatusModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAdminShortSalePriceTestStatusModelPairs : AdminShortSalePriceTestStatusModel -> List EncodedField
encodeAdminShortSalePriceTestStatusModelPairs model =
    let
        pairs =
            [ maybeEncodeNullable "symbol" Json.Encode.string model.symbol
            , maybeEncode "timestamp_nanos" Json.Encode.int model.timestampNanos
            , maybeEncode "timestamp" Api.Time.encodeDateTime model.timestamp
            , maybeEncode "short_sale_price_test_status" Json.Encode.int model.shortSalePriceTestStatus
            , maybeEncodeNullable "short_sale_price_test_status_code" Json.Encode.string model.shortSalePriceTestStatusCode
            , maybeEncodeNullable "short_sale_price_test_status_text" Json.Encode.string model.shortSalePriceTestStatusText
            , maybeEncode "is_short_sale_price_test_not_in_effect" Json.Encode.bool model.isShortSalePriceTestNotInEffect
            , maybeEncode "is_short_sale_price_test_in_effect" Json.Encode.bool model.isShortSalePriceTestInEffect
            , maybeEncode "detail" Json.Encode.int model.detail
            , maybeEncodeNullable "detail_code" Json.Encode.string model.detailCode
            , maybeEncodeNullable "detail_text" Json.Encode.string model.detailText
            , maybeEncode "is_detail_no_price_test" Json.Encode.bool model.isDetailNoPriceTest
            , maybeEncode "is_detail_activated" Json.Encode.bool model.isDetailActivated
            , maybeEncode "is_detail_continued" Json.Encode.bool model.isDetailContinued
            , maybeEncode "is_detail_deactivated" Json.Encode.bool model.isDetailDeactivated
            , maybeEncode "is_detail_not_available" Json.Encode.bool model.isDetailNotAvailable
            ]
    in
    pairs


encodeAdminSystemEventModel : AdminSystemEventModel -> Json.Encode.Value
encodeAdminSystemEventModel =
    encodeObject << encodeAdminSystemEventModelPairs


encodeAdminSystemEventModelWithTag : ( String, String ) -> AdminSystemEventModel -> Json.Encode.Value
encodeAdminSystemEventModelWithTag (tagField, tag) model =
    encodeObject (encodeAdminSystemEventModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAdminSystemEventModelPairs : AdminSystemEventModel -> List EncodedField
encodeAdminSystemEventModelPairs model =
    let
        pairs =
            [ maybeEncode "timestamp_nanos" Json.Encode.int model.timestampNanos
            , maybeEncode "timestamp" Api.Time.encodeDateTime model.timestamp
            , maybeEncode "system_event" Json.Encode.int model.systemEvent
            , maybeEncodeNullable "system_event_code" Json.Encode.string model.systemEventCode
            , maybeEncodeNullable "system_event_text" Json.Encode.string model.systemEventText
            , maybeEncode "is_system_event_start_of_messages" Json.Encode.bool model.isSystemEventStartOfMessages
            , maybeEncode "is_system_event_start_of_system_hours" Json.Encode.bool model.isSystemEventStartOfSystemHours
            , maybeEncode "is_system_event_start_of_regular_market_hours" Json.Encode.bool model.isSystemEventStartOfRegularMarketHours
            , maybeEncode "is_system_event_end_of_regular_market_hours" Json.Encode.bool model.isSystemEventEndOfRegularMarketHours
            , maybeEncode "is_system_event_end_of_system_hours" Json.Encode.bool model.isSystemEventEndOfSystemHours
            , maybeEncode "is_system_event_end_of_messages" Json.Encode.bool model.isSystemEventEndOfMessages
            ]
    in
    pairs


encodeAdminTradingStatusModel : AdminTradingStatusModel -> Json.Encode.Value
encodeAdminTradingStatusModel =
    encodeObject << encodeAdminTradingStatusModelPairs


encodeAdminTradingStatusModelWithTag : ( String, String ) -> AdminTradingStatusModel -> Json.Encode.Value
encodeAdminTradingStatusModelWithTag (tagField, tag) model =
    encodeObject (encodeAdminTradingStatusModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAdminTradingStatusModelPairs : AdminTradingStatusModel -> List EncodedField
encodeAdminTradingStatusModelPairs model =
    let
        pairs =
            [ maybeEncodeNullable "symbol" Json.Encode.string model.symbol
            , maybeEncode "timestamp_nanos" Json.Encode.int model.timestampNanos
            , maybeEncode "timestamp" Api.Time.encodeDateTime model.timestamp
            , maybeEncode "is_trading_live" Json.Encode.bool model.isTradingLive
            , maybeEncode "is_trading_halted" Json.Encode.bool model.isTradingHalted
            , maybeEncode "is_trading_in_order_acceptance_period" Json.Encode.bool model.isTradingInOrderAcceptancePeriod
            , maybeEncode "is_trading_paused" Json.Encode.bool model.isTradingPaused
            , maybeEncode "is_reason_halt_news_pending" Json.Encode.bool model.isReasonHaltNewsPending
            , maybeEncode "is_reason_ipo_not_yet_trading" Json.Encode.bool model.isReasonIpoNotYetTrading
            , maybeEncode "is_reason_ipo_deferred" Json.Encode.bool model.isReasonIpoDeferred
            , maybeEncode "is_reason_halt_news_dissemination" Json.Encode.bool model.isReasonHaltNewsDissemination
            , maybeEncode "is_reason_ipo_order_acceptance_period" Json.Encode.bool model.isReasonIpoOrderAcceptancePeriod
            , maybeEncode "is_reason_ipo_pre_launch_period" Json.Encode.bool model.isReasonIpoPreLaunchPeriod
            , maybeEncode "is_reason_market_wide_circuit_breaker_level1" Json.Encode.bool model.isReasonMarketWideCircuitBreakerLevel1
            , maybeEncode "is_reason_market_wide_circuit_breaker_level2" Json.Encode.bool model.isReasonMarketWideCircuitBreakerLevel2
            , maybeEncode "is_reason_market_wide_circuit_breaker_level3" Json.Encode.bool model.isReasonMarketWideCircuitBreakerLevel3
            , maybeEncode "is_reason_not_applicable" Json.Encode.bool model.isReasonNotApplicable
            , maybeEncode "is_reason_not_available" Json.Encode.bool model.isReasonNotAvailable
            ]
    in
    pairs


encodeFinFeedAPIExchangeModel : FinFeedAPIExchangeModel -> Json.Encode.Value
encodeFinFeedAPIExchangeModel =
    encodeObject << encodeFinFeedAPIExchangeModelPairs


encodeFinFeedAPIExchangeModelWithTag : ( String, String ) -> FinFeedAPIExchangeModel -> Json.Encode.Value
encodeFinFeedAPIExchangeModelWithTag (tagField, tag) model =
    encodeObject (encodeFinFeedAPIExchangeModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFinFeedAPIExchangeModelPairs : FinFeedAPIExchangeModel -> List EncodedField
encodeFinFeedAPIExchangeModelPairs model =
    let
        pairs =
            [ maybeEncodeNullable "exchange_id" Json.Encode.string model.exchangeId
            , maybeEncodeNullable "last_datapoint_date" Json.Encode.string model.lastDatapointDate
            , maybeEncodeNullable "mic" Json.Encode.string model.mic
            , maybeEncodeNullable "operating_mic" Json.Encode.string model.operatingMic
            , maybeEncodeNullable "oprt_sgmt" Json.Encode.string model.oprtSgmt
            , maybeEncodeNullable "market_name_institution_description" Json.Encode.string model.marketNameInstitutionDescription
            , maybeEncodeNullable "legal_entity_name" Json.Encode.string model.legalEntityName
            , maybeEncodeNullable "lei" Json.Encode.string model.lei
            , maybeEncodeNullable "market_category_code" Json.Encode.string model.marketCategoryCode
            , maybeEncodeNullable "acronym" Json.Encode.string model.acronym
            , maybeEncodeNullable "iso_country_code" Json.Encode.string model.isoCountryCode
            , maybeEncodeNullable "city" Json.Encode.string model.city
            , maybeEncodeNullable "website" Json.Encode.string model.website
            , maybeEncodeNullable "status" Json.Encode.string model.status
            , maybeEncodeNullable "creation_date" Api.Time.encodeDateTime model.creationDate
            , maybeEncodeNullable "last_update_date" Api.Time.encodeDateTime model.lastUpdateDate
            , maybeEncodeNullable "last_validation_date" Api.Time.encodeDateTime model.lastValidationDate
            , maybeEncodeNullable "expiry_date" Api.Time.encodeDateTime model.expiryDate
            , maybeEncodeNullable "comments" Json.Encode.string model.comments
            ]
    in
    pairs


encodeFinFeedAPISymbolModel : FinFeedAPISymbolModel -> Json.Encode.Value
encodeFinFeedAPISymbolModel =
    encodeObject << encodeFinFeedAPISymbolModelPairs


encodeFinFeedAPISymbolModelWithTag : ( String, String ) -> FinFeedAPISymbolModel -> Json.Encode.Value
encodeFinFeedAPISymbolModelWithTag (tagField, tag) model =
    encodeObject (encodeFinFeedAPISymbolModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFinFeedAPISymbolModelPairs : FinFeedAPISymbolModel -> List EncodedField
encodeFinFeedAPISymbolModelPairs model =
    let
        pairs =
            [ maybeEncodeNullable "symbol_id" Json.Encode.string model.symbolId
            , maybeEncodeNullable "exchange_id" Json.Encode.string model.exchangeId
            , maybeEncodeNullable "security_category" Json.Encode.string model.securityCategory
            , maybeEncodeNullable "name" Json.Encode.string model.name
            , maybeEncodeNullable "date" Json.Encode.string model.date
            , maybeEncodeNullable "asset_class" Json.Encode.string model.assetClass
            , maybeEncodeNullable "cfi_code" Json.Encode.string model.cfiCode
            , maybeEncodeNullable "cfi_category" Json.Encode.string model.cfiCategory
            , maybeEncodeNullable "cfi_group" Json.Encode.string model.cfiGroup
            , maybeEncodeNullable "cfi_attribute1" Json.Encode.string model.cfiAttribute1
            , maybeEncodeNullable "cfi_attribute2" Json.Encode.string model.cfiAttribute2
            , maybeEncodeNullable "cfi_attribute3" Json.Encode.string model.cfiAttribute3
            , maybeEncodeNullable "cfi_attribute4" Json.Encode.string model.cfiAttribute4
            , maybeEncodeNullable "cfi_category_desc" Json.Encode.string model.cfiCategoryDesc
            , maybeEncodeNullable "cfi_group_desc" Json.Encode.string model.cfiGroupDesc
            ]
    in
    pairs


encodeLevel1QuoteUpdateModel : Level1QuoteUpdateModel -> Json.Encode.Value
encodeLevel1QuoteUpdateModel =
    encodeObject << encodeLevel1QuoteUpdateModelPairs


encodeLevel1QuoteUpdateModelWithTag : ( String, String ) -> Level1QuoteUpdateModel -> Json.Encode.Value
encodeLevel1QuoteUpdateModelWithTag (tagField, tag) model =
    encodeObject (encodeLevel1QuoteUpdateModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLevel1QuoteUpdateModelPairs : Level1QuoteUpdateModel -> List EncodedField
encodeLevel1QuoteUpdateModelPairs model =
    let
        pairs =
            [ maybeEncodeNullable "symbol" Json.Encode.string model.symbol
            , maybeEncode "timestamp_nanos" Json.Encode.int model.timestampNanos
            , maybeEncode "timestamp" Api.Time.encodeDateTime model.timestamp
            , maybeEncode "is_symbol_available" Json.Encode.bool model.isSymbolAvailable
            , maybeEncode "is_pre_post_market_session" Json.Encode.bool model.isPrePostMarketSession
            , maybeEncode "ask_size" Json.Encode.int model.askSize
            , maybeEncode "ask_price" Json.Encode.float model.askPrice
            , maybeEncode "bid_price" Json.Encode.float model.bidPrice
            , maybeEncode "bid_size" Json.Encode.int model.bidSize
            ]
    in
    pairs


encodeLevel2PriceLevelUpdateModel : Level2PriceLevelUpdateModel -> Json.Encode.Value
encodeLevel2PriceLevelUpdateModel =
    encodeObject << encodeLevel2PriceLevelUpdateModelPairs


encodeLevel2PriceLevelUpdateModelWithTag : ( String, String ) -> Level2PriceLevelUpdateModel -> Json.Encode.Value
encodeLevel2PriceLevelUpdateModelWithTag (tagField, tag) model =
    encodeObject (encodeLevel2PriceLevelUpdateModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLevel2PriceLevelUpdateModelPairs : Level2PriceLevelUpdateModel -> List EncodedField
encodeLevel2PriceLevelUpdateModelPairs model =
    let
        pairs =
            [ maybeEncodeNullable "symbol" Json.Encode.string model.symbol
            , maybeEncode "timestamp_nanos" Json.Encode.int model.timestampNanos
            , maybeEncode "timestamp" Api.Time.encodeDateTime model.timestamp
            , maybeEncode "is_side_buy" Json.Encode.bool model.isSideBuy
            , maybeEncode "is_event_processing_complete" Json.Encode.bool model.isEventProcessingComplete
            , maybeEncode "size" Json.Encode.int model.size
            , maybeEncode "price" Json.Encode.float model.price
            ]
    in
    pairs


encodeLevel3AddOrderModel : Level3AddOrderModel -> Json.Encode.Value
encodeLevel3AddOrderModel =
    encodeObject << encodeLevel3AddOrderModelPairs


encodeLevel3AddOrderModelWithTag : ( String, String ) -> Level3AddOrderModel -> Json.Encode.Value
encodeLevel3AddOrderModelWithTag (tagField, tag) model =
    encodeObject (encodeLevel3AddOrderModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLevel3AddOrderModelPairs : Level3AddOrderModel -> List EncodedField
encodeLevel3AddOrderModelPairs model =
    let
        pairs =
            [ maybeEncodeNullable "symbol" Json.Encode.string model.symbol
            , maybeEncode "timestamp_nanos" Json.Encode.int model.timestampNanos
            , maybeEncode "timestamp" Api.Time.encodeDateTime model.timestamp
            , maybeEncode "is_side_buy" Json.Encode.bool model.isSideBuy
            , maybeEncode "size" Json.Encode.int model.size
            , maybeEncode "price" Json.Encode.float model.price
            , maybeEncode "order_id" Json.Encode.int model.orderId
            ]
    in
    pairs


encodeLevel3ClearBookModel : Level3ClearBookModel -> Json.Encode.Value
encodeLevel3ClearBookModel =
    encodeObject << encodeLevel3ClearBookModelPairs


encodeLevel3ClearBookModelWithTag : ( String, String ) -> Level3ClearBookModel -> Json.Encode.Value
encodeLevel3ClearBookModelWithTag (tagField, tag) model =
    encodeObject (encodeLevel3ClearBookModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLevel3ClearBookModelPairs : Level3ClearBookModel -> List EncodedField
encodeLevel3ClearBookModelPairs model =
    let
        pairs =
            [ maybeEncodeNullable "symbol" Json.Encode.string model.symbol
            , maybeEncode "timestamp_nanos" Json.Encode.int model.timestampNanos
            , maybeEncode "timestamp" Api.Time.encodeDateTime model.timestamp
            ]
    in
    pairs


encodeLevel3DeleteOrderModel : Level3DeleteOrderModel -> Json.Encode.Value
encodeLevel3DeleteOrderModel =
    encodeObject << encodeLevel3DeleteOrderModelPairs


encodeLevel3DeleteOrderModelWithTag : ( String, String ) -> Level3DeleteOrderModel -> Json.Encode.Value
encodeLevel3DeleteOrderModelWithTag (tagField, tag) model =
    encodeObject (encodeLevel3DeleteOrderModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLevel3DeleteOrderModelPairs : Level3DeleteOrderModel -> List EncodedField
encodeLevel3DeleteOrderModelPairs model =
    let
        pairs =
            [ maybeEncodeNullable "symbol" Json.Encode.string model.symbol
            , maybeEncode "timestamp_nanos" Json.Encode.int model.timestampNanos
            , maybeEncode "timestamp" Api.Time.encodeDateTime model.timestamp
            , maybeEncode "order_id_reference" Json.Encode.int model.orderIdReference
            ]
    in
    pairs


encodeLevel3ExecutedOrderModel : Level3ExecutedOrderModel -> Json.Encode.Value
encodeLevel3ExecutedOrderModel =
    encodeObject << encodeLevel3ExecutedOrderModelPairs


encodeLevel3ExecutedOrderModelWithTag : ( String, String ) -> Level3ExecutedOrderModel -> Json.Encode.Value
encodeLevel3ExecutedOrderModelWithTag (tagField, tag) model =
    encodeObject (encodeLevel3ExecutedOrderModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLevel3ExecutedOrderModelPairs : Level3ExecutedOrderModel -> List EncodedField
encodeLevel3ExecutedOrderModelPairs model =
    let
        pairs =
            [ maybeEncodeNullable "symbol" Json.Encode.string model.symbol
            , maybeEncode "timestamp_nanos" Json.Encode.int model.timestampNanos
            , maybeEncode "timestamp" Api.Time.encodeDateTime model.timestamp
            , maybeEncode "order_id_reference" Json.Encode.int model.orderIdReference
            , maybeEncode "sale_condition_flags" Json.Encode.int model.saleConditionFlags
            , maybeEncode "is_intermarket_sweep" Json.Encode.bool model.isIntermarketSweep
            , maybeEncode "is_extended_hours_trade" Json.Encode.bool model.isExtendedHoursTrade
            , maybeEncode "is_odd_lot_trade" Json.Encode.bool model.isOddLotTrade
            , maybeEncode "is_trade_through_exempt" Json.Encode.bool model.isTradeThroughExempt
            , maybeEncode "is_single_price_cross_trade" Json.Encode.bool model.isSinglePriceCrossTrade
            , maybeEncode "size" Json.Encode.int model.size
            , maybeEncode "price" Json.Encode.float model.price
            , maybeEncode "trade_id" Json.Encode.int model.tradeId
            ]
    in
    pairs


encodeLevel3ModifyOrderModel : Level3ModifyOrderModel -> Json.Encode.Value
encodeLevel3ModifyOrderModel =
    encodeObject << encodeLevel3ModifyOrderModelPairs


encodeLevel3ModifyOrderModelWithTag : ( String, String ) -> Level3ModifyOrderModel -> Json.Encode.Value
encodeLevel3ModifyOrderModelWithTag (tagField, tag) model =
    encodeObject (encodeLevel3ModifyOrderModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLevel3ModifyOrderModelPairs : Level3ModifyOrderModel -> List EncodedField
encodeLevel3ModifyOrderModelPairs model =
    let
        pairs =
            [ maybeEncodeNullable "symbol" Json.Encode.string model.symbol
            , maybeEncode "timestamp_nanos" Json.Encode.int model.timestampNanos
            , maybeEncode "timestamp" Api.Time.encodeDateTime model.timestamp
            , maybeEncode "order_id_reference" Json.Encode.int model.orderIdReference
            , maybeEncode "is_priority_reset" Json.Encode.bool model.isPriorityReset
            , maybeEncode "size" Json.Encode.int model.size
            , maybeEncode "price" Json.Encode.float model.price
            ]
    in
    pairs


encodeLevel3OrderBookModel : Level3OrderBookModel -> Json.Encode.Value
encodeLevel3OrderBookModel =
    encodeObject << encodeLevel3OrderBookModelPairs


encodeLevel3OrderBookModelWithTag : ( String, String ) -> Level3OrderBookModel -> Json.Encode.Value
encodeLevel3OrderBookModelWithTag (tagField, tag) model =
    encodeObject (encodeLevel3OrderBookModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLevel3OrderBookModelPairs : Level3OrderBookModel -> List EncodedField
encodeLevel3OrderBookModelPairs model =
    let
        pairs =
            [ maybeEncode "add_order" encodeLevel3AddOrderModel model.addOrder
            , maybeEncode "delete_order" encodeLevel3DeleteOrderModel model.deleteOrder
            , maybeEncode "modify_order" encodeLevel3ModifyOrderModel model.modifyOrder
            , maybeEncode "executed_order" encodeLevel3ExecutedOrderModel model.executedOrder
            , maybeEncode "clear_book" encodeLevel3ClearBookModel model.clearBook
            ]
    in
    pairs


encodeOHLCVExchangeTimeseriesItem : OHLCVExchangeTimeseriesItem -> Json.Encode.Value
encodeOHLCVExchangeTimeseriesItem =
    encodeObject << encodeOHLCVExchangeTimeseriesItemPairs


encodeOHLCVExchangeTimeseriesItemWithTag : ( String, String ) -> OHLCVExchangeTimeseriesItem -> Json.Encode.Value
encodeOHLCVExchangeTimeseriesItemWithTag (tagField, tag) model =
    encodeObject (encodeOHLCVExchangeTimeseriesItemPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOHLCVExchangeTimeseriesItemPairs : OHLCVExchangeTimeseriesItem -> List EncodedField
encodeOHLCVExchangeTimeseriesItemPairs model =
    let
        pairs =
            [ maybeEncode "time_period_start" Api.Time.encodeDateTime model.timePeriodStart
            , maybeEncode "time_period_end" Api.Time.encodeDateTime model.timePeriodEnd
            , maybeEncodeNullable "time_open" Api.Time.encodeDateTime model.timeOpen
            , maybeEncodeNullable "time_close" Api.Time.encodeDateTime model.timeClose
            , maybeEncodeNullable "price_open" Json.Encode.float model.priceOpen
            , maybeEncodeNullable "price_high" Json.Encode.float model.priceHigh
            , maybeEncodeNullable "price_low" Json.Encode.float model.priceLow
            , maybeEncodeNullable "price_close" Json.Encode.float model.priceClose
            , maybeEncode "volume_traded" Json.Encode.float model.volumeTraded
            , maybeEncode "trades_count" Json.Encode.int model.tradesCount
            , maybeEncodeNullable "symbol_id_exchange" Json.Encode.string model.symbolIdExchange
            ]
    in
    pairs


encodeOHLCVTimeseriesItem : OHLCVTimeseriesItem -> Json.Encode.Value
encodeOHLCVTimeseriesItem =
    encodeObject << encodeOHLCVTimeseriesItemPairs


encodeOHLCVTimeseriesItemWithTag : ( String, String ) -> OHLCVTimeseriesItem -> Json.Encode.Value
encodeOHLCVTimeseriesItemWithTag (tagField, tag) model =
    encodeObject (encodeOHLCVTimeseriesItemPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOHLCVTimeseriesItemPairs : OHLCVTimeseriesItem -> List EncodedField
encodeOHLCVTimeseriesItemPairs model =
    let
        pairs =
            [ maybeEncode "time_period_start" Api.Time.encodeDateTime model.timePeriodStart
            , maybeEncode "time_period_end" Api.Time.encodeDateTime model.timePeriodEnd
            , maybeEncodeNullable "time_open" Api.Time.encodeDateTime model.timeOpen
            , maybeEncodeNullable "time_close" Api.Time.encodeDateTime model.timeClose
            , maybeEncodeNullable "price_open" Json.Encode.float model.priceOpen
            , maybeEncodeNullable "price_high" Json.Encode.float model.priceHigh
            , maybeEncodeNullable "price_low" Json.Encode.float model.priceLow
            , maybeEncodeNullable "price_close" Json.Encode.float model.priceClose
            , maybeEncode "volume_traded" Json.Encode.float model.volumeTraded
            , maybeEncode "trades_count" Json.Encode.int model.tradesCount
            ]
    in
    pairs


encodeOHLCVTimeseriesPeriod : OHLCVTimeseriesPeriod -> Json.Encode.Value
encodeOHLCVTimeseriesPeriod =
    encodeObject << encodeOHLCVTimeseriesPeriodPairs


encodeOHLCVTimeseriesPeriodWithTag : ( String, String ) -> OHLCVTimeseriesPeriod -> Json.Encode.Value
encodeOHLCVTimeseriesPeriodWithTag (tagField, tag) model =
    encodeObject (encodeOHLCVTimeseriesPeriodPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOHLCVTimeseriesPeriodPairs : OHLCVTimeseriesPeriod -> List EncodedField
encodeOHLCVTimeseriesPeriodPairs model =
    let
        pairs =
            [ maybeEncodeNullable "period_id" Json.Encode.string model.periodId
            , maybeEncode "length_seconds" Json.Encode.int model.lengthSeconds
            , maybeEncode "length_months" Json.Encode.int model.lengthMonths
            , maybeEncodeNullable "unit_count" Json.Encode.int model.unitCount
            , maybeEncodeNullable "unit_name" Json.Encode.string model.unitName
            , maybeEncodeNullable "display_name" Json.Encode.string model.displayName
            ]
    in
    pairs


encodeTradeTradeModel : TradeTradeModel -> Json.Encode.Value
encodeTradeTradeModel =
    encodeObject << encodeTradeTradeModelPairs


encodeTradeTradeModelWithTag : ( String, String ) -> TradeTradeModel -> Json.Encode.Value
encodeTradeTradeModelWithTag (tagField, tag) model =
    encodeObject (encodeTradeTradeModelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTradeTradeModelPairs : TradeTradeModel -> List EncodedField
encodeTradeTradeModelPairs model =
    let
        pairs =
            [ maybeEncode "is_trade_break" Json.Encode.bool model.isTradeBreak
            , maybeEncodeNullable "symbol" Json.Encode.string model.symbol
            , maybeEncode "timestamp_nanos" Json.Encode.int model.timestampNanos
            , maybeEncode "timestamp" Api.Time.encodeDateTime model.timestamp
            , maybeEncode "size" Json.Encode.int model.size
            , maybeEncode "price" Json.Encode.float model.price
            , maybeEncode "trade_id" Json.Encode.int model.tradeId
            , maybeEncode "is_intermarket_sweep" Json.Encode.bool model.isIntermarketSweep
            , maybeEncode "is_extended_hours_trade" Json.Encode.bool model.isExtendedHoursTrade
            , maybeEncode "is_odd_lot_trade" Json.Encode.bool model.isOddLotTrade
            , maybeEncode "is_trade_through_exempt" Json.Encode.bool model.isTradeThroughExempt
            , maybeEncode "is_single_price_cross_trade" Json.Encode.bool model.isSinglePriceCrossTrade
            ]
    in
    pairs


-- DECODER


adminAdminMessageModelDecoder : Json.Decode.Decoder AdminAdminMessageModel
adminAdminMessageModelDecoder =
    Json.Decode.succeed AdminAdminMessageModel
        |> maybeDecode "trading_status" adminTradingStatusModelDecoder Nothing
        |> maybeDecode "official_price" adminOfficialPriceModelDecoder Nothing
        |> maybeDecode "security_event" adminSecurityEventModelDecoder Nothing
        |> maybeDecode "auction_information" adminAuctionInformationModelDecoder Nothing
        |> maybeDecode "short_sale_price_test" adminShortSalePriceTestStatusModelDecoder Nothing
        |> maybeDecode "operational_halt_status" adminOperationalHaltStatusModelDecoder Nothing
        |> maybeDecode "retail_liquidity_indicator" adminRetailLiquidityIndicatorModelDecoder Nothing
        |> maybeDecode "system_event" adminSystemEventModelDecoder Nothing
        |> maybeDecode "security_directory" adminSecurityDirectoryModelDecoder Nothing


adminAuctionInformationModelDecoder : Json.Decode.Decoder AdminAuctionInformationModel
adminAuctionInformationModelDecoder =
    Json.Decode.succeed AdminAuctionInformationModel
        |> maybeDecodeNullable "symbol" Json.Decode.string Nothing
        |> maybeDecode "timestamp_nanos" Json.Decode.int Nothing
        |> maybeDecode "timestamp" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "auction_type" Json.Decode.int Nothing
        |> maybeDecodeNullable "auction_type_code" Json.Decode.string Nothing
        |> maybeDecodeNullable "auction_type_text" Json.Decode.string Nothing
        |> maybeDecode "is_auction_type_opening" Json.Decode.bool Nothing
        |> maybeDecode "is_auction_type_closing" Json.Decode.bool Nothing
        |> maybeDecode "is_auction_type_ipo" Json.Decode.bool Nothing
        |> maybeDecode "is_auction_type_halt" Json.Decode.bool Nothing
        |> maybeDecode "is_auction_type_volatility" Json.Decode.bool Nothing
        |> maybeDecode "paired_shares" Json.Decode.int Nothing
        |> maybeDecode "reference_price" Json.Decode.float Nothing
        |> maybeDecode "indicative_clearing_price" Json.Decode.float Nothing
        |> maybeDecode "imbalance_shares" Json.Decode.int Nothing
        |> maybeDecode "imbalance_side" Json.Decode.int Nothing
        |> maybeDecodeNullable "imbalance_side_code" Json.Decode.string Nothing
        |> maybeDecodeNullable "imbalance_side_text" Json.Decode.string Nothing
        |> maybeDecode "is_imbalance_side_buy" Json.Decode.bool Nothing
        |> maybeDecode "is_imbalance_side_sell" Json.Decode.bool Nothing
        |> maybeDecode "is_imbalance_side_none" Json.Decode.bool Nothing
        |> maybeDecode "extension_number" Json.Decode.int Nothing
        |> maybeDecode "scheduled_auction_time_seconds" Json.Decode.int Nothing
        |> maybeDecode "scheduled_auction_time" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "auction_book_clearing_price" Json.Decode.float Nothing
        |> maybeDecode "collar_reference_price" Json.Decode.float Nothing
        |> maybeDecode "lower_auction_collar" Json.Decode.float Nothing
        |> maybeDecode "upper_auction_collar" Json.Decode.float Nothing


adminOfficialPriceModelDecoder : Json.Decode.Decoder AdminOfficialPriceModel
adminOfficialPriceModelDecoder =
    Json.Decode.succeed AdminOfficialPriceModel
        |> maybeDecodeNullable "symbol" Json.Decode.string Nothing
        |> maybeDecode "timestamp_nanos" Json.Decode.int Nothing
        |> maybeDecode "timestamp" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "price_type" Json.Decode.int Nothing
        |> maybeDecodeNullable "price_type_code" Json.Decode.string Nothing
        |> maybeDecodeNullable "price_type_text" Json.Decode.string Nothing
        |> maybeDecode "is_price_type_opening" Json.Decode.bool Nothing
        |> maybeDecode "is_price_type_closing" Json.Decode.bool Nothing
        |> maybeDecode "official_price" Json.Decode.float Nothing


adminOperationalHaltStatusModelDecoder : Json.Decode.Decoder AdminOperationalHaltStatusModel
adminOperationalHaltStatusModelDecoder =
    Json.Decode.succeed AdminOperationalHaltStatusModel
        |> maybeDecodeNullable "symbol" Json.Decode.string Nothing
        |> maybeDecode "timestamp_nanos" Json.Decode.int Nothing
        |> maybeDecode "timestamp" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "operational_halt_status" Json.Decode.int Nothing
        |> maybeDecodeNullable "operational_halt_status_code" Json.Decode.string Nothing
        |> maybeDecodeNullable "operational_halt_status_text" Json.Decode.string Nothing
        |> maybeDecode "is_operationally_halted" Json.Decode.bool Nothing
        |> maybeDecode "is_not_operationally_halted" Json.Decode.bool Nothing


adminRetailLiquidityIndicatorModelDecoder : Json.Decode.Decoder AdminRetailLiquidityIndicatorModel
adminRetailLiquidityIndicatorModelDecoder =
    Json.Decode.succeed AdminRetailLiquidityIndicatorModel
        |> maybeDecodeNullable "symbol" Json.Decode.string Nothing
        |> maybeDecode "timestamp_nanos" Json.Decode.int Nothing
        |> maybeDecode "timestamp" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "retail_liquidity_indicator" Json.Decode.int Nothing
        |> maybeDecodeNullable "retail_liquidity_indicator_code" Json.Decode.string Nothing
        |> maybeDecodeNullable "retail_liquidity_indicator_text" Json.Decode.string Nothing
        |> maybeDecode "is_retail_indicator_not_applicable" Json.Decode.bool Nothing
        |> maybeDecode "is_retail_indicator_buy_interest" Json.Decode.bool Nothing
        |> maybeDecode "is_retail_indicator_sell_interest" Json.Decode.bool Nothing
        |> maybeDecode "is_retail_indicator_buy_and_sell_interest" Json.Decode.bool Nothing


adminSecurityDirectoryModelDecoder : Json.Decode.Decoder AdminSecurityDirectoryModel
adminSecurityDirectoryModelDecoder =
    Json.Decode.succeed AdminSecurityDirectoryModel
        |> maybeDecodeNullable "symbol" Json.Decode.string Nothing
        |> maybeDecode "timestamp_nanos" Json.Decode.int Nothing
        |> maybeDecode "timestamp" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "flags" Json.Decode.int Nothing
        |> maybeDecode "round_lot_size" Json.Decode.int Nothing
        |> maybeDecode "adjusted_poc_price" Json.Decode.float Nothing
        |> maybeDecode "luld_tier" Json.Decode.int Nothing
        |> maybeDecodeNullable "luld_tier_code" Json.Decode.string Nothing
        |> maybeDecodeNullable "luld_tier_text" Json.Decode.string Nothing
        |> maybeDecode "is_luld_tier_not_applicable" Json.Decode.bool Nothing
        |> maybeDecode "is_luld_tier1" Json.Decode.bool Nothing
        |> maybeDecode "is_luld_tier2" Json.Decode.bool Nothing


adminSecurityEventModelDecoder : Json.Decode.Decoder AdminSecurityEventModel
adminSecurityEventModelDecoder =
    Json.Decode.succeed AdminSecurityEventModel
        |> maybeDecodeNullable "symbol" Json.Decode.string Nothing
        |> maybeDecode "timestamp_nanos" Json.Decode.int Nothing
        |> maybeDecode "timestamp" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "security_event" Json.Decode.int Nothing
        |> maybeDecodeNullable "security_event_code" Json.Decode.string Nothing
        |> maybeDecodeNullable "security_event_text" Json.Decode.string Nothing
        |> maybeDecode "is_opening_process_complete" Json.Decode.bool Nothing
        |> maybeDecode "is_closing_process_complete" Json.Decode.bool Nothing


adminShortSalePriceTestStatusModelDecoder : Json.Decode.Decoder AdminShortSalePriceTestStatusModel
adminShortSalePriceTestStatusModelDecoder =
    Json.Decode.succeed AdminShortSalePriceTestStatusModel
        |> maybeDecodeNullable "symbol" Json.Decode.string Nothing
        |> maybeDecode "timestamp_nanos" Json.Decode.int Nothing
        |> maybeDecode "timestamp" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "short_sale_price_test_status" Json.Decode.int Nothing
        |> maybeDecodeNullable "short_sale_price_test_status_code" Json.Decode.string Nothing
        |> maybeDecodeNullable "short_sale_price_test_status_text" Json.Decode.string Nothing
        |> maybeDecode "is_short_sale_price_test_not_in_effect" Json.Decode.bool Nothing
        |> maybeDecode "is_short_sale_price_test_in_effect" Json.Decode.bool Nothing
        |> maybeDecode "detail" Json.Decode.int Nothing
        |> maybeDecodeNullable "detail_code" Json.Decode.string Nothing
        |> maybeDecodeNullable "detail_text" Json.Decode.string Nothing
        |> maybeDecode "is_detail_no_price_test" Json.Decode.bool Nothing
        |> maybeDecode "is_detail_activated" Json.Decode.bool Nothing
        |> maybeDecode "is_detail_continued" Json.Decode.bool Nothing
        |> maybeDecode "is_detail_deactivated" Json.Decode.bool Nothing
        |> maybeDecode "is_detail_not_available" Json.Decode.bool Nothing


adminSystemEventModelDecoder : Json.Decode.Decoder AdminSystemEventModel
adminSystemEventModelDecoder =
    Json.Decode.succeed AdminSystemEventModel
        |> maybeDecode "timestamp_nanos" Json.Decode.int Nothing
        |> maybeDecode "timestamp" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "system_event" Json.Decode.int Nothing
        |> maybeDecodeNullable "system_event_code" Json.Decode.string Nothing
        |> maybeDecodeNullable "system_event_text" Json.Decode.string Nothing
        |> maybeDecode "is_system_event_start_of_messages" Json.Decode.bool Nothing
        |> maybeDecode "is_system_event_start_of_system_hours" Json.Decode.bool Nothing
        |> maybeDecode "is_system_event_start_of_regular_market_hours" Json.Decode.bool Nothing
        |> maybeDecode "is_system_event_end_of_regular_market_hours" Json.Decode.bool Nothing
        |> maybeDecode "is_system_event_end_of_system_hours" Json.Decode.bool Nothing
        |> maybeDecode "is_system_event_end_of_messages" Json.Decode.bool Nothing


adminTradingStatusModelDecoder : Json.Decode.Decoder AdminTradingStatusModel
adminTradingStatusModelDecoder =
    Json.Decode.succeed AdminTradingStatusModel
        |> maybeDecodeNullable "symbol" Json.Decode.string Nothing
        |> maybeDecode "timestamp_nanos" Json.Decode.int Nothing
        |> maybeDecode "timestamp" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "is_trading_live" Json.Decode.bool Nothing
        |> maybeDecode "is_trading_halted" Json.Decode.bool Nothing
        |> maybeDecode "is_trading_in_order_acceptance_period" Json.Decode.bool Nothing
        |> maybeDecode "is_trading_paused" Json.Decode.bool Nothing
        |> maybeDecode "is_reason_halt_news_pending" Json.Decode.bool Nothing
        |> maybeDecode "is_reason_ipo_not_yet_trading" Json.Decode.bool Nothing
        |> maybeDecode "is_reason_ipo_deferred" Json.Decode.bool Nothing
        |> maybeDecode "is_reason_halt_news_dissemination" Json.Decode.bool Nothing
        |> maybeDecode "is_reason_ipo_order_acceptance_period" Json.Decode.bool Nothing
        |> maybeDecode "is_reason_ipo_pre_launch_period" Json.Decode.bool Nothing
        |> maybeDecode "is_reason_market_wide_circuit_breaker_level1" Json.Decode.bool Nothing
        |> maybeDecode "is_reason_market_wide_circuit_breaker_level2" Json.Decode.bool Nothing
        |> maybeDecode "is_reason_market_wide_circuit_breaker_level3" Json.Decode.bool Nothing
        |> maybeDecode "is_reason_not_applicable" Json.Decode.bool Nothing
        |> maybeDecode "is_reason_not_available" Json.Decode.bool Nothing


finFeedAPIExchangeModelDecoder : Json.Decode.Decoder FinFeedAPIExchangeModel
finFeedAPIExchangeModelDecoder =
    Json.Decode.succeed FinFeedAPIExchangeModel
        |> maybeDecodeNullable "exchange_id" Json.Decode.string Nothing
        |> maybeDecodeNullable "last_datapoint_date" Json.Decode.string Nothing
        |> maybeDecodeNullable "mic" Json.Decode.string Nothing
        |> maybeDecodeNullable "operating_mic" Json.Decode.string Nothing
        |> maybeDecodeNullable "oprt_sgmt" Json.Decode.string Nothing
        |> maybeDecodeNullable "market_name_institution_description" Json.Decode.string Nothing
        |> maybeDecodeNullable "legal_entity_name" Json.Decode.string Nothing
        |> maybeDecodeNullable "lei" Json.Decode.string Nothing
        |> maybeDecodeNullable "market_category_code" Json.Decode.string Nothing
        |> maybeDecodeNullable "acronym" Json.Decode.string Nothing
        |> maybeDecodeNullable "iso_country_code" Json.Decode.string Nothing
        |> maybeDecodeNullable "city" Json.Decode.string Nothing
        |> maybeDecodeNullable "website" Json.Decode.string Nothing
        |> maybeDecodeNullable "status" Json.Decode.string Nothing
        |> maybeDecodeNullable "creation_date" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "last_update_date" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "last_validation_date" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "expiry_date" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "comments" Json.Decode.string Nothing


finFeedAPISymbolModelDecoder : Json.Decode.Decoder FinFeedAPISymbolModel
finFeedAPISymbolModelDecoder =
    Json.Decode.succeed FinFeedAPISymbolModel
        |> maybeDecodeNullable "symbol_id" Json.Decode.string Nothing
        |> maybeDecodeNullable "exchange_id" Json.Decode.string Nothing
        |> maybeDecodeNullable "security_category" Json.Decode.string Nothing
        |> maybeDecodeNullable "name" Json.Decode.string Nothing
        |> maybeDecodeNullable "date" Json.Decode.string Nothing
        |> maybeDecodeNullable "asset_class" Json.Decode.string Nothing
        |> maybeDecodeNullable "cfi_code" Json.Decode.string Nothing
        |> maybeDecodeNullable "cfi_category" Json.Decode.string Nothing
        |> maybeDecodeNullable "cfi_group" Json.Decode.string Nothing
        |> maybeDecodeNullable "cfi_attribute1" Json.Decode.string Nothing
        |> maybeDecodeNullable "cfi_attribute2" Json.Decode.string Nothing
        |> maybeDecodeNullable "cfi_attribute3" Json.Decode.string Nothing
        |> maybeDecodeNullable "cfi_attribute4" Json.Decode.string Nothing
        |> maybeDecodeNullable "cfi_category_desc" Json.Decode.string Nothing
        |> maybeDecodeNullable "cfi_group_desc" Json.Decode.string Nothing


level1QuoteUpdateModelDecoder : Json.Decode.Decoder Level1QuoteUpdateModel
level1QuoteUpdateModelDecoder =
    Json.Decode.succeed Level1QuoteUpdateModel
        |> maybeDecodeNullable "symbol" Json.Decode.string Nothing
        |> maybeDecode "timestamp_nanos" Json.Decode.int Nothing
        |> maybeDecode "timestamp" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "is_symbol_available" Json.Decode.bool Nothing
        |> maybeDecode "is_pre_post_market_session" Json.Decode.bool Nothing
        |> maybeDecode "ask_size" Json.Decode.int Nothing
        |> maybeDecode "ask_price" Json.Decode.float Nothing
        |> maybeDecode "bid_price" Json.Decode.float Nothing
        |> maybeDecode "bid_size" Json.Decode.int Nothing


level2PriceLevelUpdateModelDecoder : Json.Decode.Decoder Level2PriceLevelUpdateModel
level2PriceLevelUpdateModelDecoder =
    Json.Decode.succeed Level2PriceLevelUpdateModel
        |> maybeDecodeNullable "symbol" Json.Decode.string Nothing
        |> maybeDecode "timestamp_nanos" Json.Decode.int Nothing
        |> maybeDecode "timestamp" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "is_side_buy" Json.Decode.bool Nothing
        |> maybeDecode "is_event_processing_complete" Json.Decode.bool Nothing
        |> maybeDecode "size" Json.Decode.int Nothing
        |> maybeDecode "price" Json.Decode.float Nothing


level3AddOrderModelDecoder : Json.Decode.Decoder Level3AddOrderModel
level3AddOrderModelDecoder =
    Json.Decode.succeed Level3AddOrderModel
        |> maybeDecodeNullable "symbol" Json.Decode.string Nothing
        |> maybeDecode "timestamp_nanos" Json.Decode.int Nothing
        |> maybeDecode "timestamp" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "is_side_buy" Json.Decode.bool Nothing
        |> maybeDecode "size" Json.Decode.int Nothing
        |> maybeDecode "price" Json.Decode.float Nothing
        |> maybeDecode "order_id" Json.Decode.int Nothing


level3ClearBookModelDecoder : Json.Decode.Decoder Level3ClearBookModel
level3ClearBookModelDecoder =
    Json.Decode.succeed Level3ClearBookModel
        |> maybeDecodeNullable "symbol" Json.Decode.string Nothing
        |> maybeDecode "timestamp_nanos" Json.Decode.int Nothing
        |> maybeDecode "timestamp" Api.Time.dateTimeDecoder Nothing


level3DeleteOrderModelDecoder : Json.Decode.Decoder Level3DeleteOrderModel
level3DeleteOrderModelDecoder =
    Json.Decode.succeed Level3DeleteOrderModel
        |> maybeDecodeNullable "symbol" Json.Decode.string Nothing
        |> maybeDecode "timestamp_nanos" Json.Decode.int Nothing
        |> maybeDecode "timestamp" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "order_id_reference" Json.Decode.int Nothing


level3ExecutedOrderModelDecoder : Json.Decode.Decoder Level3ExecutedOrderModel
level3ExecutedOrderModelDecoder =
    Json.Decode.succeed Level3ExecutedOrderModel
        |> maybeDecodeNullable "symbol" Json.Decode.string Nothing
        |> maybeDecode "timestamp_nanos" Json.Decode.int Nothing
        |> maybeDecode "timestamp" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "order_id_reference" Json.Decode.int Nothing
        |> maybeDecode "sale_condition_flags" Json.Decode.int Nothing
        |> maybeDecode "is_intermarket_sweep" Json.Decode.bool Nothing
        |> maybeDecode "is_extended_hours_trade" Json.Decode.bool Nothing
        |> maybeDecode "is_odd_lot_trade" Json.Decode.bool Nothing
        |> maybeDecode "is_trade_through_exempt" Json.Decode.bool Nothing
        |> maybeDecode "is_single_price_cross_trade" Json.Decode.bool Nothing
        |> maybeDecode "size" Json.Decode.int Nothing
        |> maybeDecode "price" Json.Decode.float Nothing
        |> maybeDecode "trade_id" Json.Decode.int Nothing


level3ModifyOrderModelDecoder : Json.Decode.Decoder Level3ModifyOrderModel
level3ModifyOrderModelDecoder =
    Json.Decode.succeed Level3ModifyOrderModel
        |> maybeDecodeNullable "symbol" Json.Decode.string Nothing
        |> maybeDecode "timestamp_nanos" Json.Decode.int Nothing
        |> maybeDecode "timestamp" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "order_id_reference" Json.Decode.int Nothing
        |> maybeDecode "is_priority_reset" Json.Decode.bool Nothing
        |> maybeDecode "size" Json.Decode.int Nothing
        |> maybeDecode "price" Json.Decode.float Nothing


level3OrderBookModelDecoder : Json.Decode.Decoder Level3OrderBookModel
level3OrderBookModelDecoder =
    Json.Decode.succeed Level3OrderBookModel
        |> maybeDecode "add_order" level3AddOrderModelDecoder Nothing
        |> maybeDecode "delete_order" level3DeleteOrderModelDecoder Nothing
        |> maybeDecode "modify_order" level3ModifyOrderModelDecoder Nothing
        |> maybeDecode "executed_order" level3ExecutedOrderModelDecoder Nothing
        |> maybeDecode "clear_book" level3ClearBookModelDecoder Nothing


oHLCVExchangeTimeseriesItemDecoder : Json.Decode.Decoder OHLCVExchangeTimeseriesItem
oHLCVExchangeTimeseriesItemDecoder =
    Json.Decode.succeed OHLCVExchangeTimeseriesItem
        |> maybeDecode "time_period_start" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "time_period_end" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "time_open" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "time_close" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "price_open" Json.Decode.float Nothing
        |> maybeDecodeNullable "price_high" Json.Decode.float Nothing
        |> maybeDecodeNullable "price_low" Json.Decode.float Nothing
        |> maybeDecodeNullable "price_close" Json.Decode.float Nothing
        |> maybeDecode "volume_traded" Json.Decode.float Nothing
        |> maybeDecode "trades_count" Json.Decode.int Nothing
        |> maybeDecodeNullable "symbol_id_exchange" Json.Decode.string Nothing


oHLCVTimeseriesItemDecoder : Json.Decode.Decoder OHLCVTimeseriesItem
oHLCVTimeseriesItemDecoder =
    Json.Decode.succeed OHLCVTimeseriesItem
        |> maybeDecode "time_period_start" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "time_period_end" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "time_open" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "time_close" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "price_open" Json.Decode.float Nothing
        |> maybeDecodeNullable "price_high" Json.Decode.float Nothing
        |> maybeDecodeNullable "price_low" Json.Decode.float Nothing
        |> maybeDecodeNullable "price_close" Json.Decode.float Nothing
        |> maybeDecode "volume_traded" Json.Decode.float Nothing
        |> maybeDecode "trades_count" Json.Decode.int Nothing


oHLCVTimeseriesPeriodDecoder : Json.Decode.Decoder OHLCVTimeseriesPeriod
oHLCVTimeseriesPeriodDecoder =
    Json.Decode.succeed OHLCVTimeseriesPeriod
        |> maybeDecodeNullable "period_id" Json.Decode.string Nothing
        |> maybeDecode "length_seconds" Json.Decode.int Nothing
        |> maybeDecode "length_months" Json.Decode.int Nothing
        |> maybeDecodeNullable "unit_count" Json.Decode.int Nothing
        |> maybeDecodeNullable "unit_name" Json.Decode.string Nothing
        |> maybeDecodeNullable "display_name" Json.Decode.string Nothing


tradeTradeModelDecoder : Json.Decode.Decoder TradeTradeModel
tradeTradeModelDecoder =
    Json.Decode.succeed TradeTradeModel
        |> maybeDecode "is_trade_break" Json.Decode.bool Nothing
        |> maybeDecodeNullable "symbol" Json.Decode.string Nothing
        |> maybeDecode "timestamp_nanos" Json.Decode.int Nothing
        |> maybeDecode "timestamp" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "size" Json.Decode.int Nothing
        |> maybeDecode "price" Json.Decode.float Nothing
        |> maybeDecode "trade_id" Json.Decode.int Nothing
        |> maybeDecode "is_intermarket_sweep" Json.Decode.bool Nothing
        |> maybeDecode "is_extended_hours_trade" Json.Decode.bool Nothing
        |> maybeDecode "is_odd_lot_trade" Json.Decode.bool Nothing
        |> maybeDecode "is_trade_through_exempt" Json.Decode.bool Nothing
        |> maybeDecode "is_single_price_cross_trade" Json.Decode.bool Nothing




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f