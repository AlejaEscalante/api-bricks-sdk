/*
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Represents the response DTO for auction information
 */
public class OASAdminAuctionInformationModel implements OAS.MappedProperties {
    /**
     * The stock symbol
     * @return symbol
     */
    public String symbol { get; set; }

    /**
     * Original timestamp in nanoseconds since epoch
     * @return timestampNanos
     */
    public Long timestampNanos { get; set; }

    /**
     * Time when the auction data was recorded as DateTime
     * @return timestamp
     */
    public Datetime timestamp { get; set; }

    /**
     * Type of auction as byte value
     * @return auctionType
     */
    public Integer auctionType { get; set; }

    /**
     * Type of auction as character string
     * @return auctionTypeCode
     */
    public String auctionTypeCode { get; set; }

    /**
     * Human-readable description of the auction type
     * @return auctionTypeText
     */
    public String auctionTypeText { get; set; }

    /**
     * Indicates if the auction type is \'Opening Auction\' (\'O\'/0x4f).
     * @return isAuctionTypeOpening
     */
    public Boolean isAuctionTypeOpening { get; set; }

    /**
     * Indicates if the auction type is \'Closing Auction\' (\'C\'/0x43).
     * @return isAuctionTypeClosing
     */
    public Boolean isAuctionTypeClosing { get; set; }

    /**
     * Indicates if the auction type is \'IPO Auction\' (\'I\'/0x49).
     * @return isAuctionTypeIpo
     */
    public Boolean isAuctionTypeIpo { get; set; }

    /**
     * Indicates if the auction type is \'Halt Auction\' (\'H\'/0x48).
     * @return isAuctionTypeHalt
     */
    public Boolean isAuctionTypeHalt { get; set; }

    /**
     * Indicates if the auction type is \'Volatility Auction\' (\'V\'/0x56).
     * @return isAuctionTypeVolatility
     */
    public Boolean isAuctionTypeVolatility { get; set; }

    /**
     * Number of shares paired at the Reference Price
     * @return pairedShares
     */
    public Integer pairedShares { get; set; }

    /**
     * Reference price as decimal
     * @return referencePrice
     */
    public Double referencePrice { get; set; }

    /**
     * Indicative clearing price as decimal
     * @return indicativeClearingPrice
     */
    public Double indicativeClearingPrice { get; set; }

    /**
     * Number of unpaired shares at the Reference Price
     * @return imbalanceShares
     */
    public Integer imbalanceShares { get; set; }

    /**
     * Side of the imbalance as byte value
     * @return imbalanceSide
     */
    public Integer imbalanceSide { get; set; }

    /**
     * Side of the imbalance as character string
     * @return imbalanceSideCode
     */
    public String imbalanceSideCode { get; set; }

    /**
     * Human-readable description of the imbalance side
     * @return imbalanceSideText
     */
    public String imbalanceSideText { get; set; }

    /**
     * Indicates if there is a buy-side imbalance (\'B\'/0x42).
     * @return isImbalanceSideBuy
     */
    public Boolean isImbalanceSideBuy { get; set; }

    /**
     * Indicates if there is a sell-side imbalance (\'S\'/0x53).
     * @return isImbalanceSideSell
     */
    public Boolean isImbalanceSideSell { get; set; }

    /**
     * Indicates if there is no imbalance (\'N\'/0x4e).
     * @return isImbalanceSideNone
     */
    public Boolean isImbalanceSideNone { get; set; }

    /**
     * Number of extensions to the auction
     * @return extensionNumber
     */
    public Integer extensionNumber { get; set; }

    /**
     * Scheduled auction time in seconds since epoch
     * @return scheduledAuctionTimeSeconds
     */
    public Integer scheduledAuctionTimeSeconds { get; set; }

    /**
     * Scheduled time for the auction as DateTime
     * @return scheduledAuctionTime
     */
    public Datetime scheduledAuctionTime { get; set; }

    /**
     * Auction book clearing price as decimal
     * @return auctionBookClearingPrice
     */
    public Double auctionBookClearingPrice { get; set; }

    /**
     * Collar reference price as decimal
     * @return collarReferencePrice
     */
    public Double collarReferencePrice { get; set; }

    /**
     * Lower auction collar as decimal
     * @return lowerAuctionCollar
     */
    public Double lowerAuctionCollar { get; set; }

    /**
     * Upper auction collar as decimal
     * @return upperAuctionCollar
     */
    public Double upperAuctionCollar { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'auction_type' => 'auctionType',
        'auction_type_code' => 'auctionTypeCode',
        'auction_type_text' => 'auctionTypeText',
        'is_auction_type_opening' => 'isAuctionTypeOpening',
        'is_auction_type_closing' => 'isAuctionTypeClosing',
        'is_auction_type_ipo' => 'isAuctionTypeIpo',
        'is_auction_type_halt' => 'isAuctionTypeHalt',
        'is_auction_type_volatility' => 'isAuctionTypeVolatility',
        'paired_shares' => 'pairedShares',
        'reference_price' => 'referencePrice',
        'indicative_clearing_price' => 'indicativeClearingPrice',
        'imbalance_shares' => 'imbalanceShares',
        'imbalance_side' => 'imbalanceSide',
        'imbalance_side_code' => 'imbalanceSideCode',
        'imbalance_side_text' => 'imbalanceSideText',
        'is_imbalance_side_buy' => 'isImbalanceSideBuy',
        'is_imbalance_side_sell' => 'isImbalanceSideSell',
        'is_imbalance_side_none' => 'isImbalanceSideNone',
        'extension_number' => 'extensionNumber',
        'scheduled_auction_time_seconds' => 'scheduledAuctionTimeSeconds',
        'scheduled_auction_time' => 'scheduledAuctionTime',
        'auction_book_clearing_price' => 'auctionBookClearingPrice',
        'collar_reference_price' => 'collarReferencePrice',
        'lower_auction_collar' => 'lowerAuctionCollar',
        'upper_auction_collar' => 'upperAuctionCollar'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASAdminAuctionInformationModel getExample() {
        OASAdminAuctionInformationModel adminAuctionInformationModel = new OASAdminAuctionInformationModel();
          adminAuctionInformationModel.symbol = '';
          adminAuctionInformationModel.timestampNanos = 123456789L;
          adminAuctionInformationModel.timestamp = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          adminAuctionInformationModel.auctionType = 0;
          adminAuctionInformationModel.auctionTypeCode = '';
          adminAuctionInformationModel.auctionTypeText = '';
          adminAuctionInformationModel.isAuctionTypeOpening = true;
          adminAuctionInformationModel.isAuctionTypeClosing = true;
          adminAuctionInformationModel.isAuctionTypeIpo = true;
          adminAuctionInformationModel.isAuctionTypeHalt = true;
          adminAuctionInformationModel.isAuctionTypeVolatility = true;
          adminAuctionInformationModel.pairedShares = 0;
          adminAuctionInformationModel.referencePrice = 1.3579;
          adminAuctionInformationModel.indicativeClearingPrice = 1.3579;
          adminAuctionInformationModel.imbalanceShares = 0;
          adminAuctionInformationModel.imbalanceSide = 0;
          adminAuctionInformationModel.imbalanceSideCode = '';
          adminAuctionInformationModel.imbalanceSideText = '';
          adminAuctionInformationModel.isImbalanceSideBuy = true;
          adminAuctionInformationModel.isImbalanceSideSell = true;
          adminAuctionInformationModel.isImbalanceSideNone = true;
          adminAuctionInformationModel.extensionNumber = 0;
          adminAuctionInformationModel.scheduledAuctionTimeSeconds = 0;
          adminAuctionInformationModel.scheduledAuctionTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          adminAuctionInformationModel.auctionBookClearingPrice = 1.3579;
          adminAuctionInformationModel.collarReferencePrice = 1.3579;
          adminAuctionInformationModel.lowerAuctionCollar = 1.3579;
          adminAuctionInformationModel.upperAuctionCollar = 1.3579;
        return adminAuctionInformationModel;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASAdminAuctionInformationModel) {           
            OASAdminAuctionInformationModel adminAuctionInformationModel = (OASAdminAuctionInformationModel) obj;
            return this.symbol == adminAuctionInformationModel.symbol
                && this.timestampNanos == adminAuctionInformationModel.timestampNanos
                && this.timestamp == adminAuctionInformationModel.timestamp
                && this.auctionType == adminAuctionInformationModel.auctionType
                && this.auctionTypeCode == adminAuctionInformationModel.auctionTypeCode
                && this.auctionTypeText == adminAuctionInformationModel.auctionTypeText
                && this.isAuctionTypeOpening == adminAuctionInformationModel.isAuctionTypeOpening
                && this.isAuctionTypeClosing == adminAuctionInformationModel.isAuctionTypeClosing
                && this.isAuctionTypeIpo == adminAuctionInformationModel.isAuctionTypeIpo
                && this.isAuctionTypeHalt == adminAuctionInformationModel.isAuctionTypeHalt
                && this.isAuctionTypeVolatility == adminAuctionInformationModel.isAuctionTypeVolatility
                && this.pairedShares == adminAuctionInformationModel.pairedShares
                && this.referencePrice == adminAuctionInformationModel.referencePrice
                && this.indicativeClearingPrice == adminAuctionInformationModel.indicativeClearingPrice
                && this.imbalanceShares == adminAuctionInformationModel.imbalanceShares
                && this.imbalanceSide == adminAuctionInformationModel.imbalanceSide
                && this.imbalanceSideCode == adminAuctionInformationModel.imbalanceSideCode
                && this.imbalanceSideText == adminAuctionInformationModel.imbalanceSideText
                && this.isImbalanceSideBuy == adminAuctionInformationModel.isImbalanceSideBuy
                && this.isImbalanceSideSell == adminAuctionInformationModel.isImbalanceSideSell
                && this.isImbalanceSideNone == adminAuctionInformationModel.isImbalanceSideNone
                && this.extensionNumber == adminAuctionInformationModel.extensionNumber
                && this.scheduledAuctionTimeSeconds == adminAuctionInformationModel.scheduledAuctionTimeSeconds
                && this.scheduledAuctionTime == adminAuctionInformationModel.scheduledAuctionTime
                && this.auctionBookClearingPrice == adminAuctionInformationModel.auctionBookClearingPrice
                && this.collarReferencePrice == adminAuctionInformationModel.collarReferencePrice
                && this.lowerAuctionCollar == adminAuctionInformationModel.lowerAuctionCollar
                && this.upperAuctionCollar == adminAuctionInformationModel.upperAuctionCollar;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (symbol == null ? 0 : System.hashCode(symbol));
        hashCode = (17 * hashCode) + (timestampNanos == null ? 0 : System.hashCode(timestampNanos));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        hashCode = (17 * hashCode) + (auctionType == null ? 0 : System.hashCode(auctionType));
        hashCode = (17 * hashCode) + (auctionTypeCode == null ? 0 : System.hashCode(auctionTypeCode));
        hashCode = (17 * hashCode) + (auctionTypeText == null ? 0 : System.hashCode(auctionTypeText));
        hashCode = (17 * hashCode) + (isAuctionTypeOpening == null ? 0 : System.hashCode(isAuctionTypeOpening));
        hashCode = (17 * hashCode) + (isAuctionTypeClosing == null ? 0 : System.hashCode(isAuctionTypeClosing));
        hashCode = (17 * hashCode) + (isAuctionTypeIpo == null ? 0 : System.hashCode(isAuctionTypeIpo));
        hashCode = (17 * hashCode) + (isAuctionTypeHalt == null ? 0 : System.hashCode(isAuctionTypeHalt));
        hashCode = (17 * hashCode) + (isAuctionTypeVolatility == null ? 0 : System.hashCode(isAuctionTypeVolatility));
        hashCode = (17 * hashCode) + (pairedShares == null ? 0 : System.hashCode(pairedShares));
        hashCode = (17 * hashCode) + (referencePrice == null ? 0 : System.hashCode(referencePrice));
        hashCode = (17 * hashCode) + (indicativeClearingPrice == null ? 0 : System.hashCode(indicativeClearingPrice));
        hashCode = (17 * hashCode) + (imbalanceShares == null ? 0 : System.hashCode(imbalanceShares));
        hashCode = (17 * hashCode) + (imbalanceSide == null ? 0 : System.hashCode(imbalanceSide));
        hashCode = (17 * hashCode) + (imbalanceSideCode == null ? 0 : System.hashCode(imbalanceSideCode));
        hashCode = (17 * hashCode) + (imbalanceSideText == null ? 0 : System.hashCode(imbalanceSideText));
        hashCode = (17 * hashCode) + (isImbalanceSideBuy == null ? 0 : System.hashCode(isImbalanceSideBuy));
        hashCode = (17 * hashCode) + (isImbalanceSideSell == null ? 0 : System.hashCode(isImbalanceSideSell));
        hashCode = (17 * hashCode) + (isImbalanceSideNone == null ? 0 : System.hashCode(isImbalanceSideNone));
        hashCode = (17 * hashCode) + (extensionNumber == null ? 0 : System.hashCode(extensionNumber));
        hashCode = (17 * hashCode) + (scheduledAuctionTimeSeconds == null ? 0 : System.hashCode(scheduledAuctionTimeSeconds));
        hashCode = (17 * hashCode) + (scheduledAuctionTime == null ? 0 : System.hashCode(scheduledAuctionTime));
        hashCode = (17 * hashCode) + (auctionBookClearingPrice == null ? 0 : System.hashCode(auctionBookClearingPrice));
        hashCode = (17 * hashCode) + (collarReferencePrice == null ? 0 : System.hashCode(collarReferencePrice));
        hashCode = (17 * hashCode) + (lowerAuctionCollar == null ? 0 : System.hashCode(lowerAuctionCollar));
        hashCode = (17 * hashCode) + (upperAuctionCollar == null ? 0 : System.hashCode(upperAuctionCollar));
        return hashCode;
    }
}

