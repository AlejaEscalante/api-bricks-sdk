/*
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Represents the response DTO for quote update information
 */
public class OASLevel1QuoteUpdateModel implements OAS.MappedProperties {
    /**
     * The stock symbol
     * @return symbol
     */
    public String symbol { get; set; }

    /**
     * Original timestamp in nanoseconds since epoch
     * @return timestampNanos
     */
    public Long timestampNanos { get; set; }

    /**
     * Time when the quote update was recorded as DateTime
     * @return timestamp
     */
    public Datetime timestamp { get; set; }

    /**
     * Gets whether the symbol is available for trading\nTrue if active, False if halted, paused, or otherwise not available
     * @return isSymbolAvailable
     */
    public Boolean isSymbolAvailable { get; set; }

    /**
     * Gets whether the market session is regular or pre/post-market\nTrue if pre/post-market session, False if regular market session
     * @return isPrePostMarketSession
     */
    public Boolean isPrePostMarketSession { get; set; }

    /**
     * Ask size in number of shares
     * @return askSize
     */
    public Integer askSize { get; set; }

    /**
     * Ask price as decimal
     * @return askPrice
     */
    public Double askPrice { get; set; }

    /**
     * Bid price as decimal
     * @return bidPrice
     */
    public Double bidPrice { get; set; }

    /**
     * Bid size in number of shares
     * @return bidSize
     */
    public Integer bidSize { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'is_symbol_available' => 'isSymbolAvailable',
        'is_pre_post_market_session' => 'isPrePostMarketSession',
        'ask_size' => 'askSize',
        'ask_price' => 'askPrice',
        'bid_price' => 'bidPrice',
        'bid_size' => 'bidSize'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'is_symbol_available' => 'isSymbolAvailable',
        'is_pre_post_market_session' => 'isPrePostMarketSession',
        'ask_size' => 'askSize',
        'ask_price' => 'askPrice',
        'bid_price' => 'bidPrice',
        'bid_size' => 'bidSize'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'is_symbol_available' => 'isSymbolAvailable',
        'is_pre_post_market_session' => 'isPrePostMarketSession',
        'ask_size' => 'askSize',
        'ask_price' => 'askPrice',
        'bid_price' => 'bidPrice',
        'bid_size' => 'bidSize'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'is_symbol_available' => 'isSymbolAvailable',
        'is_pre_post_market_session' => 'isPrePostMarketSession',
        'ask_size' => 'askSize',
        'ask_price' => 'askPrice',
        'bid_price' => 'bidPrice',
        'bid_size' => 'bidSize'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'is_symbol_available' => 'isSymbolAvailable',
        'is_pre_post_market_session' => 'isPrePostMarketSession',
        'ask_size' => 'askSize',
        'ask_price' => 'askPrice',
        'bid_price' => 'bidPrice',
        'bid_size' => 'bidSize'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'is_symbol_available' => 'isSymbolAvailable',
        'is_pre_post_market_session' => 'isPrePostMarketSession',
        'ask_size' => 'askSize',
        'ask_price' => 'askPrice',
        'bid_price' => 'bidPrice',
        'bid_size' => 'bidSize'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'is_symbol_available' => 'isSymbolAvailable',
        'is_pre_post_market_session' => 'isPrePostMarketSession',
        'ask_size' => 'askSize',
        'ask_price' => 'askPrice',
        'bid_price' => 'bidPrice',
        'bid_size' => 'bidSize'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASLevel1QuoteUpdateModel getExample() {
        OASLevel1QuoteUpdateModel level1QuoteUpdateModel = new OASLevel1QuoteUpdateModel();
          level1QuoteUpdateModel.symbol = '';
          level1QuoteUpdateModel.timestampNanos = 123456789L;
          level1QuoteUpdateModel.timestamp = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          level1QuoteUpdateModel.isSymbolAvailable = true;
          level1QuoteUpdateModel.isPrePostMarketSession = true;
          level1QuoteUpdateModel.askSize = 0;
          level1QuoteUpdateModel.askPrice = 1.3579;
          level1QuoteUpdateModel.bidPrice = 1.3579;
          level1QuoteUpdateModel.bidSize = 0;
        return level1QuoteUpdateModel;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASLevel1QuoteUpdateModel) {           
            OASLevel1QuoteUpdateModel level1QuoteUpdateModel = (OASLevel1QuoteUpdateModel) obj;
            return this.symbol == level1QuoteUpdateModel.symbol
                && this.timestampNanos == level1QuoteUpdateModel.timestampNanos
                && this.timestamp == level1QuoteUpdateModel.timestamp
                && this.isSymbolAvailable == level1QuoteUpdateModel.isSymbolAvailable
                && this.isPrePostMarketSession == level1QuoteUpdateModel.isPrePostMarketSession
                && this.askSize == level1QuoteUpdateModel.askSize
                && this.askPrice == level1QuoteUpdateModel.askPrice
                && this.bidPrice == level1QuoteUpdateModel.bidPrice
                && this.bidSize == level1QuoteUpdateModel.bidSize;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (symbol == null ? 0 : System.hashCode(symbol));
        hashCode = (17 * hashCode) + (timestampNanos == null ? 0 : System.hashCode(timestampNanos));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        hashCode = (17 * hashCode) + (isSymbolAvailable == null ? 0 : System.hashCode(isSymbolAvailable));
        hashCode = (17 * hashCode) + (isPrePostMarketSession == null ? 0 : System.hashCode(isPrePostMarketSession));
        hashCode = (17 * hashCode) + (askSize == null ? 0 : System.hashCode(askSize));
        hashCode = (17 * hashCode) + (askPrice == null ? 0 : System.hashCode(askPrice));
        hashCode = (17 * hashCode) + (bidPrice == null ? 0 : System.hashCode(bidPrice));
        hashCode = (17 * hashCode) + (bidSize == null ? 0 : System.hashCode(bidSize));
        return hashCode;
    }
}

