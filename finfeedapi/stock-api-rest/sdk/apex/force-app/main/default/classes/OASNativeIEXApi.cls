/*
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASNativeIEXApi {
    OASClient client;

    public OASNativeIEXApi(OASClient client) {
        this.client = client;
    }

    public OASNativeIEXApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Get Admin Messages
     * 
     * @param symbol The symbol identifier (required)
     * @param r_date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @return List<OASAdminAdminMessageModel>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASAdminAdminMessageModel> v1NativeIexAdminMessagesSymbolGet(Map<String, Object> params) {
        client.assertNotNull(params.get('symbol'), 'symbol');
        client.assertNotNull(params.get('r_date'), 'r_date');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('date', (Datetime) params.get('r_date')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASAdminAdminMessageModel>) client.invoke(
            'GET', '/v1/native/iex/admin/messages/{symbol}', '',
            query, form,
            new Map<String, Object>{
                'symbol' => (String) params.get('symbol')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASAdminAdminMessageModel>.class
        );
    }
    /**
     * Get System Events
     * 
     * @param r_date Date in format YYYY-MM-DD (required)
     * @return List<OASAdminSystemEventModel>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASAdminSystemEventModel> v1NativeIexAdminSystemEventGet(Map<String, Object> params) {
        client.assertNotNull(params.get('r_date'), 'r_date');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('date', (Datetime) params.get('r_date')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASAdminSystemEventModel>) client.invoke(
            'GET', '/v1/native/iex/admin/system-event', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASAdminSystemEventModel>.class
        );
    }
    /**
     * Get Level-1 Quotes
     * 
     * @param symbol The symbol identifier (required)
     * @param r_date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @return List<OASLevel1QuoteUpdateModel>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASLevel1QuoteUpdateModel> v1NativeIexLevel1QuoteSymbolGet(Map<String, Object> params) {
        client.assertNotNull(params.get('symbol'), 'symbol');
        client.assertNotNull(params.get('r_date'), 'r_date');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('date', (Datetime) params.get('r_date')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASLevel1QuoteUpdateModel>) client.invoke(
            'GET', '/v1/native/iex/level1-quote/{symbol}', '',
            query, form,
            new Map<String, Object>{
                'symbol' => (String) params.get('symbol')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASLevel1QuoteUpdateModel>.class
        );
    }
    /**
     * Get Level-2 Price Level Book
     * 
     * @param symbol The symbol identifier (required)
     * @param r_date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @return List<OASLevel2PriceLevelUpdateModel>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASLevel2PriceLevelUpdateModel> v1NativeIexLevel2PriceLevelUpdateSymbolGet(Map<String, Object> params) {
        client.assertNotNull(params.get('symbol'), 'symbol');
        client.assertNotNull(params.get('r_date'), 'r_date');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('date', (Datetime) params.get('r_date')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASLevel2PriceLevelUpdateModel>) client.invoke(
            'GET', '/v1/native/iex/level2-price-level-update/{symbol}', '',
            query, form,
            new Map<String, Object>{
                'symbol' => (String) params.get('symbol')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASLevel2PriceLevelUpdateModel>.class
        );
    }
    /**
     * Get Level-3 Order Book
     * 
     * @param symbol The symbol identifier (required)
     * @param r_date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @return List<OASLevel3OrderBookModel>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASLevel3OrderBookModel> v1NativeIexLevel3OrderBookSymbolGet(Map<String, Object> params) {
        client.assertNotNull(params.get('symbol'), 'symbol');
        client.assertNotNull(params.get('r_date'), 'r_date');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('date', (Datetime) params.get('r_date')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASLevel3OrderBookModel>) client.invoke(
            'GET', '/v1/native/iex/level3-order-book/{symbol}', '',
            query, form,
            new Map<String, Object>{
                'symbol' => (String) params.get('symbol')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASLevel3OrderBookModel>.class
        );
    }
    /**
     * Get Trades
     * 
     * @param symbol The symbol identifier (required)
     * @param r_date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
     * @return List<OASTradeTradeModel>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASTradeTradeModel> v1NativeIexTradeSymbolGet(Map<String, Object> params) {
        client.assertNotNull(params.get('symbol'), 'symbol');
        client.assertNotNull(params.get('r_date'), 'r_date');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('date', (Datetime) params.get('r_date')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASTradeTradeModel>) client.invoke(
            'GET', '/v1/native/iex/trade/{symbol}', '',
            query, form,
            new Map<String, Object>{
                'symbol' => (String) params.get('symbol')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASTradeTradeModel>.class
        );
    }
}
