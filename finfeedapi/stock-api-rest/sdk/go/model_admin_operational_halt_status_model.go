/*
FinFeedAPI Stock REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: support@apibricks.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the AdminOperationalHaltStatusModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminOperationalHaltStatusModel{}

// AdminOperationalHaltStatusModel Represents the response DTO for operational halt status information
type AdminOperationalHaltStatusModel struct {
	// The stock symbol
	Symbol NullableString `json:"symbol,omitempty"`
	// Original timestamp in nanoseconds since epoch
	TimestampNanos *int64 `json:"timestamp_nanos,omitempty"`
	// Time when the operational halt status was recorded as DateTime
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// Operational halt status as byte value
	OperationalHaltStatus *int32 `json:"operational_halt_status,omitempty"`
	// Operational halt status as character string
	OperationalHaltStatusCode NullableString `json:"operational_halt_status_code,omitempty"`
	// Human-readable description of the operational halt status
	OperationalHaltStatusText NullableString `json:"operational_halt_status_text,omitempty"`
	// Indicates if the status is 'IEX specific operational trading halt' ('O'/0x4f).
	IsOperationallyHalted *bool `json:"is_operationally_halted,omitempty"`
	// Indicates if the status is 'Not operationally halted on IEX' ('N'/0x4e).
	IsNotOperationallyHalted *bool `json:"is_not_operationally_halted,omitempty"`
}

// NewAdminOperationalHaltStatusModel instantiates a new AdminOperationalHaltStatusModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminOperationalHaltStatusModel() *AdminOperationalHaltStatusModel {
	this := AdminOperationalHaltStatusModel{}
	return &this
}

// NewAdminOperationalHaltStatusModelWithDefaults instantiates a new AdminOperationalHaltStatusModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminOperationalHaltStatusModelWithDefaults() *AdminOperationalHaltStatusModel {
	this := AdminOperationalHaltStatusModel{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdminOperationalHaltStatusModel) GetSymbol() string {
	if o == nil || IsNil(o.Symbol.Get()) {
		var ret string
		return ret
	}
	return *o.Symbol.Get()
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdminOperationalHaltStatusModel) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Symbol.Get(), o.Symbol.IsSet()
}

// HasSymbol returns a boolean if a field has been set.
func (o *AdminOperationalHaltStatusModel) HasSymbol() bool {
	if o != nil && o.Symbol.IsSet() {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given NullableString and assigns it to the Symbol field.
func (o *AdminOperationalHaltStatusModel) SetSymbol(v string) {
	o.Symbol.Set(&v)
}
// SetSymbolNil sets the value for Symbol to be an explicit nil
func (o *AdminOperationalHaltStatusModel) SetSymbolNil() {
	o.Symbol.Set(nil)
}

// UnsetSymbol ensures that no value is present for Symbol, not even an explicit nil
func (o *AdminOperationalHaltStatusModel) UnsetSymbol() {
	o.Symbol.Unset()
}

// GetTimestampNanos returns the TimestampNanos field value if set, zero value otherwise.
func (o *AdminOperationalHaltStatusModel) GetTimestampNanos() int64 {
	if o == nil || IsNil(o.TimestampNanos) {
		var ret int64
		return ret
	}
	return *o.TimestampNanos
}

// GetTimestampNanosOk returns a tuple with the TimestampNanos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminOperationalHaltStatusModel) GetTimestampNanosOk() (*int64, bool) {
	if o == nil || IsNil(o.TimestampNanos) {
		return nil, false
	}
	return o.TimestampNanos, true
}

// HasTimestampNanos returns a boolean if a field has been set.
func (o *AdminOperationalHaltStatusModel) HasTimestampNanos() bool {
	if o != nil && !IsNil(o.TimestampNanos) {
		return true
	}

	return false
}

// SetTimestampNanos gets a reference to the given int64 and assigns it to the TimestampNanos field.
func (o *AdminOperationalHaltStatusModel) SetTimestampNanos(v int64) {
	o.TimestampNanos = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *AdminOperationalHaltStatusModel) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminOperationalHaltStatusModel) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *AdminOperationalHaltStatusModel) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *AdminOperationalHaltStatusModel) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetOperationalHaltStatus returns the OperationalHaltStatus field value if set, zero value otherwise.
func (o *AdminOperationalHaltStatusModel) GetOperationalHaltStatus() int32 {
	if o == nil || IsNil(o.OperationalHaltStatus) {
		var ret int32
		return ret
	}
	return *o.OperationalHaltStatus
}

// GetOperationalHaltStatusOk returns a tuple with the OperationalHaltStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminOperationalHaltStatusModel) GetOperationalHaltStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.OperationalHaltStatus) {
		return nil, false
	}
	return o.OperationalHaltStatus, true
}

// HasOperationalHaltStatus returns a boolean if a field has been set.
func (o *AdminOperationalHaltStatusModel) HasOperationalHaltStatus() bool {
	if o != nil && !IsNil(o.OperationalHaltStatus) {
		return true
	}

	return false
}

// SetOperationalHaltStatus gets a reference to the given int32 and assigns it to the OperationalHaltStatus field.
func (o *AdminOperationalHaltStatusModel) SetOperationalHaltStatus(v int32) {
	o.OperationalHaltStatus = &v
}

// GetOperationalHaltStatusCode returns the OperationalHaltStatusCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdminOperationalHaltStatusModel) GetOperationalHaltStatusCode() string {
	if o == nil || IsNil(o.OperationalHaltStatusCode.Get()) {
		var ret string
		return ret
	}
	return *o.OperationalHaltStatusCode.Get()
}

// GetOperationalHaltStatusCodeOk returns a tuple with the OperationalHaltStatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdminOperationalHaltStatusModel) GetOperationalHaltStatusCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OperationalHaltStatusCode.Get(), o.OperationalHaltStatusCode.IsSet()
}

// HasOperationalHaltStatusCode returns a boolean if a field has been set.
func (o *AdminOperationalHaltStatusModel) HasOperationalHaltStatusCode() bool {
	if o != nil && o.OperationalHaltStatusCode.IsSet() {
		return true
	}

	return false
}

// SetOperationalHaltStatusCode gets a reference to the given NullableString and assigns it to the OperationalHaltStatusCode field.
func (o *AdminOperationalHaltStatusModel) SetOperationalHaltStatusCode(v string) {
	o.OperationalHaltStatusCode.Set(&v)
}
// SetOperationalHaltStatusCodeNil sets the value for OperationalHaltStatusCode to be an explicit nil
func (o *AdminOperationalHaltStatusModel) SetOperationalHaltStatusCodeNil() {
	o.OperationalHaltStatusCode.Set(nil)
}

// UnsetOperationalHaltStatusCode ensures that no value is present for OperationalHaltStatusCode, not even an explicit nil
func (o *AdminOperationalHaltStatusModel) UnsetOperationalHaltStatusCode() {
	o.OperationalHaltStatusCode.Unset()
}

// GetOperationalHaltStatusText returns the OperationalHaltStatusText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdminOperationalHaltStatusModel) GetOperationalHaltStatusText() string {
	if o == nil || IsNil(o.OperationalHaltStatusText.Get()) {
		var ret string
		return ret
	}
	return *o.OperationalHaltStatusText.Get()
}

// GetOperationalHaltStatusTextOk returns a tuple with the OperationalHaltStatusText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdminOperationalHaltStatusModel) GetOperationalHaltStatusTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OperationalHaltStatusText.Get(), o.OperationalHaltStatusText.IsSet()
}

// HasOperationalHaltStatusText returns a boolean if a field has been set.
func (o *AdminOperationalHaltStatusModel) HasOperationalHaltStatusText() bool {
	if o != nil && o.OperationalHaltStatusText.IsSet() {
		return true
	}

	return false
}

// SetOperationalHaltStatusText gets a reference to the given NullableString and assigns it to the OperationalHaltStatusText field.
func (o *AdminOperationalHaltStatusModel) SetOperationalHaltStatusText(v string) {
	o.OperationalHaltStatusText.Set(&v)
}
// SetOperationalHaltStatusTextNil sets the value for OperationalHaltStatusText to be an explicit nil
func (o *AdminOperationalHaltStatusModel) SetOperationalHaltStatusTextNil() {
	o.OperationalHaltStatusText.Set(nil)
}

// UnsetOperationalHaltStatusText ensures that no value is present for OperationalHaltStatusText, not even an explicit nil
func (o *AdminOperationalHaltStatusModel) UnsetOperationalHaltStatusText() {
	o.OperationalHaltStatusText.Unset()
}

// GetIsOperationallyHalted returns the IsOperationallyHalted field value if set, zero value otherwise.
func (o *AdminOperationalHaltStatusModel) GetIsOperationallyHalted() bool {
	if o == nil || IsNil(o.IsOperationallyHalted) {
		var ret bool
		return ret
	}
	return *o.IsOperationallyHalted
}

// GetIsOperationallyHaltedOk returns a tuple with the IsOperationallyHalted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminOperationalHaltStatusModel) GetIsOperationallyHaltedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOperationallyHalted) {
		return nil, false
	}
	return o.IsOperationallyHalted, true
}

// HasIsOperationallyHalted returns a boolean if a field has been set.
func (o *AdminOperationalHaltStatusModel) HasIsOperationallyHalted() bool {
	if o != nil && !IsNil(o.IsOperationallyHalted) {
		return true
	}

	return false
}

// SetIsOperationallyHalted gets a reference to the given bool and assigns it to the IsOperationallyHalted field.
func (o *AdminOperationalHaltStatusModel) SetIsOperationallyHalted(v bool) {
	o.IsOperationallyHalted = &v
}

// GetIsNotOperationallyHalted returns the IsNotOperationallyHalted field value if set, zero value otherwise.
func (o *AdminOperationalHaltStatusModel) GetIsNotOperationallyHalted() bool {
	if o == nil || IsNil(o.IsNotOperationallyHalted) {
		var ret bool
		return ret
	}
	return *o.IsNotOperationallyHalted
}

// GetIsNotOperationallyHaltedOk returns a tuple with the IsNotOperationallyHalted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminOperationalHaltStatusModel) GetIsNotOperationallyHaltedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNotOperationallyHalted) {
		return nil, false
	}
	return o.IsNotOperationallyHalted, true
}

// HasIsNotOperationallyHalted returns a boolean if a field has been set.
func (o *AdminOperationalHaltStatusModel) HasIsNotOperationallyHalted() bool {
	if o != nil && !IsNil(o.IsNotOperationallyHalted) {
		return true
	}

	return false
}

// SetIsNotOperationallyHalted gets a reference to the given bool and assigns it to the IsNotOperationallyHalted field.
func (o *AdminOperationalHaltStatusModel) SetIsNotOperationallyHalted(v bool) {
	o.IsNotOperationallyHalted = &v
}

func (o AdminOperationalHaltStatusModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminOperationalHaltStatusModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol.IsSet() {
		toSerialize["symbol"] = o.Symbol.Get()
	}
	if !IsNil(o.TimestampNanos) {
		toSerialize["timestamp_nanos"] = o.TimestampNanos
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.OperationalHaltStatus) {
		toSerialize["operational_halt_status"] = o.OperationalHaltStatus
	}
	if o.OperationalHaltStatusCode.IsSet() {
		toSerialize["operational_halt_status_code"] = o.OperationalHaltStatusCode.Get()
	}
	if o.OperationalHaltStatusText.IsSet() {
		toSerialize["operational_halt_status_text"] = o.OperationalHaltStatusText.Get()
	}
	if !IsNil(o.IsOperationallyHalted) {
		toSerialize["is_operationally_halted"] = o.IsOperationallyHalted
	}
	if !IsNil(o.IsNotOperationallyHalted) {
		toSerialize["is_not_operationally_halted"] = o.IsNotOperationallyHalted
	}
	return toSerialize, nil
}

type NullableAdminOperationalHaltStatusModel struct {
	value *AdminOperationalHaltStatusModel
	isSet bool
}

func (v NullableAdminOperationalHaltStatusModel) Get() *AdminOperationalHaltStatusModel {
	return v.value
}

func (v *NullableAdminOperationalHaltStatusModel) Set(val *AdminOperationalHaltStatusModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminOperationalHaltStatusModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminOperationalHaltStatusModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminOperationalHaltStatusModel(val *AdminOperationalHaltStatusModel) *NullableAdminOperationalHaltStatusModel {
	return &NullableAdminOperationalHaltStatusModel{value: val, isSet: true}
}

func (v NullableAdminOperationalHaltStatusModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminOperationalHaltStatusModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


