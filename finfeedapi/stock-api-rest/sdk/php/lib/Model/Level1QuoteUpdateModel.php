<?php
/**
 * Level1QuoteUpdateModel
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FinFeedAPI Stock REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Level1QuoteUpdateModel Class Doc Comment
 *
 * @category Class
 * @description Represents the response DTO for quote update information
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Level1QuoteUpdateModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Level1.QuoteUpdateModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'symbol' => 'string',
        'timestamp_nanos' => 'int',
        'timestamp' => '\DateTime',
        'is_symbol_available' => 'bool',
        'is_pre_post_market_session' => 'bool',
        'ask_size' => 'int',
        'ask_price' => 'float',
        'bid_price' => 'float',
        'bid_size' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'symbol' => null,
        'timestamp_nanos' => 'int64',
        'timestamp' => 'date-time',
        'is_symbol_available' => null,
        'is_pre_post_market_session' => null,
        'ask_size' => 'int32',
        'ask_price' => 'double',
        'bid_price' => 'double',
        'bid_size' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'symbol' => true,
        'timestamp_nanos' => false,
        'timestamp' => false,
        'is_symbol_available' => false,
        'is_pre_post_market_session' => false,
        'ask_size' => false,
        'ask_price' => false,
        'bid_price' => false,
        'bid_size' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol' => 'symbol',
        'timestamp_nanos' => 'timestamp_nanos',
        'timestamp' => 'timestamp',
        'is_symbol_available' => 'is_symbol_available',
        'is_pre_post_market_session' => 'is_pre_post_market_session',
        'ask_size' => 'ask_size',
        'ask_price' => 'ask_price',
        'bid_price' => 'bid_price',
        'bid_size' => 'bid_size'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol' => 'setSymbol',
        'timestamp_nanos' => 'setTimestampNanos',
        'timestamp' => 'setTimestamp',
        'is_symbol_available' => 'setIsSymbolAvailable',
        'is_pre_post_market_session' => 'setIsPrePostMarketSession',
        'ask_size' => 'setAskSize',
        'ask_price' => 'setAskPrice',
        'bid_price' => 'setBidPrice',
        'bid_size' => 'setBidSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol' => 'getSymbol',
        'timestamp_nanos' => 'getTimestampNanos',
        'timestamp' => 'getTimestamp',
        'is_symbol_available' => 'getIsSymbolAvailable',
        'is_pre_post_market_session' => 'getIsPrePostMarketSession',
        'ask_size' => 'getAskSize',
        'ask_price' => 'getAskPrice',
        'bid_price' => 'getBidPrice',
        'bid_size' => 'getBidSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('timestamp_nanos', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('is_symbol_available', $data ?? [], null);
        $this->setIfExists('is_pre_post_market_session', $data ?? [], null);
        $this->setIfExists('ask_size', $data ?? [], null);
        $this->setIfExists('ask_price', $data ?? [], null);
        $this->setIfExists('bid_price', $data ?? [], null);
        $this->setIfExists('bid_size', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol The stock symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            array_push($this->openAPINullablesSetToNull, 'symbol');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('symbol', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets timestamp_nanos
     *
     * @return int|null
     */
    public function getTimestampNanos()
    {
        return $this->container['timestamp_nanos'];
    }

    /**
     * Sets timestamp_nanos
     *
     * @param int|null $timestamp_nanos Original timestamp in nanoseconds since epoch
     *
     * @return self
     */
    public function setTimestampNanos($timestamp_nanos)
    {
        if (is_null($timestamp_nanos)) {
            throw new \InvalidArgumentException('non-nullable timestamp_nanos cannot be null');
        }
        $this->container['timestamp_nanos'] = $timestamp_nanos;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp Time when the quote update was recorded as DateTime
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets is_symbol_available
     *
     * @return bool|null
     */
    public function getIsSymbolAvailable()
    {
        return $this->container['is_symbol_available'];
    }

    /**
     * Sets is_symbol_available
     *
     * @param bool|null $is_symbol_available Gets whether the symbol is available for trading True if active, False if halted, paused, or otherwise not available
     *
     * @return self
     */
    public function setIsSymbolAvailable($is_symbol_available)
    {
        if (is_null($is_symbol_available)) {
            throw new \InvalidArgumentException('non-nullable is_symbol_available cannot be null');
        }
        $this->container['is_symbol_available'] = $is_symbol_available;

        return $this;
    }

    /**
     * Gets is_pre_post_market_session
     *
     * @return bool|null
     */
    public function getIsPrePostMarketSession()
    {
        return $this->container['is_pre_post_market_session'];
    }

    /**
     * Sets is_pre_post_market_session
     *
     * @param bool|null $is_pre_post_market_session Gets whether the market session is regular or pre/post-market True if pre/post-market session, False if regular market session
     *
     * @return self
     */
    public function setIsPrePostMarketSession($is_pre_post_market_session)
    {
        if (is_null($is_pre_post_market_session)) {
            throw new \InvalidArgumentException('non-nullable is_pre_post_market_session cannot be null');
        }
        $this->container['is_pre_post_market_session'] = $is_pre_post_market_session;

        return $this;
    }

    /**
     * Gets ask_size
     *
     * @return int|null
     */
    public function getAskSize()
    {
        return $this->container['ask_size'];
    }

    /**
     * Sets ask_size
     *
     * @param int|null $ask_size Ask size in number of shares
     *
     * @return self
     */
    public function setAskSize($ask_size)
    {
        if (is_null($ask_size)) {
            throw new \InvalidArgumentException('non-nullable ask_size cannot be null');
        }
        $this->container['ask_size'] = $ask_size;

        return $this;
    }

    /**
     * Gets ask_price
     *
     * @return float|null
     */
    public function getAskPrice()
    {
        return $this->container['ask_price'];
    }

    /**
     * Sets ask_price
     *
     * @param float|null $ask_price Ask price as decimal
     *
     * @return self
     */
    public function setAskPrice($ask_price)
    {
        if (is_null($ask_price)) {
            throw new \InvalidArgumentException('non-nullable ask_price cannot be null');
        }
        $this->container['ask_price'] = $ask_price;

        return $this;
    }

    /**
     * Gets bid_price
     *
     * @return float|null
     */
    public function getBidPrice()
    {
        return $this->container['bid_price'];
    }

    /**
     * Sets bid_price
     *
     * @param float|null $bid_price Bid price as decimal
     *
     * @return self
     */
    public function setBidPrice($bid_price)
    {
        if (is_null($bid_price)) {
            throw new \InvalidArgumentException('non-nullable bid_price cannot be null');
        }
        $this->container['bid_price'] = $bid_price;

        return $this;
    }

    /**
     * Gets bid_size
     *
     * @return int|null
     */
    public function getBidSize()
    {
        return $this->container['bid_size'];
    }

    /**
     * Sets bid_size
     *
     * @param int|null $bid_size Bid size in number of shares
     *
     * @return self
     */
    public function setBidSize($bid_size)
    {
        if (is_null($bid_size)) {
            throw new \InvalidArgumentException('non-nullable bid_size cannot be null');
        }
        $this->container['bid_size'] = $bid_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


