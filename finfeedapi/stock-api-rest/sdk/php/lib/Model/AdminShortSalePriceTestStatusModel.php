<?php
/**
 * AdminShortSalePriceTestStatusModel
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FinFeedAPI Stock REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AdminShortSalePriceTestStatusModel Class Doc Comment
 *
 * @category Class
 * @description Represents the response DTO for short sale price test status information
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AdminShortSalePriceTestStatusModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Admin.ShortSalePriceTestStatusModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'symbol' => 'string',
        'timestamp_nanos' => 'int',
        'timestamp' => '\DateTime',
        'short_sale_price_test_status' => 'int',
        'short_sale_price_test_status_code' => 'string',
        'short_sale_price_test_status_text' => 'string',
        'is_short_sale_price_test_not_in_effect' => 'bool',
        'is_short_sale_price_test_in_effect' => 'bool',
        'detail' => 'int',
        'detail_code' => 'string',
        'detail_text' => 'string',
        'is_detail_no_price_test' => 'bool',
        'is_detail_activated' => 'bool',
        'is_detail_continued' => 'bool',
        'is_detail_deactivated' => 'bool',
        'is_detail_not_available' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'symbol' => null,
        'timestamp_nanos' => 'int64',
        'timestamp' => 'date-time',
        'short_sale_price_test_status' => 'int32',
        'short_sale_price_test_status_code' => null,
        'short_sale_price_test_status_text' => null,
        'is_short_sale_price_test_not_in_effect' => null,
        'is_short_sale_price_test_in_effect' => null,
        'detail' => 'int32',
        'detail_code' => null,
        'detail_text' => null,
        'is_detail_no_price_test' => null,
        'is_detail_activated' => null,
        'is_detail_continued' => null,
        'is_detail_deactivated' => null,
        'is_detail_not_available' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'symbol' => true,
        'timestamp_nanos' => false,
        'timestamp' => false,
        'short_sale_price_test_status' => false,
        'short_sale_price_test_status_code' => true,
        'short_sale_price_test_status_text' => true,
        'is_short_sale_price_test_not_in_effect' => false,
        'is_short_sale_price_test_in_effect' => false,
        'detail' => false,
        'detail_code' => true,
        'detail_text' => true,
        'is_detail_no_price_test' => false,
        'is_detail_activated' => false,
        'is_detail_continued' => false,
        'is_detail_deactivated' => false,
        'is_detail_not_available' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol' => 'symbol',
        'timestamp_nanos' => 'timestamp_nanos',
        'timestamp' => 'timestamp',
        'short_sale_price_test_status' => 'short_sale_price_test_status',
        'short_sale_price_test_status_code' => 'short_sale_price_test_status_code',
        'short_sale_price_test_status_text' => 'short_sale_price_test_status_text',
        'is_short_sale_price_test_not_in_effect' => 'is_short_sale_price_test_not_in_effect',
        'is_short_sale_price_test_in_effect' => 'is_short_sale_price_test_in_effect',
        'detail' => 'detail',
        'detail_code' => 'detail_code',
        'detail_text' => 'detail_text',
        'is_detail_no_price_test' => 'is_detail_no_price_test',
        'is_detail_activated' => 'is_detail_activated',
        'is_detail_continued' => 'is_detail_continued',
        'is_detail_deactivated' => 'is_detail_deactivated',
        'is_detail_not_available' => 'is_detail_not_available'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol' => 'setSymbol',
        'timestamp_nanos' => 'setTimestampNanos',
        'timestamp' => 'setTimestamp',
        'short_sale_price_test_status' => 'setShortSalePriceTestStatus',
        'short_sale_price_test_status_code' => 'setShortSalePriceTestStatusCode',
        'short_sale_price_test_status_text' => 'setShortSalePriceTestStatusText',
        'is_short_sale_price_test_not_in_effect' => 'setIsShortSalePriceTestNotInEffect',
        'is_short_sale_price_test_in_effect' => 'setIsShortSalePriceTestInEffect',
        'detail' => 'setDetail',
        'detail_code' => 'setDetailCode',
        'detail_text' => 'setDetailText',
        'is_detail_no_price_test' => 'setIsDetailNoPriceTest',
        'is_detail_activated' => 'setIsDetailActivated',
        'is_detail_continued' => 'setIsDetailContinued',
        'is_detail_deactivated' => 'setIsDetailDeactivated',
        'is_detail_not_available' => 'setIsDetailNotAvailable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol' => 'getSymbol',
        'timestamp_nanos' => 'getTimestampNanos',
        'timestamp' => 'getTimestamp',
        'short_sale_price_test_status' => 'getShortSalePriceTestStatus',
        'short_sale_price_test_status_code' => 'getShortSalePriceTestStatusCode',
        'short_sale_price_test_status_text' => 'getShortSalePriceTestStatusText',
        'is_short_sale_price_test_not_in_effect' => 'getIsShortSalePriceTestNotInEffect',
        'is_short_sale_price_test_in_effect' => 'getIsShortSalePriceTestInEffect',
        'detail' => 'getDetail',
        'detail_code' => 'getDetailCode',
        'detail_text' => 'getDetailText',
        'is_detail_no_price_test' => 'getIsDetailNoPriceTest',
        'is_detail_activated' => 'getIsDetailActivated',
        'is_detail_continued' => 'getIsDetailContinued',
        'is_detail_deactivated' => 'getIsDetailDeactivated',
        'is_detail_not_available' => 'getIsDetailNotAvailable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('timestamp_nanos', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('short_sale_price_test_status', $data ?? [], null);
        $this->setIfExists('short_sale_price_test_status_code', $data ?? [], null);
        $this->setIfExists('short_sale_price_test_status_text', $data ?? [], null);
        $this->setIfExists('is_short_sale_price_test_not_in_effect', $data ?? [], null);
        $this->setIfExists('is_short_sale_price_test_in_effect', $data ?? [], null);
        $this->setIfExists('detail', $data ?? [], null);
        $this->setIfExists('detail_code', $data ?? [], null);
        $this->setIfExists('detail_text', $data ?? [], null);
        $this->setIfExists('is_detail_no_price_test', $data ?? [], null);
        $this->setIfExists('is_detail_activated', $data ?? [], null);
        $this->setIfExists('is_detail_continued', $data ?? [], null);
        $this->setIfExists('is_detail_deactivated', $data ?? [], null);
        $this->setIfExists('is_detail_not_available', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol The stock symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            array_push($this->openAPINullablesSetToNull, 'symbol');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('symbol', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets timestamp_nanos
     *
     * @return int|null
     */
    public function getTimestampNanos()
    {
        return $this->container['timestamp_nanos'];
    }

    /**
     * Sets timestamp_nanos
     *
     * @param int|null $timestamp_nanos Original timestamp in nanoseconds since epoch
     *
     * @return self
     */
    public function setTimestampNanos($timestamp_nanos)
    {
        if (is_null($timestamp_nanos)) {
            throw new \InvalidArgumentException('non-nullable timestamp_nanos cannot be null');
        }
        $this->container['timestamp_nanos'] = $timestamp_nanos;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp Time when the short sale price test status was recorded as DateTime
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets short_sale_price_test_status
     *
     * @return int|null
     */
    public function getShortSalePriceTestStatus()
    {
        return $this->container['short_sale_price_test_status'];
    }

    /**
     * Sets short_sale_price_test_status
     *
     * @param int|null $short_sale_price_test_status Short sale price test status as byte value
     *
     * @return self
     */
    public function setShortSalePriceTestStatus($short_sale_price_test_status)
    {
        if (is_null($short_sale_price_test_status)) {
            throw new \InvalidArgumentException('non-nullable short_sale_price_test_status cannot be null');
        }
        $this->container['short_sale_price_test_status'] = $short_sale_price_test_status;

        return $this;
    }

    /**
     * Gets short_sale_price_test_status_code
     *
     * @return string|null
     */
    public function getShortSalePriceTestStatusCode()
    {
        return $this->container['short_sale_price_test_status_code'];
    }

    /**
     * Sets short_sale_price_test_status_code
     *
     * @param string|null $short_sale_price_test_status_code Short sale price test status as hex string
     *
     * @return self
     */
    public function setShortSalePriceTestStatusCode($short_sale_price_test_status_code)
    {
        if (is_null($short_sale_price_test_status_code)) {
            array_push($this->openAPINullablesSetToNull, 'short_sale_price_test_status_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_sale_price_test_status_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_sale_price_test_status_code'] = $short_sale_price_test_status_code;

        return $this;
    }

    /**
     * Gets short_sale_price_test_status_text
     *
     * @return string|null
     */
    public function getShortSalePriceTestStatusText()
    {
        return $this->container['short_sale_price_test_status_text'];
    }

    /**
     * Sets short_sale_price_test_status_text
     *
     * @param string|null $short_sale_price_test_status_text Human-readable description of the short sale price test status
     *
     * @return self
     */
    public function setShortSalePriceTestStatusText($short_sale_price_test_status_text)
    {
        if (is_null($short_sale_price_test_status_text)) {
            array_push($this->openAPINullablesSetToNull, 'short_sale_price_test_status_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_sale_price_test_status_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_sale_price_test_status_text'] = $short_sale_price_test_status_text;

        return $this;
    }

    /**
     * Gets is_short_sale_price_test_not_in_effect
     *
     * @return bool|null
     */
    public function getIsShortSalePriceTestNotInEffect()
    {
        return $this->container['is_short_sale_price_test_not_in_effect'];
    }

    /**
     * Sets is_short_sale_price_test_not_in_effect
     *
     * @param bool|null $is_short_sale_price_test_not_in_effect Indicates if the short sale price test is not in effect
     *
     * @return self
     */
    public function setIsShortSalePriceTestNotInEffect($is_short_sale_price_test_not_in_effect)
    {
        if (is_null($is_short_sale_price_test_not_in_effect)) {
            throw new \InvalidArgumentException('non-nullable is_short_sale_price_test_not_in_effect cannot be null');
        }
        $this->container['is_short_sale_price_test_not_in_effect'] = $is_short_sale_price_test_not_in_effect;

        return $this;
    }

    /**
     * Gets is_short_sale_price_test_in_effect
     *
     * @return bool|null
     */
    public function getIsShortSalePriceTestInEffect()
    {
        return $this->container['is_short_sale_price_test_in_effect'];
    }

    /**
     * Sets is_short_sale_price_test_in_effect
     *
     * @param bool|null $is_short_sale_price_test_in_effect Indicates if the short sale price test is in effect
     *
     * @return self
     */
    public function setIsShortSalePriceTestInEffect($is_short_sale_price_test_in_effect)
    {
        if (is_null($is_short_sale_price_test_in_effect)) {
            throw new \InvalidArgumentException('non-nullable is_short_sale_price_test_in_effect cannot be null');
        }
        $this->container['is_short_sale_price_test_in_effect'] = $is_short_sale_price_test_in_effect;

        return $this;
    }

    /**
     * Gets detail
     *
     * @return int|null
     */
    public function getDetail()
    {
        return $this->container['detail'];
    }

    /**
     * Sets detail
     *
     * @param int|null $detail Detail of the short sale price test as byte value
     *
     * @return self
     */
    public function setDetail($detail)
    {
        if (is_null($detail)) {
            throw new \InvalidArgumentException('non-nullable detail cannot be null');
        }
        $this->container['detail'] = $detail;

        return $this;
    }

    /**
     * Gets detail_code
     *
     * @return string|null
     */
    public function getDetailCode()
    {
        return $this->container['detail_code'];
    }

    /**
     * Sets detail_code
     *
     * @param string|null $detail_code Detail of the short sale price test as character string
     *
     * @return self
     */
    public function setDetailCode($detail_code)
    {
        if (is_null($detail_code)) {
            array_push($this->openAPINullablesSetToNull, 'detail_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('detail_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['detail_code'] = $detail_code;

        return $this;
    }

    /**
     * Gets detail_text
     *
     * @return string|null
     */
    public function getDetailText()
    {
        return $this->container['detail_text'];
    }

    /**
     * Sets detail_text
     *
     * @param string|null $detail_text Human-readable description of the short sale price test detail
     *
     * @return self
     */
    public function setDetailText($detail_text)
    {
        if (is_null($detail_text)) {
            array_push($this->openAPINullablesSetToNull, 'detail_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('detail_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['detail_text'] = $detail_text;

        return $this;
    }

    /**
     * Gets is_detail_no_price_test
     *
     * @return bool|null
     */
    public function getIsDetailNoPriceTest()
    {
        return $this->container['is_detail_no_price_test'];
    }

    /**
     * Sets is_detail_no_price_test
     *
     * @param bool|null $is_detail_no_price_test Indicates if there is no price test in place
     *
     * @return self
     */
    public function setIsDetailNoPriceTest($is_detail_no_price_test)
    {
        if (is_null($is_detail_no_price_test)) {
            throw new \InvalidArgumentException('non-nullable is_detail_no_price_test cannot be null');
        }
        $this->container['is_detail_no_price_test'] = $is_detail_no_price_test;

        return $this;
    }

    /**
     * Gets is_detail_activated
     *
     * @return bool|null
     */
    public function getIsDetailActivated()
    {
        return $this->container['is_detail_activated'];
    }

    /**
     * Sets is_detail_activated
     *
     * @param bool|null $is_detail_activated Indicates if the short sale price test restriction is in effect due to an intraday price drop
     *
     * @return self
     */
    public function setIsDetailActivated($is_detail_activated)
    {
        if (is_null($is_detail_activated)) {
            throw new \InvalidArgumentException('non-nullable is_detail_activated cannot be null');
        }
        $this->container['is_detail_activated'] = $is_detail_activated;

        return $this;
    }

    /**
     * Gets is_detail_continued
     *
     * @return bool|null
     */
    public function getIsDetailContinued()
    {
        return $this->container['is_detail_continued'];
    }

    /**
     * Sets is_detail_continued
     *
     * @param bool|null $is_detail_continued Indicates if the short sale price test restriction remains in effect from prior day
     *
     * @return self
     */
    public function setIsDetailContinued($is_detail_continued)
    {
        if (is_null($is_detail_continued)) {
            throw new \InvalidArgumentException('non-nullable is_detail_continued cannot be null');
        }
        $this->container['is_detail_continued'] = $is_detail_continued;

        return $this;
    }

    /**
     * Gets is_detail_deactivated
     *
     * @return bool|null
     */
    public function getIsDetailDeactivated()
    {
        return $this->container['is_detail_deactivated'];
    }

    /**
     * Sets is_detail_deactivated
     *
     * @param bool|null $is_detail_deactivated Indicates if the short sale price test restriction is deactivated
     *
     * @return self
     */
    public function setIsDetailDeactivated($is_detail_deactivated)
    {
        if (is_null($is_detail_deactivated)) {
            throw new \InvalidArgumentException('non-nullable is_detail_deactivated cannot be null');
        }
        $this->container['is_detail_deactivated'] = $is_detail_deactivated;

        return $this;
    }

    /**
     * Gets is_detail_not_available
     *
     * @return bool|null
     */
    public function getIsDetailNotAvailable()
    {
        return $this->container['is_detail_not_available'];
    }

    /**
     * Sets is_detail_not_available
     *
     * @param bool|null $is_detail_not_available Indicates if the detail is not available
     *
     * @return self
     */
    public function setIsDetailNotAvailable($is_detail_not_available)
    {
        if (is_null($is_detail_not_available)) {
            throw new \InvalidArgumentException('non-nullable is_detail_not_available cannot be null');
        }
        $this->container['is_detail_not_available'] = $is_detail_not_available;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


