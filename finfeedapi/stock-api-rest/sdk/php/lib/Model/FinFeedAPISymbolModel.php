<?php
/**
 * FinFeedAPISymbolModel
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FinFeedAPI Stock REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FinFeedAPISymbolModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FinFeedAPISymbolModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FinFeedAPI.SymbolModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'symbol_id' => 'string',
        'exchange_id' => 'string',
        'security_category' => 'string',
        'name' => 'string',
        'date' => 'string',
        'asset_class' => 'string',
        'cfi_code' => 'string',
        'cfi_category' => 'string',
        'cfi_group' => 'string',
        'cfi_attribute1' => 'string',
        'cfi_attribute2' => 'string',
        'cfi_attribute3' => 'string',
        'cfi_attribute4' => 'string',
        'cfi_category_desc' => 'string',
        'cfi_group_desc' => 'string',
        'cfi_attribute1_desc' => 'string',
        'cfi_attribute2_desc' => 'string',
        'cfi_attribute3_desc' => 'string',
        'cfi_attribute4_desc' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'symbol_id' => null,
        'exchange_id' => null,
        'security_category' => null,
        'name' => null,
        'date' => null,
        'asset_class' => null,
        'cfi_code' => null,
        'cfi_category' => null,
        'cfi_group' => null,
        'cfi_attribute1' => null,
        'cfi_attribute2' => null,
        'cfi_attribute3' => null,
        'cfi_attribute4' => null,
        'cfi_category_desc' => null,
        'cfi_group_desc' => null,
        'cfi_attribute1_desc' => null,
        'cfi_attribute2_desc' => null,
        'cfi_attribute3_desc' => null,
        'cfi_attribute4_desc' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'symbol_id' => true,
        'exchange_id' => true,
        'security_category' => true,
        'name' => true,
        'date' => true,
        'asset_class' => true,
        'cfi_code' => true,
        'cfi_category' => true,
        'cfi_group' => true,
        'cfi_attribute1' => true,
        'cfi_attribute2' => true,
        'cfi_attribute3' => true,
        'cfi_attribute4' => true,
        'cfi_category_desc' => true,
        'cfi_group_desc' => true,
        'cfi_attribute1_desc' => true,
        'cfi_attribute2_desc' => true,
        'cfi_attribute3_desc' => true,
        'cfi_attribute4_desc' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol_id' => 'symbol_id',
        'exchange_id' => 'exchange_id',
        'security_category' => 'security_category',
        'name' => 'name',
        'date' => 'date',
        'asset_class' => 'asset_class',
        'cfi_code' => 'cfi_code',
        'cfi_category' => 'cfi_category',
        'cfi_group' => 'cfi_group',
        'cfi_attribute1' => 'cfi_attribute1',
        'cfi_attribute2' => 'cfi_attribute2',
        'cfi_attribute3' => 'cfi_attribute3',
        'cfi_attribute4' => 'cfi_attribute4',
        'cfi_category_desc' => 'cfi_category_desc',
        'cfi_group_desc' => 'cfi_group_desc',
        'cfi_attribute1_desc' => 'cfi_attribute1_desc',
        'cfi_attribute2_desc' => 'cfi_attribute2_desc',
        'cfi_attribute3_desc' => 'cfi_attribute3_desc',
        'cfi_attribute4_desc' => 'cfi_attribute4_desc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol_id' => 'setSymbolId',
        'exchange_id' => 'setExchangeId',
        'security_category' => 'setSecurityCategory',
        'name' => 'setName',
        'date' => 'setDate',
        'asset_class' => 'setAssetClass',
        'cfi_code' => 'setCfiCode',
        'cfi_category' => 'setCfiCategory',
        'cfi_group' => 'setCfiGroup',
        'cfi_attribute1' => 'setCfiAttribute1',
        'cfi_attribute2' => 'setCfiAttribute2',
        'cfi_attribute3' => 'setCfiAttribute3',
        'cfi_attribute4' => 'setCfiAttribute4',
        'cfi_category_desc' => 'setCfiCategoryDesc',
        'cfi_group_desc' => 'setCfiGroupDesc',
        'cfi_attribute1_desc' => 'setCfiAttribute1Desc',
        'cfi_attribute2_desc' => 'setCfiAttribute2Desc',
        'cfi_attribute3_desc' => 'setCfiAttribute3Desc',
        'cfi_attribute4_desc' => 'setCfiAttribute4Desc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol_id' => 'getSymbolId',
        'exchange_id' => 'getExchangeId',
        'security_category' => 'getSecurityCategory',
        'name' => 'getName',
        'date' => 'getDate',
        'asset_class' => 'getAssetClass',
        'cfi_code' => 'getCfiCode',
        'cfi_category' => 'getCfiCategory',
        'cfi_group' => 'getCfiGroup',
        'cfi_attribute1' => 'getCfiAttribute1',
        'cfi_attribute2' => 'getCfiAttribute2',
        'cfi_attribute3' => 'getCfiAttribute3',
        'cfi_attribute4' => 'getCfiAttribute4',
        'cfi_category_desc' => 'getCfiCategoryDesc',
        'cfi_group_desc' => 'getCfiGroupDesc',
        'cfi_attribute1_desc' => 'getCfiAttribute1Desc',
        'cfi_attribute2_desc' => 'getCfiAttribute2Desc',
        'cfi_attribute3_desc' => 'getCfiAttribute3Desc',
        'cfi_attribute4_desc' => 'getCfiAttribute4Desc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('symbol_id', $data ?? [], null);
        $this->setIfExists('exchange_id', $data ?? [], null);
        $this->setIfExists('security_category', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('asset_class', $data ?? [], null);
        $this->setIfExists('cfi_code', $data ?? [], null);
        $this->setIfExists('cfi_category', $data ?? [], null);
        $this->setIfExists('cfi_group', $data ?? [], null);
        $this->setIfExists('cfi_attribute1', $data ?? [], null);
        $this->setIfExists('cfi_attribute2', $data ?? [], null);
        $this->setIfExists('cfi_attribute3', $data ?? [], null);
        $this->setIfExists('cfi_attribute4', $data ?? [], null);
        $this->setIfExists('cfi_category_desc', $data ?? [], null);
        $this->setIfExists('cfi_group_desc', $data ?? [], null);
        $this->setIfExists('cfi_attribute1_desc', $data ?? [], null);
        $this->setIfExists('cfi_attribute2_desc', $data ?? [], null);
        $this->setIfExists('cfi_attribute3_desc', $data ?? [], null);
        $this->setIfExists('cfi_attribute4_desc', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol_id
     *
     * @return string|null
     */
    public function getSymbolId()
    {
        return $this->container['symbol_id'];
    }

    /**
     * Sets symbol_id
     *
     * @param string|null $symbol_id symbol_id
     *
     * @return self
     */
    public function setSymbolId($symbol_id)
    {
        if (is_null($symbol_id)) {
            array_push($this->openAPINullablesSetToNull, 'symbol_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('symbol_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['symbol_id'] = $symbol_id;

        return $this;
    }

    /**
     * Gets exchange_id
     *
     * @return string|null
     */
    public function getExchangeId()
    {
        return $this->container['exchange_id'];
    }

    /**
     * Sets exchange_id
     *
     * @param string|null $exchange_id exchange_id
     *
     * @return self
     */
    public function setExchangeId($exchange_id)
    {
        if (is_null($exchange_id)) {
            array_push($this->openAPINullablesSetToNull, 'exchange_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exchange_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exchange_id'] = $exchange_id;

        return $this;
    }

    /**
     * Gets security_category
     *
     * @return string|null
     */
    public function getSecurityCategory()
    {
        return $this->container['security_category'];
    }

    /**
     * Sets security_category
     *
     * @param string|null $security_category security_category
     *
     * @return self
     */
    public function setSecurityCategory($security_category)
    {
        if (is_null($security_category)) {
            array_push($this->openAPINullablesSetToNull, 'security_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('security_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['security_category'] = $security_category;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date date
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            array_push($this->openAPINullablesSetToNull, 'date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets asset_class
     *
     * @return string|null
     */
    public function getAssetClass()
    {
        return $this->container['asset_class'];
    }

    /**
     * Sets asset_class
     *
     * @param string|null $asset_class asset_class
     *
     * @return self
     */
    public function setAssetClass($asset_class)
    {
        if (is_null($asset_class)) {
            array_push($this->openAPINullablesSetToNull, 'asset_class');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asset_class', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['asset_class'] = $asset_class;

        return $this;
    }

    /**
     * Gets cfi_code
     *
     * @return string|null
     */
    public function getCfiCode()
    {
        return $this->container['cfi_code'];
    }

    /**
     * Sets cfi_code
     *
     * @param string|null $cfi_code cfi_code
     *
     * @return self
     */
    public function setCfiCode($cfi_code)
    {
        if (is_null($cfi_code)) {
            array_push($this->openAPINullablesSetToNull, 'cfi_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cfi_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cfi_code'] = $cfi_code;

        return $this;
    }

    /**
     * Gets cfi_category
     *
     * @return string|null
     */
    public function getCfiCategory()
    {
        return $this->container['cfi_category'];
    }

    /**
     * Sets cfi_category
     *
     * @param string|null $cfi_category cfi_category
     *
     * @return self
     */
    public function setCfiCategory($cfi_category)
    {
        if (is_null($cfi_category)) {
            array_push($this->openAPINullablesSetToNull, 'cfi_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cfi_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cfi_category'] = $cfi_category;

        return $this;
    }

    /**
     * Gets cfi_group
     *
     * @return string|null
     */
    public function getCfiGroup()
    {
        return $this->container['cfi_group'];
    }

    /**
     * Sets cfi_group
     *
     * @param string|null $cfi_group cfi_group
     *
     * @return self
     */
    public function setCfiGroup($cfi_group)
    {
        if (is_null($cfi_group)) {
            array_push($this->openAPINullablesSetToNull, 'cfi_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cfi_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cfi_group'] = $cfi_group;

        return $this;
    }

    /**
     * Gets cfi_attribute1
     *
     * @return string|null
     */
    public function getCfiAttribute1()
    {
        return $this->container['cfi_attribute1'];
    }

    /**
     * Sets cfi_attribute1
     *
     * @param string|null $cfi_attribute1 cfi_attribute1
     *
     * @return self
     */
    public function setCfiAttribute1($cfi_attribute1)
    {
        if (is_null($cfi_attribute1)) {
            array_push($this->openAPINullablesSetToNull, 'cfi_attribute1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cfi_attribute1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cfi_attribute1'] = $cfi_attribute1;

        return $this;
    }

    /**
     * Gets cfi_attribute2
     *
     * @return string|null
     */
    public function getCfiAttribute2()
    {
        return $this->container['cfi_attribute2'];
    }

    /**
     * Sets cfi_attribute2
     *
     * @param string|null $cfi_attribute2 cfi_attribute2
     *
     * @return self
     */
    public function setCfiAttribute2($cfi_attribute2)
    {
        if (is_null($cfi_attribute2)) {
            array_push($this->openAPINullablesSetToNull, 'cfi_attribute2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cfi_attribute2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cfi_attribute2'] = $cfi_attribute2;

        return $this;
    }

    /**
     * Gets cfi_attribute3
     *
     * @return string|null
     */
    public function getCfiAttribute3()
    {
        return $this->container['cfi_attribute3'];
    }

    /**
     * Sets cfi_attribute3
     *
     * @param string|null $cfi_attribute3 cfi_attribute3
     *
     * @return self
     */
    public function setCfiAttribute3($cfi_attribute3)
    {
        if (is_null($cfi_attribute3)) {
            array_push($this->openAPINullablesSetToNull, 'cfi_attribute3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cfi_attribute3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cfi_attribute3'] = $cfi_attribute3;

        return $this;
    }

    /**
     * Gets cfi_attribute4
     *
     * @return string|null
     */
    public function getCfiAttribute4()
    {
        return $this->container['cfi_attribute4'];
    }

    /**
     * Sets cfi_attribute4
     *
     * @param string|null $cfi_attribute4 cfi_attribute4
     *
     * @return self
     */
    public function setCfiAttribute4($cfi_attribute4)
    {
        if (is_null($cfi_attribute4)) {
            array_push($this->openAPINullablesSetToNull, 'cfi_attribute4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cfi_attribute4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cfi_attribute4'] = $cfi_attribute4;

        return $this;
    }

    /**
     * Gets cfi_category_desc
     *
     * @return string|null
     */
    public function getCfiCategoryDesc()
    {
        return $this->container['cfi_category_desc'];
    }

    /**
     * Sets cfi_category_desc
     *
     * @param string|null $cfi_category_desc cfi_category_desc
     *
     * @return self
     */
    public function setCfiCategoryDesc($cfi_category_desc)
    {
        if (is_null($cfi_category_desc)) {
            array_push($this->openAPINullablesSetToNull, 'cfi_category_desc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cfi_category_desc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cfi_category_desc'] = $cfi_category_desc;

        return $this;
    }

    /**
     * Gets cfi_group_desc
     *
     * @return string|null
     */
    public function getCfiGroupDesc()
    {
        return $this->container['cfi_group_desc'];
    }

    /**
     * Sets cfi_group_desc
     *
     * @param string|null $cfi_group_desc cfi_group_desc
     *
     * @return self
     */
    public function setCfiGroupDesc($cfi_group_desc)
    {
        if (is_null($cfi_group_desc)) {
            array_push($this->openAPINullablesSetToNull, 'cfi_group_desc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cfi_group_desc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cfi_group_desc'] = $cfi_group_desc;

        return $this;
    }

    /**
     * Gets cfi_attribute1_desc
     *
     * @return string|null
     */
    public function getCfiAttribute1Desc()
    {
        return $this->container['cfi_attribute1_desc'];
    }

    /**
     * Sets cfi_attribute1_desc
     *
     * @param string|null $cfi_attribute1_desc cfi_attribute1_desc
     *
     * @return self
     */
    public function setCfiAttribute1Desc($cfi_attribute1_desc)
    {
        if (is_null($cfi_attribute1_desc)) {
            array_push($this->openAPINullablesSetToNull, 'cfi_attribute1_desc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cfi_attribute1_desc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cfi_attribute1_desc'] = $cfi_attribute1_desc;

        return $this;
    }

    /**
     * Gets cfi_attribute2_desc
     *
     * @return string|null
     */
    public function getCfiAttribute2Desc()
    {
        return $this->container['cfi_attribute2_desc'];
    }

    /**
     * Sets cfi_attribute2_desc
     *
     * @param string|null $cfi_attribute2_desc cfi_attribute2_desc
     *
     * @return self
     */
    public function setCfiAttribute2Desc($cfi_attribute2_desc)
    {
        if (is_null($cfi_attribute2_desc)) {
            array_push($this->openAPINullablesSetToNull, 'cfi_attribute2_desc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cfi_attribute2_desc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cfi_attribute2_desc'] = $cfi_attribute2_desc;

        return $this;
    }

    /**
     * Gets cfi_attribute3_desc
     *
     * @return string|null
     */
    public function getCfiAttribute3Desc()
    {
        return $this->container['cfi_attribute3_desc'];
    }

    /**
     * Sets cfi_attribute3_desc
     *
     * @param string|null $cfi_attribute3_desc cfi_attribute3_desc
     *
     * @return self
     */
    public function setCfiAttribute3Desc($cfi_attribute3_desc)
    {
        if (is_null($cfi_attribute3_desc)) {
            array_push($this->openAPINullablesSetToNull, 'cfi_attribute3_desc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cfi_attribute3_desc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cfi_attribute3_desc'] = $cfi_attribute3_desc;

        return $this;
    }

    /**
     * Gets cfi_attribute4_desc
     *
     * @return string|null
     */
    public function getCfiAttribute4Desc()
    {
        return $this->container['cfi_attribute4_desc'];
    }

    /**
     * Sets cfi_attribute4_desc
     *
     * @param string|null $cfi_attribute4_desc cfi_attribute4_desc
     *
     * @return self
     */
    public function setCfiAttribute4Desc($cfi_attribute4_desc)
    {
        if (is_null($cfi_attribute4_desc)) {
            array_push($this->openAPINullablesSetToNull, 'cfi_attribute4_desc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cfi_attribute4_desc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cfi_attribute4_desc'] = $cfi_attribute4_desc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


