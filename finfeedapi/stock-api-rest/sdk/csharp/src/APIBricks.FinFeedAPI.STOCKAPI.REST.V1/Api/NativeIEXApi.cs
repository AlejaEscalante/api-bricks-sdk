// <auto-generated>
/*
 * FinFeedAPI Stock REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client;
using APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Model;
using System.Diagnostics.CodeAnalysis;

namespace APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface INativeIEXApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        NativeIEXApiEvents Events { get; }

        /// <summary>
        /// Get Admin Messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexAdminMessagesSymbolGetApiResponse"/>&gt;</returns>
        Task<IV1NativeIexAdminMessagesSymbolGetApiResponse> V1NativeIexAdminMessagesSymbolGetAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Admin Messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexAdminMessagesSymbolGetApiResponse"/>?&gt;</returns>
        Task<IV1NativeIexAdminMessagesSymbolGetApiResponse?> V1NativeIexAdminMessagesSymbolGetOrDefaultAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get System Events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date in format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexAdminSystemEventGetApiResponse"/>&gt;</returns>
        Task<IV1NativeIexAdminSystemEventGetApiResponse> V1NativeIexAdminSystemEventGetAsync(DateTime date, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get System Events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="date">Date in format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexAdminSystemEventGetApiResponse"/>?&gt;</returns>
        Task<IV1NativeIexAdminSystemEventGetApiResponse?> V1NativeIexAdminSystemEventGetOrDefaultAsync(DateTime date, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Level-1 Quotes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexLevel1QuoteSymbolGetApiResponse"/>&gt;</returns>
        Task<IV1NativeIexLevel1QuoteSymbolGetApiResponse> V1NativeIexLevel1QuoteSymbolGetAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Level-1 Quotes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexLevel1QuoteSymbolGetApiResponse"/>?&gt;</returns>
        Task<IV1NativeIexLevel1QuoteSymbolGetApiResponse?> V1NativeIexLevel1QuoteSymbolGetOrDefaultAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Level-2 Price Level Book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse"/>&gt;</returns>
        Task<IV1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse> V1NativeIexLevel2PriceLevelUpdateSymbolGetAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Level-2 Price Level Book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse"/>?&gt;</returns>
        Task<IV1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse?> V1NativeIexLevel2PriceLevelUpdateSymbolGetOrDefaultAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Level-3 Order Book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexLevel3OrderBookSymbolGetApiResponse"/>&gt;</returns>
        Task<IV1NativeIexLevel3OrderBookSymbolGetApiResponse> V1NativeIexLevel3OrderBookSymbolGetAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Level-3 Order Book
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexLevel3OrderBookSymbolGetApiResponse"/>?&gt;</returns>
        Task<IV1NativeIexLevel3OrderBookSymbolGetApiResponse?> V1NativeIexLevel3OrderBookSymbolGetOrDefaultAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Trades
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexTradeSymbolGetApiResponse"/>&gt;</returns>
        Task<IV1NativeIexTradeSymbolGetApiResponse> V1NativeIexTradeSymbolGetAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Trades
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexTradeSymbolGetApiResponse"/>?&gt;</returns>
        Task<IV1NativeIexTradeSymbolGetApiResponse?> V1NativeIexTradeSymbolGetOrDefaultAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IV1NativeIexAdminMessagesSymbolGetApiResponse"/>
    /// </summary>
    public interface IV1NativeIexAdminMessagesSymbolGetApiResponse : APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.IApiResponse, IOk<List<AdminAdminMessageModel>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1NativeIexAdminSystemEventGetApiResponse"/>
    /// </summary>
    public interface IV1NativeIexAdminSystemEventGetApiResponse : APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.IApiResponse, IOk<List<AdminSystemEventModel>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1NativeIexLevel1QuoteSymbolGetApiResponse"/>
    /// </summary>
    public interface IV1NativeIexLevel1QuoteSymbolGetApiResponse : APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.IApiResponse, IOk<List<Level1QuoteUpdateModel>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse"/>
    /// </summary>
    public interface IV1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse : APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.IApiResponse, IOk<List<Level2PriceLevelUpdateModel>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1NativeIexLevel3OrderBookSymbolGetApiResponse"/>
    /// </summary>
    public interface IV1NativeIexLevel3OrderBookSymbolGetApiResponse : APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.IApiResponse, IOk<List<Level3OrderBookModel>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1NativeIexTradeSymbolGetApiResponse"/>
    /// </summary>
    public interface IV1NativeIexTradeSymbolGetApiResponse : APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.IApiResponse, IOk<List<TradeTradeModel>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class NativeIEXApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1NativeIexAdminMessagesSymbolGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1NativeIexAdminMessagesSymbolGet;

        internal void ExecuteOnV1NativeIexAdminMessagesSymbolGet(NativeIEXApi.V1NativeIexAdminMessagesSymbolGetApiResponse apiResponse)
        {
            OnV1NativeIexAdminMessagesSymbolGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1NativeIexAdminMessagesSymbolGet(Exception exception)
        {
            OnErrorV1NativeIexAdminMessagesSymbolGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1NativeIexAdminSystemEventGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1NativeIexAdminSystemEventGet;

        internal void ExecuteOnV1NativeIexAdminSystemEventGet(NativeIEXApi.V1NativeIexAdminSystemEventGetApiResponse apiResponse)
        {
            OnV1NativeIexAdminSystemEventGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1NativeIexAdminSystemEventGet(Exception exception)
        {
            OnErrorV1NativeIexAdminSystemEventGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1NativeIexLevel1QuoteSymbolGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1NativeIexLevel1QuoteSymbolGet;

        internal void ExecuteOnV1NativeIexLevel1QuoteSymbolGet(NativeIEXApi.V1NativeIexLevel1QuoteSymbolGetApiResponse apiResponse)
        {
            OnV1NativeIexLevel1QuoteSymbolGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1NativeIexLevel1QuoteSymbolGet(Exception exception)
        {
            OnErrorV1NativeIexLevel1QuoteSymbolGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1NativeIexLevel2PriceLevelUpdateSymbolGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1NativeIexLevel2PriceLevelUpdateSymbolGet;

        internal void ExecuteOnV1NativeIexLevel2PriceLevelUpdateSymbolGet(NativeIEXApi.V1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse apiResponse)
        {
            OnV1NativeIexLevel2PriceLevelUpdateSymbolGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1NativeIexLevel2PriceLevelUpdateSymbolGet(Exception exception)
        {
            OnErrorV1NativeIexLevel2PriceLevelUpdateSymbolGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1NativeIexLevel3OrderBookSymbolGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1NativeIexLevel3OrderBookSymbolGet;

        internal void ExecuteOnV1NativeIexLevel3OrderBookSymbolGet(NativeIEXApi.V1NativeIexLevel3OrderBookSymbolGetApiResponse apiResponse)
        {
            OnV1NativeIexLevel3OrderBookSymbolGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1NativeIexLevel3OrderBookSymbolGet(Exception exception)
        {
            OnErrorV1NativeIexLevel3OrderBookSymbolGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1NativeIexTradeSymbolGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1NativeIexTradeSymbolGet;

        internal void ExecuteOnV1NativeIexTradeSymbolGet(NativeIEXApi.V1NativeIexTradeSymbolGetApiResponse apiResponse)
        {
            OnV1NativeIexTradeSymbolGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1NativeIexTradeSymbolGet(Exception exception)
        {
            OnErrorV1NativeIexTradeSymbolGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class NativeIEXApi : INativeIEXApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<NativeIEXApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public NativeIEXApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="NativeIEXApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NativeIEXApi(ILogger<NativeIEXApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, NativeIEXApiEvents nativeIEXApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<NativeIEXApi>();
            HttpClient = httpClient;
            Events = nativeIEXApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatV1NativeIexAdminMessagesSymbolGet(ref string symbol, ref DateTime date);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="symbol"></param>
        /// <returns></returns>
        private void ValidateV1NativeIexAdminMessagesSymbolGet(string symbol)
        {
            if (symbol == null)
                throw new ArgumentNullException(nameof(symbol));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        private void AfterV1NativeIexAdminMessagesSymbolGetDefaultImplementation(IV1NativeIexAdminMessagesSymbolGetApiResponse apiResponseLocalVar, string symbol, DateTime date)
        {
            bool suppressDefaultLog = false;
            AfterV1NativeIexAdminMessagesSymbolGet(ref suppressDefaultLog, apiResponseLocalVar, symbol, date);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        partial void AfterV1NativeIexAdminMessagesSymbolGet(ref bool suppressDefaultLog, IV1NativeIexAdminMessagesSymbolGetApiResponse apiResponseLocalVar, string symbol, DateTime date);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        private void OnErrorV1NativeIexAdminMessagesSymbolGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbol, DateTime date)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1NativeIexAdminMessagesSymbolGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, symbol, date);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        partial void OnErrorV1NativeIexAdminMessagesSymbolGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbol, DateTime date);

        /// <summary>
        /// Get Admin Messages 
        /// </summary>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexAdminMessagesSymbolGetApiResponse"/>&gt;</returns>
        public async Task<IV1NativeIexAdminMessagesSymbolGetApiResponse?> V1NativeIexAdminMessagesSymbolGetOrDefaultAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1NativeIexAdminMessagesSymbolGetAsync(symbol, date, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Admin Messages 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexAdminMessagesSymbolGetApiResponse"/>&gt;</returns>
        public async Task<IV1NativeIexAdminMessagesSymbolGetApiResponse> V1NativeIexAdminMessagesSymbolGetAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1NativeIexAdminMessagesSymbolGet(symbol);

                FormatV1NativeIexAdminMessagesSymbolGet(ref symbol, ref date);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/native/iex/admin/messages/{symbol}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/native/iex/admin/messages/{symbol}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsymbol%7D", Uri.EscapeDataString(symbol.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["date"] = ClientUtils.ParameterToString(date);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1NativeIexAdminMessagesSymbolGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1NativeIexAdminMessagesSymbolGetApiResponse>();

                        V1NativeIexAdminMessagesSymbolGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/native/iex/admin/messages/{symbol}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1NativeIexAdminMessagesSymbolGetDefaultImplementation(apiResponseLocalVar, symbol, date);

                        Events.ExecuteOnV1NativeIexAdminMessagesSymbolGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1NativeIexAdminMessagesSymbolGetDefaultImplementation(e, "/v1/native/iex/admin/messages/{symbol}", uriBuilderLocalVar.Path, symbol, date);
                Events.ExecuteOnErrorV1NativeIexAdminMessagesSymbolGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1NativeIexAdminMessagesSymbolGetApiResponse"/>
        /// </summary>
        public partial class V1NativeIexAdminMessagesSymbolGetApiResponse : APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.ApiResponse, IV1NativeIexAdminMessagesSymbolGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1NativeIexAdminMessagesSymbolGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1NativeIexAdminMessagesSymbolGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1NativeIexAdminMessagesSymbolGetApiResponse(ILogger<V1NativeIexAdminMessagesSymbolGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<AdminAdminMessageModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<AdminAdminMessageModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<AdminAdminMessageModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1NativeIexAdminSystemEventGet(ref DateTime date);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="date"></param>
        private void AfterV1NativeIexAdminSystemEventGetDefaultImplementation(IV1NativeIexAdminSystemEventGetApiResponse apiResponseLocalVar, DateTime date)
        {
            bool suppressDefaultLog = false;
            AfterV1NativeIexAdminSystemEventGet(ref suppressDefaultLog, apiResponseLocalVar, date);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="date"></param>
        partial void AfterV1NativeIexAdminSystemEventGet(ref bool suppressDefaultLog, IV1NativeIexAdminSystemEventGetApiResponse apiResponseLocalVar, DateTime date);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="date"></param>
        private void OnErrorV1NativeIexAdminSystemEventGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DateTime date)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1NativeIexAdminSystemEventGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, date);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="date"></param>
        partial void OnErrorV1NativeIexAdminSystemEventGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DateTime date);

        /// <summary>
        /// Get System Events 
        /// </summary>
        /// <param name="date">Date in format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexAdminSystemEventGetApiResponse"/>&gt;</returns>
        public async Task<IV1NativeIexAdminSystemEventGetApiResponse?> V1NativeIexAdminSystemEventGetOrDefaultAsync(DateTime date, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1NativeIexAdminSystemEventGetAsync(date, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get System Events 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date in format YYYY-MM-DD</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexAdminSystemEventGetApiResponse"/>&gt;</returns>
        public async Task<IV1NativeIexAdminSystemEventGetApiResponse> V1NativeIexAdminSystemEventGetAsync(DateTime date, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatV1NativeIexAdminSystemEventGet(ref date);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/native/iex/admin/system-event"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/native/iex/admin/system-event");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["date"] = ClientUtils.ParameterToString(date);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1NativeIexAdminSystemEventGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1NativeIexAdminSystemEventGetApiResponse>();

                        V1NativeIexAdminSystemEventGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/native/iex/admin/system-event", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1NativeIexAdminSystemEventGetDefaultImplementation(apiResponseLocalVar, date);

                        Events.ExecuteOnV1NativeIexAdminSystemEventGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1NativeIexAdminSystemEventGetDefaultImplementation(e, "/v1/native/iex/admin/system-event", uriBuilderLocalVar.Path, date);
                Events.ExecuteOnErrorV1NativeIexAdminSystemEventGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1NativeIexAdminSystemEventGetApiResponse"/>
        /// </summary>
        public partial class V1NativeIexAdminSystemEventGetApiResponse : APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.ApiResponse, IV1NativeIexAdminSystemEventGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1NativeIexAdminSystemEventGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1NativeIexAdminSystemEventGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1NativeIexAdminSystemEventGetApiResponse(ILogger<V1NativeIexAdminSystemEventGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<AdminSystemEventModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<AdminSystemEventModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<AdminSystemEventModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1NativeIexLevel1QuoteSymbolGet(ref string symbol, ref DateTime date);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="symbol"></param>
        /// <returns></returns>
        private void ValidateV1NativeIexLevel1QuoteSymbolGet(string symbol)
        {
            if (symbol == null)
                throw new ArgumentNullException(nameof(symbol));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        private void AfterV1NativeIexLevel1QuoteSymbolGetDefaultImplementation(IV1NativeIexLevel1QuoteSymbolGetApiResponse apiResponseLocalVar, string symbol, DateTime date)
        {
            bool suppressDefaultLog = false;
            AfterV1NativeIexLevel1QuoteSymbolGet(ref suppressDefaultLog, apiResponseLocalVar, symbol, date);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        partial void AfterV1NativeIexLevel1QuoteSymbolGet(ref bool suppressDefaultLog, IV1NativeIexLevel1QuoteSymbolGetApiResponse apiResponseLocalVar, string symbol, DateTime date);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        private void OnErrorV1NativeIexLevel1QuoteSymbolGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbol, DateTime date)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1NativeIexLevel1QuoteSymbolGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, symbol, date);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        partial void OnErrorV1NativeIexLevel1QuoteSymbolGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbol, DateTime date);

        /// <summary>
        /// Get Level-1 Quotes 
        /// </summary>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexLevel1QuoteSymbolGetApiResponse"/>&gt;</returns>
        public async Task<IV1NativeIexLevel1QuoteSymbolGetApiResponse?> V1NativeIexLevel1QuoteSymbolGetOrDefaultAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1NativeIexLevel1QuoteSymbolGetAsync(symbol, date, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Level-1 Quotes 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexLevel1QuoteSymbolGetApiResponse"/>&gt;</returns>
        public async Task<IV1NativeIexLevel1QuoteSymbolGetApiResponse> V1NativeIexLevel1QuoteSymbolGetAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1NativeIexLevel1QuoteSymbolGet(symbol);

                FormatV1NativeIexLevel1QuoteSymbolGet(ref symbol, ref date);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/native/iex/level1-quote/{symbol}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/native/iex/level1-quote/{symbol}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsymbol%7D", Uri.EscapeDataString(symbol.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["date"] = ClientUtils.ParameterToString(date);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1NativeIexLevel1QuoteSymbolGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1NativeIexLevel1QuoteSymbolGetApiResponse>();

                        V1NativeIexLevel1QuoteSymbolGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/native/iex/level1-quote/{symbol}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1NativeIexLevel1QuoteSymbolGetDefaultImplementation(apiResponseLocalVar, symbol, date);

                        Events.ExecuteOnV1NativeIexLevel1QuoteSymbolGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1NativeIexLevel1QuoteSymbolGetDefaultImplementation(e, "/v1/native/iex/level1-quote/{symbol}", uriBuilderLocalVar.Path, symbol, date);
                Events.ExecuteOnErrorV1NativeIexLevel1QuoteSymbolGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1NativeIexLevel1QuoteSymbolGetApiResponse"/>
        /// </summary>
        public partial class V1NativeIexLevel1QuoteSymbolGetApiResponse : APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.ApiResponse, IV1NativeIexLevel1QuoteSymbolGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1NativeIexLevel1QuoteSymbolGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1NativeIexLevel1QuoteSymbolGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1NativeIexLevel1QuoteSymbolGetApiResponse(ILogger<V1NativeIexLevel1QuoteSymbolGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Level1QuoteUpdateModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Level1QuoteUpdateModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Level1QuoteUpdateModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1NativeIexLevel2PriceLevelUpdateSymbolGet(ref string symbol, ref DateTime date);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="symbol"></param>
        /// <returns></returns>
        private void ValidateV1NativeIexLevel2PriceLevelUpdateSymbolGet(string symbol)
        {
            if (symbol == null)
                throw new ArgumentNullException(nameof(symbol));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        private void AfterV1NativeIexLevel2PriceLevelUpdateSymbolGetDefaultImplementation(IV1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse apiResponseLocalVar, string symbol, DateTime date)
        {
            bool suppressDefaultLog = false;
            AfterV1NativeIexLevel2PriceLevelUpdateSymbolGet(ref suppressDefaultLog, apiResponseLocalVar, symbol, date);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        partial void AfterV1NativeIexLevel2PriceLevelUpdateSymbolGet(ref bool suppressDefaultLog, IV1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse apiResponseLocalVar, string symbol, DateTime date);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        private void OnErrorV1NativeIexLevel2PriceLevelUpdateSymbolGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbol, DateTime date)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1NativeIexLevel2PriceLevelUpdateSymbolGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, symbol, date);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        partial void OnErrorV1NativeIexLevel2PriceLevelUpdateSymbolGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbol, DateTime date);

        /// <summary>
        /// Get Level-2 Price Level Book 
        /// </summary>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse"/>&gt;</returns>
        public async Task<IV1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse?> V1NativeIexLevel2PriceLevelUpdateSymbolGetOrDefaultAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1NativeIexLevel2PriceLevelUpdateSymbolGetAsync(symbol, date, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Level-2 Price Level Book 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse"/>&gt;</returns>
        public async Task<IV1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse> V1NativeIexLevel2PriceLevelUpdateSymbolGetAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1NativeIexLevel2PriceLevelUpdateSymbolGet(symbol);

                FormatV1NativeIexLevel2PriceLevelUpdateSymbolGet(ref symbol, ref date);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/native/iex/level2-price-level-update/{symbol}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/native/iex/level2-price-level-update/{symbol}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsymbol%7D", Uri.EscapeDataString(symbol.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["date"] = ClientUtils.ParameterToString(date);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse>();

                        V1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/native/iex/level2-price-level-update/{symbol}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1NativeIexLevel2PriceLevelUpdateSymbolGetDefaultImplementation(apiResponseLocalVar, symbol, date);

                        Events.ExecuteOnV1NativeIexLevel2PriceLevelUpdateSymbolGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1NativeIexLevel2PriceLevelUpdateSymbolGetDefaultImplementation(e, "/v1/native/iex/level2-price-level-update/{symbol}", uriBuilderLocalVar.Path, symbol, date);
                Events.ExecuteOnErrorV1NativeIexLevel2PriceLevelUpdateSymbolGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse"/>
        /// </summary>
        public partial class V1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse : APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.ApiResponse, IV1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse(ILogger<V1NativeIexLevel2PriceLevelUpdateSymbolGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Level2PriceLevelUpdateModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Level2PriceLevelUpdateModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Level2PriceLevelUpdateModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1NativeIexLevel3OrderBookSymbolGet(ref string symbol, ref DateTime date);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="symbol"></param>
        /// <returns></returns>
        private void ValidateV1NativeIexLevel3OrderBookSymbolGet(string symbol)
        {
            if (symbol == null)
                throw new ArgumentNullException(nameof(symbol));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        private void AfterV1NativeIexLevel3OrderBookSymbolGetDefaultImplementation(IV1NativeIexLevel3OrderBookSymbolGetApiResponse apiResponseLocalVar, string symbol, DateTime date)
        {
            bool suppressDefaultLog = false;
            AfterV1NativeIexLevel3OrderBookSymbolGet(ref suppressDefaultLog, apiResponseLocalVar, symbol, date);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        partial void AfterV1NativeIexLevel3OrderBookSymbolGet(ref bool suppressDefaultLog, IV1NativeIexLevel3OrderBookSymbolGetApiResponse apiResponseLocalVar, string symbol, DateTime date);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        private void OnErrorV1NativeIexLevel3OrderBookSymbolGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbol, DateTime date)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1NativeIexLevel3OrderBookSymbolGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, symbol, date);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        partial void OnErrorV1NativeIexLevel3OrderBookSymbolGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbol, DateTime date);

        /// <summary>
        /// Get Level-3 Order Book 
        /// </summary>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexLevel3OrderBookSymbolGetApiResponse"/>&gt;</returns>
        public async Task<IV1NativeIexLevel3OrderBookSymbolGetApiResponse?> V1NativeIexLevel3OrderBookSymbolGetOrDefaultAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1NativeIexLevel3OrderBookSymbolGetAsync(symbol, date, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Level-3 Order Book 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexLevel3OrderBookSymbolGetApiResponse"/>&gt;</returns>
        public async Task<IV1NativeIexLevel3OrderBookSymbolGetApiResponse> V1NativeIexLevel3OrderBookSymbolGetAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1NativeIexLevel3OrderBookSymbolGet(symbol);

                FormatV1NativeIexLevel3OrderBookSymbolGet(ref symbol, ref date);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/native/iex/level3-order-book/{symbol}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/native/iex/level3-order-book/{symbol}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsymbol%7D", Uri.EscapeDataString(symbol.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["date"] = ClientUtils.ParameterToString(date);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1NativeIexLevel3OrderBookSymbolGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1NativeIexLevel3OrderBookSymbolGetApiResponse>();

                        V1NativeIexLevel3OrderBookSymbolGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/native/iex/level3-order-book/{symbol}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1NativeIexLevel3OrderBookSymbolGetDefaultImplementation(apiResponseLocalVar, symbol, date);

                        Events.ExecuteOnV1NativeIexLevel3OrderBookSymbolGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1NativeIexLevel3OrderBookSymbolGetDefaultImplementation(e, "/v1/native/iex/level3-order-book/{symbol}", uriBuilderLocalVar.Path, symbol, date);
                Events.ExecuteOnErrorV1NativeIexLevel3OrderBookSymbolGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1NativeIexLevel3OrderBookSymbolGetApiResponse"/>
        /// </summary>
        public partial class V1NativeIexLevel3OrderBookSymbolGetApiResponse : APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.ApiResponse, IV1NativeIexLevel3OrderBookSymbolGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1NativeIexLevel3OrderBookSymbolGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1NativeIexLevel3OrderBookSymbolGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1NativeIexLevel3OrderBookSymbolGetApiResponse(ILogger<V1NativeIexLevel3OrderBookSymbolGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Level3OrderBookModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Level3OrderBookModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Level3OrderBookModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1NativeIexTradeSymbolGet(ref string symbol, ref DateTime date);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="symbol"></param>
        /// <returns></returns>
        private void ValidateV1NativeIexTradeSymbolGet(string symbol)
        {
            if (symbol == null)
                throw new ArgumentNullException(nameof(symbol));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        private void AfterV1NativeIexTradeSymbolGetDefaultImplementation(IV1NativeIexTradeSymbolGetApiResponse apiResponseLocalVar, string symbol, DateTime date)
        {
            bool suppressDefaultLog = false;
            AfterV1NativeIexTradeSymbolGet(ref suppressDefaultLog, apiResponseLocalVar, symbol, date);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        partial void AfterV1NativeIexTradeSymbolGet(ref bool suppressDefaultLog, IV1NativeIexTradeSymbolGetApiResponse apiResponseLocalVar, string symbol, DateTime date);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        private void OnErrorV1NativeIexTradeSymbolGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbol, DateTime date)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1NativeIexTradeSymbolGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, symbol, date);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbol"></param>
        /// <param name="date"></param>
        partial void OnErrorV1NativeIexTradeSymbolGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbol, DateTime date);

        /// <summary>
        /// Get Trades 
        /// </summary>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexTradeSymbolGetApiResponse"/>&gt;</returns>
        public async Task<IV1NativeIexTradeSymbolGetApiResponse?> V1NativeIexTradeSymbolGetOrDefaultAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1NativeIexTradeSymbolGetAsync(symbol, date, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Trades 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">The symbol identifier</param>
        /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1NativeIexTradeSymbolGetApiResponse"/>&gt;</returns>
        public async Task<IV1NativeIexTradeSymbolGetApiResponse> V1NativeIexTradeSymbolGetAsync(string symbol, DateTime date, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1NativeIexTradeSymbolGet(symbol);

                FormatV1NativeIexTradeSymbolGet(ref symbol, ref date);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/native/iex/trade/{symbol}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/native/iex/trade/{symbol}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsymbol%7D", Uri.EscapeDataString(symbol.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["date"] = ClientUtils.ParameterToString(date);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1NativeIexTradeSymbolGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1NativeIexTradeSymbolGetApiResponse>();

                        V1NativeIexTradeSymbolGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/native/iex/trade/{symbol}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1NativeIexTradeSymbolGetDefaultImplementation(apiResponseLocalVar, symbol, date);

                        Events.ExecuteOnV1NativeIexTradeSymbolGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1NativeIexTradeSymbolGetDefaultImplementation(e, "/v1/native/iex/trade/{symbol}", uriBuilderLocalVar.Path, symbol, date);
                Events.ExecuteOnErrorV1NativeIexTradeSymbolGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1NativeIexTradeSymbolGetApiResponse"/>
        /// </summary>
        public partial class V1NativeIexTradeSymbolGetApiResponse : APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.ApiResponse, IV1NativeIexTradeSymbolGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1NativeIexTradeSymbolGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1NativeIexTradeSymbolGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1NativeIexTradeSymbolGetApiResponse(ILogger<V1NativeIexTradeSymbolGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TradeTradeModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TradeTradeModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TradeTradeModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
