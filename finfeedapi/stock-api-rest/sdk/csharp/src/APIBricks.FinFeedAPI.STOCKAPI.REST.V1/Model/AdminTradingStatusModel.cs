// <auto-generated>
/*
 * FinFeedAPI Stock REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.ClientUtils;
using APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client;

namespace APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Model
{
    /// <summary>
    /// Represents the response DTO for trading status information
    /// </summary>
    public partial class AdminTradingStatusModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminTradingStatusModel" /> class.
        /// </summary>
        /// <param name="symbol">The stock symbol</param>
        /// <param name="timestampNanos">Original timestamp in nanoseconds since epoch</param>
        /// <param name="timestamp">Time when the trading status was recorded as DateTime</param>
        /// <param name="isTradingLive">Gets whether the security is currently trading on IEX</param>
        /// <param name="isTradingHalted">Gets whether the security is halted across all US equity markets</param>
        /// <param name="isTradingInOrderAcceptancePeriod">Gets whether the security is in Order Acceptance Period on IEX</param>
        /// <param name="isTradingPaused">Gets whether the security is paused and in Order Acceptance Period on IEX</param>
        /// <param name="isReasonHaltNewsPending">Gets whether the halt reason is News Pending</param>
        /// <param name="isReasonIpoNotYetTrading">Gets whether the halt reason is IPO Not Yet Trading</param>
        /// <param name="isReasonIpoDeferred">Gets whether the halt reason is IPO Deferred</param>
        /// <param name="isReasonHaltNewsDissemination">Gets whether the order acceptance period reason is Halt News Dissemination</param>
        /// <param name="isReasonIpoOrderAcceptancePeriod">Gets whether the order acceptance period reason is IPO Order Acceptance Period</param>
        /// <param name="isReasonIpoPreLaunchPeriod">Gets whether the order acceptance period reason is IPO Pre-Launch Period</param>
        /// <param name="isReasonMarketWideCircuitBreakerLevel1">Gets whether the order acceptance period reason is Market-Wide Circuit Breaker Level 1 – Breached</param>
        /// <param name="isReasonMarketWideCircuitBreakerLevel2">Gets whether the order acceptance period reason is Market-Wide Circuit Breaker Level 2 – Breached</param>
        /// <param name="isReasonMarketWideCircuitBreakerLevel3">Gets whether the halt reason is Market-Wide Circuit Breaker Level 3 – Breached</param>
        /// <param name="isReasonNotApplicable">Gets whether the reason is Not Applicable</param>
        /// <param name="isReasonNotAvailable">Gets whether the halt reason is Not Available</param>
        [JsonConstructor]
        public AdminTradingStatusModel(Option<string?> symbol = default, Option<long?> timestampNanos = default, Option<DateTime?> timestamp = default, Option<bool?> isTradingLive = default, Option<bool?> isTradingHalted = default, Option<bool?> isTradingInOrderAcceptancePeriod = default, Option<bool?> isTradingPaused = default, Option<bool?> isReasonHaltNewsPending = default, Option<bool?> isReasonIpoNotYetTrading = default, Option<bool?> isReasonIpoDeferred = default, Option<bool?> isReasonHaltNewsDissemination = default, Option<bool?> isReasonIpoOrderAcceptancePeriod = default, Option<bool?> isReasonIpoPreLaunchPeriod = default, Option<bool?> isReasonMarketWideCircuitBreakerLevel1 = default, Option<bool?> isReasonMarketWideCircuitBreakerLevel2 = default, Option<bool?> isReasonMarketWideCircuitBreakerLevel3 = default, Option<bool?> isReasonNotApplicable = default, Option<bool?> isReasonNotAvailable = default)
        {
            SymbolOption = symbol;
            TimestampNanosOption = timestampNanos;
            TimestampOption = timestamp;
            IsTradingLiveOption = isTradingLive;
            IsTradingHaltedOption = isTradingHalted;
            IsTradingInOrderAcceptancePeriodOption = isTradingInOrderAcceptancePeriod;
            IsTradingPausedOption = isTradingPaused;
            IsReasonHaltNewsPendingOption = isReasonHaltNewsPending;
            IsReasonIpoNotYetTradingOption = isReasonIpoNotYetTrading;
            IsReasonIpoDeferredOption = isReasonIpoDeferred;
            IsReasonHaltNewsDisseminationOption = isReasonHaltNewsDissemination;
            IsReasonIpoOrderAcceptancePeriodOption = isReasonIpoOrderAcceptancePeriod;
            IsReasonIpoPreLaunchPeriodOption = isReasonIpoPreLaunchPeriod;
            IsReasonMarketWideCircuitBreakerLevel1Option = isReasonMarketWideCircuitBreakerLevel1;
            IsReasonMarketWideCircuitBreakerLevel2Option = isReasonMarketWideCircuitBreakerLevel2;
            IsReasonMarketWideCircuitBreakerLevel3Option = isReasonMarketWideCircuitBreakerLevel3;
            IsReasonNotApplicableOption = isReasonNotApplicable;
            IsReasonNotAvailableOption = isReasonNotAvailable;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Symbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SymbolOption { get; private set; }

        /// <summary>
        /// The stock symbol
        /// </summary>
        /// <value>The stock symbol</value>
        [JsonPropertyName("symbol")]
        public string? Symbol { get { return this.SymbolOption; } set { this.SymbolOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimestampNanos
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TimestampNanosOption { get; private set; }

        /// <summary>
        /// Original timestamp in nanoseconds since epoch
        /// </summary>
        /// <value>Original timestamp in nanoseconds since epoch</value>
        [JsonPropertyName("timestamp_nanos")]
        public long? TimestampNanos { get { return this.TimestampNanosOption; } set { this.TimestampNanosOption = new(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimestampOption { get; private set; }

        /// <summary>
        /// Time when the trading status was recorded as DateTime
        /// </summary>
        /// <value>Time when the trading status was recorded as DateTime</value>
        [JsonPropertyName("timestamp")]
        public DateTime? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsTradingLive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsTradingLiveOption { get; private set; }

        /// <summary>
        /// Gets whether the security is currently trading on IEX
        /// </summary>
        /// <value>Gets whether the security is currently trading on IEX</value>
        [JsonPropertyName("is_trading_live")]
        public bool? IsTradingLive { get { return this.IsTradingLiveOption; } set { this.IsTradingLiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsTradingHalted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsTradingHaltedOption { get; private set; }

        /// <summary>
        /// Gets whether the security is halted across all US equity markets
        /// </summary>
        /// <value>Gets whether the security is halted across all US equity markets</value>
        [JsonPropertyName("is_trading_halted")]
        public bool? IsTradingHalted { get { return this.IsTradingHaltedOption; } set { this.IsTradingHaltedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsTradingInOrderAcceptancePeriod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsTradingInOrderAcceptancePeriodOption { get; private set; }

        /// <summary>
        /// Gets whether the security is in Order Acceptance Period on IEX
        /// </summary>
        /// <value>Gets whether the security is in Order Acceptance Period on IEX</value>
        [JsonPropertyName("is_trading_in_order_acceptance_period")]
        public bool? IsTradingInOrderAcceptancePeriod { get { return this.IsTradingInOrderAcceptancePeriodOption; } set { this.IsTradingInOrderAcceptancePeriodOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsTradingPaused
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsTradingPausedOption { get; private set; }

        /// <summary>
        /// Gets whether the security is paused and in Order Acceptance Period on IEX
        /// </summary>
        /// <value>Gets whether the security is paused and in Order Acceptance Period on IEX</value>
        [JsonPropertyName("is_trading_paused")]
        public bool? IsTradingPaused { get { return this.IsTradingPausedOption; } set { this.IsTradingPausedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsReasonHaltNewsPending
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReasonHaltNewsPendingOption { get; private set; }

        /// <summary>
        /// Gets whether the halt reason is News Pending
        /// </summary>
        /// <value>Gets whether the halt reason is News Pending</value>
        [JsonPropertyName("is_reason_halt_news_pending")]
        public bool? IsReasonHaltNewsPending { get { return this.IsReasonHaltNewsPendingOption; } set { this.IsReasonHaltNewsPendingOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsReasonIpoNotYetTrading
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReasonIpoNotYetTradingOption { get; private set; }

        /// <summary>
        /// Gets whether the halt reason is IPO Not Yet Trading
        /// </summary>
        /// <value>Gets whether the halt reason is IPO Not Yet Trading</value>
        [JsonPropertyName("is_reason_ipo_not_yet_trading")]
        public bool? IsReasonIpoNotYetTrading { get { return this.IsReasonIpoNotYetTradingOption; } set { this.IsReasonIpoNotYetTradingOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsReasonIpoDeferred
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReasonIpoDeferredOption { get; private set; }

        /// <summary>
        /// Gets whether the halt reason is IPO Deferred
        /// </summary>
        /// <value>Gets whether the halt reason is IPO Deferred</value>
        [JsonPropertyName("is_reason_ipo_deferred")]
        public bool? IsReasonIpoDeferred { get { return this.IsReasonIpoDeferredOption; } set { this.IsReasonIpoDeferredOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsReasonHaltNewsDissemination
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReasonHaltNewsDisseminationOption { get; private set; }

        /// <summary>
        /// Gets whether the order acceptance period reason is Halt News Dissemination
        /// </summary>
        /// <value>Gets whether the order acceptance period reason is Halt News Dissemination</value>
        [JsonPropertyName("is_reason_halt_news_dissemination")]
        public bool? IsReasonHaltNewsDissemination { get { return this.IsReasonHaltNewsDisseminationOption; } set { this.IsReasonHaltNewsDisseminationOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsReasonIpoOrderAcceptancePeriod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReasonIpoOrderAcceptancePeriodOption { get; private set; }

        /// <summary>
        /// Gets whether the order acceptance period reason is IPO Order Acceptance Period
        /// </summary>
        /// <value>Gets whether the order acceptance period reason is IPO Order Acceptance Period</value>
        [JsonPropertyName("is_reason_ipo_order_acceptance_period")]
        public bool? IsReasonIpoOrderAcceptancePeriod { get { return this.IsReasonIpoOrderAcceptancePeriodOption; } set { this.IsReasonIpoOrderAcceptancePeriodOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsReasonIpoPreLaunchPeriod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReasonIpoPreLaunchPeriodOption { get; private set; }

        /// <summary>
        /// Gets whether the order acceptance period reason is IPO Pre-Launch Period
        /// </summary>
        /// <value>Gets whether the order acceptance period reason is IPO Pre-Launch Period</value>
        [JsonPropertyName("is_reason_ipo_pre_launch_period")]
        public bool? IsReasonIpoPreLaunchPeriod { get { return this.IsReasonIpoPreLaunchPeriodOption; } set { this.IsReasonIpoPreLaunchPeriodOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsReasonMarketWideCircuitBreakerLevel1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReasonMarketWideCircuitBreakerLevel1Option { get; private set; }

        /// <summary>
        /// Gets whether the order acceptance period reason is Market-Wide Circuit Breaker Level 1 – Breached
        /// </summary>
        /// <value>Gets whether the order acceptance period reason is Market-Wide Circuit Breaker Level 1 – Breached</value>
        [JsonPropertyName("is_reason_market_wide_circuit_breaker_level1")]
        public bool? IsReasonMarketWideCircuitBreakerLevel1 { get { return this.IsReasonMarketWideCircuitBreakerLevel1Option; } set { this.IsReasonMarketWideCircuitBreakerLevel1Option = new(value); } }

        /// <summary>
        /// Used to track the state of IsReasonMarketWideCircuitBreakerLevel2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReasonMarketWideCircuitBreakerLevel2Option { get; private set; }

        /// <summary>
        /// Gets whether the order acceptance period reason is Market-Wide Circuit Breaker Level 2 – Breached
        /// </summary>
        /// <value>Gets whether the order acceptance period reason is Market-Wide Circuit Breaker Level 2 – Breached</value>
        [JsonPropertyName("is_reason_market_wide_circuit_breaker_level2")]
        public bool? IsReasonMarketWideCircuitBreakerLevel2 { get { return this.IsReasonMarketWideCircuitBreakerLevel2Option; } set { this.IsReasonMarketWideCircuitBreakerLevel2Option = new(value); } }

        /// <summary>
        /// Used to track the state of IsReasonMarketWideCircuitBreakerLevel3
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReasonMarketWideCircuitBreakerLevel3Option { get; private set; }

        /// <summary>
        /// Gets whether the halt reason is Market-Wide Circuit Breaker Level 3 – Breached
        /// </summary>
        /// <value>Gets whether the halt reason is Market-Wide Circuit Breaker Level 3 – Breached</value>
        [JsonPropertyName("is_reason_market_wide_circuit_breaker_level3")]
        public bool? IsReasonMarketWideCircuitBreakerLevel3 { get { return this.IsReasonMarketWideCircuitBreakerLevel3Option; } set { this.IsReasonMarketWideCircuitBreakerLevel3Option = new(value); } }

        /// <summary>
        /// Used to track the state of IsReasonNotApplicable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReasonNotApplicableOption { get; private set; }

        /// <summary>
        /// Gets whether the reason is Not Applicable
        /// </summary>
        /// <value>Gets whether the reason is Not Applicable</value>
        [JsonPropertyName("is_reason_not_applicable")]
        public bool? IsReasonNotApplicable { get { return this.IsReasonNotApplicableOption; } set { this.IsReasonNotApplicableOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsReasonNotAvailable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReasonNotAvailableOption { get; private set; }

        /// <summary>
        /// Gets whether the halt reason is Not Available
        /// </summary>
        /// <value>Gets whether the halt reason is Not Available</value>
        [JsonPropertyName("is_reason_not_available")]
        public bool? IsReasonNotAvailable { get { return this.IsReasonNotAvailableOption; } set { this.IsReasonNotAvailableOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdminTradingStatusModel {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  TimestampNanos: ").Append(TimestampNanos).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  IsTradingLive: ").Append(IsTradingLive).Append("\n");
            sb.Append("  IsTradingHalted: ").Append(IsTradingHalted).Append("\n");
            sb.Append("  IsTradingInOrderAcceptancePeriod: ").Append(IsTradingInOrderAcceptancePeriod).Append("\n");
            sb.Append("  IsTradingPaused: ").Append(IsTradingPaused).Append("\n");
            sb.Append("  IsReasonHaltNewsPending: ").Append(IsReasonHaltNewsPending).Append("\n");
            sb.Append("  IsReasonIpoNotYetTrading: ").Append(IsReasonIpoNotYetTrading).Append("\n");
            sb.Append("  IsReasonIpoDeferred: ").Append(IsReasonIpoDeferred).Append("\n");
            sb.Append("  IsReasonHaltNewsDissemination: ").Append(IsReasonHaltNewsDissemination).Append("\n");
            sb.Append("  IsReasonIpoOrderAcceptancePeriod: ").Append(IsReasonIpoOrderAcceptancePeriod).Append("\n");
            sb.Append("  IsReasonIpoPreLaunchPeriod: ").Append(IsReasonIpoPreLaunchPeriod).Append("\n");
            sb.Append("  IsReasonMarketWideCircuitBreakerLevel1: ").Append(IsReasonMarketWideCircuitBreakerLevel1).Append("\n");
            sb.Append("  IsReasonMarketWideCircuitBreakerLevel2: ").Append(IsReasonMarketWideCircuitBreakerLevel2).Append("\n");
            sb.Append("  IsReasonMarketWideCircuitBreakerLevel3: ").Append(IsReasonMarketWideCircuitBreakerLevel3).Append("\n");
            sb.Append("  IsReasonNotApplicable: ").Append(IsReasonNotApplicable).Append("\n");
            sb.Append("  IsReasonNotAvailable: ").Append(IsReasonNotAvailable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdminTradingStatusModel" />
    /// </summary>
    public class AdminTradingStatusModelJsonConverter : JsonConverter<AdminTradingStatusModel>
    {
        /// <summary>
        /// The format to use to serialize Timestamp
        /// </summary>
        public static string TimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AdminTradingStatusModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdminTradingStatusModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> symbol = default;
            Option<long?> timestampNanos = default;
            Option<DateTime?> timestamp = default;
            Option<bool?> isTradingLive = default;
            Option<bool?> isTradingHalted = default;
            Option<bool?> isTradingInOrderAcceptancePeriod = default;
            Option<bool?> isTradingPaused = default;
            Option<bool?> isReasonHaltNewsPending = default;
            Option<bool?> isReasonIpoNotYetTrading = default;
            Option<bool?> isReasonIpoDeferred = default;
            Option<bool?> isReasonHaltNewsDissemination = default;
            Option<bool?> isReasonIpoOrderAcceptancePeriod = default;
            Option<bool?> isReasonIpoPreLaunchPeriod = default;
            Option<bool?> isReasonMarketWideCircuitBreakerLevel1 = default;
            Option<bool?> isReasonMarketWideCircuitBreakerLevel2 = default;
            Option<bool?> isReasonMarketWideCircuitBreakerLevel3 = default;
            Option<bool?> isReasonNotApplicable = default;
            Option<bool?> isReasonNotAvailable = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "symbol":
                            symbol = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "timestamp_nanos":
                            timestampNanos = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "timestamp":
                            timestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "is_trading_live":
                            isTradingLive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_trading_halted":
                            isTradingHalted = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_trading_in_order_acceptance_period":
                            isTradingInOrderAcceptancePeriod = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_trading_paused":
                            isTradingPaused = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_reason_halt_news_pending":
                            isReasonHaltNewsPending = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_reason_ipo_not_yet_trading":
                            isReasonIpoNotYetTrading = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_reason_ipo_deferred":
                            isReasonIpoDeferred = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_reason_halt_news_dissemination":
                            isReasonHaltNewsDissemination = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_reason_ipo_order_acceptance_period":
                            isReasonIpoOrderAcceptancePeriod = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_reason_ipo_pre_launch_period":
                            isReasonIpoPreLaunchPeriod = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_reason_market_wide_circuit_breaker_level1":
                            isReasonMarketWideCircuitBreakerLevel1 = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_reason_market_wide_circuit_breaker_level2":
                            isReasonMarketWideCircuitBreakerLevel2 = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_reason_market_wide_circuit_breaker_level3":
                            isReasonMarketWideCircuitBreakerLevel3 = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_reason_not_applicable":
                            isReasonNotApplicable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_reason_not_available":
                            isReasonNotAvailable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (timestampNanos.IsSet && timestampNanos.Value == null)
                throw new ArgumentNullException(nameof(timestampNanos), "Property is not nullable for class AdminTradingStatusModel.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class AdminTradingStatusModel.");

            if (isTradingLive.IsSet && isTradingLive.Value == null)
                throw new ArgumentNullException(nameof(isTradingLive), "Property is not nullable for class AdminTradingStatusModel.");

            if (isTradingHalted.IsSet && isTradingHalted.Value == null)
                throw new ArgumentNullException(nameof(isTradingHalted), "Property is not nullable for class AdminTradingStatusModel.");

            if (isTradingInOrderAcceptancePeriod.IsSet && isTradingInOrderAcceptancePeriod.Value == null)
                throw new ArgumentNullException(nameof(isTradingInOrderAcceptancePeriod), "Property is not nullable for class AdminTradingStatusModel.");

            if (isTradingPaused.IsSet && isTradingPaused.Value == null)
                throw new ArgumentNullException(nameof(isTradingPaused), "Property is not nullable for class AdminTradingStatusModel.");

            if (isReasonHaltNewsPending.IsSet && isReasonHaltNewsPending.Value == null)
                throw new ArgumentNullException(nameof(isReasonHaltNewsPending), "Property is not nullable for class AdminTradingStatusModel.");

            if (isReasonIpoNotYetTrading.IsSet && isReasonIpoNotYetTrading.Value == null)
                throw new ArgumentNullException(nameof(isReasonIpoNotYetTrading), "Property is not nullable for class AdminTradingStatusModel.");

            if (isReasonIpoDeferred.IsSet && isReasonIpoDeferred.Value == null)
                throw new ArgumentNullException(nameof(isReasonIpoDeferred), "Property is not nullable for class AdminTradingStatusModel.");

            if (isReasonHaltNewsDissemination.IsSet && isReasonHaltNewsDissemination.Value == null)
                throw new ArgumentNullException(nameof(isReasonHaltNewsDissemination), "Property is not nullable for class AdminTradingStatusModel.");

            if (isReasonIpoOrderAcceptancePeriod.IsSet && isReasonIpoOrderAcceptancePeriod.Value == null)
                throw new ArgumentNullException(nameof(isReasonIpoOrderAcceptancePeriod), "Property is not nullable for class AdminTradingStatusModel.");

            if (isReasonIpoPreLaunchPeriod.IsSet && isReasonIpoPreLaunchPeriod.Value == null)
                throw new ArgumentNullException(nameof(isReasonIpoPreLaunchPeriod), "Property is not nullable for class AdminTradingStatusModel.");

            if (isReasonMarketWideCircuitBreakerLevel1.IsSet && isReasonMarketWideCircuitBreakerLevel1.Value == null)
                throw new ArgumentNullException(nameof(isReasonMarketWideCircuitBreakerLevel1), "Property is not nullable for class AdminTradingStatusModel.");

            if (isReasonMarketWideCircuitBreakerLevel2.IsSet && isReasonMarketWideCircuitBreakerLevel2.Value == null)
                throw new ArgumentNullException(nameof(isReasonMarketWideCircuitBreakerLevel2), "Property is not nullable for class AdminTradingStatusModel.");

            if (isReasonMarketWideCircuitBreakerLevel3.IsSet && isReasonMarketWideCircuitBreakerLevel3.Value == null)
                throw new ArgumentNullException(nameof(isReasonMarketWideCircuitBreakerLevel3), "Property is not nullable for class AdminTradingStatusModel.");

            if (isReasonNotApplicable.IsSet && isReasonNotApplicable.Value == null)
                throw new ArgumentNullException(nameof(isReasonNotApplicable), "Property is not nullable for class AdminTradingStatusModel.");

            if (isReasonNotAvailable.IsSet && isReasonNotAvailable.Value == null)
                throw new ArgumentNullException(nameof(isReasonNotAvailable), "Property is not nullable for class AdminTradingStatusModel.");

            return new AdminTradingStatusModel(symbol, timestampNanos, timestamp, isTradingLive, isTradingHalted, isTradingInOrderAcceptancePeriod, isTradingPaused, isReasonHaltNewsPending, isReasonIpoNotYetTrading, isReasonIpoDeferred, isReasonHaltNewsDissemination, isReasonIpoOrderAcceptancePeriod, isReasonIpoPreLaunchPeriod, isReasonMarketWideCircuitBreakerLevel1, isReasonMarketWideCircuitBreakerLevel2, isReasonMarketWideCircuitBreakerLevel3, isReasonNotApplicable, isReasonNotAvailable);
        }

        /// <summary>
        /// Serializes a <see cref="AdminTradingStatusModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adminTradingStatusModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdminTradingStatusModel adminTradingStatusModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, adminTradingStatusModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdminTradingStatusModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adminTradingStatusModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdminTradingStatusModel adminTradingStatusModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (adminTradingStatusModel.SymbolOption.IsSet)
                if (adminTradingStatusModel.SymbolOption.Value != null)
                    writer.WriteString("symbol", adminTradingStatusModel.Symbol);
                else
                    writer.WriteNull("symbol");

            if (adminTradingStatusModel.TimestampNanosOption.IsSet)
                writer.WriteNumber("timestamp_nanos", adminTradingStatusModel.TimestampNanosOption.Value!.Value);

            if (adminTradingStatusModel.TimestampOption.IsSet)
                writer.WriteString("timestamp", adminTradingStatusModel.TimestampOption.Value!.Value.ToString(TimestampFormat));

            if (adminTradingStatusModel.IsTradingLiveOption.IsSet)
                writer.WriteBoolean("is_trading_live", adminTradingStatusModel.IsTradingLiveOption.Value!.Value);

            if (adminTradingStatusModel.IsTradingHaltedOption.IsSet)
                writer.WriteBoolean("is_trading_halted", adminTradingStatusModel.IsTradingHaltedOption.Value!.Value);

            if (adminTradingStatusModel.IsTradingInOrderAcceptancePeriodOption.IsSet)
                writer.WriteBoolean("is_trading_in_order_acceptance_period", adminTradingStatusModel.IsTradingInOrderAcceptancePeriodOption.Value!.Value);

            if (adminTradingStatusModel.IsTradingPausedOption.IsSet)
                writer.WriteBoolean("is_trading_paused", adminTradingStatusModel.IsTradingPausedOption.Value!.Value);

            if (adminTradingStatusModel.IsReasonHaltNewsPendingOption.IsSet)
                writer.WriteBoolean("is_reason_halt_news_pending", adminTradingStatusModel.IsReasonHaltNewsPendingOption.Value!.Value);

            if (adminTradingStatusModel.IsReasonIpoNotYetTradingOption.IsSet)
                writer.WriteBoolean("is_reason_ipo_not_yet_trading", adminTradingStatusModel.IsReasonIpoNotYetTradingOption.Value!.Value);

            if (adminTradingStatusModel.IsReasonIpoDeferredOption.IsSet)
                writer.WriteBoolean("is_reason_ipo_deferred", adminTradingStatusModel.IsReasonIpoDeferredOption.Value!.Value);

            if (adminTradingStatusModel.IsReasonHaltNewsDisseminationOption.IsSet)
                writer.WriteBoolean("is_reason_halt_news_dissemination", adminTradingStatusModel.IsReasonHaltNewsDisseminationOption.Value!.Value);

            if (adminTradingStatusModel.IsReasonIpoOrderAcceptancePeriodOption.IsSet)
                writer.WriteBoolean("is_reason_ipo_order_acceptance_period", adminTradingStatusModel.IsReasonIpoOrderAcceptancePeriodOption.Value!.Value);

            if (adminTradingStatusModel.IsReasonIpoPreLaunchPeriodOption.IsSet)
                writer.WriteBoolean("is_reason_ipo_pre_launch_period", adminTradingStatusModel.IsReasonIpoPreLaunchPeriodOption.Value!.Value);

            if (adminTradingStatusModel.IsReasonMarketWideCircuitBreakerLevel1Option.IsSet)
                writer.WriteBoolean("is_reason_market_wide_circuit_breaker_level1", adminTradingStatusModel.IsReasonMarketWideCircuitBreakerLevel1Option.Value!.Value);

            if (adminTradingStatusModel.IsReasonMarketWideCircuitBreakerLevel2Option.IsSet)
                writer.WriteBoolean("is_reason_market_wide_circuit_breaker_level2", adminTradingStatusModel.IsReasonMarketWideCircuitBreakerLevel2Option.Value!.Value);

            if (adminTradingStatusModel.IsReasonMarketWideCircuitBreakerLevel3Option.IsSet)
                writer.WriteBoolean("is_reason_market_wide_circuit_breaker_level3", adminTradingStatusModel.IsReasonMarketWideCircuitBreakerLevel3Option.Value!.Value);

            if (adminTradingStatusModel.IsReasonNotApplicableOption.IsSet)
                writer.WriteBoolean("is_reason_not_applicable", adminTradingStatusModel.IsReasonNotApplicableOption.Value!.Value);

            if (adminTradingStatusModel.IsReasonNotAvailableOption.IsSet)
                writer.WriteBoolean("is_reason_not_available", adminTradingStatusModel.IsReasonNotAvailableOption.Value!.Value);
        }
    }
}
