// <auto-generated>
/*
 * FinFeedAPI Stock REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.ClientUtils;
using APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client;

namespace APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Model
{
    /// <summary>
    /// Represents the response DTO for short sale price test status information
    /// </summary>
    public partial class AdminShortSalePriceTestStatusModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminShortSalePriceTestStatusModel" /> class.
        /// </summary>
        /// <param name="symbol">The stock symbol</param>
        /// <param name="timestampNanos">Original timestamp in nanoseconds since epoch</param>
        /// <param name="timestamp">Time when the short sale price test status was recorded as DateTime</param>
        /// <param name="shortSalePriceTestStatus">Short sale price test status as byte value</param>
        /// <param name="shortSalePriceTestStatusCode">Short sale price test status as hex string</param>
        /// <param name="shortSalePriceTestStatusText">Human-readable description of the short sale price test status</param>
        /// <param name="isShortSalePriceTestNotInEffect">Indicates if the short sale price test is not in effect</param>
        /// <param name="isShortSalePriceTestInEffect">Indicates if the short sale price test is in effect</param>
        /// <param name="detail">Detail of the short sale price test as byte value</param>
        /// <param name="detailCode">Detail of the short sale price test as character string</param>
        /// <param name="detailText">Human-readable description of the short sale price test detail</param>
        /// <param name="isDetailNoPriceTest">Indicates if there is no price test in place</param>
        /// <param name="isDetailActivated">Indicates if the short sale price test restriction is in effect due to an intraday price drop</param>
        /// <param name="isDetailContinued">Indicates if the short sale price test restriction remains in effect from prior day</param>
        /// <param name="isDetailDeactivated">Indicates if the short sale price test restriction is deactivated</param>
        /// <param name="isDetailNotAvailable">Indicates if the detail is not available</param>
        [JsonConstructor]
        public AdminShortSalePriceTestStatusModel(Option<string?> symbol = default, Option<long?> timestampNanos = default, Option<DateTime?> timestamp = default, Option<int?> shortSalePriceTestStatus = default, Option<string?> shortSalePriceTestStatusCode = default, Option<string?> shortSalePriceTestStatusText = default, Option<bool?> isShortSalePriceTestNotInEffect = default, Option<bool?> isShortSalePriceTestInEffect = default, Option<int?> detail = default, Option<string?> detailCode = default, Option<string?> detailText = default, Option<bool?> isDetailNoPriceTest = default, Option<bool?> isDetailActivated = default, Option<bool?> isDetailContinued = default, Option<bool?> isDetailDeactivated = default, Option<bool?> isDetailNotAvailable = default)
        {
            SymbolOption = symbol;
            TimestampNanosOption = timestampNanos;
            TimestampOption = timestamp;
            ShortSalePriceTestStatusOption = shortSalePriceTestStatus;
            ShortSalePriceTestStatusCodeOption = shortSalePriceTestStatusCode;
            ShortSalePriceTestStatusTextOption = shortSalePriceTestStatusText;
            IsShortSalePriceTestNotInEffectOption = isShortSalePriceTestNotInEffect;
            IsShortSalePriceTestInEffectOption = isShortSalePriceTestInEffect;
            DetailOption = detail;
            DetailCodeOption = detailCode;
            DetailTextOption = detailText;
            IsDetailNoPriceTestOption = isDetailNoPriceTest;
            IsDetailActivatedOption = isDetailActivated;
            IsDetailContinuedOption = isDetailContinued;
            IsDetailDeactivatedOption = isDetailDeactivated;
            IsDetailNotAvailableOption = isDetailNotAvailable;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Symbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SymbolOption { get; private set; }

        /// <summary>
        /// The stock symbol
        /// </summary>
        /// <value>The stock symbol</value>
        [JsonPropertyName("symbol")]
        public string? Symbol { get { return this.SymbolOption; } set { this.SymbolOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimestampNanos
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TimestampNanosOption { get; private set; }

        /// <summary>
        /// Original timestamp in nanoseconds since epoch
        /// </summary>
        /// <value>Original timestamp in nanoseconds since epoch</value>
        [JsonPropertyName("timestamp_nanos")]
        public long? TimestampNanos { get { return this.TimestampNanosOption; } set { this.TimestampNanosOption = new(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimestampOption { get; private set; }

        /// <summary>
        /// Time when the short sale price test status was recorded as DateTime
        /// </summary>
        /// <value>Time when the short sale price test status was recorded as DateTime</value>
        [JsonPropertyName("timestamp")]
        public DateTime? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShortSalePriceTestStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ShortSalePriceTestStatusOption { get; private set; }

        /// <summary>
        /// Short sale price test status as byte value
        /// </summary>
        /// <value>Short sale price test status as byte value</value>
        [JsonPropertyName("short_sale_price_test_status")]
        public int? ShortSalePriceTestStatus { get { return this.ShortSalePriceTestStatusOption; } set { this.ShortSalePriceTestStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShortSalePriceTestStatusCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ShortSalePriceTestStatusCodeOption { get; private set; }

        /// <summary>
        /// Short sale price test status as hex string
        /// </summary>
        /// <value>Short sale price test status as hex string</value>
        [JsonPropertyName("short_sale_price_test_status_code")]
        public string? ShortSalePriceTestStatusCode { get { return this.ShortSalePriceTestStatusCodeOption; } set { this.ShortSalePriceTestStatusCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShortSalePriceTestStatusText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ShortSalePriceTestStatusTextOption { get; private set; }

        /// <summary>
        /// Human-readable description of the short sale price test status
        /// </summary>
        /// <value>Human-readable description of the short sale price test status</value>
        [JsonPropertyName("short_sale_price_test_status_text")]
        public string? ShortSalePriceTestStatusText { get { return this.ShortSalePriceTestStatusTextOption; } set { this.ShortSalePriceTestStatusTextOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsShortSalePriceTestNotInEffect
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsShortSalePriceTestNotInEffectOption { get; private set; }

        /// <summary>
        /// Indicates if the short sale price test is not in effect
        /// </summary>
        /// <value>Indicates if the short sale price test is not in effect</value>
        [JsonPropertyName("is_short_sale_price_test_not_in_effect")]
        public bool? IsShortSalePriceTestNotInEffect { get { return this.IsShortSalePriceTestNotInEffectOption; } set { this.IsShortSalePriceTestNotInEffectOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsShortSalePriceTestInEffect
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsShortSalePriceTestInEffectOption { get; private set; }

        /// <summary>
        /// Indicates if the short sale price test is in effect
        /// </summary>
        /// <value>Indicates if the short sale price test is in effect</value>
        [JsonPropertyName("is_short_sale_price_test_in_effect")]
        public bool? IsShortSalePriceTestInEffect { get { return this.IsShortSalePriceTestInEffectOption; } set { this.IsShortSalePriceTestInEffectOption = new(value); } }

        /// <summary>
        /// Used to track the state of Detail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DetailOption { get; private set; }

        /// <summary>
        /// Detail of the short sale price test as byte value
        /// </summary>
        /// <value>Detail of the short sale price test as byte value</value>
        [JsonPropertyName("detail")]
        public int? Detail { get { return this.DetailOption; } set { this.DetailOption = new(value); } }

        /// <summary>
        /// Used to track the state of DetailCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DetailCodeOption { get; private set; }

        /// <summary>
        /// Detail of the short sale price test as character string
        /// </summary>
        /// <value>Detail of the short sale price test as character string</value>
        [JsonPropertyName("detail_code")]
        public string? DetailCode { get { return this.DetailCodeOption; } set { this.DetailCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DetailText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DetailTextOption { get; private set; }

        /// <summary>
        /// Human-readable description of the short sale price test detail
        /// </summary>
        /// <value>Human-readable description of the short sale price test detail</value>
        [JsonPropertyName("detail_text")]
        public string? DetailText { get { return this.DetailTextOption; } set { this.DetailTextOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsDetailNoPriceTest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDetailNoPriceTestOption { get; private set; }

        /// <summary>
        /// Indicates if there is no price test in place
        /// </summary>
        /// <value>Indicates if there is no price test in place</value>
        [JsonPropertyName("is_detail_no_price_test")]
        public bool? IsDetailNoPriceTest { get { return this.IsDetailNoPriceTestOption; } set { this.IsDetailNoPriceTestOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsDetailActivated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDetailActivatedOption { get; private set; }

        /// <summary>
        /// Indicates if the short sale price test restriction is in effect due to an intraday price drop
        /// </summary>
        /// <value>Indicates if the short sale price test restriction is in effect due to an intraday price drop</value>
        [JsonPropertyName("is_detail_activated")]
        public bool? IsDetailActivated { get { return this.IsDetailActivatedOption; } set { this.IsDetailActivatedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsDetailContinued
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDetailContinuedOption { get; private set; }

        /// <summary>
        /// Indicates if the short sale price test restriction remains in effect from prior day
        /// </summary>
        /// <value>Indicates if the short sale price test restriction remains in effect from prior day</value>
        [JsonPropertyName("is_detail_continued")]
        public bool? IsDetailContinued { get { return this.IsDetailContinuedOption; } set { this.IsDetailContinuedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsDetailDeactivated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDetailDeactivatedOption { get; private set; }

        /// <summary>
        /// Indicates if the short sale price test restriction is deactivated
        /// </summary>
        /// <value>Indicates if the short sale price test restriction is deactivated</value>
        [JsonPropertyName("is_detail_deactivated")]
        public bool? IsDetailDeactivated { get { return this.IsDetailDeactivatedOption; } set { this.IsDetailDeactivatedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsDetailNotAvailable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDetailNotAvailableOption { get; private set; }

        /// <summary>
        /// Indicates if the detail is not available
        /// </summary>
        /// <value>Indicates if the detail is not available</value>
        [JsonPropertyName("is_detail_not_available")]
        public bool? IsDetailNotAvailable { get { return this.IsDetailNotAvailableOption; } set { this.IsDetailNotAvailableOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdminShortSalePriceTestStatusModel {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  TimestampNanos: ").Append(TimestampNanos).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  ShortSalePriceTestStatus: ").Append(ShortSalePriceTestStatus).Append("\n");
            sb.Append("  ShortSalePriceTestStatusCode: ").Append(ShortSalePriceTestStatusCode).Append("\n");
            sb.Append("  ShortSalePriceTestStatusText: ").Append(ShortSalePriceTestStatusText).Append("\n");
            sb.Append("  IsShortSalePriceTestNotInEffect: ").Append(IsShortSalePriceTestNotInEffect).Append("\n");
            sb.Append("  IsShortSalePriceTestInEffect: ").Append(IsShortSalePriceTestInEffect).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  DetailCode: ").Append(DetailCode).Append("\n");
            sb.Append("  DetailText: ").Append(DetailText).Append("\n");
            sb.Append("  IsDetailNoPriceTest: ").Append(IsDetailNoPriceTest).Append("\n");
            sb.Append("  IsDetailActivated: ").Append(IsDetailActivated).Append("\n");
            sb.Append("  IsDetailContinued: ").Append(IsDetailContinued).Append("\n");
            sb.Append("  IsDetailDeactivated: ").Append(IsDetailDeactivated).Append("\n");
            sb.Append("  IsDetailNotAvailable: ").Append(IsDetailNotAvailable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdminShortSalePriceTestStatusModel" />
    /// </summary>
    public class AdminShortSalePriceTestStatusModelJsonConverter : JsonConverter<AdminShortSalePriceTestStatusModel>
    {
        /// <summary>
        /// The format to use to serialize Timestamp
        /// </summary>
        public static string TimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AdminShortSalePriceTestStatusModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdminShortSalePriceTestStatusModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> symbol = default;
            Option<long?> timestampNanos = default;
            Option<DateTime?> timestamp = default;
            Option<int?> shortSalePriceTestStatus = default;
            Option<string?> shortSalePriceTestStatusCode = default;
            Option<string?> shortSalePriceTestStatusText = default;
            Option<bool?> isShortSalePriceTestNotInEffect = default;
            Option<bool?> isShortSalePriceTestInEffect = default;
            Option<int?> detail = default;
            Option<string?> detailCode = default;
            Option<string?> detailText = default;
            Option<bool?> isDetailNoPriceTest = default;
            Option<bool?> isDetailActivated = default;
            Option<bool?> isDetailContinued = default;
            Option<bool?> isDetailDeactivated = default;
            Option<bool?> isDetailNotAvailable = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "symbol":
                            symbol = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "timestamp_nanos":
                            timestampNanos = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "timestamp":
                            timestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "short_sale_price_test_status":
                            shortSalePriceTestStatus = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "short_sale_price_test_status_code":
                            shortSalePriceTestStatusCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "short_sale_price_test_status_text":
                            shortSalePriceTestStatusText = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_short_sale_price_test_not_in_effect":
                            isShortSalePriceTestNotInEffect = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_short_sale_price_test_in_effect":
                            isShortSalePriceTestInEffect = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "detail":
                            detail = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "detail_code":
                            detailCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "detail_text":
                            detailText = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_detail_no_price_test":
                            isDetailNoPriceTest = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_detail_activated":
                            isDetailActivated = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_detail_continued":
                            isDetailContinued = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_detail_deactivated":
                            isDetailDeactivated = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_detail_not_available":
                            isDetailNotAvailable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (timestampNanos.IsSet && timestampNanos.Value == null)
                throw new ArgumentNullException(nameof(timestampNanos), "Property is not nullable for class AdminShortSalePriceTestStatusModel.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class AdminShortSalePriceTestStatusModel.");

            if (shortSalePriceTestStatus.IsSet && shortSalePriceTestStatus.Value == null)
                throw new ArgumentNullException(nameof(shortSalePriceTestStatus), "Property is not nullable for class AdminShortSalePriceTestStatusModel.");

            if (isShortSalePriceTestNotInEffect.IsSet && isShortSalePriceTestNotInEffect.Value == null)
                throw new ArgumentNullException(nameof(isShortSalePriceTestNotInEffect), "Property is not nullable for class AdminShortSalePriceTestStatusModel.");

            if (isShortSalePriceTestInEffect.IsSet && isShortSalePriceTestInEffect.Value == null)
                throw new ArgumentNullException(nameof(isShortSalePriceTestInEffect), "Property is not nullable for class AdminShortSalePriceTestStatusModel.");

            if (detail.IsSet && detail.Value == null)
                throw new ArgumentNullException(nameof(detail), "Property is not nullable for class AdminShortSalePriceTestStatusModel.");

            if (isDetailNoPriceTest.IsSet && isDetailNoPriceTest.Value == null)
                throw new ArgumentNullException(nameof(isDetailNoPriceTest), "Property is not nullable for class AdminShortSalePriceTestStatusModel.");

            if (isDetailActivated.IsSet && isDetailActivated.Value == null)
                throw new ArgumentNullException(nameof(isDetailActivated), "Property is not nullable for class AdminShortSalePriceTestStatusModel.");

            if (isDetailContinued.IsSet && isDetailContinued.Value == null)
                throw new ArgumentNullException(nameof(isDetailContinued), "Property is not nullable for class AdminShortSalePriceTestStatusModel.");

            if (isDetailDeactivated.IsSet && isDetailDeactivated.Value == null)
                throw new ArgumentNullException(nameof(isDetailDeactivated), "Property is not nullable for class AdminShortSalePriceTestStatusModel.");

            if (isDetailNotAvailable.IsSet && isDetailNotAvailable.Value == null)
                throw new ArgumentNullException(nameof(isDetailNotAvailable), "Property is not nullable for class AdminShortSalePriceTestStatusModel.");

            return new AdminShortSalePriceTestStatusModel(symbol, timestampNanos, timestamp, shortSalePriceTestStatus, shortSalePriceTestStatusCode, shortSalePriceTestStatusText, isShortSalePriceTestNotInEffect, isShortSalePriceTestInEffect, detail, detailCode, detailText, isDetailNoPriceTest, isDetailActivated, isDetailContinued, isDetailDeactivated, isDetailNotAvailable);
        }

        /// <summary>
        /// Serializes a <see cref="AdminShortSalePriceTestStatusModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adminShortSalePriceTestStatusModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdminShortSalePriceTestStatusModel adminShortSalePriceTestStatusModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, adminShortSalePriceTestStatusModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdminShortSalePriceTestStatusModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adminShortSalePriceTestStatusModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdminShortSalePriceTestStatusModel adminShortSalePriceTestStatusModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (adminShortSalePriceTestStatusModel.SymbolOption.IsSet)
                if (adminShortSalePriceTestStatusModel.SymbolOption.Value != null)
                    writer.WriteString("symbol", adminShortSalePriceTestStatusModel.Symbol);
                else
                    writer.WriteNull("symbol");

            if (adminShortSalePriceTestStatusModel.TimestampNanosOption.IsSet)
                writer.WriteNumber("timestamp_nanos", adminShortSalePriceTestStatusModel.TimestampNanosOption.Value!.Value);

            if (adminShortSalePriceTestStatusModel.TimestampOption.IsSet)
                writer.WriteString("timestamp", adminShortSalePriceTestStatusModel.TimestampOption.Value!.Value.ToString(TimestampFormat));

            if (adminShortSalePriceTestStatusModel.ShortSalePriceTestStatusOption.IsSet)
                writer.WriteNumber("short_sale_price_test_status", adminShortSalePriceTestStatusModel.ShortSalePriceTestStatusOption.Value!.Value);

            if (adminShortSalePriceTestStatusModel.ShortSalePriceTestStatusCodeOption.IsSet)
                if (adminShortSalePriceTestStatusModel.ShortSalePriceTestStatusCodeOption.Value != null)
                    writer.WriteString("short_sale_price_test_status_code", adminShortSalePriceTestStatusModel.ShortSalePriceTestStatusCode);
                else
                    writer.WriteNull("short_sale_price_test_status_code");

            if (adminShortSalePriceTestStatusModel.ShortSalePriceTestStatusTextOption.IsSet)
                if (adminShortSalePriceTestStatusModel.ShortSalePriceTestStatusTextOption.Value != null)
                    writer.WriteString("short_sale_price_test_status_text", adminShortSalePriceTestStatusModel.ShortSalePriceTestStatusText);
                else
                    writer.WriteNull("short_sale_price_test_status_text");

            if (adminShortSalePriceTestStatusModel.IsShortSalePriceTestNotInEffectOption.IsSet)
                writer.WriteBoolean("is_short_sale_price_test_not_in_effect", adminShortSalePriceTestStatusModel.IsShortSalePriceTestNotInEffectOption.Value!.Value);

            if (adminShortSalePriceTestStatusModel.IsShortSalePriceTestInEffectOption.IsSet)
                writer.WriteBoolean("is_short_sale_price_test_in_effect", adminShortSalePriceTestStatusModel.IsShortSalePriceTestInEffectOption.Value!.Value);

            if (adminShortSalePriceTestStatusModel.DetailOption.IsSet)
                writer.WriteNumber("detail", adminShortSalePriceTestStatusModel.DetailOption.Value!.Value);

            if (adminShortSalePriceTestStatusModel.DetailCodeOption.IsSet)
                if (adminShortSalePriceTestStatusModel.DetailCodeOption.Value != null)
                    writer.WriteString("detail_code", adminShortSalePriceTestStatusModel.DetailCode);
                else
                    writer.WriteNull("detail_code");

            if (adminShortSalePriceTestStatusModel.DetailTextOption.IsSet)
                if (adminShortSalePriceTestStatusModel.DetailTextOption.Value != null)
                    writer.WriteString("detail_text", adminShortSalePriceTestStatusModel.DetailText);
                else
                    writer.WriteNull("detail_text");

            if (adminShortSalePriceTestStatusModel.IsDetailNoPriceTestOption.IsSet)
                writer.WriteBoolean("is_detail_no_price_test", adminShortSalePriceTestStatusModel.IsDetailNoPriceTestOption.Value!.Value);

            if (adminShortSalePriceTestStatusModel.IsDetailActivatedOption.IsSet)
                writer.WriteBoolean("is_detail_activated", adminShortSalePriceTestStatusModel.IsDetailActivatedOption.Value!.Value);

            if (adminShortSalePriceTestStatusModel.IsDetailContinuedOption.IsSet)
                writer.WriteBoolean("is_detail_continued", adminShortSalePriceTestStatusModel.IsDetailContinuedOption.Value!.Value);

            if (adminShortSalePriceTestStatusModel.IsDetailDeactivatedOption.IsSet)
                writer.WriteBoolean("is_detail_deactivated", adminShortSalePriceTestStatusModel.IsDetailDeactivatedOption.Value!.Value);

            if (adminShortSalePriceTestStatusModel.IsDetailNotAvailableOption.IsSet)
                writer.WriteBoolean("is_detail_not_available", adminShortSalePriceTestStatusModel.IsDetailNotAvailableOption.Value!.Value);
        }
    }
}
