// <auto-generated>
/*
 * FinFeedAPI Stock REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.ClientUtils;
using APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client;

namespace APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Model
{
    /// <summary>
    /// Represents the response DTO for operational halt status information
    /// </summary>
    public partial class AdminOperationalHaltStatusModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminOperationalHaltStatusModel" /> class.
        /// </summary>
        /// <param name="symbol">The stock symbol</param>
        /// <param name="timestampNanos">Original timestamp in nanoseconds since epoch</param>
        /// <param name="timestamp">Time when the operational halt status was recorded as DateTime</param>
        /// <param name="operationalHaltStatus">Operational halt status as byte value</param>
        /// <param name="operationalHaltStatusCode">Operational halt status as character string</param>
        /// <param name="operationalHaltStatusText">Human-readable description of the operational halt status</param>
        /// <param name="isOperationallyHalted">Indicates if the status is &#39;IEX specific operational trading halt&#39; (&#39;O&#39;/0x4f).</param>
        /// <param name="isNotOperationallyHalted">Indicates if the status is &#39;Not operationally halted on IEX&#39; (&#39;N&#39;/0x4e).</param>
        [JsonConstructor]
        public AdminOperationalHaltStatusModel(Option<string?> symbol = default, Option<long?> timestampNanos = default, Option<DateTime?> timestamp = default, Option<int?> operationalHaltStatus = default, Option<string?> operationalHaltStatusCode = default, Option<string?> operationalHaltStatusText = default, Option<bool?> isOperationallyHalted = default, Option<bool?> isNotOperationallyHalted = default)
        {
            SymbolOption = symbol;
            TimestampNanosOption = timestampNanos;
            TimestampOption = timestamp;
            OperationalHaltStatusOption = operationalHaltStatus;
            OperationalHaltStatusCodeOption = operationalHaltStatusCode;
            OperationalHaltStatusTextOption = operationalHaltStatusText;
            IsOperationallyHaltedOption = isOperationallyHalted;
            IsNotOperationallyHaltedOption = isNotOperationallyHalted;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Symbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SymbolOption { get; private set; }

        /// <summary>
        /// The stock symbol
        /// </summary>
        /// <value>The stock symbol</value>
        [JsonPropertyName("symbol")]
        public string? Symbol { get { return this.SymbolOption; } set { this.SymbolOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimestampNanos
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TimestampNanosOption { get; private set; }

        /// <summary>
        /// Original timestamp in nanoseconds since epoch
        /// </summary>
        /// <value>Original timestamp in nanoseconds since epoch</value>
        [JsonPropertyName("timestamp_nanos")]
        public long? TimestampNanos { get { return this.TimestampNanosOption; } set { this.TimestampNanosOption = new(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimestampOption { get; private set; }

        /// <summary>
        /// Time when the operational halt status was recorded as DateTime
        /// </summary>
        /// <value>Time when the operational halt status was recorded as DateTime</value>
        [JsonPropertyName("timestamp")]
        public DateTime? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new(value); } }

        /// <summary>
        /// Used to track the state of OperationalHaltStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OperationalHaltStatusOption { get; private set; }

        /// <summary>
        /// Operational halt status as byte value
        /// </summary>
        /// <value>Operational halt status as byte value</value>
        [JsonPropertyName("operational_halt_status")]
        public int? OperationalHaltStatus { get { return this.OperationalHaltStatusOption; } set { this.OperationalHaltStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of OperationalHaltStatusCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OperationalHaltStatusCodeOption { get; private set; }

        /// <summary>
        /// Operational halt status as character string
        /// </summary>
        /// <value>Operational halt status as character string</value>
        [JsonPropertyName("operational_halt_status_code")]
        public string? OperationalHaltStatusCode { get { return this.OperationalHaltStatusCodeOption; } set { this.OperationalHaltStatusCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of OperationalHaltStatusText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OperationalHaltStatusTextOption { get; private set; }

        /// <summary>
        /// Human-readable description of the operational halt status
        /// </summary>
        /// <value>Human-readable description of the operational halt status</value>
        [JsonPropertyName("operational_halt_status_text")]
        public string? OperationalHaltStatusText { get { return this.OperationalHaltStatusTextOption; } set { this.OperationalHaltStatusTextOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsOperationallyHalted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsOperationallyHaltedOption { get; private set; }

        /// <summary>
        /// Indicates if the status is &#39;IEX specific operational trading halt&#39; (&#39;O&#39;/0x4f).
        /// </summary>
        /// <value>Indicates if the status is &#39;IEX specific operational trading halt&#39; (&#39;O&#39;/0x4f).</value>
        [JsonPropertyName("is_operationally_halted")]
        public bool? IsOperationallyHalted { get { return this.IsOperationallyHaltedOption; } set { this.IsOperationallyHaltedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsNotOperationallyHalted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsNotOperationallyHaltedOption { get; private set; }

        /// <summary>
        /// Indicates if the status is &#39;Not operationally halted on IEX&#39; (&#39;N&#39;/0x4e).
        /// </summary>
        /// <value>Indicates if the status is &#39;Not operationally halted on IEX&#39; (&#39;N&#39;/0x4e).</value>
        [JsonPropertyName("is_not_operationally_halted")]
        public bool? IsNotOperationallyHalted { get { return this.IsNotOperationallyHaltedOption; } set { this.IsNotOperationallyHaltedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdminOperationalHaltStatusModel {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  TimestampNanos: ").Append(TimestampNanos).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  OperationalHaltStatus: ").Append(OperationalHaltStatus).Append("\n");
            sb.Append("  OperationalHaltStatusCode: ").Append(OperationalHaltStatusCode).Append("\n");
            sb.Append("  OperationalHaltStatusText: ").Append(OperationalHaltStatusText).Append("\n");
            sb.Append("  IsOperationallyHalted: ").Append(IsOperationallyHalted).Append("\n");
            sb.Append("  IsNotOperationallyHalted: ").Append(IsNotOperationallyHalted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdminOperationalHaltStatusModel" />
    /// </summary>
    public class AdminOperationalHaltStatusModelJsonConverter : JsonConverter<AdminOperationalHaltStatusModel>
    {
        /// <summary>
        /// The format to use to serialize Timestamp
        /// </summary>
        public static string TimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AdminOperationalHaltStatusModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdminOperationalHaltStatusModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> symbol = default;
            Option<long?> timestampNanos = default;
            Option<DateTime?> timestamp = default;
            Option<int?> operationalHaltStatus = default;
            Option<string?> operationalHaltStatusCode = default;
            Option<string?> operationalHaltStatusText = default;
            Option<bool?> isOperationallyHalted = default;
            Option<bool?> isNotOperationallyHalted = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "symbol":
                            symbol = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "timestamp_nanos":
                            timestampNanos = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "timestamp":
                            timestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "operational_halt_status":
                            operationalHaltStatus = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "operational_halt_status_code":
                            operationalHaltStatusCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "operational_halt_status_text":
                            operationalHaltStatusText = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_operationally_halted":
                            isOperationallyHalted = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_not_operationally_halted":
                            isNotOperationallyHalted = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (timestampNanos.IsSet && timestampNanos.Value == null)
                throw new ArgumentNullException(nameof(timestampNanos), "Property is not nullable for class AdminOperationalHaltStatusModel.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class AdminOperationalHaltStatusModel.");

            if (operationalHaltStatus.IsSet && operationalHaltStatus.Value == null)
                throw new ArgumentNullException(nameof(operationalHaltStatus), "Property is not nullable for class AdminOperationalHaltStatusModel.");

            if (isOperationallyHalted.IsSet && isOperationallyHalted.Value == null)
                throw new ArgumentNullException(nameof(isOperationallyHalted), "Property is not nullable for class AdminOperationalHaltStatusModel.");

            if (isNotOperationallyHalted.IsSet && isNotOperationallyHalted.Value == null)
                throw new ArgumentNullException(nameof(isNotOperationallyHalted), "Property is not nullable for class AdminOperationalHaltStatusModel.");

            return new AdminOperationalHaltStatusModel(symbol, timestampNanos, timestamp, operationalHaltStatus, operationalHaltStatusCode, operationalHaltStatusText, isOperationallyHalted, isNotOperationallyHalted);
        }

        /// <summary>
        /// Serializes a <see cref="AdminOperationalHaltStatusModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adminOperationalHaltStatusModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdminOperationalHaltStatusModel adminOperationalHaltStatusModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, adminOperationalHaltStatusModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdminOperationalHaltStatusModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adminOperationalHaltStatusModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdminOperationalHaltStatusModel adminOperationalHaltStatusModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (adminOperationalHaltStatusModel.SymbolOption.IsSet)
                if (adminOperationalHaltStatusModel.SymbolOption.Value != null)
                    writer.WriteString("symbol", adminOperationalHaltStatusModel.Symbol);
                else
                    writer.WriteNull("symbol");

            if (adminOperationalHaltStatusModel.TimestampNanosOption.IsSet)
                writer.WriteNumber("timestamp_nanos", adminOperationalHaltStatusModel.TimestampNanosOption.Value!.Value);

            if (adminOperationalHaltStatusModel.TimestampOption.IsSet)
                writer.WriteString("timestamp", adminOperationalHaltStatusModel.TimestampOption.Value!.Value.ToString(TimestampFormat));

            if (adminOperationalHaltStatusModel.OperationalHaltStatusOption.IsSet)
                writer.WriteNumber("operational_halt_status", adminOperationalHaltStatusModel.OperationalHaltStatusOption.Value!.Value);

            if (adminOperationalHaltStatusModel.OperationalHaltStatusCodeOption.IsSet)
                if (adminOperationalHaltStatusModel.OperationalHaltStatusCodeOption.Value != null)
                    writer.WriteString("operational_halt_status_code", adminOperationalHaltStatusModel.OperationalHaltStatusCode);
                else
                    writer.WriteNull("operational_halt_status_code");

            if (adminOperationalHaltStatusModel.OperationalHaltStatusTextOption.IsSet)
                if (adminOperationalHaltStatusModel.OperationalHaltStatusTextOption.Value != null)
                    writer.WriteString("operational_halt_status_text", adminOperationalHaltStatusModel.OperationalHaltStatusText);
                else
                    writer.WriteNull("operational_halt_status_text");

            if (adminOperationalHaltStatusModel.IsOperationallyHaltedOption.IsSet)
                writer.WriteBoolean("is_operationally_halted", adminOperationalHaltStatusModel.IsOperationallyHaltedOption.Value!.Value);

            if (adminOperationalHaltStatusModel.IsNotOperationallyHaltedOption.IsSet)
                writer.WriteBoolean("is_not_operationally_halted", adminOperationalHaltStatusModel.IsNotOperationallyHaltedOption.Value!.Value);
        }
    }
}
