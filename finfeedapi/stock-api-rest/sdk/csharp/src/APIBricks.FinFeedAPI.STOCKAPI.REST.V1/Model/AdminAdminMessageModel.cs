// <auto-generated>
/*
 * FinFeedAPI Stock REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.ClientUtils;
using APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client;

namespace APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Model
{
    /// <summary>
    /// Represents the response DTO for IEX admin information, combining all symbol-based admin message types
    /// </summary>
    public partial class AdminAdminMessageModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminAdminMessageModel" /> class.
        /// </summary>
        /// <param name="tradingStatus">tradingStatus</param>
        /// <param name="officialPrice">officialPrice</param>
        /// <param name="securityEvent">securityEvent</param>
        /// <param name="auctionInformation">auctionInformation</param>
        /// <param name="shortSalePriceTest">shortSalePriceTest</param>
        /// <param name="operationalHaltStatus">operationalHaltStatus</param>
        /// <param name="retailLiquidityIndicator">retailLiquidityIndicator</param>
        /// <param name="systemEvent">systemEvent</param>
        /// <param name="securityDirectory">securityDirectory</param>
        [JsonConstructor]
        public AdminAdminMessageModel(Option<AdminTradingStatusModel?> tradingStatus = default, Option<AdminOfficialPriceModel?> officialPrice = default, Option<AdminSecurityEventModel?> securityEvent = default, Option<AdminAuctionInformationModel?> auctionInformation = default, Option<AdminShortSalePriceTestStatusModel?> shortSalePriceTest = default, Option<AdminOperationalHaltStatusModel?> operationalHaltStatus = default, Option<AdminRetailLiquidityIndicatorModel?> retailLiquidityIndicator = default, Option<AdminSystemEventModel?> systemEvent = default, Option<AdminSecurityDirectoryModel?> securityDirectory = default)
        {
            TradingStatusOption = tradingStatus;
            OfficialPriceOption = officialPrice;
            SecurityEventOption = securityEvent;
            AuctionInformationOption = auctionInformation;
            ShortSalePriceTestOption = shortSalePriceTest;
            OperationalHaltStatusOption = operationalHaltStatus;
            RetailLiquidityIndicatorOption = retailLiquidityIndicator;
            SystemEventOption = systemEvent;
            SecurityDirectoryOption = securityDirectory;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of TradingStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AdminTradingStatusModel?> TradingStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets TradingStatus
        /// </summary>
        [JsonPropertyName("trading_status")]
        public AdminTradingStatusModel? TradingStatus { get { return this.TradingStatusOption; } set { this.TradingStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of OfficialPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AdminOfficialPriceModel?> OfficialPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets OfficialPrice
        /// </summary>
        [JsonPropertyName("official_price")]
        public AdminOfficialPriceModel? OfficialPrice { get { return this.OfficialPriceOption; } set { this.OfficialPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of SecurityEvent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AdminSecurityEventModel?> SecurityEventOption { get; private set; }

        /// <summary>
        /// Gets or Sets SecurityEvent
        /// </summary>
        [JsonPropertyName("security_event")]
        public AdminSecurityEventModel? SecurityEvent { get { return this.SecurityEventOption; } set { this.SecurityEventOption = new(value); } }

        /// <summary>
        /// Used to track the state of AuctionInformation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AdminAuctionInformationModel?> AuctionInformationOption { get; private set; }

        /// <summary>
        /// Gets or Sets AuctionInformation
        /// </summary>
        [JsonPropertyName("auction_information")]
        public AdminAuctionInformationModel? AuctionInformation { get { return this.AuctionInformationOption; } set { this.AuctionInformationOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShortSalePriceTest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AdminShortSalePriceTestStatusModel?> ShortSalePriceTestOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShortSalePriceTest
        /// </summary>
        [JsonPropertyName("short_sale_price_test")]
        public AdminShortSalePriceTestStatusModel? ShortSalePriceTest { get { return this.ShortSalePriceTestOption; } set { this.ShortSalePriceTestOption = new(value); } }

        /// <summary>
        /// Used to track the state of OperationalHaltStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AdminOperationalHaltStatusModel?> OperationalHaltStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets OperationalHaltStatus
        /// </summary>
        [JsonPropertyName("operational_halt_status")]
        public AdminOperationalHaltStatusModel? OperationalHaltStatus { get { return this.OperationalHaltStatusOption; } set { this.OperationalHaltStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of RetailLiquidityIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AdminRetailLiquidityIndicatorModel?> RetailLiquidityIndicatorOption { get; private set; }

        /// <summary>
        /// Gets or Sets RetailLiquidityIndicator
        /// </summary>
        [JsonPropertyName("retail_liquidity_indicator")]
        public AdminRetailLiquidityIndicatorModel? RetailLiquidityIndicator { get { return this.RetailLiquidityIndicatorOption; } set { this.RetailLiquidityIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of SystemEvent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AdminSystemEventModel?> SystemEventOption { get; private set; }

        /// <summary>
        /// Gets or Sets SystemEvent
        /// </summary>
        [JsonPropertyName("system_event")]
        public AdminSystemEventModel? SystemEvent { get { return this.SystemEventOption; } set { this.SystemEventOption = new(value); } }

        /// <summary>
        /// Used to track the state of SecurityDirectory
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AdminSecurityDirectoryModel?> SecurityDirectoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets SecurityDirectory
        /// </summary>
        [JsonPropertyName("security_directory")]
        public AdminSecurityDirectoryModel? SecurityDirectory { get { return this.SecurityDirectoryOption; } set { this.SecurityDirectoryOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdminAdminMessageModel {\n");
            sb.Append("  TradingStatus: ").Append(TradingStatus).Append("\n");
            sb.Append("  OfficialPrice: ").Append(OfficialPrice).Append("\n");
            sb.Append("  SecurityEvent: ").Append(SecurityEvent).Append("\n");
            sb.Append("  AuctionInformation: ").Append(AuctionInformation).Append("\n");
            sb.Append("  ShortSalePriceTest: ").Append(ShortSalePriceTest).Append("\n");
            sb.Append("  OperationalHaltStatus: ").Append(OperationalHaltStatus).Append("\n");
            sb.Append("  RetailLiquidityIndicator: ").Append(RetailLiquidityIndicator).Append("\n");
            sb.Append("  SystemEvent: ").Append(SystemEvent).Append("\n");
            sb.Append("  SecurityDirectory: ").Append(SecurityDirectory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdminAdminMessageModel" />
    /// </summary>
    public class AdminAdminMessageModelJsonConverter : JsonConverter<AdminAdminMessageModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdminAdminMessageModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdminAdminMessageModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AdminTradingStatusModel?> tradingStatus = default;
            Option<AdminOfficialPriceModel?> officialPrice = default;
            Option<AdminSecurityEventModel?> securityEvent = default;
            Option<AdminAuctionInformationModel?> auctionInformation = default;
            Option<AdminShortSalePriceTestStatusModel?> shortSalePriceTest = default;
            Option<AdminOperationalHaltStatusModel?> operationalHaltStatus = default;
            Option<AdminRetailLiquidityIndicatorModel?> retailLiquidityIndicator = default;
            Option<AdminSystemEventModel?> systemEvent = default;
            Option<AdminSecurityDirectoryModel?> securityDirectory = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "trading_status":
                            tradingStatus = new Option<AdminTradingStatusModel?>(JsonSerializer.Deserialize<AdminTradingStatusModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "official_price":
                            officialPrice = new Option<AdminOfficialPriceModel?>(JsonSerializer.Deserialize<AdminOfficialPriceModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "security_event":
                            securityEvent = new Option<AdminSecurityEventModel?>(JsonSerializer.Deserialize<AdminSecurityEventModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "auction_information":
                            auctionInformation = new Option<AdminAuctionInformationModel?>(JsonSerializer.Deserialize<AdminAuctionInformationModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "short_sale_price_test":
                            shortSalePriceTest = new Option<AdminShortSalePriceTestStatusModel?>(JsonSerializer.Deserialize<AdminShortSalePriceTestStatusModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "operational_halt_status":
                            operationalHaltStatus = new Option<AdminOperationalHaltStatusModel?>(JsonSerializer.Deserialize<AdminOperationalHaltStatusModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "retail_liquidity_indicator":
                            retailLiquidityIndicator = new Option<AdminRetailLiquidityIndicatorModel?>(JsonSerializer.Deserialize<AdminRetailLiquidityIndicatorModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "system_event":
                            systemEvent = new Option<AdminSystemEventModel?>(JsonSerializer.Deserialize<AdminSystemEventModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "security_directory":
                            securityDirectory = new Option<AdminSecurityDirectoryModel?>(JsonSerializer.Deserialize<AdminSecurityDirectoryModel>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (tradingStatus.IsSet && tradingStatus.Value == null)
                throw new ArgumentNullException(nameof(tradingStatus), "Property is not nullable for class AdminAdminMessageModel.");

            if (officialPrice.IsSet && officialPrice.Value == null)
                throw new ArgumentNullException(nameof(officialPrice), "Property is not nullable for class AdminAdminMessageModel.");

            if (securityEvent.IsSet && securityEvent.Value == null)
                throw new ArgumentNullException(nameof(securityEvent), "Property is not nullable for class AdminAdminMessageModel.");

            if (auctionInformation.IsSet && auctionInformation.Value == null)
                throw new ArgumentNullException(nameof(auctionInformation), "Property is not nullable for class AdminAdminMessageModel.");

            if (shortSalePriceTest.IsSet && shortSalePriceTest.Value == null)
                throw new ArgumentNullException(nameof(shortSalePriceTest), "Property is not nullable for class AdminAdminMessageModel.");

            if (operationalHaltStatus.IsSet && operationalHaltStatus.Value == null)
                throw new ArgumentNullException(nameof(operationalHaltStatus), "Property is not nullable for class AdminAdminMessageModel.");

            if (retailLiquidityIndicator.IsSet && retailLiquidityIndicator.Value == null)
                throw new ArgumentNullException(nameof(retailLiquidityIndicator), "Property is not nullable for class AdminAdminMessageModel.");

            if (systemEvent.IsSet && systemEvent.Value == null)
                throw new ArgumentNullException(nameof(systemEvent), "Property is not nullable for class AdminAdminMessageModel.");

            if (securityDirectory.IsSet && securityDirectory.Value == null)
                throw new ArgumentNullException(nameof(securityDirectory), "Property is not nullable for class AdminAdminMessageModel.");

            return new AdminAdminMessageModel(tradingStatus, officialPrice, securityEvent, auctionInformation, shortSalePriceTest, operationalHaltStatus, retailLiquidityIndicator, systemEvent, securityDirectory);
        }

        /// <summary>
        /// Serializes a <see cref="AdminAdminMessageModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adminAdminMessageModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdminAdminMessageModel adminAdminMessageModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, adminAdminMessageModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdminAdminMessageModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adminAdminMessageModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdminAdminMessageModel adminAdminMessageModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (adminAdminMessageModel.TradingStatusOption.IsSet && adminAdminMessageModel.TradingStatus == null)
                throw new ArgumentNullException(nameof(adminAdminMessageModel.TradingStatus), "Property is required for class AdminAdminMessageModel.");

            if (adminAdminMessageModel.OfficialPriceOption.IsSet && adminAdminMessageModel.OfficialPrice == null)
                throw new ArgumentNullException(nameof(adminAdminMessageModel.OfficialPrice), "Property is required for class AdminAdminMessageModel.");

            if (adminAdminMessageModel.SecurityEventOption.IsSet && adminAdminMessageModel.SecurityEvent == null)
                throw new ArgumentNullException(nameof(adminAdminMessageModel.SecurityEvent), "Property is required for class AdminAdminMessageModel.");

            if (adminAdminMessageModel.AuctionInformationOption.IsSet && adminAdminMessageModel.AuctionInformation == null)
                throw new ArgumentNullException(nameof(adminAdminMessageModel.AuctionInformation), "Property is required for class AdminAdminMessageModel.");

            if (adminAdminMessageModel.ShortSalePriceTestOption.IsSet && adminAdminMessageModel.ShortSalePriceTest == null)
                throw new ArgumentNullException(nameof(adminAdminMessageModel.ShortSalePriceTest), "Property is required for class AdminAdminMessageModel.");

            if (adminAdminMessageModel.OperationalHaltStatusOption.IsSet && adminAdminMessageModel.OperationalHaltStatus == null)
                throw new ArgumentNullException(nameof(adminAdminMessageModel.OperationalHaltStatus), "Property is required for class AdminAdminMessageModel.");

            if (adminAdminMessageModel.RetailLiquidityIndicatorOption.IsSet && adminAdminMessageModel.RetailLiquidityIndicator == null)
                throw new ArgumentNullException(nameof(adminAdminMessageModel.RetailLiquidityIndicator), "Property is required for class AdminAdminMessageModel.");

            if (adminAdminMessageModel.SystemEventOption.IsSet && adminAdminMessageModel.SystemEvent == null)
                throw new ArgumentNullException(nameof(adminAdminMessageModel.SystemEvent), "Property is required for class AdminAdminMessageModel.");

            if (adminAdminMessageModel.SecurityDirectoryOption.IsSet && adminAdminMessageModel.SecurityDirectory == null)
                throw new ArgumentNullException(nameof(adminAdminMessageModel.SecurityDirectory), "Property is required for class AdminAdminMessageModel.");

            if (adminAdminMessageModel.TradingStatusOption.IsSet)
            {
                writer.WritePropertyName("trading_status");
                JsonSerializer.Serialize(writer, adminAdminMessageModel.TradingStatus, jsonSerializerOptions);
            }
            if (adminAdminMessageModel.OfficialPriceOption.IsSet)
            {
                writer.WritePropertyName("official_price");
                JsonSerializer.Serialize(writer, adminAdminMessageModel.OfficialPrice, jsonSerializerOptions);
            }
            if (adminAdminMessageModel.SecurityEventOption.IsSet)
            {
                writer.WritePropertyName("security_event");
                JsonSerializer.Serialize(writer, adminAdminMessageModel.SecurityEvent, jsonSerializerOptions);
            }
            if (adminAdminMessageModel.AuctionInformationOption.IsSet)
            {
                writer.WritePropertyName("auction_information");
                JsonSerializer.Serialize(writer, adminAdminMessageModel.AuctionInformation, jsonSerializerOptions);
            }
            if (adminAdminMessageModel.ShortSalePriceTestOption.IsSet)
            {
                writer.WritePropertyName("short_sale_price_test");
                JsonSerializer.Serialize(writer, adminAdminMessageModel.ShortSalePriceTest, jsonSerializerOptions);
            }
            if (adminAdminMessageModel.OperationalHaltStatusOption.IsSet)
            {
                writer.WritePropertyName("operational_halt_status");
                JsonSerializer.Serialize(writer, adminAdminMessageModel.OperationalHaltStatus, jsonSerializerOptions);
            }
            if (adminAdminMessageModel.RetailLiquidityIndicatorOption.IsSet)
            {
                writer.WritePropertyName("retail_liquidity_indicator");
                JsonSerializer.Serialize(writer, adminAdminMessageModel.RetailLiquidityIndicator, jsonSerializerOptions);
            }
            if (adminAdminMessageModel.SystemEventOption.IsSet)
            {
                writer.WritePropertyName("system_event");
                JsonSerializer.Serialize(writer, adminAdminMessageModel.SystemEvent, jsonSerializerOptions);
            }
            if (adminAdminMessageModel.SecurityDirectoryOption.IsSet)
            {
                writer.WritePropertyName("security_directory");
                JsonSerializer.Serialize(writer, adminAdminMessageModel.SecurityDirectory, jsonSerializerOptions);
            }
        }
    }
}
