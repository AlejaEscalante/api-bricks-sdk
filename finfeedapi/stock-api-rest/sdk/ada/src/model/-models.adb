--  FinFeedAPI Stock REST API
--  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
--
--  The version of the OpenAPI document: v1
--  Contact: support@apibricks.io
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.13.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

package body .Models is
   pragma Style_Checks ("-bmrIu");

   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdminAuctionInformationModel_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol", Value.Symbol);
      if not Value.Timestamp_Nanos.Is_Null then
         Into.Write_Entity ("timestamp_nanos", Value.Timestamp_Nanos);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.Auction_Type.Is_Null then
         Into.Write_Entity ("auction_type", Value.Auction_Type);
      end if;
      Into.Write_Entity ("auction_type_code", Value.Auction_Type_Code);
      Into.Write_Entity ("auction_type_text", Value.Auction_Type_Text);
      if not Value.Is_Auction_Type_Opening.Is_Null then
         Into.Write_Entity ("is_auction_type_opening", Value.Is_Auction_Type_Opening);
      end if;
      if not Value.Is_Auction_Type_Closing.Is_Null then
         Into.Write_Entity ("is_auction_type_closing", Value.Is_Auction_Type_Closing);
      end if;
      if not Value.Is_Auction_Type_Ipo.Is_Null then
         Into.Write_Entity ("is_auction_type_ipo", Value.Is_Auction_Type_Ipo);
      end if;
      if not Value.Is_Auction_Type_Halt.Is_Null then
         Into.Write_Entity ("is_auction_type_halt", Value.Is_Auction_Type_Halt);
      end if;
      if not Value.Is_Auction_Type_Volatility.Is_Null then
         Into.Write_Entity ("is_auction_type_volatility", Value.Is_Auction_Type_Volatility);
      end if;
      if not Value.Paired_Shares.Is_Null then
         Into.Write_Entity ("paired_shares", Value.Paired_Shares);
      end if;
      Serialize (Into, "reference_price", Value.Reference_Price);
      Serialize (Into, "indicative_clearing_price", Value.Indicative_Clearing_Price);
      if not Value.Imbalance_Shares.Is_Null then
         Into.Write_Entity ("imbalance_shares", Value.Imbalance_Shares);
      end if;
      if not Value.Imbalance_Side.Is_Null then
         Into.Write_Entity ("imbalance_side", Value.Imbalance_Side);
      end if;
      Into.Write_Entity ("imbalance_side_code", Value.Imbalance_Side_Code);
      Into.Write_Entity ("imbalance_side_text", Value.Imbalance_Side_Text);
      if not Value.Is_Imbalance_Side_Buy.Is_Null then
         Into.Write_Entity ("is_imbalance_side_buy", Value.Is_Imbalance_Side_Buy);
      end if;
      if not Value.Is_Imbalance_Side_Sell.Is_Null then
         Into.Write_Entity ("is_imbalance_side_sell", Value.Is_Imbalance_Side_Sell);
      end if;
      if not Value.Is_Imbalance_Side_None.Is_Null then
         Into.Write_Entity ("is_imbalance_side_none", Value.Is_Imbalance_Side_None);
      end if;
      if not Value.Extension_Number.Is_Null then
         Into.Write_Entity ("extension_number", Value.Extension_Number);
      end if;
      if not Value.Scheduled_Auction_Time_Seconds.Is_Null then
         Into.Write_Entity ("scheduled_auction_time_seconds", Value.Scheduled_Auction_Time_Seconds);
      end if;
      if not Value.Scheduled_Auction_Time.Is_Null then
         Into.Write_Entity ("scheduled_auction_time", Value.Scheduled_Auction_Time);
      end if;
      Serialize (Into, "auction_book_clearing_price", Value.Auction_Book_Clearing_Price);
      Serialize (Into, "collar_reference_price", Value.Collar_Reference_Price);
      Serialize (Into, "lower_auction_collar", Value.Lower_Auction_Collar);
      Serialize (Into, "upper_auction_collar", Value.Upper_Auction_Collar);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdminAuctionInformationModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdminAuctionInformationModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "timestamp_nanos", Value.Timestamp_Nanos);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "auction_type", Value.Auction_Type);
      Swagger.Streams.Deserialize (Object, "auction_type_code", Value.Auction_Type_Code);
      Swagger.Streams.Deserialize (Object, "auction_type_text", Value.Auction_Type_Text);
      Swagger.Streams.Deserialize (Object, "is_auction_type_opening", Value.Is_Auction_Type_Opening);
      Swagger.Streams.Deserialize (Object, "is_auction_type_closing", Value.Is_Auction_Type_Closing);
      Swagger.Streams.Deserialize (Object, "is_auction_type_ipo", Value.Is_Auction_Type_Ipo);
      Swagger.Streams.Deserialize (Object, "is_auction_type_halt", Value.Is_Auction_Type_Halt);
      Swagger.Streams.Deserialize (Object, "is_auction_type_volatility", Value.Is_Auction_Type_Volatility);
      Swagger.Streams.Deserialize (Object, "paired_shares", Value.Paired_Shares);
      Swagger.Streams.Deserialize (Object, "reference_price", Value.Reference_Price);
      Swagger.Streams.Deserialize (Object, "indicative_clearing_price", Value.Indicative_Clearing_Price);
      Swagger.Streams.Deserialize (Object, "imbalance_shares", Value.Imbalance_Shares);
      Swagger.Streams.Deserialize (Object, "imbalance_side", Value.Imbalance_Side);
      Swagger.Streams.Deserialize (Object, "imbalance_side_code", Value.Imbalance_Side_Code);
      Swagger.Streams.Deserialize (Object, "imbalance_side_text", Value.Imbalance_Side_Text);
      Swagger.Streams.Deserialize (Object, "is_imbalance_side_buy", Value.Is_Imbalance_Side_Buy);
      Swagger.Streams.Deserialize (Object, "is_imbalance_side_sell", Value.Is_Imbalance_Side_Sell);
      Swagger.Streams.Deserialize (Object, "is_imbalance_side_none", Value.Is_Imbalance_Side_None);
      Swagger.Streams.Deserialize (Object, "extension_number", Value.Extension_Number);
      Swagger.Streams.Deserialize (Object, "scheduled_auction_time_seconds", Value.Scheduled_Auction_Time_Seconds);
      Swagger.Streams.Deserialize (Object, "scheduled_auction_time", Value.Scheduled_Auction_Time);
      Swagger.Streams.Deserialize (Object, "auction_book_clearing_price", Value.Auction_Book_Clearing_Price);
      Swagger.Streams.Deserialize (Object, "collar_reference_price", Value.Collar_Reference_Price);
      Swagger.Streams.Deserialize (Object, "lower_auction_collar", Value.Lower_Auction_Collar);
      Swagger.Streams.Deserialize (Object, "upper_auction_collar", Value.Upper_Auction_Collar);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdminAuctionInformationModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdminAuctionInformationModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdminOfficialPriceModel_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol", Value.Symbol);
      if not Value.Timestamp_Nanos.Is_Null then
         Into.Write_Entity ("timestamp_nanos", Value.Timestamp_Nanos);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.Price_Type.Is_Null then
         Into.Write_Entity ("price_type", Value.Price_Type);
      end if;
      Into.Write_Entity ("price_type_code", Value.Price_Type_Code);
      Into.Write_Entity ("price_type_text", Value.Price_Type_Text);
      if not Value.Is_Price_Type_Opening.Is_Null then
         Into.Write_Entity ("is_price_type_opening", Value.Is_Price_Type_Opening);
      end if;
      if not Value.Is_Price_Type_Closing.Is_Null then
         Into.Write_Entity ("is_price_type_closing", Value.Is_Price_Type_Closing);
      end if;
      Serialize (Into, "official_price", Value.Official_Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdminOfficialPriceModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdminOfficialPriceModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "timestamp_nanos", Value.Timestamp_Nanos);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "price_type", Value.Price_Type);
      Swagger.Streams.Deserialize (Object, "price_type_code", Value.Price_Type_Code);
      Swagger.Streams.Deserialize (Object, "price_type_text", Value.Price_Type_Text);
      Swagger.Streams.Deserialize (Object, "is_price_type_opening", Value.Is_Price_Type_Opening);
      Swagger.Streams.Deserialize (Object, "is_price_type_closing", Value.Is_Price_Type_Closing);
      Swagger.Streams.Deserialize (Object, "official_price", Value.Official_Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdminOfficialPriceModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdminOfficialPriceModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdminOperationalHaltStatusModel_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol", Value.Symbol);
      if not Value.Timestamp_Nanos.Is_Null then
         Into.Write_Entity ("timestamp_nanos", Value.Timestamp_Nanos);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.Operational_Halt_Status.Is_Null then
         Into.Write_Entity ("operational_halt_status", Value.Operational_Halt_Status);
      end if;
      Into.Write_Entity ("operational_halt_status_code", Value.Operational_Halt_Status_Code);
      Into.Write_Entity ("operational_halt_status_text", Value.Operational_Halt_Status_Text);
      if not Value.Is_Operationally_Halted.Is_Null then
         Into.Write_Entity ("is_operationally_halted", Value.Is_Operationally_Halted);
      end if;
      if not Value.Is_Not_Operationally_Halted.Is_Null then
         Into.Write_Entity ("is_not_operationally_halted", Value.Is_Not_Operationally_Halted);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdminOperationalHaltStatusModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdminOperationalHaltStatusModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "timestamp_nanos", Value.Timestamp_Nanos);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "operational_halt_status", Value.Operational_Halt_Status);
      Swagger.Streams.Deserialize (Object, "operational_halt_status_code", Value.Operational_Halt_Status_Code);
      Swagger.Streams.Deserialize (Object, "operational_halt_status_text", Value.Operational_Halt_Status_Text);
      Swagger.Streams.Deserialize (Object, "is_operationally_halted", Value.Is_Operationally_Halted);
      Swagger.Streams.Deserialize (Object, "is_not_operationally_halted", Value.Is_Not_Operationally_Halted);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdminOperationalHaltStatusModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdminOperationalHaltStatusModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdminRetailLiquidityIndicatorModel_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol", Value.Symbol);
      if not Value.Timestamp_Nanos.Is_Null then
         Into.Write_Entity ("timestamp_nanos", Value.Timestamp_Nanos);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.Retail_Liquidity_Indicator.Is_Null then
         Into.Write_Entity ("retail_liquidity_indicator", Value.Retail_Liquidity_Indicator);
      end if;
      Into.Write_Entity ("retail_liquidity_indicator_code", Value.Retail_Liquidity_Indicator_Code);
      Into.Write_Entity ("retail_liquidity_indicator_text", Value.Retail_Liquidity_Indicator_Text);
      if not Value.Is_Retail_Indicator_Not_Applicable.Is_Null then
         Into.Write_Entity ("is_retail_indicator_not_applicable", Value.Is_Retail_Indicator_Not_Applicable);
      end if;
      if not Value.Is_Retail_Indicator_Buy_Interest.Is_Null then
         Into.Write_Entity ("is_retail_indicator_buy_interest", Value.Is_Retail_Indicator_Buy_Interest);
      end if;
      if not Value.Is_Retail_Indicator_Sell_Interest.Is_Null then
         Into.Write_Entity ("is_retail_indicator_sell_interest", Value.Is_Retail_Indicator_Sell_Interest);
      end if;
      if not Value.Is_Retail_Indicator_Buy_And_Sell_Interest.Is_Null then
         Into.Write_Entity ("is_retail_indicator_buy_and_sell_interest", Value.Is_Retail_Indicator_Buy_And_Sell_Interest);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdminRetailLiquidityIndicatorModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdminRetailLiquidityIndicatorModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "timestamp_nanos", Value.Timestamp_Nanos);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "retail_liquidity_indicator", Value.Retail_Liquidity_Indicator);
      Swagger.Streams.Deserialize (Object, "retail_liquidity_indicator_code", Value.Retail_Liquidity_Indicator_Code);
      Swagger.Streams.Deserialize (Object, "retail_liquidity_indicator_text", Value.Retail_Liquidity_Indicator_Text);
      Swagger.Streams.Deserialize (Object, "is_retail_indicator_not_applicable", Value.Is_Retail_Indicator_Not_Applicable);
      Swagger.Streams.Deserialize (Object, "is_retail_indicator_buy_interest", Value.Is_Retail_Indicator_Buy_Interest);
      Swagger.Streams.Deserialize (Object, "is_retail_indicator_sell_interest", Value.Is_Retail_Indicator_Sell_Interest);
      Swagger.Streams.Deserialize (Object, "is_retail_indicator_buy_and_sell_interest", Value.Is_Retail_Indicator_Buy_And_Sell_Interest);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdminRetailLiquidityIndicatorModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdminRetailLiquidityIndicatorModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdminSecurityDirectoryModel_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol", Value.Symbol);
      if not Value.Timestamp_Nanos.Is_Null then
         Into.Write_Entity ("timestamp_nanos", Value.Timestamp_Nanos);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.Flags.Is_Null then
         Into.Write_Entity ("flags", Value.Flags);
      end if;
      if not Value.Round_Lot_Size.Is_Null then
         Into.Write_Entity ("round_lot_size", Value.Round_Lot_Size);
      end if;
      Serialize (Into, "adjusted_poc_price", Value.Adjusted_Poc_Price);
      if not Value.Luld_Tier.Is_Null then
         Into.Write_Entity ("luld_tier", Value.Luld_Tier);
      end if;
      Into.Write_Entity ("luld_tier_code", Value.Luld_Tier_Code);
      Into.Write_Entity ("luld_tier_text", Value.Luld_Tier_Text);
      if not Value.Is_Luld_Tier_Not_Applicable.Is_Null then
         Into.Write_Entity ("is_luld_tier_not_applicable", Value.Is_Luld_Tier_Not_Applicable);
      end if;
      if not Value.Is_Luld_Tier_1.Is_Null then
         Into.Write_Entity ("is_luld_tier1", Value.Is_Luld_Tier_1);
      end if;
      if not Value.Is_Luld_Tier_2.Is_Null then
         Into.Write_Entity ("is_luld_tier2", Value.Is_Luld_Tier_2);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdminSecurityDirectoryModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdminSecurityDirectoryModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "timestamp_nanos", Value.Timestamp_Nanos);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "flags", Value.Flags);
      Swagger.Streams.Deserialize (Object, "round_lot_size", Value.Round_Lot_Size);
      Swagger.Streams.Deserialize (Object, "adjusted_poc_price", Value.Adjusted_Poc_Price);
      Swagger.Streams.Deserialize (Object, "luld_tier", Value.Luld_Tier);
      Swagger.Streams.Deserialize (Object, "luld_tier_code", Value.Luld_Tier_Code);
      Swagger.Streams.Deserialize (Object, "luld_tier_text", Value.Luld_Tier_Text);
      Swagger.Streams.Deserialize (Object, "is_luld_tier_not_applicable", Value.Is_Luld_Tier_Not_Applicable);
      Swagger.Streams.Deserialize (Object, "is_luld_tier1", Value.Is_Luld_Tier_1);
      Swagger.Streams.Deserialize (Object, "is_luld_tier2", Value.Is_Luld_Tier_2);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdminSecurityDirectoryModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdminSecurityDirectoryModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdminSecurityEventModel_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol", Value.Symbol);
      if not Value.Timestamp_Nanos.Is_Null then
         Into.Write_Entity ("timestamp_nanos", Value.Timestamp_Nanos);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.Security_Event.Is_Null then
         Into.Write_Entity ("security_event", Value.Security_Event);
      end if;
      Into.Write_Entity ("security_event_code", Value.Security_Event_Code);
      Into.Write_Entity ("security_event_text", Value.Security_Event_Text);
      if not Value.Is_Opening_Process_Complete.Is_Null then
         Into.Write_Entity ("is_opening_process_complete", Value.Is_Opening_Process_Complete);
      end if;
      if not Value.Is_Closing_Process_Complete.Is_Null then
         Into.Write_Entity ("is_closing_process_complete", Value.Is_Closing_Process_Complete);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdminSecurityEventModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdminSecurityEventModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "timestamp_nanos", Value.Timestamp_Nanos);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "security_event", Value.Security_Event);
      Swagger.Streams.Deserialize (Object, "security_event_code", Value.Security_Event_Code);
      Swagger.Streams.Deserialize (Object, "security_event_text", Value.Security_Event_Text);
      Swagger.Streams.Deserialize (Object, "is_opening_process_complete", Value.Is_Opening_Process_Complete);
      Swagger.Streams.Deserialize (Object, "is_closing_process_complete", Value.Is_Closing_Process_Complete);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdminSecurityEventModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdminSecurityEventModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdminShortSalePriceTestStatusModel_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol", Value.Symbol);
      if not Value.Timestamp_Nanos.Is_Null then
         Into.Write_Entity ("timestamp_nanos", Value.Timestamp_Nanos);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.Short_Sale_Price_Test_Status.Is_Null then
         Into.Write_Entity ("short_sale_price_test_status", Value.Short_Sale_Price_Test_Status);
      end if;
      Into.Write_Entity ("short_sale_price_test_status_code", Value.Short_Sale_Price_Test_Status_Code);
      Into.Write_Entity ("short_sale_price_test_status_text", Value.Short_Sale_Price_Test_Status_Text);
      if not Value.Is_Short_Sale_Price_Test_Not_In_Effect.Is_Null then
         Into.Write_Entity ("is_short_sale_price_test_not_in_effect", Value.Is_Short_Sale_Price_Test_Not_In_Effect);
      end if;
      if not Value.Is_Short_Sale_Price_Test_In_Effect.Is_Null then
         Into.Write_Entity ("is_short_sale_price_test_in_effect", Value.Is_Short_Sale_Price_Test_In_Effect);
      end if;
      if not Value.Detail.Is_Null then
         Into.Write_Entity ("detail", Value.Detail);
      end if;
      Into.Write_Entity ("detail_code", Value.Detail_Code);
      Into.Write_Entity ("detail_text", Value.Detail_Text);
      if not Value.Is_Detail_No_Price_Test.Is_Null then
         Into.Write_Entity ("is_detail_no_price_test", Value.Is_Detail_No_Price_Test);
      end if;
      if not Value.Is_Detail_Activated.Is_Null then
         Into.Write_Entity ("is_detail_activated", Value.Is_Detail_Activated);
      end if;
      if not Value.Is_Detail_Continued.Is_Null then
         Into.Write_Entity ("is_detail_continued", Value.Is_Detail_Continued);
      end if;
      if not Value.Is_Detail_Deactivated.Is_Null then
         Into.Write_Entity ("is_detail_deactivated", Value.Is_Detail_Deactivated);
      end if;
      if not Value.Is_Detail_Not_Available.Is_Null then
         Into.Write_Entity ("is_detail_not_available", Value.Is_Detail_Not_Available);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdminShortSalePriceTestStatusModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdminShortSalePriceTestStatusModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "timestamp_nanos", Value.Timestamp_Nanos);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "short_sale_price_test_status", Value.Short_Sale_Price_Test_Status);
      Swagger.Streams.Deserialize (Object, "short_sale_price_test_status_code", Value.Short_Sale_Price_Test_Status_Code);
      Swagger.Streams.Deserialize (Object, "short_sale_price_test_status_text", Value.Short_Sale_Price_Test_Status_Text);
      Swagger.Streams.Deserialize (Object, "is_short_sale_price_test_not_in_effect", Value.Is_Short_Sale_Price_Test_Not_In_Effect);
      Swagger.Streams.Deserialize (Object, "is_short_sale_price_test_in_effect", Value.Is_Short_Sale_Price_Test_In_Effect);
      Swagger.Streams.Deserialize (Object, "detail", Value.Detail);
      Swagger.Streams.Deserialize (Object, "detail_code", Value.Detail_Code);
      Swagger.Streams.Deserialize (Object, "detail_text", Value.Detail_Text);
      Swagger.Streams.Deserialize (Object, "is_detail_no_price_test", Value.Is_Detail_No_Price_Test);
      Swagger.Streams.Deserialize (Object, "is_detail_activated", Value.Is_Detail_Activated);
      Swagger.Streams.Deserialize (Object, "is_detail_continued", Value.Is_Detail_Continued);
      Swagger.Streams.Deserialize (Object, "is_detail_deactivated", Value.Is_Detail_Deactivated);
      Swagger.Streams.Deserialize (Object, "is_detail_not_available", Value.Is_Detail_Not_Available);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdminShortSalePriceTestStatusModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdminShortSalePriceTestStatusModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdminSystemEventModel_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Timestamp_Nanos.Is_Null then
         Into.Write_Entity ("timestamp_nanos", Value.Timestamp_Nanos);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.System_Event.Is_Null then
         Into.Write_Entity ("system_event", Value.System_Event);
      end if;
      Into.Write_Entity ("system_event_code", Value.System_Event_Code);
      Into.Write_Entity ("system_event_text", Value.System_Event_Text);
      if not Value.Is_System_Event_Start_Of_Messages.Is_Null then
         Into.Write_Entity ("is_system_event_start_of_messages", Value.Is_System_Event_Start_Of_Messages);
      end if;
      if not Value.Is_System_Event_Start_Of_System_Hours.Is_Null then
         Into.Write_Entity ("is_system_event_start_of_system_hours", Value.Is_System_Event_Start_Of_System_Hours);
      end if;
      if not Value.Is_System_Event_Start_Of_Regular_Market_Hours.Is_Null then
         Into.Write_Entity ("is_system_event_start_of_regular_market_hours", Value.Is_System_Event_Start_Of_Regular_Market_Hours);
      end if;
      if not Value.Is_System_Event_End_Of_Regular_Market_Hours.Is_Null then
         Into.Write_Entity ("is_system_event_end_of_regular_market_hours", Value.Is_System_Event_End_Of_Regular_Market_Hours);
      end if;
      if not Value.Is_System_Event_End_Of_System_Hours.Is_Null then
         Into.Write_Entity ("is_system_event_end_of_system_hours", Value.Is_System_Event_End_Of_System_Hours);
      end if;
      if not Value.Is_System_Event_End_Of_Messages.Is_Null then
         Into.Write_Entity ("is_system_event_end_of_messages", Value.Is_System_Event_End_Of_Messages);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdminSystemEventModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdminSystemEventModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "timestamp_nanos", Value.Timestamp_Nanos);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "system_event", Value.System_Event);
      Swagger.Streams.Deserialize (Object, "system_event_code", Value.System_Event_Code);
      Swagger.Streams.Deserialize (Object, "system_event_text", Value.System_Event_Text);
      Swagger.Streams.Deserialize (Object, "is_system_event_start_of_messages", Value.Is_System_Event_Start_Of_Messages);
      Swagger.Streams.Deserialize (Object, "is_system_event_start_of_system_hours", Value.Is_System_Event_Start_Of_System_Hours);
      Swagger.Streams.Deserialize (Object, "is_system_event_start_of_regular_market_hours", Value.Is_System_Event_Start_Of_Regular_Market_Hours);
      Swagger.Streams.Deserialize (Object, "is_system_event_end_of_regular_market_hours", Value.Is_System_Event_End_Of_Regular_Market_Hours);
      Swagger.Streams.Deserialize (Object, "is_system_event_end_of_system_hours", Value.Is_System_Event_End_Of_System_Hours);
      Swagger.Streams.Deserialize (Object, "is_system_event_end_of_messages", Value.Is_System_Event_End_Of_Messages);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdminSystemEventModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdminSystemEventModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdminTradingStatusModel_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol", Value.Symbol);
      if not Value.Timestamp_Nanos.Is_Null then
         Into.Write_Entity ("timestamp_nanos", Value.Timestamp_Nanos);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.Is_Trading_Live.Is_Null then
         Into.Write_Entity ("is_trading_live", Value.Is_Trading_Live);
      end if;
      if not Value.Is_Trading_Halted.Is_Null then
         Into.Write_Entity ("is_trading_halted", Value.Is_Trading_Halted);
      end if;
      if not Value.Is_Trading_In_Order_Acceptance_Period.Is_Null then
         Into.Write_Entity ("is_trading_in_order_acceptance_period", Value.Is_Trading_In_Order_Acceptance_Period);
      end if;
      if not Value.Is_Trading_Paused.Is_Null then
         Into.Write_Entity ("is_trading_paused", Value.Is_Trading_Paused);
      end if;
      if not Value.Is_Reason_Halt_News_Pending.Is_Null then
         Into.Write_Entity ("is_reason_halt_news_pending", Value.Is_Reason_Halt_News_Pending);
      end if;
      if not Value.Is_Reason_Ipo_Not_Yet_Trading.Is_Null then
         Into.Write_Entity ("is_reason_ipo_not_yet_trading", Value.Is_Reason_Ipo_Not_Yet_Trading);
      end if;
      if not Value.Is_Reason_Ipo_Deferred.Is_Null then
         Into.Write_Entity ("is_reason_ipo_deferred", Value.Is_Reason_Ipo_Deferred);
      end if;
      if not Value.Is_Reason_Halt_News_Dissemination.Is_Null then
         Into.Write_Entity ("is_reason_halt_news_dissemination", Value.Is_Reason_Halt_News_Dissemination);
      end if;
      if not Value.Is_Reason_Ipo_Order_Acceptance_Period.Is_Null then
         Into.Write_Entity ("is_reason_ipo_order_acceptance_period", Value.Is_Reason_Ipo_Order_Acceptance_Period);
      end if;
      if not Value.Is_Reason_Ipo_Pre_Launch_Period.Is_Null then
         Into.Write_Entity ("is_reason_ipo_pre_launch_period", Value.Is_Reason_Ipo_Pre_Launch_Period);
      end if;
      if not Value.Is_Reason_Market_Wide_Circuit_Breaker_Level_1.Is_Null then
         Into.Write_Entity ("is_reason_market_wide_circuit_breaker_level1", Value.Is_Reason_Market_Wide_Circuit_Breaker_Level_1);
      end if;
      if not Value.Is_Reason_Market_Wide_Circuit_Breaker_Level_2.Is_Null then
         Into.Write_Entity ("is_reason_market_wide_circuit_breaker_level2", Value.Is_Reason_Market_Wide_Circuit_Breaker_Level_2);
      end if;
      if not Value.Is_Reason_Market_Wide_Circuit_Breaker_Level_3.Is_Null then
         Into.Write_Entity ("is_reason_market_wide_circuit_breaker_level3", Value.Is_Reason_Market_Wide_Circuit_Breaker_Level_3);
      end if;
      if not Value.Is_Reason_Not_Applicable.Is_Null then
         Into.Write_Entity ("is_reason_not_applicable", Value.Is_Reason_Not_Applicable);
      end if;
      if not Value.Is_Reason_Not_Available.Is_Null then
         Into.Write_Entity ("is_reason_not_available", Value.Is_Reason_Not_Available);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdminTradingStatusModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdminTradingStatusModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "timestamp_nanos", Value.Timestamp_Nanos);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "is_trading_live", Value.Is_Trading_Live);
      Swagger.Streams.Deserialize (Object, "is_trading_halted", Value.Is_Trading_Halted);
      Swagger.Streams.Deserialize (Object, "is_trading_in_order_acceptance_period", Value.Is_Trading_In_Order_Acceptance_Period);
      Swagger.Streams.Deserialize (Object, "is_trading_paused", Value.Is_Trading_Paused);
      Swagger.Streams.Deserialize (Object, "is_reason_halt_news_pending", Value.Is_Reason_Halt_News_Pending);
      Swagger.Streams.Deserialize (Object, "is_reason_ipo_not_yet_trading", Value.Is_Reason_Ipo_Not_Yet_Trading);
      Swagger.Streams.Deserialize (Object, "is_reason_ipo_deferred", Value.Is_Reason_Ipo_Deferred);
      Swagger.Streams.Deserialize (Object, "is_reason_halt_news_dissemination", Value.Is_Reason_Halt_News_Dissemination);
      Swagger.Streams.Deserialize (Object, "is_reason_ipo_order_acceptance_period", Value.Is_Reason_Ipo_Order_Acceptance_Period);
      Swagger.Streams.Deserialize (Object, "is_reason_ipo_pre_launch_period", Value.Is_Reason_Ipo_Pre_Launch_Period);
      Swagger.Streams.Deserialize (Object, "is_reason_market_wide_circuit_breaker_level1", Value.Is_Reason_Market_Wide_Circuit_Breaker_Level_1);
      Swagger.Streams.Deserialize (Object, "is_reason_market_wide_circuit_breaker_level2", Value.Is_Reason_Market_Wide_Circuit_Breaker_Level_2);
      Swagger.Streams.Deserialize (Object, "is_reason_market_wide_circuit_breaker_level3", Value.Is_Reason_Market_Wide_Circuit_Breaker_Level_3);
      Swagger.Streams.Deserialize (Object, "is_reason_not_applicable", Value.Is_Reason_Not_Applicable);
      Swagger.Streams.Deserialize (Object, "is_reason_not_available", Value.Is_Reason_Not_Available);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdminTradingStatusModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdminTradingStatusModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FinFeedAPIExchangeModel_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("exchange_id", Value.Exchange_Id);
      Into.Write_Entity ("last_datapoint_date", Value.Last_Datapoint_Date);
      Into.Write_Entity ("mic", Value.Mic);
      Into.Write_Entity ("operating_mic", Value.Operating_Mic);
      Into.Write_Entity ("oprt_sgmt", Value.Oprt_Sgmt);
      Into.Write_Entity ("market_name_institution_description", Value.Market_Name_Institution_Description);
      Into.Write_Entity ("legal_entity_name", Value.Legal_Entity_Name);
      Into.Write_Entity ("lei", Value.Lei);
      Into.Write_Entity ("market_category_code", Value.Market_Category_Code);
      Into.Write_Entity ("acronym", Value.Acronym);
      Into.Write_Entity ("iso_country_code", Value.Iso_Country_Code);
      Into.Write_Entity ("city", Value.City);
      Into.Write_Entity ("website", Value.Website);
      Into.Write_Entity ("status", Value.Status);
      Into.Write_Entity ("creation_date", Value.Creation_Date);
      Into.Write_Entity ("last_update_date", Value.Last_Update_Date);
      Into.Write_Entity ("last_validation_date", Value.Last_Validation_Date);
      Into.Write_Entity ("expiry_date", Value.Expiry_Date);
      Into.Write_Entity ("comments", Value.Comments);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FinFeedAPIExchangeModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FinFeedAPIExchangeModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "exchange_id", Value.Exchange_Id);
      Swagger.Streams.Deserialize (Object, "last_datapoint_date", Value.Last_Datapoint_Date);
      Swagger.Streams.Deserialize (Object, "mic", Value.Mic);
      Swagger.Streams.Deserialize (Object, "operating_mic", Value.Operating_Mic);
      Swagger.Streams.Deserialize (Object, "oprt_sgmt", Value.Oprt_Sgmt);
      Swagger.Streams.Deserialize (Object, "market_name_institution_description", Value.Market_Name_Institution_Description);
      Swagger.Streams.Deserialize (Object, "legal_entity_name", Value.Legal_Entity_Name);
      Swagger.Streams.Deserialize (Object, "lei", Value.Lei);
      Swagger.Streams.Deserialize (Object, "market_category_code", Value.Market_Category_Code);
      Swagger.Streams.Deserialize (Object, "acronym", Value.Acronym);
      Swagger.Streams.Deserialize (Object, "iso_country_code", Value.Iso_Country_Code);
      Swagger.Streams.Deserialize (Object, "city", Value.City);
      Swagger.Streams.Deserialize (Object, "website", Value.Website);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "creation_date", Value.Creation_Date);
      Swagger.Streams.Deserialize (Object, "last_update_date", Value.Last_Update_Date);
      Swagger.Streams.Deserialize (Object, "last_validation_date", Value.Last_Validation_Date);
      Swagger.Streams.Deserialize (Object, "expiry_date", Value.Expiry_Date);
      Swagger.Streams.Deserialize (Object, "comments", Value.Comments);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FinFeedAPIExchangeModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FinFeedAPIExchangeModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FinFeedAPISymbolModel_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol_id", Value.Symbol_Id);
      Into.Write_Entity ("exchange_id", Value.Exchange_Id);
      Into.Write_Entity ("security_category", Value.Security_Category);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("date", Value.Date);
      Into.Write_Entity ("asset_class", Value.Asset_Class);
      Into.Write_Entity ("cfi_code", Value.Cfi_Code);
      Into.Write_Entity ("cfi_category", Value.Cfi_Category);
      Into.Write_Entity ("cfi_group", Value.Cfi_Group);
      Into.Write_Entity ("cfi_attribute1", Value.Cfi_Attribute_1);
      Into.Write_Entity ("cfi_attribute2", Value.Cfi_Attribute_2);
      Into.Write_Entity ("cfi_attribute3", Value.Cfi_Attribute_3);
      Into.Write_Entity ("cfi_attribute4", Value.Cfi_Attribute_4);
      Into.Write_Entity ("cfi_category_desc", Value.Cfi_Category_Desc);
      Into.Write_Entity ("cfi_group_desc", Value.Cfi_Group_Desc);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FinFeedAPISymbolModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FinFeedAPISymbolModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol_id", Value.Symbol_Id);
      Swagger.Streams.Deserialize (Object, "exchange_id", Value.Exchange_Id);
      Swagger.Streams.Deserialize (Object, "security_category", Value.Security_Category);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "date", Value.Date);
      Swagger.Streams.Deserialize (Object, "asset_class", Value.Asset_Class);
      Swagger.Streams.Deserialize (Object, "cfi_code", Value.Cfi_Code);
      Swagger.Streams.Deserialize (Object, "cfi_category", Value.Cfi_Category);
      Swagger.Streams.Deserialize (Object, "cfi_group", Value.Cfi_Group);
      Swagger.Streams.Deserialize (Object, "cfi_attribute1", Value.Cfi_Attribute_1);
      Swagger.Streams.Deserialize (Object, "cfi_attribute2", Value.Cfi_Attribute_2);
      Swagger.Streams.Deserialize (Object, "cfi_attribute3", Value.Cfi_Attribute_3);
      Swagger.Streams.Deserialize (Object, "cfi_attribute4", Value.Cfi_Attribute_4);
      Swagger.Streams.Deserialize (Object, "cfi_category_desc", Value.Cfi_Category_Desc);
      Swagger.Streams.Deserialize (Object, "cfi_group_desc", Value.Cfi_Group_Desc);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FinFeedAPISymbolModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FinFeedAPISymbolModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Level1QuoteUpdateModel_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol", Value.Symbol);
      if not Value.Timestamp_Nanos.Is_Null then
         Into.Write_Entity ("timestamp_nanos", Value.Timestamp_Nanos);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.Is_Symbol_Available.Is_Null then
         Into.Write_Entity ("is_symbol_available", Value.Is_Symbol_Available);
      end if;
      if not Value.Is_Pre_Post_Market_Session.Is_Null then
         Into.Write_Entity ("is_pre_post_market_session", Value.Is_Pre_Post_Market_Session);
      end if;
      if not Value.Ask_Size.Is_Null then
         Into.Write_Entity ("ask_size", Value.Ask_Size);
      end if;
      Serialize (Into, "ask_price", Value.Ask_Price);
      Serialize (Into, "bid_price", Value.Bid_Price);
      if not Value.Bid_Size.Is_Null then
         Into.Write_Entity ("bid_size", Value.Bid_Size);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Level1QuoteUpdateModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Level1QuoteUpdateModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "timestamp_nanos", Value.Timestamp_Nanos);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "is_symbol_available", Value.Is_Symbol_Available);
      Swagger.Streams.Deserialize (Object, "is_pre_post_market_session", Value.Is_Pre_Post_Market_Session);
      Swagger.Streams.Deserialize (Object, "ask_size", Value.Ask_Size);
      Swagger.Streams.Deserialize (Object, "ask_price", Value.Ask_Price);
      Swagger.Streams.Deserialize (Object, "bid_price", Value.Bid_Price);
      Swagger.Streams.Deserialize (Object, "bid_size", Value.Bid_Size);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Level1QuoteUpdateModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Level1QuoteUpdateModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Level2PriceLevelUpdateModel_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol", Value.Symbol);
      if not Value.Timestamp_Nanos.Is_Null then
         Into.Write_Entity ("timestamp_nanos", Value.Timestamp_Nanos);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.Is_Side_Buy.Is_Null then
         Into.Write_Entity ("is_side_buy", Value.Is_Side_Buy);
      end if;
      if not Value.Is_Event_Processing_Complete.Is_Null then
         Into.Write_Entity ("is_event_processing_complete", Value.Is_Event_Processing_Complete);
      end if;
      if not Value.Size.Is_Null then
         Into.Write_Entity ("size", Value.Size);
      end if;
      Serialize (Into, "price", Value.Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Level2PriceLevelUpdateModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Level2PriceLevelUpdateModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "timestamp_nanos", Value.Timestamp_Nanos);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "is_side_buy", Value.Is_Side_Buy);
      Swagger.Streams.Deserialize (Object, "is_event_processing_complete", Value.Is_Event_Processing_Complete);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Level2PriceLevelUpdateModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Level2PriceLevelUpdateModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Level3AddOrderModel_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol", Value.Symbol);
      if not Value.Timestamp_Nanos.Is_Null then
         Into.Write_Entity ("timestamp_nanos", Value.Timestamp_Nanos);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.Is_Side_Buy.Is_Null then
         Into.Write_Entity ("is_side_buy", Value.Is_Side_Buy);
      end if;
      if not Value.Size.Is_Null then
         Into.Write_Entity ("size", Value.Size);
      end if;
      Serialize (Into, "price", Value.Price);
      if not Value.Order_Id.Is_Null then
         Into.Write_Entity ("order_id", Value.Order_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Level3AddOrderModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Level3AddOrderModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "timestamp_nanos", Value.Timestamp_Nanos);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "is_side_buy", Value.Is_Side_Buy);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "order_id", Value.Order_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Level3AddOrderModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Level3AddOrderModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Level3ClearBookModel_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol", Value.Symbol);
      if not Value.Timestamp_Nanos.Is_Null then
         Into.Write_Entity ("timestamp_nanos", Value.Timestamp_Nanos);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Level3ClearBookModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Level3ClearBookModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "timestamp_nanos", Value.Timestamp_Nanos);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Level3ClearBookModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Level3ClearBookModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Level3DeleteOrderModel_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol", Value.Symbol);
      if not Value.Timestamp_Nanos.Is_Null then
         Into.Write_Entity ("timestamp_nanos", Value.Timestamp_Nanos);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.Order_Id_Reference.Is_Null then
         Into.Write_Entity ("order_id_reference", Value.Order_Id_Reference);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Level3DeleteOrderModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Level3DeleteOrderModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "timestamp_nanos", Value.Timestamp_Nanos);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "order_id_reference", Value.Order_Id_Reference);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Level3DeleteOrderModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Level3DeleteOrderModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Level3ExecutedOrderModel_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol", Value.Symbol);
      if not Value.Timestamp_Nanos.Is_Null then
         Into.Write_Entity ("timestamp_nanos", Value.Timestamp_Nanos);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.Order_Id_Reference.Is_Null then
         Into.Write_Entity ("order_id_reference", Value.Order_Id_Reference);
      end if;
      if not Value.Sale_Condition_Flags.Is_Null then
         Into.Write_Entity ("sale_condition_flags", Value.Sale_Condition_Flags);
      end if;
      if not Value.Is_Intermarket_Sweep.Is_Null then
         Into.Write_Entity ("is_intermarket_sweep", Value.Is_Intermarket_Sweep);
      end if;
      if not Value.Is_Extended_Hours_Trade.Is_Null then
         Into.Write_Entity ("is_extended_hours_trade", Value.Is_Extended_Hours_Trade);
      end if;
      if not Value.Is_Odd_Lot_Trade.Is_Null then
         Into.Write_Entity ("is_odd_lot_trade", Value.Is_Odd_Lot_Trade);
      end if;
      if not Value.Is_Trade_Through_Exempt.Is_Null then
         Into.Write_Entity ("is_trade_through_exempt", Value.Is_Trade_Through_Exempt);
      end if;
      if not Value.Is_Single_Price_Cross_Trade.Is_Null then
         Into.Write_Entity ("is_single_price_cross_trade", Value.Is_Single_Price_Cross_Trade);
      end if;
      if not Value.Size.Is_Null then
         Into.Write_Entity ("size", Value.Size);
      end if;
      Serialize (Into, "price", Value.Price);
      if not Value.Trade_Id.Is_Null then
         Into.Write_Entity ("trade_id", Value.Trade_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Level3ExecutedOrderModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Level3ExecutedOrderModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "timestamp_nanos", Value.Timestamp_Nanos);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "order_id_reference", Value.Order_Id_Reference);
      Swagger.Streams.Deserialize (Object, "sale_condition_flags", Value.Sale_Condition_Flags);
      Swagger.Streams.Deserialize (Object, "is_intermarket_sweep", Value.Is_Intermarket_Sweep);
      Swagger.Streams.Deserialize (Object, "is_extended_hours_trade", Value.Is_Extended_Hours_Trade);
      Swagger.Streams.Deserialize (Object, "is_odd_lot_trade", Value.Is_Odd_Lot_Trade);
      Swagger.Streams.Deserialize (Object, "is_trade_through_exempt", Value.Is_Trade_Through_Exempt);
      Swagger.Streams.Deserialize (Object, "is_single_price_cross_trade", Value.Is_Single_Price_Cross_Trade);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "trade_id", Value.Trade_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Level3ExecutedOrderModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Level3ExecutedOrderModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Level3ModifyOrderModel_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol", Value.Symbol);
      if not Value.Timestamp_Nanos.Is_Null then
         Into.Write_Entity ("timestamp_nanos", Value.Timestamp_Nanos);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.Order_Id_Reference.Is_Null then
         Into.Write_Entity ("order_id_reference", Value.Order_Id_Reference);
      end if;
      if not Value.Is_Priority_Reset.Is_Null then
         Into.Write_Entity ("is_priority_reset", Value.Is_Priority_Reset);
      end if;
      if not Value.Size.Is_Null then
         Into.Write_Entity ("size", Value.Size);
      end if;
      Serialize (Into, "price", Value.Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Level3ModifyOrderModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Level3ModifyOrderModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "timestamp_nanos", Value.Timestamp_Nanos);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "order_id_reference", Value.Order_Id_Reference);
      Swagger.Streams.Deserialize (Object, "is_priority_reset", Value.Is_Priority_Reset);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Level3ModifyOrderModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Level3ModifyOrderModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OHLCVExchangeTimeseriesItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Time_Period_Start.Is_Null then
         Into.Write_Entity ("time_period_start", Value.Time_Period_Start);
      end if;
      if not Value.Time_Period_End.Is_Null then
         Into.Write_Entity ("time_period_end", Value.Time_Period_End);
      end if;
      Into.Write_Entity ("time_open", Value.Time_Open);
      Into.Write_Entity ("time_close", Value.Time_Close);
      Serialize (Into, "price_open", Value.Price_Open);
      Serialize (Into, "price_high", Value.Price_High);
      Serialize (Into, "price_low", Value.Price_Low);
      Serialize (Into, "price_close", Value.Price_Close);
      Serialize (Into, "volume_traded", Value.Volume_Traded);
      if not Value.Trades_Count.Is_Null then
         Into.Write_Entity ("trades_count", Value.Trades_Count);
      end if;
      Into.Write_Entity ("symbol_id_exchange", Value.Symbol_Id_Exchange);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OHLCVExchangeTimeseriesItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OHLCVExchangeTimeseriesItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "time_period_start", Value.Time_Period_Start);
      Swagger.Streams.Deserialize (Object, "time_period_end", Value.Time_Period_End);
      Swagger.Streams.Deserialize (Object, "time_open", Value.Time_Open);
      Swagger.Streams.Deserialize (Object, "time_close", Value.Time_Close);
      Swagger.Streams.Deserialize (Object, "price_open", Value.Price_Open);
      Swagger.Streams.Deserialize (Object, "price_high", Value.Price_High);
      Swagger.Streams.Deserialize (Object, "price_low", Value.Price_Low);
      Swagger.Streams.Deserialize (Object, "price_close", Value.Price_Close);
      Swagger.Streams.Deserialize (Object, "volume_traded", Value.Volume_Traded);
      Swagger.Streams.Deserialize (Object, "trades_count", Value.Trades_Count);
      Swagger.Streams.Deserialize (Object, "symbol_id_exchange", Value.Symbol_Id_Exchange);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OHLCVExchangeTimeseriesItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OHLCVExchangeTimeseriesItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OHLCVTimeseriesItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Time_Period_Start.Is_Null then
         Into.Write_Entity ("time_period_start", Value.Time_Period_Start);
      end if;
      if not Value.Time_Period_End.Is_Null then
         Into.Write_Entity ("time_period_end", Value.Time_Period_End);
      end if;
      Into.Write_Entity ("time_open", Value.Time_Open);
      Into.Write_Entity ("time_close", Value.Time_Close);
      Serialize (Into, "price_open", Value.Price_Open);
      Serialize (Into, "price_high", Value.Price_High);
      Serialize (Into, "price_low", Value.Price_Low);
      Serialize (Into, "price_close", Value.Price_Close);
      Serialize (Into, "volume_traded", Value.Volume_Traded);
      if not Value.Trades_Count.Is_Null then
         Into.Write_Entity ("trades_count", Value.Trades_Count);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OHLCVTimeseriesItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OHLCVTimeseriesItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "time_period_start", Value.Time_Period_Start);
      Swagger.Streams.Deserialize (Object, "time_period_end", Value.Time_Period_End);
      Swagger.Streams.Deserialize (Object, "time_open", Value.Time_Open);
      Swagger.Streams.Deserialize (Object, "time_close", Value.Time_Close);
      Swagger.Streams.Deserialize (Object, "price_open", Value.Price_Open);
      Swagger.Streams.Deserialize (Object, "price_high", Value.Price_High);
      Swagger.Streams.Deserialize (Object, "price_low", Value.Price_Low);
      Swagger.Streams.Deserialize (Object, "price_close", Value.Price_Close);
      Swagger.Streams.Deserialize (Object, "volume_traded", Value.Volume_Traded);
      Swagger.Streams.Deserialize (Object, "trades_count", Value.Trades_Count);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OHLCVTimeseriesItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OHLCVTimeseriesItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OHLCVTimeseriesPeriod_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("period_id", Value.Period_Id);
      if not Value.Length_Seconds.Is_Null then
         Into.Write_Entity ("length_seconds", Value.Length_Seconds);
      end if;
      if not Value.Length_Months.Is_Null then
         Into.Write_Entity ("length_months", Value.Length_Months);
      end if;
      Into.Write_Entity ("unit_count", Value.Unit_Count);
      Into.Write_Entity ("unit_name", Value.Unit_Name);
      Into.Write_Entity ("display_name", Value.Display_Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OHLCVTimeseriesPeriod_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OHLCVTimeseriesPeriod_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "period_id", Value.Period_Id);
      Swagger.Streams.Deserialize (Object, "length_seconds", Value.Length_Seconds);
      Swagger.Streams.Deserialize (Object, "length_months", Value.Length_Months);
      Swagger.Streams.Deserialize (Object, "unit_count", Value.Unit_Count);
      Swagger.Streams.Deserialize (Object, "unit_name", Value.Unit_Name);
      Swagger.Streams.Deserialize (Object, "display_name", Value.Display_Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OHLCVTimeseriesPeriod_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OHLCVTimeseriesPeriod_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TradeTradeModel_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Is_Trade_Break.Is_Null then
         Into.Write_Entity ("is_trade_break", Value.Is_Trade_Break);
      end if;
      Into.Write_Entity ("symbol", Value.Symbol);
      if not Value.Timestamp_Nanos.Is_Null then
         Into.Write_Entity ("timestamp_nanos", Value.Timestamp_Nanos);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.Size.Is_Null then
         Into.Write_Entity ("size", Value.Size);
      end if;
      Serialize (Into, "price", Value.Price);
      if not Value.Trade_Id.Is_Null then
         Into.Write_Entity ("trade_id", Value.Trade_Id);
      end if;
      if not Value.Is_Intermarket_Sweep.Is_Null then
         Into.Write_Entity ("is_intermarket_sweep", Value.Is_Intermarket_Sweep);
      end if;
      if not Value.Is_Extended_Hours_Trade.Is_Null then
         Into.Write_Entity ("is_extended_hours_trade", Value.Is_Extended_Hours_Trade);
      end if;
      if not Value.Is_Odd_Lot_Trade.Is_Null then
         Into.Write_Entity ("is_odd_lot_trade", Value.Is_Odd_Lot_Trade);
      end if;
      if not Value.Is_Trade_Through_Exempt.Is_Null then
         Into.Write_Entity ("is_trade_through_exempt", Value.Is_Trade_Through_Exempt);
      end if;
      if not Value.Is_Single_Price_Cross_Trade.Is_Null then
         Into.Write_Entity ("is_single_price_cross_trade", Value.Is_Single_Price_Cross_Trade);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TradeTradeModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TradeTradeModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "is_trade_break", Value.Is_Trade_Break);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "timestamp_nanos", Value.Timestamp_Nanos);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "trade_id", Value.Trade_Id);
      Swagger.Streams.Deserialize (Object, "is_intermarket_sweep", Value.Is_Intermarket_Sweep);
      Swagger.Streams.Deserialize (Object, "is_extended_hours_trade", Value.Is_Extended_Hours_Trade);
      Swagger.Streams.Deserialize (Object, "is_odd_lot_trade", Value.Is_Odd_Lot_Trade);
      Swagger.Streams.Deserialize (Object, "is_trade_through_exempt", Value.Is_Trade_Through_Exempt);
      Swagger.Streams.Deserialize (Object, "is_single_price_cross_trade", Value.Is_Single_Price_Cross_Trade);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TradeTradeModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TradeTradeModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Level3OrderBookModel_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "add_order", Value.Add_Order);
      Serialize (Into, "delete_order", Value.Delete_Order);
      Serialize (Into, "modify_order", Value.Modify_Order);
      Serialize (Into, "executed_order", Value.Executed_Order);
      Serialize (Into, "clear_book", Value.Clear_Book);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Level3OrderBookModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Level3OrderBookModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "add_order", Value.Add_Order);
      Deserialize (Object, "delete_order", Value.Delete_Order);
      Deserialize (Object, "modify_order", Value.Modify_Order);
      Deserialize (Object, "executed_order", Value.Executed_Order);
      Deserialize (Object, "clear_book", Value.Clear_Book);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Level3OrderBookModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Level3OrderBookModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AdminAdminMessageModel_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "trading_status", Value.Trading_Status);
      Serialize (Into, "official_price", Value.Official_Price);
      Serialize (Into, "security_event", Value.Security_Event);
      Serialize (Into, "auction_information", Value.Auction_Information);
      Serialize (Into, "short_sale_price_test", Value.Short_Sale_Price_Test);
      Serialize (Into, "operational_halt_status", Value.Operational_Halt_Status);
      Serialize (Into, "retail_liquidity_indicator", Value.Retail_Liquidity_Indicator);
      Serialize (Into, "system_event", Value.System_Event);
      Serialize (Into, "security_directory", Value.Security_Directory);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AdminAdminMessageModel_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AdminAdminMessageModel_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "trading_status", Value.Trading_Status);
      Deserialize (Object, "official_price", Value.Official_Price);
      Deserialize (Object, "security_event", Value.Security_Event);
      Deserialize (Object, "auction_information", Value.Auction_Information);
      Deserialize (Object, "short_sale_price_test", Value.Short_Sale_Price_Test);
      Deserialize (Object, "operational_halt_status", Value.Operational_Halt_Status);
      Deserialize (Object, "retail_liquidity_indicator", Value.Retail_Liquidity_Indicator);
      Deserialize (Object, "system_event", Value.System_Event);
      Deserialize (Object, "security_directory", Value.Security_Directory);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AdminAdminMessageModel_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AdminAdminMessageModel_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


end .Models;
