/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Admin_TradingStatusModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Admin_TradingStatusModel::Admin_TradingStatusModel()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Timestamp_nanos = 0L;
    m_Timestamp_nanosIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_Is_trading_live = false;
    m_Is_trading_liveIsSet = false;
    m_Is_trading_halted = false;
    m_Is_trading_haltedIsSet = false;
    m_Is_trading_in_order_acceptance_period = false;
    m_Is_trading_in_order_acceptance_periodIsSet = false;
    m_Is_trading_paused = false;
    m_Is_trading_pausedIsSet = false;
    m_Is_reason_halt_news_pending = false;
    m_Is_reason_halt_news_pendingIsSet = false;
    m_Is_reason_ipo_not_yet_trading = false;
    m_Is_reason_ipo_not_yet_tradingIsSet = false;
    m_Is_reason_ipo_deferred = false;
    m_Is_reason_ipo_deferredIsSet = false;
    m_Is_reason_halt_news_dissemination = false;
    m_Is_reason_halt_news_disseminationIsSet = false;
    m_Is_reason_ipo_order_acceptance_period = false;
    m_Is_reason_ipo_order_acceptance_periodIsSet = false;
    m_Is_reason_ipo_pre_launch_period = false;
    m_Is_reason_ipo_pre_launch_periodIsSet = false;
    m_Is_reason_market_wide_circuit_breaker_level1 = false;
    m_Is_reason_market_wide_circuit_breaker_level1IsSet = false;
    m_Is_reason_market_wide_circuit_breaker_level2 = false;
    m_Is_reason_market_wide_circuit_breaker_level2IsSet = false;
    m_Is_reason_market_wide_circuit_breaker_level3 = false;
    m_Is_reason_market_wide_circuit_breaker_level3IsSet = false;
    m_Is_reason_not_applicable = false;
    m_Is_reason_not_applicableIsSet = false;
    m_Is_reason_not_available = false;
    m_Is_reason_not_availableIsSet = false;
}

Admin_TradingStatusModel::~Admin_TradingStatusModel()
{
}

void Admin_TradingStatusModel::validate()
{
    // TODO: implement validation
}

web::json::value Admin_TradingStatusModel::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SymbolIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_Timestamp_nanosIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("timestamp_nanos"))] = ModelBase::toJson(m_Timestamp_nanos);
    }
    if(m_TimestampIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Is_trading_liveIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_trading_live"))] = ModelBase::toJson(m_Is_trading_live);
    }
    if(m_Is_trading_haltedIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_trading_halted"))] = ModelBase::toJson(m_Is_trading_halted);
    }
    if(m_Is_trading_in_order_acceptance_periodIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_trading_in_order_acceptance_period"))] = ModelBase::toJson(m_Is_trading_in_order_acceptance_period);
    }
    if(m_Is_trading_pausedIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_trading_paused"))] = ModelBase::toJson(m_Is_trading_paused);
    }
    if(m_Is_reason_halt_news_pendingIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_reason_halt_news_pending"))] = ModelBase::toJson(m_Is_reason_halt_news_pending);
    }
    if(m_Is_reason_ipo_not_yet_tradingIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_reason_ipo_not_yet_trading"))] = ModelBase::toJson(m_Is_reason_ipo_not_yet_trading);
    }
    if(m_Is_reason_ipo_deferredIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_reason_ipo_deferred"))] = ModelBase::toJson(m_Is_reason_ipo_deferred);
    }
    if(m_Is_reason_halt_news_disseminationIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_reason_halt_news_dissemination"))] = ModelBase::toJson(m_Is_reason_halt_news_dissemination);
    }
    if(m_Is_reason_ipo_order_acceptance_periodIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_reason_ipo_order_acceptance_period"))] = ModelBase::toJson(m_Is_reason_ipo_order_acceptance_period);
    }
    if(m_Is_reason_ipo_pre_launch_periodIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_reason_ipo_pre_launch_period"))] = ModelBase::toJson(m_Is_reason_ipo_pre_launch_period);
    }
    if(m_Is_reason_market_wide_circuit_breaker_level1IsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_reason_market_wide_circuit_breaker_level1"))] = ModelBase::toJson(m_Is_reason_market_wide_circuit_breaker_level1);
    }
    if(m_Is_reason_market_wide_circuit_breaker_level2IsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_reason_market_wide_circuit_breaker_level2"))] = ModelBase::toJson(m_Is_reason_market_wide_circuit_breaker_level2);
    }
    if(m_Is_reason_market_wide_circuit_breaker_level3IsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_reason_market_wide_circuit_breaker_level3"))] = ModelBase::toJson(m_Is_reason_market_wide_circuit_breaker_level3);
    }
    if(m_Is_reason_not_applicableIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_reason_not_applicable"))] = ModelBase::toJson(m_Is_reason_not_applicable);
    }
    if(m_Is_reason_not_availableIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_reason_not_available"))] = ModelBase::toJson(m_Is_reason_not_available);
    }

    return val;
}

bool Admin_TradingStatusModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp_nanos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp_nanos")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTimestampNanos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestampNanos);
            setTimestampNanos(refVal_setTimestampNanos);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_trading_live"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_trading_live")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsTradingLive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsTradingLive);
            setIsTradingLive(refVal_setIsTradingLive);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_trading_halted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_trading_halted")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsTradingHalted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsTradingHalted);
            setIsTradingHalted(refVal_setIsTradingHalted);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_trading_in_order_acceptance_period"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_trading_in_order_acceptance_period")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsTradingInOrderAcceptancePeriod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsTradingInOrderAcceptancePeriod);
            setIsTradingInOrderAcceptancePeriod(refVal_setIsTradingInOrderAcceptancePeriod);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_trading_paused"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_trading_paused")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsTradingPaused;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsTradingPaused);
            setIsTradingPaused(refVal_setIsTradingPaused);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_reason_halt_news_pending"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_reason_halt_news_pending")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsReasonHaltNewsPending;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsReasonHaltNewsPending);
            setIsReasonHaltNewsPending(refVal_setIsReasonHaltNewsPending);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_reason_ipo_not_yet_trading"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_reason_ipo_not_yet_trading")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsReasonIpoNotYetTrading;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsReasonIpoNotYetTrading);
            setIsReasonIpoNotYetTrading(refVal_setIsReasonIpoNotYetTrading);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_reason_ipo_deferred"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_reason_ipo_deferred")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsReasonIpoDeferred;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsReasonIpoDeferred);
            setIsReasonIpoDeferred(refVal_setIsReasonIpoDeferred);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_reason_halt_news_dissemination"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_reason_halt_news_dissemination")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsReasonHaltNewsDissemination;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsReasonHaltNewsDissemination);
            setIsReasonHaltNewsDissemination(refVal_setIsReasonHaltNewsDissemination);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_reason_ipo_order_acceptance_period"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_reason_ipo_order_acceptance_period")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsReasonIpoOrderAcceptancePeriod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsReasonIpoOrderAcceptancePeriod);
            setIsReasonIpoOrderAcceptancePeriod(refVal_setIsReasonIpoOrderAcceptancePeriod);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_reason_ipo_pre_launch_period"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_reason_ipo_pre_launch_period")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsReasonIpoPreLaunchPeriod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsReasonIpoPreLaunchPeriod);
            setIsReasonIpoPreLaunchPeriod(refVal_setIsReasonIpoPreLaunchPeriod);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_reason_market_wide_circuit_breaker_level1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_reason_market_wide_circuit_breaker_level1")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsReasonMarketWideCircuitBreakerLevel1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsReasonMarketWideCircuitBreakerLevel1);
            setIsReasonMarketWideCircuitBreakerLevel1(refVal_setIsReasonMarketWideCircuitBreakerLevel1);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_reason_market_wide_circuit_breaker_level2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_reason_market_wide_circuit_breaker_level2")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsReasonMarketWideCircuitBreakerLevel2;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsReasonMarketWideCircuitBreakerLevel2);
            setIsReasonMarketWideCircuitBreakerLevel2(refVal_setIsReasonMarketWideCircuitBreakerLevel2);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_reason_market_wide_circuit_breaker_level3"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_reason_market_wide_circuit_breaker_level3")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsReasonMarketWideCircuitBreakerLevel3;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsReasonMarketWideCircuitBreakerLevel3);
            setIsReasonMarketWideCircuitBreakerLevel3(refVal_setIsReasonMarketWideCircuitBreakerLevel3);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_reason_not_applicable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_reason_not_applicable")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsReasonNotApplicable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsReasonNotApplicable);
            setIsReasonNotApplicable(refVal_setIsReasonNotApplicable);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_reason_not_available"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_reason_not_available")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsReasonNotAvailable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsReasonNotAvailable);
            setIsReasonNotAvailable(refVal_setIsReasonNotAvailable);
            
        }
    }
    return ok;
}

void Admin_TradingStatusModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_Timestamp_nanosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp_nanos")), m_Timestamp_nanos));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_Is_trading_liveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_trading_live")), m_Is_trading_live));
    }
    if(m_Is_trading_haltedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_trading_halted")), m_Is_trading_halted));
    }
    if(m_Is_trading_in_order_acceptance_periodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_trading_in_order_acceptance_period")), m_Is_trading_in_order_acceptance_period));
    }
    if(m_Is_trading_pausedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_trading_paused")), m_Is_trading_paused));
    }
    if(m_Is_reason_halt_news_pendingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_reason_halt_news_pending")), m_Is_reason_halt_news_pending));
    }
    if(m_Is_reason_ipo_not_yet_tradingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_reason_ipo_not_yet_trading")), m_Is_reason_ipo_not_yet_trading));
    }
    if(m_Is_reason_ipo_deferredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_reason_ipo_deferred")), m_Is_reason_ipo_deferred));
    }
    if(m_Is_reason_halt_news_disseminationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_reason_halt_news_dissemination")), m_Is_reason_halt_news_dissemination));
    }
    if(m_Is_reason_ipo_order_acceptance_periodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_reason_ipo_order_acceptance_period")), m_Is_reason_ipo_order_acceptance_period));
    }
    if(m_Is_reason_ipo_pre_launch_periodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_reason_ipo_pre_launch_period")), m_Is_reason_ipo_pre_launch_period));
    }
    if(m_Is_reason_market_wide_circuit_breaker_level1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_reason_market_wide_circuit_breaker_level1")), m_Is_reason_market_wide_circuit_breaker_level1));
    }
    if(m_Is_reason_market_wide_circuit_breaker_level2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_reason_market_wide_circuit_breaker_level2")), m_Is_reason_market_wide_circuit_breaker_level2));
    }
    if(m_Is_reason_market_wide_circuit_breaker_level3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_reason_market_wide_circuit_breaker_level3")), m_Is_reason_market_wide_circuit_breaker_level3));
    }
    if(m_Is_reason_not_applicableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_reason_not_applicable")), m_Is_reason_not_applicable));
    }
    if(m_Is_reason_not_availableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_reason_not_available")), m_Is_reason_not_available));
    }
}

bool Admin_TradingStatusModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp_nanos"))))
    {
        int64_t refVal_setTimestampNanos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp_nanos"))), refVal_setTimestampNanos );
        setTimestampNanos(refVal_setTimestampNanos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_trading_live"))))
    {
        bool refVal_setIsTradingLive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_trading_live"))), refVal_setIsTradingLive );
        setIsTradingLive(refVal_setIsTradingLive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_trading_halted"))))
    {
        bool refVal_setIsTradingHalted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_trading_halted"))), refVal_setIsTradingHalted );
        setIsTradingHalted(refVal_setIsTradingHalted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_trading_in_order_acceptance_period"))))
    {
        bool refVal_setIsTradingInOrderAcceptancePeriod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_trading_in_order_acceptance_period"))), refVal_setIsTradingInOrderAcceptancePeriod );
        setIsTradingInOrderAcceptancePeriod(refVal_setIsTradingInOrderAcceptancePeriod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_trading_paused"))))
    {
        bool refVal_setIsTradingPaused;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_trading_paused"))), refVal_setIsTradingPaused );
        setIsTradingPaused(refVal_setIsTradingPaused);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_reason_halt_news_pending"))))
    {
        bool refVal_setIsReasonHaltNewsPending;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_reason_halt_news_pending"))), refVal_setIsReasonHaltNewsPending );
        setIsReasonHaltNewsPending(refVal_setIsReasonHaltNewsPending);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_reason_ipo_not_yet_trading"))))
    {
        bool refVal_setIsReasonIpoNotYetTrading;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_reason_ipo_not_yet_trading"))), refVal_setIsReasonIpoNotYetTrading );
        setIsReasonIpoNotYetTrading(refVal_setIsReasonIpoNotYetTrading);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_reason_ipo_deferred"))))
    {
        bool refVal_setIsReasonIpoDeferred;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_reason_ipo_deferred"))), refVal_setIsReasonIpoDeferred );
        setIsReasonIpoDeferred(refVal_setIsReasonIpoDeferred);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_reason_halt_news_dissemination"))))
    {
        bool refVal_setIsReasonHaltNewsDissemination;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_reason_halt_news_dissemination"))), refVal_setIsReasonHaltNewsDissemination );
        setIsReasonHaltNewsDissemination(refVal_setIsReasonHaltNewsDissemination);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_reason_ipo_order_acceptance_period"))))
    {
        bool refVal_setIsReasonIpoOrderAcceptancePeriod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_reason_ipo_order_acceptance_period"))), refVal_setIsReasonIpoOrderAcceptancePeriod );
        setIsReasonIpoOrderAcceptancePeriod(refVal_setIsReasonIpoOrderAcceptancePeriod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_reason_ipo_pre_launch_period"))))
    {
        bool refVal_setIsReasonIpoPreLaunchPeriod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_reason_ipo_pre_launch_period"))), refVal_setIsReasonIpoPreLaunchPeriod );
        setIsReasonIpoPreLaunchPeriod(refVal_setIsReasonIpoPreLaunchPeriod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_reason_market_wide_circuit_breaker_level1"))))
    {
        bool refVal_setIsReasonMarketWideCircuitBreakerLevel1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_reason_market_wide_circuit_breaker_level1"))), refVal_setIsReasonMarketWideCircuitBreakerLevel1 );
        setIsReasonMarketWideCircuitBreakerLevel1(refVal_setIsReasonMarketWideCircuitBreakerLevel1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_reason_market_wide_circuit_breaker_level2"))))
    {
        bool refVal_setIsReasonMarketWideCircuitBreakerLevel2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_reason_market_wide_circuit_breaker_level2"))), refVal_setIsReasonMarketWideCircuitBreakerLevel2 );
        setIsReasonMarketWideCircuitBreakerLevel2(refVal_setIsReasonMarketWideCircuitBreakerLevel2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_reason_market_wide_circuit_breaker_level3"))))
    {
        bool refVal_setIsReasonMarketWideCircuitBreakerLevel3;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_reason_market_wide_circuit_breaker_level3"))), refVal_setIsReasonMarketWideCircuitBreakerLevel3 );
        setIsReasonMarketWideCircuitBreakerLevel3(refVal_setIsReasonMarketWideCircuitBreakerLevel3);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_reason_not_applicable"))))
    {
        bool refVal_setIsReasonNotApplicable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_reason_not_applicable"))), refVal_setIsReasonNotApplicable );
        setIsReasonNotApplicable(refVal_setIsReasonNotApplicable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_reason_not_available"))))
    {
        bool refVal_setIsReasonNotAvailable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_reason_not_available"))), refVal_setIsReasonNotAvailable );
        setIsReasonNotAvailable(refVal_setIsReasonNotAvailable);
    }
    return ok;
}


utility::string_t Admin_TradingStatusModel::getSymbol() const
{
    return m_Symbol;
}


void Admin_TradingStatusModel::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Admin_TradingStatusModel::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Admin_TradingStatusModel::unsetSymbol()
{
    m_SymbolIsSet = false;
}
int64_t Admin_TradingStatusModel::getTimestampNanos() const
{
    return m_Timestamp_nanos;
}

void Admin_TradingStatusModel::setTimestampNanos(int64_t value)
{
    m_Timestamp_nanos = value;
    m_Timestamp_nanosIsSet = true;
}

bool Admin_TradingStatusModel::timestampNanosIsSet() const
{
    return m_Timestamp_nanosIsSet;
}

void Admin_TradingStatusModel::unsetTimestamp_nanos()
{
    m_Timestamp_nanosIsSet = false;
}
utility::datetime Admin_TradingStatusModel::getTimestamp() const
{
    return m_Timestamp;
}


void Admin_TradingStatusModel::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Admin_TradingStatusModel::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Admin_TradingStatusModel::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
bool Admin_TradingStatusModel::isIsTradingLive() const
{
    return m_Is_trading_live;
}

void Admin_TradingStatusModel::setIsTradingLive(bool value)
{
    m_Is_trading_live = value;
    m_Is_trading_liveIsSet = true;
}

bool Admin_TradingStatusModel::isTradingLiveIsSet() const
{
    return m_Is_trading_liveIsSet;
}

void Admin_TradingStatusModel::unsetIs_trading_live()
{
    m_Is_trading_liveIsSet = false;
}
bool Admin_TradingStatusModel::isIsTradingHalted() const
{
    return m_Is_trading_halted;
}

void Admin_TradingStatusModel::setIsTradingHalted(bool value)
{
    m_Is_trading_halted = value;
    m_Is_trading_haltedIsSet = true;
}

bool Admin_TradingStatusModel::isTradingHaltedIsSet() const
{
    return m_Is_trading_haltedIsSet;
}

void Admin_TradingStatusModel::unsetIs_trading_halted()
{
    m_Is_trading_haltedIsSet = false;
}
bool Admin_TradingStatusModel::isIsTradingInOrderAcceptancePeriod() const
{
    return m_Is_trading_in_order_acceptance_period;
}

void Admin_TradingStatusModel::setIsTradingInOrderAcceptancePeriod(bool value)
{
    m_Is_trading_in_order_acceptance_period = value;
    m_Is_trading_in_order_acceptance_periodIsSet = true;
}

bool Admin_TradingStatusModel::isTradingInOrderAcceptancePeriodIsSet() const
{
    return m_Is_trading_in_order_acceptance_periodIsSet;
}

void Admin_TradingStatusModel::unsetIs_trading_in_order_acceptance_period()
{
    m_Is_trading_in_order_acceptance_periodIsSet = false;
}
bool Admin_TradingStatusModel::isIsTradingPaused() const
{
    return m_Is_trading_paused;
}

void Admin_TradingStatusModel::setIsTradingPaused(bool value)
{
    m_Is_trading_paused = value;
    m_Is_trading_pausedIsSet = true;
}

bool Admin_TradingStatusModel::isTradingPausedIsSet() const
{
    return m_Is_trading_pausedIsSet;
}

void Admin_TradingStatusModel::unsetIs_trading_paused()
{
    m_Is_trading_pausedIsSet = false;
}
bool Admin_TradingStatusModel::isIsReasonHaltNewsPending() const
{
    return m_Is_reason_halt_news_pending;
}

void Admin_TradingStatusModel::setIsReasonHaltNewsPending(bool value)
{
    m_Is_reason_halt_news_pending = value;
    m_Is_reason_halt_news_pendingIsSet = true;
}

bool Admin_TradingStatusModel::isReasonHaltNewsPendingIsSet() const
{
    return m_Is_reason_halt_news_pendingIsSet;
}

void Admin_TradingStatusModel::unsetIs_reason_halt_news_pending()
{
    m_Is_reason_halt_news_pendingIsSet = false;
}
bool Admin_TradingStatusModel::isIsReasonIpoNotYetTrading() const
{
    return m_Is_reason_ipo_not_yet_trading;
}

void Admin_TradingStatusModel::setIsReasonIpoNotYetTrading(bool value)
{
    m_Is_reason_ipo_not_yet_trading = value;
    m_Is_reason_ipo_not_yet_tradingIsSet = true;
}

bool Admin_TradingStatusModel::isReasonIpoNotYetTradingIsSet() const
{
    return m_Is_reason_ipo_not_yet_tradingIsSet;
}

void Admin_TradingStatusModel::unsetIs_reason_ipo_not_yet_trading()
{
    m_Is_reason_ipo_not_yet_tradingIsSet = false;
}
bool Admin_TradingStatusModel::isIsReasonIpoDeferred() const
{
    return m_Is_reason_ipo_deferred;
}

void Admin_TradingStatusModel::setIsReasonIpoDeferred(bool value)
{
    m_Is_reason_ipo_deferred = value;
    m_Is_reason_ipo_deferredIsSet = true;
}

bool Admin_TradingStatusModel::isReasonIpoDeferredIsSet() const
{
    return m_Is_reason_ipo_deferredIsSet;
}

void Admin_TradingStatusModel::unsetIs_reason_ipo_deferred()
{
    m_Is_reason_ipo_deferredIsSet = false;
}
bool Admin_TradingStatusModel::isIsReasonHaltNewsDissemination() const
{
    return m_Is_reason_halt_news_dissemination;
}

void Admin_TradingStatusModel::setIsReasonHaltNewsDissemination(bool value)
{
    m_Is_reason_halt_news_dissemination = value;
    m_Is_reason_halt_news_disseminationIsSet = true;
}

bool Admin_TradingStatusModel::isReasonHaltNewsDisseminationIsSet() const
{
    return m_Is_reason_halt_news_disseminationIsSet;
}

void Admin_TradingStatusModel::unsetIs_reason_halt_news_dissemination()
{
    m_Is_reason_halt_news_disseminationIsSet = false;
}
bool Admin_TradingStatusModel::isIsReasonIpoOrderAcceptancePeriod() const
{
    return m_Is_reason_ipo_order_acceptance_period;
}

void Admin_TradingStatusModel::setIsReasonIpoOrderAcceptancePeriod(bool value)
{
    m_Is_reason_ipo_order_acceptance_period = value;
    m_Is_reason_ipo_order_acceptance_periodIsSet = true;
}

bool Admin_TradingStatusModel::isReasonIpoOrderAcceptancePeriodIsSet() const
{
    return m_Is_reason_ipo_order_acceptance_periodIsSet;
}

void Admin_TradingStatusModel::unsetIs_reason_ipo_order_acceptance_period()
{
    m_Is_reason_ipo_order_acceptance_periodIsSet = false;
}
bool Admin_TradingStatusModel::isIsReasonIpoPreLaunchPeriod() const
{
    return m_Is_reason_ipo_pre_launch_period;
}

void Admin_TradingStatusModel::setIsReasonIpoPreLaunchPeriod(bool value)
{
    m_Is_reason_ipo_pre_launch_period = value;
    m_Is_reason_ipo_pre_launch_periodIsSet = true;
}

bool Admin_TradingStatusModel::isReasonIpoPreLaunchPeriodIsSet() const
{
    return m_Is_reason_ipo_pre_launch_periodIsSet;
}

void Admin_TradingStatusModel::unsetIs_reason_ipo_pre_launch_period()
{
    m_Is_reason_ipo_pre_launch_periodIsSet = false;
}
bool Admin_TradingStatusModel::isIsReasonMarketWideCircuitBreakerLevel1() const
{
    return m_Is_reason_market_wide_circuit_breaker_level1;
}

void Admin_TradingStatusModel::setIsReasonMarketWideCircuitBreakerLevel1(bool value)
{
    m_Is_reason_market_wide_circuit_breaker_level1 = value;
    m_Is_reason_market_wide_circuit_breaker_level1IsSet = true;
}

bool Admin_TradingStatusModel::isReasonMarketWideCircuitBreakerLevel1IsSet() const
{
    return m_Is_reason_market_wide_circuit_breaker_level1IsSet;
}

void Admin_TradingStatusModel::unsetIs_reason_market_wide_circuit_breaker_level1()
{
    m_Is_reason_market_wide_circuit_breaker_level1IsSet = false;
}
bool Admin_TradingStatusModel::isIsReasonMarketWideCircuitBreakerLevel2() const
{
    return m_Is_reason_market_wide_circuit_breaker_level2;
}

void Admin_TradingStatusModel::setIsReasonMarketWideCircuitBreakerLevel2(bool value)
{
    m_Is_reason_market_wide_circuit_breaker_level2 = value;
    m_Is_reason_market_wide_circuit_breaker_level2IsSet = true;
}

bool Admin_TradingStatusModel::isReasonMarketWideCircuitBreakerLevel2IsSet() const
{
    return m_Is_reason_market_wide_circuit_breaker_level2IsSet;
}

void Admin_TradingStatusModel::unsetIs_reason_market_wide_circuit_breaker_level2()
{
    m_Is_reason_market_wide_circuit_breaker_level2IsSet = false;
}
bool Admin_TradingStatusModel::isIsReasonMarketWideCircuitBreakerLevel3() const
{
    return m_Is_reason_market_wide_circuit_breaker_level3;
}

void Admin_TradingStatusModel::setIsReasonMarketWideCircuitBreakerLevel3(bool value)
{
    m_Is_reason_market_wide_circuit_breaker_level3 = value;
    m_Is_reason_market_wide_circuit_breaker_level3IsSet = true;
}

bool Admin_TradingStatusModel::isReasonMarketWideCircuitBreakerLevel3IsSet() const
{
    return m_Is_reason_market_wide_circuit_breaker_level3IsSet;
}

void Admin_TradingStatusModel::unsetIs_reason_market_wide_circuit_breaker_level3()
{
    m_Is_reason_market_wide_circuit_breaker_level3IsSet = false;
}
bool Admin_TradingStatusModel::isIsReasonNotApplicable() const
{
    return m_Is_reason_not_applicable;
}

void Admin_TradingStatusModel::setIsReasonNotApplicable(bool value)
{
    m_Is_reason_not_applicable = value;
    m_Is_reason_not_applicableIsSet = true;
}

bool Admin_TradingStatusModel::isReasonNotApplicableIsSet() const
{
    return m_Is_reason_not_applicableIsSet;
}

void Admin_TradingStatusModel::unsetIs_reason_not_applicable()
{
    m_Is_reason_not_applicableIsSet = false;
}
bool Admin_TradingStatusModel::isIsReasonNotAvailable() const
{
    return m_Is_reason_not_available;
}

void Admin_TradingStatusModel::setIsReasonNotAvailable(bool value)
{
    m_Is_reason_not_available = value;
    m_Is_reason_not_availableIsSet = true;
}

bool Admin_TradingStatusModel::isReasonNotAvailableIsSet() const
{
    return m_Is_reason_not_availableIsSet;
}

void Admin_TradingStatusModel::unsetIs_reason_not_available()
{
    m_Is_reason_not_availableIsSet = false;
}

}
}
}
}


