/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Admin_OfficialPriceModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Admin_OfficialPriceModel::Admin_OfficialPriceModel()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Timestamp_nanos = 0L;
    m_Timestamp_nanosIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_Price_type = 0;
    m_Price_typeIsSet = false;
    m_Price_type_code = utility::conversions::to_string_t("");
    m_Price_type_codeIsSet = false;
    m_Price_type_text = utility::conversions::to_string_t("");
    m_Price_type_textIsSet = false;
    m_Is_price_type_opening = false;
    m_Is_price_type_openingIsSet = false;
    m_Is_price_type_closing = false;
    m_Is_price_type_closingIsSet = false;
    m_Official_price = 0.0;
    m_Official_priceIsSet = false;
}

Admin_OfficialPriceModel::~Admin_OfficialPriceModel()
{
}

void Admin_OfficialPriceModel::validate()
{
    // TODO: implement validation
}

web::json::value Admin_OfficialPriceModel::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SymbolIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_Timestamp_nanosIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("timestamp_nanos"))] = ModelBase::toJson(m_Timestamp_nanos);
    }
    if(m_TimestampIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Price_typeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("price_type"))] = ModelBase::toJson(m_Price_type);
    }
    if(m_Price_type_codeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("price_type_code"))] = ModelBase::toJson(m_Price_type_code);
    }
    if(m_Price_type_textIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("price_type_text"))] = ModelBase::toJson(m_Price_type_text);
    }
    if(m_Is_price_type_openingIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_price_type_opening"))] = ModelBase::toJson(m_Is_price_type_opening);
    }
    if(m_Is_price_type_closingIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_price_type_closing"))] = ModelBase::toJson(m_Is_price_type_closing);
    }
    if(m_Official_priceIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("official_price"))] = ModelBase::toJson(m_Official_price);
    }

    return val;
}

bool Admin_OfficialPriceModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp_nanos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp_nanos")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTimestampNanos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestampNanos);
            setTimestampNanos(refVal_setTimestampNanos);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price_type")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPriceType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriceType);
            setPriceType(refVal_setPriceType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price_type_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price_type_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPriceTypeCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriceTypeCode);
            setPriceTypeCode(refVal_setPriceTypeCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price_type_text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price_type_text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPriceTypeText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriceTypeText);
            setPriceTypeText(refVal_setPriceTypeText);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_price_type_opening"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_price_type_opening")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsPriceTypeOpening;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsPriceTypeOpening);
            setIsPriceTypeOpening(refVal_setIsPriceTypeOpening);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_price_type_closing"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_price_type_closing")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsPriceTypeClosing;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsPriceTypeClosing);
            setIsPriceTypeClosing(refVal_setIsPriceTypeClosing);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("official_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("official_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setOfficialPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfficialPrice);
            setOfficialPrice(refVal_setOfficialPrice);
            
        }
    }
    return ok;
}

void Admin_OfficialPriceModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_Timestamp_nanosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp_nanos")), m_Timestamp_nanos));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_Price_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price_type")), m_Price_type));
    }
    if(m_Price_type_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price_type_code")), m_Price_type_code));
    }
    if(m_Price_type_textIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price_type_text")), m_Price_type_text));
    }
    if(m_Is_price_type_openingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_price_type_opening")), m_Is_price_type_opening));
    }
    if(m_Is_price_type_closingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_price_type_closing")), m_Is_price_type_closing));
    }
    if(m_Official_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("official_price")), m_Official_price));
    }
}

bool Admin_OfficialPriceModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp_nanos"))))
    {
        int64_t refVal_setTimestampNanos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp_nanos"))), refVal_setTimestampNanos );
        setTimestampNanos(refVal_setTimestampNanos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price_type"))))
    {
        int32_t refVal_setPriceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price_type"))), refVal_setPriceType );
        setPriceType(refVal_setPriceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price_type_code"))))
    {
        utility::string_t refVal_setPriceTypeCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price_type_code"))), refVal_setPriceTypeCode );
        setPriceTypeCode(refVal_setPriceTypeCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price_type_text"))))
    {
        utility::string_t refVal_setPriceTypeText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price_type_text"))), refVal_setPriceTypeText );
        setPriceTypeText(refVal_setPriceTypeText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_price_type_opening"))))
    {
        bool refVal_setIsPriceTypeOpening;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_price_type_opening"))), refVal_setIsPriceTypeOpening );
        setIsPriceTypeOpening(refVal_setIsPriceTypeOpening);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_price_type_closing"))))
    {
        bool refVal_setIsPriceTypeClosing;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_price_type_closing"))), refVal_setIsPriceTypeClosing );
        setIsPriceTypeClosing(refVal_setIsPriceTypeClosing);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("official_price"))))
    {
        double refVal_setOfficialPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("official_price"))), refVal_setOfficialPrice );
        setOfficialPrice(refVal_setOfficialPrice);
    }
    return ok;
}


utility::string_t Admin_OfficialPriceModel::getSymbol() const
{
    return m_Symbol;
}


void Admin_OfficialPriceModel::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Admin_OfficialPriceModel::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Admin_OfficialPriceModel::unsetSymbol()
{
    m_SymbolIsSet = false;
}
int64_t Admin_OfficialPriceModel::getTimestampNanos() const
{
    return m_Timestamp_nanos;
}

void Admin_OfficialPriceModel::setTimestampNanos(int64_t value)
{
    m_Timestamp_nanos = value;
    m_Timestamp_nanosIsSet = true;
}

bool Admin_OfficialPriceModel::timestampNanosIsSet() const
{
    return m_Timestamp_nanosIsSet;
}

void Admin_OfficialPriceModel::unsetTimestamp_nanos()
{
    m_Timestamp_nanosIsSet = false;
}
utility::datetime Admin_OfficialPriceModel::getTimestamp() const
{
    return m_Timestamp;
}


void Admin_OfficialPriceModel::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Admin_OfficialPriceModel::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Admin_OfficialPriceModel::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
int32_t Admin_OfficialPriceModel::getPriceType() const
{
    return m_Price_type;
}

void Admin_OfficialPriceModel::setPriceType(int32_t value)
{
    m_Price_type = value;
    m_Price_typeIsSet = true;
}

bool Admin_OfficialPriceModel::priceTypeIsSet() const
{
    return m_Price_typeIsSet;
}

void Admin_OfficialPriceModel::unsetPrice_type()
{
    m_Price_typeIsSet = false;
}
utility::string_t Admin_OfficialPriceModel::getPriceTypeCode() const
{
    return m_Price_type_code;
}


void Admin_OfficialPriceModel::setPriceTypeCode(const utility::string_t& value)
{
    m_Price_type_code = value;
    m_Price_type_codeIsSet = true;
}

bool Admin_OfficialPriceModel::priceTypeCodeIsSet() const
{
    return m_Price_type_codeIsSet;
}

void Admin_OfficialPriceModel::unsetPrice_type_code()
{
    m_Price_type_codeIsSet = false;
}
utility::string_t Admin_OfficialPriceModel::getPriceTypeText() const
{
    return m_Price_type_text;
}


void Admin_OfficialPriceModel::setPriceTypeText(const utility::string_t& value)
{
    m_Price_type_text = value;
    m_Price_type_textIsSet = true;
}

bool Admin_OfficialPriceModel::priceTypeTextIsSet() const
{
    return m_Price_type_textIsSet;
}

void Admin_OfficialPriceModel::unsetPrice_type_text()
{
    m_Price_type_textIsSet = false;
}
bool Admin_OfficialPriceModel::isIsPriceTypeOpening() const
{
    return m_Is_price_type_opening;
}

void Admin_OfficialPriceModel::setIsPriceTypeOpening(bool value)
{
    m_Is_price_type_opening = value;
    m_Is_price_type_openingIsSet = true;
}

bool Admin_OfficialPriceModel::isPriceTypeOpeningIsSet() const
{
    return m_Is_price_type_openingIsSet;
}

void Admin_OfficialPriceModel::unsetIs_price_type_opening()
{
    m_Is_price_type_openingIsSet = false;
}
bool Admin_OfficialPriceModel::isIsPriceTypeClosing() const
{
    return m_Is_price_type_closing;
}

void Admin_OfficialPriceModel::setIsPriceTypeClosing(bool value)
{
    m_Is_price_type_closing = value;
    m_Is_price_type_closingIsSet = true;
}

bool Admin_OfficialPriceModel::isPriceTypeClosingIsSet() const
{
    return m_Is_price_type_closingIsSet;
}

void Admin_OfficialPriceModel::unsetIs_price_type_closing()
{
    m_Is_price_type_closingIsSet = false;
}
double Admin_OfficialPriceModel::getOfficialPrice() const
{
    return m_Official_price;
}

void Admin_OfficialPriceModel::setOfficialPrice(double value)
{
    m_Official_price = value;
    m_Official_priceIsSet = true;
}

bool Admin_OfficialPriceModel::officialPriceIsSet() const
{
    return m_Official_priceIsSet;
}

void Admin_OfficialPriceModel::unsetOfficial_price()
{
    m_Official_priceIsSet = false;
}

}
}
}
}


