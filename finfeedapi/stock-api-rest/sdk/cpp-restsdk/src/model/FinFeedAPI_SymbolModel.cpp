/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/FinFeedAPI_SymbolModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

FinFeedAPI_SymbolModel::FinFeedAPI_SymbolModel()
{
    m_Symbol_id = utility::conversions::to_string_t("");
    m_Symbol_idIsSet = false;
    m_Exchange_id = utility::conversions::to_string_t("");
    m_Exchange_idIsSet = false;
    m_Security_category = utility::conversions::to_string_t("");
    m_Security_categoryIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_date = utility::conversions::to_string_t("");
    m_dateIsSet = false;
    m_Asset_class = utility::conversions::to_string_t("");
    m_Asset_classIsSet = false;
    m_Cfi_code = utility::conversions::to_string_t("");
    m_Cfi_codeIsSet = false;
    m_Cfi_category = utility::conversions::to_string_t("");
    m_Cfi_categoryIsSet = false;
    m_Cfi_group = utility::conversions::to_string_t("");
    m_Cfi_groupIsSet = false;
    m_Cfi_attribute1 = utility::conversions::to_string_t("");
    m_Cfi_attribute1IsSet = false;
    m_Cfi_attribute2 = utility::conversions::to_string_t("");
    m_Cfi_attribute2IsSet = false;
    m_Cfi_attribute3 = utility::conversions::to_string_t("");
    m_Cfi_attribute3IsSet = false;
    m_Cfi_attribute4 = utility::conversions::to_string_t("");
    m_Cfi_attribute4IsSet = false;
    m_Cfi_category_desc = utility::conversions::to_string_t("");
    m_Cfi_category_descIsSet = false;
    m_Cfi_group_desc = utility::conversions::to_string_t("");
    m_Cfi_group_descIsSet = false;
    m_Cfi_attribute1_desc = utility::conversions::to_string_t("");
    m_Cfi_attribute1_descIsSet = false;
    m_Cfi_attribute2_desc = utility::conversions::to_string_t("");
    m_Cfi_attribute2_descIsSet = false;
    m_Cfi_attribute3_desc = utility::conversions::to_string_t("");
    m_Cfi_attribute3_descIsSet = false;
    m_Cfi_attribute4_desc = utility::conversions::to_string_t("");
    m_Cfi_attribute4_descIsSet = false;
}

FinFeedAPI_SymbolModel::~FinFeedAPI_SymbolModel()
{
}

void FinFeedAPI_SymbolModel::validate()
{
    // TODO: implement validation
}

web::json::value FinFeedAPI_SymbolModel::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Symbol_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("symbol_id"))] = ModelBase::toJson(m_Symbol_id);
    }
    if(m_Exchange_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("exchange_id"))] = ModelBase::toJson(m_Exchange_id);
    }
    if(m_Security_categoryIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("security_category"))] = ModelBase::toJson(m_Security_category);
    }
    if(m_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_dateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("date"))] = ModelBase::toJson(m_date);
    }
    if(m_Asset_classIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("asset_class"))] = ModelBase::toJson(m_Asset_class);
    }
    if(m_Cfi_codeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("cfi_code"))] = ModelBase::toJson(m_Cfi_code);
    }
    if(m_Cfi_categoryIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("cfi_category"))] = ModelBase::toJson(m_Cfi_category);
    }
    if(m_Cfi_groupIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("cfi_group"))] = ModelBase::toJson(m_Cfi_group);
    }
    if(m_Cfi_attribute1IsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("cfi_attribute1"))] = ModelBase::toJson(m_Cfi_attribute1);
    }
    if(m_Cfi_attribute2IsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("cfi_attribute2"))] = ModelBase::toJson(m_Cfi_attribute2);
    }
    if(m_Cfi_attribute3IsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("cfi_attribute3"))] = ModelBase::toJson(m_Cfi_attribute3);
    }
    if(m_Cfi_attribute4IsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("cfi_attribute4"))] = ModelBase::toJson(m_Cfi_attribute4);
    }
    if(m_Cfi_category_descIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("cfi_category_desc"))] = ModelBase::toJson(m_Cfi_category_desc);
    }
    if(m_Cfi_group_descIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("cfi_group_desc"))] = ModelBase::toJson(m_Cfi_group_desc);
    }
    if(m_Cfi_attribute1_descIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("cfi_attribute1_desc"))] = ModelBase::toJson(m_Cfi_attribute1_desc);
    }
    if(m_Cfi_attribute2_descIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("cfi_attribute2_desc"))] = ModelBase::toJson(m_Cfi_attribute2_desc);
    }
    if(m_Cfi_attribute3_descIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("cfi_attribute3_desc"))] = ModelBase::toJson(m_Cfi_attribute3_desc);
    }
    if(m_Cfi_attribute4_descIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("cfi_attribute4_desc"))] = ModelBase::toJson(m_Cfi_attribute4_desc);
    }

    return val;
}

bool FinFeedAPI_SymbolModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("symbol_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("symbol_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolId);
            setSymbolId(refVal_setSymbolId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("exchange_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("exchange_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExchangeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExchangeId);
            setExchangeId(refVal_setExchangeId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("security_category"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("security_category")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSecurityCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecurityCategory);
            setSecurityCategory(refVal_setSecurityCategory);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDate);
            setDate(refVal_setDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("asset_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("asset_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetClass);
            setAssetClass(refVal_setAssetClass);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("cfi_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("cfi_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCfiCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCfiCode);
            setCfiCode(refVal_setCfiCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("cfi_category"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("cfi_category")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCfiCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCfiCategory);
            setCfiCategory(refVal_setCfiCategory);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("cfi_group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("cfi_group")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCfiGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCfiGroup);
            setCfiGroup(refVal_setCfiGroup);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCfiAttribute1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCfiAttribute1);
            setCfiAttribute1(refVal_setCfiAttribute1);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute2")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCfiAttribute2;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCfiAttribute2);
            setCfiAttribute2(refVal_setCfiAttribute2);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute3"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute3")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCfiAttribute3;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCfiAttribute3);
            setCfiAttribute3(refVal_setCfiAttribute3);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute4"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute4")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCfiAttribute4;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCfiAttribute4);
            setCfiAttribute4(refVal_setCfiAttribute4);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("cfi_category_desc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("cfi_category_desc")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCfiCategoryDesc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCfiCategoryDesc);
            setCfiCategoryDesc(refVal_setCfiCategoryDesc);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("cfi_group_desc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("cfi_group_desc")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCfiGroupDesc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCfiGroupDesc);
            setCfiGroupDesc(refVal_setCfiGroupDesc);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute1_desc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute1_desc")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCfiAttribute1Desc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCfiAttribute1Desc);
            setCfiAttribute1Desc(refVal_setCfiAttribute1Desc);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute2_desc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute2_desc")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCfiAttribute2Desc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCfiAttribute2Desc);
            setCfiAttribute2Desc(refVal_setCfiAttribute2Desc);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute3_desc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute3_desc")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCfiAttribute3Desc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCfiAttribute3Desc);
            setCfiAttribute3Desc(refVal_setCfiAttribute3Desc);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute4_desc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute4_desc")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCfiAttribute4Desc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCfiAttribute4Desc);
            setCfiAttribute4Desc(refVal_setCfiAttribute4Desc);
            
        }
    }
    return ok;
}

void FinFeedAPI_SymbolModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Symbol_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("symbol_id")), m_Symbol_id));
    }
    if(m_Exchange_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("exchange_id")), m_Exchange_id));
    }
    if(m_Security_categoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("security_category")), m_Security_category));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("name")), m_Name));
    }
    if(m_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("date")), m_date));
    }
    if(m_Asset_classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("asset_class")), m_Asset_class));
    }
    if(m_Cfi_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("cfi_code")), m_Cfi_code));
    }
    if(m_Cfi_categoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("cfi_category")), m_Cfi_category));
    }
    if(m_Cfi_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("cfi_group")), m_Cfi_group));
    }
    if(m_Cfi_attribute1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("cfi_attribute1")), m_Cfi_attribute1));
    }
    if(m_Cfi_attribute2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("cfi_attribute2")), m_Cfi_attribute2));
    }
    if(m_Cfi_attribute3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("cfi_attribute3")), m_Cfi_attribute3));
    }
    if(m_Cfi_attribute4IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("cfi_attribute4")), m_Cfi_attribute4));
    }
    if(m_Cfi_category_descIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("cfi_category_desc")), m_Cfi_category_desc));
    }
    if(m_Cfi_group_descIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("cfi_group_desc")), m_Cfi_group_desc));
    }
    if(m_Cfi_attribute1_descIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("cfi_attribute1_desc")), m_Cfi_attribute1_desc));
    }
    if(m_Cfi_attribute2_descIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("cfi_attribute2_desc")), m_Cfi_attribute2_desc));
    }
    if(m_Cfi_attribute3_descIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("cfi_attribute3_desc")), m_Cfi_attribute3_desc));
    }
    if(m_Cfi_attribute4_descIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("cfi_attribute4_desc")), m_Cfi_attribute4_desc));
    }
}

bool FinFeedAPI_SymbolModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("symbol_id"))))
    {
        utility::string_t refVal_setSymbolId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("symbol_id"))), refVal_setSymbolId );
        setSymbolId(refVal_setSymbolId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("exchange_id"))))
    {
        utility::string_t refVal_setExchangeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("exchange_id"))), refVal_setExchangeId );
        setExchangeId(refVal_setExchangeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("security_category"))))
    {
        utility::string_t refVal_setSecurityCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("security_category"))), refVal_setSecurityCategory );
        setSecurityCategory(refVal_setSecurityCategory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("date"))))
    {
        utility::string_t refVal_setDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("date"))), refVal_setDate );
        setDate(refVal_setDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("asset_class"))))
    {
        utility::string_t refVal_setAssetClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("asset_class"))), refVal_setAssetClass );
        setAssetClass(refVal_setAssetClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("cfi_code"))))
    {
        utility::string_t refVal_setCfiCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("cfi_code"))), refVal_setCfiCode );
        setCfiCode(refVal_setCfiCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("cfi_category"))))
    {
        utility::string_t refVal_setCfiCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("cfi_category"))), refVal_setCfiCategory );
        setCfiCategory(refVal_setCfiCategory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("cfi_group"))))
    {
        utility::string_t refVal_setCfiGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("cfi_group"))), refVal_setCfiGroup );
        setCfiGroup(refVal_setCfiGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute1"))))
    {
        utility::string_t refVal_setCfiAttribute1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute1"))), refVal_setCfiAttribute1 );
        setCfiAttribute1(refVal_setCfiAttribute1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute2"))))
    {
        utility::string_t refVal_setCfiAttribute2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute2"))), refVal_setCfiAttribute2 );
        setCfiAttribute2(refVal_setCfiAttribute2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute3"))))
    {
        utility::string_t refVal_setCfiAttribute3;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute3"))), refVal_setCfiAttribute3 );
        setCfiAttribute3(refVal_setCfiAttribute3);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute4"))))
    {
        utility::string_t refVal_setCfiAttribute4;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute4"))), refVal_setCfiAttribute4 );
        setCfiAttribute4(refVal_setCfiAttribute4);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("cfi_category_desc"))))
    {
        utility::string_t refVal_setCfiCategoryDesc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("cfi_category_desc"))), refVal_setCfiCategoryDesc );
        setCfiCategoryDesc(refVal_setCfiCategoryDesc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("cfi_group_desc"))))
    {
        utility::string_t refVal_setCfiGroupDesc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("cfi_group_desc"))), refVal_setCfiGroupDesc );
        setCfiGroupDesc(refVal_setCfiGroupDesc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute1_desc"))))
    {
        utility::string_t refVal_setCfiAttribute1Desc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute1_desc"))), refVal_setCfiAttribute1Desc );
        setCfiAttribute1Desc(refVal_setCfiAttribute1Desc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute2_desc"))))
    {
        utility::string_t refVal_setCfiAttribute2Desc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute2_desc"))), refVal_setCfiAttribute2Desc );
        setCfiAttribute2Desc(refVal_setCfiAttribute2Desc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute3_desc"))))
    {
        utility::string_t refVal_setCfiAttribute3Desc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute3_desc"))), refVal_setCfiAttribute3Desc );
        setCfiAttribute3Desc(refVal_setCfiAttribute3Desc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute4_desc"))))
    {
        utility::string_t refVal_setCfiAttribute4Desc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("cfi_attribute4_desc"))), refVal_setCfiAttribute4Desc );
        setCfiAttribute4Desc(refVal_setCfiAttribute4Desc);
    }
    return ok;
}


utility::string_t FinFeedAPI_SymbolModel::getSymbolId() const
{
    return m_Symbol_id;
}


void FinFeedAPI_SymbolModel::setSymbolId(const utility::string_t& value)
{
    m_Symbol_id = value;
    m_Symbol_idIsSet = true;
}

bool FinFeedAPI_SymbolModel::symbolIdIsSet() const
{
    return m_Symbol_idIsSet;
}

void FinFeedAPI_SymbolModel::unsetSymbol_id()
{
    m_Symbol_idIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getExchangeId() const
{
    return m_Exchange_id;
}


void FinFeedAPI_SymbolModel::setExchangeId(const utility::string_t& value)
{
    m_Exchange_id = value;
    m_Exchange_idIsSet = true;
}

bool FinFeedAPI_SymbolModel::exchangeIdIsSet() const
{
    return m_Exchange_idIsSet;
}

void FinFeedAPI_SymbolModel::unsetExchange_id()
{
    m_Exchange_idIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getSecurityCategory() const
{
    return m_Security_category;
}


void FinFeedAPI_SymbolModel::setSecurityCategory(const utility::string_t& value)
{
    m_Security_category = value;
    m_Security_categoryIsSet = true;
}

bool FinFeedAPI_SymbolModel::securityCategoryIsSet() const
{
    return m_Security_categoryIsSet;
}

void FinFeedAPI_SymbolModel::unsetSecurity_category()
{
    m_Security_categoryIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getName() const
{
    return m_Name;
}


void FinFeedAPI_SymbolModel::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool FinFeedAPI_SymbolModel::nameIsSet() const
{
    return m_NameIsSet;
}

void FinFeedAPI_SymbolModel::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getDate() const
{
    return m_date;
}


void FinFeedAPI_SymbolModel::setDate(const utility::string_t& value)
{
    m_date = value;
    m_dateIsSet = true;
}

bool FinFeedAPI_SymbolModel::dateIsSet() const
{
    return m_dateIsSet;
}

void FinFeedAPI_SymbolModel::unsetdate()
{
    m_dateIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getAssetClass() const
{
    return m_Asset_class;
}


void FinFeedAPI_SymbolModel::setAssetClass(const utility::string_t& value)
{
    m_Asset_class = value;
    m_Asset_classIsSet = true;
}

bool FinFeedAPI_SymbolModel::assetClassIsSet() const
{
    return m_Asset_classIsSet;
}

void FinFeedAPI_SymbolModel::unsetAsset_class()
{
    m_Asset_classIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getCfiCode() const
{
    return m_Cfi_code;
}


void FinFeedAPI_SymbolModel::setCfiCode(const utility::string_t& value)
{
    m_Cfi_code = value;
    m_Cfi_codeIsSet = true;
}

bool FinFeedAPI_SymbolModel::cfiCodeIsSet() const
{
    return m_Cfi_codeIsSet;
}

void FinFeedAPI_SymbolModel::unsetCfi_code()
{
    m_Cfi_codeIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getCfiCategory() const
{
    return m_Cfi_category;
}


void FinFeedAPI_SymbolModel::setCfiCategory(const utility::string_t& value)
{
    m_Cfi_category = value;
    m_Cfi_categoryIsSet = true;
}

bool FinFeedAPI_SymbolModel::cfiCategoryIsSet() const
{
    return m_Cfi_categoryIsSet;
}

void FinFeedAPI_SymbolModel::unsetCfi_category()
{
    m_Cfi_categoryIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getCfiGroup() const
{
    return m_Cfi_group;
}


void FinFeedAPI_SymbolModel::setCfiGroup(const utility::string_t& value)
{
    m_Cfi_group = value;
    m_Cfi_groupIsSet = true;
}

bool FinFeedAPI_SymbolModel::cfiGroupIsSet() const
{
    return m_Cfi_groupIsSet;
}

void FinFeedAPI_SymbolModel::unsetCfi_group()
{
    m_Cfi_groupIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getCfiAttribute1() const
{
    return m_Cfi_attribute1;
}


void FinFeedAPI_SymbolModel::setCfiAttribute1(const utility::string_t& value)
{
    m_Cfi_attribute1 = value;
    m_Cfi_attribute1IsSet = true;
}

bool FinFeedAPI_SymbolModel::cfiAttribute1IsSet() const
{
    return m_Cfi_attribute1IsSet;
}

void FinFeedAPI_SymbolModel::unsetCfi_attribute1()
{
    m_Cfi_attribute1IsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getCfiAttribute2() const
{
    return m_Cfi_attribute2;
}


void FinFeedAPI_SymbolModel::setCfiAttribute2(const utility::string_t& value)
{
    m_Cfi_attribute2 = value;
    m_Cfi_attribute2IsSet = true;
}

bool FinFeedAPI_SymbolModel::cfiAttribute2IsSet() const
{
    return m_Cfi_attribute2IsSet;
}

void FinFeedAPI_SymbolModel::unsetCfi_attribute2()
{
    m_Cfi_attribute2IsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getCfiAttribute3() const
{
    return m_Cfi_attribute3;
}


void FinFeedAPI_SymbolModel::setCfiAttribute3(const utility::string_t& value)
{
    m_Cfi_attribute3 = value;
    m_Cfi_attribute3IsSet = true;
}

bool FinFeedAPI_SymbolModel::cfiAttribute3IsSet() const
{
    return m_Cfi_attribute3IsSet;
}

void FinFeedAPI_SymbolModel::unsetCfi_attribute3()
{
    m_Cfi_attribute3IsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getCfiAttribute4() const
{
    return m_Cfi_attribute4;
}


void FinFeedAPI_SymbolModel::setCfiAttribute4(const utility::string_t& value)
{
    m_Cfi_attribute4 = value;
    m_Cfi_attribute4IsSet = true;
}

bool FinFeedAPI_SymbolModel::cfiAttribute4IsSet() const
{
    return m_Cfi_attribute4IsSet;
}

void FinFeedAPI_SymbolModel::unsetCfi_attribute4()
{
    m_Cfi_attribute4IsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getCfiCategoryDesc() const
{
    return m_Cfi_category_desc;
}


void FinFeedAPI_SymbolModel::setCfiCategoryDesc(const utility::string_t& value)
{
    m_Cfi_category_desc = value;
    m_Cfi_category_descIsSet = true;
}

bool FinFeedAPI_SymbolModel::cfiCategoryDescIsSet() const
{
    return m_Cfi_category_descIsSet;
}

void FinFeedAPI_SymbolModel::unsetCfi_category_desc()
{
    m_Cfi_category_descIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getCfiGroupDesc() const
{
    return m_Cfi_group_desc;
}


void FinFeedAPI_SymbolModel::setCfiGroupDesc(const utility::string_t& value)
{
    m_Cfi_group_desc = value;
    m_Cfi_group_descIsSet = true;
}

bool FinFeedAPI_SymbolModel::cfiGroupDescIsSet() const
{
    return m_Cfi_group_descIsSet;
}

void FinFeedAPI_SymbolModel::unsetCfi_group_desc()
{
    m_Cfi_group_descIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getCfiAttribute1Desc() const
{
    return m_Cfi_attribute1_desc;
}


void FinFeedAPI_SymbolModel::setCfiAttribute1Desc(const utility::string_t& value)
{
    m_Cfi_attribute1_desc = value;
    m_Cfi_attribute1_descIsSet = true;
}

bool FinFeedAPI_SymbolModel::cfiAttribute1DescIsSet() const
{
    return m_Cfi_attribute1_descIsSet;
}

void FinFeedAPI_SymbolModel::unsetCfi_attribute1_desc()
{
    m_Cfi_attribute1_descIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getCfiAttribute2Desc() const
{
    return m_Cfi_attribute2_desc;
}


void FinFeedAPI_SymbolModel::setCfiAttribute2Desc(const utility::string_t& value)
{
    m_Cfi_attribute2_desc = value;
    m_Cfi_attribute2_descIsSet = true;
}

bool FinFeedAPI_SymbolModel::cfiAttribute2DescIsSet() const
{
    return m_Cfi_attribute2_descIsSet;
}

void FinFeedAPI_SymbolModel::unsetCfi_attribute2_desc()
{
    m_Cfi_attribute2_descIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getCfiAttribute3Desc() const
{
    return m_Cfi_attribute3_desc;
}


void FinFeedAPI_SymbolModel::setCfiAttribute3Desc(const utility::string_t& value)
{
    m_Cfi_attribute3_desc = value;
    m_Cfi_attribute3_descIsSet = true;
}

bool FinFeedAPI_SymbolModel::cfiAttribute3DescIsSet() const
{
    return m_Cfi_attribute3_descIsSet;
}

void FinFeedAPI_SymbolModel::unsetCfi_attribute3_desc()
{
    m_Cfi_attribute3_descIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getCfiAttribute4Desc() const
{
    return m_Cfi_attribute4_desc;
}


void FinFeedAPI_SymbolModel::setCfiAttribute4Desc(const utility::string_t& value)
{
    m_Cfi_attribute4_desc = value;
    m_Cfi_attribute4_descIsSet = true;
}

bool FinFeedAPI_SymbolModel::cfiAttribute4DescIsSet() const
{
    return m_Cfi_attribute4_descIsSet;
}

void FinFeedAPI_SymbolModel::unsetCfi_attribute4_desc()
{
    m_Cfi_attribute4_descIsSet = false;
}

}
}
}
}


