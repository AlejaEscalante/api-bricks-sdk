/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/FinFeedAPI_ExchangeModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

FinFeedAPI_ExchangeModel::FinFeedAPI_ExchangeModel()
{
    m_Exchange_id = utility::conversions::to_string_t("");
    m_Exchange_idIsSet = false;
    m_Last_datapoint_date = utility::conversions::to_string_t("");
    m_Last_datapoint_dateIsSet = false;
    m_Mic = utility::conversions::to_string_t("");
    m_MicIsSet = false;
    m_Operating_mic = utility::conversions::to_string_t("");
    m_Operating_micIsSet = false;
    m_Oprt_sgmt = utility::conversions::to_string_t("");
    m_Oprt_sgmtIsSet = false;
    m_Market_name_institution_description = utility::conversions::to_string_t("");
    m_Market_name_institution_descriptionIsSet = false;
    m_Legal_entity_name = utility::conversions::to_string_t("");
    m_Legal_entity_nameIsSet = false;
    m_Lei = utility::conversions::to_string_t("");
    m_LeiIsSet = false;
    m_Market_category_code = utility::conversions::to_string_t("");
    m_Market_category_codeIsSet = false;
    m_Acronym = utility::conversions::to_string_t("");
    m_AcronymIsSet = false;
    m_Iso_country_code = utility::conversions::to_string_t("");
    m_Iso_country_codeIsSet = false;
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_Website = utility::conversions::to_string_t("");
    m_WebsiteIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Creation_date = utility::datetime();
    m_Creation_dateIsSet = false;
    m_Last_update_date = utility::datetime();
    m_Last_update_dateIsSet = false;
    m_Last_validation_date = utility::datetime();
    m_Last_validation_dateIsSet = false;
    m_Expiry_date = utility::datetime();
    m_Expiry_dateIsSet = false;
    m_Comments = utility::conversions::to_string_t("");
    m_CommentsIsSet = false;
}

FinFeedAPI_ExchangeModel::~FinFeedAPI_ExchangeModel()
{
}

void FinFeedAPI_ExchangeModel::validate()
{
    // TODO: implement validation
}

web::json::value FinFeedAPI_ExchangeModel::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Exchange_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("exchange_id"))] = ModelBase::toJson(m_Exchange_id);
    }
    if(m_Last_datapoint_dateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("last_datapoint_date"))] = ModelBase::toJson(m_Last_datapoint_date);
    }
    if(m_MicIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("mic"))] = ModelBase::toJson(m_Mic);
    }
    if(m_Operating_micIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("operating_mic"))] = ModelBase::toJson(m_Operating_mic);
    }
    if(m_Oprt_sgmtIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("oprt_sgmt"))] = ModelBase::toJson(m_Oprt_sgmt);
    }
    if(m_Market_name_institution_descriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("market_name_institution_description"))] = ModelBase::toJson(m_Market_name_institution_description);
    }
    if(m_Legal_entity_nameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("legal_entity_name"))] = ModelBase::toJson(m_Legal_entity_name);
    }
    if(m_LeiIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("lei"))] = ModelBase::toJson(m_Lei);
    }
    if(m_Market_category_codeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("market_category_code"))] = ModelBase::toJson(m_Market_category_code);
    }
    if(m_AcronymIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("acronym"))] = ModelBase::toJson(m_Acronym);
    }
    if(m_Iso_country_codeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("iso_country_code"))] = ModelBase::toJson(m_Iso_country_code);
    }
    if(m_CityIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("city"))] = ModelBase::toJson(m_City);
    }
    if(m_WebsiteIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("website"))] = ModelBase::toJson(m_Website);
    }
    if(m_StatusIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_Creation_dateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("creation_date"))] = ModelBase::toJson(m_Creation_date);
    }
    if(m_Last_update_dateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("last_update_date"))] = ModelBase::toJson(m_Last_update_date);
    }
    if(m_Last_validation_dateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("last_validation_date"))] = ModelBase::toJson(m_Last_validation_date);
    }
    if(m_Expiry_dateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("expiry_date"))] = ModelBase::toJson(m_Expiry_date);
    }
    if(m_CommentsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("comments"))] = ModelBase::toJson(m_Comments);
    }

    return val;
}

bool FinFeedAPI_ExchangeModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("exchange_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("exchange_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExchangeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExchangeId);
            setExchangeId(refVal_setExchangeId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("last_datapoint_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("last_datapoint_date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastDatapointDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastDatapointDate);
            setLastDatapointDate(refVal_setLastDatapointDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("mic"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("mic")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMic;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMic);
            setMic(refVal_setMic);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("operating_mic"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("operating_mic")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOperatingMic;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOperatingMic);
            setOperatingMic(refVal_setOperatingMic);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("oprt_sgmt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("oprt_sgmt")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOprtSgmt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOprtSgmt);
            setOprtSgmt(refVal_setOprtSgmt);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("market_name_institution_description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("market_name_institution_description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMarketNameInstitutionDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMarketNameInstitutionDescription);
            setMarketNameInstitutionDescription(refVal_setMarketNameInstitutionDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("legal_entity_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("legal_entity_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLegalEntityName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLegalEntityName);
            setLegalEntityName(refVal_setLegalEntityName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("lei"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("lei")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLei;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLei);
            setLei(refVal_setLei);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("market_category_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("market_category_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMarketCategoryCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMarketCategoryCode);
            setMarketCategoryCode(refVal_setMarketCategoryCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("acronym"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("acronym")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAcronym;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAcronym);
            setAcronym(refVal_setAcronym);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("iso_country_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("iso_country_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIsoCountryCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsoCountryCode);
            setIsoCountryCode(refVal_setIsoCountryCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("city"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("city")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCity);
            setCity(refVal_setCity);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("website"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("website")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWebsite;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWebsite);
            setWebsite(refVal_setWebsite);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("creation_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("creation_date")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreationDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreationDate);
            setCreationDate(refVal_setCreationDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("last_update_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("last_update_date")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setLastUpdateDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastUpdateDate);
            setLastUpdateDate(refVal_setLastUpdateDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("last_validation_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("last_validation_date")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setLastValidationDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastValidationDate);
            setLastValidationDate(refVal_setLastValidationDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("expiry_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("expiry_date")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpiryDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpiryDate);
            setExpiryDate(refVal_setExpiryDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("comments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("comments")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setComments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComments);
            setComments(refVal_setComments);
            
        }
    }
    return ok;
}

void FinFeedAPI_ExchangeModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Exchange_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("exchange_id")), m_Exchange_id));
    }
    if(m_Last_datapoint_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("last_datapoint_date")), m_Last_datapoint_date));
    }
    if(m_MicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("mic")), m_Mic));
    }
    if(m_Operating_micIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("operating_mic")), m_Operating_mic));
    }
    if(m_Oprt_sgmtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("oprt_sgmt")), m_Oprt_sgmt));
    }
    if(m_Market_name_institution_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("market_name_institution_description")), m_Market_name_institution_description));
    }
    if(m_Legal_entity_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("legal_entity_name")), m_Legal_entity_name));
    }
    if(m_LeiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("lei")), m_Lei));
    }
    if(m_Market_category_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("market_category_code")), m_Market_category_code));
    }
    if(m_AcronymIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("acronym")), m_Acronym));
    }
    if(m_Iso_country_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("iso_country_code")), m_Iso_country_code));
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("city")), m_City));
    }
    if(m_WebsiteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("website")), m_Website));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("status")), m_Status));
    }
    if(m_Creation_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("creation_date")), m_Creation_date));
    }
    if(m_Last_update_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("last_update_date")), m_Last_update_date));
    }
    if(m_Last_validation_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("last_validation_date")), m_Last_validation_date));
    }
    if(m_Expiry_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("expiry_date")), m_Expiry_date));
    }
    if(m_CommentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("comments")), m_Comments));
    }
}

bool FinFeedAPI_ExchangeModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("exchange_id"))))
    {
        utility::string_t refVal_setExchangeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("exchange_id"))), refVal_setExchangeId );
        setExchangeId(refVal_setExchangeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("last_datapoint_date"))))
    {
        utility::string_t refVal_setLastDatapointDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("last_datapoint_date"))), refVal_setLastDatapointDate );
        setLastDatapointDate(refVal_setLastDatapointDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("mic"))))
    {
        utility::string_t refVal_setMic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("mic"))), refVal_setMic );
        setMic(refVal_setMic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("operating_mic"))))
    {
        utility::string_t refVal_setOperatingMic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("operating_mic"))), refVal_setOperatingMic );
        setOperatingMic(refVal_setOperatingMic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("oprt_sgmt"))))
    {
        utility::string_t refVal_setOprtSgmt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("oprt_sgmt"))), refVal_setOprtSgmt );
        setOprtSgmt(refVal_setOprtSgmt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("market_name_institution_description"))))
    {
        utility::string_t refVal_setMarketNameInstitutionDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("market_name_institution_description"))), refVal_setMarketNameInstitutionDescription );
        setMarketNameInstitutionDescription(refVal_setMarketNameInstitutionDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("legal_entity_name"))))
    {
        utility::string_t refVal_setLegalEntityName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("legal_entity_name"))), refVal_setLegalEntityName );
        setLegalEntityName(refVal_setLegalEntityName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("lei"))))
    {
        utility::string_t refVal_setLei;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("lei"))), refVal_setLei );
        setLei(refVal_setLei);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("market_category_code"))))
    {
        utility::string_t refVal_setMarketCategoryCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("market_category_code"))), refVal_setMarketCategoryCode );
        setMarketCategoryCode(refVal_setMarketCategoryCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("acronym"))))
    {
        utility::string_t refVal_setAcronym;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("acronym"))), refVal_setAcronym );
        setAcronym(refVal_setAcronym);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("iso_country_code"))))
    {
        utility::string_t refVal_setIsoCountryCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("iso_country_code"))), refVal_setIsoCountryCode );
        setIsoCountryCode(refVal_setIsoCountryCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("city"))))
    {
        utility::string_t refVal_setCity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("city"))), refVal_setCity );
        setCity(refVal_setCity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("website"))))
    {
        utility::string_t refVal_setWebsite;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("website"))), refVal_setWebsite );
        setWebsite(refVal_setWebsite);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("creation_date"))))
    {
        utility::datetime refVal_setCreationDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("creation_date"))), refVal_setCreationDate );
        setCreationDate(refVal_setCreationDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("last_update_date"))))
    {
        utility::datetime refVal_setLastUpdateDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("last_update_date"))), refVal_setLastUpdateDate );
        setLastUpdateDate(refVal_setLastUpdateDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("last_validation_date"))))
    {
        utility::datetime refVal_setLastValidationDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("last_validation_date"))), refVal_setLastValidationDate );
        setLastValidationDate(refVal_setLastValidationDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("expiry_date"))))
    {
        utility::datetime refVal_setExpiryDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("expiry_date"))), refVal_setExpiryDate );
        setExpiryDate(refVal_setExpiryDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("comments"))))
    {
        utility::string_t refVal_setComments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("comments"))), refVal_setComments );
        setComments(refVal_setComments);
    }
    return ok;
}


utility::string_t FinFeedAPI_ExchangeModel::getExchangeId() const
{
    return m_Exchange_id;
}


void FinFeedAPI_ExchangeModel::setExchangeId(const utility::string_t& value)
{
    m_Exchange_id = value;
    m_Exchange_idIsSet = true;
}

bool FinFeedAPI_ExchangeModel::exchangeIdIsSet() const
{
    return m_Exchange_idIsSet;
}

void FinFeedAPI_ExchangeModel::unsetExchange_id()
{
    m_Exchange_idIsSet = false;
}
utility::string_t FinFeedAPI_ExchangeModel::getLastDatapointDate() const
{
    return m_Last_datapoint_date;
}


void FinFeedAPI_ExchangeModel::setLastDatapointDate(const utility::string_t& value)
{
    m_Last_datapoint_date = value;
    m_Last_datapoint_dateIsSet = true;
}

bool FinFeedAPI_ExchangeModel::lastDatapointDateIsSet() const
{
    return m_Last_datapoint_dateIsSet;
}

void FinFeedAPI_ExchangeModel::unsetLast_datapoint_date()
{
    m_Last_datapoint_dateIsSet = false;
}
utility::string_t FinFeedAPI_ExchangeModel::getMic() const
{
    return m_Mic;
}


void FinFeedAPI_ExchangeModel::setMic(const utility::string_t& value)
{
    m_Mic = value;
    m_MicIsSet = true;
}

bool FinFeedAPI_ExchangeModel::micIsSet() const
{
    return m_MicIsSet;
}

void FinFeedAPI_ExchangeModel::unsetMic()
{
    m_MicIsSet = false;
}
utility::string_t FinFeedAPI_ExchangeModel::getOperatingMic() const
{
    return m_Operating_mic;
}


void FinFeedAPI_ExchangeModel::setOperatingMic(const utility::string_t& value)
{
    m_Operating_mic = value;
    m_Operating_micIsSet = true;
}

bool FinFeedAPI_ExchangeModel::operatingMicIsSet() const
{
    return m_Operating_micIsSet;
}

void FinFeedAPI_ExchangeModel::unsetOperating_mic()
{
    m_Operating_micIsSet = false;
}
utility::string_t FinFeedAPI_ExchangeModel::getOprtSgmt() const
{
    return m_Oprt_sgmt;
}


void FinFeedAPI_ExchangeModel::setOprtSgmt(const utility::string_t& value)
{
    m_Oprt_sgmt = value;
    m_Oprt_sgmtIsSet = true;
}

bool FinFeedAPI_ExchangeModel::oprtSgmtIsSet() const
{
    return m_Oprt_sgmtIsSet;
}

void FinFeedAPI_ExchangeModel::unsetOprt_sgmt()
{
    m_Oprt_sgmtIsSet = false;
}
utility::string_t FinFeedAPI_ExchangeModel::getMarketNameInstitutionDescription() const
{
    return m_Market_name_institution_description;
}


void FinFeedAPI_ExchangeModel::setMarketNameInstitutionDescription(const utility::string_t& value)
{
    m_Market_name_institution_description = value;
    m_Market_name_institution_descriptionIsSet = true;
}

bool FinFeedAPI_ExchangeModel::marketNameInstitutionDescriptionIsSet() const
{
    return m_Market_name_institution_descriptionIsSet;
}

void FinFeedAPI_ExchangeModel::unsetMarket_name_institution_description()
{
    m_Market_name_institution_descriptionIsSet = false;
}
utility::string_t FinFeedAPI_ExchangeModel::getLegalEntityName() const
{
    return m_Legal_entity_name;
}


void FinFeedAPI_ExchangeModel::setLegalEntityName(const utility::string_t& value)
{
    m_Legal_entity_name = value;
    m_Legal_entity_nameIsSet = true;
}

bool FinFeedAPI_ExchangeModel::legalEntityNameIsSet() const
{
    return m_Legal_entity_nameIsSet;
}

void FinFeedAPI_ExchangeModel::unsetLegal_entity_name()
{
    m_Legal_entity_nameIsSet = false;
}
utility::string_t FinFeedAPI_ExchangeModel::getLei() const
{
    return m_Lei;
}


void FinFeedAPI_ExchangeModel::setLei(const utility::string_t& value)
{
    m_Lei = value;
    m_LeiIsSet = true;
}

bool FinFeedAPI_ExchangeModel::leiIsSet() const
{
    return m_LeiIsSet;
}

void FinFeedAPI_ExchangeModel::unsetLei()
{
    m_LeiIsSet = false;
}
utility::string_t FinFeedAPI_ExchangeModel::getMarketCategoryCode() const
{
    return m_Market_category_code;
}


void FinFeedAPI_ExchangeModel::setMarketCategoryCode(const utility::string_t& value)
{
    m_Market_category_code = value;
    m_Market_category_codeIsSet = true;
}

bool FinFeedAPI_ExchangeModel::marketCategoryCodeIsSet() const
{
    return m_Market_category_codeIsSet;
}

void FinFeedAPI_ExchangeModel::unsetMarket_category_code()
{
    m_Market_category_codeIsSet = false;
}
utility::string_t FinFeedAPI_ExchangeModel::getAcronym() const
{
    return m_Acronym;
}


void FinFeedAPI_ExchangeModel::setAcronym(const utility::string_t& value)
{
    m_Acronym = value;
    m_AcronymIsSet = true;
}

bool FinFeedAPI_ExchangeModel::acronymIsSet() const
{
    return m_AcronymIsSet;
}

void FinFeedAPI_ExchangeModel::unsetAcronym()
{
    m_AcronymIsSet = false;
}
utility::string_t FinFeedAPI_ExchangeModel::getIsoCountryCode() const
{
    return m_Iso_country_code;
}


void FinFeedAPI_ExchangeModel::setIsoCountryCode(const utility::string_t& value)
{
    m_Iso_country_code = value;
    m_Iso_country_codeIsSet = true;
}

bool FinFeedAPI_ExchangeModel::isoCountryCodeIsSet() const
{
    return m_Iso_country_codeIsSet;
}

void FinFeedAPI_ExchangeModel::unsetIso_country_code()
{
    m_Iso_country_codeIsSet = false;
}
utility::string_t FinFeedAPI_ExchangeModel::getCity() const
{
    return m_City;
}


void FinFeedAPI_ExchangeModel::setCity(const utility::string_t& value)
{
    m_City = value;
    m_CityIsSet = true;
}

bool FinFeedAPI_ExchangeModel::cityIsSet() const
{
    return m_CityIsSet;
}

void FinFeedAPI_ExchangeModel::unsetCity()
{
    m_CityIsSet = false;
}
utility::string_t FinFeedAPI_ExchangeModel::getWebsite() const
{
    return m_Website;
}


void FinFeedAPI_ExchangeModel::setWebsite(const utility::string_t& value)
{
    m_Website = value;
    m_WebsiteIsSet = true;
}

bool FinFeedAPI_ExchangeModel::websiteIsSet() const
{
    return m_WebsiteIsSet;
}

void FinFeedAPI_ExchangeModel::unsetWebsite()
{
    m_WebsiteIsSet = false;
}
utility::string_t FinFeedAPI_ExchangeModel::getStatus() const
{
    return m_Status;
}


void FinFeedAPI_ExchangeModel::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool FinFeedAPI_ExchangeModel::statusIsSet() const
{
    return m_StatusIsSet;
}

void FinFeedAPI_ExchangeModel::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::datetime FinFeedAPI_ExchangeModel::getCreationDate() const
{
    return m_Creation_date;
}


void FinFeedAPI_ExchangeModel::setCreationDate(const utility::datetime& value)
{
    m_Creation_date = value;
    m_Creation_dateIsSet = true;
}

bool FinFeedAPI_ExchangeModel::creationDateIsSet() const
{
    return m_Creation_dateIsSet;
}

void FinFeedAPI_ExchangeModel::unsetCreation_date()
{
    m_Creation_dateIsSet = false;
}
utility::datetime FinFeedAPI_ExchangeModel::getLastUpdateDate() const
{
    return m_Last_update_date;
}


void FinFeedAPI_ExchangeModel::setLastUpdateDate(const utility::datetime& value)
{
    m_Last_update_date = value;
    m_Last_update_dateIsSet = true;
}

bool FinFeedAPI_ExchangeModel::lastUpdateDateIsSet() const
{
    return m_Last_update_dateIsSet;
}

void FinFeedAPI_ExchangeModel::unsetLast_update_date()
{
    m_Last_update_dateIsSet = false;
}
utility::datetime FinFeedAPI_ExchangeModel::getLastValidationDate() const
{
    return m_Last_validation_date;
}


void FinFeedAPI_ExchangeModel::setLastValidationDate(const utility::datetime& value)
{
    m_Last_validation_date = value;
    m_Last_validation_dateIsSet = true;
}

bool FinFeedAPI_ExchangeModel::lastValidationDateIsSet() const
{
    return m_Last_validation_dateIsSet;
}

void FinFeedAPI_ExchangeModel::unsetLast_validation_date()
{
    m_Last_validation_dateIsSet = false;
}
utility::datetime FinFeedAPI_ExchangeModel::getExpiryDate() const
{
    return m_Expiry_date;
}


void FinFeedAPI_ExchangeModel::setExpiryDate(const utility::datetime& value)
{
    m_Expiry_date = value;
    m_Expiry_dateIsSet = true;
}

bool FinFeedAPI_ExchangeModel::expiryDateIsSet() const
{
    return m_Expiry_dateIsSet;
}

void FinFeedAPI_ExchangeModel::unsetExpiry_date()
{
    m_Expiry_dateIsSet = false;
}
utility::string_t FinFeedAPI_ExchangeModel::getComments() const
{
    return m_Comments;
}


void FinFeedAPI_ExchangeModel::setComments(const utility::string_t& value)
{
    m_Comments = value;
    m_CommentsIsSet = true;
}

bool FinFeedAPI_ExchangeModel::commentsIsSet() const
{
    return m_CommentsIsSet;
}

void FinFeedAPI_ExchangeModel::unsetComments()
{
    m_CommentsIsSet = false;
}

}
}
}
}


