/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Trade_TradeModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Trade_TradeModel::Trade_TradeModel()
{
    m_Is_trade_break = false;
    m_Is_trade_breakIsSet = false;
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Timestamp_nanos = 0L;
    m_Timestamp_nanosIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_Size = 0;
    m_SizeIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_Trade_id = 0L;
    m_Trade_idIsSet = false;
    m_Is_intermarket_sweep = false;
    m_Is_intermarket_sweepIsSet = false;
    m_Is_extended_hours_trade = false;
    m_Is_extended_hours_tradeIsSet = false;
    m_Is_odd_lot_trade = false;
    m_Is_odd_lot_tradeIsSet = false;
    m_Is_trade_through_exempt = false;
    m_Is_trade_through_exemptIsSet = false;
    m_Is_single_price_cross_trade = false;
    m_Is_single_price_cross_tradeIsSet = false;
}

Trade_TradeModel::~Trade_TradeModel()
{
}

void Trade_TradeModel::validate()
{
    // TODO: implement validation
}

web::json::value Trade_TradeModel::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Is_trade_breakIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_trade_break"))] = ModelBase::toJson(m_Is_trade_break);
    }
    if(m_SymbolIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_Timestamp_nanosIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))] = ModelBase::toJson(m_Timestamp_nanos);
    }
    if(m_TimestampIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_SizeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("size"))] = ModelBase::toJson(m_Size);
    }
    if(m_PriceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("price"))] = ModelBase::toJson(m_Price);
    }
    if(m_Trade_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("trade_id"))] = ModelBase::toJson(m_Trade_id);
    }
    if(m_Is_intermarket_sweepIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_intermarket_sweep"))] = ModelBase::toJson(m_Is_intermarket_sweep);
    }
    if(m_Is_extended_hours_tradeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_extended_hours_trade"))] = ModelBase::toJson(m_Is_extended_hours_trade);
    }
    if(m_Is_odd_lot_tradeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_odd_lot_trade"))] = ModelBase::toJson(m_Is_odd_lot_trade);
    }
    if(m_Is_trade_through_exemptIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_trade_through_exempt"))] = ModelBase::toJson(m_Is_trade_through_exempt);
    }
    if(m_Is_single_price_cross_tradeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_single_price_cross_trade"))] = ModelBase::toJson(m_Is_single_price_cross_trade);
    }

    return val;
}

bool Trade_TradeModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_trade_break"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_trade_break")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsTradeBreak;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsTradeBreak);
            setIsTradeBreak(refVal_setIsTradeBreak);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTimestampNanos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestampNanos);
            setTimestampNanos(refVal_setTimestampNanos);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSize);
            setSize(refVal_setSize);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("price")));
        if(!fieldValue.is_null())
        {
            double refVal_setPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice);
            setPrice(refVal_setPrice);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("trade_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("trade_id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTradeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTradeId);
            setTradeId(refVal_setTradeId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_intermarket_sweep"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_intermarket_sweep")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsIntermarketSweep;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsIntermarketSweep);
            setIsIntermarketSweep(refVal_setIsIntermarketSweep);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_extended_hours_trade"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_extended_hours_trade")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsExtendedHoursTrade;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsExtendedHoursTrade);
            setIsExtendedHoursTrade(refVal_setIsExtendedHoursTrade);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_odd_lot_trade"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_odd_lot_trade")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsOddLotTrade;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsOddLotTrade);
            setIsOddLotTrade(refVal_setIsOddLotTrade);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_trade_through_exempt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_trade_through_exempt")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsTradeThroughExempt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsTradeThroughExempt);
            setIsTradeThroughExempt(refVal_setIsTradeThroughExempt);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_single_price_cross_trade"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_single_price_cross_trade")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSinglePriceCrossTrade;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSinglePriceCrossTrade);
            setIsSinglePriceCrossTrade(refVal_setIsSinglePriceCrossTrade);
            
        }
    }
    return ok;
}

void Trade_TradeModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Is_trade_breakIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_trade_break")), m_Is_trade_break));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("symbol")), m_Symbol));
    }
    if(m_Timestamp_nanosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos")), m_Timestamp_nanos));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timestamp")), m_Timestamp));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("size")), m_Size));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("price")), m_Price));
    }
    if(m_Trade_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("trade_id")), m_Trade_id));
    }
    if(m_Is_intermarket_sweepIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_intermarket_sweep")), m_Is_intermarket_sweep));
    }
    if(m_Is_extended_hours_tradeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_extended_hours_trade")), m_Is_extended_hours_trade));
    }
    if(m_Is_odd_lot_tradeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_odd_lot_trade")), m_Is_odd_lot_trade));
    }
    if(m_Is_trade_through_exemptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_trade_through_exempt")), m_Is_trade_through_exempt));
    }
    if(m_Is_single_price_cross_tradeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_single_price_cross_trade")), m_Is_single_price_cross_trade));
    }
}

bool Trade_TradeModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_trade_break"))))
    {
        bool refVal_setIsTradeBreak;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_trade_break"))), refVal_setIsTradeBreak );
        setIsTradeBreak(refVal_setIsTradeBreak);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))))
    {
        int64_t refVal_setTimestampNanos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))), refVal_setTimestampNanos );
        setTimestampNanos(refVal_setTimestampNanos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("size"))))
    {
        int32_t refVal_setSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("size"))), refVal_setSize );
        setSize(refVal_setSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("price"))))
    {
        double refVal_setPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("price"))), refVal_setPrice );
        setPrice(refVal_setPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("trade_id"))))
    {
        int64_t refVal_setTradeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("trade_id"))), refVal_setTradeId );
        setTradeId(refVal_setTradeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_intermarket_sweep"))))
    {
        bool refVal_setIsIntermarketSweep;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_intermarket_sweep"))), refVal_setIsIntermarketSweep );
        setIsIntermarketSweep(refVal_setIsIntermarketSweep);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_extended_hours_trade"))))
    {
        bool refVal_setIsExtendedHoursTrade;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_extended_hours_trade"))), refVal_setIsExtendedHoursTrade );
        setIsExtendedHoursTrade(refVal_setIsExtendedHoursTrade);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_odd_lot_trade"))))
    {
        bool refVal_setIsOddLotTrade;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_odd_lot_trade"))), refVal_setIsOddLotTrade );
        setIsOddLotTrade(refVal_setIsOddLotTrade);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_trade_through_exempt"))))
    {
        bool refVal_setIsTradeThroughExempt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_trade_through_exempt"))), refVal_setIsTradeThroughExempt );
        setIsTradeThroughExempt(refVal_setIsTradeThroughExempt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_single_price_cross_trade"))))
    {
        bool refVal_setIsSinglePriceCrossTrade;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_single_price_cross_trade"))), refVal_setIsSinglePriceCrossTrade );
        setIsSinglePriceCrossTrade(refVal_setIsSinglePriceCrossTrade);
    }
    return ok;
}


bool Trade_TradeModel::isIsTradeBreak() const
{
    return m_Is_trade_break;
}

void Trade_TradeModel::setIsTradeBreak(bool value)
{
    m_Is_trade_break = value;
    m_Is_trade_breakIsSet = true;
}

bool Trade_TradeModel::isTradeBreakIsSet() const
{
    return m_Is_trade_breakIsSet;
}

void Trade_TradeModel::unsetIs_trade_break()
{
    m_Is_trade_breakIsSet = false;
}
utility::string_t Trade_TradeModel::getSymbol() const
{
    return m_Symbol;
}


void Trade_TradeModel::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Trade_TradeModel::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Trade_TradeModel::unsetSymbol()
{
    m_SymbolIsSet = false;
}
int64_t Trade_TradeModel::getTimestampNanos() const
{
    return m_Timestamp_nanos;
}

void Trade_TradeModel::setTimestampNanos(int64_t value)
{
    m_Timestamp_nanos = value;
    m_Timestamp_nanosIsSet = true;
}

bool Trade_TradeModel::timestampNanosIsSet() const
{
    return m_Timestamp_nanosIsSet;
}

void Trade_TradeModel::unsetTimestamp_nanos()
{
    m_Timestamp_nanosIsSet = false;
}
utility::datetime Trade_TradeModel::getTimestamp() const
{
    return m_Timestamp;
}


void Trade_TradeModel::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Trade_TradeModel::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Trade_TradeModel::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
int32_t Trade_TradeModel::getSize() const
{
    return m_Size;
}

void Trade_TradeModel::setSize(int32_t value)
{
    m_Size = value;
    m_SizeIsSet = true;
}

bool Trade_TradeModel::sizeIsSet() const
{
    return m_SizeIsSet;
}

void Trade_TradeModel::unsetSize()
{
    m_SizeIsSet = false;
}
double Trade_TradeModel::getPrice() const
{
    return m_Price;
}

void Trade_TradeModel::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool Trade_TradeModel::priceIsSet() const
{
    return m_PriceIsSet;
}

void Trade_TradeModel::unsetPrice()
{
    m_PriceIsSet = false;
}
int64_t Trade_TradeModel::getTradeId() const
{
    return m_Trade_id;
}

void Trade_TradeModel::setTradeId(int64_t value)
{
    m_Trade_id = value;
    m_Trade_idIsSet = true;
}

bool Trade_TradeModel::tradeIdIsSet() const
{
    return m_Trade_idIsSet;
}

void Trade_TradeModel::unsetTrade_id()
{
    m_Trade_idIsSet = false;
}
bool Trade_TradeModel::isIsIntermarketSweep() const
{
    return m_Is_intermarket_sweep;
}

void Trade_TradeModel::setIsIntermarketSweep(bool value)
{
    m_Is_intermarket_sweep = value;
    m_Is_intermarket_sweepIsSet = true;
}

bool Trade_TradeModel::isIntermarketSweepIsSet() const
{
    return m_Is_intermarket_sweepIsSet;
}

void Trade_TradeModel::unsetIs_intermarket_sweep()
{
    m_Is_intermarket_sweepIsSet = false;
}
bool Trade_TradeModel::isIsExtendedHoursTrade() const
{
    return m_Is_extended_hours_trade;
}

void Trade_TradeModel::setIsExtendedHoursTrade(bool value)
{
    m_Is_extended_hours_trade = value;
    m_Is_extended_hours_tradeIsSet = true;
}

bool Trade_TradeModel::isExtendedHoursTradeIsSet() const
{
    return m_Is_extended_hours_tradeIsSet;
}

void Trade_TradeModel::unsetIs_extended_hours_trade()
{
    m_Is_extended_hours_tradeIsSet = false;
}
bool Trade_TradeModel::isIsOddLotTrade() const
{
    return m_Is_odd_lot_trade;
}

void Trade_TradeModel::setIsOddLotTrade(bool value)
{
    m_Is_odd_lot_trade = value;
    m_Is_odd_lot_tradeIsSet = true;
}

bool Trade_TradeModel::isOddLotTradeIsSet() const
{
    return m_Is_odd_lot_tradeIsSet;
}

void Trade_TradeModel::unsetIs_odd_lot_trade()
{
    m_Is_odd_lot_tradeIsSet = false;
}
bool Trade_TradeModel::isIsTradeThroughExempt() const
{
    return m_Is_trade_through_exempt;
}

void Trade_TradeModel::setIsTradeThroughExempt(bool value)
{
    m_Is_trade_through_exempt = value;
    m_Is_trade_through_exemptIsSet = true;
}

bool Trade_TradeModel::isTradeThroughExemptIsSet() const
{
    return m_Is_trade_through_exemptIsSet;
}

void Trade_TradeModel::unsetIs_trade_through_exempt()
{
    m_Is_trade_through_exemptIsSet = false;
}
bool Trade_TradeModel::isIsSinglePriceCrossTrade() const
{
    return m_Is_single_price_cross_trade;
}

void Trade_TradeModel::setIsSinglePriceCrossTrade(bool value)
{
    m_Is_single_price_cross_trade = value;
    m_Is_single_price_cross_tradeIsSet = true;
}

bool Trade_TradeModel::isSinglePriceCrossTradeIsSet() const
{
    return m_Is_single_price_cross_tradeIsSet;
}

void Trade_TradeModel::unsetIs_single_price_cross_trade()
{
    m_Is_single_price_cross_tradeIsSet = false;
}

}
}
}
}


