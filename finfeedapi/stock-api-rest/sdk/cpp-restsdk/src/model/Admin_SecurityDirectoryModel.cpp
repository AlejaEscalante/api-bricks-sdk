/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Admin_SecurityDirectoryModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Admin_SecurityDirectoryModel::Admin_SecurityDirectoryModel()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Timestamp_nanos = 0L;
    m_Timestamp_nanosIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_Flags = 0;
    m_FlagsIsSet = false;
    m_Round_lot_size = 0;
    m_Round_lot_sizeIsSet = false;
    m_Adjusted_poc_price = 0.0;
    m_Adjusted_poc_priceIsSet = false;
    m_Luld_tier = 0;
    m_Luld_tierIsSet = false;
    m_Luld_tier_code = utility::conversions::to_string_t("");
    m_Luld_tier_codeIsSet = false;
    m_Luld_tier_text = utility::conversions::to_string_t("");
    m_Luld_tier_textIsSet = false;
    m_Is_luld_tier_not_applicable = false;
    m_Is_luld_tier_not_applicableIsSet = false;
    m_Is_luld_tier1 = false;
    m_Is_luld_tier1IsSet = false;
    m_Is_luld_tier2 = false;
    m_Is_luld_tier2IsSet = false;
}

Admin_SecurityDirectoryModel::~Admin_SecurityDirectoryModel()
{
}

void Admin_SecurityDirectoryModel::validate()
{
    // TODO: implement validation
}

web::json::value Admin_SecurityDirectoryModel::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SymbolIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_Timestamp_nanosIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("timestamp_nanos"))] = ModelBase::toJson(m_Timestamp_nanos);
    }
    if(m_TimestampIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_FlagsIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("flags"))] = ModelBase::toJson(m_Flags);
    }
    if(m_Round_lot_sizeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("round_lot_size"))] = ModelBase::toJson(m_Round_lot_size);
    }
    if(m_Adjusted_poc_priceIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("adjusted_poc_price"))] = ModelBase::toJson(m_Adjusted_poc_price);
    }
    if(m_Luld_tierIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("luld_tier"))] = ModelBase::toJson(m_Luld_tier);
    }
    if(m_Luld_tier_codeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("luld_tier_code"))] = ModelBase::toJson(m_Luld_tier_code);
    }
    if(m_Luld_tier_textIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("luld_tier_text"))] = ModelBase::toJson(m_Luld_tier_text);
    }
    if(m_Is_luld_tier_not_applicableIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_luld_tier_not_applicable"))] = ModelBase::toJson(m_Is_luld_tier_not_applicable);
    }
    if(m_Is_luld_tier1IsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_luld_tier1"))] = ModelBase::toJson(m_Is_luld_tier1);
    }
    if(m_Is_luld_tier2IsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_luld_tier2"))] = ModelBase::toJson(m_Is_luld_tier2);
    }

    return val;
}

bool Admin_SecurityDirectoryModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp_nanos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp_nanos")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTimestampNanos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestampNanos);
            setTimestampNanos(refVal_setTimestampNanos);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("flags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("flags")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFlags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFlags);
            setFlags(refVal_setFlags);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("round_lot_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("round_lot_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRoundLotSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRoundLotSize);
            setRoundLotSize(refVal_setRoundLotSize);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adjusted_poc_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adjusted_poc_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setAdjustedPocPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdjustedPocPrice);
            setAdjustedPocPrice(refVal_setAdjustedPocPrice);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("luld_tier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("luld_tier")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLuldTier;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLuldTier);
            setLuldTier(refVal_setLuldTier);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("luld_tier_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("luld_tier_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLuldTierCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLuldTierCode);
            setLuldTierCode(refVal_setLuldTierCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("luld_tier_text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("luld_tier_text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLuldTierText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLuldTierText);
            setLuldTierText(refVal_setLuldTierText);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_luld_tier_not_applicable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_luld_tier_not_applicable")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsLuldTierNotApplicable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsLuldTierNotApplicable);
            setIsLuldTierNotApplicable(refVal_setIsLuldTierNotApplicable);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_luld_tier1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_luld_tier1")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsLuldTier1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsLuldTier1);
            setIsLuldTier1(refVal_setIsLuldTier1);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_luld_tier2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_luld_tier2")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsLuldTier2;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsLuldTier2);
            setIsLuldTier2(refVal_setIsLuldTier2);
            
        }
    }
    return ok;
}

void Admin_SecurityDirectoryModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_Timestamp_nanosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp_nanos")), m_Timestamp_nanos));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_FlagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("flags")), m_Flags));
    }
    if(m_Round_lot_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("round_lot_size")), m_Round_lot_size));
    }
    if(m_Adjusted_poc_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adjusted_poc_price")), m_Adjusted_poc_price));
    }
    if(m_Luld_tierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("luld_tier")), m_Luld_tier));
    }
    if(m_Luld_tier_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("luld_tier_code")), m_Luld_tier_code));
    }
    if(m_Luld_tier_textIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("luld_tier_text")), m_Luld_tier_text));
    }
    if(m_Is_luld_tier_not_applicableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_luld_tier_not_applicable")), m_Is_luld_tier_not_applicable));
    }
    if(m_Is_luld_tier1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_luld_tier1")), m_Is_luld_tier1));
    }
    if(m_Is_luld_tier2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_luld_tier2")), m_Is_luld_tier2));
    }
}

bool Admin_SecurityDirectoryModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp_nanos"))))
    {
        int64_t refVal_setTimestampNanos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp_nanos"))), refVal_setTimestampNanos );
        setTimestampNanos(refVal_setTimestampNanos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("flags"))))
    {
        int32_t refVal_setFlags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("flags"))), refVal_setFlags );
        setFlags(refVal_setFlags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("round_lot_size"))))
    {
        int32_t refVal_setRoundLotSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("round_lot_size"))), refVal_setRoundLotSize );
        setRoundLotSize(refVal_setRoundLotSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adjusted_poc_price"))))
    {
        double refVal_setAdjustedPocPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adjusted_poc_price"))), refVal_setAdjustedPocPrice );
        setAdjustedPocPrice(refVal_setAdjustedPocPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("luld_tier"))))
    {
        int32_t refVal_setLuldTier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("luld_tier"))), refVal_setLuldTier );
        setLuldTier(refVal_setLuldTier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("luld_tier_code"))))
    {
        utility::string_t refVal_setLuldTierCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("luld_tier_code"))), refVal_setLuldTierCode );
        setLuldTierCode(refVal_setLuldTierCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("luld_tier_text"))))
    {
        utility::string_t refVal_setLuldTierText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("luld_tier_text"))), refVal_setLuldTierText );
        setLuldTierText(refVal_setLuldTierText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_luld_tier_not_applicable"))))
    {
        bool refVal_setIsLuldTierNotApplicable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_luld_tier_not_applicable"))), refVal_setIsLuldTierNotApplicable );
        setIsLuldTierNotApplicable(refVal_setIsLuldTierNotApplicable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_luld_tier1"))))
    {
        bool refVal_setIsLuldTier1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_luld_tier1"))), refVal_setIsLuldTier1 );
        setIsLuldTier1(refVal_setIsLuldTier1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_luld_tier2"))))
    {
        bool refVal_setIsLuldTier2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_luld_tier2"))), refVal_setIsLuldTier2 );
        setIsLuldTier2(refVal_setIsLuldTier2);
    }
    return ok;
}


utility::string_t Admin_SecurityDirectoryModel::getSymbol() const
{
    return m_Symbol;
}


void Admin_SecurityDirectoryModel::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Admin_SecurityDirectoryModel::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Admin_SecurityDirectoryModel::unsetSymbol()
{
    m_SymbolIsSet = false;
}
int64_t Admin_SecurityDirectoryModel::getTimestampNanos() const
{
    return m_Timestamp_nanos;
}

void Admin_SecurityDirectoryModel::setTimestampNanos(int64_t value)
{
    m_Timestamp_nanos = value;
    m_Timestamp_nanosIsSet = true;
}

bool Admin_SecurityDirectoryModel::timestampNanosIsSet() const
{
    return m_Timestamp_nanosIsSet;
}

void Admin_SecurityDirectoryModel::unsetTimestamp_nanos()
{
    m_Timestamp_nanosIsSet = false;
}
utility::datetime Admin_SecurityDirectoryModel::getTimestamp() const
{
    return m_Timestamp;
}


void Admin_SecurityDirectoryModel::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Admin_SecurityDirectoryModel::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Admin_SecurityDirectoryModel::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
int32_t Admin_SecurityDirectoryModel::getFlags() const
{
    return m_Flags;
}

void Admin_SecurityDirectoryModel::setFlags(int32_t value)
{
    m_Flags = value;
    m_FlagsIsSet = true;
}

bool Admin_SecurityDirectoryModel::flagsIsSet() const
{
    return m_FlagsIsSet;
}

void Admin_SecurityDirectoryModel::unsetFlags()
{
    m_FlagsIsSet = false;
}
int32_t Admin_SecurityDirectoryModel::getRoundLotSize() const
{
    return m_Round_lot_size;
}

void Admin_SecurityDirectoryModel::setRoundLotSize(int32_t value)
{
    m_Round_lot_size = value;
    m_Round_lot_sizeIsSet = true;
}

bool Admin_SecurityDirectoryModel::roundLotSizeIsSet() const
{
    return m_Round_lot_sizeIsSet;
}

void Admin_SecurityDirectoryModel::unsetRound_lot_size()
{
    m_Round_lot_sizeIsSet = false;
}
double Admin_SecurityDirectoryModel::getAdjustedPocPrice() const
{
    return m_Adjusted_poc_price;
}

void Admin_SecurityDirectoryModel::setAdjustedPocPrice(double value)
{
    m_Adjusted_poc_price = value;
    m_Adjusted_poc_priceIsSet = true;
}

bool Admin_SecurityDirectoryModel::adjustedPocPriceIsSet() const
{
    return m_Adjusted_poc_priceIsSet;
}

void Admin_SecurityDirectoryModel::unsetAdjusted_poc_price()
{
    m_Adjusted_poc_priceIsSet = false;
}
int32_t Admin_SecurityDirectoryModel::getLuldTier() const
{
    return m_Luld_tier;
}

void Admin_SecurityDirectoryModel::setLuldTier(int32_t value)
{
    m_Luld_tier = value;
    m_Luld_tierIsSet = true;
}

bool Admin_SecurityDirectoryModel::luldTierIsSet() const
{
    return m_Luld_tierIsSet;
}

void Admin_SecurityDirectoryModel::unsetLuld_tier()
{
    m_Luld_tierIsSet = false;
}
utility::string_t Admin_SecurityDirectoryModel::getLuldTierCode() const
{
    return m_Luld_tier_code;
}


void Admin_SecurityDirectoryModel::setLuldTierCode(const utility::string_t& value)
{
    m_Luld_tier_code = value;
    m_Luld_tier_codeIsSet = true;
}

bool Admin_SecurityDirectoryModel::luldTierCodeIsSet() const
{
    return m_Luld_tier_codeIsSet;
}

void Admin_SecurityDirectoryModel::unsetLuld_tier_code()
{
    m_Luld_tier_codeIsSet = false;
}
utility::string_t Admin_SecurityDirectoryModel::getLuldTierText() const
{
    return m_Luld_tier_text;
}


void Admin_SecurityDirectoryModel::setLuldTierText(const utility::string_t& value)
{
    m_Luld_tier_text = value;
    m_Luld_tier_textIsSet = true;
}

bool Admin_SecurityDirectoryModel::luldTierTextIsSet() const
{
    return m_Luld_tier_textIsSet;
}

void Admin_SecurityDirectoryModel::unsetLuld_tier_text()
{
    m_Luld_tier_textIsSet = false;
}
bool Admin_SecurityDirectoryModel::isIsLuldTierNotApplicable() const
{
    return m_Is_luld_tier_not_applicable;
}

void Admin_SecurityDirectoryModel::setIsLuldTierNotApplicable(bool value)
{
    m_Is_luld_tier_not_applicable = value;
    m_Is_luld_tier_not_applicableIsSet = true;
}

bool Admin_SecurityDirectoryModel::isLuldTierNotApplicableIsSet() const
{
    return m_Is_luld_tier_not_applicableIsSet;
}

void Admin_SecurityDirectoryModel::unsetIs_luld_tier_not_applicable()
{
    m_Is_luld_tier_not_applicableIsSet = false;
}
bool Admin_SecurityDirectoryModel::isIsLuldTier1() const
{
    return m_Is_luld_tier1;
}

void Admin_SecurityDirectoryModel::setIsLuldTier1(bool value)
{
    m_Is_luld_tier1 = value;
    m_Is_luld_tier1IsSet = true;
}

bool Admin_SecurityDirectoryModel::isLuldTier1IsSet() const
{
    return m_Is_luld_tier1IsSet;
}

void Admin_SecurityDirectoryModel::unsetIs_luld_tier1()
{
    m_Is_luld_tier1IsSet = false;
}
bool Admin_SecurityDirectoryModel::isIsLuldTier2() const
{
    return m_Is_luld_tier2;
}

void Admin_SecurityDirectoryModel::setIsLuldTier2(bool value)
{
    m_Is_luld_tier2 = value;
    m_Is_luld_tier2IsSet = true;
}

bool Admin_SecurityDirectoryModel::isLuldTier2IsSet() const
{
    return m_Is_luld_tier2IsSet;
}

void Admin_SecurityDirectoryModel::unsetIs_luld_tier2()
{
    m_Is_luld_tier2IsSet = false;
}

}
}
}
}


