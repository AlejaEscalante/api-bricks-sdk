/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Admin_AuctionInformationModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Admin_AuctionInformationModel::Admin_AuctionInformationModel()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Timestamp_nanos = 0L;
    m_Timestamp_nanosIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_Auction_type = 0;
    m_Auction_typeIsSet = false;
    m_Auction_type_code = utility::conversions::to_string_t("");
    m_Auction_type_codeIsSet = false;
    m_Auction_type_text = utility::conversions::to_string_t("");
    m_Auction_type_textIsSet = false;
    m_Is_auction_type_opening = false;
    m_Is_auction_type_openingIsSet = false;
    m_Is_auction_type_closing = false;
    m_Is_auction_type_closingIsSet = false;
    m_Is_auction_type_ipo = false;
    m_Is_auction_type_ipoIsSet = false;
    m_Is_auction_type_halt = false;
    m_Is_auction_type_haltIsSet = false;
    m_Is_auction_type_volatility = false;
    m_Is_auction_type_volatilityIsSet = false;
    m_Paired_shares = 0;
    m_Paired_sharesIsSet = false;
    m_Reference_price = 0.0;
    m_Reference_priceIsSet = false;
    m_Indicative_clearing_price = 0.0;
    m_Indicative_clearing_priceIsSet = false;
    m_Imbalance_shares = 0;
    m_Imbalance_sharesIsSet = false;
    m_Imbalance_side = 0;
    m_Imbalance_sideIsSet = false;
    m_Imbalance_side_code = utility::conversions::to_string_t("");
    m_Imbalance_side_codeIsSet = false;
    m_Imbalance_side_text = utility::conversions::to_string_t("");
    m_Imbalance_side_textIsSet = false;
    m_Is_imbalance_side_buy = false;
    m_Is_imbalance_side_buyIsSet = false;
    m_Is_imbalance_side_sell = false;
    m_Is_imbalance_side_sellIsSet = false;
    m_Is_imbalance_side_none = false;
    m_Is_imbalance_side_noneIsSet = false;
    m_Extension_number = 0;
    m_Extension_numberIsSet = false;
    m_Scheduled_auction_time_seconds = 0;
    m_Scheduled_auction_time_secondsIsSet = false;
    m_Scheduled_auction_time = utility::datetime();
    m_Scheduled_auction_timeIsSet = false;
    m_Auction_book_clearing_price = 0.0;
    m_Auction_book_clearing_priceIsSet = false;
    m_Collar_reference_price = 0.0;
    m_Collar_reference_priceIsSet = false;
    m_Lower_auction_collar = 0.0;
    m_Lower_auction_collarIsSet = false;
    m_Upper_auction_collar = 0.0;
    m_Upper_auction_collarIsSet = false;
}

Admin_AuctionInformationModel::~Admin_AuctionInformationModel()
{
}

void Admin_AuctionInformationModel::validate()
{
    // TODO: implement validation
}

web::json::value Admin_AuctionInformationModel::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SymbolIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_Timestamp_nanosIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))] = ModelBase::toJson(m_Timestamp_nanos);
    }
    if(m_TimestampIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Auction_typeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("auction_type"))] = ModelBase::toJson(m_Auction_type);
    }
    if(m_Auction_type_codeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("auction_type_code"))] = ModelBase::toJson(m_Auction_type_code);
    }
    if(m_Auction_type_textIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("auction_type_text"))] = ModelBase::toJson(m_Auction_type_text);
    }
    if(m_Is_auction_type_openingIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_auction_type_opening"))] = ModelBase::toJson(m_Is_auction_type_opening);
    }
    if(m_Is_auction_type_closingIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_auction_type_closing"))] = ModelBase::toJson(m_Is_auction_type_closing);
    }
    if(m_Is_auction_type_ipoIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_auction_type_ipo"))] = ModelBase::toJson(m_Is_auction_type_ipo);
    }
    if(m_Is_auction_type_haltIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_auction_type_halt"))] = ModelBase::toJson(m_Is_auction_type_halt);
    }
    if(m_Is_auction_type_volatilityIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_auction_type_volatility"))] = ModelBase::toJson(m_Is_auction_type_volatility);
    }
    if(m_Paired_sharesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("paired_shares"))] = ModelBase::toJson(m_Paired_shares);
    }
    if(m_Reference_priceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("reference_price"))] = ModelBase::toJson(m_Reference_price);
    }
    if(m_Indicative_clearing_priceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("indicative_clearing_price"))] = ModelBase::toJson(m_Indicative_clearing_price);
    }
    if(m_Imbalance_sharesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("imbalance_shares"))] = ModelBase::toJson(m_Imbalance_shares);
    }
    if(m_Imbalance_sideIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("imbalance_side"))] = ModelBase::toJson(m_Imbalance_side);
    }
    if(m_Imbalance_side_codeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("imbalance_side_code"))] = ModelBase::toJson(m_Imbalance_side_code);
    }
    if(m_Imbalance_side_textIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("imbalance_side_text"))] = ModelBase::toJson(m_Imbalance_side_text);
    }
    if(m_Is_imbalance_side_buyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_imbalance_side_buy"))] = ModelBase::toJson(m_Is_imbalance_side_buy);
    }
    if(m_Is_imbalance_side_sellIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_imbalance_side_sell"))] = ModelBase::toJson(m_Is_imbalance_side_sell);
    }
    if(m_Is_imbalance_side_noneIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_imbalance_side_none"))] = ModelBase::toJson(m_Is_imbalance_side_none);
    }
    if(m_Extension_numberIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("extension_number"))] = ModelBase::toJson(m_Extension_number);
    }
    if(m_Scheduled_auction_time_secondsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("scheduled_auction_time_seconds"))] = ModelBase::toJson(m_Scheduled_auction_time_seconds);
    }
    if(m_Scheduled_auction_timeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("scheduled_auction_time"))] = ModelBase::toJson(m_Scheduled_auction_time);
    }
    if(m_Auction_book_clearing_priceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("auction_book_clearing_price"))] = ModelBase::toJson(m_Auction_book_clearing_price);
    }
    if(m_Collar_reference_priceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("collar_reference_price"))] = ModelBase::toJson(m_Collar_reference_price);
    }
    if(m_Lower_auction_collarIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("lower_auction_collar"))] = ModelBase::toJson(m_Lower_auction_collar);
    }
    if(m_Upper_auction_collarIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("upper_auction_collar"))] = ModelBase::toJson(m_Upper_auction_collar);
    }

    return val;
}

bool Admin_AuctionInformationModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTimestampNanos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestampNanos);
            setTimestampNanos(refVal_setTimestampNanos);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("auction_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("auction_type")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAuctionType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAuctionType);
            setAuctionType(refVal_setAuctionType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("auction_type_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("auction_type_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAuctionTypeCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAuctionTypeCode);
            setAuctionTypeCode(refVal_setAuctionTypeCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("auction_type_text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("auction_type_text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAuctionTypeText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAuctionTypeText);
            setAuctionTypeText(refVal_setAuctionTypeText);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_opening"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_opening")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsAuctionTypeOpening;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsAuctionTypeOpening);
            setIsAuctionTypeOpening(refVal_setIsAuctionTypeOpening);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_closing"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_closing")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsAuctionTypeClosing;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsAuctionTypeClosing);
            setIsAuctionTypeClosing(refVal_setIsAuctionTypeClosing);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_ipo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_ipo")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsAuctionTypeIpo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsAuctionTypeIpo);
            setIsAuctionTypeIpo(refVal_setIsAuctionTypeIpo);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_halt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_halt")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsAuctionTypeHalt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsAuctionTypeHalt);
            setIsAuctionTypeHalt(refVal_setIsAuctionTypeHalt);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_volatility"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_volatility")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsAuctionTypeVolatility;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsAuctionTypeVolatility);
            setIsAuctionTypeVolatility(refVal_setIsAuctionTypeVolatility);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("paired_shares"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("paired_shares")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPairedShares;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPairedShares);
            setPairedShares(refVal_setPairedShares);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("reference_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("reference_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setReferencePrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReferencePrice);
            setReferencePrice(refVal_setReferencePrice);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("indicative_clearing_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("indicative_clearing_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setIndicativeClearingPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIndicativeClearingPrice);
            setIndicativeClearingPrice(refVal_setIndicativeClearingPrice);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("imbalance_shares"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("imbalance_shares")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setImbalanceShares;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImbalanceShares);
            setImbalanceShares(refVal_setImbalanceShares);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("imbalance_side"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("imbalance_side")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setImbalanceSide;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImbalanceSide);
            setImbalanceSide(refVal_setImbalanceSide);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("imbalance_side_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("imbalance_side_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImbalanceSideCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImbalanceSideCode);
            setImbalanceSideCode(refVal_setImbalanceSideCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("imbalance_side_text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("imbalance_side_text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImbalanceSideText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImbalanceSideText);
            setImbalanceSideText(refVal_setImbalanceSideText);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_imbalance_side_buy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_imbalance_side_buy")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsImbalanceSideBuy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsImbalanceSideBuy);
            setIsImbalanceSideBuy(refVal_setIsImbalanceSideBuy);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_imbalance_side_sell"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_imbalance_side_sell")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsImbalanceSideSell;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsImbalanceSideSell);
            setIsImbalanceSideSell(refVal_setIsImbalanceSideSell);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_imbalance_side_none"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_imbalance_side_none")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsImbalanceSideNone;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsImbalanceSideNone);
            setIsImbalanceSideNone(refVal_setIsImbalanceSideNone);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("extension_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("extension_number")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setExtensionNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExtensionNumber);
            setExtensionNumber(refVal_setExtensionNumber);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("scheduled_auction_time_seconds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("scheduled_auction_time_seconds")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setScheduledAuctionTimeSeconds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduledAuctionTimeSeconds);
            setScheduledAuctionTimeSeconds(refVal_setScheduledAuctionTimeSeconds);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("scheduled_auction_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("scheduled_auction_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setScheduledAuctionTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduledAuctionTime);
            setScheduledAuctionTime(refVal_setScheduledAuctionTime);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("auction_book_clearing_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("auction_book_clearing_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setAuctionBookClearingPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAuctionBookClearingPrice);
            setAuctionBookClearingPrice(refVal_setAuctionBookClearingPrice);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("collar_reference_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("collar_reference_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setCollarReferencePrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCollarReferencePrice);
            setCollarReferencePrice(refVal_setCollarReferencePrice);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("lower_auction_collar"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("lower_auction_collar")));
        if(!fieldValue.is_null())
        {
            double refVal_setLowerAuctionCollar;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLowerAuctionCollar);
            setLowerAuctionCollar(refVal_setLowerAuctionCollar);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("upper_auction_collar"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("upper_auction_collar")));
        if(!fieldValue.is_null())
        {
            double refVal_setUpperAuctionCollar;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpperAuctionCollar);
            setUpperAuctionCollar(refVal_setUpperAuctionCollar);
            
        }
    }
    return ok;
}

void Admin_AuctionInformationModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("symbol")), m_Symbol));
    }
    if(m_Timestamp_nanosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos")), m_Timestamp_nanos));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timestamp")), m_Timestamp));
    }
    if(m_Auction_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("auction_type")), m_Auction_type));
    }
    if(m_Auction_type_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("auction_type_code")), m_Auction_type_code));
    }
    if(m_Auction_type_textIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("auction_type_text")), m_Auction_type_text));
    }
    if(m_Is_auction_type_openingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_auction_type_opening")), m_Is_auction_type_opening));
    }
    if(m_Is_auction_type_closingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_auction_type_closing")), m_Is_auction_type_closing));
    }
    if(m_Is_auction_type_ipoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_auction_type_ipo")), m_Is_auction_type_ipo));
    }
    if(m_Is_auction_type_haltIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_auction_type_halt")), m_Is_auction_type_halt));
    }
    if(m_Is_auction_type_volatilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_auction_type_volatility")), m_Is_auction_type_volatility));
    }
    if(m_Paired_sharesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("paired_shares")), m_Paired_shares));
    }
    if(m_Reference_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("reference_price")), m_Reference_price));
    }
    if(m_Indicative_clearing_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("indicative_clearing_price")), m_Indicative_clearing_price));
    }
    if(m_Imbalance_sharesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("imbalance_shares")), m_Imbalance_shares));
    }
    if(m_Imbalance_sideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("imbalance_side")), m_Imbalance_side));
    }
    if(m_Imbalance_side_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("imbalance_side_code")), m_Imbalance_side_code));
    }
    if(m_Imbalance_side_textIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("imbalance_side_text")), m_Imbalance_side_text));
    }
    if(m_Is_imbalance_side_buyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_imbalance_side_buy")), m_Is_imbalance_side_buy));
    }
    if(m_Is_imbalance_side_sellIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_imbalance_side_sell")), m_Is_imbalance_side_sell));
    }
    if(m_Is_imbalance_side_noneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_imbalance_side_none")), m_Is_imbalance_side_none));
    }
    if(m_Extension_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("extension_number")), m_Extension_number));
    }
    if(m_Scheduled_auction_time_secondsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("scheduled_auction_time_seconds")), m_Scheduled_auction_time_seconds));
    }
    if(m_Scheduled_auction_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("scheduled_auction_time")), m_Scheduled_auction_time));
    }
    if(m_Auction_book_clearing_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("auction_book_clearing_price")), m_Auction_book_clearing_price));
    }
    if(m_Collar_reference_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("collar_reference_price")), m_Collar_reference_price));
    }
    if(m_Lower_auction_collarIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("lower_auction_collar")), m_Lower_auction_collar));
    }
    if(m_Upper_auction_collarIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("upper_auction_collar")), m_Upper_auction_collar));
    }
}

bool Admin_AuctionInformationModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))))
    {
        int64_t refVal_setTimestampNanos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))), refVal_setTimestampNanos );
        setTimestampNanos(refVal_setTimestampNanos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("auction_type"))))
    {
        int32_t refVal_setAuctionType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("auction_type"))), refVal_setAuctionType );
        setAuctionType(refVal_setAuctionType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("auction_type_code"))))
    {
        utility::string_t refVal_setAuctionTypeCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("auction_type_code"))), refVal_setAuctionTypeCode );
        setAuctionTypeCode(refVal_setAuctionTypeCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("auction_type_text"))))
    {
        utility::string_t refVal_setAuctionTypeText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("auction_type_text"))), refVal_setAuctionTypeText );
        setAuctionTypeText(refVal_setAuctionTypeText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_opening"))))
    {
        bool refVal_setIsAuctionTypeOpening;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_opening"))), refVal_setIsAuctionTypeOpening );
        setIsAuctionTypeOpening(refVal_setIsAuctionTypeOpening);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_closing"))))
    {
        bool refVal_setIsAuctionTypeClosing;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_closing"))), refVal_setIsAuctionTypeClosing );
        setIsAuctionTypeClosing(refVal_setIsAuctionTypeClosing);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_ipo"))))
    {
        bool refVal_setIsAuctionTypeIpo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_ipo"))), refVal_setIsAuctionTypeIpo );
        setIsAuctionTypeIpo(refVal_setIsAuctionTypeIpo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_halt"))))
    {
        bool refVal_setIsAuctionTypeHalt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_halt"))), refVal_setIsAuctionTypeHalt );
        setIsAuctionTypeHalt(refVal_setIsAuctionTypeHalt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_volatility"))))
    {
        bool refVal_setIsAuctionTypeVolatility;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_auction_type_volatility"))), refVal_setIsAuctionTypeVolatility );
        setIsAuctionTypeVolatility(refVal_setIsAuctionTypeVolatility);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("paired_shares"))))
    {
        int32_t refVal_setPairedShares;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("paired_shares"))), refVal_setPairedShares );
        setPairedShares(refVal_setPairedShares);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("reference_price"))))
    {
        double refVal_setReferencePrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("reference_price"))), refVal_setReferencePrice );
        setReferencePrice(refVal_setReferencePrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("indicative_clearing_price"))))
    {
        double refVal_setIndicativeClearingPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("indicative_clearing_price"))), refVal_setIndicativeClearingPrice );
        setIndicativeClearingPrice(refVal_setIndicativeClearingPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("imbalance_shares"))))
    {
        int32_t refVal_setImbalanceShares;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("imbalance_shares"))), refVal_setImbalanceShares );
        setImbalanceShares(refVal_setImbalanceShares);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("imbalance_side"))))
    {
        int32_t refVal_setImbalanceSide;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("imbalance_side"))), refVal_setImbalanceSide );
        setImbalanceSide(refVal_setImbalanceSide);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("imbalance_side_code"))))
    {
        utility::string_t refVal_setImbalanceSideCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("imbalance_side_code"))), refVal_setImbalanceSideCode );
        setImbalanceSideCode(refVal_setImbalanceSideCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("imbalance_side_text"))))
    {
        utility::string_t refVal_setImbalanceSideText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("imbalance_side_text"))), refVal_setImbalanceSideText );
        setImbalanceSideText(refVal_setImbalanceSideText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_imbalance_side_buy"))))
    {
        bool refVal_setIsImbalanceSideBuy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_imbalance_side_buy"))), refVal_setIsImbalanceSideBuy );
        setIsImbalanceSideBuy(refVal_setIsImbalanceSideBuy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_imbalance_side_sell"))))
    {
        bool refVal_setIsImbalanceSideSell;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_imbalance_side_sell"))), refVal_setIsImbalanceSideSell );
        setIsImbalanceSideSell(refVal_setIsImbalanceSideSell);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_imbalance_side_none"))))
    {
        bool refVal_setIsImbalanceSideNone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_imbalance_side_none"))), refVal_setIsImbalanceSideNone );
        setIsImbalanceSideNone(refVal_setIsImbalanceSideNone);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("extension_number"))))
    {
        int32_t refVal_setExtensionNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("extension_number"))), refVal_setExtensionNumber );
        setExtensionNumber(refVal_setExtensionNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("scheduled_auction_time_seconds"))))
    {
        int32_t refVal_setScheduledAuctionTimeSeconds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("scheduled_auction_time_seconds"))), refVal_setScheduledAuctionTimeSeconds );
        setScheduledAuctionTimeSeconds(refVal_setScheduledAuctionTimeSeconds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("scheduled_auction_time"))))
    {
        utility::datetime refVal_setScheduledAuctionTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("scheduled_auction_time"))), refVal_setScheduledAuctionTime );
        setScheduledAuctionTime(refVal_setScheduledAuctionTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("auction_book_clearing_price"))))
    {
        double refVal_setAuctionBookClearingPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("auction_book_clearing_price"))), refVal_setAuctionBookClearingPrice );
        setAuctionBookClearingPrice(refVal_setAuctionBookClearingPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("collar_reference_price"))))
    {
        double refVal_setCollarReferencePrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("collar_reference_price"))), refVal_setCollarReferencePrice );
        setCollarReferencePrice(refVal_setCollarReferencePrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("lower_auction_collar"))))
    {
        double refVal_setLowerAuctionCollar;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("lower_auction_collar"))), refVal_setLowerAuctionCollar );
        setLowerAuctionCollar(refVal_setLowerAuctionCollar);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("upper_auction_collar"))))
    {
        double refVal_setUpperAuctionCollar;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("upper_auction_collar"))), refVal_setUpperAuctionCollar );
        setUpperAuctionCollar(refVal_setUpperAuctionCollar);
    }
    return ok;
}


utility::string_t Admin_AuctionInformationModel::getSymbol() const
{
    return m_Symbol;
}


void Admin_AuctionInformationModel::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Admin_AuctionInformationModel::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Admin_AuctionInformationModel::unsetSymbol()
{
    m_SymbolIsSet = false;
}
int64_t Admin_AuctionInformationModel::getTimestampNanos() const
{
    return m_Timestamp_nanos;
}

void Admin_AuctionInformationModel::setTimestampNanos(int64_t value)
{
    m_Timestamp_nanos = value;
    m_Timestamp_nanosIsSet = true;
}

bool Admin_AuctionInformationModel::timestampNanosIsSet() const
{
    return m_Timestamp_nanosIsSet;
}

void Admin_AuctionInformationModel::unsetTimestamp_nanos()
{
    m_Timestamp_nanosIsSet = false;
}
utility::datetime Admin_AuctionInformationModel::getTimestamp() const
{
    return m_Timestamp;
}


void Admin_AuctionInformationModel::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Admin_AuctionInformationModel::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Admin_AuctionInformationModel::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
int32_t Admin_AuctionInformationModel::getAuctionType() const
{
    return m_Auction_type;
}

void Admin_AuctionInformationModel::setAuctionType(int32_t value)
{
    m_Auction_type = value;
    m_Auction_typeIsSet = true;
}

bool Admin_AuctionInformationModel::auctionTypeIsSet() const
{
    return m_Auction_typeIsSet;
}

void Admin_AuctionInformationModel::unsetAuction_type()
{
    m_Auction_typeIsSet = false;
}
utility::string_t Admin_AuctionInformationModel::getAuctionTypeCode() const
{
    return m_Auction_type_code;
}


void Admin_AuctionInformationModel::setAuctionTypeCode(const utility::string_t& value)
{
    m_Auction_type_code = value;
    m_Auction_type_codeIsSet = true;
}

bool Admin_AuctionInformationModel::auctionTypeCodeIsSet() const
{
    return m_Auction_type_codeIsSet;
}

void Admin_AuctionInformationModel::unsetAuction_type_code()
{
    m_Auction_type_codeIsSet = false;
}
utility::string_t Admin_AuctionInformationModel::getAuctionTypeText() const
{
    return m_Auction_type_text;
}


void Admin_AuctionInformationModel::setAuctionTypeText(const utility::string_t& value)
{
    m_Auction_type_text = value;
    m_Auction_type_textIsSet = true;
}

bool Admin_AuctionInformationModel::auctionTypeTextIsSet() const
{
    return m_Auction_type_textIsSet;
}

void Admin_AuctionInformationModel::unsetAuction_type_text()
{
    m_Auction_type_textIsSet = false;
}
bool Admin_AuctionInformationModel::isIsAuctionTypeOpening() const
{
    return m_Is_auction_type_opening;
}

void Admin_AuctionInformationModel::setIsAuctionTypeOpening(bool value)
{
    m_Is_auction_type_opening = value;
    m_Is_auction_type_openingIsSet = true;
}

bool Admin_AuctionInformationModel::isAuctionTypeOpeningIsSet() const
{
    return m_Is_auction_type_openingIsSet;
}

void Admin_AuctionInformationModel::unsetIs_auction_type_opening()
{
    m_Is_auction_type_openingIsSet = false;
}
bool Admin_AuctionInformationModel::isIsAuctionTypeClosing() const
{
    return m_Is_auction_type_closing;
}

void Admin_AuctionInformationModel::setIsAuctionTypeClosing(bool value)
{
    m_Is_auction_type_closing = value;
    m_Is_auction_type_closingIsSet = true;
}

bool Admin_AuctionInformationModel::isAuctionTypeClosingIsSet() const
{
    return m_Is_auction_type_closingIsSet;
}

void Admin_AuctionInformationModel::unsetIs_auction_type_closing()
{
    m_Is_auction_type_closingIsSet = false;
}
bool Admin_AuctionInformationModel::isIsAuctionTypeIpo() const
{
    return m_Is_auction_type_ipo;
}

void Admin_AuctionInformationModel::setIsAuctionTypeIpo(bool value)
{
    m_Is_auction_type_ipo = value;
    m_Is_auction_type_ipoIsSet = true;
}

bool Admin_AuctionInformationModel::isAuctionTypeIpoIsSet() const
{
    return m_Is_auction_type_ipoIsSet;
}

void Admin_AuctionInformationModel::unsetIs_auction_type_ipo()
{
    m_Is_auction_type_ipoIsSet = false;
}
bool Admin_AuctionInformationModel::isIsAuctionTypeHalt() const
{
    return m_Is_auction_type_halt;
}

void Admin_AuctionInformationModel::setIsAuctionTypeHalt(bool value)
{
    m_Is_auction_type_halt = value;
    m_Is_auction_type_haltIsSet = true;
}

bool Admin_AuctionInformationModel::isAuctionTypeHaltIsSet() const
{
    return m_Is_auction_type_haltIsSet;
}

void Admin_AuctionInformationModel::unsetIs_auction_type_halt()
{
    m_Is_auction_type_haltIsSet = false;
}
bool Admin_AuctionInformationModel::isIsAuctionTypeVolatility() const
{
    return m_Is_auction_type_volatility;
}

void Admin_AuctionInformationModel::setIsAuctionTypeVolatility(bool value)
{
    m_Is_auction_type_volatility = value;
    m_Is_auction_type_volatilityIsSet = true;
}

bool Admin_AuctionInformationModel::isAuctionTypeVolatilityIsSet() const
{
    return m_Is_auction_type_volatilityIsSet;
}

void Admin_AuctionInformationModel::unsetIs_auction_type_volatility()
{
    m_Is_auction_type_volatilityIsSet = false;
}
int32_t Admin_AuctionInformationModel::getPairedShares() const
{
    return m_Paired_shares;
}

void Admin_AuctionInformationModel::setPairedShares(int32_t value)
{
    m_Paired_shares = value;
    m_Paired_sharesIsSet = true;
}

bool Admin_AuctionInformationModel::pairedSharesIsSet() const
{
    return m_Paired_sharesIsSet;
}

void Admin_AuctionInformationModel::unsetPaired_shares()
{
    m_Paired_sharesIsSet = false;
}
double Admin_AuctionInformationModel::getReferencePrice() const
{
    return m_Reference_price;
}

void Admin_AuctionInformationModel::setReferencePrice(double value)
{
    m_Reference_price = value;
    m_Reference_priceIsSet = true;
}

bool Admin_AuctionInformationModel::referencePriceIsSet() const
{
    return m_Reference_priceIsSet;
}

void Admin_AuctionInformationModel::unsetReference_price()
{
    m_Reference_priceIsSet = false;
}
double Admin_AuctionInformationModel::getIndicativeClearingPrice() const
{
    return m_Indicative_clearing_price;
}

void Admin_AuctionInformationModel::setIndicativeClearingPrice(double value)
{
    m_Indicative_clearing_price = value;
    m_Indicative_clearing_priceIsSet = true;
}

bool Admin_AuctionInformationModel::indicativeClearingPriceIsSet() const
{
    return m_Indicative_clearing_priceIsSet;
}

void Admin_AuctionInformationModel::unsetIndicative_clearing_price()
{
    m_Indicative_clearing_priceIsSet = false;
}
int32_t Admin_AuctionInformationModel::getImbalanceShares() const
{
    return m_Imbalance_shares;
}

void Admin_AuctionInformationModel::setImbalanceShares(int32_t value)
{
    m_Imbalance_shares = value;
    m_Imbalance_sharesIsSet = true;
}

bool Admin_AuctionInformationModel::imbalanceSharesIsSet() const
{
    return m_Imbalance_sharesIsSet;
}

void Admin_AuctionInformationModel::unsetImbalance_shares()
{
    m_Imbalance_sharesIsSet = false;
}
int32_t Admin_AuctionInformationModel::getImbalanceSide() const
{
    return m_Imbalance_side;
}

void Admin_AuctionInformationModel::setImbalanceSide(int32_t value)
{
    m_Imbalance_side = value;
    m_Imbalance_sideIsSet = true;
}

bool Admin_AuctionInformationModel::imbalanceSideIsSet() const
{
    return m_Imbalance_sideIsSet;
}

void Admin_AuctionInformationModel::unsetImbalance_side()
{
    m_Imbalance_sideIsSet = false;
}
utility::string_t Admin_AuctionInformationModel::getImbalanceSideCode() const
{
    return m_Imbalance_side_code;
}


void Admin_AuctionInformationModel::setImbalanceSideCode(const utility::string_t& value)
{
    m_Imbalance_side_code = value;
    m_Imbalance_side_codeIsSet = true;
}

bool Admin_AuctionInformationModel::imbalanceSideCodeIsSet() const
{
    return m_Imbalance_side_codeIsSet;
}

void Admin_AuctionInformationModel::unsetImbalance_side_code()
{
    m_Imbalance_side_codeIsSet = false;
}
utility::string_t Admin_AuctionInformationModel::getImbalanceSideText() const
{
    return m_Imbalance_side_text;
}


void Admin_AuctionInformationModel::setImbalanceSideText(const utility::string_t& value)
{
    m_Imbalance_side_text = value;
    m_Imbalance_side_textIsSet = true;
}

bool Admin_AuctionInformationModel::imbalanceSideTextIsSet() const
{
    return m_Imbalance_side_textIsSet;
}

void Admin_AuctionInformationModel::unsetImbalance_side_text()
{
    m_Imbalance_side_textIsSet = false;
}
bool Admin_AuctionInformationModel::isIsImbalanceSideBuy() const
{
    return m_Is_imbalance_side_buy;
}

void Admin_AuctionInformationModel::setIsImbalanceSideBuy(bool value)
{
    m_Is_imbalance_side_buy = value;
    m_Is_imbalance_side_buyIsSet = true;
}

bool Admin_AuctionInformationModel::isImbalanceSideBuyIsSet() const
{
    return m_Is_imbalance_side_buyIsSet;
}

void Admin_AuctionInformationModel::unsetIs_imbalance_side_buy()
{
    m_Is_imbalance_side_buyIsSet = false;
}
bool Admin_AuctionInformationModel::isIsImbalanceSideSell() const
{
    return m_Is_imbalance_side_sell;
}

void Admin_AuctionInformationModel::setIsImbalanceSideSell(bool value)
{
    m_Is_imbalance_side_sell = value;
    m_Is_imbalance_side_sellIsSet = true;
}

bool Admin_AuctionInformationModel::isImbalanceSideSellIsSet() const
{
    return m_Is_imbalance_side_sellIsSet;
}

void Admin_AuctionInformationModel::unsetIs_imbalance_side_sell()
{
    m_Is_imbalance_side_sellIsSet = false;
}
bool Admin_AuctionInformationModel::isIsImbalanceSideNone() const
{
    return m_Is_imbalance_side_none;
}

void Admin_AuctionInformationModel::setIsImbalanceSideNone(bool value)
{
    m_Is_imbalance_side_none = value;
    m_Is_imbalance_side_noneIsSet = true;
}

bool Admin_AuctionInformationModel::isImbalanceSideNoneIsSet() const
{
    return m_Is_imbalance_side_noneIsSet;
}

void Admin_AuctionInformationModel::unsetIs_imbalance_side_none()
{
    m_Is_imbalance_side_noneIsSet = false;
}
int32_t Admin_AuctionInformationModel::getExtensionNumber() const
{
    return m_Extension_number;
}

void Admin_AuctionInformationModel::setExtensionNumber(int32_t value)
{
    m_Extension_number = value;
    m_Extension_numberIsSet = true;
}

bool Admin_AuctionInformationModel::extensionNumberIsSet() const
{
    return m_Extension_numberIsSet;
}

void Admin_AuctionInformationModel::unsetExtension_number()
{
    m_Extension_numberIsSet = false;
}
int32_t Admin_AuctionInformationModel::getScheduledAuctionTimeSeconds() const
{
    return m_Scheduled_auction_time_seconds;
}

void Admin_AuctionInformationModel::setScheduledAuctionTimeSeconds(int32_t value)
{
    m_Scheduled_auction_time_seconds = value;
    m_Scheduled_auction_time_secondsIsSet = true;
}

bool Admin_AuctionInformationModel::scheduledAuctionTimeSecondsIsSet() const
{
    return m_Scheduled_auction_time_secondsIsSet;
}

void Admin_AuctionInformationModel::unsetScheduled_auction_time_seconds()
{
    m_Scheduled_auction_time_secondsIsSet = false;
}
utility::datetime Admin_AuctionInformationModel::getScheduledAuctionTime() const
{
    return m_Scheduled_auction_time;
}


void Admin_AuctionInformationModel::setScheduledAuctionTime(const utility::datetime& value)
{
    m_Scheduled_auction_time = value;
    m_Scheduled_auction_timeIsSet = true;
}

bool Admin_AuctionInformationModel::scheduledAuctionTimeIsSet() const
{
    return m_Scheduled_auction_timeIsSet;
}

void Admin_AuctionInformationModel::unsetScheduled_auction_time()
{
    m_Scheduled_auction_timeIsSet = false;
}
double Admin_AuctionInformationModel::getAuctionBookClearingPrice() const
{
    return m_Auction_book_clearing_price;
}

void Admin_AuctionInformationModel::setAuctionBookClearingPrice(double value)
{
    m_Auction_book_clearing_price = value;
    m_Auction_book_clearing_priceIsSet = true;
}

bool Admin_AuctionInformationModel::auctionBookClearingPriceIsSet() const
{
    return m_Auction_book_clearing_priceIsSet;
}

void Admin_AuctionInformationModel::unsetAuction_book_clearing_price()
{
    m_Auction_book_clearing_priceIsSet = false;
}
double Admin_AuctionInformationModel::getCollarReferencePrice() const
{
    return m_Collar_reference_price;
}

void Admin_AuctionInformationModel::setCollarReferencePrice(double value)
{
    m_Collar_reference_price = value;
    m_Collar_reference_priceIsSet = true;
}

bool Admin_AuctionInformationModel::collarReferencePriceIsSet() const
{
    return m_Collar_reference_priceIsSet;
}

void Admin_AuctionInformationModel::unsetCollar_reference_price()
{
    m_Collar_reference_priceIsSet = false;
}
double Admin_AuctionInformationModel::getLowerAuctionCollar() const
{
    return m_Lower_auction_collar;
}

void Admin_AuctionInformationModel::setLowerAuctionCollar(double value)
{
    m_Lower_auction_collar = value;
    m_Lower_auction_collarIsSet = true;
}

bool Admin_AuctionInformationModel::lowerAuctionCollarIsSet() const
{
    return m_Lower_auction_collarIsSet;
}

void Admin_AuctionInformationModel::unsetLower_auction_collar()
{
    m_Lower_auction_collarIsSet = false;
}
double Admin_AuctionInformationModel::getUpperAuctionCollar() const
{
    return m_Upper_auction_collar;
}

void Admin_AuctionInformationModel::setUpperAuctionCollar(double value)
{
    m_Upper_auction_collar = value;
    m_Upper_auction_collarIsSet = true;
}

bool Admin_AuctionInformationModel::upperAuctionCollarIsSet() const
{
    return m_Upper_auction_collarIsSet;
}

void Admin_AuctionInformationModel::unsetUpper_auction_collar()
{
    m_Upper_auction_collarIsSet = false;
}

}
}
}
}


