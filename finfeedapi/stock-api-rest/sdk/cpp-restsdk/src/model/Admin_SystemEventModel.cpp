/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Admin_SystemEventModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Admin_SystemEventModel::Admin_SystemEventModel()
{
    m_Timestamp_nanos = 0L;
    m_Timestamp_nanosIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_System_event = 0;
    m_System_eventIsSet = false;
    m_System_event_code = utility::conversions::to_string_t("");
    m_System_event_codeIsSet = false;
    m_System_event_text = utility::conversions::to_string_t("");
    m_System_event_textIsSet = false;
    m_Is_system_event_start_of_messages = false;
    m_Is_system_event_start_of_messagesIsSet = false;
    m_Is_system_event_start_of_system_hours = false;
    m_Is_system_event_start_of_system_hoursIsSet = false;
    m_Is_system_event_start_of_regular_market_hours = false;
    m_Is_system_event_start_of_regular_market_hoursIsSet = false;
    m_Is_system_event_end_of_regular_market_hours = false;
    m_Is_system_event_end_of_regular_market_hoursIsSet = false;
    m_Is_system_event_end_of_system_hours = false;
    m_Is_system_event_end_of_system_hoursIsSet = false;
    m_Is_system_event_end_of_messages = false;
    m_Is_system_event_end_of_messagesIsSet = false;
}

Admin_SystemEventModel::~Admin_SystemEventModel()
{
}

void Admin_SystemEventModel::validate()
{
    // TODO: implement validation
}

web::json::value Admin_SystemEventModel::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Timestamp_nanosIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("timestamp_nanos"))] = ModelBase::toJson(m_Timestamp_nanos);
    }
    if(m_TimestampIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_System_eventIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("system_event"))] = ModelBase::toJson(m_System_event);
    }
    if(m_System_event_codeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("system_event_code"))] = ModelBase::toJson(m_System_event_code);
    }
    if(m_System_event_textIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("system_event_text"))] = ModelBase::toJson(m_System_event_text);
    }
    if(m_Is_system_event_start_of_messagesIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_system_event_start_of_messages"))] = ModelBase::toJson(m_Is_system_event_start_of_messages);
    }
    if(m_Is_system_event_start_of_system_hoursIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_system_event_start_of_system_hours"))] = ModelBase::toJson(m_Is_system_event_start_of_system_hours);
    }
    if(m_Is_system_event_start_of_regular_market_hoursIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_system_event_start_of_regular_market_hours"))] = ModelBase::toJson(m_Is_system_event_start_of_regular_market_hours);
    }
    if(m_Is_system_event_end_of_regular_market_hoursIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_system_event_end_of_regular_market_hours"))] = ModelBase::toJson(m_Is_system_event_end_of_regular_market_hours);
    }
    if(m_Is_system_event_end_of_system_hoursIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_system_event_end_of_system_hours"))] = ModelBase::toJson(m_Is_system_event_end_of_system_hours);
    }
    if(m_Is_system_event_end_of_messagesIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_system_event_end_of_messages"))] = ModelBase::toJson(m_Is_system_event_end_of_messages);
    }

    return val;
}

bool Admin_SystemEventModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("timestamp_nanos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp_nanos")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTimestampNanos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestampNanos);
            setTimestampNanos(refVal_setTimestampNanos);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("system_event"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("system_event")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSystemEvent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSystemEvent);
            setSystemEvent(refVal_setSystemEvent);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("system_event_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("system_event_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSystemEventCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSystemEventCode);
            setSystemEventCode(refVal_setSystemEventCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("system_event_text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("system_event_text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSystemEventText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSystemEventText);
            setSystemEventText(refVal_setSystemEventText);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_system_event_start_of_messages"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_system_event_start_of_messages")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSystemEventStartOfMessages;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSystemEventStartOfMessages);
            setIsSystemEventStartOfMessages(refVal_setIsSystemEventStartOfMessages);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_system_event_start_of_system_hours"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_system_event_start_of_system_hours")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSystemEventStartOfSystemHours;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSystemEventStartOfSystemHours);
            setIsSystemEventStartOfSystemHours(refVal_setIsSystemEventStartOfSystemHours);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_system_event_start_of_regular_market_hours"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_system_event_start_of_regular_market_hours")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSystemEventStartOfRegularMarketHours;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSystemEventStartOfRegularMarketHours);
            setIsSystemEventStartOfRegularMarketHours(refVal_setIsSystemEventStartOfRegularMarketHours);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_system_event_end_of_regular_market_hours"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_system_event_end_of_regular_market_hours")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSystemEventEndOfRegularMarketHours;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSystemEventEndOfRegularMarketHours);
            setIsSystemEventEndOfRegularMarketHours(refVal_setIsSystemEventEndOfRegularMarketHours);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_system_event_end_of_system_hours"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_system_event_end_of_system_hours")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSystemEventEndOfSystemHours;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSystemEventEndOfSystemHours);
            setIsSystemEventEndOfSystemHours(refVal_setIsSystemEventEndOfSystemHours);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_system_event_end_of_messages"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_system_event_end_of_messages")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSystemEventEndOfMessages;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSystemEventEndOfMessages);
            setIsSystemEventEndOfMessages(refVal_setIsSystemEventEndOfMessages);
            
        }
    }
    return ok;
}

void Admin_SystemEventModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Timestamp_nanosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp_nanos")), m_Timestamp_nanos));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_System_eventIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("system_event")), m_System_event));
    }
    if(m_System_event_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("system_event_code")), m_System_event_code));
    }
    if(m_System_event_textIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("system_event_text")), m_System_event_text));
    }
    if(m_Is_system_event_start_of_messagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_system_event_start_of_messages")), m_Is_system_event_start_of_messages));
    }
    if(m_Is_system_event_start_of_system_hoursIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_system_event_start_of_system_hours")), m_Is_system_event_start_of_system_hours));
    }
    if(m_Is_system_event_start_of_regular_market_hoursIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_system_event_start_of_regular_market_hours")), m_Is_system_event_start_of_regular_market_hours));
    }
    if(m_Is_system_event_end_of_regular_market_hoursIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_system_event_end_of_regular_market_hours")), m_Is_system_event_end_of_regular_market_hours));
    }
    if(m_Is_system_event_end_of_system_hoursIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_system_event_end_of_system_hours")), m_Is_system_event_end_of_system_hours));
    }
    if(m_Is_system_event_end_of_messagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_system_event_end_of_messages")), m_Is_system_event_end_of_messages));
    }
}

bool Admin_SystemEventModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp_nanos"))))
    {
        int64_t refVal_setTimestampNanos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp_nanos"))), refVal_setTimestampNanos );
        setTimestampNanos(refVal_setTimestampNanos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("system_event"))))
    {
        int32_t refVal_setSystemEvent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("system_event"))), refVal_setSystemEvent );
        setSystemEvent(refVal_setSystemEvent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("system_event_code"))))
    {
        utility::string_t refVal_setSystemEventCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("system_event_code"))), refVal_setSystemEventCode );
        setSystemEventCode(refVal_setSystemEventCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("system_event_text"))))
    {
        utility::string_t refVal_setSystemEventText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("system_event_text"))), refVal_setSystemEventText );
        setSystemEventText(refVal_setSystemEventText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_system_event_start_of_messages"))))
    {
        bool refVal_setIsSystemEventStartOfMessages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_system_event_start_of_messages"))), refVal_setIsSystemEventStartOfMessages );
        setIsSystemEventStartOfMessages(refVal_setIsSystemEventStartOfMessages);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_system_event_start_of_system_hours"))))
    {
        bool refVal_setIsSystemEventStartOfSystemHours;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_system_event_start_of_system_hours"))), refVal_setIsSystemEventStartOfSystemHours );
        setIsSystemEventStartOfSystemHours(refVal_setIsSystemEventStartOfSystemHours);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_system_event_start_of_regular_market_hours"))))
    {
        bool refVal_setIsSystemEventStartOfRegularMarketHours;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_system_event_start_of_regular_market_hours"))), refVal_setIsSystemEventStartOfRegularMarketHours );
        setIsSystemEventStartOfRegularMarketHours(refVal_setIsSystemEventStartOfRegularMarketHours);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_system_event_end_of_regular_market_hours"))))
    {
        bool refVal_setIsSystemEventEndOfRegularMarketHours;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_system_event_end_of_regular_market_hours"))), refVal_setIsSystemEventEndOfRegularMarketHours );
        setIsSystemEventEndOfRegularMarketHours(refVal_setIsSystemEventEndOfRegularMarketHours);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_system_event_end_of_system_hours"))))
    {
        bool refVal_setIsSystemEventEndOfSystemHours;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_system_event_end_of_system_hours"))), refVal_setIsSystemEventEndOfSystemHours );
        setIsSystemEventEndOfSystemHours(refVal_setIsSystemEventEndOfSystemHours);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_system_event_end_of_messages"))))
    {
        bool refVal_setIsSystemEventEndOfMessages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_system_event_end_of_messages"))), refVal_setIsSystemEventEndOfMessages );
        setIsSystemEventEndOfMessages(refVal_setIsSystemEventEndOfMessages);
    }
    return ok;
}


int64_t Admin_SystemEventModel::getTimestampNanos() const
{
    return m_Timestamp_nanos;
}

void Admin_SystemEventModel::setTimestampNanos(int64_t value)
{
    m_Timestamp_nanos = value;
    m_Timestamp_nanosIsSet = true;
}

bool Admin_SystemEventModel::timestampNanosIsSet() const
{
    return m_Timestamp_nanosIsSet;
}

void Admin_SystemEventModel::unsetTimestamp_nanos()
{
    m_Timestamp_nanosIsSet = false;
}
utility::datetime Admin_SystemEventModel::getTimestamp() const
{
    return m_Timestamp;
}


void Admin_SystemEventModel::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Admin_SystemEventModel::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Admin_SystemEventModel::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
int32_t Admin_SystemEventModel::getSystemEvent() const
{
    return m_System_event;
}

void Admin_SystemEventModel::setSystemEvent(int32_t value)
{
    m_System_event = value;
    m_System_eventIsSet = true;
}

bool Admin_SystemEventModel::systemEventIsSet() const
{
    return m_System_eventIsSet;
}

void Admin_SystemEventModel::unsetSystem_event()
{
    m_System_eventIsSet = false;
}
utility::string_t Admin_SystemEventModel::getSystemEventCode() const
{
    return m_System_event_code;
}


void Admin_SystemEventModel::setSystemEventCode(const utility::string_t& value)
{
    m_System_event_code = value;
    m_System_event_codeIsSet = true;
}

bool Admin_SystemEventModel::systemEventCodeIsSet() const
{
    return m_System_event_codeIsSet;
}

void Admin_SystemEventModel::unsetSystem_event_code()
{
    m_System_event_codeIsSet = false;
}
utility::string_t Admin_SystemEventModel::getSystemEventText() const
{
    return m_System_event_text;
}


void Admin_SystemEventModel::setSystemEventText(const utility::string_t& value)
{
    m_System_event_text = value;
    m_System_event_textIsSet = true;
}

bool Admin_SystemEventModel::systemEventTextIsSet() const
{
    return m_System_event_textIsSet;
}

void Admin_SystemEventModel::unsetSystem_event_text()
{
    m_System_event_textIsSet = false;
}
bool Admin_SystemEventModel::isIsSystemEventStartOfMessages() const
{
    return m_Is_system_event_start_of_messages;
}

void Admin_SystemEventModel::setIsSystemEventStartOfMessages(bool value)
{
    m_Is_system_event_start_of_messages = value;
    m_Is_system_event_start_of_messagesIsSet = true;
}

bool Admin_SystemEventModel::isSystemEventStartOfMessagesIsSet() const
{
    return m_Is_system_event_start_of_messagesIsSet;
}

void Admin_SystemEventModel::unsetIs_system_event_start_of_messages()
{
    m_Is_system_event_start_of_messagesIsSet = false;
}
bool Admin_SystemEventModel::isIsSystemEventStartOfSystemHours() const
{
    return m_Is_system_event_start_of_system_hours;
}

void Admin_SystemEventModel::setIsSystemEventStartOfSystemHours(bool value)
{
    m_Is_system_event_start_of_system_hours = value;
    m_Is_system_event_start_of_system_hoursIsSet = true;
}

bool Admin_SystemEventModel::isSystemEventStartOfSystemHoursIsSet() const
{
    return m_Is_system_event_start_of_system_hoursIsSet;
}

void Admin_SystemEventModel::unsetIs_system_event_start_of_system_hours()
{
    m_Is_system_event_start_of_system_hoursIsSet = false;
}
bool Admin_SystemEventModel::isIsSystemEventStartOfRegularMarketHours() const
{
    return m_Is_system_event_start_of_regular_market_hours;
}

void Admin_SystemEventModel::setIsSystemEventStartOfRegularMarketHours(bool value)
{
    m_Is_system_event_start_of_regular_market_hours = value;
    m_Is_system_event_start_of_regular_market_hoursIsSet = true;
}

bool Admin_SystemEventModel::isSystemEventStartOfRegularMarketHoursIsSet() const
{
    return m_Is_system_event_start_of_regular_market_hoursIsSet;
}

void Admin_SystemEventModel::unsetIs_system_event_start_of_regular_market_hours()
{
    m_Is_system_event_start_of_regular_market_hoursIsSet = false;
}
bool Admin_SystemEventModel::isIsSystemEventEndOfRegularMarketHours() const
{
    return m_Is_system_event_end_of_regular_market_hours;
}

void Admin_SystemEventModel::setIsSystemEventEndOfRegularMarketHours(bool value)
{
    m_Is_system_event_end_of_regular_market_hours = value;
    m_Is_system_event_end_of_regular_market_hoursIsSet = true;
}

bool Admin_SystemEventModel::isSystemEventEndOfRegularMarketHoursIsSet() const
{
    return m_Is_system_event_end_of_regular_market_hoursIsSet;
}

void Admin_SystemEventModel::unsetIs_system_event_end_of_regular_market_hours()
{
    m_Is_system_event_end_of_regular_market_hoursIsSet = false;
}
bool Admin_SystemEventModel::isIsSystemEventEndOfSystemHours() const
{
    return m_Is_system_event_end_of_system_hours;
}

void Admin_SystemEventModel::setIsSystemEventEndOfSystemHours(bool value)
{
    m_Is_system_event_end_of_system_hours = value;
    m_Is_system_event_end_of_system_hoursIsSet = true;
}

bool Admin_SystemEventModel::isSystemEventEndOfSystemHoursIsSet() const
{
    return m_Is_system_event_end_of_system_hoursIsSet;
}

void Admin_SystemEventModel::unsetIs_system_event_end_of_system_hours()
{
    m_Is_system_event_end_of_system_hoursIsSet = false;
}
bool Admin_SystemEventModel::isIsSystemEventEndOfMessages() const
{
    return m_Is_system_event_end_of_messages;
}

void Admin_SystemEventModel::setIsSystemEventEndOfMessages(bool value)
{
    m_Is_system_event_end_of_messages = value;
    m_Is_system_event_end_of_messagesIsSet = true;
}

bool Admin_SystemEventModel::isSystemEventEndOfMessagesIsSet() const
{
    return m_Is_system_event_end_of_messagesIsSet;
}

void Admin_SystemEventModel::unsetIs_system_event_end_of_messages()
{
    m_Is_system_event_end_of_messagesIsSet = false;
}

}
}
}
}


