/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Admin_ShortSalePriceTestStatusModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Admin_ShortSalePriceTestStatusModel::Admin_ShortSalePriceTestStatusModel()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Timestamp_nanos = 0L;
    m_Timestamp_nanosIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_Short_sale_price_test_status = 0;
    m_Short_sale_price_test_statusIsSet = false;
    m_Short_sale_price_test_status_code = utility::conversions::to_string_t("");
    m_Short_sale_price_test_status_codeIsSet = false;
    m_Short_sale_price_test_status_text = utility::conversions::to_string_t("");
    m_Short_sale_price_test_status_textIsSet = false;
    m_Is_short_sale_price_test_not_in_effect = false;
    m_Is_short_sale_price_test_not_in_effectIsSet = false;
    m_Is_short_sale_price_test_in_effect = false;
    m_Is_short_sale_price_test_in_effectIsSet = false;
    m_Detail = 0;
    m_DetailIsSet = false;
    m_Detail_code = utility::conversions::to_string_t("");
    m_Detail_codeIsSet = false;
    m_Detail_text = utility::conversions::to_string_t("");
    m_Detail_textIsSet = false;
    m_Is_detail_no_price_test = false;
    m_Is_detail_no_price_testIsSet = false;
    m_Is_detail_activated = false;
    m_Is_detail_activatedIsSet = false;
    m_Is_detail_continued = false;
    m_Is_detail_continuedIsSet = false;
    m_Is_detail_deactivated = false;
    m_Is_detail_deactivatedIsSet = false;
    m_Is_detail_not_available = false;
    m_Is_detail_not_availableIsSet = false;
}

Admin_ShortSalePriceTestStatusModel::~Admin_ShortSalePriceTestStatusModel()
{
}

void Admin_ShortSalePriceTestStatusModel::validate()
{
    // TODO: implement validation
}

web::json::value Admin_ShortSalePriceTestStatusModel::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SymbolIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_Timestamp_nanosIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))] = ModelBase::toJson(m_Timestamp_nanos);
    }
    if(m_TimestampIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Short_sale_price_test_statusIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test_status"))] = ModelBase::toJson(m_Short_sale_price_test_status);
    }
    if(m_Short_sale_price_test_status_codeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test_status_code"))] = ModelBase::toJson(m_Short_sale_price_test_status_code);
    }
    if(m_Short_sale_price_test_status_textIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test_status_text"))] = ModelBase::toJson(m_Short_sale_price_test_status_text);
    }
    if(m_Is_short_sale_price_test_not_in_effectIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_short_sale_price_test_not_in_effect"))] = ModelBase::toJson(m_Is_short_sale_price_test_not_in_effect);
    }
    if(m_Is_short_sale_price_test_in_effectIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_short_sale_price_test_in_effect"))] = ModelBase::toJson(m_Is_short_sale_price_test_in_effect);
    }
    if(m_DetailIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("detail"))] = ModelBase::toJson(m_Detail);
    }
    if(m_Detail_codeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("detail_code"))] = ModelBase::toJson(m_Detail_code);
    }
    if(m_Detail_textIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("detail_text"))] = ModelBase::toJson(m_Detail_text);
    }
    if(m_Is_detail_no_price_testIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_detail_no_price_test"))] = ModelBase::toJson(m_Is_detail_no_price_test);
    }
    if(m_Is_detail_activatedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_detail_activated"))] = ModelBase::toJson(m_Is_detail_activated);
    }
    if(m_Is_detail_continuedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_detail_continued"))] = ModelBase::toJson(m_Is_detail_continued);
    }
    if(m_Is_detail_deactivatedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_detail_deactivated"))] = ModelBase::toJson(m_Is_detail_deactivated);
    }
    if(m_Is_detail_not_availableIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_detail_not_available"))] = ModelBase::toJson(m_Is_detail_not_available);
    }

    return val;
}

bool Admin_ShortSalePriceTestStatusModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTimestampNanos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestampNanos);
            setTimestampNanos(refVal_setTimestampNanos);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test_status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test_status")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setShortSalePriceTestStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShortSalePriceTestStatus);
            setShortSalePriceTestStatus(refVal_setShortSalePriceTestStatus);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test_status_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test_status_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShortSalePriceTestStatusCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShortSalePriceTestStatusCode);
            setShortSalePriceTestStatusCode(refVal_setShortSalePriceTestStatusCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test_status_text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test_status_text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShortSalePriceTestStatusText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShortSalePriceTestStatusText);
            setShortSalePriceTestStatusText(refVal_setShortSalePriceTestStatusText);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_short_sale_price_test_not_in_effect"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_short_sale_price_test_not_in_effect")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsShortSalePriceTestNotInEffect;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsShortSalePriceTestNotInEffect);
            setIsShortSalePriceTestNotInEffect(refVal_setIsShortSalePriceTestNotInEffect);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_short_sale_price_test_in_effect"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_short_sale_price_test_in_effect")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsShortSalePriceTestInEffect;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsShortSalePriceTestInEffect);
            setIsShortSalePriceTestInEffect(refVal_setIsShortSalePriceTestInEffect);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("detail"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("detail")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDetail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDetail);
            setDetail(refVal_setDetail);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("detail_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("detail_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDetailCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDetailCode);
            setDetailCode(refVal_setDetailCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("detail_text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("detail_text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDetailText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDetailText);
            setDetailText(refVal_setDetailText);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_detail_no_price_test"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_detail_no_price_test")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsDetailNoPriceTest;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsDetailNoPriceTest);
            setIsDetailNoPriceTest(refVal_setIsDetailNoPriceTest);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_detail_activated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_detail_activated")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsDetailActivated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsDetailActivated);
            setIsDetailActivated(refVal_setIsDetailActivated);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_detail_continued"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_detail_continued")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsDetailContinued;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsDetailContinued);
            setIsDetailContinued(refVal_setIsDetailContinued);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_detail_deactivated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_detail_deactivated")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsDetailDeactivated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsDetailDeactivated);
            setIsDetailDeactivated(refVal_setIsDetailDeactivated);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_detail_not_available"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_detail_not_available")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsDetailNotAvailable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsDetailNotAvailable);
            setIsDetailNotAvailable(refVal_setIsDetailNotAvailable);
            
        }
    }
    return ok;
}

void Admin_ShortSalePriceTestStatusModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("symbol")), m_Symbol));
    }
    if(m_Timestamp_nanosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos")), m_Timestamp_nanos));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timestamp")), m_Timestamp));
    }
    if(m_Short_sale_price_test_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test_status")), m_Short_sale_price_test_status));
    }
    if(m_Short_sale_price_test_status_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test_status_code")), m_Short_sale_price_test_status_code));
    }
    if(m_Short_sale_price_test_status_textIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test_status_text")), m_Short_sale_price_test_status_text));
    }
    if(m_Is_short_sale_price_test_not_in_effectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_short_sale_price_test_not_in_effect")), m_Is_short_sale_price_test_not_in_effect));
    }
    if(m_Is_short_sale_price_test_in_effectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_short_sale_price_test_in_effect")), m_Is_short_sale_price_test_in_effect));
    }
    if(m_DetailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("detail")), m_Detail));
    }
    if(m_Detail_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("detail_code")), m_Detail_code));
    }
    if(m_Detail_textIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("detail_text")), m_Detail_text));
    }
    if(m_Is_detail_no_price_testIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_detail_no_price_test")), m_Is_detail_no_price_test));
    }
    if(m_Is_detail_activatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_detail_activated")), m_Is_detail_activated));
    }
    if(m_Is_detail_continuedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_detail_continued")), m_Is_detail_continued));
    }
    if(m_Is_detail_deactivatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_detail_deactivated")), m_Is_detail_deactivated));
    }
    if(m_Is_detail_not_availableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_detail_not_available")), m_Is_detail_not_available));
    }
}

bool Admin_ShortSalePriceTestStatusModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))))
    {
        int64_t refVal_setTimestampNanos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))), refVal_setTimestampNanos );
        setTimestampNanos(refVal_setTimestampNanos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test_status"))))
    {
        int32_t refVal_setShortSalePriceTestStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test_status"))), refVal_setShortSalePriceTestStatus );
        setShortSalePriceTestStatus(refVal_setShortSalePriceTestStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test_status_code"))))
    {
        utility::string_t refVal_setShortSalePriceTestStatusCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test_status_code"))), refVal_setShortSalePriceTestStatusCode );
        setShortSalePriceTestStatusCode(refVal_setShortSalePriceTestStatusCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test_status_text"))))
    {
        utility::string_t refVal_setShortSalePriceTestStatusText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test_status_text"))), refVal_setShortSalePriceTestStatusText );
        setShortSalePriceTestStatusText(refVal_setShortSalePriceTestStatusText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_short_sale_price_test_not_in_effect"))))
    {
        bool refVal_setIsShortSalePriceTestNotInEffect;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_short_sale_price_test_not_in_effect"))), refVal_setIsShortSalePriceTestNotInEffect );
        setIsShortSalePriceTestNotInEffect(refVal_setIsShortSalePriceTestNotInEffect);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_short_sale_price_test_in_effect"))))
    {
        bool refVal_setIsShortSalePriceTestInEffect;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_short_sale_price_test_in_effect"))), refVal_setIsShortSalePriceTestInEffect );
        setIsShortSalePriceTestInEffect(refVal_setIsShortSalePriceTestInEffect);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("detail"))))
    {
        int32_t refVal_setDetail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("detail"))), refVal_setDetail );
        setDetail(refVal_setDetail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("detail_code"))))
    {
        utility::string_t refVal_setDetailCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("detail_code"))), refVal_setDetailCode );
        setDetailCode(refVal_setDetailCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("detail_text"))))
    {
        utility::string_t refVal_setDetailText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("detail_text"))), refVal_setDetailText );
        setDetailText(refVal_setDetailText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_detail_no_price_test"))))
    {
        bool refVal_setIsDetailNoPriceTest;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_detail_no_price_test"))), refVal_setIsDetailNoPriceTest );
        setIsDetailNoPriceTest(refVal_setIsDetailNoPriceTest);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_detail_activated"))))
    {
        bool refVal_setIsDetailActivated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_detail_activated"))), refVal_setIsDetailActivated );
        setIsDetailActivated(refVal_setIsDetailActivated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_detail_continued"))))
    {
        bool refVal_setIsDetailContinued;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_detail_continued"))), refVal_setIsDetailContinued );
        setIsDetailContinued(refVal_setIsDetailContinued);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_detail_deactivated"))))
    {
        bool refVal_setIsDetailDeactivated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_detail_deactivated"))), refVal_setIsDetailDeactivated );
        setIsDetailDeactivated(refVal_setIsDetailDeactivated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_detail_not_available"))))
    {
        bool refVal_setIsDetailNotAvailable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_detail_not_available"))), refVal_setIsDetailNotAvailable );
        setIsDetailNotAvailable(refVal_setIsDetailNotAvailable);
    }
    return ok;
}


utility::string_t Admin_ShortSalePriceTestStatusModel::getSymbol() const
{
    return m_Symbol;
}


void Admin_ShortSalePriceTestStatusModel::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Admin_ShortSalePriceTestStatusModel::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Admin_ShortSalePriceTestStatusModel::unsetSymbol()
{
    m_SymbolIsSet = false;
}
int64_t Admin_ShortSalePriceTestStatusModel::getTimestampNanos() const
{
    return m_Timestamp_nanos;
}

void Admin_ShortSalePriceTestStatusModel::setTimestampNanos(int64_t value)
{
    m_Timestamp_nanos = value;
    m_Timestamp_nanosIsSet = true;
}

bool Admin_ShortSalePriceTestStatusModel::timestampNanosIsSet() const
{
    return m_Timestamp_nanosIsSet;
}

void Admin_ShortSalePriceTestStatusModel::unsetTimestamp_nanos()
{
    m_Timestamp_nanosIsSet = false;
}
utility::datetime Admin_ShortSalePriceTestStatusModel::getTimestamp() const
{
    return m_Timestamp;
}


void Admin_ShortSalePriceTestStatusModel::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Admin_ShortSalePriceTestStatusModel::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Admin_ShortSalePriceTestStatusModel::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
int32_t Admin_ShortSalePriceTestStatusModel::getShortSalePriceTestStatus() const
{
    return m_Short_sale_price_test_status;
}

void Admin_ShortSalePriceTestStatusModel::setShortSalePriceTestStatus(int32_t value)
{
    m_Short_sale_price_test_status = value;
    m_Short_sale_price_test_statusIsSet = true;
}

bool Admin_ShortSalePriceTestStatusModel::shortSalePriceTestStatusIsSet() const
{
    return m_Short_sale_price_test_statusIsSet;
}

void Admin_ShortSalePriceTestStatusModel::unsetShort_sale_price_test_status()
{
    m_Short_sale_price_test_statusIsSet = false;
}
utility::string_t Admin_ShortSalePriceTestStatusModel::getShortSalePriceTestStatusCode() const
{
    return m_Short_sale_price_test_status_code;
}


void Admin_ShortSalePriceTestStatusModel::setShortSalePriceTestStatusCode(const utility::string_t& value)
{
    m_Short_sale_price_test_status_code = value;
    m_Short_sale_price_test_status_codeIsSet = true;
}

bool Admin_ShortSalePriceTestStatusModel::shortSalePriceTestStatusCodeIsSet() const
{
    return m_Short_sale_price_test_status_codeIsSet;
}

void Admin_ShortSalePriceTestStatusModel::unsetShort_sale_price_test_status_code()
{
    m_Short_sale_price_test_status_codeIsSet = false;
}
utility::string_t Admin_ShortSalePriceTestStatusModel::getShortSalePriceTestStatusText() const
{
    return m_Short_sale_price_test_status_text;
}


void Admin_ShortSalePriceTestStatusModel::setShortSalePriceTestStatusText(const utility::string_t& value)
{
    m_Short_sale_price_test_status_text = value;
    m_Short_sale_price_test_status_textIsSet = true;
}

bool Admin_ShortSalePriceTestStatusModel::shortSalePriceTestStatusTextIsSet() const
{
    return m_Short_sale_price_test_status_textIsSet;
}

void Admin_ShortSalePriceTestStatusModel::unsetShort_sale_price_test_status_text()
{
    m_Short_sale_price_test_status_textIsSet = false;
}
bool Admin_ShortSalePriceTestStatusModel::isIsShortSalePriceTestNotInEffect() const
{
    return m_Is_short_sale_price_test_not_in_effect;
}

void Admin_ShortSalePriceTestStatusModel::setIsShortSalePriceTestNotInEffect(bool value)
{
    m_Is_short_sale_price_test_not_in_effect = value;
    m_Is_short_sale_price_test_not_in_effectIsSet = true;
}

bool Admin_ShortSalePriceTestStatusModel::isShortSalePriceTestNotInEffectIsSet() const
{
    return m_Is_short_sale_price_test_not_in_effectIsSet;
}

void Admin_ShortSalePriceTestStatusModel::unsetIs_short_sale_price_test_not_in_effect()
{
    m_Is_short_sale_price_test_not_in_effectIsSet = false;
}
bool Admin_ShortSalePriceTestStatusModel::isIsShortSalePriceTestInEffect() const
{
    return m_Is_short_sale_price_test_in_effect;
}

void Admin_ShortSalePriceTestStatusModel::setIsShortSalePriceTestInEffect(bool value)
{
    m_Is_short_sale_price_test_in_effect = value;
    m_Is_short_sale_price_test_in_effectIsSet = true;
}

bool Admin_ShortSalePriceTestStatusModel::isShortSalePriceTestInEffectIsSet() const
{
    return m_Is_short_sale_price_test_in_effectIsSet;
}

void Admin_ShortSalePriceTestStatusModel::unsetIs_short_sale_price_test_in_effect()
{
    m_Is_short_sale_price_test_in_effectIsSet = false;
}
int32_t Admin_ShortSalePriceTestStatusModel::getDetail() const
{
    return m_Detail;
}

void Admin_ShortSalePriceTestStatusModel::setDetail(int32_t value)
{
    m_Detail = value;
    m_DetailIsSet = true;
}

bool Admin_ShortSalePriceTestStatusModel::detailIsSet() const
{
    return m_DetailIsSet;
}

void Admin_ShortSalePriceTestStatusModel::unsetDetail()
{
    m_DetailIsSet = false;
}
utility::string_t Admin_ShortSalePriceTestStatusModel::getDetailCode() const
{
    return m_Detail_code;
}


void Admin_ShortSalePriceTestStatusModel::setDetailCode(const utility::string_t& value)
{
    m_Detail_code = value;
    m_Detail_codeIsSet = true;
}

bool Admin_ShortSalePriceTestStatusModel::detailCodeIsSet() const
{
    return m_Detail_codeIsSet;
}

void Admin_ShortSalePriceTestStatusModel::unsetDetail_code()
{
    m_Detail_codeIsSet = false;
}
utility::string_t Admin_ShortSalePriceTestStatusModel::getDetailText() const
{
    return m_Detail_text;
}


void Admin_ShortSalePriceTestStatusModel::setDetailText(const utility::string_t& value)
{
    m_Detail_text = value;
    m_Detail_textIsSet = true;
}

bool Admin_ShortSalePriceTestStatusModel::detailTextIsSet() const
{
    return m_Detail_textIsSet;
}

void Admin_ShortSalePriceTestStatusModel::unsetDetail_text()
{
    m_Detail_textIsSet = false;
}
bool Admin_ShortSalePriceTestStatusModel::isIsDetailNoPriceTest() const
{
    return m_Is_detail_no_price_test;
}

void Admin_ShortSalePriceTestStatusModel::setIsDetailNoPriceTest(bool value)
{
    m_Is_detail_no_price_test = value;
    m_Is_detail_no_price_testIsSet = true;
}

bool Admin_ShortSalePriceTestStatusModel::isDetailNoPriceTestIsSet() const
{
    return m_Is_detail_no_price_testIsSet;
}

void Admin_ShortSalePriceTestStatusModel::unsetIs_detail_no_price_test()
{
    m_Is_detail_no_price_testIsSet = false;
}
bool Admin_ShortSalePriceTestStatusModel::isIsDetailActivated() const
{
    return m_Is_detail_activated;
}

void Admin_ShortSalePriceTestStatusModel::setIsDetailActivated(bool value)
{
    m_Is_detail_activated = value;
    m_Is_detail_activatedIsSet = true;
}

bool Admin_ShortSalePriceTestStatusModel::isDetailActivatedIsSet() const
{
    return m_Is_detail_activatedIsSet;
}

void Admin_ShortSalePriceTestStatusModel::unsetIs_detail_activated()
{
    m_Is_detail_activatedIsSet = false;
}
bool Admin_ShortSalePriceTestStatusModel::isIsDetailContinued() const
{
    return m_Is_detail_continued;
}

void Admin_ShortSalePriceTestStatusModel::setIsDetailContinued(bool value)
{
    m_Is_detail_continued = value;
    m_Is_detail_continuedIsSet = true;
}

bool Admin_ShortSalePriceTestStatusModel::isDetailContinuedIsSet() const
{
    return m_Is_detail_continuedIsSet;
}

void Admin_ShortSalePriceTestStatusModel::unsetIs_detail_continued()
{
    m_Is_detail_continuedIsSet = false;
}
bool Admin_ShortSalePriceTestStatusModel::isIsDetailDeactivated() const
{
    return m_Is_detail_deactivated;
}

void Admin_ShortSalePriceTestStatusModel::setIsDetailDeactivated(bool value)
{
    m_Is_detail_deactivated = value;
    m_Is_detail_deactivatedIsSet = true;
}

bool Admin_ShortSalePriceTestStatusModel::isDetailDeactivatedIsSet() const
{
    return m_Is_detail_deactivatedIsSet;
}

void Admin_ShortSalePriceTestStatusModel::unsetIs_detail_deactivated()
{
    m_Is_detail_deactivatedIsSet = false;
}
bool Admin_ShortSalePriceTestStatusModel::isIsDetailNotAvailable() const
{
    return m_Is_detail_not_available;
}

void Admin_ShortSalePriceTestStatusModel::setIsDetailNotAvailable(bool value)
{
    m_Is_detail_not_available = value;
    m_Is_detail_not_availableIsSet = true;
}

bool Admin_ShortSalePriceTestStatusModel::isDetailNotAvailableIsSet() const
{
    return m_Is_detail_not_availableIsSet;
}

void Admin_ShortSalePriceTestStatusModel::unsetIs_detail_not_available()
{
    m_Is_detail_not_availableIsSet = false;
}

}
}
}
}


