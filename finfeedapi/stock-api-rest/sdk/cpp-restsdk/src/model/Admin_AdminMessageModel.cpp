/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Admin_AdminMessageModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Admin_AdminMessageModel::Admin_AdminMessageModel()
{
    m_Trading_statusIsSet = false;
    m_Official_priceIsSet = false;
    m_Security_eventIsSet = false;
    m_Auction_informationIsSet = false;
    m_Short_sale_price_testIsSet = false;
    m_Operational_halt_statusIsSet = false;
    m_Retail_liquidity_indicatorIsSet = false;
    m_System_eventIsSet = false;
    m_Security_directoryIsSet = false;
}

Admin_AdminMessageModel::~Admin_AdminMessageModel()
{
}

void Admin_AdminMessageModel::validate()
{
    // TODO: implement validation
}

web::json::value Admin_AdminMessageModel::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Trading_statusIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("trading_status"))] = ModelBase::toJson(m_Trading_status);
    }
    if(m_Official_priceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("official_price"))] = ModelBase::toJson(m_Official_price);
    }
    if(m_Security_eventIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("security_event"))] = ModelBase::toJson(m_Security_event);
    }
    if(m_Auction_informationIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("auction_information"))] = ModelBase::toJson(m_Auction_information);
    }
    if(m_Short_sale_price_testIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test"))] = ModelBase::toJson(m_Short_sale_price_test);
    }
    if(m_Operational_halt_statusIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("operational_halt_status"))] = ModelBase::toJson(m_Operational_halt_status);
    }
    if(m_Retail_liquidity_indicatorIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator"))] = ModelBase::toJson(m_Retail_liquidity_indicator);
    }
    if(m_System_eventIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("system_event"))] = ModelBase::toJson(m_System_event);
    }
    if(m_Security_directoryIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("security_directory"))] = ModelBase::toJson(m_Security_directory);
    }

    return val;
}

bool Admin_AdminMessageModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("trading_status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("trading_status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Admin_TradingStatusModel> refVal_setTradingStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTradingStatus);
            setTradingStatus(refVal_setTradingStatus);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("official_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("official_price")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Admin_OfficialPriceModel> refVal_setOfficialPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfficialPrice);
            setOfficialPrice(refVal_setOfficialPrice);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("security_event"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("security_event")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Admin_SecurityEventModel> refVal_setSecurityEvent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecurityEvent);
            setSecurityEvent(refVal_setSecurityEvent);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("auction_information"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("auction_information")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Admin_AuctionInformationModel> refVal_setAuctionInformation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAuctionInformation);
            setAuctionInformation(refVal_setAuctionInformation);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Admin_ShortSalePriceTestStatusModel> refVal_setShortSalePriceTest;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShortSalePriceTest);
            setShortSalePriceTest(refVal_setShortSalePriceTest);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("operational_halt_status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("operational_halt_status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Admin_OperationalHaltStatusModel> refVal_setOperationalHaltStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOperationalHaltStatus);
            setOperationalHaltStatus(refVal_setOperationalHaltStatus);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Admin_RetailLiquidityIndicatorModel> refVal_setRetailLiquidityIndicator;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRetailLiquidityIndicator);
            setRetailLiquidityIndicator(refVal_setRetailLiquidityIndicator);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("system_event"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("system_event")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Admin_SystemEventModel> refVal_setSystemEvent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSystemEvent);
            setSystemEvent(refVal_setSystemEvent);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("security_directory"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("security_directory")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Admin_SecurityDirectoryModel> refVal_setSecurityDirectory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecurityDirectory);
            setSecurityDirectory(refVal_setSecurityDirectory);
            
        }
    }
    return ok;
}

void Admin_AdminMessageModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Trading_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("trading_status")), m_Trading_status));
    }
    if(m_Official_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("official_price")), m_Official_price));
    }
    if(m_Security_eventIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("security_event")), m_Security_event));
    }
    if(m_Auction_informationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("auction_information")), m_Auction_information));
    }
    if(m_Short_sale_price_testIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test")), m_Short_sale_price_test));
    }
    if(m_Operational_halt_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("operational_halt_status")), m_Operational_halt_status));
    }
    if(m_Retail_liquidity_indicatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator")), m_Retail_liquidity_indicator));
    }
    if(m_System_eventIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("system_event")), m_System_event));
    }
    if(m_Security_directoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("security_directory")), m_Security_directory));
    }
}

bool Admin_AdminMessageModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("trading_status"))))
    {
        std::shared_ptr<Admin_TradingStatusModel> refVal_setTradingStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("trading_status"))), refVal_setTradingStatus );
        setTradingStatus(refVal_setTradingStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("official_price"))))
    {
        std::shared_ptr<Admin_OfficialPriceModel> refVal_setOfficialPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("official_price"))), refVal_setOfficialPrice );
        setOfficialPrice(refVal_setOfficialPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("security_event"))))
    {
        std::shared_ptr<Admin_SecurityEventModel> refVal_setSecurityEvent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("security_event"))), refVal_setSecurityEvent );
        setSecurityEvent(refVal_setSecurityEvent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("auction_information"))))
    {
        std::shared_ptr<Admin_AuctionInformationModel> refVal_setAuctionInformation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("auction_information"))), refVal_setAuctionInformation );
        setAuctionInformation(refVal_setAuctionInformation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test"))))
    {
        std::shared_ptr<Admin_ShortSalePriceTestStatusModel> refVal_setShortSalePriceTest;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("short_sale_price_test"))), refVal_setShortSalePriceTest );
        setShortSalePriceTest(refVal_setShortSalePriceTest);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("operational_halt_status"))))
    {
        std::shared_ptr<Admin_OperationalHaltStatusModel> refVal_setOperationalHaltStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("operational_halt_status"))), refVal_setOperationalHaltStatus );
        setOperationalHaltStatus(refVal_setOperationalHaltStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator"))))
    {
        std::shared_ptr<Admin_RetailLiquidityIndicatorModel> refVal_setRetailLiquidityIndicator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator"))), refVal_setRetailLiquidityIndicator );
        setRetailLiquidityIndicator(refVal_setRetailLiquidityIndicator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("system_event"))))
    {
        std::shared_ptr<Admin_SystemEventModel> refVal_setSystemEvent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("system_event"))), refVal_setSystemEvent );
        setSystemEvent(refVal_setSystemEvent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("security_directory"))))
    {
        std::shared_ptr<Admin_SecurityDirectoryModel> refVal_setSecurityDirectory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("security_directory"))), refVal_setSecurityDirectory );
        setSecurityDirectory(refVal_setSecurityDirectory);
    }
    return ok;
}


std::shared_ptr<Admin_TradingStatusModel> Admin_AdminMessageModel::getTradingStatus() const
{
    return m_Trading_status;
}


void Admin_AdminMessageModel::setTradingStatus(const std::shared_ptr<Admin_TradingStatusModel>& value)
{
    m_Trading_status = value;
    m_Trading_statusIsSet = true;
}

bool Admin_AdminMessageModel::tradingStatusIsSet() const
{
    return m_Trading_statusIsSet;
}

void Admin_AdminMessageModel::unsetTrading_status()
{
    m_Trading_statusIsSet = false;
}
std::shared_ptr<Admin_OfficialPriceModel> Admin_AdminMessageModel::getOfficialPrice() const
{
    return m_Official_price;
}


void Admin_AdminMessageModel::setOfficialPrice(const std::shared_ptr<Admin_OfficialPriceModel>& value)
{
    m_Official_price = value;
    m_Official_priceIsSet = true;
}

bool Admin_AdminMessageModel::officialPriceIsSet() const
{
    return m_Official_priceIsSet;
}

void Admin_AdminMessageModel::unsetOfficial_price()
{
    m_Official_priceIsSet = false;
}
std::shared_ptr<Admin_SecurityEventModel> Admin_AdminMessageModel::getSecurityEvent() const
{
    return m_Security_event;
}


void Admin_AdminMessageModel::setSecurityEvent(const std::shared_ptr<Admin_SecurityEventModel>& value)
{
    m_Security_event = value;
    m_Security_eventIsSet = true;
}

bool Admin_AdminMessageModel::securityEventIsSet() const
{
    return m_Security_eventIsSet;
}

void Admin_AdminMessageModel::unsetSecurity_event()
{
    m_Security_eventIsSet = false;
}
std::shared_ptr<Admin_AuctionInformationModel> Admin_AdminMessageModel::getAuctionInformation() const
{
    return m_Auction_information;
}


void Admin_AdminMessageModel::setAuctionInformation(const std::shared_ptr<Admin_AuctionInformationModel>& value)
{
    m_Auction_information = value;
    m_Auction_informationIsSet = true;
}

bool Admin_AdminMessageModel::auctionInformationIsSet() const
{
    return m_Auction_informationIsSet;
}

void Admin_AdminMessageModel::unsetAuction_information()
{
    m_Auction_informationIsSet = false;
}
std::shared_ptr<Admin_ShortSalePriceTestStatusModel> Admin_AdminMessageModel::getShortSalePriceTest() const
{
    return m_Short_sale_price_test;
}


void Admin_AdminMessageModel::setShortSalePriceTest(const std::shared_ptr<Admin_ShortSalePriceTestStatusModel>& value)
{
    m_Short_sale_price_test = value;
    m_Short_sale_price_testIsSet = true;
}

bool Admin_AdminMessageModel::shortSalePriceTestIsSet() const
{
    return m_Short_sale_price_testIsSet;
}

void Admin_AdminMessageModel::unsetShort_sale_price_test()
{
    m_Short_sale_price_testIsSet = false;
}
std::shared_ptr<Admin_OperationalHaltStatusModel> Admin_AdminMessageModel::getOperationalHaltStatus() const
{
    return m_Operational_halt_status;
}


void Admin_AdminMessageModel::setOperationalHaltStatus(const std::shared_ptr<Admin_OperationalHaltStatusModel>& value)
{
    m_Operational_halt_status = value;
    m_Operational_halt_statusIsSet = true;
}

bool Admin_AdminMessageModel::operationalHaltStatusIsSet() const
{
    return m_Operational_halt_statusIsSet;
}

void Admin_AdminMessageModel::unsetOperational_halt_status()
{
    m_Operational_halt_statusIsSet = false;
}
std::shared_ptr<Admin_RetailLiquidityIndicatorModel> Admin_AdminMessageModel::getRetailLiquidityIndicator() const
{
    return m_Retail_liquidity_indicator;
}


void Admin_AdminMessageModel::setRetailLiquidityIndicator(const std::shared_ptr<Admin_RetailLiquidityIndicatorModel>& value)
{
    m_Retail_liquidity_indicator = value;
    m_Retail_liquidity_indicatorIsSet = true;
}

bool Admin_AdminMessageModel::retailLiquidityIndicatorIsSet() const
{
    return m_Retail_liquidity_indicatorIsSet;
}

void Admin_AdminMessageModel::unsetRetail_liquidity_indicator()
{
    m_Retail_liquidity_indicatorIsSet = false;
}
std::shared_ptr<Admin_SystemEventModel> Admin_AdminMessageModel::getSystemEvent() const
{
    return m_System_event;
}


void Admin_AdminMessageModel::setSystemEvent(const std::shared_ptr<Admin_SystemEventModel>& value)
{
    m_System_event = value;
    m_System_eventIsSet = true;
}

bool Admin_AdminMessageModel::systemEventIsSet() const
{
    return m_System_eventIsSet;
}

void Admin_AdminMessageModel::unsetSystem_event()
{
    m_System_eventIsSet = false;
}
std::shared_ptr<Admin_SecurityDirectoryModel> Admin_AdminMessageModel::getSecurityDirectory() const
{
    return m_Security_directory;
}


void Admin_AdminMessageModel::setSecurityDirectory(const std::shared_ptr<Admin_SecurityDirectoryModel>& value)
{
    m_Security_directory = value;
    m_Security_directoryIsSet = true;
}

bool Admin_AdminMessageModel::securityDirectoryIsSet() const
{
    return m_Security_directoryIsSet;
}

void Admin_AdminMessageModel::unsetSecurity_directory()
{
    m_Security_directoryIsSet = false;
}

}
}
}
}


