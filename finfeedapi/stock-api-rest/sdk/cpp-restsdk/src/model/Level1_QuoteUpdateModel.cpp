/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Level1_QuoteUpdateModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Level1_QuoteUpdateModel::Level1_QuoteUpdateModel()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Timestamp_nanos = 0L;
    m_Timestamp_nanosIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_Is_symbol_available = false;
    m_Is_symbol_availableIsSet = false;
    m_Is_pre_post_market_session = false;
    m_Is_pre_post_market_sessionIsSet = false;
    m_Ask_size = 0;
    m_Ask_sizeIsSet = false;
    m_Ask_price = 0.0;
    m_Ask_priceIsSet = false;
    m_Bid_price = 0.0;
    m_Bid_priceIsSet = false;
    m_Bid_size = 0;
    m_Bid_sizeIsSet = false;
}

Level1_QuoteUpdateModel::~Level1_QuoteUpdateModel()
{
}

void Level1_QuoteUpdateModel::validate()
{
    // TODO: implement validation
}

web::json::value Level1_QuoteUpdateModel::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SymbolIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_Timestamp_nanosIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))] = ModelBase::toJson(m_Timestamp_nanos);
    }
    if(m_TimestampIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Is_symbol_availableIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_symbol_available"))] = ModelBase::toJson(m_Is_symbol_available);
    }
    if(m_Is_pre_post_market_sessionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_pre_post_market_session"))] = ModelBase::toJson(m_Is_pre_post_market_session);
    }
    if(m_Ask_sizeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("ask_size"))] = ModelBase::toJson(m_Ask_size);
    }
    if(m_Ask_priceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("ask_price"))] = ModelBase::toJson(m_Ask_price);
    }
    if(m_Bid_priceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("bid_price"))] = ModelBase::toJson(m_Bid_price);
    }
    if(m_Bid_sizeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("bid_size"))] = ModelBase::toJson(m_Bid_size);
    }

    return val;
}

bool Level1_QuoteUpdateModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTimestampNanos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestampNanos);
            setTimestampNanos(refVal_setTimestampNanos);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_symbol_available"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_symbol_available")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSymbolAvailable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSymbolAvailable);
            setIsSymbolAvailable(refVal_setIsSymbolAvailable);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_pre_post_market_session"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_pre_post_market_session")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsPrePostMarketSession;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsPrePostMarketSession);
            setIsPrePostMarketSession(refVal_setIsPrePostMarketSession);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("ask_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("ask_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAskSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAskSize);
            setAskSize(refVal_setAskSize);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("ask_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("ask_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setAskPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAskPrice);
            setAskPrice(refVal_setAskPrice);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("bid_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("bid_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setBidPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBidPrice);
            setBidPrice(refVal_setBidPrice);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("bid_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("bid_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBidSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBidSize);
            setBidSize(refVal_setBidSize);
            
        }
    }
    return ok;
}

void Level1_QuoteUpdateModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("symbol")), m_Symbol));
    }
    if(m_Timestamp_nanosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos")), m_Timestamp_nanos));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timestamp")), m_Timestamp));
    }
    if(m_Is_symbol_availableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_symbol_available")), m_Is_symbol_available));
    }
    if(m_Is_pre_post_market_sessionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_pre_post_market_session")), m_Is_pre_post_market_session));
    }
    if(m_Ask_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("ask_size")), m_Ask_size));
    }
    if(m_Ask_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("ask_price")), m_Ask_price));
    }
    if(m_Bid_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("bid_price")), m_Bid_price));
    }
    if(m_Bid_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("bid_size")), m_Bid_size));
    }
}

bool Level1_QuoteUpdateModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))))
    {
        int64_t refVal_setTimestampNanos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))), refVal_setTimestampNanos );
        setTimestampNanos(refVal_setTimestampNanos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_symbol_available"))))
    {
        bool refVal_setIsSymbolAvailable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_symbol_available"))), refVal_setIsSymbolAvailable );
        setIsSymbolAvailable(refVal_setIsSymbolAvailable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_pre_post_market_session"))))
    {
        bool refVal_setIsPrePostMarketSession;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_pre_post_market_session"))), refVal_setIsPrePostMarketSession );
        setIsPrePostMarketSession(refVal_setIsPrePostMarketSession);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("ask_size"))))
    {
        int32_t refVal_setAskSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("ask_size"))), refVal_setAskSize );
        setAskSize(refVal_setAskSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("ask_price"))))
    {
        double refVal_setAskPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("ask_price"))), refVal_setAskPrice );
        setAskPrice(refVal_setAskPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("bid_price"))))
    {
        double refVal_setBidPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("bid_price"))), refVal_setBidPrice );
        setBidPrice(refVal_setBidPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("bid_size"))))
    {
        int32_t refVal_setBidSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("bid_size"))), refVal_setBidSize );
        setBidSize(refVal_setBidSize);
    }
    return ok;
}


utility::string_t Level1_QuoteUpdateModel::getSymbol() const
{
    return m_Symbol;
}


void Level1_QuoteUpdateModel::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Level1_QuoteUpdateModel::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Level1_QuoteUpdateModel::unsetSymbol()
{
    m_SymbolIsSet = false;
}
int64_t Level1_QuoteUpdateModel::getTimestampNanos() const
{
    return m_Timestamp_nanos;
}

void Level1_QuoteUpdateModel::setTimestampNanos(int64_t value)
{
    m_Timestamp_nanos = value;
    m_Timestamp_nanosIsSet = true;
}

bool Level1_QuoteUpdateModel::timestampNanosIsSet() const
{
    return m_Timestamp_nanosIsSet;
}

void Level1_QuoteUpdateModel::unsetTimestamp_nanos()
{
    m_Timestamp_nanosIsSet = false;
}
utility::datetime Level1_QuoteUpdateModel::getTimestamp() const
{
    return m_Timestamp;
}


void Level1_QuoteUpdateModel::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Level1_QuoteUpdateModel::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Level1_QuoteUpdateModel::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
bool Level1_QuoteUpdateModel::isIsSymbolAvailable() const
{
    return m_Is_symbol_available;
}

void Level1_QuoteUpdateModel::setIsSymbolAvailable(bool value)
{
    m_Is_symbol_available = value;
    m_Is_symbol_availableIsSet = true;
}

bool Level1_QuoteUpdateModel::isSymbolAvailableIsSet() const
{
    return m_Is_symbol_availableIsSet;
}

void Level1_QuoteUpdateModel::unsetIs_symbol_available()
{
    m_Is_symbol_availableIsSet = false;
}
bool Level1_QuoteUpdateModel::isIsPrePostMarketSession() const
{
    return m_Is_pre_post_market_session;
}

void Level1_QuoteUpdateModel::setIsPrePostMarketSession(bool value)
{
    m_Is_pre_post_market_session = value;
    m_Is_pre_post_market_sessionIsSet = true;
}

bool Level1_QuoteUpdateModel::isPrePostMarketSessionIsSet() const
{
    return m_Is_pre_post_market_sessionIsSet;
}

void Level1_QuoteUpdateModel::unsetIs_pre_post_market_session()
{
    m_Is_pre_post_market_sessionIsSet = false;
}
int32_t Level1_QuoteUpdateModel::getAskSize() const
{
    return m_Ask_size;
}

void Level1_QuoteUpdateModel::setAskSize(int32_t value)
{
    m_Ask_size = value;
    m_Ask_sizeIsSet = true;
}

bool Level1_QuoteUpdateModel::askSizeIsSet() const
{
    return m_Ask_sizeIsSet;
}

void Level1_QuoteUpdateModel::unsetAsk_size()
{
    m_Ask_sizeIsSet = false;
}
double Level1_QuoteUpdateModel::getAskPrice() const
{
    return m_Ask_price;
}

void Level1_QuoteUpdateModel::setAskPrice(double value)
{
    m_Ask_price = value;
    m_Ask_priceIsSet = true;
}

bool Level1_QuoteUpdateModel::askPriceIsSet() const
{
    return m_Ask_priceIsSet;
}

void Level1_QuoteUpdateModel::unsetAsk_price()
{
    m_Ask_priceIsSet = false;
}
double Level1_QuoteUpdateModel::getBidPrice() const
{
    return m_Bid_price;
}

void Level1_QuoteUpdateModel::setBidPrice(double value)
{
    m_Bid_price = value;
    m_Bid_priceIsSet = true;
}

bool Level1_QuoteUpdateModel::bidPriceIsSet() const
{
    return m_Bid_priceIsSet;
}

void Level1_QuoteUpdateModel::unsetBid_price()
{
    m_Bid_priceIsSet = false;
}
int32_t Level1_QuoteUpdateModel::getBidSize() const
{
    return m_Bid_size;
}

void Level1_QuoteUpdateModel::setBidSize(int32_t value)
{
    m_Bid_size = value;
    m_Bid_sizeIsSet = true;
}

bool Level1_QuoteUpdateModel::bidSizeIsSet() const
{
    return m_Bid_sizeIsSet;
}

void Level1_QuoteUpdateModel::unsetBid_size()
{
    m_Bid_sizeIsSet = false;
}

}
}
}
}


