/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Level3_DeleteOrderModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Level3_DeleteOrderModel::Level3_DeleteOrderModel()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Timestamp_nanos = 0L;
    m_Timestamp_nanosIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_Order_id_reference = 0L;
    m_Order_id_referenceIsSet = false;
}

Level3_DeleteOrderModel::~Level3_DeleteOrderModel()
{
}

void Level3_DeleteOrderModel::validate()
{
    // TODO: implement validation
}

web::json::value Level3_DeleteOrderModel::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SymbolIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_Timestamp_nanosIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))] = ModelBase::toJson(m_Timestamp_nanos);
    }
    if(m_TimestampIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Order_id_referenceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("order_id_reference"))] = ModelBase::toJson(m_Order_id_reference);
    }

    return val;
}

bool Level3_DeleteOrderModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTimestampNanos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestampNanos);
            setTimestampNanos(refVal_setTimestampNanos);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("order_id_reference"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("order_id_reference")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setOrderIdReference;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderIdReference);
            setOrderIdReference(refVal_setOrderIdReference);
            
        }
    }
    return ok;
}

void Level3_DeleteOrderModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("symbol")), m_Symbol));
    }
    if(m_Timestamp_nanosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos")), m_Timestamp_nanos));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timestamp")), m_Timestamp));
    }
    if(m_Order_id_referenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("order_id_reference")), m_Order_id_reference));
    }
}

bool Level3_DeleteOrderModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))))
    {
        int64_t refVal_setTimestampNanos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))), refVal_setTimestampNanos );
        setTimestampNanos(refVal_setTimestampNanos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("order_id_reference"))))
    {
        int64_t refVal_setOrderIdReference;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("order_id_reference"))), refVal_setOrderIdReference );
        setOrderIdReference(refVal_setOrderIdReference);
    }
    return ok;
}


utility::string_t Level3_DeleteOrderModel::getSymbol() const
{
    return m_Symbol;
}


void Level3_DeleteOrderModel::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Level3_DeleteOrderModel::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Level3_DeleteOrderModel::unsetSymbol()
{
    m_SymbolIsSet = false;
}
int64_t Level3_DeleteOrderModel::getTimestampNanos() const
{
    return m_Timestamp_nanos;
}

void Level3_DeleteOrderModel::setTimestampNanos(int64_t value)
{
    m_Timestamp_nanos = value;
    m_Timestamp_nanosIsSet = true;
}

bool Level3_DeleteOrderModel::timestampNanosIsSet() const
{
    return m_Timestamp_nanosIsSet;
}

void Level3_DeleteOrderModel::unsetTimestamp_nanos()
{
    m_Timestamp_nanosIsSet = false;
}
utility::datetime Level3_DeleteOrderModel::getTimestamp() const
{
    return m_Timestamp;
}


void Level3_DeleteOrderModel::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Level3_DeleteOrderModel::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Level3_DeleteOrderModel::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
int64_t Level3_DeleteOrderModel::getOrderIdReference() const
{
    return m_Order_id_reference;
}

void Level3_DeleteOrderModel::setOrderIdReference(int64_t value)
{
    m_Order_id_reference = value;
    m_Order_id_referenceIsSet = true;
}

bool Level3_DeleteOrderModel::orderIdReferenceIsSet() const
{
    return m_Order_id_referenceIsSet;
}

void Level3_DeleteOrderModel::unsetOrder_id_reference()
{
    m_Order_id_referenceIsSet = false;
}

}
}
}
}


