/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Admin_OperationalHaltStatusModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Admin_OperationalHaltStatusModel::Admin_OperationalHaltStatusModel()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Timestamp_nanos = 0L;
    m_Timestamp_nanosIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_Operational_halt_status = 0;
    m_Operational_halt_statusIsSet = false;
    m_Operational_halt_status_code = utility::conversions::to_string_t("");
    m_Operational_halt_status_codeIsSet = false;
    m_Operational_halt_status_text = utility::conversions::to_string_t("");
    m_Operational_halt_status_textIsSet = false;
    m_Is_operationally_halted = false;
    m_Is_operationally_haltedIsSet = false;
    m_Is_not_operationally_halted = false;
    m_Is_not_operationally_haltedIsSet = false;
}

Admin_OperationalHaltStatusModel::~Admin_OperationalHaltStatusModel()
{
}

void Admin_OperationalHaltStatusModel::validate()
{
    // TODO: implement validation
}

web::json::value Admin_OperationalHaltStatusModel::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SymbolIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_Timestamp_nanosIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))] = ModelBase::toJson(m_Timestamp_nanos);
    }
    if(m_TimestampIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Operational_halt_statusIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("operational_halt_status"))] = ModelBase::toJson(m_Operational_halt_status);
    }
    if(m_Operational_halt_status_codeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("operational_halt_status_code"))] = ModelBase::toJson(m_Operational_halt_status_code);
    }
    if(m_Operational_halt_status_textIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("operational_halt_status_text"))] = ModelBase::toJson(m_Operational_halt_status_text);
    }
    if(m_Is_operationally_haltedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_operationally_halted"))] = ModelBase::toJson(m_Is_operationally_halted);
    }
    if(m_Is_not_operationally_haltedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_not_operationally_halted"))] = ModelBase::toJson(m_Is_not_operationally_halted);
    }

    return val;
}

bool Admin_OperationalHaltStatusModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTimestampNanos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestampNanos);
            setTimestampNanos(refVal_setTimestampNanos);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("operational_halt_status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("operational_halt_status")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setOperationalHaltStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOperationalHaltStatus);
            setOperationalHaltStatus(refVal_setOperationalHaltStatus);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("operational_halt_status_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("operational_halt_status_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOperationalHaltStatusCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOperationalHaltStatusCode);
            setOperationalHaltStatusCode(refVal_setOperationalHaltStatusCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("operational_halt_status_text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("operational_halt_status_text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOperationalHaltStatusText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOperationalHaltStatusText);
            setOperationalHaltStatusText(refVal_setOperationalHaltStatusText);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_operationally_halted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_operationally_halted")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsOperationallyHalted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsOperationallyHalted);
            setIsOperationallyHalted(refVal_setIsOperationallyHalted);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_not_operationally_halted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_not_operationally_halted")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsNotOperationallyHalted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsNotOperationallyHalted);
            setIsNotOperationallyHalted(refVal_setIsNotOperationallyHalted);
            
        }
    }
    return ok;
}

void Admin_OperationalHaltStatusModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("symbol")), m_Symbol));
    }
    if(m_Timestamp_nanosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos")), m_Timestamp_nanos));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timestamp")), m_Timestamp));
    }
    if(m_Operational_halt_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("operational_halt_status")), m_Operational_halt_status));
    }
    if(m_Operational_halt_status_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("operational_halt_status_code")), m_Operational_halt_status_code));
    }
    if(m_Operational_halt_status_textIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("operational_halt_status_text")), m_Operational_halt_status_text));
    }
    if(m_Is_operationally_haltedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_operationally_halted")), m_Is_operationally_halted));
    }
    if(m_Is_not_operationally_haltedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_not_operationally_halted")), m_Is_not_operationally_halted));
    }
}

bool Admin_OperationalHaltStatusModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))))
    {
        int64_t refVal_setTimestampNanos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))), refVal_setTimestampNanos );
        setTimestampNanos(refVal_setTimestampNanos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("operational_halt_status"))))
    {
        int32_t refVal_setOperationalHaltStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("operational_halt_status"))), refVal_setOperationalHaltStatus );
        setOperationalHaltStatus(refVal_setOperationalHaltStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("operational_halt_status_code"))))
    {
        utility::string_t refVal_setOperationalHaltStatusCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("operational_halt_status_code"))), refVal_setOperationalHaltStatusCode );
        setOperationalHaltStatusCode(refVal_setOperationalHaltStatusCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("operational_halt_status_text"))))
    {
        utility::string_t refVal_setOperationalHaltStatusText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("operational_halt_status_text"))), refVal_setOperationalHaltStatusText );
        setOperationalHaltStatusText(refVal_setOperationalHaltStatusText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_operationally_halted"))))
    {
        bool refVal_setIsOperationallyHalted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_operationally_halted"))), refVal_setIsOperationallyHalted );
        setIsOperationallyHalted(refVal_setIsOperationallyHalted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_not_operationally_halted"))))
    {
        bool refVal_setIsNotOperationallyHalted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_not_operationally_halted"))), refVal_setIsNotOperationallyHalted );
        setIsNotOperationallyHalted(refVal_setIsNotOperationallyHalted);
    }
    return ok;
}


utility::string_t Admin_OperationalHaltStatusModel::getSymbol() const
{
    return m_Symbol;
}


void Admin_OperationalHaltStatusModel::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Admin_OperationalHaltStatusModel::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Admin_OperationalHaltStatusModel::unsetSymbol()
{
    m_SymbolIsSet = false;
}
int64_t Admin_OperationalHaltStatusModel::getTimestampNanos() const
{
    return m_Timestamp_nanos;
}

void Admin_OperationalHaltStatusModel::setTimestampNanos(int64_t value)
{
    m_Timestamp_nanos = value;
    m_Timestamp_nanosIsSet = true;
}

bool Admin_OperationalHaltStatusModel::timestampNanosIsSet() const
{
    return m_Timestamp_nanosIsSet;
}

void Admin_OperationalHaltStatusModel::unsetTimestamp_nanos()
{
    m_Timestamp_nanosIsSet = false;
}
utility::datetime Admin_OperationalHaltStatusModel::getTimestamp() const
{
    return m_Timestamp;
}


void Admin_OperationalHaltStatusModel::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Admin_OperationalHaltStatusModel::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Admin_OperationalHaltStatusModel::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
int32_t Admin_OperationalHaltStatusModel::getOperationalHaltStatus() const
{
    return m_Operational_halt_status;
}

void Admin_OperationalHaltStatusModel::setOperationalHaltStatus(int32_t value)
{
    m_Operational_halt_status = value;
    m_Operational_halt_statusIsSet = true;
}

bool Admin_OperationalHaltStatusModel::operationalHaltStatusIsSet() const
{
    return m_Operational_halt_statusIsSet;
}

void Admin_OperationalHaltStatusModel::unsetOperational_halt_status()
{
    m_Operational_halt_statusIsSet = false;
}
utility::string_t Admin_OperationalHaltStatusModel::getOperationalHaltStatusCode() const
{
    return m_Operational_halt_status_code;
}


void Admin_OperationalHaltStatusModel::setOperationalHaltStatusCode(const utility::string_t& value)
{
    m_Operational_halt_status_code = value;
    m_Operational_halt_status_codeIsSet = true;
}

bool Admin_OperationalHaltStatusModel::operationalHaltStatusCodeIsSet() const
{
    return m_Operational_halt_status_codeIsSet;
}

void Admin_OperationalHaltStatusModel::unsetOperational_halt_status_code()
{
    m_Operational_halt_status_codeIsSet = false;
}
utility::string_t Admin_OperationalHaltStatusModel::getOperationalHaltStatusText() const
{
    return m_Operational_halt_status_text;
}


void Admin_OperationalHaltStatusModel::setOperationalHaltStatusText(const utility::string_t& value)
{
    m_Operational_halt_status_text = value;
    m_Operational_halt_status_textIsSet = true;
}

bool Admin_OperationalHaltStatusModel::operationalHaltStatusTextIsSet() const
{
    return m_Operational_halt_status_textIsSet;
}

void Admin_OperationalHaltStatusModel::unsetOperational_halt_status_text()
{
    m_Operational_halt_status_textIsSet = false;
}
bool Admin_OperationalHaltStatusModel::isIsOperationallyHalted() const
{
    return m_Is_operationally_halted;
}

void Admin_OperationalHaltStatusModel::setIsOperationallyHalted(bool value)
{
    m_Is_operationally_halted = value;
    m_Is_operationally_haltedIsSet = true;
}

bool Admin_OperationalHaltStatusModel::isOperationallyHaltedIsSet() const
{
    return m_Is_operationally_haltedIsSet;
}

void Admin_OperationalHaltStatusModel::unsetIs_operationally_halted()
{
    m_Is_operationally_haltedIsSet = false;
}
bool Admin_OperationalHaltStatusModel::isIsNotOperationallyHalted() const
{
    return m_Is_not_operationally_halted;
}

void Admin_OperationalHaltStatusModel::setIsNotOperationallyHalted(bool value)
{
    m_Is_not_operationally_halted = value;
    m_Is_not_operationally_haltedIsSet = true;
}

bool Admin_OperationalHaltStatusModel::isNotOperationallyHaltedIsSet() const
{
    return m_Is_not_operationally_haltedIsSet;
}

void Admin_OperationalHaltStatusModel::unsetIs_not_operationally_halted()
{
    m_Is_not_operationally_haltedIsSet = false;
}

}
}
}
}


