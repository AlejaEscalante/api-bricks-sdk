/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Admin_SecurityEventModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Admin_SecurityEventModel::Admin_SecurityEventModel()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Timestamp_nanos = 0L;
    m_Timestamp_nanosIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_Security_event = 0;
    m_Security_eventIsSet = false;
    m_Security_event_code = utility::conversions::to_string_t("");
    m_Security_event_codeIsSet = false;
    m_Security_event_text = utility::conversions::to_string_t("");
    m_Security_event_textIsSet = false;
    m_Is_opening_process_complete = false;
    m_Is_opening_process_completeIsSet = false;
    m_Is_closing_process_complete = false;
    m_Is_closing_process_completeIsSet = false;
}

Admin_SecurityEventModel::~Admin_SecurityEventModel()
{
}

void Admin_SecurityEventModel::validate()
{
    // TODO: implement validation
}

web::json::value Admin_SecurityEventModel::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SymbolIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_Timestamp_nanosIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("timestamp_nanos"))] = ModelBase::toJson(m_Timestamp_nanos);
    }
    if(m_TimestampIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Security_eventIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("security_event"))] = ModelBase::toJson(m_Security_event);
    }
    if(m_Security_event_codeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("security_event_code"))] = ModelBase::toJson(m_Security_event_code);
    }
    if(m_Security_event_textIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("security_event_text"))] = ModelBase::toJson(m_Security_event_text);
    }
    if(m_Is_opening_process_completeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_opening_process_complete"))] = ModelBase::toJson(m_Is_opening_process_complete);
    }
    if(m_Is_closing_process_completeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_closing_process_complete"))] = ModelBase::toJson(m_Is_closing_process_complete);
    }

    return val;
}

bool Admin_SecurityEventModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp_nanos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp_nanos")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTimestampNanos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestampNanos);
            setTimestampNanos(refVal_setTimestampNanos);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("security_event"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("security_event")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSecurityEvent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecurityEvent);
            setSecurityEvent(refVal_setSecurityEvent);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("security_event_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("security_event_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSecurityEventCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecurityEventCode);
            setSecurityEventCode(refVal_setSecurityEventCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("security_event_text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("security_event_text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSecurityEventText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecurityEventText);
            setSecurityEventText(refVal_setSecurityEventText);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_opening_process_complete"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_opening_process_complete")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsOpeningProcessComplete;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsOpeningProcessComplete);
            setIsOpeningProcessComplete(refVal_setIsOpeningProcessComplete);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_closing_process_complete"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_closing_process_complete")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsClosingProcessComplete;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsClosingProcessComplete);
            setIsClosingProcessComplete(refVal_setIsClosingProcessComplete);
            
        }
    }
    return ok;
}

void Admin_SecurityEventModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_Timestamp_nanosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp_nanos")), m_Timestamp_nanos));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_Security_eventIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("security_event")), m_Security_event));
    }
    if(m_Security_event_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("security_event_code")), m_Security_event_code));
    }
    if(m_Security_event_textIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("security_event_text")), m_Security_event_text));
    }
    if(m_Is_opening_process_completeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_opening_process_complete")), m_Is_opening_process_complete));
    }
    if(m_Is_closing_process_completeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_closing_process_complete")), m_Is_closing_process_complete));
    }
}

bool Admin_SecurityEventModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp_nanos"))))
    {
        int64_t refVal_setTimestampNanos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp_nanos"))), refVal_setTimestampNanos );
        setTimestampNanos(refVal_setTimestampNanos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("security_event"))))
    {
        int32_t refVal_setSecurityEvent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("security_event"))), refVal_setSecurityEvent );
        setSecurityEvent(refVal_setSecurityEvent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("security_event_code"))))
    {
        utility::string_t refVal_setSecurityEventCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("security_event_code"))), refVal_setSecurityEventCode );
        setSecurityEventCode(refVal_setSecurityEventCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("security_event_text"))))
    {
        utility::string_t refVal_setSecurityEventText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("security_event_text"))), refVal_setSecurityEventText );
        setSecurityEventText(refVal_setSecurityEventText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_opening_process_complete"))))
    {
        bool refVal_setIsOpeningProcessComplete;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_opening_process_complete"))), refVal_setIsOpeningProcessComplete );
        setIsOpeningProcessComplete(refVal_setIsOpeningProcessComplete);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_closing_process_complete"))))
    {
        bool refVal_setIsClosingProcessComplete;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_closing_process_complete"))), refVal_setIsClosingProcessComplete );
        setIsClosingProcessComplete(refVal_setIsClosingProcessComplete);
    }
    return ok;
}


utility::string_t Admin_SecurityEventModel::getSymbol() const
{
    return m_Symbol;
}


void Admin_SecurityEventModel::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Admin_SecurityEventModel::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Admin_SecurityEventModel::unsetSymbol()
{
    m_SymbolIsSet = false;
}
int64_t Admin_SecurityEventModel::getTimestampNanos() const
{
    return m_Timestamp_nanos;
}

void Admin_SecurityEventModel::setTimestampNanos(int64_t value)
{
    m_Timestamp_nanos = value;
    m_Timestamp_nanosIsSet = true;
}

bool Admin_SecurityEventModel::timestampNanosIsSet() const
{
    return m_Timestamp_nanosIsSet;
}

void Admin_SecurityEventModel::unsetTimestamp_nanos()
{
    m_Timestamp_nanosIsSet = false;
}
utility::datetime Admin_SecurityEventModel::getTimestamp() const
{
    return m_Timestamp;
}


void Admin_SecurityEventModel::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Admin_SecurityEventModel::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Admin_SecurityEventModel::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
int32_t Admin_SecurityEventModel::getSecurityEvent() const
{
    return m_Security_event;
}

void Admin_SecurityEventModel::setSecurityEvent(int32_t value)
{
    m_Security_event = value;
    m_Security_eventIsSet = true;
}

bool Admin_SecurityEventModel::securityEventIsSet() const
{
    return m_Security_eventIsSet;
}

void Admin_SecurityEventModel::unsetSecurity_event()
{
    m_Security_eventIsSet = false;
}
utility::string_t Admin_SecurityEventModel::getSecurityEventCode() const
{
    return m_Security_event_code;
}


void Admin_SecurityEventModel::setSecurityEventCode(const utility::string_t& value)
{
    m_Security_event_code = value;
    m_Security_event_codeIsSet = true;
}

bool Admin_SecurityEventModel::securityEventCodeIsSet() const
{
    return m_Security_event_codeIsSet;
}

void Admin_SecurityEventModel::unsetSecurity_event_code()
{
    m_Security_event_codeIsSet = false;
}
utility::string_t Admin_SecurityEventModel::getSecurityEventText() const
{
    return m_Security_event_text;
}


void Admin_SecurityEventModel::setSecurityEventText(const utility::string_t& value)
{
    m_Security_event_text = value;
    m_Security_event_textIsSet = true;
}

bool Admin_SecurityEventModel::securityEventTextIsSet() const
{
    return m_Security_event_textIsSet;
}

void Admin_SecurityEventModel::unsetSecurity_event_text()
{
    m_Security_event_textIsSet = false;
}
bool Admin_SecurityEventModel::isIsOpeningProcessComplete() const
{
    return m_Is_opening_process_complete;
}

void Admin_SecurityEventModel::setIsOpeningProcessComplete(bool value)
{
    m_Is_opening_process_complete = value;
    m_Is_opening_process_completeIsSet = true;
}

bool Admin_SecurityEventModel::isOpeningProcessCompleteIsSet() const
{
    return m_Is_opening_process_completeIsSet;
}

void Admin_SecurityEventModel::unsetIs_opening_process_complete()
{
    m_Is_opening_process_completeIsSet = false;
}
bool Admin_SecurityEventModel::isIsClosingProcessComplete() const
{
    return m_Is_closing_process_complete;
}

void Admin_SecurityEventModel::setIsClosingProcessComplete(bool value)
{
    m_Is_closing_process_complete = value;
    m_Is_closing_process_completeIsSet = true;
}

bool Admin_SecurityEventModel::isClosingProcessCompleteIsSet() const
{
    return m_Is_closing_process_completeIsSet;
}

void Admin_SecurityEventModel::unsetIs_closing_process_complete()
{
    m_Is_closing_process_completeIsSet = false;
}

}
}
}
}


