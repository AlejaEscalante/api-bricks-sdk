/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Admin_RetailLiquidityIndicatorModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Admin_RetailLiquidityIndicatorModel::Admin_RetailLiquidityIndicatorModel()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Timestamp_nanos = 0L;
    m_Timestamp_nanosIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_Retail_liquidity_indicator = 0;
    m_Retail_liquidity_indicatorIsSet = false;
    m_Retail_liquidity_indicator_code = utility::conversions::to_string_t("");
    m_Retail_liquidity_indicator_codeIsSet = false;
    m_Retail_liquidity_indicator_text = utility::conversions::to_string_t("");
    m_Retail_liquidity_indicator_textIsSet = false;
    m_Is_retail_indicator_not_applicable = false;
    m_Is_retail_indicator_not_applicableIsSet = false;
    m_Is_retail_indicator_buy_interest = false;
    m_Is_retail_indicator_buy_interestIsSet = false;
    m_Is_retail_indicator_sell_interest = false;
    m_Is_retail_indicator_sell_interestIsSet = false;
    m_Is_retail_indicator_buy_and_sell_interest = false;
    m_Is_retail_indicator_buy_and_sell_interestIsSet = false;
}

Admin_RetailLiquidityIndicatorModel::~Admin_RetailLiquidityIndicatorModel()
{
}

void Admin_RetailLiquidityIndicatorModel::validate()
{
    // TODO: implement validation
}

web::json::value Admin_RetailLiquidityIndicatorModel::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SymbolIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_Timestamp_nanosIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))] = ModelBase::toJson(m_Timestamp_nanos);
    }
    if(m_TimestampIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Retail_liquidity_indicatorIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator"))] = ModelBase::toJson(m_Retail_liquidity_indicator);
    }
    if(m_Retail_liquidity_indicator_codeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator_code"))] = ModelBase::toJson(m_Retail_liquidity_indicator_code);
    }
    if(m_Retail_liquidity_indicator_textIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator_text"))] = ModelBase::toJson(m_Retail_liquidity_indicator_text);
    }
    if(m_Is_retail_indicator_not_applicableIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_not_applicable"))] = ModelBase::toJson(m_Is_retail_indicator_not_applicable);
    }
    if(m_Is_retail_indicator_buy_interestIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_buy_interest"))] = ModelBase::toJson(m_Is_retail_indicator_buy_interest);
    }
    if(m_Is_retail_indicator_sell_interestIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_sell_interest"))] = ModelBase::toJson(m_Is_retail_indicator_sell_interest);
    }
    if(m_Is_retail_indicator_buy_and_sell_interestIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_buy_and_sell_interest"))] = ModelBase::toJson(m_Is_retail_indicator_buy_and_sell_interest);
    }

    return val;
}

bool Admin_RetailLiquidityIndicatorModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTimestampNanos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestampNanos);
            setTimestampNanos(refVal_setTimestampNanos);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRetailLiquidityIndicator;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRetailLiquidityIndicator);
            setRetailLiquidityIndicator(refVal_setRetailLiquidityIndicator);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator_code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRetailLiquidityIndicatorCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRetailLiquidityIndicatorCode);
            setRetailLiquidityIndicatorCode(refVal_setRetailLiquidityIndicatorCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator_text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator_text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRetailLiquidityIndicatorText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRetailLiquidityIndicatorText);
            setRetailLiquidityIndicatorText(refVal_setRetailLiquidityIndicatorText);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_not_applicable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_not_applicable")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsRetailIndicatorNotApplicable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsRetailIndicatorNotApplicable);
            setIsRetailIndicatorNotApplicable(refVal_setIsRetailIndicatorNotApplicable);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_buy_interest"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_buy_interest")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsRetailIndicatorBuyInterest;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsRetailIndicatorBuyInterest);
            setIsRetailIndicatorBuyInterest(refVal_setIsRetailIndicatorBuyInterest);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_sell_interest"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_sell_interest")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsRetailIndicatorSellInterest;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsRetailIndicatorSellInterest);
            setIsRetailIndicatorSellInterest(refVal_setIsRetailIndicatorSellInterest);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_buy_and_sell_interest"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_buy_and_sell_interest")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsRetailIndicatorBuyAndSellInterest;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsRetailIndicatorBuyAndSellInterest);
            setIsRetailIndicatorBuyAndSellInterest(refVal_setIsRetailIndicatorBuyAndSellInterest);
            
        }
    }
    return ok;
}

void Admin_RetailLiquidityIndicatorModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("symbol")), m_Symbol));
    }
    if(m_Timestamp_nanosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos")), m_Timestamp_nanos));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timestamp")), m_Timestamp));
    }
    if(m_Retail_liquidity_indicatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator")), m_Retail_liquidity_indicator));
    }
    if(m_Retail_liquidity_indicator_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator_code")), m_Retail_liquidity_indicator_code));
    }
    if(m_Retail_liquidity_indicator_textIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator_text")), m_Retail_liquidity_indicator_text));
    }
    if(m_Is_retail_indicator_not_applicableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_not_applicable")), m_Is_retail_indicator_not_applicable));
    }
    if(m_Is_retail_indicator_buy_interestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_buy_interest")), m_Is_retail_indicator_buy_interest));
    }
    if(m_Is_retail_indicator_sell_interestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_sell_interest")), m_Is_retail_indicator_sell_interest));
    }
    if(m_Is_retail_indicator_buy_and_sell_interestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_buy_and_sell_interest")), m_Is_retail_indicator_buy_and_sell_interest));
    }
}

bool Admin_RetailLiquidityIndicatorModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))))
    {
        int64_t refVal_setTimestampNanos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timestamp_nanos"))), refVal_setTimestampNanos );
        setTimestampNanos(refVal_setTimestampNanos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator"))))
    {
        int32_t refVal_setRetailLiquidityIndicator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator"))), refVal_setRetailLiquidityIndicator );
        setRetailLiquidityIndicator(refVal_setRetailLiquidityIndicator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator_code"))))
    {
        utility::string_t refVal_setRetailLiquidityIndicatorCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator_code"))), refVal_setRetailLiquidityIndicatorCode );
        setRetailLiquidityIndicatorCode(refVal_setRetailLiquidityIndicatorCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator_text"))))
    {
        utility::string_t refVal_setRetailLiquidityIndicatorText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("retail_liquidity_indicator_text"))), refVal_setRetailLiquidityIndicatorText );
        setRetailLiquidityIndicatorText(refVal_setRetailLiquidityIndicatorText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_not_applicable"))))
    {
        bool refVal_setIsRetailIndicatorNotApplicable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_not_applicable"))), refVal_setIsRetailIndicatorNotApplicable );
        setIsRetailIndicatorNotApplicable(refVal_setIsRetailIndicatorNotApplicable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_buy_interest"))))
    {
        bool refVal_setIsRetailIndicatorBuyInterest;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_buy_interest"))), refVal_setIsRetailIndicatorBuyInterest );
        setIsRetailIndicatorBuyInterest(refVal_setIsRetailIndicatorBuyInterest);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_sell_interest"))))
    {
        bool refVal_setIsRetailIndicatorSellInterest;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_sell_interest"))), refVal_setIsRetailIndicatorSellInterest );
        setIsRetailIndicatorSellInterest(refVal_setIsRetailIndicatorSellInterest);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_buy_and_sell_interest"))))
    {
        bool refVal_setIsRetailIndicatorBuyAndSellInterest;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("is_retail_indicator_buy_and_sell_interest"))), refVal_setIsRetailIndicatorBuyAndSellInterest );
        setIsRetailIndicatorBuyAndSellInterest(refVal_setIsRetailIndicatorBuyAndSellInterest);
    }
    return ok;
}


utility::string_t Admin_RetailLiquidityIndicatorModel::getSymbol() const
{
    return m_Symbol;
}


void Admin_RetailLiquidityIndicatorModel::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Admin_RetailLiquidityIndicatorModel::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Admin_RetailLiquidityIndicatorModel::unsetSymbol()
{
    m_SymbolIsSet = false;
}
int64_t Admin_RetailLiquidityIndicatorModel::getTimestampNanos() const
{
    return m_Timestamp_nanos;
}

void Admin_RetailLiquidityIndicatorModel::setTimestampNanos(int64_t value)
{
    m_Timestamp_nanos = value;
    m_Timestamp_nanosIsSet = true;
}

bool Admin_RetailLiquidityIndicatorModel::timestampNanosIsSet() const
{
    return m_Timestamp_nanosIsSet;
}

void Admin_RetailLiquidityIndicatorModel::unsetTimestamp_nanos()
{
    m_Timestamp_nanosIsSet = false;
}
utility::datetime Admin_RetailLiquidityIndicatorModel::getTimestamp() const
{
    return m_Timestamp;
}


void Admin_RetailLiquidityIndicatorModel::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Admin_RetailLiquidityIndicatorModel::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Admin_RetailLiquidityIndicatorModel::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
int32_t Admin_RetailLiquidityIndicatorModel::getRetailLiquidityIndicator() const
{
    return m_Retail_liquidity_indicator;
}

void Admin_RetailLiquidityIndicatorModel::setRetailLiquidityIndicator(int32_t value)
{
    m_Retail_liquidity_indicator = value;
    m_Retail_liquidity_indicatorIsSet = true;
}

bool Admin_RetailLiquidityIndicatorModel::retailLiquidityIndicatorIsSet() const
{
    return m_Retail_liquidity_indicatorIsSet;
}

void Admin_RetailLiquidityIndicatorModel::unsetRetail_liquidity_indicator()
{
    m_Retail_liquidity_indicatorIsSet = false;
}
utility::string_t Admin_RetailLiquidityIndicatorModel::getRetailLiquidityIndicatorCode() const
{
    return m_Retail_liquidity_indicator_code;
}


void Admin_RetailLiquidityIndicatorModel::setRetailLiquidityIndicatorCode(const utility::string_t& value)
{
    m_Retail_liquidity_indicator_code = value;
    m_Retail_liquidity_indicator_codeIsSet = true;
}

bool Admin_RetailLiquidityIndicatorModel::retailLiquidityIndicatorCodeIsSet() const
{
    return m_Retail_liquidity_indicator_codeIsSet;
}

void Admin_RetailLiquidityIndicatorModel::unsetRetail_liquidity_indicator_code()
{
    m_Retail_liquidity_indicator_codeIsSet = false;
}
utility::string_t Admin_RetailLiquidityIndicatorModel::getRetailLiquidityIndicatorText() const
{
    return m_Retail_liquidity_indicator_text;
}


void Admin_RetailLiquidityIndicatorModel::setRetailLiquidityIndicatorText(const utility::string_t& value)
{
    m_Retail_liquidity_indicator_text = value;
    m_Retail_liquidity_indicator_textIsSet = true;
}

bool Admin_RetailLiquidityIndicatorModel::retailLiquidityIndicatorTextIsSet() const
{
    return m_Retail_liquidity_indicator_textIsSet;
}

void Admin_RetailLiquidityIndicatorModel::unsetRetail_liquidity_indicator_text()
{
    m_Retail_liquidity_indicator_textIsSet = false;
}
bool Admin_RetailLiquidityIndicatorModel::isIsRetailIndicatorNotApplicable() const
{
    return m_Is_retail_indicator_not_applicable;
}

void Admin_RetailLiquidityIndicatorModel::setIsRetailIndicatorNotApplicable(bool value)
{
    m_Is_retail_indicator_not_applicable = value;
    m_Is_retail_indicator_not_applicableIsSet = true;
}

bool Admin_RetailLiquidityIndicatorModel::isRetailIndicatorNotApplicableIsSet() const
{
    return m_Is_retail_indicator_not_applicableIsSet;
}

void Admin_RetailLiquidityIndicatorModel::unsetIs_retail_indicator_not_applicable()
{
    m_Is_retail_indicator_not_applicableIsSet = false;
}
bool Admin_RetailLiquidityIndicatorModel::isIsRetailIndicatorBuyInterest() const
{
    return m_Is_retail_indicator_buy_interest;
}

void Admin_RetailLiquidityIndicatorModel::setIsRetailIndicatorBuyInterest(bool value)
{
    m_Is_retail_indicator_buy_interest = value;
    m_Is_retail_indicator_buy_interestIsSet = true;
}

bool Admin_RetailLiquidityIndicatorModel::isRetailIndicatorBuyInterestIsSet() const
{
    return m_Is_retail_indicator_buy_interestIsSet;
}

void Admin_RetailLiquidityIndicatorModel::unsetIs_retail_indicator_buy_interest()
{
    m_Is_retail_indicator_buy_interestIsSet = false;
}
bool Admin_RetailLiquidityIndicatorModel::isIsRetailIndicatorSellInterest() const
{
    return m_Is_retail_indicator_sell_interest;
}

void Admin_RetailLiquidityIndicatorModel::setIsRetailIndicatorSellInterest(bool value)
{
    m_Is_retail_indicator_sell_interest = value;
    m_Is_retail_indicator_sell_interestIsSet = true;
}

bool Admin_RetailLiquidityIndicatorModel::isRetailIndicatorSellInterestIsSet() const
{
    return m_Is_retail_indicator_sell_interestIsSet;
}

void Admin_RetailLiquidityIndicatorModel::unsetIs_retail_indicator_sell_interest()
{
    m_Is_retail_indicator_sell_interestIsSet = false;
}
bool Admin_RetailLiquidityIndicatorModel::isIsRetailIndicatorBuyAndSellInterest() const
{
    return m_Is_retail_indicator_buy_and_sell_interest;
}

void Admin_RetailLiquidityIndicatorModel::setIsRetailIndicatorBuyAndSellInterest(bool value)
{
    m_Is_retail_indicator_buy_and_sell_interest = value;
    m_Is_retail_indicator_buy_and_sell_interestIsSet = true;
}

bool Admin_RetailLiquidityIndicatorModel::isRetailIndicatorBuyAndSellInterestIsSet() const
{
    return m_Is_retail_indicator_buy_and_sell_interestIsSet;
}

void Admin_RetailLiquidityIndicatorModel::unsetIs_retail_indicator_buy_and_sell_interest()
{
    m_Is_retail_indicator_buy_and_sell_interestIsSet = false;
}

}
}
}
}


