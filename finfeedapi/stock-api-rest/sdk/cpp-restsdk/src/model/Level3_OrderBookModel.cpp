/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Level3_OrderBookModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Level3_OrderBookModel::Level3_OrderBookModel()
{
    m_Add_orderIsSet = false;
    m_Delete_orderIsSet = false;
    m_Modify_orderIsSet = false;
    m_Executed_orderIsSet = false;
    m_Clear_bookIsSet = false;
}

Level3_OrderBookModel::~Level3_OrderBookModel()
{
}

void Level3_OrderBookModel::validate()
{
    // TODO: implement validation
}

web::json::value Level3_OrderBookModel::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Add_orderIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("add_order"))] = ModelBase::toJson(m_Add_order);
    }
    if(m_Delete_orderIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("delete_order"))] = ModelBase::toJson(m_Delete_order);
    }
    if(m_Modify_orderIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("modify_order"))] = ModelBase::toJson(m_Modify_order);
    }
    if(m_Executed_orderIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("executed_order"))] = ModelBase::toJson(m_Executed_order);
    }
    if(m_Clear_bookIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("clear_book"))] = ModelBase::toJson(m_Clear_book);
    }

    return val;
}

bool Level3_OrderBookModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("add_order"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("add_order")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Level3_AddOrderModel> refVal_setAddOrder;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddOrder);
            setAddOrder(refVal_setAddOrder);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("delete_order"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("delete_order")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Level3_DeleteOrderModel> refVal_setDeleteOrder;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeleteOrder);
            setDeleteOrder(refVal_setDeleteOrder);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("modify_order"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("modify_order")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Level3_ModifyOrderModel> refVal_setModifyOrder;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifyOrder);
            setModifyOrder(refVal_setModifyOrder);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("executed_order"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("executed_order")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Level3_ExecutedOrderModel> refVal_setExecutedOrder;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExecutedOrder);
            setExecutedOrder(refVal_setExecutedOrder);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("clear_book"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("clear_book")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Level3_ClearBookModel> refVal_setClearBook;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClearBook);
            setClearBook(refVal_setClearBook);
            
        }
    }
    return ok;
}

void Level3_OrderBookModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Add_orderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("add_order")), m_Add_order));
    }
    if(m_Delete_orderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("delete_order")), m_Delete_order));
    }
    if(m_Modify_orderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("modify_order")), m_Modify_order));
    }
    if(m_Executed_orderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("executed_order")), m_Executed_order));
    }
    if(m_Clear_bookIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("clear_book")), m_Clear_book));
    }
}

bool Level3_OrderBookModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("add_order"))))
    {
        std::shared_ptr<Level3_AddOrderModel> refVal_setAddOrder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("add_order"))), refVal_setAddOrder );
        setAddOrder(refVal_setAddOrder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("delete_order"))))
    {
        std::shared_ptr<Level3_DeleteOrderModel> refVal_setDeleteOrder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("delete_order"))), refVal_setDeleteOrder );
        setDeleteOrder(refVal_setDeleteOrder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("modify_order"))))
    {
        std::shared_ptr<Level3_ModifyOrderModel> refVal_setModifyOrder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("modify_order"))), refVal_setModifyOrder );
        setModifyOrder(refVal_setModifyOrder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("executed_order"))))
    {
        std::shared_ptr<Level3_ExecutedOrderModel> refVal_setExecutedOrder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("executed_order"))), refVal_setExecutedOrder );
        setExecutedOrder(refVal_setExecutedOrder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("clear_book"))))
    {
        std::shared_ptr<Level3_ClearBookModel> refVal_setClearBook;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("clear_book"))), refVal_setClearBook );
        setClearBook(refVal_setClearBook);
    }
    return ok;
}


std::shared_ptr<Level3_AddOrderModel> Level3_OrderBookModel::getAddOrder() const
{
    return m_Add_order;
}


void Level3_OrderBookModel::setAddOrder(const std::shared_ptr<Level3_AddOrderModel>& value)
{
    m_Add_order = value;
    m_Add_orderIsSet = true;
}

bool Level3_OrderBookModel::addOrderIsSet() const
{
    return m_Add_orderIsSet;
}

void Level3_OrderBookModel::unsetAdd_order()
{
    m_Add_orderIsSet = false;
}
std::shared_ptr<Level3_DeleteOrderModel> Level3_OrderBookModel::getDeleteOrder() const
{
    return m_Delete_order;
}


void Level3_OrderBookModel::setDeleteOrder(const std::shared_ptr<Level3_DeleteOrderModel>& value)
{
    m_Delete_order = value;
    m_Delete_orderIsSet = true;
}

bool Level3_OrderBookModel::deleteOrderIsSet() const
{
    return m_Delete_orderIsSet;
}

void Level3_OrderBookModel::unsetDelete_order()
{
    m_Delete_orderIsSet = false;
}
std::shared_ptr<Level3_ModifyOrderModel> Level3_OrderBookModel::getModifyOrder() const
{
    return m_Modify_order;
}


void Level3_OrderBookModel::setModifyOrder(const std::shared_ptr<Level3_ModifyOrderModel>& value)
{
    m_Modify_order = value;
    m_Modify_orderIsSet = true;
}

bool Level3_OrderBookModel::modifyOrderIsSet() const
{
    return m_Modify_orderIsSet;
}

void Level3_OrderBookModel::unsetModify_order()
{
    m_Modify_orderIsSet = false;
}
std::shared_ptr<Level3_ExecutedOrderModel> Level3_OrderBookModel::getExecutedOrder() const
{
    return m_Executed_order;
}


void Level3_OrderBookModel::setExecutedOrder(const std::shared_ptr<Level3_ExecutedOrderModel>& value)
{
    m_Executed_order = value;
    m_Executed_orderIsSet = true;
}

bool Level3_OrderBookModel::executedOrderIsSet() const
{
    return m_Executed_orderIsSet;
}

void Level3_OrderBookModel::unsetExecuted_order()
{
    m_Executed_orderIsSet = false;
}
std::shared_ptr<Level3_ClearBookModel> Level3_OrderBookModel::getClearBook() const
{
    return m_Clear_book;
}


void Level3_OrderBookModel::setClearBook(const std::shared_ptr<Level3_ClearBookModel>& value)
{
    m_Clear_book = value;
    m_Clear_bookIsSet = true;
}

bool Level3_OrderBookModel::clearBookIsSet() const
{
    return m_Clear_bookIsSet;
}

void Level3_OrderBookModel::unsetClear_book()
{
    m_Clear_bookIsSet = false;
}

}
}
}
}


