/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Level1_QuoteUpdateModel.h
 *
 * Represents the response DTO for quote update information
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Level1_QuoteUpdateModel_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Level1_QuoteUpdateModel_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents the response DTO for quote update information
/// </summary>
class  Level1_QuoteUpdateModel
    : public ModelBase
{
public:
    Level1_QuoteUpdateModel();
    virtual ~Level1_QuoteUpdateModel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Level1_QuoteUpdateModel members


    /// <summary>
    /// The stock symbol
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();
    void setSymbol(const utility::string_t& value);

    /// <summary>
    /// Original timestamp in nanoseconds since epoch
    /// </summary>
    int64_t getTimestampNanos() const;
    bool timestampNanosIsSet() const;
    void unsetTimestamp_nanos();
    void setTimestampNanos(int64_t value);

    /// <summary>
    /// Time when the quote update was recorded as DateTime
    /// </summary>
    utility::datetime getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();
    void setTimestamp(const utility::datetime& value);

    /// <summary>
    /// Gets whether the symbol is available for trading True if active, False if halted, paused, or otherwise not available
    /// </summary>
    bool isIsSymbolAvailable() const;
    bool isSymbolAvailableIsSet() const;
    void unsetIs_symbol_available();
    void setIsSymbolAvailable(bool value);

    /// <summary>
    /// Gets whether the market session is regular or pre/post-market True if pre/post-market session, False if regular market session
    /// </summary>
    bool isIsPrePostMarketSession() const;
    bool isPrePostMarketSessionIsSet() const;
    void unsetIs_pre_post_market_session();
    void setIsPrePostMarketSession(bool value);

    /// <summary>
    /// Ask size in number of shares
    /// </summary>
    int32_t getAskSize() const;
    bool askSizeIsSet() const;
    void unsetAsk_size();
    void setAskSize(int32_t value);

    /// <summary>
    /// Ask price as decimal
    /// </summary>
    double getAskPrice() const;
    bool askPriceIsSet() const;
    void unsetAsk_price();
    void setAskPrice(double value);

    /// <summary>
    /// Bid price as decimal
    /// </summary>
    double getBidPrice() const;
    bool bidPriceIsSet() const;
    void unsetBid_price();
    void setBidPrice(double value);

    /// <summary>
    /// Bid size in number of shares
    /// </summary>
    int32_t getBidSize() const;
    bool bidSizeIsSet() const;
    void unsetBid_size();
    void setBidSize(int32_t value);


protected:
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;

    int64_t m_Timestamp_nanos;
    bool m_Timestamp_nanosIsSet;

    utility::datetime m_Timestamp;
    bool m_TimestampIsSet;

    bool m_Is_symbol_available;
    bool m_Is_symbol_availableIsSet;

    bool m_Is_pre_post_market_session;
    bool m_Is_pre_post_market_sessionIsSet;

    int32_t m_Ask_size;
    bool m_Ask_sizeIsSet;

    double m_Ask_price;
    bool m_Ask_priceIsSet;

    double m_Bid_price;
    bool m_Bid_priceIsSet;

    int32_t m_Bid_size;
    bool m_Bid_sizeIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Level1_QuoteUpdateModel_H_ */
