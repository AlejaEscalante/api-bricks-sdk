/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Level2_PriceLevelUpdateModel.h
 *
 * Represents the response DTO for price level update information
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Level2_PriceLevelUpdateModel_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Level2_PriceLevelUpdateModel_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents the response DTO for price level update information
/// </summary>
class  Level2_PriceLevelUpdateModel
    : public ModelBase
{
public:
    Level2_PriceLevelUpdateModel();
    virtual ~Level2_PriceLevelUpdateModel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Level2_PriceLevelUpdateModel members


    /// <summary>
    /// The stock symbol
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();
    void setSymbol(const utility::string_t& value);

    /// <summary>
    /// Original timestamp in nanoseconds since epoch
    /// </summary>
    int64_t getTimestampNanos() const;
    bool timestampNanosIsSet() const;
    void unsetTimestamp_nanos();
    void setTimestampNanos(int64_t value);

    /// <summary>
    /// Time when the price level update was recorded as DateTime
    /// </summary>
    utility::datetime getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();
    void setTimestamp(const utility::datetime& value);

    /// <summary>
    /// Indicates if this is a price level update for the Buy Side.
    /// </summary>
    bool isIsSideBuy() const;
    bool isSideBuyIsSet() const;
    void unsetIs_side_buy();
    void setIsSideBuy(bool value);

    /// <summary>
    /// Indicates if event processing is complete.
    /// </summary>
    bool isIsEventProcessingComplete() const;
    bool isEventProcessingCompleteIsSet() const;
    void unsetIs_event_processing_complete();
    void setIsEventProcessingComplete(bool value);

    /// <summary>
    /// Aggregate quoted size at the price level
    /// </summary>
    int32_t getSize() const;
    bool sizeIsSet() const;
    void unsetSize();
    void setSize(int32_t value);

    /// <summary>
    /// Price level as decimal
    /// </summary>
    double getPrice() const;
    bool priceIsSet() const;
    void unsetPrice();
    void setPrice(double value);


protected:
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;

    int64_t m_Timestamp_nanos;
    bool m_Timestamp_nanosIsSet;

    utility::datetime m_Timestamp;
    bool m_TimestampIsSet;

    bool m_Is_side_buy;
    bool m_Is_side_buyIsSet;

    bool m_Is_event_processing_complete;
    bool m_Is_event_processing_completeIsSet;

    int32_t m_Size;
    bool m_SizeIsSet;

    double m_Price;
    bool m_PriceIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Level2_PriceLevelUpdateModel_H_ */
