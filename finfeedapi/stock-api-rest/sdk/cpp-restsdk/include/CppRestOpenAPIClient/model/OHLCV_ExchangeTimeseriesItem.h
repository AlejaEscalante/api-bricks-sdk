/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OHLCV_ExchangeTimeseriesItem.h
 *
 * Represents a timeseries item with price and volume information.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OHLCV_ExchangeTimeseriesItem_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OHLCV_ExchangeTimeseriesItem_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents a timeseries item with price and volume information.
/// </summary>
class  OHLCV_ExchangeTimeseriesItem
    : public ModelBase
{
public:
    OHLCV_ExchangeTimeseriesItem();
    virtual ~OHLCV_ExchangeTimeseriesItem();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// OHLCV_ExchangeTimeseriesItem members


    /// <summary>
    /// Gets or sets the start time of the time period.
    /// </summary>
    utility::datetime getTimePeriodStart() const;
    bool timePeriodStartIsSet() const;
    void unsetTime_period_start();
    void setTimePeriodStart(const utility::datetime& value);

    /// <summary>
    /// Gets or sets the end time of the time period.
    /// </summary>
    utility::datetime getTimePeriodEnd() const;
    bool timePeriodEndIsSet() const;
    void unsetTime_period_end();
    void setTimePeriodEnd(const utility::datetime& value);

    /// <summary>
    /// Gets or sets the time when the price opened.
    /// </summary>
    utility::datetime getTimeOpen() const;
    bool timeOpenIsSet() const;
    void unsetTime_open();
    void setTimeOpen(const utility::datetime& value);

    /// <summary>
    /// Gets or sets the time when the price closed.
    /// </summary>
    utility::datetime getTimeClose() const;
    bool timeCloseIsSet() const;
    void unsetTime_close();
    void setTimeClose(const utility::datetime& value);

    /// <summary>
    /// Gets or sets the opening price.
    /// </summary>
    double getPriceOpen() const;
    bool priceOpenIsSet() const;
    void unsetPrice_open();
    void setPriceOpen(double value);

    /// <summary>
    /// Gets or sets the highest price during the time period.
    /// </summary>
    double getPriceHigh() const;
    bool priceHighIsSet() const;
    void unsetPrice_high();
    void setPriceHigh(double value);

    /// <summary>
    /// Gets or sets the lowest price during the time period.
    /// </summary>
    double getPriceLow() const;
    bool priceLowIsSet() const;
    void unsetPrice_low();
    void setPriceLow(double value);

    /// <summary>
    /// Gets or sets the closing price.
    /// </summary>
    double getPriceClose() const;
    bool priceCloseIsSet() const;
    void unsetPrice_close();
    void setPriceClose(double value);

    /// <summary>
    /// Gets or sets the total volume traded during the time period.
    /// </summary>
    double getVolumeTraded() const;
    bool volumeTradedIsSet() const;
    void unsetVolume_traded();
    void setVolumeTraded(double value);

    /// <summary>
    /// Gets or sets the number of trades executed during the time period.
    /// </summary>
    int64_t getTradesCount() const;
    bool tradesCountIsSet() const;
    void unsetTrades_count();
    void setTradesCount(int64_t value);

    utility::string_t getSymbolIdExchange() const;
    bool symbolIdExchangeIsSet() const;
    void unsetSymbol_id_exchange();
    void setSymbolIdExchange(const utility::string_t& value);


protected:
    utility::datetime m_Time_period_start;
    bool m_Time_period_startIsSet;

    utility::datetime m_Time_period_end;
    bool m_Time_period_endIsSet;

    utility::datetime m_Time_open;
    bool m_Time_openIsSet;

    utility::datetime m_Time_close;
    bool m_Time_closeIsSet;

    double m_Price_open;
    bool m_Price_openIsSet;

    double m_Price_high;
    bool m_Price_highIsSet;

    double m_Price_low;
    bool m_Price_lowIsSet;

    double m_Price_close;
    bool m_Price_closeIsSet;

    double m_Volume_traded;
    bool m_Volume_tradedIsSet;

    int64_t m_Trades_count;
    bool m_Trades_countIsSet;

    utility::string_t m_Symbol_id_exchange;
    bool m_Symbol_id_exchangeIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OHLCV_ExchangeTimeseriesItem_H_ */
