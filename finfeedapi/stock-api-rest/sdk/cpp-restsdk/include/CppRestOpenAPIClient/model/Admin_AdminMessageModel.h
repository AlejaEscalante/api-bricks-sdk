/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Admin_AdminMessageModel.h
 *
 * Represents the response DTO for IEX admin information, combining all symbol-based admin message types
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_AdminMessageModel_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_AdminMessageModel_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Admin_SecurityDirectoryModel.h"
#include "CppRestOpenAPIClient/model/Admin_RetailLiquidityIndicatorModel.h"
#include "CppRestOpenAPIClient/model/Admin_ShortSalePriceTestStatusModel.h"
#include "CppRestOpenAPIClient/model/Admin_SystemEventModel.h"
#include "CppRestOpenAPIClient/model/Admin_TradingStatusModel.h"
#include "CppRestOpenAPIClient/model/Admin_AuctionInformationModel.h"
#include "CppRestOpenAPIClient/model/Admin_SecurityEventModel.h"
#include "CppRestOpenAPIClient/model/Admin_OperationalHaltStatusModel.h"
#include "CppRestOpenAPIClient/model/Admin_OfficialPriceModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Admin_TradingStatusModel;
class Admin_OfficialPriceModel;
class Admin_SecurityEventModel;
class Admin_AuctionInformationModel;
class Admin_ShortSalePriceTestStatusModel;
class Admin_OperationalHaltStatusModel;
class Admin_RetailLiquidityIndicatorModel;
class Admin_SystemEventModel;
class Admin_SecurityDirectoryModel;


/// <summary>
/// Represents the response DTO for IEX admin information, combining all symbol-based admin message types
/// </summary>
class  Admin_AdminMessageModel
    : public ModelBase
{
public:
    Admin_AdminMessageModel();
    virtual ~Admin_AdminMessageModel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Admin_AdminMessageModel members


    std::shared_ptr<Admin_TradingStatusModel> getTradingStatus() const;
    bool tradingStatusIsSet() const;
    void unsetTrading_status();
    void setTradingStatus(const std::shared_ptr<Admin_TradingStatusModel>& value);

    std::shared_ptr<Admin_OfficialPriceModel> getOfficialPrice() const;
    bool officialPriceIsSet() const;
    void unsetOfficial_price();
    void setOfficialPrice(const std::shared_ptr<Admin_OfficialPriceModel>& value);

    std::shared_ptr<Admin_SecurityEventModel> getSecurityEvent() const;
    bool securityEventIsSet() const;
    void unsetSecurity_event();
    void setSecurityEvent(const std::shared_ptr<Admin_SecurityEventModel>& value);

    std::shared_ptr<Admin_AuctionInformationModel> getAuctionInformation() const;
    bool auctionInformationIsSet() const;
    void unsetAuction_information();
    void setAuctionInformation(const std::shared_ptr<Admin_AuctionInformationModel>& value);

    std::shared_ptr<Admin_ShortSalePriceTestStatusModel> getShortSalePriceTest() const;
    bool shortSalePriceTestIsSet() const;
    void unsetShort_sale_price_test();
    void setShortSalePriceTest(const std::shared_ptr<Admin_ShortSalePriceTestStatusModel>& value);

    std::shared_ptr<Admin_OperationalHaltStatusModel> getOperationalHaltStatus() const;
    bool operationalHaltStatusIsSet() const;
    void unsetOperational_halt_status();
    void setOperationalHaltStatus(const std::shared_ptr<Admin_OperationalHaltStatusModel>& value);

    std::shared_ptr<Admin_RetailLiquidityIndicatorModel> getRetailLiquidityIndicator() const;
    bool retailLiquidityIndicatorIsSet() const;
    void unsetRetail_liquidity_indicator();
    void setRetailLiquidityIndicator(const std::shared_ptr<Admin_RetailLiquidityIndicatorModel>& value);

    std::shared_ptr<Admin_SystemEventModel> getSystemEvent() const;
    bool systemEventIsSet() const;
    void unsetSystem_event();
    void setSystemEvent(const std::shared_ptr<Admin_SystemEventModel>& value);

    std::shared_ptr<Admin_SecurityDirectoryModel> getSecurityDirectory() const;
    bool securityDirectoryIsSet() const;
    void unsetSecurity_directory();
    void setSecurityDirectory(const std::shared_ptr<Admin_SecurityDirectoryModel>& value);


protected:
    std::shared_ptr<Admin_TradingStatusModel> m_Trading_status;
    bool m_Trading_statusIsSet;

    std::shared_ptr<Admin_OfficialPriceModel> m_Official_price;
    bool m_Official_priceIsSet;

    std::shared_ptr<Admin_SecurityEventModel> m_Security_event;
    bool m_Security_eventIsSet;

    std::shared_ptr<Admin_AuctionInformationModel> m_Auction_information;
    bool m_Auction_informationIsSet;

    std::shared_ptr<Admin_ShortSalePriceTestStatusModel> m_Short_sale_price_test;
    bool m_Short_sale_price_testIsSet;

    std::shared_ptr<Admin_OperationalHaltStatusModel> m_Operational_halt_status;
    bool m_Operational_halt_statusIsSet;

    std::shared_ptr<Admin_RetailLiquidityIndicatorModel> m_Retail_liquidity_indicator;
    bool m_Retail_liquidity_indicatorIsSet;

    std::shared_ptr<Admin_SystemEventModel> m_System_event;
    bool m_System_eventIsSet;

    std::shared_ptr<Admin_SecurityDirectoryModel> m_Security_directory;
    bool m_Security_directoryIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_AdminMessageModel_H_ */
