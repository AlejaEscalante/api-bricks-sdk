/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Admin_AuctionInformationModel.h
 *
 * Represents the response DTO for auction information
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_AuctionInformationModel_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_AuctionInformationModel_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents the response DTO for auction information
/// </summary>
class  Admin_AuctionInformationModel
    : public ModelBase
{
public:
    Admin_AuctionInformationModel();
    virtual ~Admin_AuctionInformationModel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Admin_AuctionInformationModel members


    /// <summary>
    /// The stock symbol
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();
    void setSymbol(const utility::string_t& value);

    /// <summary>
    /// Original timestamp in nanoseconds since epoch
    /// </summary>
    int64_t getTimestampNanos() const;
    bool timestampNanosIsSet() const;
    void unsetTimestamp_nanos();
    void setTimestampNanos(int64_t value);

    /// <summary>
    /// Time when the auction data was recorded as DateTime
    /// </summary>
    utility::datetime getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();
    void setTimestamp(const utility::datetime& value);

    /// <summary>
    /// Type of auction as byte value
    /// </summary>
    int32_t getAuctionType() const;
    bool auctionTypeIsSet() const;
    void unsetAuction_type();
    void setAuctionType(int32_t value);

    /// <summary>
    /// Type of auction as character string
    /// </summary>
    utility::string_t getAuctionTypeCode() const;
    bool auctionTypeCodeIsSet() const;
    void unsetAuction_type_code();
    void setAuctionTypeCode(const utility::string_t& value);

    /// <summary>
    /// Human-readable description of the auction type
    /// </summary>
    utility::string_t getAuctionTypeText() const;
    bool auctionTypeTextIsSet() const;
    void unsetAuction_type_text();
    void setAuctionTypeText(const utility::string_t& value);

    /// <summary>
    /// Indicates if the auction type is &#39;Opening Auction&#39; (&#39;O&#39;/0x4f).
    /// </summary>
    bool isIsAuctionTypeOpening() const;
    bool isAuctionTypeOpeningIsSet() const;
    void unsetIs_auction_type_opening();
    void setIsAuctionTypeOpening(bool value);

    /// <summary>
    /// Indicates if the auction type is &#39;Closing Auction&#39; (&#39;C&#39;/0x43).
    /// </summary>
    bool isIsAuctionTypeClosing() const;
    bool isAuctionTypeClosingIsSet() const;
    void unsetIs_auction_type_closing();
    void setIsAuctionTypeClosing(bool value);

    /// <summary>
    /// Indicates if the auction type is &#39;IPO Auction&#39; (&#39;I&#39;/0x49).
    /// </summary>
    bool isIsAuctionTypeIpo() const;
    bool isAuctionTypeIpoIsSet() const;
    void unsetIs_auction_type_ipo();
    void setIsAuctionTypeIpo(bool value);

    /// <summary>
    /// Indicates if the auction type is &#39;Halt Auction&#39; (&#39;H&#39;/0x48).
    /// </summary>
    bool isIsAuctionTypeHalt() const;
    bool isAuctionTypeHaltIsSet() const;
    void unsetIs_auction_type_halt();
    void setIsAuctionTypeHalt(bool value);

    /// <summary>
    /// Indicates if the auction type is &#39;Volatility Auction&#39; (&#39;V&#39;/0x56).
    /// </summary>
    bool isIsAuctionTypeVolatility() const;
    bool isAuctionTypeVolatilityIsSet() const;
    void unsetIs_auction_type_volatility();
    void setIsAuctionTypeVolatility(bool value);

    /// <summary>
    /// Number of shares paired at the Reference Price
    /// </summary>
    int32_t getPairedShares() const;
    bool pairedSharesIsSet() const;
    void unsetPaired_shares();
    void setPairedShares(int32_t value);

    /// <summary>
    /// Reference price as decimal
    /// </summary>
    double getReferencePrice() const;
    bool referencePriceIsSet() const;
    void unsetReference_price();
    void setReferencePrice(double value);

    /// <summary>
    /// Indicative clearing price as decimal
    /// </summary>
    double getIndicativeClearingPrice() const;
    bool indicativeClearingPriceIsSet() const;
    void unsetIndicative_clearing_price();
    void setIndicativeClearingPrice(double value);

    /// <summary>
    /// Number of unpaired shares at the Reference Price
    /// </summary>
    int32_t getImbalanceShares() const;
    bool imbalanceSharesIsSet() const;
    void unsetImbalance_shares();
    void setImbalanceShares(int32_t value);

    /// <summary>
    /// Side of the imbalance as byte value
    /// </summary>
    int32_t getImbalanceSide() const;
    bool imbalanceSideIsSet() const;
    void unsetImbalance_side();
    void setImbalanceSide(int32_t value);

    /// <summary>
    /// Side of the imbalance as character string
    /// </summary>
    utility::string_t getImbalanceSideCode() const;
    bool imbalanceSideCodeIsSet() const;
    void unsetImbalance_side_code();
    void setImbalanceSideCode(const utility::string_t& value);

    /// <summary>
    /// Human-readable description of the imbalance side
    /// </summary>
    utility::string_t getImbalanceSideText() const;
    bool imbalanceSideTextIsSet() const;
    void unsetImbalance_side_text();
    void setImbalanceSideText(const utility::string_t& value);

    /// <summary>
    /// Indicates if there is a buy-side imbalance (&#39;B&#39;/0x42).
    /// </summary>
    bool isIsImbalanceSideBuy() const;
    bool isImbalanceSideBuyIsSet() const;
    void unsetIs_imbalance_side_buy();
    void setIsImbalanceSideBuy(bool value);

    /// <summary>
    /// Indicates if there is a sell-side imbalance (&#39;S&#39;/0x53).
    /// </summary>
    bool isIsImbalanceSideSell() const;
    bool isImbalanceSideSellIsSet() const;
    void unsetIs_imbalance_side_sell();
    void setIsImbalanceSideSell(bool value);

    /// <summary>
    /// Indicates if there is no imbalance (&#39;N&#39;/0x4e).
    /// </summary>
    bool isIsImbalanceSideNone() const;
    bool isImbalanceSideNoneIsSet() const;
    void unsetIs_imbalance_side_none();
    void setIsImbalanceSideNone(bool value);

    /// <summary>
    /// Number of extensions to the auction
    /// </summary>
    int32_t getExtensionNumber() const;
    bool extensionNumberIsSet() const;
    void unsetExtension_number();
    void setExtensionNumber(int32_t value);

    /// <summary>
    /// Scheduled auction time in seconds since epoch
    /// </summary>
    int32_t getScheduledAuctionTimeSeconds() const;
    bool scheduledAuctionTimeSecondsIsSet() const;
    void unsetScheduled_auction_time_seconds();
    void setScheduledAuctionTimeSeconds(int32_t value);

    /// <summary>
    /// Scheduled time for the auction as DateTime
    /// </summary>
    utility::datetime getScheduledAuctionTime() const;
    bool scheduledAuctionTimeIsSet() const;
    void unsetScheduled_auction_time();
    void setScheduledAuctionTime(const utility::datetime& value);

    /// <summary>
    /// Auction book clearing price as decimal
    /// </summary>
    double getAuctionBookClearingPrice() const;
    bool auctionBookClearingPriceIsSet() const;
    void unsetAuction_book_clearing_price();
    void setAuctionBookClearingPrice(double value);

    /// <summary>
    /// Collar reference price as decimal
    /// </summary>
    double getCollarReferencePrice() const;
    bool collarReferencePriceIsSet() const;
    void unsetCollar_reference_price();
    void setCollarReferencePrice(double value);

    /// <summary>
    /// Lower auction collar as decimal
    /// </summary>
    double getLowerAuctionCollar() const;
    bool lowerAuctionCollarIsSet() const;
    void unsetLower_auction_collar();
    void setLowerAuctionCollar(double value);

    /// <summary>
    /// Upper auction collar as decimal
    /// </summary>
    double getUpperAuctionCollar() const;
    bool upperAuctionCollarIsSet() const;
    void unsetUpper_auction_collar();
    void setUpperAuctionCollar(double value);


protected:
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;

    int64_t m_Timestamp_nanos;
    bool m_Timestamp_nanosIsSet;

    utility::datetime m_Timestamp;
    bool m_TimestampIsSet;

    int32_t m_Auction_type;
    bool m_Auction_typeIsSet;

    utility::string_t m_Auction_type_code;
    bool m_Auction_type_codeIsSet;

    utility::string_t m_Auction_type_text;
    bool m_Auction_type_textIsSet;

    bool m_Is_auction_type_opening;
    bool m_Is_auction_type_openingIsSet;

    bool m_Is_auction_type_closing;
    bool m_Is_auction_type_closingIsSet;

    bool m_Is_auction_type_ipo;
    bool m_Is_auction_type_ipoIsSet;

    bool m_Is_auction_type_halt;
    bool m_Is_auction_type_haltIsSet;

    bool m_Is_auction_type_volatility;
    bool m_Is_auction_type_volatilityIsSet;

    int32_t m_Paired_shares;
    bool m_Paired_sharesIsSet;

    double m_Reference_price;
    bool m_Reference_priceIsSet;

    double m_Indicative_clearing_price;
    bool m_Indicative_clearing_priceIsSet;

    int32_t m_Imbalance_shares;
    bool m_Imbalance_sharesIsSet;

    int32_t m_Imbalance_side;
    bool m_Imbalance_sideIsSet;

    utility::string_t m_Imbalance_side_code;
    bool m_Imbalance_side_codeIsSet;

    utility::string_t m_Imbalance_side_text;
    bool m_Imbalance_side_textIsSet;

    bool m_Is_imbalance_side_buy;
    bool m_Is_imbalance_side_buyIsSet;

    bool m_Is_imbalance_side_sell;
    bool m_Is_imbalance_side_sellIsSet;

    bool m_Is_imbalance_side_none;
    bool m_Is_imbalance_side_noneIsSet;

    int32_t m_Extension_number;
    bool m_Extension_numberIsSet;

    int32_t m_Scheduled_auction_time_seconds;
    bool m_Scheduled_auction_time_secondsIsSet;

    utility::datetime m_Scheduled_auction_time;
    bool m_Scheduled_auction_timeIsSet;

    double m_Auction_book_clearing_price;
    bool m_Auction_book_clearing_priceIsSet;

    double m_Collar_reference_price;
    bool m_Collar_reference_priceIsSet;

    double m_Lower_auction_collar;
    bool m_Lower_auction_collarIsSet;

    double m_Upper_auction_collar;
    bool m_Upper_auction_collarIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_AuctionInformationModel_H_ */
