/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Admin_RetailLiquidityIndicatorModel.h
 *
 * Represents the response DTO for retail liquidity indicator information
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_RetailLiquidityIndicatorModel_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_RetailLiquidityIndicatorModel_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents the response DTO for retail liquidity indicator information
/// </summary>
class  Admin_RetailLiquidityIndicatorModel
    : public ModelBase
{
public:
    Admin_RetailLiquidityIndicatorModel();
    virtual ~Admin_RetailLiquidityIndicatorModel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Admin_RetailLiquidityIndicatorModel members


    /// <summary>
    /// The stock symbol
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();
    void setSymbol(const utility::string_t& value);

    /// <summary>
    /// Original timestamp in nanoseconds since epoch
    /// </summary>
    int64_t getTimestampNanos() const;
    bool timestampNanosIsSet() const;
    void unsetTimestamp_nanos();
    void setTimestampNanos(int64_t value);

    /// <summary>
    /// Time when the retail liquidity indicator was recorded as DateTime
    /// </summary>
    utility::datetime getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();
    void setTimestamp(const utility::datetime& value);

    /// <summary>
    /// Retail liquidity indicator as byte value
    /// </summary>
    int32_t getRetailLiquidityIndicator() const;
    bool retailLiquidityIndicatorIsSet() const;
    void unsetRetail_liquidity_indicator();
    void setRetailLiquidityIndicator(int32_t value);

    /// <summary>
    /// Retail liquidity indicator as character string
    /// </summary>
    utility::string_t getRetailLiquidityIndicatorCode() const;
    bool retailLiquidityIndicatorCodeIsSet() const;
    void unsetRetail_liquidity_indicator_code();
    void setRetailLiquidityIndicatorCode(const utility::string_t& value);

    /// <summary>
    /// Human-readable description of the retail liquidity indicator
    /// </summary>
    utility::string_t getRetailLiquidityIndicatorText() const;
    bool retailLiquidityIndicatorTextIsSet() const;
    void unsetRetail_liquidity_indicator_text();
    void setRetailLiquidityIndicatorText(const utility::string_t& value);

    /// <summary>
    /// Indicates if the indicator is &#39;Not Applicable&#39; (&#39; &#39;/0x20).
    /// </summary>
    bool isIsRetailIndicatorNotApplicable() const;
    bool isRetailIndicatorNotApplicableIsSet() const;
    void unsetIs_retail_indicator_not_applicable();
    void setIsRetailIndicatorNotApplicable(bool value);

    /// <summary>
    /// Indicates if there is &#39;Buy interest for Retail&#39; (&#39;A&#39;/0x41).
    /// </summary>
    bool isIsRetailIndicatorBuyInterest() const;
    bool isRetailIndicatorBuyInterestIsSet() const;
    void unsetIs_retail_indicator_buy_interest();
    void setIsRetailIndicatorBuyInterest(bool value);

    /// <summary>
    /// Indicates if there is &#39;Sell interest for Retail&#39; (&#39;B&#39;/0x42).
    /// </summary>
    bool isIsRetailIndicatorSellInterest() const;
    bool isRetailIndicatorSellInterestIsSet() const;
    void unsetIs_retail_indicator_sell_interest();
    void setIsRetailIndicatorSellInterest(bool value);

    /// <summary>
    /// Indicates if there is &#39;Buy and sell interest for Retail&#39; (&#39;C&#39;/0x43).
    /// </summary>
    bool isIsRetailIndicatorBuyAndSellInterest() const;
    bool isRetailIndicatorBuyAndSellInterestIsSet() const;
    void unsetIs_retail_indicator_buy_and_sell_interest();
    void setIsRetailIndicatorBuyAndSellInterest(bool value);


protected:
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;

    int64_t m_Timestamp_nanos;
    bool m_Timestamp_nanosIsSet;

    utility::datetime m_Timestamp;
    bool m_TimestampIsSet;

    int32_t m_Retail_liquidity_indicator;
    bool m_Retail_liquidity_indicatorIsSet;

    utility::string_t m_Retail_liquidity_indicator_code;
    bool m_Retail_liquidity_indicator_codeIsSet;

    utility::string_t m_Retail_liquidity_indicator_text;
    bool m_Retail_liquidity_indicator_textIsSet;

    bool m_Is_retail_indicator_not_applicable;
    bool m_Is_retail_indicator_not_applicableIsSet;

    bool m_Is_retail_indicator_buy_interest;
    bool m_Is_retail_indicator_buy_interestIsSet;

    bool m_Is_retail_indicator_sell_interest;
    bool m_Is_retail_indicator_sell_interestIsSet;

    bool m_Is_retail_indicator_buy_and_sell_interest;
    bool m_Is_retail_indicator_buy_and_sell_interestIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_RetailLiquidityIndicatorModel_H_ */
