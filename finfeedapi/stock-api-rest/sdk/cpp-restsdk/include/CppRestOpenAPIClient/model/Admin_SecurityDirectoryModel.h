/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Admin_SecurityDirectoryModel.h
 *
 * Represents the response DTO for security directory information
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_SecurityDirectoryModel_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_SecurityDirectoryModel_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents the response DTO for security directory information
/// </summary>
class  Admin_SecurityDirectoryModel
    : public ModelBase
{
public:
    Admin_SecurityDirectoryModel();
    virtual ~Admin_SecurityDirectoryModel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Admin_SecurityDirectoryModel members


    /// <summary>
    /// The stock symbol
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();
    void setSymbol(const utility::string_t& value);

    /// <summary>
    /// Original timestamp in nanoseconds since epoch
    /// </summary>
    int64_t getTimestampNanos() const;
    bool timestampNanosIsSet() const;
    void unsetTimestamp_nanos();
    void setTimestampNanos(int64_t value);

    /// <summary>
    /// Time when the security directory information was recorded as DateTime
    /// </summary>
    utility::datetime getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();
    void setTimestamp(const utility::datetime& value);

    /// <summary>
    /// Flags for the security
    /// </summary>
    int32_t getFlags() const;
    bool flagsIsSet() const;
    void unsetFlags();
    void setFlags(int32_t value);

    /// <summary>
    /// Number of shares that represent a round lot
    /// </summary>
    int32_t getRoundLotSize() const;
    bool roundLotSizeIsSet() const;
    void unsetRound_lot_size();
    void setRoundLotSize(int32_t value);

    /// <summary>
    /// Adjusted previous official closing price as decimal
    /// </summary>
    double getAdjustedPocPrice() const;
    bool adjustedPocPriceIsSet() const;
    void unsetAdjusted_poc_price();
    void setAdjustedPocPrice(double value);

    /// <summary>
    /// LULD tier as byte value
    /// </summary>
    int32_t getLuldTier() const;
    bool luldTierIsSet() const;
    void unsetLuld_tier();
    void setLuldTier(int32_t value);

    /// <summary>
    /// LULD tier as numeric string
    /// </summary>
    utility::string_t getLuldTierCode() const;
    bool luldTierCodeIsSet() const;
    void unsetLuld_tier_code();
    void setLuldTierCode(const utility::string_t& value);

    /// <summary>
    /// Human-readable description of the LULD tier
    /// </summary>
    utility::string_t getLuldTierText() const;
    bool luldTierTextIsSet() const;
    void unsetLuld_tier_text();
    void setLuldTierText(const utility::string_t& value);

    /// <summary>
    /// Indicates if LULD Tier is &#39;Not applicable&#39; (0x0).
    /// </summary>
    bool isIsLuldTierNotApplicable() const;
    bool isLuldTierNotApplicableIsSet() const;
    void unsetIs_luld_tier_not_applicable();
    void setIsLuldTierNotApplicable(bool value);

    /// <summary>
    /// Indicates if LULD Tier is &#39;Tier 1 NMS Stock&#39; (0x1).
    /// </summary>
    bool isIsLuldTier1() const;
    bool isLuldTier1IsSet() const;
    void unsetIs_luld_tier1();
    void setIsLuldTier1(bool value);

    /// <summary>
    /// Indicates if LULD Tier is &#39;Tier 2 NMS Stock&#39; (0x2).
    /// </summary>
    bool isIsLuldTier2() const;
    bool isLuldTier2IsSet() const;
    void unsetIs_luld_tier2();
    void setIsLuldTier2(bool value);


protected:
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;

    int64_t m_Timestamp_nanos;
    bool m_Timestamp_nanosIsSet;

    utility::datetime m_Timestamp;
    bool m_TimestampIsSet;

    int32_t m_Flags;
    bool m_FlagsIsSet;

    int32_t m_Round_lot_size;
    bool m_Round_lot_sizeIsSet;

    double m_Adjusted_poc_price;
    bool m_Adjusted_poc_priceIsSet;

    int32_t m_Luld_tier;
    bool m_Luld_tierIsSet;

    utility::string_t m_Luld_tier_code;
    bool m_Luld_tier_codeIsSet;

    utility::string_t m_Luld_tier_text;
    bool m_Luld_tier_textIsSet;

    bool m_Is_luld_tier_not_applicable;
    bool m_Is_luld_tier_not_applicableIsSet;

    bool m_Is_luld_tier1;
    bool m_Is_luld_tier1IsSet;

    bool m_Is_luld_tier2;
    bool m_Is_luld_tier2IsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_SecurityDirectoryModel_H_ */
