/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FinFeedAPI_SymbolModel.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_FinFeedAPI_SymbolModel_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_FinFeedAPI_SymbolModel_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include "CppRestOpenAPIClient/AnyType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



class  FinFeedAPI_SymbolModel
    : public ModelBase
{
public:
    FinFeedAPI_SymbolModel();
    virtual ~FinFeedAPI_SymbolModel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// FinFeedAPI_SymbolModel members


    utility::string_t getSymbolId() const;
    bool symbolIdIsSet() const;
    void unsetSymbol_id();
    void setSymbolId(const utility::string_t& value);

    utility::string_t getExchangeId() const;
    bool exchangeIdIsSet() const;
    void unsetExchange_id();
    void setExchangeId(const utility::string_t& value);

    utility::string_t getSecurityCategory() const;
    bool securityCategoryIsSet() const;
    void unsetSecurity_category();
    void setSecurityCategory(const utility::string_t& value);

    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();
    void setName(const utility::string_t& value);

    utility::string_t getDate() const;
    bool dateIsSet() const;
    void unsetdate();
    void setDate(const utility::string_t& value);

    utility::string_t getAssetClass() const;
    bool assetClassIsSet() const;
    void unsetAsset_class();
    void setAssetClass(const utility::string_t& value);

    utility::string_t getCfiCode() const;
    bool cfiCodeIsSet() const;
    void unsetCfi_code();
    void setCfiCode(const utility::string_t& value);

    utility::string_t getCfiCategory() const;
    bool cfiCategoryIsSet() const;
    void unsetCfi_category();
    void setCfiCategory(const utility::string_t& value);

    utility::string_t getCfiGroup() const;
    bool cfiGroupIsSet() const;
    void unsetCfi_group();
    void setCfiGroup(const utility::string_t& value);

    utility::string_t getCfiAttribute1() const;
    bool cfiAttribute1IsSet() const;
    void unsetCfi_attribute1();
    void setCfiAttribute1(const utility::string_t& value);

    utility::string_t getCfiAttribute2() const;
    bool cfiAttribute2IsSet() const;
    void unsetCfi_attribute2();
    void setCfiAttribute2(const utility::string_t& value);

    utility::string_t getCfiAttribute3() const;
    bool cfiAttribute3IsSet() const;
    void unsetCfi_attribute3();
    void setCfiAttribute3(const utility::string_t& value);

    utility::string_t getCfiAttribute4() const;
    bool cfiAttribute4IsSet() const;
    void unsetCfi_attribute4();
    void setCfiAttribute4(const utility::string_t& value);

    utility::string_t getCfiCategoryDesc() const;
    bool cfiCategoryDescIsSet() const;
    void unsetCfi_category_desc();
    void setCfiCategoryDesc(const utility::string_t& value);

    utility::string_t getCfiGroupDesc() const;
    bool cfiGroupDescIsSet() const;
    void unsetCfi_group_desc();
    void setCfiGroupDesc(const utility::string_t& value);

    utility::string_t getCfiAttribute1Desc() const;
    bool cfiAttribute1DescIsSet() const;
    void unsetCfi_attribute1_desc();
    void setCfiAttribute1Desc(const utility::string_t& value);

    utility::string_t getCfiAttribute2Desc() const;
    bool cfiAttribute2DescIsSet() const;
    void unsetCfi_attribute2_desc();
    void setCfiAttribute2Desc(const utility::string_t& value);

    utility::string_t getCfiAttribute3Desc() const;
    bool cfiAttribute3DescIsSet() const;
    void unsetCfi_attribute3_desc();
    void setCfiAttribute3Desc(const utility::string_t& value);

    utility::string_t getCfiAttribute4Desc() const;
    bool cfiAttribute4DescIsSet() const;
    void unsetCfi_attribute4_desc();
    void setCfiAttribute4Desc(const utility::string_t& value);


protected:
    utility::string_t m_Symbol_id;
    bool m_Symbol_idIsSet;

    utility::string_t m_Exchange_id;
    bool m_Exchange_idIsSet;

    utility::string_t m_Security_category;
    bool m_Security_categoryIsSet;

    utility::string_t m_Name;
    bool m_NameIsSet;

    utility::string_t m_date;
    bool m_dateIsSet;

    utility::string_t m_Asset_class;
    bool m_Asset_classIsSet;

    utility::string_t m_Cfi_code;
    bool m_Cfi_codeIsSet;

    utility::string_t m_Cfi_category;
    bool m_Cfi_categoryIsSet;

    utility::string_t m_Cfi_group;
    bool m_Cfi_groupIsSet;

    utility::string_t m_Cfi_attribute1;
    bool m_Cfi_attribute1IsSet;

    utility::string_t m_Cfi_attribute2;
    bool m_Cfi_attribute2IsSet;

    utility::string_t m_Cfi_attribute3;
    bool m_Cfi_attribute3IsSet;

    utility::string_t m_Cfi_attribute4;
    bool m_Cfi_attribute4IsSet;

    utility::string_t m_Cfi_category_desc;
    bool m_Cfi_category_descIsSet;

    utility::string_t m_Cfi_group_desc;
    bool m_Cfi_group_descIsSet;

    utility::string_t m_Cfi_attribute1_desc;
    bool m_Cfi_attribute1_descIsSet;

    utility::string_t m_Cfi_attribute2_desc;
    bool m_Cfi_attribute2_descIsSet;

    utility::string_t m_Cfi_attribute3_desc;
    bool m_Cfi_attribute3_descIsSet;

    utility::string_t m_Cfi_attribute4_desc;
    bool m_Cfi_attribute4_descIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_FinFeedAPI_SymbolModel_H_ */
