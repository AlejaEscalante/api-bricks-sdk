/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Trade_TradeModel.h
 *
 * Represents the response DTO for a single trade event (report or break).
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Trade_TradeModel_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Trade_TradeModel_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents the response DTO for a single trade event (report or break).
/// </summary>
class  Trade_TradeModel
    : public ModelBase
{
public:
    Trade_TradeModel();
    virtual ~Trade_TradeModel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Trade_TradeModel members


    /// <summary>
    /// Indicates if this record represents a trade break (true) or a trade report (false).
    /// </summary>
    bool isIsTradeBreak() const;
    bool isTradeBreakIsSet() const;
    void unsetIs_trade_break();
    void setIsTradeBreak(bool value);

    /// <summary>
    /// The stock symbol.
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();
    void setSymbol(const utility::string_t& value);

    /// <summary>
    /// Original timestamp in nanoseconds since epoch.
    /// </summary>
    int64_t getTimestampNanos() const;
    bool timestampNanosIsSet() const;
    void unsetTimestamp_nanos();
    void setTimestampNanos(int64_t value);

    /// <summary>
    /// Time when the event was recorded as DateTime (UTC).
    /// </summary>
    utility::datetime getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();
    void setTimestamp(const utility::datetime& value);

    /// <summary>
    /// Trade volume (or break volume) in number of shares.
    /// </summary>
    int32_t getSize() const;
    bool sizeIsSet() const;
    void unsetSize();
    void setSize(int32_t value);

    /// <summary>
    /// Trade price (or break price) as decimal.
    /// </summary>
    double getPrice() const;
    bool priceIsSet() const;
    void unsetPrice();
    void setPrice(double value);

    /// <summary>
    /// IEX trade identifier (same for report and its corresponding break).
    /// </summary>
    int64_t getTradeId() const;
    bool tradeIdIsSet() const;
    void unsetTrade_id();
    void setTradeId(int64_t value);

    /// <summary>
    /// Bit 7 (Mask 0x80): Intermarket Sweep Flag. True: Intermarket Sweep Order (\&quot;ISO\&quot;). False: Non-Intermarket Sweep Order.
    /// </summary>
    bool isIsIntermarketSweep() const;
    bool isIntermarketSweepIsSet() const;
    void unsetIs_intermarket_sweep();
    void setIsIntermarketSweep(bool value);

    /// <summary>
    /// Bit 6 (Mask 0x40): Extended Hours Flag. True: Extended Hours Trade (i.e., Form T sale condition). False: Regular Market Session Trade.
    /// </summary>
    bool isIsExtendedHoursTrade() const;
    bool isExtendedHoursTradeIsSet() const;
    void unsetIs_extended_hours_trade();
    void setIsExtendedHoursTrade(bool value);

    /// <summary>
    /// Bit 5 (Mask 0x20): Odd Lot Flag. True: Odd Lot Trade. False: Round or Mixed Lot Trade.
    /// </summary>
    bool isIsOddLotTrade() const;
    bool isOddLotTradeIsSet() const;
    void unsetIs_odd_lot_trade();
    void setIsOddLotTrade(bool value);

    /// <summary>
    /// Bit 4 (Mask 0x10): Trade Through Exempt Flag. True: Trade is not subject to Rule 611 (Trade Through) of SEC Reg. NMS. False: Trade is subject to Rule 611 (Trade Through) of SEC Reg. NMS. Applied when the taking order was an ISO that traded through a protected quotation, OR the NBBO was crossed at the time of the trade, OR the trade occurred through a self-helped venue&#39;s quotation, OR the trade was a single-price cross.
    /// </summary>
    bool isIsTradeThroughExempt() const;
    bool isTradeThroughExemptIsSet() const;
    void unsetIs_trade_through_exempt();
    void setIsTradeThroughExempt(bool value);

    /// <summary>
    /// Bit 3 (Mask 0x08): Single-price Cross Trade Flag. True: Trade resulting from a single-price cross. False: Execution during continuous trading.
    /// </summary>
    bool isIsSinglePriceCrossTrade() const;
    bool isSinglePriceCrossTradeIsSet() const;
    void unsetIs_single_price_cross_trade();
    void setIsSinglePriceCrossTrade(bool value);


protected:
    bool m_Is_trade_break;
    bool m_Is_trade_breakIsSet;

    utility::string_t m_Symbol;
    bool m_SymbolIsSet;

    int64_t m_Timestamp_nanos;
    bool m_Timestamp_nanosIsSet;

    utility::datetime m_Timestamp;
    bool m_TimestampIsSet;

    int32_t m_Size;
    bool m_SizeIsSet;

    double m_Price;
    bool m_PriceIsSet;

    int64_t m_Trade_id;
    bool m_Trade_idIsSet;

    bool m_Is_intermarket_sweep;
    bool m_Is_intermarket_sweepIsSet;

    bool m_Is_extended_hours_trade;
    bool m_Is_extended_hours_tradeIsSet;

    bool m_Is_odd_lot_trade;
    bool m_Is_odd_lot_tradeIsSet;

    bool m_Is_trade_through_exempt;
    bool m_Is_trade_through_exemptIsSet;

    bool m_Is_single_price_cross_trade;
    bool m_Is_single_price_cross_tradeIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Trade_TradeModel_H_ */
