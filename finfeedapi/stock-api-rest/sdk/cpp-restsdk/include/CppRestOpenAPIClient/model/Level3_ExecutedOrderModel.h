/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Level3_ExecutedOrderModel.h
 *
 * Represents the response DTO for order executed information
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Level3_ExecutedOrderModel_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Level3_ExecutedOrderModel_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents the response DTO for order executed information
/// </summary>
class  Level3_ExecutedOrderModel
    : public ModelBase
{
public:
    Level3_ExecutedOrderModel();
    virtual ~Level3_ExecutedOrderModel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Level3_ExecutedOrderModel members


    /// <summary>
    /// The stock symbol
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();
    void setSymbol(const utility::string_t& value);

    /// <summary>
    /// Original timestamp in nanoseconds since epoch
    /// </summary>
    int64_t getTimestampNanos() const;
    bool timestampNanosIsSet() const;
    void unsetTimestamp_nanos();
    void setTimestampNanos(int64_t value);

    /// <summary>
    /// Time when the order was executed as DateTime
    /// </summary>
    utility::datetime getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();
    void setTimestamp(const utility::datetime& value);

    /// <summary>
    /// Order identifier reference
    /// </summary>
    int64_t getOrderIdReference() const;
    bool orderIdReferenceIsSet() const;
    void unsetOrder_id_reference();
    void setOrderIdReference(int64_t value);

    /// <summary>
    /// Sale condition flags for the execution as byte value
    /// </summary>
    int32_t getSaleConditionFlags() const;
    bool saleConditionFlagsIsSet() const;
    void unsetSale_condition_flags();
    void setSaleConditionFlags(int32_t value);

    /// <summary>
    /// Bit 7 (Mask 0x80): Intermarket Sweep Flag True: Intermarket Sweep Order (\&quot;ISO\&quot;) False: Non-Intermarket Sweep Order
    /// </summary>
    bool isIsIntermarketSweep() const;
    bool isIntermarketSweepIsSet() const;
    void unsetIs_intermarket_sweep();
    void setIsIntermarketSweep(bool value);

    /// <summary>
    /// Bit 6 (Mask 0x40): Extended Hours Flag True: Extended Hours Trade (i.e., Form T sale condition) False: Regular Market Session Trade
    /// </summary>
    bool isIsExtendedHoursTrade() const;
    bool isExtendedHoursTradeIsSet() const;
    void unsetIs_extended_hours_trade();
    void setIsExtendedHoursTrade(bool value);

    /// <summary>
    /// Bit 5 (Mask 0x20): Odd Lot Flag True: Odd Lot Trade False: Round or Mixed Lot Trade
    /// </summary>
    bool isIsOddLotTrade() const;
    bool isOddLotTradeIsSet() const;
    void unsetIs_odd_lot_trade();
    void setIsOddLotTrade(bool value);

    /// <summary>
    /// Bit 4 (Mask 0x10): Trade Through Exempt Flag True: Trade is not subject to Rule 611 (Trade Through) of SEC Reg. NMS False: Trade is subject to Rule 611 (Trade Through) of SEC Reg. NMS
    /// </summary>
    bool isIsTradeThroughExempt() const;
    bool isTradeThroughExemptIsSet() const;
    void unsetIs_trade_through_exempt();
    void setIsTradeThroughExempt(bool value);

    /// <summary>
    /// Bit 3 (Mask 0x08): Single-price Cross Trade Flag True: Trade resulting from a single-price cross False: Execution during continuous trading
    /// </summary>
    bool isIsSinglePriceCrossTrade() const;
    bool isSinglePriceCrossTradeIsSet() const;
    void unsetIs_single_price_cross_trade();
    void setIsSinglePriceCrossTrade(bool value);

    /// <summary>
    /// Trade volume in number of shares
    /// </summary>
    int32_t getSize() const;
    bool sizeIsSet() const;
    void unsetSize();
    void setSize(int32_t value);

    /// <summary>
    /// Execution price as decimal
    /// </summary>
    double getPrice() const;
    bool priceIsSet() const;
    void unsetPrice();
    void setPrice(double value);

    /// <summary>
    /// IEX trade identifier
    /// </summary>
    int64_t getTradeId() const;
    bool tradeIdIsSet() const;
    void unsetTrade_id();
    void setTradeId(int64_t value);


protected:
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;

    int64_t m_Timestamp_nanos;
    bool m_Timestamp_nanosIsSet;

    utility::datetime m_Timestamp;
    bool m_TimestampIsSet;

    int64_t m_Order_id_reference;
    bool m_Order_id_referenceIsSet;

    int32_t m_Sale_condition_flags;
    bool m_Sale_condition_flagsIsSet;

    bool m_Is_intermarket_sweep;
    bool m_Is_intermarket_sweepIsSet;

    bool m_Is_extended_hours_trade;
    bool m_Is_extended_hours_tradeIsSet;

    bool m_Is_odd_lot_trade;
    bool m_Is_odd_lot_tradeIsSet;

    bool m_Is_trade_through_exempt;
    bool m_Is_trade_through_exemptIsSet;

    bool m_Is_single_price_cross_trade;
    bool m_Is_single_price_cross_tradeIsSet;

    int32_t m_Size;
    bool m_SizeIsSet;

    double m_Price;
    bool m_PriceIsSet;

    int64_t m_Trade_id;
    bool m_Trade_idIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Level3_ExecutedOrderModel_H_ */
