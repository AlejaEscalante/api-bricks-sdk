/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Admin_OfficialPriceModel.h
 *
 * Represents the response DTO for official price information
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_OfficialPriceModel_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_OfficialPriceModel_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents the response DTO for official price information
/// </summary>
class  Admin_OfficialPriceModel
    : public ModelBase
{
public:
    Admin_OfficialPriceModel();
    virtual ~Admin_OfficialPriceModel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Admin_OfficialPriceModel members


    /// <summary>
    /// The stock symbol
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();
    void setSymbol(const utility::string_t& value);

    /// <summary>
    /// Original timestamp in nanoseconds since epoch
    /// </summary>
    int64_t getTimestampNanos() const;
    bool timestampNanosIsSet() const;
    void unsetTimestamp_nanos();
    void setTimestampNanos(int64_t value);

    /// <summary>
    /// Time when the official price was recorded as DateTime
    /// </summary>
    utility::datetime getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();
    void setTimestamp(const utility::datetime& value);

    /// <summary>
    /// Type of price as byte value
    /// </summary>
    int32_t getPriceType() const;
    bool priceTypeIsSet() const;
    void unsetPrice_type();
    void setPriceType(int32_t value);

    /// <summary>
    /// Type of price as character string
    /// </summary>
    utility::string_t getPriceTypeCode() const;
    bool priceTypeCodeIsSet() const;
    void unsetPrice_type_code();
    void setPriceTypeCode(const utility::string_t& value);

    /// <summary>
    /// Human-readable description of the price type
    /// </summary>
    utility::string_t getPriceTypeText() const;
    bool priceTypeTextIsSet() const;
    void unsetPrice_type_text();
    void setPriceTypeText(const utility::string_t& value);

    /// <summary>
    /// Indicates if the price type is &#39;IEX Official Opening Price&#39; (&#39;Q&#39;/0x51).
    /// </summary>
    bool isIsPriceTypeOpening() const;
    bool isPriceTypeOpeningIsSet() const;
    void unsetIs_price_type_opening();
    void setIsPriceTypeOpening(bool value);

    /// <summary>
    /// Indicates if the price type is &#39;IEX Official Closing Price&#39; (&#39;M&#39;/0x4d).
    /// </summary>
    bool isIsPriceTypeClosing() const;
    bool isPriceTypeClosingIsSet() const;
    void unsetIs_price_type_closing();
    void setIsPriceTypeClosing(bool value);

    /// <summary>
    /// Official price as decimal
    /// </summary>
    double getOfficialPrice() const;
    bool officialPriceIsSet() const;
    void unsetOfficial_price();
    void setOfficialPrice(double value);


protected:
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;

    int64_t m_Timestamp_nanos;
    bool m_Timestamp_nanosIsSet;

    utility::datetime m_Timestamp;
    bool m_TimestampIsSet;

    int32_t m_Price_type;
    bool m_Price_typeIsSet;

    utility::string_t m_Price_type_code;
    bool m_Price_type_codeIsSet;

    utility::string_t m_Price_type_text;
    bool m_Price_type_textIsSet;

    bool m_Is_price_type_opening;
    bool m_Is_price_type_openingIsSet;

    bool m_Is_price_type_closing;
    bool m_Is_price_type_closingIsSet;

    double m_Official_price;
    bool m_Official_priceIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_OfficialPriceModel_H_ */
