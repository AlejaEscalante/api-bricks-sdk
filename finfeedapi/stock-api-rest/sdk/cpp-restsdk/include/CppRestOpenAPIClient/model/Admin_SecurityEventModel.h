/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Admin_SecurityEventModel.h
 *
 * Represents the response DTO for security event information
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_SecurityEventModel_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_SecurityEventModel_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents the response DTO for security event information
/// </summary>
class  Admin_SecurityEventModel
    : public ModelBase
{
public:
    Admin_SecurityEventModel();
    virtual ~Admin_SecurityEventModel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Admin_SecurityEventModel members


    /// <summary>
    /// The stock symbol
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();
    void setSymbol(const utility::string_t& value);

    /// <summary>
    /// Original timestamp in nanoseconds since epoch
    /// </summary>
    int64_t getTimestampNanos() const;
    bool timestampNanosIsSet() const;
    void unsetTimestamp_nanos();
    void setTimestampNanos(int64_t value);

    /// <summary>
    /// Time when the security event was recorded as DateTime
    /// </summary>
    utility::datetime getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();
    void setTimestamp(const utility::datetime& value);

    /// <summary>
    /// Security event as byte value
    /// </summary>
    int32_t getSecurityEvent() const;
    bool securityEventIsSet() const;
    void unsetSecurity_event();
    void setSecurityEvent(int32_t value);

    /// <summary>
    /// Security event as character string (&#39;O&#39; or &#39;C&#39;)
    /// </summary>
    utility::string_t getSecurityEventCode() const;
    bool securityEventCodeIsSet() const;
    void unsetSecurity_event_code();
    void setSecurityEventCode(const utility::string_t& value);

    /// <summary>
    /// Human-readable description of the security event
    /// </summary>
    utility::string_t getSecurityEventText() const;
    bool securityEventTextIsSet() const;
    void unsetSecurity_event_text();
    void setSecurityEventText(const utility::string_t& value);

    /// <summary>
    /// Indicates if the security event is &#39;Opening Process Complete&#39; (&#39;O&#39;/0x4f).
    /// </summary>
    bool isIsOpeningProcessComplete() const;
    bool isOpeningProcessCompleteIsSet() const;
    void unsetIs_opening_process_complete();
    void setIsOpeningProcessComplete(bool value);

    /// <summary>
    /// Indicates if the security event is &#39;Closing Process Complete&#39; (&#39;C&#39;/0x43).
    /// </summary>
    bool isIsClosingProcessComplete() const;
    bool isClosingProcessCompleteIsSet() const;
    void unsetIs_closing_process_complete();
    void setIsClosingProcessComplete(bool value);


protected:
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;

    int64_t m_Timestamp_nanos;
    bool m_Timestamp_nanosIsSet;

    utility::datetime m_Timestamp;
    bool m_TimestampIsSet;

    int32_t m_Security_event;
    bool m_Security_eventIsSet;

    utility::string_t m_Security_event_code;
    bool m_Security_event_codeIsSet;

    utility::string_t m_Security_event_text;
    bool m_Security_event_textIsSet;

    bool m_Is_opening_process_complete;
    bool m_Is_opening_process_completeIsSet;

    bool m_Is_closing_process_complete;
    bool m_Is_closing_process_completeIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_SecurityEventModel_H_ */
