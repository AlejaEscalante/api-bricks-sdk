/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Admin_SystemEventModel.h
 *
 * Represents the response DTO for system event information
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_SystemEventModel_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_SystemEventModel_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents the response DTO for system event information
/// </summary>
class  Admin_SystemEventModel
    : public ModelBase
{
public:
    Admin_SystemEventModel();
    virtual ~Admin_SystemEventModel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Admin_SystemEventModel members


    /// <summary>
    /// Original timestamp in nanoseconds since epoch
    /// </summary>
    int64_t getTimestampNanos() const;
    bool timestampNanosIsSet() const;
    void unsetTimestamp_nanos();
    void setTimestampNanos(int64_t value);

    /// <summary>
    /// Time when the system event was recorded as DateTime
    /// </summary>
    utility::datetime getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();
    void setTimestamp(const utility::datetime& value);

    /// <summary>
    /// System event as byte value
    /// </summary>
    int32_t getSystemEvent() const;
    bool systemEventIsSet() const;
    void unsetSystem_event();
    void setSystemEvent(int32_t value);

    /// <summary>
    /// System event as string
    /// </summary>
    utility::string_t getSystemEventCode() const;
    bool systemEventCodeIsSet() const;
    void unsetSystem_event_code();
    void setSystemEventCode(const utility::string_t& value);

    /// <summary>
    /// Human-readable description of the system event
    /// </summary>
    utility::string_t getSystemEventText() const;
    bool systemEventTextIsSet() const;
    void unsetSystem_event_text();
    void setSystemEventText(const utility::string_t& value);

    /// <summary>
    /// Indicates if the system event is &#39;Start of Messages&#39; (O). Outside of heartbeat messages on the lower level protocol,  the start of day message is the first message sent in any trading session.
    /// </summary>
    bool isIsSystemEventStartOfMessages() const;
    bool isSystemEventStartOfMessagesIsSet() const;
    void unsetIs_system_event_start_of_messages();
    void setIsSystemEventStartOfMessages(bool value);

    /// <summary>
    /// Indicates if the system event is &#39;Start of System Hours&#39; (S). This message indicates that IEX is open and ready to start accepting orders.
    /// </summary>
    bool isIsSystemEventStartOfSystemHours() const;
    bool isSystemEventStartOfSystemHoursIsSet() const;
    void unsetIs_system_event_start_of_system_hours();
    void setIsSystemEventStartOfSystemHours(bool value);

    /// <summary>
    /// Indicates if the system event is &#39;Start of Regular Market Hours&#39; (R). This message indicates that DAY and GTX orders, as well as market orders and pegged orders,  are available for execution on IEX.
    /// </summary>
    bool isIsSystemEventStartOfRegularMarketHours() const;
    bool isSystemEventStartOfRegularMarketHoursIsSet() const;
    void unsetIs_system_event_start_of_regular_market_hours();
    void setIsSystemEventStartOfRegularMarketHours(bool value);

    /// <summary>
    /// Indicates if the system event is &#39;End of Regular Market Hours&#39; (M). This message indicates that DAY orders, market orders, and pegged orders  are no longer accepted by IEX.
    /// </summary>
    bool isIsSystemEventEndOfRegularMarketHours() const;
    bool isSystemEventEndOfRegularMarketHoursIsSet() const;
    void unsetIs_system_event_end_of_regular_market_hours();
    void setIsSystemEventEndOfRegularMarketHours(bool value);

    /// <summary>
    /// Indicates if the system event is &#39;End of System Hours&#39; (E). This message indicates that IEX is now closed and will not accept  any new orders during this trading session. It is still possible  to receive messages after the end of day.
    /// </summary>
    bool isIsSystemEventEndOfSystemHours() const;
    bool isSystemEventEndOfSystemHoursIsSet() const;
    void unsetIs_system_event_end_of_system_hours();
    void setIsSystemEventEndOfSystemHours(bool value);

    /// <summary>
    /// Indicates if the system event is &#39;End of Messages&#39; (C). This is always the last message sent in any trading session.
    /// </summary>
    bool isIsSystemEventEndOfMessages() const;
    bool isSystemEventEndOfMessagesIsSet() const;
    void unsetIs_system_event_end_of_messages();
    void setIsSystemEventEndOfMessages(bool value);


protected:
    int64_t m_Timestamp_nanos;
    bool m_Timestamp_nanosIsSet;

    utility::datetime m_Timestamp;
    bool m_TimestampIsSet;

    int32_t m_System_event;
    bool m_System_eventIsSet;

    utility::string_t m_System_event_code;
    bool m_System_event_codeIsSet;

    utility::string_t m_System_event_text;
    bool m_System_event_textIsSet;

    bool m_Is_system_event_start_of_messages;
    bool m_Is_system_event_start_of_messagesIsSet;

    bool m_Is_system_event_start_of_system_hours;
    bool m_Is_system_event_start_of_system_hoursIsSet;

    bool m_Is_system_event_start_of_regular_market_hours;
    bool m_Is_system_event_start_of_regular_market_hoursIsSet;

    bool m_Is_system_event_end_of_regular_market_hours;
    bool m_Is_system_event_end_of_regular_market_hoursIsSet;

    bool m_Is_system_event_end_of_system_hours;
    bool m_Is_system_event_end_of_system_hoursIsSet;

    bool m_Is_system_event_end_of_messages;
    bool m_Is_system_event_end_of_messagesIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_SystemEventModel_H_ */
