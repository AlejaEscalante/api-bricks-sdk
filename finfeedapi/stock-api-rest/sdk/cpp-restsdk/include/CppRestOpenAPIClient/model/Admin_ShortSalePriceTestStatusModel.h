/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Admin_ShortSalePriceTestStatusModel.h
 *
 * Represents the response DTO for short sale price test status information
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_ShortSalePriceTestStatusModel_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_ShortSalePriceTestStatusModel_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents the response DTO for short sale price test status information
/// </summary>
class  Admin_ShortSalePriceTestStatusModel
    : public ModelBase
{
public:
    Admin_ShortSalePriceTestStatusModel();
    virtual ~Admin_ShortSalePriceTestStatusModel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Admin_ShortSalePriceTestStatusModel members


    /// <summary>
    /// The stock symbol
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();
    void setSymbol(const utility::string_t& value);

    /// <summary>
    /// Original timestamp in nanoseconds since epoch
    /// </summary>
    int64_t getTimestampNanos() const;
    bool timestampNanosIsSet() const;
    void unsetTimestamp_nanos();
    void setTimestampNanos(int64_t value);

    /// <summary>
    /// Time when the short sale price test status was recorded as DateTime
    /// </summary>
    utility::datetime getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();
    void setTimestamp(const utility::datetime& value);

    /// <summary>
    /// Short sale price test status as byte value
    /// </summary>
    int32_t getShortSalePriceTestStatus() const;
    bool shortSalePriceTestStatusIsSet() const;
    void unsetShort_sale_price_test_status();
    void setShortSalePriceTestStatus(int32_t value);

    /// <summary>
    /// Short sale price test status as hex string
    /// </summary>
    utility::string_t getShortSalePriceTestStatusCode() const;
    bool shortSalePriceTestStatusCodeIsSet() const;
    void unsetShort_sale_price_test_status_code();
    void setShortSalePriceTestStatusCode(const utility::string_t& value);

    /// <summary>
    /// Human-readable description of the short sale price test status
    /// </summary>
    utility::string_t getShortSalePriceTestStatusText() const;
    bool shortSalePriceTestStatusTextIsSet() const;
    void unsetShort_sale_price_test_status_text();
    void setShortSalePriceTestStatusText(const utility::string_t& value);

    /// <summary>
    /// Indicates if the short sale price test is not in effect
    /// </summary>
    bool isIsShortSalePriceTestNotInEffect() const;
    bool isShortSalePriceTestNotInEffectIsSet() const;
    void unsetIs_short_sale_price_test_not_in_effect();
    void setIsShortSalePriceTestNotInEffect(bool value);

    /// <summary>
    /// Indicates if the short sale price test is in effect
    /// </summary>
    bool isIsShortSalePriceTestInEffect() const;
    bool isShortSalePriceTestInEffectIsSet() const;
    void unsetIs_short_sale_price_test_in_effect();
    void setIsShortSalePriceTestInEffect(bool value);

    /// <summary>
    /// Detail of the short sale price test as byte value
    /// </summary>
    int32_t getDetail() const;
    bool detailIsSet() const;
    void unsetDetail();
    void setDetail(int32_t value);

    /// <summary>
    /// Detail of the short sale price test as character string
    /// </summary>
    utility::string_t getDetailCode() const;
    bool detailCodeIsSet() const;
    void unsetDetail_code();
    void setDetailCode(const utility::string_t& value);

    /// <summary>
    /// Human-readable description of the short sale price test detail
    /// </summary>
    utility::string_t getDetailText() const;
    bool detailTextIsSet() const;
    void unsetDetail_text();
    void setDetailText(const utility::string_t& value);

    /// <summary>
    /// Indicates if there is no price test in place
    /// </summary>
    bool isIsDetailNoPriceTest() const;
    bool isDetailNoPriceTestIsSet() const;
    void unsetIs_detail_no_price_test();
    void setIsDetailNoPriceTest(bool value);

    /// <summary>
    /// Indicates if the short sale price test restriction is in effect due to an intraday price drop
    /// </summary>
    bool isIsDetailActivated() const;
    bool isDetailActivatedIsSet() const;
    void unsetIs_detail_activated();
    void setIsDetailActivated(bool value);

    /// <summary>
    /// Indicates if the short sale price test restriction remains in effect from prior day
    /// </summary>
    bool isIsDetailContinued() const;
    bool isDetailContinuedIsSet() const;
    void unsetIs_detail_continued();
    void setIsDetailContinued(bool value);

    /// <summary>
    /// Indicates if the short sale price test restriction is deactivated
    /// </summary>
    bool isIsDetailDeactivated() const;
    bool isDetailDeactivatedIsSet() const;
    void unsetIs_detail_deactivated();
    void setIsDetailDeactivated(bool value);

    /// <summary>
    /// Indicates if the detail is not available
    /// </summary>
    bool isIsDetailNotAvailable() const;
    bool isDetailNotAvailableIsSet() const;
    void unsetIs_detail_not_available();
    void setIsDetailNotAvailable(bool value);


protected:
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;

    int64_t m_Timestamp_nanos;
    bool m_Timestamp_nanosIsSet;

    utility::datetime m_Timestamp;
    bool m_TimestampIsSet;

    int32_t m_Short_sale_price_test_status;
    bool m_Short_sale_price_test_statusIsSet;

    utility::string_t m_Short_sale_price_test_status_code;
    bool m_Short_sale_price_test_status_codeIsSet;

    utility::string_t m_Short_sale_price_test_status_text;
    bool m_Short_sale_price_test_status_textIsSet;

    bool m_Is_short_sale_price_test_not_in_effect;
    bool m_Is_short_sale_price_test_not_in_effectIsSet;

    bool m_Is_short_sale_price_test_in_effect;
    bool m_Is_short_sale_price_test_in_effectIsSet;

    int32_t m_Detail;
    bool m_DetailIsSet;

    utility::string_t m_Detail_code;
    bool m_Detail_codeIsSet;

    utility::string_t m_Detail_text;
    bool m_Detail_textIsSet;

    bool m_Is_detail_no_price_test;
    bool m_Is_detail_no_price_testIsSet;

    bool m_Is_detail_activated;
    bool m_Is_detail_activatedIsSet;

    bool m_Is_detail_continued;
    bool m_Is_detail_continuedIsSet;

    bool m_Is_detail_deactivated;
    bool m_Is_detail_deactivatedIsSet;

    bool m_Is_detail_not_available;
    bool m_Is_detail_not_availableIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_ShortSalePriceTestStatusModel_H_ */
