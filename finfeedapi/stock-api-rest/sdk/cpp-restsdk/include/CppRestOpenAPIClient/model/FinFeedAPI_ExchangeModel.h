/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FinFeedAPI_ExchangeModel.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_FinFeedAPI_ExchangeModel_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_FinFeedAPI_ExchangeModel_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include "CppRestOpenAPIClient/AnyType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



class  FinFeedAPI_ExchangeModel
    : public ModelBase
{
public:
    FinFeedAPI_ExchangeModel();
    virtual ~FinFeedAPI_ExchangeModel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// FinFeedAPI_ExchangeModel members


    utility::string_t getExchangeId() const;
    bool exchangeIdIsSet() const;
    void unsetExchange_id();
    void setExchangeId(const utility::string_t& value);

    utility::string_t getLastDatapointDate() const;
    bool lastDatapointDateIsSet() const;
    void unsetLast_datapoint_date();
    void setLastDatapointDate(const utility::string_t& value);

    utility::string_t getMic() const;
    bool micIsSet() const;
    void unsetMic();
    void setMic(const utility::string_t& value);

    utility::string_t getOperatingMic() const;
    bool operatingMicIsSet() const;
    void unsetOperating_mic();
    void setOperatingMic(const utility::string_t& value);

    utility::string_t getOprtSgmt() const;
    bool oprtSgmtIsSet() const;
    void unsetOprt_sgmt();
    void setOprtSgmt(const utility::string_t& value);

    utility::string_t getMarketNameInstitutionDescription() const;
    bool marketNameInstitutionDescriptionIsSet() const;
    void unsetMarket_name_institution_description();
    void setMarketNameInstitutionDescription(const utility::string_t& value);

    utility::string_t getLegalEntityName() const;
    bool legalEntityNameIsSet() const;
    void unsetLegal_entity_name();
    void setLegalEntityName(const utility::string_t& value);

    utility::string_t getLei() const;
    bool leiIsSet() const;
    void unsetLei();
    void setLei(const utility::string_t& value);

    utility::string_t getMarketCategoryCode() const;
    bool marketCategoryCodeIsSet() const;
    void unsetMarket_category_code();
    void setMarketCategoryCode(const utility::string_t& value);

    utility::string_t getAcronym() const;
    bool acronymIsSet() const;
    void unsetAcronym();
    void setAcronym(const utility::string_t& value);

    utility::string_t getIsoCountryCode() const;
    bool isoCountryCodeIsSet() const;
    void unsetIso_country_code();
    void setIsoCountryCode(const utility::string_t& value);

    utility::string_t getCity() const;
    bool cityIsSet() const;
    void unsetCity();
    void setCity(const utility::string_t& value);

    utility::string_t getWebsite() const;
    bool websiteIsSet() const;
    void unsetWebsite();
    void setWebsite(const utility::string_t& value);

    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();
    void setStatus(const utility::string_t& value);

    utility::datetime getCreationDate() const;
    bool creationDateIsSet() const;
    void unsetCreation_date();
    void setCreationDate(const utility::datetime& value);

    utility::datetime getLastUpdateDate() const;
    bool lastUpdateDateIsSet() const;
    void unsetLast_update_date();
    void setLastUpdateDate(const utility::datetime& value);

    utility::datetime getLastValidationDate() const;
    bool lastValidationDateIsSet() const;
    void unsetLast_validation_date();
    void setLastValidationDate(const utility::datetime& value);

    utility::datetime getExpiryDate() const;
    bool expiryDateIsSet() const;
    void unsetExpiry_date();
    void setExpiryDate(const utility::datetime& value);

    utility::string_t getComments() const;
    bool commentsIsSet() const;
    void unsetComments();
    void setComments(const utility::string_t& value);


protected:
    utility::string_t m_Exchange_id;
    bool m_Exchange_idIsSet;

    utility::string_t m_Last_datapoint_date;
    bool m_Last_datapoint_dateIsSet;

    utility::string_t m_Mic;
    bool m_MicIsSet;

    utility::string_t m_Operating_mic;
    bool m_Operating_micIsSet;

    utility::string_t m_Oprt_sgmt;
    bool m_Oprt_sgmtIsSet;

    utility::string_t m_Market_name_institution_description;
    bool m_Market_name_institution_descriptionIsSet;

    utility::string_t m_Legal_entity_name;
    bool m_Legal_entity_nameIsSet;

    utility::string_t m_Lei;
    bool m_LeiIsSet;

    utility::string_t m_Market_category_code;
    bool m_Market_category_codeIsSet;

    utility::string_t m_Acronym;
    bool m_AcronymIsSet;

    utility::string_t m_Iso_country_code;
    bool m_Iso_country_codeIsSet;

    utility::string_t m_City;
    bool m_CityIsSet;

    utility::string_t m_Website;
    bool m_WebsiteIsSet;

    utility::string_t m_Status;
    bool m_StatusIsSet;

    utility::datetime m_Creation_date;
    bool m_Creation_dateIsSet;

    utility::datetime m_Last_update_date;
    bool m_Last_update_dateIsSet;

    utility::datetime m_Last_validation_date;
    bool m_Last_validation_dateIsSet;

    utility::datetime m_Expiry_date;
    bool m_Expiry_dateIsSet;

    utility::string_t m_Comments;
    bool m_CommentsIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_FinFeedAPI_ExchangeModel_H_ */
