/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Admin_TradingStatusModel.h
 *
 * Represents the response DTO for trading status information
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_TradingStatusModel_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_TradingStatusModel_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents the response DTO for trading status information
/// </summary>
class  Admin_TradingStatusModel
    : public ModelBase
{
public:
    Admin_TradingStatusModel();
    virtual ~Admin_TradingStatusModel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Admin_TradingStatusModel members


    /// <summary>
    /// The stock symbol
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();
    void setSymbol(const utility::string_t& value);

    /// <summary>
    /// Original timestamp in nanoseconds since epoch
    /// </summary>
    int64_t getTimestampNanos() const;
    bool timestampNanosIsSet() const;
    void unsetTimestamp_nanos();
    void setTimestampNanos(int64_t value);

    /// <summary>
    /// Time when the trading status was recorded as DateTime
    /// </summary>
    utility::datetime getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();
    void setTimestamp(const utility::datetime& value);

    /// <summary>
    /// Gets whether the security is currently trading on IEX
    /// </summary>
    bool isIsTradingLive() const;
    bool isTradingLiveIsSet() const;
    void unsetIs_trading_live();
    void setIsTradingLive(bool value);

    /// <summary>
    /// Gets whether the security is halted across all US equity markets
    /// </summary>
    bool isIsTradingHalted() const;
    bool isTradingHaltedIsSet() const;
    void unsetIs_trading_halted();
    void setIsTradingHalted(bool value);

    /// <summary>
    /// Gets whether the security is in Order Acceptance Period on IEX
    /// </summary>
    bool isIsTradingInOrderAcceptancePeriod() const;
    bool isTradingInOrderAcceptancePeriodIsSet() const;
    void unsetIs_trading_in_order_acceptance_period();
    void setIsTradingInOrderAcceptancePeriod(bool value);

    /// <summary>
    /// Gets whether the security is paused and in Order Acceptance Period on IEX
    /// </summary>
    bool isIsTradingPaused() const;
    bool isTradingPausedIsSet() const;
    void unsetIs_trading_paused();
    void setIsTradingPaused(bool value);

    /// <summary>
    /// Gets whether the halt reason is News Pending
    /// </summary>
    bool isIsReasonHaltNewsPending() const;
    bool isReasonHaltNewsPendingIsSet() const;
    void unsetIs_reason_halt_news_pending();
    void setIsReasonHaltNewsPending(bool value);

    /// <summary>
    /// Gets whether the halt reason is IPO Not Yet Trading
    /// </summary>
    bool isIsReasonIpoNotYetTrading() const;
    bool isReasonIpoNotYetTradingIsSet() const;
    void unsetIs_reason_ipo_not_yet_trading();
    void setIsReasonIpoNotYetTrading(bool value);

    /// <summary>
    /// Gets whether the halt reason is IPO Deferred
    /// </summary>
    bool isIsReasonIpoDeferred() const;
    bool isReasonIpoDeferredIsSet() const;
    void unsetIs_reason_ipo_deferred();
    void setIsReasonIpoDeferred(bool value);

    /// <summary>
    /// Gets whether the order acceptance period reason is Halt News Dissemination
    /// </summary>
    bool isIsReasonHaltNewsDissemination() const;
    bool isReasonHaltNewsDisseminationIsSet() const;
    void unsetIs_reason_halt_news_dissemination();
    void setIsReasonHaltNewsDissemination(bool value);

    /// <summary>
    /// Gets whether the order acceptance period reason is IPO Order Acceptance Period
    /// </summary>
    bool isIsReasonIpoOrderAcceptancePeriod() const;
    bool isReasonIpoOrderAcceptancePeriodIsSet() const;
    void unsetIs_reason_ipo_order_acceptance_period();
    void setIsReasonIpoOrderAcceptancePeriod(bool value);

    /// <summary>
    /// Gets whether the order acceptance period reason is IPO Pre-Launch Period
    /// </summary>
    bool isIsReasonIpoPreLaunchPeriod() const;
    bool isReasonIpoPreLaunchPeriodIsSet() const;
    void unsetIs_reason_ipo_pre_launch_period();
    void setIsReasonIpoPreLaunchPeriod(bool value);

    /// <summary>
    /// Gets whether the order acceptance period reason is Market-Wide Circuit Breaker Level 1 – Breached
    /// </summary>
    bool isIsReasonMarketWideCircuitBreakerLevel1() const;
    bool isReasonMarketWideCircuitBreakerLevel1IsSet() const;
    void unsetIs_reason_market_wide_circuit_breaker_level1();
    void setIsReasonMarketWideCircuitBreakerLevel1(bool value);

    /// <summary>
    /// Gets whether the order acceptance period reason is Market-Wide Circuit Breaker Level 2 – Breached
    /// </summary>
    bool isIsReasonMarketWideCircuitBreakerLevel2() const;
    bool isReasonMarketWideCircuitBreakerLevel2IsSet() const;
    void unsetIs_reason_market_wide_circuit_breaker_level2();
    void setIsReasonMarketWideCircuitBreakerLevel2(bool value);

    /// <summary>
    /// Gets whether the halt reason is Market-Wide Circuit Breaker Level 3 – Breached
    /// </summary>
    bool isIsReasonMarketWideCircuitBreakerLevel3() const;
    bool isReasonMarketWideCircuitBreakerLevel3IsSet() const;
    void unsetIs_reason_market_wide_circuit_breaker_level3();
    void setIsReasonMarketWideCircuitBreakerLevel3(bool value);

    /// <summary>
    /// Gets whether the reason is Not Applicable
    /// </summary>
    bool isIsReasonNotApplicable() const;
    bool isReasonNotApplicableIsSet() const;
    void unsetIs_reason_not_applicable();
    void setIsReasonNotApplicable(bool value);

    /// <summary>
    /// Gets whether the halt reason is Not Available
    /// </summary>
    bool isIsReasonNotAvailable() const;
    bool isReasonNotAvailableIsSet() const;
    void unsetIs_reason_not_available();
    void setIsReasonNotAvailable(bool value);


protected:
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;

    int64_t m_Timestamp_nanos;
    bool m_Timestamp_nanosIsSet;

    utility::datetime m_Timestamp;
    bool m_TimestampIsSet;

    bool m_Is_trading_live;
    bool m_Is_trading_liveIsSet;

    bool m_Is_trading_halted;
    bool m_Is_trading_haltedIsSet;

    bool m_Is_trading_in_order_acceptance_period;
    bool m_Is_trading_in_order_acceptance_periodIsSet;

    bool m_Is_trading_paused;
    bool m_Is_trading_pausedIsSet;

    bool m_Is_reason_halt_news_pending;
    bool m_Is_reason_halt_news_pendingIsSet;

    bool m_Is_reason_ipo_not_yet_trading;
    bool m_Is_reason_ipo_not_yet_tradingIsSet;

    bool m_Is_reason_ipo_deferred;
    bool m_Is_reason_ipo_deferredIsSet;

    bool m_Is_reason_halt_news_dissemination;
    bool m_Is_reason_halt_news_disseminationIsSet;

    bool m_Is_reason_ipo_order_acceptance_period;
    bool m_Is_reason_ipo_order_acceptance_periodIsSet;

    bool m_Is_reason_ipo_pre_launch_period;
    bool m_Is_reason_ipo_pre_launch_periodIsSet;

    bool m_Is_reason_market_wide_circuit_breaker_level1;
    bool m_Is_reason_market_wide_circuit_breaker_level1IsSet;

    bool m_Is_reason_market_wide_circuit_breaker_level2;
    bool m_Is_reason_market_wide_circuit_breaker_level2IsSet;

    bool m_Is_reason_market_wide_circuit_breaker_level3;
    bool m_Is_reason_market_wide_circuit_breaker_level3IsSet;

    bool m_Is_reason_not_applicable;
    bool m_Is_reason_not_applicableIsSet;

    bool m_Is_reason_not_available;
    bool m_Is_reason_not_availableIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_TradingStatusModel_H_ */
