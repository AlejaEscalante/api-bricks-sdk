/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Admin_OperationalHaltStatusModel.h
 *
 * Represents the response DTO for operational halt status information
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_OperationalHaltStatusModel_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_OperationalHaltStatusModel_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents the response DTO for operational halt status information
/// </summary>
class  Admin_OperationalHaltStatusModel
    : public ModelBase
{
public:
    Admin_OperationalHaltStatusModel();
    virtual ~Admin_OperationalHaltStatusModel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Admin_OperationalHaltStatusModel members


    /// <summary>
    /// The stock symbol
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();
    void setSymbol(const utility::string_t& value);

    /// <summary>
    /// Original timestamp in nanoseconds since epoch
    /// </summary>
    int64_t getTimestampNanos() const;
    bool timestampNanosIsSet() const;
    void unsetTimestamp_nanos();
    void setTimestampNanos(int64_t value);

    /// <summary>
    /// Time when the operational halt status was recorded as DateTime
    /// </summary>
    utility::datetime getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();
    void setTimestamp(const utility::datetime& value);

    /// <summary>
    /// Operational halt status as byte value
    /// </summary>
    int32_t getOperationalHaltStatus() const;
    bool operationalHaltStatusIsSet() const;
    void unsetOperational_halt_status();
    void setOperationalHaltStatus(int32_t value);

    /// <summary>
    /// Operational halt status as character string
    /// </summary>
    utility::string_t getOperationalHaltStatusCode() const;
    bool operationalHaltStatusCodeIsSet() const;
    void unsetOperational_halt_status_code();
    void setOperationalHaltStatusCode(const utility::string_t& value);

    /// <summary>
    /// Human-readable description of the operational halt status
    /// </summary>
    utility::string_t getOperationalHaltStatusText() const;
    bool operationalHaltStatusTextIsSet() const;
    void unsetOperational_halt_status_text();
    void setOperationalHaltStatusText(const utility::string_t& value);

    /// <summary>
    /// Indicates if the status is &#39;IEX specific operational trading halt&#39; (&#39;O&#39;/0x4f).
    /// </summary>
    bool isIsOperationallyHalted() const;
    bool isOperationallyHaltedIsSet() const;
    void unsetIs_operationally_halted();
    void setIsOperationallyHalted(bool value);

    /// <summary>
    /// Indicates if the status is &#39;Not operationally halted on IEX&#39; (&#39;N&#39;/0x4e).
    /// </summary>
    bool isIsNotOperationallyHalted() const;
    bool isNotOperationallyHaltedIsSet() const;
    void unsetIs_not_operationally_halted();
    void setIsNotOperationallyHalted(bool value);


protected:
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;

    int64_t m_Timestamp_nanos;
    bool m_Timestamp_nanosIsSet;

    utility::datetime m_Timestamp;
    bool m_TimestampIsSet;

    int32_t m_Operational_halt_status;
    bool m_Operational_halt_statusIsSet;

    utility::string_t m_Operational_halt_status_code;
    bool m_Operational_halt_status_codeIsSet;

    utility::string_t m_Operational_halt_status_text;
    bool m_Operational_halt_status_textIsSet;

    bool m_Is_operationally_halted;
    bool m_Is_operationally_haltedIsSet;

    bool m_Is_not_operationally_halted;
    bool m_Is_not_operationally_haltedIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Admin_OperationalHaltStatusModel_H_ */
