/**
 * FinFeedAPI Stock REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * NativeIEXApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_NativeIEXApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_NativeIEXApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/Admin_AdminMessageModel.h"
#include "CppRestOpenAPIClient/model/Admin_SystemEventModel.h"
#include "CppRestOpenAPIClient/model/Level1_QuoteUpdateModel.h"
#include "CppRestOpenAPIClient/model/Level2_PriceLevelUpdateModel.h"
#include "CppRestOpenAPIClient/model/Level3_OrderBookModel.h"
#include "CppRestOpenAPIClient/model/Trade_TradeModel.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  NativeIEXApi 
{
public:

    explicit NativeIEXApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~NativeIEXApi();

    /// <summary>
    /// Get Admin Messages
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">The symbol identifier</param>
    /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
    pplx::task<std::vector<std::shared_ptr<Admin_AdminMessageModel>>> v1NativeIexAdminMessagesSymbolGet(
        utility::string_t symbol,
        utility::datetime date
    ) const;
    /// <summary>
    /// Get System Events
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="date">Date in format YYYY-MM-DD</param>
    pplx::task<std::vector<std::shared_ptr<Admin_SystemEventModel>>> v1NativeIexAdminSystemEventGet(
        utility::datetime date
    ) const;
    /// <summary>
    /// Get Level-1 Quotes
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">The symbol identifier</param>
    /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
    pplx::task<std::vector<std::shared_ptr<Level1_QuoteUpdateModel>>> v1NativeIexLevel1QuoteSymbolGet(
        utility::string_t symbol,
        utility::datetime date
    ) const;
    /// <summary>
    /// Get Level-2 Price Level Book
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">The symbol identifier</param>
    /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
    pplx::task<std::vector<std::shared_ptr<Level2_PriceLevelUpdateModel>>> v1NativeIexLevel2PriceLevelUpdateSymbolGet(
        utility::string_t symbol,
        utility::datetime date
    ) const;
    /// <summary>
    /// Get Level-3 Order Book
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">The symbol identifier</param>
    /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
    pplx::task<std::vector<std::shared_ptr<Level3_OrderBookModel>>> v1NativeIexLevel3OrderBookSymbolGet(
        utility::string_t symbol,
        utility::datetime date
    ) const;
    /// <summary>
    /// Get Trades
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">The symbol identifier</param>
    /// <param name="date">Optional date in format YYYY-MM-DD (defaults to latest available data)</param>
    pplx::task<std::vector<std::shared_ptr<Trade_TradeModel>>> v1NativeIexTradeSymbolGet(
        utility::string_t symbol,
        utility::datetime date
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_NativeIEXApi_H_ */

