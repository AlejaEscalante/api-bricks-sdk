=begin
#FinFeedAPI Stock REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Contact: support@apibricks.io
Generated by: https://openapi-generator.tech
Generator version: 7.15.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Represents the response DTO for trading status information
  class AdminTradingStatusModel
    # The stock symbol
    attr_accessor :symbol

    # Original timestamp in nanoseconds since epoch
    attr_accessor :timestamp_nanos

    # Time when the trading status was recorded as DateTime
    attr_accessor :timestamp

    # Gets whether the security is currently trading on IEX
    attr_accessor :is_trading_live

    # Gets whether the security is halted across all US equity markets
    attr_accessor :is_trading_halted

    # Gets whether the security is in Order Acceptance Period on IEX
    attr_accessor :is_trading_in_order_acceptance_period

    # Gets whether the security is paused and in Order Acceptance Period on IEX
    attr_accessor :is_trading_paused

    # Gets whether the halt reason is News Pending
    attr_accessor :is_reason_halt_news_pending

    # Gets whether the halt reason is IPO Not Yet Trading
    attr_accessor :is_reason_ipo_not_yet_trading

    # Gets whether the halt reason is IPO Deferred
    attr_accessor :is_reason_ipo_deferred

    # Gets whether the order acceptance period reason is Halt News Dissemination
    attr_accessor :is_reason_halt_news_dissemination

    # Gets whether the order acceptance period reason is IPO Order Acceptance Period
    attr_accessor :is_reason_ipo_order_acceptance_period

    # Gets whether the order acceptance period reason is IPO Pre-Launch Period
    attr_accessor :is_reason_ipo_pre_launch_period

    # Gets whether the order acceptance period reason is Market-Wide Circuit Breaker Level 1 – Breached
    attr_accessor :is_reason_market_wide_circuit_breaker_level1

    # Gets whether the order acceptance period reason is Market-Wide Circuit Breaker Level 2 – Breached
    attr_accessor :is_reason_market_wide_circuit_breaker_level2

    # Gets whether the halt reason is Market-Wide Circuit Breaker Level 3 – Breached
    attr_accessor :is_reason_market_wide_circuit_breaker_level3

    # Gets whether the reason is Not Applicable
    attr_accessor :is_reason_not_applicable

    # Gets whether the halt reason is Not Available
    attr_accessor :is_reason_not_available

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'symbol' => :'symbol',
        :'timestamp_nanos' => :'timestamp_nanos',
        :'timestamp' => :'timestamp',
        :'is_trading_live' => :'is_trading_live',
        :'is_trading_halted' => :'is_trading_halted',
        :'is_trading_in_order_acceptance_period' => :'is_trading_in_order_acceptance_period',
        :'is_trading_paused' => :'is_trading_paused',
        :'is_reason_halt_news_pending' => :'is_reason_halt_news_pending',
        :'is_reason_ipo_not_yet_trading' => :'is_reason_ipo_not_yet_trading',
        :'is_reason_ipo_deferred' => :'is_reason_ipo_deferred',
        :'is_reason_halt_news_dissemination' => :'is_reason_halt_news_dissemination',
        :'is_reason_ipo_order_acceptance_period' => :'is_reason_ipo_order_acceptance_period',
        :'is_reason_ipo_pre_launch_period' => :'is_reason_ipo_pre_launch_period',
        :'is_reason_market_wide_circuit_breaker_level1' => :'is_reason_market_wide_circuit_breaker_level1',
        :'is_reason_market_wide_circuit_breaker_level2' => :'is_reason_market_wide_circuit_breaker_level2',
        :'is_reason_market_wide_circuit_breaker_level3' => :'is_reason_market_wide_circuit_breaker_level3',
        :'is_reason_not_applicable' => :'is_reason_not_applicable',
        :'is_reason_not_available' => :'is_reason_not_available'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'symbol' => :'String',
        :'timestamp_nanos' => :'Integer',
        :'timestamp' => :'Time',
        :'is_trading_live' => :'Boolean',
        :'is_trading_halted' => :'Boolean',
        :'is_trading_in_order_acceptance_period' => :'Boolean',
        :'is_trading_paused' => :'Boolean',
        :'is_reason_halt_news_pending' => :'Boolean',
        :'is_reason_ipo_not_yet_trading' => :'Boolean',
        :'is_reason_ipo_deferred' => :'Boolean',
        :'is_reason_halt_news_dissemination' => :'Boolean',
        :'is_reason_ipo_order_acceptance_period' => :'Boolean',
        :'is_reason_ipo_pre_launch_period' => :'Boolean',
        :'is_reason_market_wide_circuit_breaker_level1' => :'Boolean',
        :'is_reason_market_wide_circuit_breaker_level2' => :'Boolean',
        :'is_reason_market_wide_circuit_breaker_level3' => :'Boolean',
        :'is_reason_not_applicable' => :'Boolean',
        :'is_reason_not_available' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'symbol',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::AdminTradingStatusModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::AdminTradingStatusModel`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'symbol')
        self.symbol = attributes[:'symbol']
      end

      if attributes.key?(:'timestamp_nanos')
        self.timestamp_nanos = attributes[:'timestamp_nanos']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'is_trading_live')
        self.is_trading_live = attributes[:'is_trading_live']
      end

      if attributes.key?(:'is_trading_halted')
        self.is_trading_halted = attributes[:'is_trading_halted']
      end

      if attributes.key?(:'is_trading_in_order_acceptance_period')
        self.is_trading_in_order_acceptance_period = attributes[:'is_trading_in_order_acceptance_period']
      end

      if attributes.key?(:'is_trading_paused')
        self.is_trading_paused = attributes[:'is_trading_paused']
      end

      if attributes.key?(:'is_reason_halt_news_pending')
        self.is_reason_halt_news_pending = attributes[:'is_reason_halt_news_pending']
      end

      if attributes.key?(:'is_reason_ipo_not_yet_trading')
        self.is_reason_ipo_not_yet_trading = attributes[:'is_reason_ipo_not_yet_trading']
      end

      if attributes.key?(:'is_reason_ipo_deferred')
        self.is_reason_ipo_deferred = attributes[:'is_reason_ipo_deferred']
      end

      if attributes.key?(:'is_reason_halt_news_dissemination')
        self.is_reason_halt_news_dissemination = attributes[:'is_reason_halt_news_dissemination']
      end

      if attributes.key?(:'is_reason_ipo_order_acceptance_period')
        self.is_reason_ipo_order_acceptance_period = attributes[:'is_reason_ipo_order_acceptance_period']
      end

      if attributes.key?(:'is_reason_ipo_pre_launch_period')
        self.is_reason_ipo_pre_launch_period = attributes[:'is_reason_ipo_pre_launch_period']
      end

      if attributes.key?(:'is_reason_market_wide_circuit_breaker_level1')
        self.is_reason_market_wide_circuit_breaker_level1 = attributes[:'is_reason_market_wide_circuit_breaker_level1']
      end

      if attributes.key?(:'is_reason_market_wide_circuit_breaker_level2')
        self.is_reason_market_wide_circuit_breaker_level2 = attributes[:'is_reason_market_wide_circuit_breaker_level2']
      end

      if attributes.key?(:'is_reason_market_wide_circuit_breaker_level3')
        self.is_reason_market_wide_circuit_breaker_level3 = attributes[:'is_reason_market_wide_circuit_breaker_level3']
      end

      if attributes.key?(:'is_reason_not_applicable')
        self.is_reason_not_applicable = attributes[:'is_reason_not_applicable']
      end

      if attributes.key?(:'is_reason_not_available')
        self.is_reason_not_available = attributes[:'is_reason_not_available']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          symbol == o.symbol &&
          timestamp_nanos == o.timestamp_nanos &&
          timestamp == o.timestamp &&
          is_trading_live == o.is_trading_live &&
          is_trading_halted == o.is_trading_halted &&
          is_trading_in_order_acceptance_period == o.is_trading_in_order_acceptance_period &&
          is_trading_paused == o.is_trading_paused &&
          is_reason_halt_news_pending == o.is_reason_halt_news_pending &&
          is_reason_ipo_not_yet_trading == o.is_reason_ipo_not_yet_trading &&
          is_reason_ipo_deferred == o.is_reason_ipo_deferred &&
          is_reason_halt_news_dissemination == o.is_reason_halt_news_dissemination &&
          is_reason_ipo_order_acceptance_period == o.is_reason_ipo_order_acceptance_period &&
          is_reason_ipo_pre_launch_period == o.is_reason_ipo_pre_launch_period &&
          is_reason_market_wide_circuit_breaker_level1 == o.is_reason_market_wide_circuit_breaker_level1 &&
          is_reason_market_wide_circuit_breaker_level2 == o.is_reason_market_wide_circuit_breaker_level2 &&
          is_reason_market_wide_circuit_breaker_level3 == o.is_reason_market_wide_circuit_breaker_level3 &&
          is_reason_not_applicable == o.is_reason_not_applicable &&
          is_reason_not_available == o.is_reason_not_available
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [symbol, timestamp_nanos, timestamp, is_trading_live, is_trading_halted, is_trading_in_order_acceptance_period, is_trading_paused, is_reason_halt_news_pending, is_reason_ipo_not_yet_trading, is_reason_ipo_deferred, is_reason_halt_news_dissemination, is_reason_ipo_order_acceptance_period, is_reason_ipo_pre_launch_period, is_reason_market_wide_circuit_breaker_level1, is_reason_market_wide_circuit_breaker_level2, is_reason_market_wide_circuit_breaker_level3, is_reason_not_applicable, is_reason_not_available].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
