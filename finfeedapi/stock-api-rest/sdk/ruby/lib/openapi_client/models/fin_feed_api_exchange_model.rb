=begin
#REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Contact: support@apibricks.io
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module OpenapiClient
  class FinFeedAPIExchangeModel
    attr_accessor :exchange_id

    attr_accessor :last_datapoint_date

    attr_accessor :mic

    attr_accessor :operating_mic

    attr_accessor :oprt_sgmt

    attr_accessor :market_name_institution_description

    attr_accessor :legal_entity_name

    attr_accessor :lei

    attr_accessor :market_category_code

    attr_accessor :acronym

    attr_accessor :iso_country_code

    attr_accessor :city

    attr_accessor :website

    attr_accessor :status

    attr_accessor :creation_date

    attr_accessor :last_update_date

    attr_accessor :last_validation_date

    attr_accessor :expiry_date

    attr_accessor :comments

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'exchange_id' => :'exchange_id',
        :'last_datapoint_date' => :'last_datapoint_date',
        :'mic' => :'mic',
        :'operating_mic' => :'operating_mic',
        :'oprt_sgmt' => :'oprt_sgmt',
        :'market_name_institution_description' => :'market_name_institution_description',
        :'legal_entity_name' => :'legal_entity_name',
        :'lei' => :'lei',
        :'market_category_code' => :'market_category_code',
        :'acronym' => :'acronym',
        :'iso_country_code' => :'iso_country_code',
        :'city' => :'city',
        :'website' => :'website',
        :'status' => :'status',
        :'creation_date' => :'creation_date',
        :'last_update_date' => :'last_update_date',
        :'last_validation_date' => :'last_validation_date',
        :'expiry_date' => :'expiry_date',
        :'comments' => :'comments'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'exchange_id' => :'String',
        :'last_datapoint_date' => :'String',
        :'mic' => :'String',
        :'operating_mic' => :'String',
        :'oprt_sgmt' => :'String',
        :'market_name_institution_description' => :'String',
        :'legal_entity_name' => :'String',
        :'lei' => :'String',
        :'market_category_code' => :'String',
        :'acronym' => :'String',
        :'iso_country_code' => :'String',
        :'city' => :'String',
        :'website' => :'String',
        :'status' => :'String',
        :'creation_date' => :'Time',
        :'last_update_date' => :'Time',
        :'last_validation_date' => :'Time',
        :'expiry_date' => :'Time',
        :'comments' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'exchange_id',
        :'last_datapoint_date',
        :'mic',
        :'operating_mic',
        :'oprt_sgmt',
        :'market_name_institution_description',
        :'legal_entity_name',
        :'lei',
        :'market_category_code',
        :'acronym',
        :'iso_country_code',
        :'city',
        :'website',
        :'status',
        :'creation_date',
        :'last_update_date',
        :'last_validation_date',
        :'expiry_date',
        :'comments'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::FinFeedAPIExchangeModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::FinFeedAPIExchangeModel`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'exchange_id')
        self.exchange_id = attributes[:'exchange_id']
      end

      if attributes.key?(:'last_datapoint_date')
        self.last_datapoint_date = attributes[:'last_datapoint_date']
      end

      if attributes.key?(:'mic')
        self.mic = attributes[:'mic']
      end

      if attributes.key?(:'operating_mic')
        self.operating_mic = attributes[:'operating_mic']
      end

      if attributes.key?(:'oprt_sgmt')
        self.oprt_sgmt = attributes[:'oprt_sgmt']
      end

      if attributes.key?(:'market_name_institution_description')
        self.market_name_institution_description = attributes[:'market_name_institution_description']
      end

      if attributes.key?(:'legal_entity_name')
        self.legal_entity_name = attributes[:'legal_entity_name']
      end

      if attributes.key?(:'lei')
        self.lei = attributes[:'lei']
      end

      if attributes.key?(:'market_category_code')
        self.market_category_code = attributes[:'market_category_code']
      end

      if attributes.key?(:'acronym')
        self.acronym = attributes[:'acronym']
      end

      if attributes.key?(:'iso_country_code')
        self.iso_country_code = attributes[:'iso_country_code']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'website')
        self.website = attributes[:'website']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'creation_date')
        self.creation_date = attributes[:'creation_date']
      end

      if attributes.key?(:'last_update_date')
        self.last_update_date = attributes[:'last_update_date']
      end

      if attributes.key?(:'last_validation_date')
        self.last_validation_date = attributes[:'last_validation_date']
      end

      if attributes.key?(:'expiry_date')
        self.expiry_date = attributes[:'expiry_date']
      end

      if attributes.key?(:'comments')
        self.comments = attributes[:'comments']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          exchange_id == o.exchange_id &&
          last_datapoint_date == o.last_datapoint_date &&
          mic == o.mic &&
          operating_mic == o.operating_mic &&
          oprt_sgmt == o.oprt_sgmt &&
          market_name_institution_description == o.market_name_institution_description &&
          legal_entity_name == o.legal_entity_name &&
          lei == o.lei &&
          market_category_code == o.market_category_code &&
          acronym == o.acronym &&
          iso_country_code == o.iso_country_code &&
          city == o.city &&
          website == o.website &&
          status == o.status &&
          creation_date == o.creation_date &&
          last_update_date == o.last_update_date &&
          last_validation_date == o.last_validation_date &&
          expiry_date == o.expiry_date &&
          comments == o.comments
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [exchange_id, last_datapoint_date, mic, operating_mic, oprt_sgmt, market_name_institution_description, legal_entity_name, lei, market_category_code, acronym, iso_country_code, city, website, status, creation_date, last_update_date, last_validation_date, expiry_date, comments].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
