=begin
#FinFeedAPI Stock REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Contact: support@apibricks.io
Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Represents the response DTO for security directory information
  class AdminSecurityDirectoryModel
    # The stock symbol
    attr_accessor :symbol

    # Original timestamp in nanoseconds since epoch
    attr_accessor :timestamp_nanos

    # Time when the security directory information was recorded as DateTime
    attr_accessor :timestamp

    # Flags for the security
    attr_accessor :flags

    # Number of shares that represent a round lot
    attr_accessor :round_lot_size

    # Adjusted previous official closing price as decimal
    attr_accessor :adjusted_poc_price

    # LULD tier as byte value
    attr_accessor :luld_tier

    # LULD tier as numeric string
    attr_accessor :luld_tier_code

    # Human-readable description of the LULD tier
    attr_accessor :luld_tier_text

    # Indicates if LULD Tier is 'Not applicable' (0x0).
    attr_accessor :is_luld_tier_not_applicable

    # Indicates if LULD Tier is 'Tier 1 NMS Stock' (0x1).
    attr_accessor :is_luld_tier1

    # Indicates if LULD Tier is 'Tier 2 NMS Stock' (0x2).
    attr_accessor :is_luld_tier2

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'symbol' => :'symbol',
        :'timestamp_nanos' => :'timestamp_nanos',
        :'timestamp' => :'timestamp',
        :'flags' => :'flags',
        :'round_lot_size' => :'round_lot_size',
        :'adjusted_poc_price' => :'adjusted_poc_price',
        :'luld_tier' => :'luld_tier',
        :'luld_tier_code' => :'luld_tier_code',
        :'luld_tier_text' => :'luld_tier_text',
        :'is_luld_tier_not_applicable' => :'is_luld_tier_not_applicable',
        :'is_luld_tier1' => :'is_luld_tier1',
        :'is_luld_tier2' => :'is_luld_tier2'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'symbol' => :'String',
        :'timestamp_nanos' => :'Integer',
        :'timestamp' => :'Time',
        :'flags' => :'Integer',
        :'round_lot_size' => :'Integer',
        :'adjusted_poc_price' => :'Float',
        :'luld_tier' => :'Integer',
        :'luld_tier_code' => :'String',
        :'luld_tier_text' => :'String',
        :'is_luld_tier_not_applicable' => :'Boolean',
        :'is_luld_tier1' => :'Boolean',
        :'is_luld_tier2' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'symbol',
        :'luld_tier_code',
        :'luld_tier_text',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::AdminSecurityDirectoryModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::AdminSecurityDirectoryModel`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'symbol')
        self.symbol = attributes[:'symbol']
      end

      if attributes.key?(:'timestamp_nanos')
        self.timestamp_nanos = attributes[:'timestamp_nanos']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'flags')
        self.flags = attributes[:'flags']
      end

      if attributes.key?(:'round_lot_size')
        self.round_lot_size = attributes[:'round_lot_size']
      end

      if attributes.key?(:'adjusted_poc_price')
        self.adjusted_poc_price = attributes[:'adjusted_poc_price']
      end

      if attributes.key?(:'luld_tier')
        self.luld_tier = attributes[:'luld_tier']
      end

      if attributes.key?(:'luld_tier_code')
        self.luld_tier_code = attributes[:'luld_tier_code']
      end

      if attributes.key?(:'luld_tier_text')
        self.luld_tier_text = attributes[:'luld_tier_text']
      end

      if attributes.key?(:'is_luld_tier_not_applicable')
        self.is_luld_tier_not_applicable = attributes[:'is_luld_tier_not_applicable']
      end

      if attributes.key?(:'is_luld_tier1')
        self.is_luld_tier1 = attributes[:'is_luld_tier1']
      end

      if attributes.key?(:'is_luld_tier2')
        self.is_luld_tier2 = attributes[:'is_luld_tier2']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          symbol == o.symbol &&
          timestamp_nanos == o.timestamp_nanos &&
          timestamp == o.timestamp &&
          flags == o.flags &&
          round_lot_size == o.round_lot_size &&
          adjusted_poc_price == o.adjusted_poc_price &&
          luld_tier == o.luld_tier &&
          luld_tier_code == o.luld_tier_code &&
          luld_tier_text == o.luld_tier_text &&
          is_luld_tier_not_applicable == o.is_luld_tier_not_applicable &&
          is_luld_tier1 == o.is_luld_tier1 &&
          is_luld_tier2 == o.is_luld_tier2
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [symbol, timestamp_nanos, timestamp, flags, round_lot_size, adjusted_poc_price, luld_tier, luld_tier_code, luld_tier_text, is_luld_tier_not_applicable, is_luld_tier1, is_luld_tier2].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
