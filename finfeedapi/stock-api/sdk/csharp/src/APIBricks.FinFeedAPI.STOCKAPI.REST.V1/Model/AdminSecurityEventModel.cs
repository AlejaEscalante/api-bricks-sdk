// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.ClientUtils;
using APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client;

namespace APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Model
{
    /// <summary>
    /// Represents the response DTO for security event information
    /// </summary>
    public partial class AdminSecurityEventModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminSecurityEventModel" /> class.
        /// </summary>
        /// <param name="symbol">The stock symbol</param>
        /// <param name="timestampNanos">Original timestamp in nanoseconds since epoch</param>
        /// <param name="timestamp">Time when the security event was recorded as DateTime</param>
        /// <param name="securityEvent">Security event as byte value</param>
        /// <param name="securityEventCode">Security event as character string (&#39;O&#39; or &#39;C&#39;)</param>
        /// <param name="securityEventText">Human-readable description of the security event</param>
        /// <param name="isOpeningProcessComplete">Indicates if the security event is &#39;Opening Process Complete&#39; (&#39;O&#39;/0x4f).</param>
        /// <param name="isClosingProcessComplete">Indicates if the security event is &#39;Closing Process Complete&#39; (&#39;C&#39;/0x43).</param>
        [JsonConstructor]
        public AdminSecurityEventModel(Option<string?> symbol = default, Option<long?> timestampNanos = default, Option<DateTime?> timestamp = default, Option<int?> securityEvent = default, Option<string?> securityEventCode = default, Option<string?> securityEventText = default, Option<bool?> isOpeningProcessComplete = default, Option<bool?> isClosingProcessComplete = default)
        {
            SymbolOption = symbol;
            TimestampNanosOption = timestampNanos;
            TimestampOption = timestamp;
            SecurityEventOption = securityEvent;
            SecurityEventCodeOption = securityEventCode;
            SecurityEventTextOption = securityEventText;
            IsOpeningProcessCompleteOption = isOpeningProcessComplete;
            IsClosingProcessCompleteOption = isClosingProcessComplete;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Symbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SymbolOption { get; private set; }

        /// <summary>
        /// The stock symbol
        /// </summary>
        /// <value>The stock symbol</value>
        [JsonPropertyName("symbol")]
        public string? Symbol { get { return this.SymbolOption; } set { this.SymbolOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimestampNanos
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TimestampNanosOption { get; private set; }

        /// <summary>
        /// Original timestamp in nanoseconds since epoch
        /// </summary>
        /// <value>Original timestamp in nanoseconds since epoch</value>
        [JsonPropertyName("timestamp_nanos")]
        public long? TimestampNanos { get { return this.TimestampNanosOption; } set { this.TimestampNanosOption = new(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimestampOption { get; private set; }

        /// <summary>
        /// Time when the security event was recorded as DateTime
        /// </summary>
        /// <value>Time when the security event was recorded as DateTime</value>
        [JsonPropertyName("timestamp")]
        public DateTime? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new(value); } }

        /// <summary>
        /// Used to track the state of SecurityEvent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SecurityEventOption { get; private set; }

        /// <summary>
        /// Security event as byte value
        /// </summary>
        /// <value>Security event as byte value</value>
        [JsonPropertyName("security_event")]
        public int? SecurityEvent { get { return this.SecurityEventOption; } set { this.SecurityEventOption = new(value); } }

        /// <summary>
        /// Used to track the state of SecurityEventCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SecurityEventCodeOption { get; private set; }

        /// <summary>
        /// Security event as character string (&#39;O&#39; or &#39;C&#39;)
        /// </summary>
        /// <value>Security event as character string (&#39;O&#39; or &#39;C&#39;)</value>
        [JsonPropertyName("security_event_code")]
        public string? SecurityEventCode { get { return this.SecurityEventCodeOption; } set { this.SecurityEventCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of SecurityEventText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SecurityEventTextOption { get; private set; }

        /// <summary>
        /// Human-readable description of the security event
        /// </summary>
        /// <value>Human-readable description of the security event</value>
        [JsonPropertyName("security_event_text")]
        public string? SecurityEventText { get { return this.SecurityEventTextOption; } set { this.SecurityEventTextOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsOpeningProcessComplete
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsOpeningProcessCompleteOption { get; private set; }

        /// <summary>
        /// Indicates if the security event is &#39;Opening Process Complete&#39; (&#39;O&#39;/0x4f).
        /// </summary>
        /// <value>Indicates if the security event is &#39;Opening Process Complete&#39; (&#39;O&#39;/0x4f).</value>
        [JsonPropertyName("is_opening_process_complete")]
        public bool? IsOpeningProcessComplete { get { return this.IsOpeningProcessCompleteOption; } set { this.IsOpeningProcessCompleteOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsClosingProcessComplete
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsClosingProcessCompleteOption { get; private set; }

        /// <summary>
        /// Indicates if the security event is &#39;Closing Process Complete&#39; (&#39;C&#39;/0x43).
        /// </summary>
        /// <value>Indicates if the security event is &#39;Closing Process Complete&#39; (&#39;C&#39;/0x43).</value>
        [JsonPropertyName("is_closing_process_complete")]
        public bool? IsClosingProcessComplete { get { return this.IsClosingProcessCompleteOption; } set { this.IsClosingProcessCompleteOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdminSecurityEventModel {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  TimestampNanos: ").Append(TimestampNanos).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  SecurityEvent: ").Append(SecurityEvent).Append("\n");
            sb.Append("  SecurityEventCode: ").Append(SecurityEventCode).Append("\n");
            sb.Append("  SecurityEventText: ").Append(SecurityEventText).Append("\n");
            sb.Append("  IsOpeningProcessComplete: ").Append(IsOpeningProcessComplete).Append("\n");
            sb.Append("  IsClosingProcessComplete: ").Append(IsClosingProcessComplete).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdminSecurityEventModel" />
    /// </summary>
    public class AdminSecurityEventModelJsonConverter : JsonConverter<AdminSecurityEventModel>
    {
        /// <summary>
        /// The format to use to serialize Timestamp
        /// </summary>
        public static string TimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AdminSecurityEventModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdminSecurityEventModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> symbol = default;
            Option<long?> timestampNanos = default;
            Option<DateTime?> timestamp = default;
            Option<int?> securityEvent = default;
            Option<string?> securityEventCode = default;
            Option<string?> securityEventText = default;
            Option<bool?> isOpeningProcessComplete = default;
            Option<bool?> isClosingProcessComplete = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "symbol":
                            symbol = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "timestamp_nanos":
                            timestampNanos = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "timestamp":
                            timestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "security_event":
                            securityEvent = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "security_event_code":
                            securityEventCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "security_event_text":
                            securityEventText = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_opening_process_complete":
                            isOpeningProcessComplete = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_closing_process_complete":
                            isClosingProcessComplete = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (timestampNanos.IsSet && timestampNanos.Value == null)
                throw new ArgumentNullException(nameof(timestampNanos), "Property is not nullable for class AdminSecurityEventModel.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class AdminSecurityEventModel.");

            if (securityEvent.IsSet && securityEvent.Value == null)
                throw new ArgumentNullException(nameof(securityEvent), "Property is not nullable for class AdminSecurityEventModel.");

            if (isOpeningProcessComplete.IsSet && isOpeningProcessComplete.Value == null)
                throw new ArgumentNullException(nameof(isOpeningProcessComplete), "Property is not nullable for class AdminSecurityEventModel.");

            if (isClosingProcessComplete.IsSet && isClosingProcessComplete.Value == null)
                throw new ArgumentNullException(nameof(isClosingProcessComplete), "Property is not nullable for class AdminSecurityEventModel.");

            return new AdminSecurityEventModel(symbol, timestampNanos, timestamp, securityEvent, securityEventCode, securityEventText, isOpeningProcessComplete, isClosingProcessComplete);
        }

        /// <summary>
        /// Serializes a <see cref="AdminSecurityEventModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adminSecurityEventModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdminSecurityEventModel adminSecurityEventModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, adminSecurityEventModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdminSecurityEventModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adminSecurityEventModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdminSecurityEventModel adminSecurityEventModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (adminSecurityEventModel.SymbolOption.IsSet)
                if (adminSecurityEventModel.SymbolOption.Value != null)
                    writer.WriteString("symbol", adminSecurityEventModel.Symbol);
                else
                    writer.WriteNull("symbol");

            if (adminSecurityEventModel.TimestampNanosOption.IsSet)
                writer.WriteNumber("timestamp_nanos", adminSecurityEventModel.TimestampNanosOption.Value!.Value);

            if (adminSecurityEventModel.TimestampOption.IsSet)
                writer.WriteString("timestamp", adminSecurityEventModel.TimestampOption.Value!.Value.ToString(TimestampFormat));

            if (adminSecurityEventModel.SecurityEventOption.IsSet)
                writer.WriteNumber("security_event", adminSecurityEventModel.SecurityEventOption.Value!.Value);

            if (adminSecurityEventModel.SecurityEventCodeOption.IsSet)
                if (adminSecurityEventModel.SecurityEventCodeOption.Value != null)
                    writer.WriteString("security_event_code", adminSecurityEventModel.SecurityEventCode);
                else
                    writer.WriteNull("security_event_code");

            if (adminSecurityEventModel.SecurityEventTextOption.IsSet)
                if (adminSecurityEventModel.SecurityEventTextOption.Value != null)
                    writer.WriteString("security_event_text", adminSecurityEventModel.SecurityEventText);
                else
                    writer.WriteNull("security_event_text");

            if (adminSecurityEventModel.IsOpeningProcessCompleteOption.IsSet)
                writer.WriteBoolean("is_opening_process_complete", adminSecurityEventModel.IsOpeningProcessCompleteOption.Value!.Value);

            if (adminSecurityEventModel.IsClosingProcessCompleteOption.IsSet)
                writer.WriteBoolean("is_closing_process_complete", adminSecurityEventModel.IsClosingProcessCompleteOption.Value!.Value);
        }
    }
}
