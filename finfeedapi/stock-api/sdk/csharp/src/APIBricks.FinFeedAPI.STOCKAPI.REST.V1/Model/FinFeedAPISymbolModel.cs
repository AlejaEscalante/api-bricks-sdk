// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.ClientUtils;
using APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client;

namespace APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Model
{
    /// <summary>
    /// FinFeedAPISymbolModel
    /// </summary>
    public partial class FinFeedAPISymbolModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinFeedAPISymbolModel" /> class.
        /// </summary>
        /// <param name="symbolId">symbolId</param>
        /// <param name="exchangeId">exchangeId</param>
        /// <param name="securityCategory">securityCategory</param>
        /// <param name="name">name</param>
        /// <param name="date">date</param>
        /// <param name="assetClass">assetClass</param>
        [JsonConstructor]
        public FinFeedAPISymbolModel(Option<string?> symbolId = default, Option<string?> exchangeId = default, Option<string?> securityCategory = default, Option<string?> name = default, Option<string?> date = default, Option<string?> assetClass = default)
        {
            SymbolIdOption = symbolId;
            ExchangeIdOption = exchangeId;
            SecurityCategoryOption = securityCategory;
            NameOption = name;
            DateOption = date;
            AssetClassOption = assetClass;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SymbolId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SymbolIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SymbolId
        /// </summary>
        [JsonPropertyName("symbol_id")]
        public string? SymbolId { get { return this.SymbolIdOption; } set { this.SymbolIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExchangeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExchangeIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExchangeId
        /// </summary>
        [JsonPropertyName("exchange_id")]
        public string? ExchangeId { get { return this.ExchangeIdOption; } set { this.ExchangeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SecurityCategory
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SecurityCategoryOption { get; }

        /// <summary>
        /// Gets or Sets SecurityCategory
        /// </summary>
        [JsonPropertyName("security_category")]
        public string? SecurityCategory { get { return this.SecurityCategoryOption; } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Date
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [JsonPropertyName("date")]
        public string? Date { get { return this.DateOption; } set { this.DateOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssetClass
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssetClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets AssetClass
        /// </summary>
        [JsonPropertyName("asset_class")]
        public string? AssetClass { get { return this.AssetClassOption; } set { this.AssetClassOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FinFeedAPISymbolModel {\n");
            sb.Append("  SymbolId: ").Append(SymbolId).Append("\n");
            sb.Append("  ExchangeId: ").Append(ExchangeId).Append("\n");
            sb.Append("  SecurityCategory: ").Append(SecurityCategory).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  AssetClass: ").Append(AssetClass).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FinFeedAPISymbolModel" />
    /// </summary>
    public class FinFeedAPISymbolModelJsonConverter : JsonConverter<FinFeedAPISymbolModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="FinFeedAPISymbolModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FinFeedAPISymbolModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> symbolId = default;
            Option<string?> exchangeId = default;
            Option<string?> securityCategory = default;
            Option<string?> name = default;
            Option<string?> date = default;
            Option<string?> assetClass = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "symbol_id":
                            symbolId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "exchange_id":
                            exchangeId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "security_category":
                            securityCategory = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "date":
                            date = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "asset_class":
                            assetClass = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new FinFeedAPISymbolModel(symbolId, exchangeId, securityCategory, name, date, assetClass);
        }

        /// <summary>
        /// Serializes a <see cref="FinFeedAPISymbolModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="finFeedAPISymbolModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FinFeedAPISymbolModel finFeedAPISymbolModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, finFeedAPISymbolModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FinFeedAPISymbolModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="finFeedAPISymbolModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FinFeedAPISymbolModel finFeedAPISymbolModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (finFeedAPISymbolModel.SymbolIdOption.IsSet)
                if (finFeedAPISymbolModel.SymbolIdOption.Value != null)
                    writer.WriteString("symbol_id", finFeedAPISymbolModel.SymbolId);
                else
                    writer.WriteNull("symbol_id");

            if (finFeedAPISymbolModel.ExchangeIdOption.IsSet)
                if (finFeedAPISymbolModel.ExchangeIdOption.Value != null)
                    writer.WriteString("exchange_id", finFeedAPISymbolModel.ExchangeId);
                else
                    writer.WriteNull("exchange_id");

            if (finFeedAPISymbolModel.SecurityCategoryOption.IsSet)
                if (finFeedAPISymbolModel.SecurityCategoryOption.Value != null)
                    writer.WriteString("security_category", finFeedAPISymbolModel.SecurityCategory);
                else
                    writer.WriteNull("security_category");

            if (finFeedAPISymbolModel.NameOption.IsSet)
                if (finFeedAPISymbolModel.NameOption.Value != null)
                    writer.WriteString("name", finFeedAPISymbolModel.Name);
                else
                    writer.WriteNull("name");

            if (finFeedAPISymbolModel.DateOption.IsSet)
                if (finFeedAPISymbolModel.DateOption.Value != null)
                    writer.WriteString("date", finFeedAPISymbolModel.Date);
                else
                    writer.WriteNull("date");

            if (finFeedAPISymbolModel.AssetClassOption.IsSet)
                if (finFeedAPISymbolModel.AssetClassOption.Value != null)
                    writer.WriteString("asset_class", finFeedAPISymbolModel.AssetClass);
                else
                    writer.WriteNull("asset_class");
        }
    }
}
