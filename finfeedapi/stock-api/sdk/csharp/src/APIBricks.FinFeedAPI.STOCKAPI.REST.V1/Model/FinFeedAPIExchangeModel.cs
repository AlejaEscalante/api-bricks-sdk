// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.ClientUtils;
using APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client;

namespace APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Model
{
    /// <summary>
    /// FinFeedAPIExchangeModel
    /// </summary>
    public partial class FinFeedAPIExchangeModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinFeedAPIExchangeModel" /> class.
        /// </summary>
        /// <param name="exchangeId">exchangeId</param>
        /// <param name="lastDatapointDate">lastDatapointDate</param>
        /// <param name="mic">mic</param>
        /// <param name="operatingMic">operatingMic</param>
        /// <param name="oprtSgmt">oprtSgmt</param>
        /// <param name="marketNameInstitutionDescription">marketNameInstitutionDescription</param>
        /// <param name="legalEntityName">legalEntityName</param>
        /// <param name="lei">lei</param>
        /// <param name="marketCategoryCode">marketCategoryCode</param>
        /// <param name="acronym">acronym</param>
        /// <param name="isoCountryCode">isoCountryCode</param>
        /// <param name="city">city</param>
        /// <param name="website">website</param>
        /// <param name="status">status</param>
        /// <param name="creationDate">creationDate</param>
        /// <param name="lastUpdateDate">lastUpdateDate</param>
        /// <param name="lastValidationDate">lastValidationDate</param>
        /// <param name="expiryDate">expiryDate</param>
        /// <param name="comments">comments</param>
        [JsonConstructor]
        public FinFeedAPIExchangeModel(Option<string?> exchangeId = default, Option<string?> lastDatapointDate = default, Option<string?> mic = default, Option<string?> operatingMic = default, Option<string?> oprtSgmt = default, Option<string?> marketNameInstitutionDescription = default, Option<string?> legalEntityName = default, Option<string?> lei = default, Option<string?> marketCategoryCode = default, Option<string?> acronym = default, Option<string?> isoCountryCode = default, Option<string?> city = default, Option<string?> website = default, Option<string?> status = default, Option<DateTime?> creationDate = default, Option<DateTime?> lastUpdateDate = default, Option<DateTime?> lastValidationDate = default, Option<DateTime?> expiryDate = default, Option<string?> comments = default)
        {
            ExchangeIdOption = exchangeId;
            LastDatapointDateOption = lastDatapointDate;
            MicOption = mic;
            OperatingMicOption = operatingMic;
            OprtSgmtOption = oprtSgmt;
            MarketNameInstitutionDescriptionOption = marketNameInstitutionDescription;
            LegalEntityNameOption = legalEntityName;
            LeiOption = lei;
            MarketCategoryCodeOption = marketCategoryCode;
            AcronymOption = acronym;
            IsoCountryCodeOption = isoCountryCode;
            CityOption = city;
            WebsiteOption = website;
            StatusOption = status;
            CreationDateOption = creationDate;
            LastUpdateDateOption = lastUpdateDate;
            LastValidationDateOption = lastValidationDate;
            ExpiryDateOption = expiryDate;
            CommentsOption = comments;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ExchangeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExchangeIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExchangeId
        /// </summary>
        [JsonPropertyName("exchange_id")]
        public string? ExchangeId { get { return this.ExchangeIdOption; } set { this.ExchangeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastDatapointDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastDatapointDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastDatapointDate
        /// </summary>
        [JsonPropertyName("last_datapoint_date")]
        public string? LastDatapointDate { get { return this.LastDatapointDateOption; } set { this.LastDatapointDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Mic
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MicOption { get; private set; }

        /// <summary>
        /// Gets or Sets Mic
        /// </summary>
        [JsonPropertyName("mic")]
        public string? Mic { get { return this.MicOption; } set { this.MicOption = new(value); } }

        /// <summary>
        /// Used to track the state of OperatingMic
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OperatingMicOption { get; private set; }

        /// <summary>
        /// Gets or Sets OperatingMic
        /// </summary>
        [JsonPropertyName("operating_mic")]
        public string? OperatingMic { get { return this.OperatingMicOption; } set { this.OperatingMicOption = new(value); } }

        /// <summary>
        /// Used to track the state of OprtSgmt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OprtSgmtOption { get; private set; }

        /// <summary>
        /// Gets or Sets OprtSgmt
        /// </summary>
        [JsonPropertyName("oprt_sgmt")]
        public string? OprtSgmt { get { return this.OprtSgmtOption; } set { this.OprtSgmtOption = new(value); } }

        /// <summary>
        /// Used to track the state of MarketNameInstitutionDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MarketNameInstitutionDescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets MarketNameInstitutionDescription
        /// </summary>
        [JsonPropertyName("market_name_institution_description")]
        public string? MarketNameInstitutionDescription { get { return this.MarketNameInstitutionDescriptionOption; } set { this.MarketNameInstitutionDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of LegalEntityName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LegalEntityNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets LegalEntityName
        /// </summary>
        [JsonPropertyName("legal_entity_name")]
        public string? LegalEntityName { get { return this.LegalEntityNameOption; } set { this.LegalEntityNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Lei
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LeiOption { get; private set; }

        /// <summary>
        /// Gets or Sets Lei
        /// </summary>
        [JsonPropertyName("lei")]
        public string? Lei { get { return this.LeiOption; } set { this.LeiOption = new(value); } }

        /// <summary>
        /// Used to track the state of MarketCategoryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MarketCategoryCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets MarketCategoryCode
        /// </summary>
        [JsonPropertyName("market_category_code")]
        public string? MarketCategoryCode { get { return this.MarketCategoryCodeOption; } set { this.MarketCategoryCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Acronym
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AcronymOption { get; private set; }

        /// <summary>
        /// Gets or Sets Acronym
        /// </summary>
        [JsonPropertyName("acronym")]
        public string? Acronym { get { return this.AcronymOption; } set { this.AcronymOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsoCountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IsoCountryCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsoCountryCode
        /// </summary>
        [JsonPropertyName("iso_country_code")]
        public string? IsoCountryCode { get { return this.IsoCountryCodeOption; } set { this.IsoCountryCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of City
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CityOption { get; private set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [JsonPropertyName("city")]
        public string? City { get { return this.CityOption; } set { this.CityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Website
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebsiteOption { get; private set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [JsonPropertyName("website")]
        public string? Website { get { return this.WebsiteOption; } set { this.WebsiteOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public string? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreationDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [JsonPropertyName("creation_date")]
        public DateTime? CreationDate { get { return this.CreationDateOption; } set { this.CreationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastUpdateDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastUpdateDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastUpdateDate
        /// </summary>
        [JsonPropertyName("last_update_date")]
        public DateTime? LastUpdateDate { get { return this.LastUpdateDateOption; } set { this.LastUpdateDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastValidationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastValidationDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastValidationDate
        /// </summary>
        [JsonPropertyName("last_validation_date")]
        public DateTime? LastValidationDate { get { return this.LastValidationDateOption; } set { this.LastValidationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpiryDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ExpiryDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpiryDate
        /// </summary>
        [JsonPropertyName("expiry_date")]
        public DateTime? ExpiryDate { get { return this.ExpiryDateOption; } set { this.ExpiryDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Comments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [JsonPropertyName("comments")]
        public string? Comments { get { return this.CommentsOption; } set { this.CommentsOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FinFeedAPIExchangeModel {\n");
            sb.Append("  ExchangeId: ").Append(ExchangeId).Append("\n");
            sb.Append("  LastDatapointDate: ").Append(LastDatapointDate).Append("\n");
            sb.Append("  Mic: ").Append(Mic).Append("\n");
            sb.Append("  OperatingMic: ").Append(OperatingMic).Append("\n");
            sb.Append("  OprtSgmt: ").Append(OprtSgmt).Append("\n");
            sb.Append("  MarketNameInstitutionDescription: ").Append(MarketNameInstitutionDescription).Append("\n");
            sb.Append("  LegalEntityName: ").Append(LegalEntityName).Append("\n");
            sb.Append("  Lei: ").Append(Lei).Append("\n");
            sb.Append("  MarketCategoryCode: ").Append(MarketCategoryCode).Append("\n");
            sb.Append("  Acronym: ").Append(Acronym).Append("\n");
            sb.Append("  IsoCountryCode: ").Append(IsoCountryCode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  LastUpdateDate: ").Append(LastUpdateDate).Append("\n");
            sb.Append("  LastValidationDate: ").Append(LastValidationDate).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FinFeedAPIExchangeModel" />
    /// </summary>
    public class FinFeedAPIExchangeModelJsonConverter : JsonConverter<FinFeedAPIExchangeModel>
    {
        /// <summary>
        /// The format to use to serialize CreationDate
        /// </summary>
        public static string CreationDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastUpdateDate
        /// </summary>
        public static string LastUpdateDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastValidationDate
        /// </summary>
        public static string LastValidationDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ExpiryDate
        /// </summary>
        public static string ExpiryDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="FinFeedAPIExchangeModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FinFeedAPIExchangeModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> exchangeId = default;
            Option<string?> lastDatapointDate = default;
            Option<string?> mic = default;
            Option<string?> operatingMic = default;
            Option<string?> oprtSgmt = default;
            Option<string?> marketNameInstitutionDescription = default;
            Option<string?> legalEntityName = default;
            Option<string?> lei = default;
            Option<string?> marketCategoryCode = default;
            Option<string?> acronym = default;
            Option<string?> isoCountryCode = default;
            Option<string?> city = default;
            Option<string?> website = default;
            Option<string?> status = default;
            Option<DateTime?> creationDate = default;
            Option<DateTime?> lastUpdateDate = default;
            Option<DateTime?> lastValidationDate = default;
            Option<DateTime?> expiryDate = default;
            Option<string?> comments = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "exchange_id":
                            exchangeId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "last_datapoint_date":
                            lastDatapointDate = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "mic":
                            mic = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "operating_mic":
                            operatingMic = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "oprt_sgmt":
                            oprtSgmt = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "market_name_institution_description":
                            marketNameInstitutionDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "legal_entity_name":
                            legalEntityName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "lei":
                            lei = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "market_category_code":
                            marketCategoryCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "acronym":
                            acronym = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "iso_country_code":
                            isoCountryCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "city":
                            city = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "website":
                            website = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "creation_date":
                            creationDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "last_update_date":
                            lastUpdateDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "last_validation_date":
                            lastValidationDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "expiry_date":
                            expiryDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "comments":
                            comments = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new FinFeedAPIExchangeModel(exchangeId, lastDatapointDate, mic, operatingMic, oprtSgmt, marketNameInstitutionDescription, legalEntityName, lei, marketCategoryCode, acronym, isoCountryCode, city, website, status, creationDate, lastUpdateDate, lastValidationDate, expiryDate, comments);
        }

        /// <summary>
        /// Serializes a <see cref="FinFeedAPIExchangeModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="finFeedAPIExchangeModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FinFeedAPIExchangeModel finFeedAPIExchangeModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, finFeedAPIExchangeModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FinFeedAPIExchangeModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="finFeedAPIExchangeModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FinFeedAPIExchangeModel finFeedAPIExchangeModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (finFeedAPIExchangeModel.ExchangeIdOption.IsSet)
                if (finFeedAPIExchangeModel.ExchangeIdOption.Value != null)
                    writer.WriteString("exchange_id", finFeedAPIExchangeModel.ExchangeId);
                else
                    writer.WriteNull("exchange_id");

            if (finFeedAPIExchangeModel.LastDatapointDateOption.IsSet)
                if (finFeedAPIExchangeModel.LastDatapointDateOption.Value != null)
                    writer.WriteString("last_datapoint_date", finFeedAPIExchangeModel.LastDatapointDate);
                else
                    writer.WriteNull("last_datapoint_date");

            if (finFeedAPIExchangeModel.MicOption.IsSet)
                if (finFeedAPIExchangeModel.MicOption.Value != null)
                    writer.WriteString("mic", finFeedAPIExchangeModel.Mic);
                else
                    writer.WriteNull("mic");

            if (finFeedAPIExchangeModel.OperatingMicOption.IsSet)
                if (finFeedAPIExchangeModel.OperatingMicOption.Value != null)
                    writer.WriteString("operating_mic", finFeedAPIExchangeModel.OperatingMic);
                else
                    writer.WriteNull("operating_mic");

            if (finFeedAPIExchangeModel.OprtSgmtOption.IsSet)
                if (finFeedAPIExchangeModel.OprtSgmtOption.Value != null)
                    writer.WriteString("oprt_sgmt", finFeedAPIExchangeModel.OprtSgmt);
                else
                    writer.WriteNull("oprt_sgmt");

            if (finFeedAPIExchangeModel.MarketNameInstitutionDescriptionOption.IsSet)
                if (finFeedAPIExchangeModel.MarketNameInstitutionDescriptionOption.Value != null)
                    writer.WriteString("market_name_institution_description", finFeedAPIExchangeModel.MarketNameInstitutionDescription);
                else
                    writer.WriteNull("market_name_institution_description");

            if (finFeedAPIExchangeModel.LegalEntityNameOption.IsSet)
                if (finFeedAPIExchangeModel.LegalEntityNameOption.Value != null)
                    writer.WriteString("legal_entity_name", finFeedAPIExchangeModel.LegalEntityName);
                else
                    writer.WriteNull("legal_entity_name");

            if (finFeedAPIExchangeModel.LeiOption.IsSet)
                if (finFeedAPIExchangeModel.LeiOption.Value != null)
                    writer.WriteString("lei", finFeedAPIExchangeModel.Lei);
                else
                    writer.WriteNull("lei");

            if (finFeedAPIExchangeModel.MarketCategoryCodeOption.IsSet)
                if (finFeedAPIExchangeModel.MarketCategoryCodeOption.Value != null)
                    writer.WriteString("market_category_code", finFeedAPIExchangeModel.MarketCategoryCode);
                else
                    writer.WriteNull("market_category_code");

            if (finFeedAPIExchangeModel.AcronymOption.IsSet)
                if (finFeedAPIExchangeModel.AcronymOption.Value != null)
                    writer.WriteString("acronym", finFeedAPIExchangeModel.Acronym);
                else
                    writer.WriteNull("acronym");

            if (finFeedAPIExchangeModel.IsoCountryCodeOption.IsSet)
                if (finFeedAPIExchangeModel.IsoCountryCodeOption.Value != null)
                    writer.WriteString("iso_country_code", finFeedAPIExchangeModel.IsoCountryCode);
                else
                    writer.WriteNull("iso_country_code");

            if (finFeedAPIExchangeModel.CityOption.IsSet)
                if (finFeedAPIExchangeModel.CityOption.Value != null)
                    writer.WriteString("city", finFeedAPIExchangeModel.City);
                else
                    writer.WriteNull("city");

            if (finFeedAPIExchangeModel.WebsiteOption.IsSet)
                if (finFeedAPIExchangeModel.WebsiteOption.Value != null)
                    writer.WriteString("website", finFeedAPIExchangeModel.Website);
                else
                    writer.WriteNull("website");

            if (finFeedAPIExchangeModel.StatusOption.IsSet)
                if (finFeedAPIExchangeModel.StatusOption.Value != null)
                    writer.WriteString("status", finFeedAPIExchangeModel.Status);
                else
                    writer.WriteNull("status");

            if (finFeedAPIExchangeModel.CreationDateOption.IsSet)
                if (finFeedAPIExchangeModel.CreationDateOption.Value != null)
                    writer.WriteString("creation_date", finFeedAPIExchangeModel.CreationDateOption.Value!.Value.ToString(CreationDateFormat));
                else
                    writer.WriteNull("creation_date");

            if (finFeedAPIExchangeModel.LastUpdateDateOption.IsSet)
                if (finFeedAPIExchangeModel.LastUpdateDateOption.Value != null)
                    writer.WriteString("last_update_date", finFeedAPIExchangeModel.LastUpdateDateOption.Value!.Value.ToString(LastUpdateDateFormat));
                else
                    writer.WriteNull("last_update_date");

            if (finFeedAPIExchangeModel.LastValidationDateOption.IsSet)
                if (finFeedAPIExchangeModel.LastValidationDateOption.Value != null)
                    writer.WriteString("last_validation_date", finFeedAPIExchangeModel.LastValidationDateOption.Value!.Value.ToString(LastValidationDateFormat));
                else
                    writer.WriteNull("last_validation_date");

            if (finFeedAPIExchangeModel.ExpiryDateOption.IsSet)
                if (finFeedAPIExchangeModel.ExpiryDateOption.Value != null)
                    writer.WriteString("expiry_date", finFeedAPIExchangeModel.ExpiryDateOption.Value!.Value.ToString(ExpiryDateFormat));
                else
                    writer.WriteNull("expiry_date");

            if (finFeedAPIExchangeModel.CommentsOption.IsSet)
                if (finFeedAPIExchangeModel.CommentsOption.Value != null)
                    writer.WriteString("comments", finFeedAPIExchangeModel.Comments);
                else
                    writer.WriteNull("comments");
        }
    }
}
