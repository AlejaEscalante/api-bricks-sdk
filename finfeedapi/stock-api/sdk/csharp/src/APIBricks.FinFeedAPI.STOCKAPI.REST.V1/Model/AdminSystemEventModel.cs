// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.ClientUtils;
using APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client;

namespace APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Model
{
    /// <summary>
    /// Represents the response DTO for system event information
    /// </summary>
    public partial class AdminSystemEventModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminSystemEventModel" /> class.
        /// </summary>
        /// <param name="timestampNanos">Original timestamp in nanoseconds since epoch</param>
        /// <param name="timestamp">Time when the system event was recorded as DateTime</param>
        /// <param name="systemEvent">System event as byte value</param>
        /// <param name="systemEventCode">System event as string</param>
        /// <param name="systemEventText">Human-readable description of the system event</param>
        /// <param name="isSystemEventStartOfMessages">Indicates if the system event is &#39;Start of Messages&#39; (O).  Outside of heartbeat messages on the lower level protocol,   the start of day message is the first message sent in any trading session.</param>
        /// <param name="isSystemEventStartOfSystemHours">Indicates if the system event is &#39;Start of System Hours&#39; (S).  This message indicates that IEX is open and ready to start accepting orders.</param>
        /// <param name="isSystemEventStartOfRegularMarketHours">Indicates if the system event is &#39;Start of Regular Market Hours&#39; (R).  This message indicates that DAY and GTX orders, as well as market orders and pegged orders,   are available for execution on IEX.</param>
        /// <param name="isSystemEventEndOfRegularMarketHours">Indicates if the system event is &#39;End of Regular Market Hours&#39; (M).  This message indicates that DAY orders, market orders, and pegged orders   are no longer accepted by IEX.</param>
        /// <param name="isSystemEventEndOfSystemHours">Indicates if the system event is &#39;End of System Hours&#39; (E).  This message indicates that IEX is now closed and will not accept   any new orders during this trading session. It is still possible   to receive messages after the end of day.</param>
        /// <param name="isSystemEventEndOfMessages">Indicates if the system event is &#39;End of Messages&#39; (C).  This is always the last message sent in any trading session.</param>
        [JsonConstructor]
        public AdminSystemEventModel(Option<long?> timestampNanos = default, Option<DateTime?> timestamp = default, Option<int?> systemEvent = default, Option<string?> systemEventCode = default, Option<string?> systemEventText = default, Option<bool?> isSystemEventStartOfMessages = default, Option<bool?> isSystemEventStartOfSystemHours = default, Option<bool?> isSystemEventStartOfRegularMarketHours = default, Option<bool?> isSystemEventEndOfRegularMarketHours = default, Option<bool?> isSystemEventEndOfSystemHours = default, Option<bool?> isSystemEventEndOfMessages = default)
        {
            TimestampNanosOption = timestampNanos;
            TimestampOption = timestamp;
            SystemEventOption = systemEvent;
            SystemEventCodeOption = systemEventCode;
            SystemEventTextOption = systemEventText;
            IsSystemEventStartOfMessagesOption = isSystemEventStartOfMessages;
            IsSystemEventStartOfSystemHoursOption = isSystemEventStartOfSystemHours;
            IsSystemEventStartOfRegularMarketHoursOption = isSystemEventStartOfRegularMarketHours;
            IsSystemEventEndOfRegularMarketHoursOption = isSystemEventEndOfRegularMarketHours;
            IsSystemEventEndOfSystemHoursOption = isSystemEventEndOfSystemHours;
            IsSystemEventEndOfMessagesOption = isSystemEventEndOfMessages;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of TimestampNanos
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TimestampNanosOption { get; private set; }

        /// <summary>
        /// Original timestamp in nanoseconds since epoch
        /// </summary>
        /// <value>Original timestamp in nanoseconds since epoch</value>
        [JsonPropertyName("timestamp_nanos")]
        public long? TimestampNanos { get { return this.TimestampNanosOption; } set { this.TimestampNanosOption = new(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimestampOption { get; private set; }

        /// <summary>
        /// Time when the system event was recorded as DateTime
        /// </summary>
        /// <value>Time when the system event was recorded as DateTime</value>
        [JsonPropertyName("timestamp")]
        public DateTime? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new(value); } }

        /// <summary>
        /// Used to track the state of SystemEvent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SystemEventOption { get; private set; }

        /// <summary>
        /// System event as byte value
        /// </summary>
        /// <value>System event as byte value</value>
        [JsonPropertyName("system_event")]
        public int? SystemEvent { get { return this.SystemEventOption; } set { this.SystemEventOption = new(value); } }

        /// <summary>
        /// Used to track the state of SystemEventCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SystemEventCodeOption { get; private set; }

        /// <summary>
        /// System event as string
        /// </summary>
        /// <value>System event as string</value>
        [JsonPropertyName("system_event_code")]
        public string? SystemEventCode { get { return this.SystemEventCodeOption; } set { this.SystemEventCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of SystemEventText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SystemEventTextOption { get; private set; }

        /// <summary>
        /// Human-readable description of the system event
        /// </summary>
        /// <value>Human-readable description of the system event</value>
        [JsonPropertyName("system_event_text")]
        public string? SystemEventText { get { return this.SystemEventTextOption; } set { this.SystemEventTextOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsSystemEventStartOfMessages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSystemEventStartOfMessagesOption { get; private set; }

        /// <summary>
        /// Indicates if the system event is &#39;Start of Messages&#39; (O).  Outside of heartbeat messages on the lower level protocol,   the start of day message is the first message sent in any trading session.
        /// </summary>
        /// <value>Indicates if the system event is &#39;Start of Messages&#39; (O).  Outside of heartbeat messages on the lower level protocol,   the start of day message is the first message sent in any trading session.</value>
        [JsonPropertyName("is_system_event_start_of_messages")]
        public bool? IsSystemEventStartOfMessages { get { return this.IsSystemEventStartOfMessagesOption; } set { this.IsSystemEventStartOfMessagesOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsSystemEventStartOfSystemHours
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSystemEventStartOfSystemHoursOption { get; private set; }

        /// <summary>
        /// Indicates if the system event is &#39;Start of System Hours&#39; (S).  This message indicates that IEX is open and ready to start accepting orders.
        /// </summary>
        /// <value>Indicates if the system event is &#39;Start of System Hours&#39; (S).  This message indicates that IEX is open and ready to start accepting orders.</value>
        [JsonPropertyName("is_system_event_start_of_system_hours")]
        public bool? IsSystemEventStartOfSystemHours { get { return this.IsSystemEventStartOfSystemHoursOption; } set { this.IsSystemEventStartOfSystemHoursOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsSystemEventStartOfRegularMarketHours
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSystemEventStartOfRegularMarketHoursOption { get; private set; }

        /// <summary>
        /// Indicates if the system event is &#39;Start of Regular Market Hours&#39; (R).  This message indicates that DAY and GTX orders, as well as market orders and pegged orders,   are available for execution on IEX.
        /// </summary>
        /// <value>Indicates if the system event is &#39;Start of Regular Market Hours&#39; (R).  This message indicates that DAY and GTX orders, as well as market orders and pegged orders,   are available for execution on IEX.</value>
        [JsonPropertyName("is_system_event_start_of_regular_market_hours")]
        public bool? IsSystemEventStartOfRegularMarketHours { get { return this.IsSystemEventStartOfRegularMarketHoursOption; } set { this.IsSystemEventStartOfRegularMarketHoursOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsSystemEventEndOfRegularMarketHours
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSystemEventEndOfRegularMarketHoursOption { get; private set; }

        /// <summary>
        /// Indicates if the system event is &#39;End of Regular Market Hours&#39; (M).  This message indicates that DAY orders, market orders, and pegged orders   are no longer accepted by IEX.
        /// </summary>
        /// <value>Indicates if the system event is &#39;End of Regular Market Hours&#39; (M).  This message indicates that DAY orders, market orders, and pegged orders   are no longer accepted by IEX.</value>
        [JsonPropertyName("is_system_event_end_of_regular_market_hours")]
        public bool? IsSystemEventEndOfRegularMarketHours { get { return this.IsSystemEventEndOfRegularMarketHoursOption; } set { this.IsSystemEventEndOfRegularMarketHoursOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsSystemEventEndOfSystemHours
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSystemEventEndOfSystemHoursOption { get; private set; }

        /// <summary>
        /// Indicates if the system event is &#39;End of System Hours&#39; (E).  This message indicates that IEX is now closed and will not accept   any new orders during this trading session. It is still possible   to receive messages after the end of day.
        /// </summary>
        /// <value>Indicates if the system event is &#39;End of System Hours&#39; (E).  This message indicates that IEX is now closed and will not accept   any new orders during this trading session. It is still possible   to receive messages after the end of day.</value>
        [JsonPropertyName("is_system_event_end_of_system_hours")]
        public bool? IsSystemEventEndOfSystemHours { get { return this.IsSystemEventEndOfSystemHoursOption; } set { this.IsSystemEventEndOfSystemHoursOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsSystemEventEndOfMessages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSystemEventEndOfMessagesOption { get; private set; }

        /// <summary>
        /// Indicates if the system event is &#39;End of Messages&#39; (C).  This is always the last message sent in any trading session.
        /// </summary>
        /// <value>Indicates if the system event is &#39;End of Messages&#39; (C).  This is always the last message sent in any trading session.</value>
        [JsonPropertyName("is_system_event_end_of_messages")]
        public bool? IsSystemEventEndOfMessages { get { return this.IsSystemEventEndOfMessagesOption; } set { this.IsSystemEventEndOfMessagesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdminSystemEventModel {\n");
            sb.Append("  TimestampNanos: ").Append(TimestampNanos).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  SystemEvent: ").Append(SystemEvent).Append("\n");
            sb.Append("  SystemEventCode: ").Append(SystemEventCode).Append("\n");
            sb.Append("  SystemEventText: ").Append(SystemEventText).Append("\n");
            sb.Append("  IsSystemEventStartOfMessages: ").Append(IsSystemEventStartOfMessages).Append("\n");
            sb.Append("  IsSystemEventStartOfSystemHours: ").Append(IsSystemEventStartOfSystemHours).Append("\n");
            sb.Append("  IsSystemEventStartOfRegularMarketHours: ").Append(IsSystemEventStartOfRegularMarketHours).Append("\n");
            sb.Append("  IsSystemEventEndOfRegularMarketHours: ").Append(IsSystemEventEndOfRegularMarketHours).Append("\n");
            sb.Append("  IsSystemEventEndOfSystemHours: ").Append(IsSystemEventEndOfSystemHours).Append("\n");
            sb.Append("  IsSystemEventEndOfMessages: ").Append(IsSystemEventEndOfMessages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdminSystemEventModel" />
    /// </summary>
    public class AdminSystemEventModelJsonConverter : JsonConverter<AdminSystemEventModel>
    {
        /// <summary>
        /// The format to use to serialize Timestamp
        /// </summary>
        public static string TimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AdminSystemEventModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdminSystemEventModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> timestampNanos = default;
            Option<DateTime?> timestamp = default;
            Option<int?> systemEvent = default;
            Option<string?> systemEventCode = default;
            Option<string?> systemEventText = default;
            Option<bool?> isSystemEventStartOfMessages = default;
            Option<bool?> isSystemEventStartOfSystemHours = default;
            Option<bool?> isSystemEventStartOfRegularMarketHours = default;
            Option<bool?> isSystemEventEndOfRegularMarketHours = default;
            Option<bool?> isSystemEventEndOfSystemHours = default;
            Option<bool?> isSystemEventEndOfMessages = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "timestamp_nanos":
                            timestampNanos = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "timestamp":
                            timestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "system_event":
                            systemEvent = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "system_event_code":
                            systemEventCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "system_event_text":
                            systemEventText = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_system_event_start_of_messages":
                            isSystemEventStartOfMessages = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_system_event_start_of_system_hours":
                            isSystemEventStartOfSystemHours = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_system_event_start_of_regular_market_hours":
                            isSystemEventStartOfRegularMarketHours = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_system_event_end_of_regular_market_hours":
                            isSystemEventEndOfRegularMarketHours = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_system_event_end_of_system_hours":
                            isSystemEventEndOfSystemHours = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_system_event_end_of_messages":
                            isSystemEventEndOfMessages = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (timestampNanos.IsSet && timestampNanos.Value == null)
                throw new ArgumentNullException(nameof(timestampNanos), "Property is not nullable for class AdminSystemEventModel.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class AdminSystemEventModel.");

            if (systemEvent.IsSet && systemEvent.Value == null)
                throw new ArgumentNullException(nameof(systemEvent), "Property is not nullable for class AdminSystemEventModel.");

            if (isSystemEventStartOfMessages.IsSet && isSystemEventStartOfMessages.Value == null)
                throw new ArgumentNullException(nameof(isSystemEventStartOfMessages), "Property is not nullable for class AdminSystemEventModel.");

            if (isSystemEventStartOfSystemHours.IsSet && isSystemEventStartOfSystemHours.Value == null)
                throw new ArgumentNullException(nameof(isSystemEventStartOfSystemHours), "Property is not nullable for class AdminSystemEventModel.");

            if (isSystemEventStartOfRegularMarketHours.IsSet && isSystemEventStartOfRegularMarketHours.Value == null)
                throw new ArgumentNullException(nameof(isSystemEventStartOfRegularMarketHours), "Property is not nullable for class AdminSystemEventModel.");

            if (isSystemEventEndOfRegularMarketHours.IsSet && isSystemEventEndOfRegularMarketHours.Value == null)
                throw new ArgumentNullException(nameof(isSystemEventEndOfRegularMarketHours), "Property is not nullable for class AdminSystemEventModel.");

            if (isSystemEventEndOfSystemHours.IsSet && isSystemEventEndOfSystemHours.Value == null)
                throw new ArgumentNullException(nameof(isSystemEventEndOfSystemHours), "Property is not nullable for class AdminSystemEventModel.");

            if (isSystemEventEndOfMessages.IsSet && isSystemEventEndOfMessages.Value == null)
                throw new ArgumentNullException(nameof(isSystemEventEndOfMessages), "Property is not nullable for class AdminSystemEventModel.");

            return new AdminSystemEventModel(timestampNanos, timestamp, systemEvent, systemEventCode, systemEventText, isSystemEventStartOfMessages, isSystemEventStartOfSystemHours, isSystemEventStartOfRegularMarketHours, isSystemEventEndOfRegularMarketHours, isSystemEventEndOfSystemHours, isSystemEventEndOfMessages);
        }

        /// <summary>
        /// Serializes a <see cref="AdminSystemEventModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adminSystemEventModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdminSystemEventModel adminSystemEventModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, adminSystemEventModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdminSystemEventModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adminSystemEventModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdminSystemEventModel adminSystemEventModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (adminSystemEventModel.TimestampNanosOption.IsSet)
                writer.WriteNumber("timestamp_nanos", adminSystemEventModel.TimestampNanosOption.Value!.Value);

            if (adminSystemEventModel.TimestampOption.IsSet)
                writer.WriteString("timestamp", adminSystemEventModel.TimestampOption.Value!.Value.ToString(TimestampFormat));

            if (adminSystemEventModel.SystemEventOption.IsSet)
                writer.WriteNumber("system_event", adminSystemEventModel.SystemEventOption.Value!.Value);

            if (adminSystemEventModel.SystemEventCodeOption.IsSet)
                if (adminSystemEventModel.SystemEventCodeOption.Value != null)
                    writer.WriteString("system_event_code", adminSystemEventModel.SystemEventCode);
                else
                    writer.WriteNull("system_event_code");

            if (adminSystemEventModel.SystemEventTextOption.IsSet)
                if (adminSystemEventModel.SystemEventTextOption.Value != null)
                    writer.WriteString("system_event_text", adminSystemEventModel.SystemEventText);
                else
                    writer.WriteNull("system_event_text");

            if (adminSystemEventModel.IsSystemEventStartOfMessagesOption.IsSet)
                writer.WriteBoolean("is_system_event_start_of_messages", adminSystemEventModel.IsSystemEventStartOfMessagesOption.Value!.Value);

            if (adminSystemEventModel.IsSystemEventStartOfSystemHoursOption.IsSet)
                writer.WriteBoolean("is_system_event_start_of_system_hours", adminSystemEventModel.IsSystemEventStartOfSystemHoursOption.Value!.Value);

            if (adminSystemEventModel.IsSystemEventStartOfRegularMarketHoursOption.IsSet)
                writer.WriteBoolean("is_system_event_start_of_regular_market_hours", adminSystemEventModel.IsSystemEventStartOfRegularMarketHoursOption.Value!.Value);

            if (adminSystemEventModel.IsSystemEventEndOfRegularMarketHoursOption.IsSet)
                writer.WriteBoolean("is_system_event_end_of_regular_market_hours", adminSystemEventModel.IsSystemEventEndOfRegularMarketHoursOption.Value!.Value);

            if (adminSystemEventModel.IsSystemEventEndOfSystemHoursOption.IsSet)
                writer.WriteBoolean("is_system_event_end_of_system_hours", adminSystemEventModel.IsSystemEventEndOfSystemHoursOption.Value!.Value);

            if (adminSystemEventModel.IsSystemEventEndOfMessagesOption.IsSet)
                writer.WriteBoolean("is_system_event_end_of_messages", adminSystemEventModel.IsSystemEventEndOfMessagesOption.Value!.Value);
        }
    }
}
