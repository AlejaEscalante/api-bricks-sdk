// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.ClientUtils;
using APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client;

namespace APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Model
{
    /// <summary>
    /// Represents the response DTO for auction information
    /// </summary>
    public partial class AdminAuctionInformationModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminAuctionInformationModel" /> class.
        /// </summary>
        /// <param name="symbol">The stock symbol</param>
        /// <param name="timestampNanos">Original timestamp in nanoseconds since epoch</param>
        /// <param name="timestamp">Time when the auction data was recorded as DateTime</param>
        /// <param name="auctionType">Type of auction as byte value</param>
        /// <param name="auctionTypeCode">Type of auction as character string</param>
        /// <param name="auctionTypeText">Human-readable description of the auction type</param>
        /// <param name="isAuctionTypeOpening">Indicates if the auction type is &#39;Opening Auction&#39; (&#39;O&#39;/0x4f).</param>
        /// <param name="isAuctionTypeClosing">Indicates if the auction type is &#39;Closing Auction&#39; (&#39;C&#39;/0x43).</param>
        /// <param name="isAuctionTypeIpo">Indicates if the auction type is &#39;IPO Auction&#39; (&#39;I&#39;/0x49).</param>
        /// <param name="isAuctionTypeHalt">Indicates if the auction type is &#39;Halt Auction&#39; (&#39;H&#39;/0x48).</param>
        /// <param name="isAuctionTypeVolatility">Indicates if the auction type is &#39;Volatility Auction&#39; (&#39;V&#39;/0x56).</param>
        /// <param name="pairedShares">Number of shares paired at the Reference Price</param>
        /// <param name="referencePrice">Reference price as decimal</param>
        /// <param name="indicativeClearingPrice">Indicative clearing price as decimal</param>
        /// <param name="imbalanceShares">Number of unpaired shares at the Reference Price</param>
        /// <param name="imbalanceSide">Side of the imbalance as byte value</param>
        /// <param name="imbalanceSideCode">Side of the imbalance as character string</param>
        /// <param name="imbalanceSideText">Human-readable description of the imbalance side</param>
        /// <param name="isImbalanceSideBuy">Indicates if there is a buy-side imbalance (&#39;B&#39;/0x42).</param>
        /// <param name="isImbalanceSideSell">Indicates if there is a sell-side imbalance (&#39;S&#39;/0x53).</param>
        /// <param name="isImbalanceSideNone">Indicates if there is no imbalance (&#39;N&#39;/0x4e).</param>
        /// <param name="extensionNumber">Number of extensions to the auction</param>
        /// <param name="scheduledAuctionTimeSeconds">Scheduled auction time in seconds since epoch</param>
        /// <param name="scheduledAuctionTime">Scheduled time for the auction as DateTime</param>
        /// <param name="auctionBookClearingPrice">Auction book clearing price as decimal</param>
        /// <param name="collarReferencePrice">Collar reference price as decimal</param>
        /// <param name="lowerAuctionCollar">Lower auction collar as decimal</param>
        /// <param name="upperAuctionCollar">Upper auction collar as decimal</param>
        [JsonConstructor]
        public AdminAuctionInformationModel(Option<string?> symbol = default, Option<long?> timestampNanos = default, Option<DateTime?> timestamp = default, Option<int?> auctionType = default, Option<string?> auctionTypeCode = default, Option<string?> auctionTypeText = default, Option<bool?> isAuctionTypeOpening = default, Option<bool?> isAuctionTypeClosing = default, Option<bool?> isAuctionTypeIpo = default, Option<bool?> isAuctionTypeHalt = default, Option<bool?> isAuctionTypeVolatility = default, Option<int?> pairedShares = default, Option<double?> referencePrice = default, Option<double?> indicativeClearingPrice = default, Option<int?> imbalanceShares = default, Option<int?> imbalanceSide = default, Option<string?> imbalanceSideCode = default, Option<string?> imbalanceSideText = default, Option<bool?> isImbalanceSideBuy = default, Option<bool?> isImbalanceSideSell = default, Option<bool?> isImbalanceSideNone = default, Option<int?> extensionNumber = default, Option<int?> scheduledAuctionTimeSeconds = default, Option<DateTime?> scheduledAuctionTime = default, Option<double?> auctionBookClearingPrice = default, Option<double?> collarReferencePrice = default, Option<double?> lowerAuctionCollar = default, Option<double?> upperAuctionCollar = default)
        {
            SymbolOption = symbol;
            TimestampNanosOption = timestampNanos;
            TimestampOption = timestamp;
            AuctionTypeOption = auctionType;
            AuctionTypeCodeOption = auctionTypeCode;
            AuctionTypeTextOption = auctionTypeText;
            IsAuctionTypeOpeningOption = isAuctionTypeOpening;
            IsAuctionTypeClosingOption = isAuctionTypeClosing;
            IsAuctionTypeIpoOption = isAuctionTypeIpo;
            IsAuctionTypeHaltOption = isAuctionTypeHalt;
            IsAuctionTypeVolatilityOption = isAuctionTypeVolatility;
            PairedSharesOption = pairedShares;
            ReferencePriceOption = referencePrice;
            IndicativeClearingPriceOption = indicativeClearingPrice;
            ImbalanceSharesOption = imbalanceShares;
            ImbalanceSideOption = imbalanceSide;
            ImbalanceSideCodeOption = imbalanceSideCode;
            ImbalanceSideTextOption = imbalanceSideText;
            IsImbalanceSideBuyOption = isImbalanceSideBuy;
            IsImbalanceSideSellOption = isImbalanceSideSell;
            IsImbalanceSideNoneOption = isImbalanceSideNone;
            ExtensionNumberOption = extensionNumber;
            ScheduledAuctionTimeSecondsOption = scheduledAuctionTimeSeconds;
            ScheduledAuctionTimeOption = scheduledAuctionTime;
            AuctionBookClearingPriceOption = auctionBookClearingPrice;
            CollarReferencePriceOption = collarReferencePrice;
            LowerAuctionCollarOption = lowerAuctionCollar;
            UpperAuctionCollarOption = upperAuctionCollar;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Symbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SymbolOption { get; private set; }

        /// <summary>
        /// The stock symbol
        /// </summary>
        /// <value>The stock symbol</value>
        [JsonPropertyName("symbol")]
        public string? Symbol { get { return this.SymbolOption; } set { this.SymbolOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimestampNanos
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TimestampNanosOption { get; private set; }

        /// <summary>
        /// Original timestamp in nanoseconds since epoch
        /// </summary>
        /// <value>Original timestamp in nanoseconds since epoch</value>
        [JsonPropertyName("timestamp_nanos")]
        public long? TimestampNanos { get { return this.TimestampNanosOption; } set { this.TimestampNanosOption = new(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimestampOption { get; private set; }

        /// <summary>
        /// Time when the auction data was recorded as DateTime
        /// </summary>
        /// <value>Time when the auction data was recorded as DateTime</value>
        [JsonPropertyName("timestamp")]
        public DateTime? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new(value); } }

        /// <summary>
        /// Used to track the state of AuctionType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AuctionTypeOption { get; private set; }

        /// <summary>
        /// Type of auction as byte value
        /// </summary>
        /// <value>Type of auction as byte value</value>
        [JsonPropertyName("auction_type")]
        public int? AuctionType { get { return this.AuctionTypeOption; } set { this.AuctionTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AuctionTypeCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AuctionTypeCodeOption { get; private set; }

        /// <summary>
        /// Type of auction as character string
        /// </summary>
        /// <value>Type of auction as character string</value>
        [JsonPropertyName("auction_type_code")]
        public string? AuctionTypeCode { get { return this.AuctionTypeCodeOption; } set { this.AuctionTypeCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AuctionTypeText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AuctionTypeTextOption { get; private set; }

        /// <summary>
        /// Human-readable description of the auction type
        /// </summary>
        /// <value>Human-readable description of the auction type</value>
        [JsonPropertyName("auction_type_text")]
        public string? AuctionTypeText { get { return this.AuctionTypeTextOption; } set { this.AuctionTypeTextOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsAuctionTypeOpening
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsAuctionTypeOpeningOption { get; private set; }

        /// <summary>
        /// Indicates if the auction type is &#39;Opening Auction&#39; (&#39;O&#39;/0x4f).
        /// </summary>
        /// <value>Indicates if the auction type is &#39;Opening Auction&#39; (&#39;O&#39;/0x4f).</value>
        [JsonPropertyName("is_auction_type_opening")]
        public bool? IsAuctionTypeOpening { get { return this.IsAuctionTypeOpeningOption; } set { this.IsAuctionTypeOpeningOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsAuctionTypeClosing
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsAuctionTypeClosingOption { get; private set; }

        /// <summary>
        /// Indicates if the auction type is &#39;Closing Auction&#39; (&#39;C&#39;/0x43).
        /// </summary>
        /// <value>Indicates if the auction type is &#39;Closing Auction&#39; (&#39;C&#39;/0x43).</value>
        [JsonPropertyName("is_auction_type_closing")]
        public bool? IsAuctionTypeClosing { get { return this.IsAuctionTypeClosingOption; } set { this.IsAuctionTypeClosingOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsAuctionTypeIpo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsAuctionTypeIpoOption { get; private set; }

        /// <summary>
        /// Indicates if the auction type is &#39;IPO Auction&#39; (&#39;I&#39;/0x49).
        /// </summary>
        /// <value>Indicates if the auction type is &#39;IPO Auction&#39; (&#39;I&#39;/0x49).</value>
        [JsonPropertyName("is_auction_type_ipo")]
        public bool? IsAuctionTypeIpo { get { return this.IsAuctionTypeIpoOption; } set { this.IsAuctionTypeIpoOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsAuctionTypeHalt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsAuctionTypeHaltOption { get; private set; }

        /// <summary>
        /// Indicates if the auction type is &#39;Halt Auction&#39; (&#39;H&#39;/0x48).
        /// </summary>
        /// <value>Indicates if the auction type is &#39;Halt Auction&#39; (&#39;H&#39;/0x48).</value>
        [JsonPropertyName("is_auction_type_halt")]
        public bool? IsAuctionTypeHalt { get { return this.IsAuctionTypeHaltOption; } set { this.IsAuctionTypeHaltOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsAuctionTypeVolatility
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsAuctionTypeVolatilityOption { get; private set; }

        /// <summary>
        /// Indicates if the auction type is &#39;Volatility Auction&#39; (&#39;V&#39;/0x56).
        /// </summary>
        /// <value>Indicates if the auction type is &#39;Volatility Auction&#39; (&#39;V&#39;/0x56).</value>
        [JsonPropertyName("is_auction_type_volatility")]
        public bool? IsAuctionTypeVolatility { get { return this.IsAuctionTypeVolatilityOption; } set { this.IsAuctionTypeVolatilityOption = new(value); } }

        /// <summary>
        /// Used to track the state of PairedShares
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PairedSharesOption { get; private set; }

        /// <summary>
        /// Number of shares paired at the Reference Price
        /// </summary>
        /// <value>Number of shares paired at the Reference Price</value>
        [JsonPropertyName("paired_shares")]
        public int? PairedShares { get { return this.PairedSharesOption; } set { this.PairedSharesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReferencePrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ReferencePriceOption { get; private set; }

        /// <summary>
        /// Reference price as decimal
        /// </summary>
        /// <value>Reference price as decimal</value>
        [JsonPropertyName("reference_price")]
        public double? ReferencePrice { get { return this.ReferencePriceOption; } set { this.ReferencePriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of IndicativeClearingPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> IndicativeClearingPriceOption { get; private set; }

        /// <summary>
        /// Indicative clearing price as decimal
        /// </summary>
        /// <value>Indicative clearing price as decimal</value>
        [JsonPropertyName("indicative_clearing_price")]
        public double? IndicativeClearingPrice { get { return this.IndicativeClearingPriceOption; } set { this.IndicativeClearingPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ImbalanceShares
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ImbalanceSharesOption { get; private set; }

        /// <summary>
        /// Number of unpaired shares at the Reference Price
        /// </summary>
        /// <value>Number of unpaired shares at the Reference Price</value>
        [JsonPropertyName("imbalance_shares")]
        public int? ImbalanceShares { get { return this.ImbalanceSharesOption; } set { this.ImbalanceSharesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ImbalanceSide
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ImbalanceSideOption { get; private set; }

        /// <summary>
        /// Side of the imbalance as byte value
        /// </summary>
        /// <value>Side of the imbalance as byte value</value>
        [JsonPropertyName("imbalance_side")]
        public int? ImbalanceSide { get { return this.ImbalanceSideOption; } set { this.ImbalanceSideOption = new(value); } }

        /// <summary>
        /// Used to track the state of ImbalanceSideCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ImbalanceSideCodeOption { get; private set; }

        /// <summary>
        /// Side of the imbalance as character string
        /// </summary>
        /// <value>Side of the imbalance as character string</value>
        [JsonPropertyName("imbalance_side_code")]
        public string? ImbalanceSideCode { get { return this.ImbalanceSideCodeOption; } set { this.ImbalanceSideCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ImbalanceSideText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ImbalanceSideTextOption { get; private set; }

        /// <summary>
        /// Human-readable description of the imbalance side
        /// </summary>
        /// <value>Human-readable description of the imbalance side</value>
        [JsonPropertyName("imbalance_side_text")]
        public string? ImbalanceSideText { get { return this.ImbalanceSideTextOption; } set { this.ImbalanceSideTextOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsImbalanceSideBuy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsImbalanceSideBuyOption { get; private set; }

        /// <summary>
        /// Indicates if there is a buy-side imbalance (&#39;B&#39;/0x42).
        /// </summary>
        /// <value>Indicates if there is a buy-side imbalance (&#39;B&#39;/0x42).</value>
        [JsonPropertyName("is_imbalance_side_buy")]
        public bool? IsImbalanceSideBuy { get { return this.IsImbalanceSideBuyOption; } set { this.IsImbalanceSideBuyOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsImbalanceSideSell
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsImbalanceSideSellOption { get; private set; }

        /// <summary>
        /// Indicates if there is a sell-side imbalance (&#39;S&#39;/0x53).
        /// </summary>
        /// <value>Indicates if there is a sell-side imbalance (&#39;S&#39;/0x53).</value>
        [JsonPropertyName("is_imbalance_side_sell")]
        public bool? IsImbalanceSideSell { get { return this.IsImbalanceSideSellOption; } set { this.IsImbalanceSideSellOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsImbalanceSideNone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsImbalanceSideNoneOption { get; private set; }

        /// <summary>
        /// Indicates if there is no imbalance (&#39;N&#39;/0x4e).
        /// </summary>
        /// <value>Indicates if there is no imbalance (&#39;N&#39;/0x4e).</value>
        [JsonPropertyName("is_imbalance_side_none")]
        public bool? IsImbalanceSideNone { get { return this.IsImbalanceSideNoneOption; } set { this.IsImbalanceSideNoneOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExtensionNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ExtensionNumberOption { get; private set; }

        /// <summary>
        /// Number of extensions to the auction
        /// </summary>
        /// <value>Number of extensions to the auction</value>
        [JsonPropertyName("extension_number")]
        public int? ExtensionNumber { get { return this.ExtensionNumberOption; } set { this.ExtensionNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of ScheduledAuctionTimeSeconds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ScheduledAuctionTimeSecondsOption { get; private set; }

        /// <summary>
        /// Scheduled auction time in seconds since epoch
        /// </summary>
        /// <value>Scheduled auction time in seconds since epoch</value>
        [JsonPropertyName("scheduled_auction_time_seconds")]
        public int? ScheduledAuctionTimeSeconds { get { return this.ScheduledAuctionTimeSecondsOption; } set { this.ScheduledAuctionTimeSecondsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ScheduledAuctionTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ScheduledAuctionTimeOption { get; private set; }

        /// <summary>
        /// Scheduled time for the auction as DateTime
        /// </summary>
        /// <value>Scheduled time for the auction as DateTime</value>
        [JsonPropertyName("scheduled_auction_time")]
        public DateTime? ScheduledAuctionTime { get { return this.ScheduledAuctionTimeOption; } set { this.ScheduledAuctionTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AuctionBookClearingPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AuctionBookClearingPriceOption { get; private set; }

        /// <summary>
        /// Auction book clearing price as decimal
        /// </summary>
        /// <value>Auction book clearing price as decimal</value>
        [JsonPropertyName("auction_book_clearing_price")]
        public double? AuctionBookClearingPrice { get { return this.AuctionBookClearingPriceOption; } set { this.AuctionBookClearingPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of CollarReferencePrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CollarReferencePriceOption { get; private set; }

        /// <summary>
        /// Collar reference price as decimal
        /// </summary>
        /// <value>Collar reference price as decimal</value>
        [JsonPropertyName("collar_reference_price")]
        public double? CollarReferencePrice { get { return this.CollarReferencePriceOption; } set { this.CollarReferencePriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of LowerAuctionCollar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> LowerAuctionCollarOption { get; private set; }

        /// <summary>
        /// Lower auction collar as decimal
        /// </summary>
        /// <value>Lower auction collar as decimal</value>
        [JsonPropertyName("lower_auction_collar")]
        public double? LowerAuctionCollar { get { return this.LowerAuctionCollarOption; } set { this.LowerAuctionCollarOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpperAuctionCollar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> UpperAuctionCollarOption { get; private set; }

        /// <summary>
        /// Upper auction collar as decimal
        /// </summary>
        /// <value>Upper auction collar as decimal</value>
        [JsonPropertyName("upper_auction_collar")]
        public double? UpperAuctionCollar { get { return this.UpperAuctionCollarOption; } set { this.UpperAuctionCollarOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdminAuctionInformationModel {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  TimestampNanos: ").Append(TimestampNanos).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  AuctionType: ").Append(AuctionType).Append("\n");
            sb.Append("  AuctionTypeCode: ").Append(AuctionTypeCode).Append("\n");
            sb.Append("  AuctionTypeText: ").Append(AuctionTypeText).Append("\n");
            sb.Append("  IsAuctionTypeOpening: ").Append(IsAuctionTypeOpening).Append("\n");
            sb.Append("  IsAuctionTypeClosing: ").Append(IsAuctionTypeClosing).Append("\n");
            sb.Append("  IsAuctionTypeIpo: ").Append(IsAuctionTypeIpo).Append("\n");
            sb.Append("  IsAuctionTypeHalt: ").Append(IsAuctionTypeHalt).Append("\n");
            sb.Append("  IsAuctionTypeVolatility: ").Append(IsAuctionTypeVolatility).Append("\n");
            sb.Append("  PairedShares: ").Append(PairedShares).Append("\n");
            sb.Append("  ReferencePrice: ").Append(ReferencePrice).Append("\n");
            sb.Append("  IndicativeClearingPrice: ").Append(IndicativeClearingPrice).Append("\n");
            sb.Append("  ImbalanceShares: ").Append(ImbalanceShares).Append("\n");
            sb.Append("  ImbalanceSide: ").Append(ImbalanceSide).Append("\n");
            sb.Append("  ImbalanceSideCode: ").Append(ImbalanceSideCode).Append("\n");
            sb.Append("  ImbalanceSideText: ").Append(ImbalanceSideText).Append("\n");
            sb.Append("  IsImbalanceSideBuy: ").Append(IsImbalanceSideBuy).Append("\n");
            sb.Append("  IsImbalanceSideSell: ").Append(IsImbalanceSideSell).Append("\n");
            sb.Append("  IsImbalanceSideNone: ").Append(IsImbalanceSideNone).Append("\n");
            sb.Append("  ExtensionNumber: ").Append(ExtensionNumber).Append("\n");
            sb.Append("  ScheduledAuctionTimeSeconds: ").Append(ScheduledAuctionTimeSeconds).Append("\n");
            sb.Append("  ScheduledAuctionTime: ").Append(ScheduledAuctionTime).Append("\n");
            sb.Append("  AuctionBookClearingPrice: ").Append(AuctionBookClearingPrice).Append("\n");
            sb.Append("  CollarReferencePrice: ").Append(CollarReferencePrice).Append("\n");
            sb.Append("  LowerAuctionCollar: ").Append(LowerAuctionCollar).Append("\n");
            sb.Append("  UpperAuctionCollar: ").Append(UpperAuctionCollar).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdminAuctionInformationModel" />
    /// </summary>
    public class AdminAuctionInformationModelJsonConverter : JsonConverter<AdminAuctionInformationModel>
    {
        /// <summary>
        /// The format to use to serialize Timestamp
        /// </summary>
        public static string TimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ScheduledAuctionTime
        /// </summary>
        public static string ScheduledAuctionTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AdminAuctionInformationModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdminAuctionInformationModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> symbol = default;
            Option<long?> timestampNanos = default;
            Option<DateTime?> timestamp = default;
            Option<int?> auctionType = default;
            Option<string?> auctionTypeCode = default;
            Option<string?> auctionTypeText = default;
            Option<bool?> isAuctionTypeOpening = default;
            Option<bool?> isAuctionTypeClosing = default;
            Option<bool?> isAuctionTypeIpo = default;
            Option<bool?> isAuctionTypeHalt = default;
            Option<bool?> isAuctionTypeVolatility = default;
            Option<int?> pairedShares = default;
            Option<double?> referencePrice = default;
            Option<double?> indicativeClearingPrice = default;
            Option<int?> imbalanceShares = default;
            Option<int?> imbalanceSide = default;
            Option<string?> imbalanceSideCode = default;
            Option<string?> imbalanceSideText = default;
            Option<bool?> isImbalanceSideBuy = default;
            Option<bool?> isImbalanceSideSell = default;
            Option<bool?> isImbalanceSideNone = default;
            Option<int?> extensionNumber = default;
            Option<int?> scheduledAuctionTimeSeconds = default;
            Option<DateTime?> scheduledAuctionTime = default;
            Option<double?> auctionBookClearingPrice = default;
            Option<double?> collarReferencePrice = default;
            Option<double?> lowerAuctionCollar = default;
            Option<double?> upperAuctionCollar = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "symbol":
                            symbol = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "timestamp_nanos":
                            timestampNanos = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "timestamp":
                            timestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "auction_type":
                            auctionType = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "auction_type_code":
                            auctionTypeCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "auction_type_text":
                            auctionTypeText = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_auction_type_opening":
                            isAuctionTypeOpening = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_auction_type_closing":
                            isAuctionTypeClosing = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_auction_type_ipo":
                            isAuctionTypeIpo = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_auction_type_halt":
                            isAuctionTypeHalt = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_auction_type_volatility":
                            isAuctionTypeVolatility = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "paired_shares":
                            pairedShares = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "reference_price":
                            referencePrice = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "indicative_clearing_price":
                            indicativeClearingPrice = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "imbalance_shares":
                            imbalanceShares = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "imbalance_side":
                            imbalanceSide = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "imbalance_side_code":
                            imbalanceSideCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "imbalance_side_text":
                            imbalanceSideText = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_imbalance_side_buy":
                            isImbalanceSideBuy = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_imbalance_side_sell":
                            isImbalanceSideSell = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_imbalance_side_none":
                            isImbalanceSideNone = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "extension_number":
                            extensionNumber = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "scheduled_auction_time_seconds":
                            scheduledAuctionTimeSeconds = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "scheduled_auction_time":
                            scheduledAuctionTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "auction_book_clearing_price":
                            auctionBookClearingPrice = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "collar_reference_price":
                            collarReferencePrice = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "lower_auction_collar":
                            lowerAuctionCollar = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "upper_auction_collar":
                            upperAuctionCollar = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (timestampNanos.IsSet && timestampNanos.Value == null)
                throw new ArgumentNullException(nameof(timestampNanos), "Property is not nullable for class AdminAuctionInformationModel.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class AdminAuctionInformationModel.");

            if (auctionType.IsSet && auctionType.Value == null)
                throw new ArgumentNullException(nameof(auctionType), "Property is not nullable for class AdminAuctionInformationModel.");

            if (isAuctionTypeOpening.IsSet && isAuctionTypeOpening.Value == null)
                throw new ArgumentNullException(nameof(isAuctionTypeOpening), "Property is not nullable for class AdminAuctionInformationModel.");

            if (isAuctionTypeClosing.IsSet && isAuctionTypeClosing.Value == null)
                throw new ArgumentNullException(nameof(isAuctionTypeClosing), "Property is not nullable for class AdminAuctionInformationModel.");

            if (isAuctionTypeIpo.IsSet && isAuctionTypeIpo.Value == null)
                throw new ArgumentNullException(nameof(isAuctionTypeIpo), "Property is not nullable for class AdminAuctionInformationModel.");

            if (isAuctionTypeHalt.IsSet && isAuctionTypeHalt.Value == null)
                throw new ArgumentNullException(nameof(isAuctionTypeHalt), "Property is not nullable for class AdminAuctionInformationModel.");

            if (isAuctionTypeVolatility.IsSet && isAuctionTypeVolatility.Value == null)
                throw new ArgumentNullException(nameof(isAuctionTypeVolatility), "Property is not nullable for class AdminAuctionInformationModel.");

            if (pairedShares.IsSet && pairedShares.Value == null)
                throw new ArgumentNullException(nameof(pairedShares), "Property is not nullable for class AdminAuctionInformationModel.");

            if (referencePrice.IsSet && referencePrice.Value == null)
                throw new ArgumentNullException(nameof(referencePrice), "Property is not nullable for class AdminAuctionInformationModel.");

            if (indicativeClearingPrice.IsSet && indicativeClearingPrice.Value == null)
                throw new ArgumentNullException(nameof(indicativeClearingPrice), "Property is not nullable for class AdminAuctionInformationModel.");

            if (imbalanceShares.IsSet && imbalanceShares.Value == null)
                throw new ArgumentNullException(nameof(imbalanceShares), "Property is not nullable for class AdminAuctionInformationModel.");

            if (imbalanceSide.IsSet && imbalanceSide.Value == null)
                throw new ArgumentNullException(nameof(imbalanceSide), "Property is not nullable for class AdminAuctionInformationModel.");

            if (isImbalanceSideBuy.IsSet && isImbalanceSideBuy.Value == null)
                throw new ArgumentNullException(nameof(isImbalanceSideBuy), "Property is not nullable for class AdminAuctionInformationModel.");

            if (isImbalanceSideSell.IsSet && isImbalanceSideSell.Value == null)
                throw new ArgumentNullException(nameof(isImbalanceSideSell), "Property is not nullable for class AdminAuctionInformationModel.");

            if (isImbalanceSideNone.IsSet && isImbalanceSideNone.Value == null)
                throw new ArgumentNullException(nameof(isImbalanceSideNone), "Property is not nullable for class AdminAuctionInformationModel.");

            if (extensionNumber.IsSet && extensionNumber.Value == null)
                throw new ArgumentNullException(nameof(extensionNumber), "Property is not nullable for class AdminAuctionInformationModel.");

            if (scheduledAuctionTimeSeconds.IsSet && scheduledAuctionTimeSeconds.Value == null)
                throw new ArgumentNullException(nameof(scheduledAuctionTimeSeconds), "Property is not nullable for class AdminAuctionInformationModel.");

            if (scheduledAuctionTime.IsSet && scheduledAuctionTime.Value == null)
                throw new ArgumentNullException(nameof(scheduledAuctionTime), "Property is not nullable for class AdminAuctionInformationModel.");

            if (auctionBookClearingPrice.IsSet && auctionBookClearingPrice.Value == null)
                throw new ArgumentNullException(nameof(auctionBookClearingPrice), "Property is not nullable for class AdminAuctionInformationModel.");

            if (collarReferencePrice.IsSet && collarReferencePrice.Value == null)
                throw new ArgumentNullException(nameof(collarReferencePrice), "Property is not nullable for class AdminAuctionInformationModel.");

            if (lowerAuctionCollar.IsSet && lowerAuctionCollar.Value == null)
                throw new ArgumentNullException(nameof(lowerAuctionCollar), "Property is not nullable for class AdminAuctionInformationModel.");

            if (upperAuctionCollar.IsSet && upperAuctionCollar.Value == null)
                throw new ArgumentNullException(nameof(upperAuctionCollar), "Property is not nullable for class AdminAuctionInformationModel.");

            return new AdminAuctionInformationModel(symbol, timestampNanos, timestamp, auctionType, auctionTypeCode, auctionTypeText, isAuctionTypeOpening, isAuctionTypeClosing, isAuctionTypeIpo, isAuctionTypeHalt, isAuctionTypeVolatility, pairedShares, referencePrice, indicativeClearingPrice, imbalanceShares, imbalanceSide, imbalanceSideCode, imbalanceSideText, isImbalanceSideBuy, isImbalanceSideSell, isImbalanceSideNone, extensionNumber, scheduledAuctionTimeSeconds, scheduledAuctionTime, auctionBookClearingPrice, collarReferencePrice, lowerAuctionCollar, upperAuctionCollar);
        }

        /// <summary>
        /// Serializes a <see cref="AdminAuctionInformationModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adminAuctionInformationModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdminAuctionInformationModel adminAuctionInformationModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, adminAuctionInformationModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdminAuctionInformationModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adminAuctionInformationModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdminAuctionInformationModel adminAuctionInformationModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (adminAuctionInformationModel.SymbolOption.IsSet)
                if (adminAuctionInformationModel.SymbolOption.Value != null)
                    writer.WriteString("symbol", adminAuctionInformationModel.Symbol);
                else
                    writer.WriteNull("symbol");

            if (adminAuctionInformationModel.TimestampNanosOption.IsSet)
                writer.WriteNumber("timestamp_nanos", adminAuctionInformationModel.TimestampNanosOption.Value!.Value);

            if (adminAuctionInformationModel.TimestampOption.IsSet)
                writer.WriteString("timestamp", adminAuctionInformationModel.TimestampOption.Value!.Value.ToString(TimestampFormat));

            if (adminAuctionInformationModel.AuctionTypeOption.IsSet)
                writer.WriteNumber("auction_type", adminAuctionInformationModel.AuctionTypeOption.Value!.Value);

            if (adminAuctionInformationModel.AuctionTypeCodeOption.IsSet)
                if (adminAuctionInformationModel.AuctionTypeCodeOption.Value != null)
                    writer.WriteString("auction_type_code", adminAuctionInformationModel.AuctionTypeCode);
                else
                    writer.WriteNull("auction_type_code");

            if (adminAuctionInformationModel.AuctionTypeTextOption.IsSet)
                if (adminAuctionInformationModel.AuctionTypeTextOption.Value != null)
                    writer.WriteString("auction_type_text", adminAuctionInformationModel.AuctionTypeText);
                else
                    writer.WriteNull("auction_type_text");

            if (adminAuctionInformationModel.IsAuctionTypeOpeningOption.IsSet)
                writer.WriteBoolean("is_auction_type_opening", adminAuctionInformationModel.IsAuctionTypeOpeningOption.Value!.Value);

            if (adminAuctionInformationModel.IsAuctionTypeClosingOption.IsSet)
                writer.WriteBoolean("is_auction_type_closing", adminAuctionInformationModel.IsAuctionTypeClosingOption.Value!.Value);

            if (adminAuctionInformationModel.IsAuctionTypeIpoOption.IsSet)
                writer.WriteBoolean("is_auction_type_ipo", adminAuctionInformationModel.IsAuctionTypeIpoOption.Value!.Value);

            if (adminAuctionInformationModel.IsAuctionTypeHaltOption.IsSet)
                writer.WriteBoolean("is_auction_type_halt", adminAuctionInformationModel.IsAuctionTypeHaltOption.Value!.Value);

            if (adminAuctionInformationModel.IsAuctionTypeVolatilityOption.IsSet)
                writer.WriteBoolean("is_auction_type_volatility", adminAuctionInformationModel.IsAuctionTypeVolatilityOption.Value!.Value);

            if (adminAuctionInformationModel.PairedSharesOption.IsSet)
                writer.WriteNumber("paired_shares", adminAuctionInformationModel.PairedSharesOption.Value!.Value);

            if (adminAuctionInformationModel.ReferencePriceOption.IsSet)
                writer.WriteNumber("reference_price", adminAuctionInformationModel.ReferencePriceOption.Value!.Value);

            if (adminAuctionInformationModel.IndicativeClearingPriceOption.IsSet)
                writer.WriteNumber("indicative_clearing_price", adminAuctionInformationModel.IndicativeClearingPriceOption.Value!.Value);

            if (adminAuctionInformationModel.ImbalanceSharesOption.IsSet)
                writer.WriteNumber("imbalance_shares", adminAuctionInformationModel.ImbalanceSharesOption.Value!.Value);

            if (adminAuctionInformationModel.ImbalanceSideOption.IsSet)
                writer.WriteNumber("imbalance_side", adminAuctionInformationModel.ImbalanceSideOption.Value!.Value);

            if (adminAuctionInformationModel.ImbalanceSideCodeOption.IsSet)
                if (adminAuctionInformationModel.ImbalanceSideCodeOption.Value != null)
                    writer.WriteString("imbalance_side_code", adminAuctionInformationModel.ImbalanceSideCode);
                else
                    writer.WriteNull("imbalance_side_code");

            if (adminAuctionInformationModel.ImbalanceSideTextOption.IsSet)
                if (adminAuctionInformationModel.ImbalanceSideTextOption.Value != null)
                    writer.WriteString("imbalance_side_text", adminAuctionInformationModel.ImbalanceSideText);
                else
                    writer.WriteNull("imbalance_side_text");

            if (adminAuctionInformationModel.IsImbalanceSideBuyOption.IsSet)
                writer.WriteBoolean("is_imbalance_side_buy", adminAuctionInformationModel.IsImbalanceSideBuyOption.Value!.Value);

            if (adminAuctionInformationModel.IsImbalanceSideSellOption.IsSet)
                writer.WriteBoolean("is_imbalance_side_sell", adminAuctionInformationModel.IsImbalanceSideSellOption.Value!.Value);

            if (adminAuctionInformationModel.IsImbalanceSideNoneOption.IsSet)
                writer.WriteBoolean("is_imbalance_side_none", adminAuctionInformationModel.IsImbalanceSideNoneOption.Value!.Value);

            if (adminAuctionInformationModel.ExtensionNumberOption.IsSet)
                writer.WriteNumber("extension_number", adminAuctionInformationModel.ExtensionNumberOption.Value!.Value);

            if (adminAuctionInformationModel.ScheduledAuctionTimeSecondsOption.IsSet)
                writer.WriteNumber("scheduled_auction_time_seconds", adminAuctionInformationModel.ScheduledAuctionTimeSecondsOption.Value!.Value);

            if (adminAuctionInformationModel.ScheduledAuctionTimeOption.IsSet)
                writer.WriteString("scheduled_auction_time", adminAuctionInformationModel.ScheduledAuctionTimeOption.Value!.Value.ToString(ScheduledAuctionTimeFormat));

            if (adminAuctionInformationModel.AuctionBookClearingPriceOption.IsSet)
                writer.WriteNumber("auction_book_clearing_price", adminAuctionInformationModel.AuctionBookClearingPriceOption.Value!.Value);

            if (adminAuctionInformationModel.CollarReferencePriceOption.IsSet)
                writer.WriteNumber("collar_reference_price", adminAuctionInformationModel.CollarReferencePriceOption.Value!.Value);

            if (adminAuctionInformationModel.LowerAuctionCollarOption.IsSet)
                writer.WriteNumber("lower_auction_collar", adminAuctionInformationModel.LowerAuctionCollarOption.Value!.Value);

            if (adminAuctionInformationModel.UpperAuctionCollarOption.IsSet)
                writer.WriteNumber("upper_auction_collar", adminAuctionInformationModel.UpperAuctionCollarOption.Value!.Value);
        }
    }
}
