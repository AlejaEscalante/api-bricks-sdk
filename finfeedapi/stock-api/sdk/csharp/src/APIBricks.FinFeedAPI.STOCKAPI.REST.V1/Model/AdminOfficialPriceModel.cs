// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client.ClientUtils;
using APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Client;

namespace APIBricks.FinFeedAPI.STOCKAPI.REST.V1.Model
{
    /// <summary>
    /// Represents the response DTO for official price information
    /// </summary>
    public partial class AdminOfficialPriceModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminOfficialPriceModel" /> class.
        /// </summary>
        /// <param name="symbol">The stock symbol</param>
        /// <param name="timestampNanos">Original timestamp in nanoseconds since epoch</param>
        /// <param name="timestamp">Time when the official price was recorded as DateTime</param>
        /// <param name="priceType">Type of price as byte value</param>
        /// <param name="priceTypeCode">Type of price as character string</param>
        /// <param name="priceTypeText">Human-readable description of the price type</param>
        /// <param name="isPriceTypeOpening">Indicates if the price type is &#39;IEX Official Opening Price&#39; (&#39;Q&#39;/0x51).</param>
        /// <param name="isPriceTypeClosing">Indicates if the price type is &#39;IEX Official Closing Price&#39; (&#39;M&#39;/0x4d).</param>
        /// <param name="officialPrice">Official price as decimal</param>
        [JsonConstructor]
        public AdminOfficialPriceModel(Option<string?> symbol = default, Option<long?> timestampNanos = default, Option<DateTime?> timestamp = default, Option<int?> priceType = default, Option<string?> priceTypeCode = default, Option<string?> priceTypeText = default, Option<bool?> isPriceTypeOpening = default, Option<bool?> isPriceTypeClosing = default, Option<double?> officialPrice = default)
        {
            SymbolOption = symbol;
            TimestampNanosOption = timestampNanos;
            TimestampOption = timestamp;
            PriceTypeOption = priceType;
            PriceTypeCodeOption = priceTypeCode;
            PriceTypeTextOption = priceTypeText;
            IsPriceTypeOpeningOption = isPriceTypeOpening;
            IsPriceTypeClosingOption = isPriceTypeClosing;
            OfficialPriceOption = officialPrice;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Symbol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SymbolOption { get; private set; }

        /// <summary>
        /// The stock symbol
        /// </summary>
        /// <value>The stock symbol</value>
        [JsonPropertyName("symbol")]
        public string? Symbol { get { return this.SymbolOption; } set { this.SymbolOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimestampNanos
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TimestampNanosOption { get; private set; }

        /// <summary>
        /// Original timestamp in nanoseconds since epoch
        /// </summary>
        /// <value>Original timestamp in nanoseconds since epoch</value>
        [JsonPropertyName("timestamp_nanos")]
        public long? TimestampNanos { get { return this.TimestampNanosOption; } set { this.TimestampNanosOption = new(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimestampOption { get; private set; }

        /// <summary>
        /// Time when the official price was recorded as DateTime
        /// </summary>
        /// <value>Time when the official price was recorded as DateTime</value>
        [JsonPropertyName("timestamp")]
        public DateTime? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new(value); } }

        /// <summary>
        /// Used to track the state of PriceType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PriceTypeOption { get; private set; }

        /// <summary>
        /// Type of price as byte value
        /// </summary>
        /// <value>Type of price as byte value</value>
        [JsonPropertyName("price_type")]
        public int? PriceType { get { return this.PriceTypeOption; } set { this.PriceTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of PriceTypeCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PriceTypeCodeOption { get; private set; }

        /// <summary>
        /// Type of price as character string
        /// </summary>
        /// <value>Type of price as character string</value>
        [JsonPropertyName("price_type_code")]
        public string? PriceTypeCode { get { return this.PriceTypeCodeOption; } set { this.PriceTypeCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of PriceTypeText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PriceTypeTextOption { get; private set; }

        /// <summary>
        /// Human-readable description of the price type
        /// </summary>
        /// <value>Human-readable description of the price type</value>
        [JsonPropertyName("price_type_text")]
        public string? PriceTypeText { get { return this.PriceTypeTextOption; } set { this.PriceTypeTextOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsPriceTypeOpening
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsPriceTypeOpeningOption { get; private set; }

        /// <summary>
        /// Indicates if the price type is &#39;IEX Official Opening Price&#39; (&#39;Q&#39;/0x51).
        /// </summary>
        /// <value>Indicates if the price type is &#39;IEX Official Opening Price&#39; (&#39;Q&#39;/0x51).</value>
        [JsonPropertyName("is_price_type_opening")]
        public bool? IsPriceTypeOpening { get { return this.IsPriceTypeOpeningOption; } set { this.IsPriceTypeOpeningOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsPriceTypeClosing
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsPriceTypeClosingOption { get; private set; }

        /// <summary>
        /// Indicates if the price type is &#39;IEX Official Closing Price&#39; (&#39;M&#39;/0x4d).
        /// </summary>
        /// <value>Indicates if the price type is &#39;IEX Official Closing Price&#39; (&#39;M&#39;/0x4d).</value>
        [JsonPropertyName("is_price_type_closing")]
        public bool? IsPriceTypeClosing { get { return this.IsPriceTypeClosingOption; } set { this.IsPriceTypeClosingOption = new(value); } }

        /// <summary>
        /// Used to track the state of OfficialPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> OfficialPriceOption { get; private set; }

        /// <summary>
        /// Official price as decimal
        /// </summary>
        /// <value>Official price as decimal</value>
        [JsonPropertyName("official_price")]
        public double? OfficialPrice { get { return this.OfficialPriceOption; } set { this.OfficialPriceOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdminOfficialPriceModel {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  TimestampNanos: ").Append(TimestampNanos).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  PriceType: ").Append(PriceType).Append("\n");
            sb.Append("  PriceTypeCode: ").Append(PriceTypeCode).Append("\n");
            sb.Append("  PriceTypeText: ").Append(PriceTypeText).Append("\n");
            sb.Append("  IsPriceTypeOpening: ").Append(IsPriceTypeOpening).Append("\n");
            sb.Append("  IsPriceTypeClosing: ").Append(IsPriceTypeClosing).Append("\n");
            sb.Append("  OfficialPrice: ").Append(OfficialPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdminOfficialPriceModel" />
    /// </summary>
    public class AdminOfficialPriceModelJsonConverter : JsonConverter<AdminOfficialPriceModel>
    {
        /// <summary>
        /// The format to use to serialize Timestamp
        /// </summary>
        public static string TimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AdminOfficialPriceModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdminOfficialPriceModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> symbol = default;
            Option<long?> timestampNanos = default;
            Option<DateTime?> timestamp = default;
            Option<int?> priceType = default;
            Option<string?> priceTypeCode = default;
            Option<string?> priceTypeText = default;
            Option<bool?> isPriceTypeOpening = default;
            Option<bool?> isPriceTypeClosing = default;
            Option<double?> officialPrice = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "symbol":
                            symbol = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "timestamp_nanos":
                            timestampNanos = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "timestamp":
                            timestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "price_type":
                            priceType = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "price_type_code":
                            priceTypeCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "price_type_text":
                            priceTypeText = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_price_type_opening":
                            isPriceTypeOpening = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_price_type_closing":
                            isPriceTypeClosing = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "official_price":
                            officialPrice = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (timestampNanos.IsSet && timestampNanos.Value == null)
                throw new ArgumentNullException(nameof(timestampNanos), "Property is not nullable for class AdminOfficialPriceModel.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class AdminOfficialPriceModel.");

            if (priceType.IsSet && priceType.Value == null)
                throw new ArgumentNullException(nameof(priceType), "Property is not nullable for class AdminOfficialPriceModel.");

            if (isPriceTypeOpening.IsSet && isPriceTypeOpening.Value == null)
                throw new ArgumentNullException(nameof(isPriceTypeOpening), "Property is not nullable for class AdminOfficialPriceModel.");

            if (isPriceTypeClosing.IsSet && isPriceTypeClosing.Value == null)
                throw new ArgumentNullException(nameof(isPriceTypeClosing), "Property is not nullable for class AdminOfficialPriceModel.");

            if (officialPrice.IsSet && officialPrice.Value == null)
                throw new ArgumentNullException(nameof(officialPrice), "Property is not nullable for class AdminOfficialPriceModel.");

            return new AdminOfficialPriceModel(symbol, timestampNanos, timestamp, priceType, priceTypeCode, priceTypeText, isPriceTypeOpening, isPriceTypeClosing, officialPrice);
        }

        /// <summary>
        /// Serializes a <see cref="AdminOfficialPriceModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adminOfficialPriceModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdminOfficialPriceModel adminOfficialPriceModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, adminOfficialPriceModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdminOfficialPriceModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adminOfficialPriceModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdminOfficialPriceModel adminOfficialPriceModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (adminOfficialPriceModel.SymbolOption.IsSet)
                if (adminOfficialPriceModel.SymbolOption.Value != null)
                    writer.WriteString("symbol", adminOfficialPriceModel.Symbol);
                else
                    writer.WriteNull("symbol");

            if (adminOfficialPriceModel.TimestampNanosOption.IsSet)
                writer.WriteNumber("timestamp_nanos", adminOfficialPriceModel.TimestampNanosOption.Value!.Value);

            if (adminOfficialPriceModel.TimestampOption.IsSet)
                writer.WriteString("timestamp", adminOfficialPriceModel.TimestampOption.Value!.Value.ToString(TimestampFormat));

            if (adminOfficialPriceModel.PriceTypeOption.IsSet)
                writer.WriteNumber("price_type", adminOfficialPriceModel.PriceTypeOption.Value!.Value);

            if (adminOfficialPriceModel.PriceTypeCodeOption.IsSet)
                if (adminOfficialPriceModel.PriceTypeCodeOption.Value != null)
                    writer.WriteString("price_type_code", adminOfficialPriceModel.PriceTypeCode);
                else
                    writer.WriteNull("price_type_code");

            if (adminOfficialPriceModel.PriceTypeTextOption.IsSet)
                if (adminOfficialPriceModel.PriceTypeTextOption.Value != null)
                    writer.WriteString("price_type_text", adminOfficialPriceModel.PriceTypeText);
                else
                    writer.WriteNull("price_type_text");

            if (adminOfficialPriceModel.IsPriceTypeOpeningOption.IsSet)
                writer.WriteBoolean("is_price_type_opening", adminOfficialPriceModel.IsPriceTypeOpeningOption.Value!.Value);

            if (adminOfficialPriceModel.IsPriceTypeClosingOption.IsSet)
                writer.WriteBoolean("is_price_type_closing", adminOfficialPriceModel.IsPriceTypeClosingOption.Value!.Value);

            if (adminOfficialPriceModel.OfficialPriceOption.IsSet)
                writer.WriteNumber("official_price", adminOfficialPriceModel.OfficialPriceOption.Value!.Value);
        }
    }
}
