note
 description:"[
		REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class ADMIN_AUCTION_INFORMATION_MODEL




feature --Access

    symbol: detachable STRING_32
      -- The stock symbol
    timestamp_nanos: INTEGER_64
      -- Original timestamp in nanoseconds since epoch
    timestamp: detachable DATE_TIME
      -- Time when the auction data was recorded as DateTime
    auction_type: INTEGER_32
      -- Type of auction as byte value
    auction_type_code: detachable STRING_32
      -- Type of auction as character string
    auction_type_text: detachable STRING_32
      -- Human-readable description of the auction type
    is_auction_type_opening: BOOLEAN
      -- Indicates if the auction type is 'Opening Auction' ('O'/0x4f).
    is_auction_type_closing: BOOLEAN
      -- Indicates if the auction type is 'Closing Auction' ('C'/0x43).
    is_auction_type_ipo: BOOLEAN
      -- Indicates if the auction type is 'IPO Auction' ('I'/0x49).
    is_auction_type_halt: BOOLEAN
      -- Indicates if the auction type is 'Halt Auction' ('H'/0x48).
    is_auction_type_volatility: BOOLEAN
      -- Indicates if the auction type is 'Volatility Auction' ('V'/0x56).
    paired_shares: INTEGER_32
      -- Number of shares paired at the Reference Price
    reference_price: REAL_64
      -- Reference price as decimal
    indicative_clearing_price: REAL_64
      -- Indicative clearing price as decimal
    imbalance_shares: INTEGER_32
      -- Number of unpaired shares at the Reference Price
    imbalance_side: INTEGER_32
      -- Side of the imbalance as byte value
    imbalance_side_code: detachable STRING_32
      -- Side of the imbalance as character string
    imbalance_side_text: detachable STRING_32
      -- Human-readable description of the imbalance side
    is_imbalance_side_buy: BOOLEAN
      -- Indicates if there is a buy-side imbalance ('B'/0x42).
    is_imbalance_side_sell: BOOLEAN
      -- Indicates if there is a sell-side imbalance ('S'/0x53).
    is_imbalance_side_none: BOOLEAN
      -- Indicates if there is no imbalance ('N'/0x4e).
    extension_number: INTEGER_32
      -- Number of extensions to the auction
    scheduled_auction_time_seconds: INTEGER_32
      -- Scheduled auction time in seconds since epoch
    scheduled_auction_time: detachable DATE_TIME
      -- Scheduled time for the auction as DateTime
    auction_book_clearing_price: REAL_64
      -- Auction book clearing price as decimal
    collar_reference_price: REAL_64
      -- Collar reference price as decimal
    lower_auction_collar: REAL_64
      -- Lower auction collar as decimal
    upper_auction_collar: REAL_64
      -- Upper auction collar as decimal

feature -- Change Element

    set_symbol (a_name: like symbol)
        -- Set 'symbol' with 'a_name'.
      do
        symbol := a_name
      ensure
        symbol_set: symbol = a_name
      end

    set_timestamp_nanos (a_name: like timestamp_nanos)
        -- Set 'timestamp_nanos' with 'a_name'.
      do
        timestamp_nanos := a_name
      ensure
        timestamp_nanos_set: timestamp_nanos = a_name
      end

    set_timestamp (a_name: like timestamp)
        -- Set 'timestamp' with 'a_name'.
      do
        timestamp := a_name
      ensure
        timestamp_set: timestamp = a_name
      end

    set_auction_type (a_name: like auction_type)
        -- Set 'auction_type' with 'a_name'.
      do
        auction_type := a_name
      ensure
        auction_type_set: auction_type = a_name
      end

    set_auction_type_code (a_name: like auction_type_code)
        -- Set 'auction_type_code' with 'a_name'.
      do
        auction_type_code := a_name
      ensure
        auction_type_code_set: auction_type_code = a_name
      end

    set_auction_type_text (a_name: like auction_type_text)
        -- Set 'auction_type_text' with 'a_name'.
      do
        auction_type_text := a_name
      ensure
        auction_type_text_set: auction_type_text = a_name
      end

    set_is_auction_type_opening (a_name: like is_auction_type_opening)
        -- Set 'is_auction_type_opening' with 'a_name'.
      do
        is_auction_type_opening := a_name
      ensure
        is_auction_type_opening_set: is_auction_type_opening = a_name
      end

    set_is_auction_type_closing (a_name: like is_auction_type_closing)
        -- Set 'is_auction_type_closing' with 'a_name'.
      do
        is_auction_type_closing := a_name
      ensure
        is_auction_type_closing_set: is_auction_type_closing = a_name
      end

    set_is_auction_type_ipo (a_name: like is_auction_type_ipo)
        -- Set 'is_auction_type_ipo' with 'a_name'.
      do
        is_auction_type_ipo := a_name
      ensure
        is_auction_type_ipo_set: is_auction_type_ipo = a_name
      end

    set_is_auction_type_halt (a_name: like is_auction_type_halt)
        -- Set 'is_auction_type_halt' with 'a_name'.
      do
        is_auction_type_halt := a_name
      ensure
        is_auction_type_halt_set: is_auction_type_halt = a_name
      end

    set_is_auction_type_volatility (a_name: like is_auction_type_volatility)
        -- Set 'is_auction_type_volatility' with 'a_name'.
      do
        is_auction_type_volatility := a_name
      ensure
        is_auction_type_volatility_set: is_auction_type_volatility = a_name
      end

    set_paired_shares (a_name: like paired_shares)
        -- Set 'paired_shares' with 'a_name'.
      do
        paired_shares := a_name
      ensure
        paired_shares_set: paired_shares = a_name
      end

    set_reference_price (a_name: like reference_price)
        -- Set 'reference_price' with 'a_name'.
      do
        reference_price := a_name
      ensure
        reference_price_set: reference_price = a_name
      end

    set_indicative_clearing_price (a_name: like indicative_clearing_price)
        -- Set 'indicative_clearing_price' with 'a_name'.
      do
        indicative_clearing_price := a_name
      ensure
        indicative_clearing_price_set: indicative_clearing_price = a_name
      end

    set_imbalance_shares (a_name: like imbalance_shares)
        -- Set 'imbalance_shares' with 'a_name'.
      do
        imbalance_shares := a_name
      ensure
        imbalance_shares_set: imbalance_shares = a_name
      end

    set_imbalance_side (a_name: like imbalance_side)
        -- Set 'imbalance_side' with 'a_name'.
      do
        imbalance_side := a_name
      ensure
        imbalance_side_set: imbalance_side = a_name
      end

    set_imbalance_side_code (a_name: like imbalance_side_code)
        -- Set 'imbalance_side_code' with 'a_name'.
      do
        imbalance_side_code := a_name
      ensure
        imbalance_side_code_set: imbalance_side_code = a_name
      end

    set_imbalance_side_text (a_name: like imbalance_side_text)
        -- Set 'imbalance_side_text' with 'a_name'.
      do
        imbalance_side_text := a_name
      ensure
        imbalance_side_text_set: imbalance_side_text = a_name
      end

    set_is_imbalance_side_buy (a_name: like is_imbalance_side_buy)
        -- Set 'is_imbalance_side_buy' with 'a_name'.
      do
        is_imbalance_side_buy := a_name
      ensure
        is_imbalance_side_buy_set: is_imbalance_side_buy = a_name
      end

    set_is_imbalance_side_sell (a_name: like is_imbalance_side_sell)
        -- Set 'is_imbalance_side_sell' with 'a_name'.
      do
        is_imbalance_side_sell := a_name
      ensure
        is_imbalance_side_sell_set: is_imbalance_side_sell = a_name
      end

    set_is_imbalance_side_none (a_name: like is_imbalance_side_none)
        -- Set 'is_imbalance_side_none' with 'a_name'.
      do
        is_imbalance_side_none := a_name
      ensure
        is_imbalance_side_none_set: is_imbalance_side_none = a_name
      end

    set_extension_number (a_name: like extension_number)
        -- Set 'extension_number' with 'a_name'.
      do
        extension_number := a_name
      ensure
        extension_number_set: extension_number = a_name
      end

    set_scheduled_auction_time_seconds (a_name: like scheduled_auction_time_seconds)
        -- Set 'scheduled_auction_time_seconds' with 'a_name'.
      do
        scheduled_auction_time_seconds := a_name
      ensure
        scheduled_auction_time_seconds_set: scheduled_auction_time_seconds = a_name
      end

    set_scheduled_auction_time (a_name: like scheduled_auction_time)
        -- Set 'scheduled_auction_time' with 'a_name'.
      do
        scheduled_auction_time := a_name
      ensure
        scheduled_auction_time_set: scheduled_auction_time = a_name
      end

    set_auction_book_clearing_price (a_name: like auction_book_clearing_price)
        -- Set 'auction_book_clearing_price' with 'a_name'.
      do
        auction_book_clearing_price := a_name
      ensure
        auction_book_clearing_price_set: auction_book_clearing_price = a_name
      end

    set_collar_reference_price (a_name: like collar_reference_price)
        -- Set 'collar_reference_price' with 'a_name'.
      do
        collar_reference_price := a_name
      ensure
        collar_reference_price_set: collar_reference_price = a_name
      end

    set_lower_auction_collar (a_name: like lower_auction_collar)
        -- Set 'lower_auction_collar' with 'a_name'.
      do
        lower_auction_collar := a_name
      ensure
        lower_auction_collar_set: lower_auction_collar = a_name
      end

    set_upper_auction_collar (a_name: like upper_auction_collar)
        -- Set 'upper_auction_collar' with 'a_name'.
      do
        upper_auction_collar := a_name
      ensure
        upper_auction_collar_set: upper_auction_collar = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass ADMIN_AUCTION_INFORMATION_MODEL%N")
        if attached symbol as l_symbol then
          Result.append ("%Nsymbol:")
          Result.append (l_symbol.out)
          Result.append ("%N")
        end
        if attached timestamp_nanos as l_timestamp_nanos then
          Result.append ("%Ntimestamp_nanos:")
          Result.append (l_timestamp_nanos.out)
          Result.append ("%N")
        end
        if attached timestamp as l_timestamp then
          Result.append ("%Ntimestamp:")
          Result.append (l_timestamp.out)
          Result.append ("%N")
        end
        if attached auction_type as l_auction_type then
          Result.append ("%Nauction_type:")
          Result.append (l_auction_type.out)
          Result.append ("%N")
        end
        if attached auction_type_code as l_auction_type_code then
          Result.append ("%Nauction_type_code:")
          Result.append (l_auction_type_code.out)
          Result.append ("%N")
        end
        if attached auction_type_text as l_auction_type_text then
          Result.append ("%Nauction_type_text:")
          Result.append (l_auction_type_text.out)
          Result.append ("%N")
        end
        if attached is_auction_type_opening as l_is_auction_type_opening then
          Result.append ("%Nis_auction_type_opening:")
          Result.append (l_is_auction_type_opening.out)
          Result.append ("%N")
        end
        if attached is_auction_type_closing as l_is_auction_type_closing then
          Result.append ("%Nis_auction_type_closing:")
          Result.append (l_is_auction_type_closing.out)
          Result.append ("%N")
        end
        if attached is_auction_type_ipo as l_is_auction_type_ipo then
          Result.append ("%Nis_auction_type_ipo:")
          Result.append (l_is_auction_type_ipo.out)
          Result.append ("%N")
        end
        if attached is_auction_type_halt as l_is_auction_type_halt then
          Result.append ("%Nis_auction_type_halt:")
          Result.append (l_is_auction_type_halt.out)
          Result.append ("%N")
        end
        if attached is_auction_type_volatility as l_is_auction_type_volatility then
          Result.append ("%Nis_auction_type_volatility:")
          Result.append (l_is_auction_type_volatility.out)
          Result.append ("%N")
        end
        if attached paired_shares as l_paired_shares then
          Result.append ("%Npaired_shares:")
          Result.append (l_paired_shares.out)
          Result.append ("%N")
        end
        if attached reference_price as l_reference_price then
          Result.append ("%Nreference_price:")
          Result.append (l_reference_price.out)
          Result.append ("%N")
        end
        if attached indicative_clearing_price as l_indicative_clearing_price then
          Result.append ("%Nindicative_clearing_price:")
          Result.append (l_indicative_clearing_price.out)
          Result.append ("%N")
        end
        if attached imbalance_shares as l_imbalance_shares then
          Result.append ("%Nimbalance_shares:")
          Result.append (l_imbalance_shares.out)
          Result.append ("%N")
        end
        if attached imbalance_side as l_imbalance_side then
          Result.append ("%Nimbalance_side:")
          Result.append (l_imbalance_side.out)
          Result.append ("%N")
        end
        if attached imbalance_side_code as l_imbalance_side_code then
          Result.append ("%Nimbalance_side_code:")
          Result.append (l_imbalance_side_code.out)
          Result.append ("%N")
        end
        if attached imbalance_side_text as l_imbalance_side_text then
          Result.append ("%Nimbalance_side_text:")
          Result.append (l_imbalance_side_text.out)
          Result.append ("%N")
        end
        if attached is_imbalance_side_buy as l_is_imbalance_side_buy then
          Result.append ("%Nis_imbalance_side_buy:")
          Result.append (l_is_imbalance_side_buy.out)
          Result.append ("%N")
        end
        if attached is_imbalance_side_sell as l_is_imbalance_side_sell then
          Result.append ("%Nis_imbalance_side_sell:")
          Result.append (l_is_imbalance_side_sell.out)
          Result.append ("%N")
        end
        if attached is_imbalance_side_none as l_is_imbalance_side_none then
          Result.append ("%Nis_imbalance_side_none:")
          Result.append (l_is_imbalance_side_none.out)
          Result.append ("%N")
        end
        if attached extension_number as l_extension_number then
          Result.append ("%Nextension_number:")
          Result.append (l_extension_number.out)
          Result.append ("%N")
        end
        if attached scheduled_auction_time_seconds as l_scheduled_auction_time_seconds then
          Result.append ("%Nscheduled_auction_time_seconds:")
          Result.append (l_scheduled_auction_time_seconds.out)
          Result.append ("%N")
        end
        if attached scheduled_auction_time as l_scheduled_auction_time then
          Result.append ("%Nscheduled_auction_time:")
          Result.append (l_scheduled_auction_time.out)
          Result.append ("%N")
        end
        if attached auction_book_clearing_price as l_auction_book_clearing_price then
          Result.append ("%Nauction_book_clearing_price:")
          Result.append (l_auction_book_clearing_price.out)
          Result.append ("%N")
        end
        if attached collar_reference_price as l_collar_reference_price then
          Result.append ("%Ncollar_reference_price:")
          Result.append (l_collar_reference_price.out)
          Result.append ("%N")
        end
        if attached lower_auction_collar as l_lower_auction_collar then
          Result.append ("%Nlower_auction_collar:")
          Result.append (l_lower_auction_collar.out)
          Result.append ("%N")
        end
        if attached upper_auction_collar as l_upper_auction_collar then
          Result.append ("%Nupper_auction_collar:")
          Result.append (l_upper_auction_collar.out)
          Result.append ("%N")
        end
      end
end

