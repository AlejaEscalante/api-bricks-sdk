note
 description:"[
		REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class LEVEL3_EXECUTED_ORDER_MODEL




feature --Access

    symbol: detachable STRING_32
      -- The stock symbol
    timestamp_nanos: INTEGER_64
      -- Original timestamp in nanoseconds since epoch
    timestamp: detachable DATE_TIME
      -- Time when the order was executed as DateTime
    order_id_reference: INTEGER_64
      -- Order identifier reference
    sale_condition_flags: INTEGER_32
      -- Sale condition flags for the execution as byte value
    is_intermarket_sweep: BOOLEAN
      -- Bit 7 (Mask 0x80): Intermarket Sweep Flag  True: Intermarket Sweep Order (\"ISO\")  False: Non-Intermarket Sweep Order
    is_extended_hours_trade: BOOLEAN
      -- Bit 6 (Mask 0x40): Extended Hours Flag  True: Extended Hours Trade (i.e., Form T sale condition)  False: Regular Market Session Trade
    is_odd_lot_trade: BOOLEAN
      -- Bit 5 (Mask 0x20): Odd Lot Flag  True: Odd Lot Trade  False: Round or Mixed Lot Trade
    is_trade_through_exempt: BOOLEAN
      -- Bit 4 (Mask 0x10): Trade Through Exempt Flag  True: Trade is not subject to Rule 611 (Trade Through) of SEC Reg. NMS  False: Trade is subject to Rule 611 (Trade Through) of SEC Reg. NMS
    is_single_price_cross_trade: BOOLEAN
      -- Bit 3 (Mask 0x08): Single-price Cross Trade Flag  True: Trade resulting from a single-price cross  False: Execution during continuous trading
    size: INTEGER_32
      -- Trade volume in number of shares
    price: REAL_64
      -- Execution price as decimal
    trade_id: INTEGER_64
      -- IEX trade identifier

feature -- Change Element

    set_symbol (a_name: like symbol)
        -- Set 'symbol' with 'a_name'.
      do
        symbol := a_name
      ensure
        symbol_set: symbol = a_name
      end

    set_timestamp_nanos (a_name: like timestamp_nanos)
        -- Set 'timestamp_nanos' with 'a_name'.
      do
        timestamp_nanos := a_name
      ensure
        timestamp_nanos_set: timestamp_nanos = a_name
      end

    set_timestamp (a_name: like timestamp)
        -- Set 'timestamp' with 'a_name'.
      do
        timestamp := a_name
      ensure
        timestamp_set: timestamp = a_name
      end

    set_order_id_reference (a_name: like order_id_reference)
        -- Set 'order_id_reference' with 'a_name'.
      do
        order_id_reference := a_name
      ensure
        order_id_reference_set: order_id_reference = a_name
      end

    set_sale_condition_flags (a_name: like sale_condition_flags)
        -- Set 'sale_condition_flags' with 'a_name'.
      do
        sale_condition_flags := a_name
      ensure
        sale_condition_flags_set: sale_condition_flags = a_name
      end

    set_is_intermarket_sweep (a_name: like is_intermarket_sweep)
        -- Set 'is_intermarket_sweep' with 'a_name'.
      do
        is_intermarket_sweep := a_name
      ensure
        is_intermarket_sweep_set: is_intermarket_sweep = a_name
      end

    set_is_extended_hours_trade (a_name: like is_extended_hours_trade)
        -- Set 'is_extended_hours_trade' with 'a_name'.
      do
        is_extended_hours_trade := a_name
      ensure
        is_extended_hours_trade_set: is_extended_hours_trade = a_name
      end

    set_is_odd_lot_trade (a_name: like is_odd_lot_trade)
        -- Set 'is_odd_lot_trade' with 'a_name'.
      do
        is_odd_lot_trade := a_name
      ensure
        is_odd_lot_trade_set: is_odd_lot_trade = a_name
      end

    set_is_trade_through_exempt (a_name: like is_trade_through_exempt)
        -- Set 'is_trade_through_exempt' with 'a_name'.
      do
        is_trade_through_exempt := a_name
      ensure
        is_trade_through_exempt_set: is_trade_through_exempt = a_name
      end

    set_is_single_price_cross_trade (a_name: like is_single_price_cross_trade)
        -- Set 'is_single_price_cross_trade' with 'a_name'.
      do
        is_single_price_cross_trade := a_name
      ensure
        is_single_price_cross_trade_set: is_single_price_cross_trade = a_name
      end

    set_size (a_name: like size)
        -- Set 'size' with 'a_name'.
      do
        size := a_name
      ensure
        size_set: size = a_name
      end

    set_price (a_name: like price)
        -- Set 'price' with 'a_name'.
      do
        price := a_name
      ensure
        price_set: price = a_name
      end

    set_trade_id (a_name: like trade_id)
        -- Set 'trade_id' with 'a_name'.
      do
        trade_id := a_name
      ensure
        trade_id_set: trade_id = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass LEVEL3_EXECUTED_ORDER_MODEL%N")
        if attached symbol as l_symbol then
          Result.append ("%Nsymbol:")
          Result.append (l_symbol.out)
          Result.append ("%N")
        end
        if attached timestamp_nanos as l_timestamp_nanos then
          Result.append ("%Ntimestamp_nanos:")
          Result.append (l_timestamp_nanos.out)
          Result.append ("%N")
        end
        if attached timestamp as l_timestamp then
          Result.append ("%Ntimestamp:")
          Result.append (l_timestamp.out)
          Result.append ("%N")
        end
        if attached order_id_reference as l_order_id_reference then
          Result.append ("%Norder_id_reference:")
          Result.append (l_order_id_reference.out)
          Result.append ("%N")
        end
        if attached sale_condition_flags as l_sale_condition_flags then
          Result.append ("%Nsale_condition_flags:")
          Result.append (l_sale_condition_flags.out)
          Result.append ("%N")
        end
        if attached is_intermarket_sweep as l_is_intermarket_sweep then
          Result.append ("%Nis_intermarket_sweep:")
          Result.append (l_is_intermarket_sweep.out)
          Result.append ("%N")
        end
        if attached is_extended_hours_trade as l_is_extended_hours_trade then
          Result.append ("%Nis_extended_hours_trade:")
          Result.append (l_is_extended_hours_trade.out)
          Result.append ("%N")
        end
        if attached is_odd_lot_trade as l_is_odd_lot_trade then
          Result.append ("%Nis_odd_lot_trade:")
          Result.append (l_is_odd_lot_trade.out)
          Result.append ("%N")
        end
        if attached is_trade_through_exempt as l_is_trade_through_exempt then
          Result.append ("%Nis_trade_through_exempt:")
          Result.append (l_is_trade_through_exempt.out)
          Result.append ("%N")
        end
        if attached is_single_price_cross_trade as l_is_single_price_cross_trade then
          Result.append ("%Nis_single_price_cross_trade:")
          Result.append (l_is_single_price_cross_trade.out)
          Result.append ("%N")
        end
        if attached size as l_size then
          Result.append ("%Nsize:")
          Result.append (l_size.out)
          Result.append ("%N")
        end
        if attached price as l_price then
          Result.append ("%Nprice:")
          Result.append (l_price.out)
          Result.append ("%N")
        end
        if attached trade_id as l_trade_id then
          Result.append ("%Ntrade_id:")
          Result.append (l_trade_id.out)
          Result.append ("%N")
        end
      end
end

