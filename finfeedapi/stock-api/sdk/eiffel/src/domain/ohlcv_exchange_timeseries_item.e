note
 description:"[
		REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class OHLCV_EXCHANGE_TIMESERIES_ITEM




feature --Access

    time_period_start: detachable DATE_TIME
      -- Gets or sets the start time of the time period.
    time_period_end: detachable DATE_TIME
      -- Gets or sets the end time of the time period.
    time_open: detachable DATE_TIME
      -- Gets or sets the time when the price opened.
    time_close: detachable DATE_TIME
      -- Gets or sets the time when the price closed.
    price_open: REAL_64
      -- Gets or sets the opening price.
    price_high: REAL_64
      -- Gets or sets the highest price during the time period.
    price_low: REAL_64
      -- Gets or sets the lowest price during the time period.
    price_close: REAL_64
      -- Gets or sets the closing price.
    volume_traded: REAL_64
      -- Gets or sets the total volume traded during the time period.
    trades_count: INTEGER_64
      -- Gets or sets the number of trades executed during the time period.
    symbol_id_exchange: detachable STRING_32
      

feature -- Change Element

    set_time_period_start (a_name: like time_period_start)
        -- Set 'time_period_start' with 'a_name'.
      do
        time_period_start := a_name
      ensure
        time_period_start_set: time_period_start = a_name
      end

    set_time_period_end (a_name: like time_period_end)
        -- Set 'time_period_end' with 'a_name'.
      do
        time_period_end := a_name
      ensure
        time_period_end_set: time_period_end = a_name
      end

    set_time_open (a_name: like time_open)
        -- Set 'time_open' with 'a_name'.
      do
        time_open := a_name
      ensure
        time_open_set: time_open = a_name
      end

    set_time_close (a_name: like time_close)
        -- Set 'time_close' with 'a_name'.
      do
        time_close := a_name
      ensure
        time_close_set: time_close = a_name
      end

    set_price_open (a_name: like price_open)
        -- Set 'price_open' with 'a_name'.
      do
        price_open := a_name
      ensure
        price_open_set: price_open = a_name
      end

    set_price_high (a_name: like price_high)
        -- Set 'price_high' with 'a_name'.
      do
        price_high := a_name
      ensure
        price_high_set: price_high = a_name
      end

    set_price_low (a_name: like price_low)
        -- Set 'price_low' with 'a_name'.
      do
        price_low := a_name
      ensure
        price_low_set: price_low = a_name
      end

    set_price_close (a_name: like price_close)
        -- Set 'price_close' with 'a_name'.
      do
        price_close := a_name
      ensure
        price_close_set: price_close = a_name
      end

    set_volume_traded (a_name: like volume_traded)
        -- Set 'volume_traded' with 'a_name'.
      do
        volume_traded := a_name
      ensure
        volume_traded_set: volume_traded = a_name
      end

    set_trades_count (a_name: like trades_count)
        -- Set 'trades_count' with 'a_name'.
      do
        trades_count := a_name
      ensure
        trades_count_set: trades_count = a_name
      end

    set_symbol_id_exchange (a_name: like symbol_id_exchange)
        -- Set 'symbol_id_exchange' with 'a_name'.
      do
        symbol_id_exchange := a_name
      ensure
        symbol_id_exchange_set: symbol_id_exchange = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass OHLCV_EXCHANGE_TIMESERIES_ITEM%N")
        if attached time_period_start as l_time_period_start then
          Result.append ("%Ntime_period_start:")
          Result.append (l_time_period_start.out)
          Result.append ("%N")
        end
        if attached time_period_end as l_time_period_end then
          Result.append ("%Ntime_period_end:")
          Result.append (l_time_period_end.out)
          Result.append ("%N")
        end
        if attached time_open as l_time_open then
          Result.append ("%Ntime_open:")
          Result.append (l_time_open.out)
          Result.append ("%N")
        end
        if attached time_close as l_time_close then
          Result.append ("%Ntime_close:")
          Result.append (l_time_close.out)
          Result.append ("%N")
        end
        if attached price_open as l_price_open then
          Result.append ("%Nprice_open:")
          Result.append (l_price_open.out)
          Result.append ("%N")
        end
        if attached price_high as l_price_high then
          Result.append ("%Nprice_high:")
          Result.append (l_price_high.out)
          Result.append ("%N")
        end
        if attached price_low as l_price_low then
          Result.append ("%Nprice_low:")
          Result.append (l_price_low.out)
          Result.append ("%N")
        end
        if attached price_close as l_price_close then
          Result.append ("%Nprice_close:")
          Result.append (l_price_close.out)
          Result.append ("%N")
        end
        if attached volume_traded as l_volume_traded then
          Result.append ("%Nvolume_traded:")
          Result.append (l_volume_traded.out)
          Result.append ("%N")
        end
        if attached trades_count as l_trades_count then
          Result.append ("%Ntrades_count:")
          Result.append (l_trades_count.out)
          Result.append ("%N")
        end
        if attached symbol_id_exchange as l_symbol_id_exchange then
          Result.append ("%Nsymbol_id_exchange:")
          Result.append (l_symbol_id_exchange.out)
          Result.append ("%N")
        end
      end
end

