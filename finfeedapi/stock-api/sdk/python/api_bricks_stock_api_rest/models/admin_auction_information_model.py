# coding: utf-8

"""
    REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AdminAuctionInformationModel(BaseModel):
    """
    Represents the response DTO for auction information
    """ # noqa: E501
    symbol: Optional[StrictStr] = Field(default=None, description="The stock symbol")
    timestamp_nanos: Optional[StrictInt] = Field(default=None, description="Original timestamp in nanoseconds since epoch")
    timestamp: Optional[datetime] = Field(default=None, description="Time when the auction data was recorded as DateTime")
    auction_type: Optional[StrictInt] = Field(default=None, description="Type of auction as byte value")
    auction_type_code: Optional[StrictStr] = Field(default=None, description="Type of auction as character string")
    auction_type_text: Optional[StrictStr] = Field(default=None, description="Human-readable description of the auction type")
    is_auction_type_opening: Optional[StrictBool] = Field(default=None, description="Indicates if the auction type is 'Opening Auction' ('O'/0x4f).")
    is_auction_type_closing: Optional[StrictBool] = Field(default=None, description="Indicates if the auction type is 'Closing Auction' ('C'/0x43).")
    is_auction_type_ipo: Optional[StrictBool] = Field(default=None, description="Indicates if the auction type is 'IPO Auction' ('I'/0x49).")
    is_auction_type_halt: Optional[StrictBool] = Field(default=None, description="Indicates if the auction type is 'Halt Auction' ('H'/0x48).")
    is_auction_type_volatility: Optional[StrictBool] = Field(default=None, description="Indicates if the auction type is 'Volatility Auction' ('V'/0x56).")
    paired_shares: Optional[StrictInt] = Field(default=None, description="Number of shares paired at the Reference Price")
    reference_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Reference price as decimal")
    indicative_clearing_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Indicative clearing price as decimal")
    imbalance_shares: Optional[StrictInt] = Field(default=None, description="Number of unpaired shares at the Reference Price")
    imbalance_side: Optional[StrictInt] = Field(default=None, description="Side of the imbalance as byte value")
    imbalance_side_code: Optional[StrictStr] = Field(default=None, description="Side of the imbalance as character string")
    imbalance_side_text: Optional[StrictStr] = Field(default=None, description="Human-readable description of the imbalance side")
    is_imbalance_side_buy: Optional[StrictBool] = Field(default=None, description="Indicates if there is a buy-side imbalance ('B'/0x42).")
    is_imbalance_side_sell: Optional[StrictBool] = Field(default=None, description="Indicates if there is a sell-side imbalance ('S'/0x53).")
    is_imbalance_side_none: Optional[StrictBool] = Field(default=None, description="Indicates if there is no imbalance ('N'/0x4e).")
    extension_number: Optional[StrictInt] = Field(default=None, description="Number of extensions to the auction")
    scheduled_auction_time_seconds: Optional[StrictInt] = Field(default=None, description="Scheduled auction time in seconds since epoch")
    scheduled_auction_time: Optional[datetime] = Field(default=None, description="Scheduled time for the auction as DateTime")
    auction_book_clearing_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Auction book clearing price as decimal")
    collar_reference_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Collar reference price as decimal")
    lower_auction_collar: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Lower auction collar as decimal")
    upper_auction_collar: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Upper auction collar as decimal")
    __properties: ClassVar[List[str]] = ["symbol", "timestamp_nanos", "timestamp", "auction_type", "auction_type_code", "auction_type_text", "is_auction_type_opening", "is_auction_type_closing", "is_auction_type_ipo", "is_auction_type_halt", "is_auction_type_volatility", "paired_shares", "reference_price", "indicative_clearing_price", "imbalance_shares", "imbalance_side", "imbalance_side_code", "imbalance_side_text", "is_imbalance_side_buy", "is_imbalance_side_sell", "is_imbalance_side_none", "extension_number", "scheduled_auction_time_seconds", "scheduled_auction_time", "auction_book_clearing_price", "collar_reference_price", "lower_auction_collar", "upper_auction_collar"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdminAuctionInformationModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if symbol (nullable) is None
        # and model_fields_set contains the field
        if self.symbol is None and "symbol" in self.model_fields_set:
            _dict['symbol'] = None

        # set to None if auction_type_code (nullable) is None
        # and model_fields_set contains the field
        if self.auction_type_code is None and "auction_type_code" in self.model_fields_set:
            _dict['auction_type_code'] = None

        # set to None if auction_type_text (nullable) is None
        # and model_fields_set contains the field
        if self.auction_type_text is None and "auction_type_text" in self.model_fields_set:
            _dict['auction_type_text'] = None

        # set to None if imbalance_side_code (nullable) is None
        # and model_fields_set contains the field
        if self.imbalance_side_code is None and "imbalance_side_code" in self.model_fields_set:
            _dict['imbalance_side_code'] = None

        # set to None if imbalance_side_text (nullable) is None
        # and model_fields_set contains the field
        if self.imbalance_side_text is None and "imbalance_side_text" in self.model_fields_set:
            _dict['imbalance_side_text'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdminAuctionInformationModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "timestamp_nanos": obj.get("timestamp_nanos"),
            "timestamp": obj.get("timestamp"),
            "auction_type": obj.get("auction_type"),
            "auction_type_code": obj.get("auction_type_code"),
            "auction_type_text": obj.get("auction_type_text"),
            "is_auction_type_opening": obj.get("is_auction_type_opening"),
            "is_auction_type_closing": obj.get("is_auction_type_closing"),
            "is_auction_type_ipo": obj.get("is_auction_type_ipo"),
            "is_auction_type_halt": obj.get("is_auction_type_halt"),
            "is_auction_type_volatility": obj.get("is_auction_type_volatility"),
            "paired_shares": obj.get("paired_shares"),
            "reference_price": obj.get("reference_price"),
            "indicative_clearing_price": obj.get("indicative_clearing_price"),
            "imbalance_shares": obj.get("imbalance_shares"),
            "imbalance_side": obj.get("imbalance_side"),
            "imbalance_side_code": obj.get("imbalance_side_code"),
            "imbalance_side_text": obj.get("imbalance_side_text"),
            "is_imbalance_side_buy": obj.get("is_imbalance_side_buy"),
            "is_imbalance_side_sell": obj.get("is_imbalance_side_sell"),
            "is_imbalance_side_none": obj.get("is_imbalance_side_none"),
            "extension_number": obj.get("extension_number"),
            "scheduled_auction_time_seconds": obj.get("scheduled_auction_time_seconds"),
            "scheduled_auction_time": obj.get("scheduled_auction_time"),
            "auction_book_clearing_price": obj.get("auction_book_clearing_price"),
            "collar_reference_price": obj.get("collar_reference_price"),
            "lower_auction_collar": obj.get("lower_auction_collar"),
            "upper_auction_collar": obj.get("upper_auction_collar")
        })
        return _obj


