# coding: utf-8

"""
    REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdminSystemEventModel(BaseModel):
    """
    Represents the response DTO for system event information
    """ # noqa: E501
    timestamp_nanos: Optional[StrictInt] = Field(default=None, description="Original timestamp in nanoseconds since epoch")
    timestamp: Optional[datetime] = Field(default=None, description="Time when the system event was recorded as DateTime")
    system_event: Optional[StrictInt] = Field(default=None, description="System event as byte value")
    system_event_code: Optional[StrictStr] = Field(default=None, description="System event as string")
    system_event_text: Optional[StrictStr] = Field(default=None, description="Human-readable description of the system event")
    is_system_event_start_of_messages: Optional[StrictBool] = Field(default=None, description="Indicates if the system event is 'Start of Messages' (O).  Outside of heartbeat messages on the lower level protocol,   the start of day message is the first message sent in any trading session.")
    is_system_event_start_of_system_hours: Optional[StrictBool] = Field(default=None, description="Indicates if the system event is 'Start of System Hours' (S).  This message indicates that IEX is open and ready to start accepting orders.")
    is_system_event_start_of_regular_market_hours: Optional[StrictBool] = Field(default=None, description="Indicates if the system event is 'Start of Regular Market Hours' (R).  This message indicates that DAY and GTX orders, as well as market orders and pegged orders,   are available for execution on IEX.")
    is_system_event_end_of_regular_market_hours: Optional[StrictBool] = Field(default=None, description="Indicates if the system event is 'End of Regular Market Hours' (M).  This message indicates that DAY orders, market orders, and pegged orders   are no longer accepted by IEX.")
    is_system_event_end_of_system_hours: Optional[StrictBool] = Field(default=None, description="Indicates if the system event is 'End of System Hours' (E).  This message indicates that IEX is now closed and will not accept   any new orders during this trading session. It is still possible   to receive messages after the end of day.")
    is_system_event_end_of_messages: Optional[StrictBool] = Field(default=None, description="Indicates if the system event is 'End of Messages' (C).  This is always the last message sent in any trading session.")
    __properties: ClassVar[List[str]] = ["timestamp_nanos", "timestamp", "system_event", "system_event_code", "system_event_text", "is_system_event_start_of_messages", "is_system_event_start_of_system_hours", "is_system_event_start_of_regular_market_hours", "is_system_event_end_of_regular_market_hours", "is_system_event_end_of_system_hours", "is_system_event_end_of_messages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdminSystemEventModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if system_event_code (nullable) is None
        # and model_fields_set contains the field
        if self.system_event_code is None and "system_event_code" in self.model_fields_set:
            _dict['system_event_code'] = None

        # set to None if system_event_text (nullable) is None
        # and model_fields_set contains the field
        if self.system_event_text is None and "system_event_text" in self.model_fields_set:
            _dict['system_event_text'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdminSystemEventModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "timestamp_nanos": obj.get("timestamp_nanos"),
            "timestamp": obj.get("timestamp"),
            "system_event": obj.get("system_event"),
            "system_event_code": obj.get("system_event_code"),
            "system_event_text": obj.get("system_event_text"),
            "is_system_event_start_of_messages": obj.get("is_system_event_start_of_messages"),
            "is_system_event_start_of_system_hours": obj.get("is_system_event_start_of_system_hours"),
            "is_system_event_start_of_regular_market_hours": obj.get("is_system_event_start_of_regular_market_hours"),
            "is_system_event_end_of_regular_market_hours": obj.get("is_system_event_end_of_regular_market_hours"),
            "is_system_event_end_of_system_hours": obj.get("is_system_event_end_of_system_hours"),
            "is_system_event_end_of_messages": obj.get("is_system_event_end_of_messages")
        })
        return _obj


