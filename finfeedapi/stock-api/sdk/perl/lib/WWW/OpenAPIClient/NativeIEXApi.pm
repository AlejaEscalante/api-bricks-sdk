=begin comment

REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Contact: support@apibricks.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::NativeIEXApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# v1_native_iex_admin_messages_symbol_get
#
# Get Admin Messages
#
# @param string $symbol The symbol identifier (required)
# @param DATE_TIME $date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
{
    my $params = {
    'symbol' => {
        data_type => 'string',
        description => 'The symbol identifier',
        required => '1',
    },
    'date' => {
        data_type => 'DATE_TIME',
        description => 'Optional date in format YYYY-MM-DD (defaults to latest available data)',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1_native_iex_admin_messages_symbol_get' } = {
        summary => 'Get Admin Messages',
        params => $params,
        returns => 'ARRAY[AdminAdminMessageModel]',
        };
}
# @return ARRAY[AdminAdminMessageModel]
#
sub v1_native_iex_admin_messages_symbol_get {
    my ($self, %args) = @_;

    # verify the required parameter 'symbol' is set
    unless (exists $args{'symbol'}) {
      croak("Missing the required parameter 'symbol' when calling v1_native_iex_admin_messages_symbol_get");
    }

    # verify the required parameter 'date' is set
    unless (exists $args{'date'}) {
      croak("Missing the required parameter 'date' when calling v1_native_iex_admin_messages_symbol_get");
    }

    # parse inputs
    my $_resource_path = '/v1/native/iex/admin/messages/{symbol}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    # path params
    if ( exists $args{'symbol'}) {
        my $_base_variable = "{" . "symbol" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'symbol'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[AdminAdminMessageModel]', $response);
    return $_response_object;
}

#
# v1_native_iex_admin_system_event_get
#
# Get System Events
#
# @param DATE_TIME $date Date in format YYYY-MM-DD (required)
{
    my $params = {
    'date' => {
        data_type => 'DATE_TIME',
        description => 'Date in format YYYY-MM-DD',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1_native_iex_admin_system_event_get' } = {
        summary => 'Get System Events',
        params => $params,
        returns => 'ARRAY[AdminSystemEventModel]',
        };
}
# @return ARRAY[AdminSystemEventModel]
#
sub v1_native_iex_admin_system_event_get {
    my ($self, %args) = @_;

    # verify the required parameter 'date' is set
    unless (exists $args{'date'}) {
      croak("Missing the required parameter 'date' when calling v1_native_iex_admin_system_event_get");
    }

    # parse inputs
    my $_resource_path = '/v1/native/iex/admin/system-event';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[AdminSystemEventModel]', $response);
    return $_response_object;
}

#
# v1_native_iex_level1_quote_symbol_get
#
# Get Level-1 Quotes
#
# @param string $symbol The symbol identifier (required)
# @param DATE_TIME $date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
{
    my $params = {
    'symbol' => {
        data_type => 'string',
        description => 'The symbol identifier',
        required => '1',
    },
    'date' => {
        data_type => 'DATE_TIME',
        description => 'Optional date in format YYYY-MM-DD (defaults to latest available data)',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1_native_iex_level1_quote_symbol_get' } = {
        summary => 'Get Level-1 Quotes',
        params => $params,
        returns => 'ARRAY[Level1QuoteUpdateModel]',
        };
}
# @return ARRAY[Level1QuoteUpdateModel]
#
sub v1_native_iex_level1_quote_symbol_get {
    my ($self, %args) = @_;

    # verify the required parameter 'symbol' is set
    unless (exists $args{'symbol'}) {
      croak("Missing the required parameter 'symbol' when calling v1_native_iex_level1_quote_symbol_get");
    }

    # verify the required parameter 'date' is set
    unless (exists $args{'date'}) {
      croak("Missing the required parameter 'date' when calling v1_native_iex_level1_quote_symbol_get");
    }

    # parse inputs
    my $_resource_path = '/v1/native/iex/level1-quote/{symbol}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    # path params
    if ( exists $args{'symbol'}) {
        my $_base_variable = "{" . "symbol" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'symbol'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Level1QuoteUpdateModel]', $response);
    return $_response_object;
}

#
# v1_native_iex_level2_price_level_update_symbol_get
#
# Get Level-2 Price Level Book
#
# @param string $symbol The symbol identifier (required)
# @param DATE_TIME $date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
{
    my $params = {
    'symbol' => {
        data_type => 'string',
        description => 'The symbol identifier',
        required => '1',
    },
    'date' => {
        data_type => 'DATE_TIME',
        description => 'Optional date in format YYYY-MM-DD (defaults to latest available data)',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1_native_iex_level2_price_level_update_symbol_get' } = {
        summary => 'Get Level-2 Price Level Book',
        params => $params,
        returns => 'ARRAY[Level2PriceLevelUpdateModel]',
        };
}
# @return ARRAY[Level2PriceLevelUpdateModel]
#
sub v1_native_iex_level2_price_level_update_symbol_get {
    my ($self, %args) = @_;

    # verify the required parameter 'symbol' is set
    unless (exists $args{'symbol'}) {
      croak("Missing the required parameter 'symbol' when calling v1_native_iex_level2_price_level_update_symbol_get");
    }

    # verify the required parameter 'date' is set
    unless (exists $args{'date'}) {
      croak("Missing the required parameter 'date' when calling v1_native_iex_level2_price_level_update_symbol_get");
    }

    # parse inputs
    my $_resource_path = '/v1/native/iex/level2-price-level-update/{symbol}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    # path params
    if ( exists $args{'symbol'}) {
        my $_base_variable = "{" . "symbol" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'symbol'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Level2PriceLevelUpdateModel]', $response);
    return $_response_object;
}

#
# v1_native_iex_level3_order_book_symbol_get
#
# Get Level-3 Order Book
#
# @param string $symbol The symbol identifier (required)
# @param DATE_TIME $date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
{
    my $params = {
    'symbol' => {
        data_type => 'string',
        description => 'The symbol identifier',
        required => '1',
    },
    'date' => {
        data_type => 'DATE_TIME',
        description => 'Optional date in format YYYY-MM-DD (defaults to latest available data)',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1_native_iex_level3_order_book_symbol_get' } = {
        summary => 'Get Level-3 Order Book',
        params => $params,
        returns => 'ARRAY[Level3OrderBookModel]',
        };
}
# @return ARRAY[Level3OrderBookModel]
#
sub v1_native_iex_level3_order_book_symbol_get {
    my ($self, %args) = @_;

    # verify the required parameter 'symbol' is set
    unless (exists $args{'symbol'}) {
      croak("Missing the required parameter 'symbol' when calling v1_native_iex_level3_order_book_symbol_get");
    }

    # verify the required parameter 'date' is set
    unless (exists $args{'date'}) {
      croak("Missing the required parameter 'date' when calling v1_native_iex_level3_order_book_symbol_get");
    }

    # parse inputs
    my $_resource_path = '/v1/native/iex/level3-order-book/{symbol}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    # path params
    if ( exists $args{'symbol'}) {
        my $_base_variable = "{" . "symbol" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'symbol'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Level3OrderBookModel]', $response);
    return $_response_object;
}

#
# v1_native_iex_trade_symbol_get
#
# Get Trades
#
# @param string $symbol The symbol identifier (required)
# @param DATE_TIME $date Optional date in format YYYY-MM-DD (defaults to latest available data) (required)
{
    my $params = {
    'symbol' => {
        data_type => 'string',
        description => 'The symbol identifier',
        required => '1',
    },
    'date' => {
        data_type => 'DATE_TIME',
        description => 'Optional date in format YYYY-MM-DD (defaults to latest available data)',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1_native_iex_trade_symbol_get' } = {
        summary => 'Get Trades',
        params => $params,
        returns => 'ARRAY[TradeTradeModel]',
        };
}
# @return ARRAY[TradeTradeModel]
#
sub v1_native_iex_trade_symbol_get {
    my ($self, %args) = @_;

    # verify the required parameter 'symbol' is set
    unless (exists $args{'symbol'}) {
      croak("Missing the required parameter 'symbol' when calling v1_native_iex_trade_symbol_get");
    }

    # verify the required parameter 'date' is set
    unless (exists $args{'date'}) {
      croak("Missing the required parameter 'date' when calling v1_native_iex_trade_symbol_get");
    }

    # parse inputs
    my $_resource_path = '/v1/native/iex/trade/{symbol}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    # path params
    if ( exists $args{'symbol'}) {
        my $_base_variable = "{" . "symbol" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'symbol'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[TradeTradeModel]', $response);
    return $_response_object;
}

1;
