/*
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Represents a timeseries item with price and volume information.
 */
public class OASOHLCVExchangeTimeseriesItem implements OAS.MappedProperties {
    /**
     * Gets or sets the start time of the time period.
     * @return timePeriodStart
     */
    public Datetime timePeriodStart { get; set; }

    /**
     * Gets or sets the end time of the time period.
     * @return timePeriodEnd
     */
    public Datetime timePeriodEnd { get; set; }

    /**
     * Gets or sets the time when the price opened.
     * @return timeOpen
     */
    public Datetime timeOpen { get; set; }

    /**
     * Gets or sets the time when the price closed.
     * @return timeClose
     */
    public Datetime timeClose { get; set; }

    /**
     * Gets or sets the opening price.
     * @return priceOpen
     */
    public Double priceOpen { get; set; }

    /**
     * Gets or sets the highest price during the time period.
     * @return priceHigh
     */
    public Double priceHigh { get; set; }

    /**
     * Gets or sets the lowest price during the time period.
     * @return priceLow
     */
    public Double priceLow { get; set; }

    /**
     * Gets or sets the closing price.
     * @return priceClose
     */
    public Double priceClose { get; set; }

    /**
     * Gets or sets the total volume traded during the time period.
     * @return volumeTraded
     */
    public Double volumeTraded { get; set; }

    /**
     * Gets or sets the number of trades executed during the time period.
     * @return tradesCount
     */
    public Long tradesCount { get; set; }

    /**
     * Get symbolIdExchange
     * @return symbolIdExchange
     */
    public String symbolIdExchange { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'time_period_start' => 'timePeriodStart',
        'time_period_end' => 'timePeriodEnd',
        'time_open' => 'timeOpen',
        'time_close' => 'timeClose',
        'price_open' => 'priceOpen',
        'price_high' => 'priceHigh',
        'price_low' => 'priceLow',
        'price_close' => 'priceClose',
        'volume_traded' => 'volumeTraded',
        'trades_count' => 'tradesCount',
        'symbol_id_exchange' => 'symbolIdExchange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'time_period_start' => 'timePeriodStart',
        'time_period_end' => 'timePeriodEnd',
        'time_open' => 'timeOpen',
        'time_close' => 'timeClose',
        'price_open' => 'priceOpen',
        'price_high' => 'priceHigh',
        'price_low' => 'priceLow',
        'price_close' => 'priceClose',
        'volume_traded' => 'volumeTraded',
        'trades_count' => 'tradesCount',
        'symbol_id_exchange' => 'symbolIdExchange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'time_period_start' => 'timePeriodStart',
        'time_period_end' => 'timePeriodEnd',
        'time_open' => 'timeOpen',
        'time_close' => 'timeClose',
        'price_open' => 'priceOpen',
        'price_high' => 'priceHigh',
        'price_low' => 'priceLow',
        'price_close' => 'priceClose',
        'volume_traded' => 'volumeTraded',
        'trades_count' => 'tradesCount',
        'symbol_id_exchange' => 'symbolIdExchange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'time_period_start' => 'timePeriodStart',
        'time_period_end' => 'timePeriodEnd',
        'time_open' => 'timeOpen',
        'time_close' => 'timeClose',
        'price_open' => 'priceOpen',
        'price_high' => 'priceHigh',
        'price_low' => 'priceLow',
        'price_close' => 'priceClose',
        'volume_traded' => 'volumeTraded',
        'trades_count' => 'tradesCount',
        'symbol_id_exchange' => 'symbolIdExchange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'time_period_start' => 'timePeriodStart',
        'time_period_end' => 'timePeriodEnd',
        'time_open' => 'timeOpen',
        'time_close' => 'timeClose',
        'price_open' => 'priceOpen',
        'price_high' => 'priceHigh',
        'price_low' => 'priceLow',
        'price_close' => 'priceClose',
        'volume_traded' => 'volumeTraded',
        'trades_count' => 'tradesCount',
        'symbol_id_exchange' => 'symbolIdExchange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'time_period_start' => 'timePeriodStart',
        'time_period_end' => 'timePeriodEnd',
        'time_open' => 'timeOpen',
        'time_close' => 'timeClose',
        'price_open' => 'priceOpen',
        'price_high' => 'priceHigh',
        'price_low' => 'priceLow',
        'price_close' => 'priceClose',
        'volume_traded' => 'volumeTraded',
        'trades_count' => 'tradesCount',
        'symbol_id_exchange' => 'symbolIdExchange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'time_period_start' => 'timePeriodStart',
        'time_period_end' => 'timePeriodEnd',
        'time_open' => 'timeOpen',
        'time_close' => 'timeClose',
        'price_open' => 'priceOpen',
        'price_high' => 'priceHigh',
        'price_low' => 'priceLow',
        'price_close' => 'priceClose',
        'volume_traded' => 'volumeTraded',
        'trades_count' => 'tradesCount',
        'symbol_id_exchange' => 'symbolIdExchange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'time_period_start' => 'timePeriodStart',
        'time_period_end' => 'timePeriodEnd',
        'time_open' => 'timeOpen',
        'time_close' => 'timeClose',
        'price_open' => 'priceOpen',
        'price_high' => 'priceHigh',
        'price_low' => 'priceLow',
        'price_close' => 'priceClose',
        'volume_traded' => 'volumeTraded',
        'trades_count' => 'tradesCount',
        'symbol_id_exchange' => 'symbolIdExchange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'time_period_start' => 'timePeriodStart',
        'time_period_end' => 'timePeriodEnd',
        'time_open' => 'timeOpen',
        'time_close' => 'timeClose',
        'price_open' => 'priceOpen',
        'price_high' => 'priceHigh',
        'price_low' => 'priceLow',
        'price_close' => 'priceClose',
        'volume_traded' => 'volumeTraded',
        'trades_count' => 'tradesCount',
        'symbol_id_exchange' => 'symbolIdExchange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'time_period_start' => 'timePeriodStart',
        'time_period_end' => 'timePeriodEnd',
        'time_open' => 'timeOpen',
        'time_close' => 'timeClose',
        'price_open' => 'priceOpen',
        'price_high' => 'priceHigh',
        'price_low' => 'priceLow',
        'price_close' => 'priceClose',
        'volume_traded' => 'volumeTraded',
        'trades_count' => 'tradesCount',
        'symbol_id_exchange' => 'symbolIdExchange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'time_period_start' => 'timePeriodStart',
        'time_period_end' => 'timePeriodEnd',
        'time_open' => 'timeOpen',
        'time_close' => 'timeClose',
        'price_open' => 'priceOpen',
        'price_high' => 'priceHigh',
        'price_low' => 'priceLow',
        'price_close' => 'priceClose',
        'volume_traded' => 'volumeTraded',
        'trades_count' => 'tradesCount',
        'symbol_id_exchange' => 'symbolIdExchange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASOHLCVExchangeTimeseriesItem getExample() {
        OASOHLCVExchangeTimeseriesItem ohLCVExchangeTimeseriesItem = new OASOHLCVExchangeTimeseriesItem();
          ohLCVExchangeTimeseriesItem.timePeriodStart = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          ohLCVExchangeTimeseriesItem.timePeriodEnd = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          ohLCVExchangeTimeseriesItem.timeOpen = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          ohLCVExchangeTimeseriesItem.timeClose = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          ohLCVExchangeTimeseriesItem.priceOpen = 1.3579;
          ohLCVExchangeTimeseriesItem.priceHigh = 1.3579;
          ohLCVExchangeTimeseriesItem.priceLow = 1.3579;
          ohLCVExchangeTimeseriesItem.priceClose = 1.3579;
          ohLCVExchangeTimeseriesItem.volumeTraded = 1.3579;
          ohLCVExchangeTimeseriesItem.tradesCount = 123456789L;
          ohLCVExchangeTimeseriesItem.symbolIdExchange = '';
        return ohLCVExchangeTimeseriesItem;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOHLCVExchangeTimeseriesItem) {           
            OASOHLCVExchangeTimeseriesItem ohLCVExchangeTimeseriesItem = (OASOHLCVExchangeTimeseriesItem) obj;
            return this.timePeriodStart == ohLCVExchangeTimeseriesItem.timePeriodStart
                && this.timePeriodEnd == ohLCVExchangeTimeseriesItem.timePeriodEnd
                && this.timeOpen == ohLCVExchangeTimeseriesItem.timeOpen
                && this.timeClose == ohLCVExchangeTimeseriesItem.timeClose
                && this.priceOpen == ohLCVExchangeTimeseriesItem.priceOpen
                && this.priceHigh == ohLCVExchangeTimeseriesItem.priceHigh
                && this.priceLow == ohLCVExchangeTimeseriesItem.priceLow
                && this.priceClose == ohLCVExchangeTimeseriesItem.priceClose
                && this.volumeTraded == ohLCVExchangeTimeseriesItem.volumeTraded
                && this.tradesCount == ohLCVExchangeTimeseriesItem.tradesCount
                && this.symbolIdExchange == ohLCVExchangeTimeseriesItem.symbolIdExchange;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (timePeriodStart == null ? 0 : System.hashCode(timePeriodStart));
        hashCode = (17 * hashCode) + (timePeriodEnd == null ? 0 : System.hashCode(timePeriodEnd));
        hashCode = (17 * hashCode) + (timeOpen == null ? 0 : System.hashCode(timeOpen));
        hashCode = (17 * hashCode) + (timeClose == null ? 0 : System.hashCode(timeClose));
        hashCode = (17 * hashCode) + (priceOpen == null ? 0 : System.hashCode(priceOpen));
        hashCode = (17 * hashCode) + (priceHigh == null ? 0 : System.hashCode(priceHigh));
        hashCode = (17 * hashCode) + (priceLow == null ? 0 : System.hashCode(priceLow));
        hashCode = (17 * hashCode) + (priceClose == null ? 0 : System.hashCode(priceClose));
        hashCode = (17 * hashCode) + (volumeTraded == null ? 0 : System.hashCode(volumeTraded));
        hashCode = (17 * hashCode) + (tradesCount == null ? 0 : System.hashCode(tradesCount));
        hashCode = (17 * hashCode) + (symbolIdExchange == null ? 0 : System.hashCode(symbolIdExchange));
        return hashCode;
    }
}

