/*
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Represents the response DTO for a single trade event (report or break).
 */
public class OASTradeTradeModel implements OAS.MappedProperties {
    /**
     * Indicates if this record represents a trade break (true) or a trade report (false).
     * @return isTradeBreak
     */
    public Boolean isTradeBreak { get; set; }

    /**
     * The stock symbol.
     * @return symbol
     */
    public String symbol { get; set; }

    /**
     * Original timestamp in nanoseconds since epoch.
     * @return timestampNanos
     */
    public Long timestampNanos { get; set; }

    /**
     * Time when the event was recorded as DateTime (UTC).
     * @return timestamp
     */
    public Datetime timestamp { get; set; }

    /**
     * Trade volume (or break volume) in number of shares.
     * @return size
     */
    public Integer size { get; set; }

    /**
     * Trade price (or break price) as decimal.
     * @return price
     */
    public Double price { get; set; }

    /**
     * IEX trade identifier (same for report and its corresponding break).
     * @return tradeId
     */
    public Long tradeId { get; set; }

    /**
     * Bit 7 (Mask 0x80): Intermarket Sweep Flag.\r\nTrue: Intermarket Sweep Order ("ISO").\r\nFalse: Non-Intermarket Sweep Order.
     * @return isIntermarketSweep
     */
    public Boolean isIntermarketSweep { get; set; }

    /**
     * Bit 6 (Mask 0x40): Extended Hours Flag.\r\nTrue: Extended Hours Trade (i.e., Form T sale condition).\r\nFalse: Regular Market Session Trade.
     * @return isExtendedHoursTrade
     */
    public Boolean isExtendedHoursTrade { get; set; }

    /**
     * Bit 5 (Mask 0x20): Odd Lot Flag.\r\nTrue: Odd Lot Trade.\r\nFalse: Round or Mixed Lot Trade.
     * @return isOddLotTrade
     */
    public Boolean isOddLotTrade { get; set; }

    /**
     * Bit 4 (Mask 0x10): Trade Through Exempt Flag.\r\nTrue: Trade is not subject to Rule 611 (Trade Through) of SEC Reg. NMS.\r\nFalse: Trade is subject to Rule 611 (Trade Through) of SEC Reg. NMS.\r\nApplied when the taking order was an ISO that traded through a protected quotation,\r\nOR the NBBO was crossed at the time of the trade,\r\nOR the trade occurred through a self-helped venue\'s quotation,\r\nOR the trade was a single-price cross.
     * @return isTradeThroughExempt
     */
    public Boolean isTradeThroughExempt { get; set; }

    /**
     * Bit 3 (Mask 0x08): Single-price Cross Trade Flag.\r\nTrue: Trade resulting from a single-price cross.\r\nFalse: Execution during continuous trading.
     * @return isSinglePriceCrossTrade
     */
    public Boolean isSinglePriceCrossTrade { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_trade_break' => 'isTradeBreak',
        'timestamp_nanos' => 'timestampNanos',
        'trade_id' => 'tradeId',
        'is_intermarket_sweep' => 'isIntermarketSweep',
        'is_extended_hours_trade' => 'isExtendedHoursTrade',
        'is_odd_lot_trade' => 'isOddLotTrade',
        'is_trade_through_exempt' => 'isTradeThroughExempt',
        'is_single_price_cross_trade' => 'isSinglePriceCrossTrade'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_trade_break' => 'isTradeBreak',
        'timestamp_nanos' => 'timestampNanos',
        'trade_id' => 'tradeId',
        'is_intermarket_sweep' => 'isIntermarketSweep',
        'is_extended_hours_trade' => 'isExtendedHoursTrade',
        'is_odd_lot_trade' => 'isOddLotTrade',
        'is_trade_through_exempt' => 'isTradeThroughExempt',
        'is_single_price_cross_trade' => 'isSinglePriceCrossTrade'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_trade_break' => 'isTradeBreak',
        'timestamp_nanos' => 'timestampNanos',
        'trade_id' => 'tradeId',
        'is_intermarket_sweep' => 'isIntermarketSweep',
        'is_extended_hours_trade' => 'isExtendedHoursTrade',
        'is_odd_lot_trade' => 'isOddLotTrade',
        'is_trade_through_exempt' => 'isTradeThroughExempt',
        'is_single_price_cross_trade' => 'isSinglePriceCrossTrade'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_trade_break' => 'isTradeBreak',
        'timestamp_nanos' => 'timestampNanos',
        'trade_id' => 'tradeId',
        'is_intermarket_sweep' => 'isIntermarketSweep',
        'is_extended_hours_trade' => 'isExtendedHoursTrade',
        'is_odd_lot_trade' => 'isOddLotTrade',
        'is_trade_through_exempt' => 'isTradeThroughExempt',
        'is_single_price_cross_trade' => 'isSinglePriceCrossTrade'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_trade_break' => 'isTradeBreak',
        'timestamp_nanos' => 'timestampNanos',
        'trade_id' => 'tradeId',
        'is_intermarket_sweep' => 'isIntermarketSweep',
        'is_extended_hours_trade' => 'isExtendedHoursTrade',
        'is_odd_lot_trade' => 'isOddLotTrade',
        'is_trade_through_exempt' => 'isTradeThroughExempt',
        'is_single_price_cross_trade' => 'isSinglePriceCrossTrade'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_trade_break' => 'isTradeBreak',
        'timestamp_nanos' => 'timestampNanos',
        'trade_id' => 'tradeId',
        'is_intermarket_sweep' => 'isIntermarketSweep',
        'is_extended_hours_trade' => 'isExtendedHoursTrade',
        'is_odd_lot_trade' => 'isOddLotTrade',
        'is_trade_through_exempt' => 'isTradeThroughExempt',
        'is_single_price_cross_trade' => 'isSinglePriceCrossTrade'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_trade_break' => 'isTradeBreak',
        'timestamp_nanos' => 'timestampNanos',
        'trade_id' => 'tradeId',
        'is_intermarket_sweep' => 'isIntermarketSweep',
        'is_extended_hours_trade' => 'isExtendedHoursTrade',
        'is_odd_lot_trade' => 'isOddLotTrade',
        'is_trade_through_exempt' => 'isTradeThroughExempt',
        'is_single_price_cross_trade' => 'isSinglePriceCrossTrade'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_trade_break' => 'isTradeBreak',
        'timestamp_nanos' => 'timestampNanos',
        'trade_id' => 'tradeId',
        'is_intermarket_sweep' => 'isIntermarketSweep',
        'is_extended_hours_trade' => 'isExtendedHoursTrade',
        'is_odd_lot_trade' => 'isOddLotTrade',
        'is_trade_through_exempt' => 'isTradeThroughExempt',
        'is_single_price_cross_trade' => 'isSinglePriceCrossTrade'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASTradeTradeModel getExample() {
        OASTradeTradeModel tradeTradeModel = new OASTradeTradeModel();
          tradeTradeModel.isTradeBreak = true;
          tradeTradeModel.symbol = '';
          tradeTradeModel.timestampNanos = 123456789L;
          tradeTradeModel.timestamp = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          tradeTradeModel.size = 0;
          tradeTradeModel.price = 1.3579;
          tradeTradeModel.tradeId = 123456789L;
          tradeTradeModel.isIntermarketSweep = true;
          tradeTradeModel.isExtendedHoursTrade = true;
          tradeTradeModel.isOddLotTrade = true;
          tradeTradeModel.isTradeThroughExempt = true;
          tradeTradeModel.isSinglePriceCrossTrade = true;
        return tradeTradeModel;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASTradeTradeModel) {           
            OASTradeTradeModel tradeTradeModel = (OASTradeTradeModel) obj;
            return this.isTradeBreak == tradeTradeModel.isTradeBreak
                && this.symbol == tradeTradeModel.symbol
                && this.timestampNanos == tradeTradeModel.timestampNanos
                && this.timestamp == tradeTradeModel.timestamp
                && this.size == tradeTradeModel.size
                && this.price == tradeTradeModel.price
                && this.tradeId == tradeTradeModel.tradeId
                && this.isIntermarketSweep == tradeTradeModel.isIntermarketSweep
                && this.isExtendedHoursTrade == tradeTradeModel.isExtendedHoursTrade
                && this.isOddLotTrade == tradeTradeModel.isOddLotTrade
                && this.isTradeThroughExempt == tradeTradeModel.isTradeThroughExempt
                && this.isSinglePriceCrossTrade == tradeTradeModel.isSinglePriceCrossTrade;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (isTradeBreak == null ? 0 : System.hashCode(isTradeBreak));
        hashCode = (17 * hashCode) + (symbol == null ? 0 : System.hashCode(symbol));
        hashCode = (17 * hashCode) + (timestampNanos == null ? 0 : System.hashCode(timestampNanos));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        hashCode = (17 * hashCode) + (size == null ? 0 : System.hashCode(size));
        hashCode = (17 * hashCode) + (price == null ? 0 : System.hashCode(price));
        hashCode = (17 * hashCode) + (tradeId == null ? 0 : System.hashCode(tradeId));
        hashCode = (17 * hashCode) + (isIntermarketSweep == null ? 0 : System.hashCode(isIntermarketSweep));
        hashCode = (17 * hashCode) + (isExtendedHoursTrade == null ? 0 : System.hashCode(isExtendedHoursTrade));
        hashCode = (17 * hashCode) + (isOddLotTrade == null ? 0 : System.hashCode(isOddLotTrade));
        hashCode = (17 * hashCode) + (isTradeThroughExempt == null ? 0 : System.hashCode(isTradeThroughExempt));
        hashCode = (17 * hashCode) + (isSinglePriceCrossTrade == null ? 0 : System.hashCode(isSinglePriceCrossTrade));
        return hashCode;
    }
}

