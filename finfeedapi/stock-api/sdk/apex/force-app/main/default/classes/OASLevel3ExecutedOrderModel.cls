/*
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Represents the response DTO for order executed information
 */
public class OASLevel3ExecutedOrderModel implements OAS.MappedProperties {
    /**
     * The stock symbol
     * @return symbol
     */
    public String symbol { get; set; }

    /**
     * Original timestamp in nanoseconds since epoch
     * @return timestampNanos
     */
    public Long timestampNanos { get; set; }

    /**
     * Time when the order was executed as DateTime
     * @return timestamp
     */
    public Datetime timestamp { get; set; }

    /**
     * Order identifier reference
     * @return orderIdReference
     */
    public Long orderIdReference { get; set; }

    /**
     * Sale condition flags for the execution as byte value
     * @return saleConditionFlags
     */
    public Integer saleConditionFlags { get; set; }

    /**
     * Bit 7 (Mask 0x80): Intermarket Sweep Flag\r\nTrue: Intermarket Sweep Order ("ISO")\r\nFalse: Non-Intermarket Sweep Order
     * @return isIntermarketSweep
     */
    public Boolean isIntermarketSweep { get; set; }

    /**
     * Bit 6 (Mask 0x40): Extended Hours Flag\r\nTrue: Extended Hours Trade (i.e., Form T sale condition)\r\nFalse: Regular Market Session Trade
     * @return isExtendedHoursTrade
     */
    public Boolean isExtendedHoursTrade { get; set; }

    /**
     * Bit 5 (Mask 0x20): Odd Lot Flag\r\nTrue: Odd Lot Trade\r\nFalse: Round or Mixed Lot Trade
     * @return isOddLotTrade
     */
    public Boolean isOddLotTrade { get; set; }

    /**
     * Bit 4 (Mask 0x10): Trade Through Exempt Flag\r\nTrue: Trade is not subject to Rule 611 (Trade Through) of SEC Reg. NMS\r\nFalse: Trade is subject to Rule 611 (Trade Through) of SEC Reg. NMS
     * @return isTradeThroughExempt
     */
    public Boolean isTradeThroughExempt { get; set; }

    /**
     * Bit 3 (Mask 0x08): Single-price Cross Trade Flag\r\nTrue: Trade resulting from a single-price cross\r\nFalse: Execution during continuous trading
     * @return isSinglePriceCrossTrade
     */
    public Boolean isSinglePriceCrossTrade { get; set; }

    /**
     * Trade volume in number of shares
     * @return size
     */
    public Integer size { get; set; }

    /**
     * Execution price as decimal
     * @return price
     */
    public Double price { get; set; }

    /**
     * IEX trade identifier
     * @return tradeId
     */
    public Long tradeId { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'order_id_reference' => 'orderIdReference',
        'sale_condition_flags' => 'saleConditionFlags',
        'is_intermarket_sweep' => 'isIntermarketSweep',
        'is_extended_hours_trade' => 'isExtendedHoursTrade',
        'is_odd_lot_trade' => 'isOddLotTrade',
        'is_trade_through_exempt' => 'isTradeThroughExempt',
        'is_single_price_cross_trade' => 'isSinglePriceCrossTrade',
        'trade_id' => 'tradeId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'order_id_reference' => 'orderIdReference',
        'sale_condition_flags' => 'saleConditionFlags',
        'is_intermarket_sweep' => 'isIntermarketSweep',
        'is_extended_hours_trade' => 'isExtendedHoursTrade',
        'is_odd_lot_trade' => 'isOddLotTrade',
        'is_trade_through_exempt' => 'isTradeThroughExempt',
        'is_single_price_cross_trade' => 'isSinglePriceCrossTrade',
        'trade_id' => 'tradeId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'order_id_reference' => 'orderIdReference',
        'sale_condition_flags' => 'saleConditionFlags',
        'is_intermarket_sweep' => 'isIntermarketSweep',
        'is_extended_hours_trade' => 'isExtendedHoursTrade',
        'is_odd_lot_trade' => 'isOddLotTrade',
        'is_trade_through_exempt' => 'isTradeThroughExempt',
        'is_single_price_cross_trade' => 'isSinglePriceCrossTrade',
        'trade_id' => 'tradeId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'order_id_reference' => 'orderIdReference',
        'sale_condition_flags' => 'saleConditionFlags',
        'is_intermarket_sweep' => 'isIntermarketSweep',
        'is_extended_hours_trade' => 'isExtendedHoursTrade',
        'is_odd_lot_trade' => 'isOddLotTrade',
        'is_trade_through_exempt' => 'isTradeThroughExempt',
        'is_single_price_cross_trade' => 'isSinglePriceCrossTrade',
        'trade_id' => 'tradeId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'order_id_reference' => 'orderIdReference',
        'sale_condition_flags' => 'saleConditionFlags',
        'is_intermarket_sweep' => 'isIntermarketSweep',
        'is_extended_hours_trade' => 'isExtendedHoursTrade',
        'is_odd_lot_trade' => 'isOddLotTrade',
        'is_trade_through_exempt' => 'isTradeThroughExempt',
        'is_single_price_cross_trade' => 'isSinglePriceCrossTrade',
        'trade_id' => 'tradeId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'order_id_reference' => 'orderIdReference',
        'sale_condition_flags' => 'saleConditionFlags',
        'is_intermarket_sweep' => 'isIntermarketSweep',
        'is_extended_hours_trade' => 'isExtendedHoursTrade',
        'is_odd_lot_trade' => 'isOddLotTrade',
        'is_trade_through_exempt' => 'isTradeThroughExempt',
        'is_single_price_cross_trade' => 'isSinglePriceCrossTrade',
        'trade_id' => 'tradeId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'order_id_reference' => 'orderIdReference',
        'sale_condition_flags' => 'saleConditionFlags',
        'is_intermarket_sweep' => 'isIntermarketSweep',
        'is_extended_hours_trade' => 'isExtendedHoursTrade',
        'is_odd_lot_trade' => 'isOddLotTrade',
        'is_trade_through_exempt' => 'isTradeThroughExempt',
        'is_single_price_cross_trade' => 'isSinglePriceCrossTrade',
        'trade_id' => 'tradeId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'order_id_reference' => 'orderIdReference',
        'sale_condition_flags' => 'saleConditionFlags',
        'is_intermarket_sweep' => 'isIntermarketSweep',
        'is_extended_hours_trade' => 'isExtendedHoursTrade',
        'is_odd_lot_trade' => 'isOddLotTrade',
        'is_trade_through_exempt' => 'isTradeThroughExempt',
        'is_single_price_cross_trade' => 'isSinglePriceCrossTrade',
        'trade_id' => 'tradeId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'order_id_reference' => 'orderIdReference',
        'sale_condition_flags' => 'saleConditionFlags',
        'is_intermarket_sweep' => 'isIntermarketSweep',
        'is_extended_hours_trade' => 'isExtendedHoursTrade',
        'is_odd_lot_trade' => 'isOddLotTrade',
        'is_trade_through_exempt' => 'isTradeThroughExempt',
        'is_single_price_cross_trade' => 'isSinglePriceCrossTrade',
        'trade_id' => 'tradeId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASLevel3ExecutedOrderModel getExample() {
        OASLevel3ExecutedOrderModel level3ExecutedOrderModel = new OASLevel3ExecutedOrderModel();
          level3ExecutedOrderModel.symbol = '';
          level3ExecutedOrderModel.timestampNanos = 123456789L;
          level3ExecutedOrderModel.timestamp = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          level3ExecutedOrderModel.orderIdReference = 123456789L;
          level3ExecutedOrderModel.saleConditionFlags = 0;
          level3ExecutedOrderModel.isIntermarketSweep = true;
          level3ExecutedOrderModel.isExtendedHoursTrade = true;
          level3ExecutedOrderModel.isOddLotTrade = true;
          level3ExecutedOrderModel.isTradeThroughExempt = true;
          level3ExecutedOrderModel.isSinglePriceCrossTrade = true;
          level3ExecutedOrderModel.size = 0;
          level3ExecutedOrderModel.price = 1.3579;
          level3ExecutedOrderModel.tradeId = 123456789L;
        return level3ExecutedOrderModel;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASLevel3ExecutedOrderModel) {           
            OASLevel3ExecutedOrderModel level3ExecutedOrderModel = (OASLevel3ExecutedOrderModel) obj;
            return this.symbol == level3ExecutedOrderModel.symbol
                && this.timestampNanos == level3ExecutedOrderModel.timestampNanos
                && this.timestamp == level3ExecutedOrderModel.timestamp
                && this.orderIdReference == level3ExecutedOrderModel.orderIdReference
                && this.saleConditionFlags == level3ExecutedOrderModel.saleConditionFlags
                && this.isIntermarketSweep == level3ExecutedOrderModel.isIntermarketSweep
                && this.isExtendedHoursTrade == level3ExecutedOrderModel.isExtendedHoursTrade
                && this.isOddLotTrade == level3ExecutedOrderModel.isOddLotTrade
                && this.isTradeThroughExempt == level3ExecutedOrderModel.isTradeThroughExempt
                && this.isSinglePriceCrossTrade == level3ExecutedOrderModel.isSinglePriceCrossTrade
                && this.size == level3ExecutedOrderModel.size
                && this.price == level3ExecutedOrderModel.price
                && this.tradeId == level3ExecutedOrderModel.tradeId;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (symbol == null ? 0 : System.hashCode(symbol));
        hashCode = (17 * hashCode) + (timestampNanos == null ? 0 : System.hashCode(timestampNanos));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        hashCode = (17 * hashCode) + (orderIdReference == null ? 0 : System.hashCode(orderIdReference));
        hashCode = (17 * hashCode) + (saleConditionFlags == null ? 0 : System.hashCode(saleConditionFlags));
        hashCode = (17 * hashCode) + (isIntermarketSweep == null ? 0 : System.hashCode(isIntermarketSweep));
        hashCode = (17 * hashCode) + (isExtendedHoursTrade == null ? 0 : System.hashCode(isExtendedHoursTrade));
        hashCode = (17 * hashCode) + (isOddLotTrade == null ? 0 : System.hashCode(isOddLotTrade));
        hashCode = (17 * hashCode) + (isTradeThroughExempt == null ? 0 : System.hashCode(isTradeThroughExempt));
        hashCode = (17 * hashCode) + (isSinglePriceCrossTrade == null ? 0 : System.hashCode(isSinglePriceCrossTrade));
        hashCode = (17 * hashCode) + (size == null ? 0 : System.hashCode(size));
        hashCode = (17 * hashCode) + (price == null ? 0 : System.hashCode(price));
        hashCode = (17 * hashCode) + (tradeId == null ? 0 : System.hashCode(tradeId));
        return hashCode;
    }
}

