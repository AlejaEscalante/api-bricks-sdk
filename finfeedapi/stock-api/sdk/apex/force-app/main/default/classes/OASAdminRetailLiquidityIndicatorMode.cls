/*
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Represents the response DTO for retail liquidity indicator information
 */
public class OASAdminRetailLiquidityIndicatorMode implements OAS.MappedProperties {
    /**
     * The stock symbol
     * @return symbol
     */
    public String symbol { get; set; }

    /**
     * Original timestamp in nanoseconds since epoch
     * @return timestampNanos
     */
    public Long timestampNanos { get; set; }

    /**
     * Time when the retail liquidity indicator was recorded as DateTime
     * @return timestamp
     */
    public Datetime timestamp { get; set; }

    /**
     * Retail liquidity indicator as byte value
     * @return retailLiquidityIndicator
     */
    public Integer retailLiquidityIndicator { get; set; }

    /**
     * Retail liquidity indicator as character string
     * @return retailLiquidityIndicatorCode
     */
    public String retailLiquidityIndicatorCode { get; set; }

    /**
     * Human-readable description of the retail liquidity indicator
     * @return retailLiquidityIndicatorText
     */
    public String retailLiquidityIndicatorText { get; set; }

    /**
     * Indicates if the indicator is \'Not Applicable\' (\' \'/0x20).
     * @return isRetailIndicatorNotApplicable
     */
    public Boolean isRetailIndicatorNotApplicable { get; set; }

    /**
     * Indicates if there is \'Buy interest for Retail\' (\'A\'/0x41).
     * @return isRetailIndicatorBuyInterest
     */
    public Boolean isRetailIndicatorBuyInterest { get; set; }

    /**
     * Indicates if there is \'Sell interest for Retail\' (\'B\'/0x42).
     * @return isRetailIndicatorSellInterest
     */
    public Boolean isRetailIndicatorSellInterest { get; set; }

    /**
     * Indicates if there is \'Buy and sell interest for Retail\' (\'C\'/0x43).
     * @return isRetailIndicatorBuyAndSellInterest
     */
    public Boolean isRetailIndicatorBuyAndSellInterest { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'retail_liquidity_indicator' => 'retailLiquidityIndicator',
        'retail_liquidity_indicator_code' => 'retailLiquidityIndicatorCode',
        'retail_liquidity_indicator_text' => 'retailLiquidityIndicatorText',
        'is_retail_indicator_not_applicable' => 'isRetailIndicatorNotApplicable',
        'is_retail_indicator_buy_interest' => 'isRetailIndicatorBuyInterest',
        'is_retail_indicator_sell_interest' => 'isRetailIndicatorSellInterest',
        'is_retail_indicator_buy_and_sell_interest' => 'isRetailIndicatorBuyAndSellInterest'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'retail_liquidity_indicator' => 'retailLiquidityIndicator',
        'retail_liquidity_indicator_code' => 'retailLiquidityIndicatorCode',
        'retail_liquidity_indicator_text' => 'retailLiquidityIndicatorText',
        'is_retail_indicator_not_applicable' => 'isRetailIndicatorNotApplicable',
        'is_retail_indicator_buy_interest' => 'isRetailIndicatorBuyInterest',
        'is_retail_indicator_sell_interest' => 'isRetailIndicatorSellInterest',
        'is_retail_indicator_buy_and_sell_interest' => 'isRetailIndicatorBuyAndSellInterest'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'retail_liquidity_indicator' => 'retailLiquidityIndicator',
        'retail_liquidity_indicator_code' => 'retailLiquidityIndicatorCode',
        'retail_liquidity_indicator_text' => 'retailLiquidityIndicatorText',
        'is_retail_indicator_not_applicable' => 'isRetailIndicatorNotApplicable',
        'is_retail_indicator_buy_interest' => 'isRetailIndicatorBuyInterest',
        'is_retail_indicator_sell_interest' => 'isRetailIndicatorSellInterest',
        'is_retail_indicator_buy_and_sell_interest' => 'isRetailIndicatorBuyAndSellInterest'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'retail_liquidity_indicator' => 'retailLiquidityIndicator',
        'retail_liquidity_indicator_code' => 'retailLiquidityIndicatorCode',
        'retail_liquidity_indicator_text' => 'retailLiquidityIndicatorText',
        'is_retail_indicator_not_applicable' => 'isRetailIndicatorNotApplicable',
        'is_retail_indicator_buy_interest' => 'isRetailIndicatorBuyInterest',
        'is_retail_indicator_sell_interest' => 'isRetailIndicatorSellInterest',
        'is_retail_indicator_buy_and_sell_interest' => 'isRetailIndicatorBuyAndSellInterest'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'retail_liquidity_indicator' => 'retailLiquidityIndicator',
        'retail_liquidity_indicator_code' => 'retailLiquidityIndicatorCode',
        'retail_liquidity_indicator_text' => 'retailLiquidityIndicatorText',
        'is_retail_indicator_not_applicable' => 'isRetailIndicatorNotApplicable',
        'is_retail_indicator_buy_interest' => 'isRetailIndicatorBuyInterest',
        'is_retail_indicator_sell_interest' => 'isRetailIndicatorSellInterest',
        'is_retail_indicator_buy_and_sell_interest' => 'isRetailIndicatorBuyAndSellInterest'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'retail_liquidity_indicator' => 'retailLiquidityIndicator',
        'retail_liquidity_indicator_code' => 'retailLiquidityIndicatorCode',
        'retail_liquidity_indicator_text' => 'retailLiquidityIndicatorText',
        'is_retail_indicator_not_applicable' => 'isRetailIndicatorNotApplicable',
        'is_retail_indicator_buy_interest' => 'isRetailIndicatorBuyInterest',
        'is_retail_indicator_sell_interest' => 'isRetailIndicatorSellInterest',
        'is_retail_indicator_buy_and_sell_interest' => 'isRetailIndicatorBuyAndSellInterest'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'retail_liquidity_indicator' => 'retailLiquidityIndicator',
        'retail_liquidity_indicator_code' => 'retailLiquidityIndicatorCode',
        'retail_liquidity_indicator_text' => 'retailLiquidityIndicatorText',
        'is_retail_indicator_not_applicable' => 'isRetailIndicatorNotApplicable',
        'is_retail_indicator_buy_interest' => 'isRetailIndicatorBuyInterest',
        'is_retail_indicator_sell_interest' => 'isRetailIndicatorSellInterest',
        'is_retail_indicator_buy_and_sell_interest' => 'isRetailIndicatorBuyAndSellInterest'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'timestamp_nanos' => 'timestampNanos',
        'retail_liquidity_indicator' => 'retailLiquidityIndicator',
        'retail_liquidity_indicator_code' => 'retailLiquidityIndicatorCode',
        'retail_liquidity_indicator_text' => 'retailLiquidityIndicatorText',
        'is_retail_indicator_not_applicable' => 'isRetailIndicatorNotApplicable',
        'is_retail_indicator_buy_interest' => 'isRetailIndicatorBuyInterest',
        'is_retail_indicator_sell_interest' => 'isRetailIndicatorSellInterest',
        'is_retail_indicator_buy_and_sell_interest' => 'isRetailIndicatorBuyAndSellInterest'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASAdminRetailLiquidityIndicatorMode getExample() {
        OASAdminRetailLiquidityIndicatorMode adminRetailLiquidityIndicatorModel = new OASAdminRetailLiquidityIndicatorMode();
          adminRetailLiquidityIndicatorModel.symbol = '';
          adminRetailLiquidityIndicatorModel.timestampNanos = 123456789L;
          adminRetailLiquidityIndicatorModel.timestamp = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          adminRetailLiquidityIndicatorModel.retailLiquidityIndicator = 0;
          adminRetailLiquidityIndicatorModel.retailLiquidityIndicatorCode = '';
          adminRetailLiquidityIndicatorModel.retailLiquidityIndicatorText = '';
          adminRetailLiquidityIndicatorModel.isRetailIndicatorNotApplicable = true;
          adminRetailLiquidityIndicatorModel.isRetailIndicatorBuyInterest = true;
          adminRetailLiquidityIndicatorModel.isRetailIndicatorSellInterest = true;
          adminRetailLiquidityIndicatorModel.isRetailIndicatorBuyAndSellInterest = true;
        return adminRetailLiquidityIndicatorModel;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASAdminRetailLiquidityIndicatorMode) {           
            OASAdminRetailLiquidityIndicatorMode adminRetailLiquidityIndicatorModel = (OASAdminRetailLiquidityIndicatorMode) obj;
            return this.symbol == adminRetailLiquidityIndicatorModel.symbol
                && this.timestampNanos == adminRetailLiquidityIndicatorModel.timestampNanos
                && this.timestamp == adminRetailLiquidityIndicatorModel.timestamp
                && this.retailLiquidityIndicator == adminRetailLiquidityIndicatorModel.retailLiquidityIndicator
                && this.retailLiquidityIndicatorCode == adminRetailLiquidityIndicatorModel.retailLiquidityIndicatorCode
                && this.retailLiquidityIndicatorText == adminRetailLiquidityIndicatorModel.retailLiquidityIndicatorText
                && this.isRetailIndicatorNotApplicable == adminRetailLiquidityIndicatorModel.isRetailIndicatorNotApplicable
                && this.isRetailIndicatorBuyInterest == adminRetailLiquidityIndicatorModel.isRetailIndicatorBuyInterest
                && this.isRetailIndicatorSellInterest == adminRetailLiquidityIndicatorModel.isRetailIndicatorSellInterest
                && this.isRetailIndicatorBuyAndSellInterest == adminRetailLiquidityIndicatorModel.isRetailIndicatorBuyAndSellInterest;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (symbol == null ? 0 : System.hashCode(symbol));
        hashCode = (17 * hashCode) + (timestampNanos == null ? 0 : System.hashCode(timestampNanos));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        hashCode = (17 * hashCode) + (retailLiquidityIndicator == null ? 0 : System.hashCode(retailLiquidityIndicator));
        hashCode = (17 * hashCode) + (retailLiquidityIndicatorCode == null ? 0 : System.hashCode(retailLiquidityIndicatorCode));
        hashCode = (17 * hashCode) + (retailLiquidityIndicatorText == null ? 0 : System.hashCode(retailLiquidityIndicatorText));
        hashCode = (17 * hashCode) + (isRetailIndicatorNotApplicable == null ? 0 : System.hashCode(isRetailIndicatorNotApplicable));
        hashCode = (17 * hashCode) + (isRetailIndicatorBuyInterest == null ? 0 : System.hashCode(isRetailIndicatorBuyInterest));
        hashCode = (17 * hashCode) + (isRetailIndicatorSellInterest == null ? 0 : System.hashCode(isRetailIndicatorSellInterest));
        hashCode = (17 * hashCode) + (isRetailIndicatorBuyAndSellInterest == null ? 0 : System.hashCode(isRetailIndicatorBuyAndSellInterest));
        return hashCode;
    }
}

