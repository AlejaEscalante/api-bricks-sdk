#
# REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents a timeseries period used in exchange rate data.

.PARAMETER PeriodId
Gets or sets the period ID.
.PARAMETER LengthSeconds
Gets or sets the length of the period in seconds.
.PARAMETER LengthMonths
Gets or sets the length of the period in months.
.PARAMETER UnitCount
Gets or sets the unit count.
.PARAMETER UnitName
Gets or sets the unit name.
.PARAMETER DisplayName
Gets or sets the display name of the timeseries period.
.OUTPUTS

OHLCVTimeseriesPeriod<PSCustomObject>
#>

function Initialize-OHLCVTimeseriesPeriod {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PeriodId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LengthSeconds},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LengthMonths},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${UnitCount},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UnitName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => OHLCVTimeseriesPeriod' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "period_id" = ${PeriodId}
            "length_seconds" = ${LengthSeconds}
            "length_months" = ${LengthMonths}
            "unit_count" = ${UnitCount}
            "unit_name" = ${UnitName}
            "display_name" = ${DisplayName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OHLCVTimeseriesPeriod<PSCustomObject>

.DESCRIPTION

Convert from JSON to OHLCVTimeseriesPeriod<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OHLCVTimeseriesPeriod<PSCustomObject>
#>
function ConvertFrom-JsonToOHLCVTimeseriesPeriod {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => OHLCVTimeseriesPeriod' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OHLCVTimeseriesPeriod
        $AllProperties = ("period_id", "length_seconds", "length_months", "unit_count", "unit_name", "display_name")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "period_id"))) { #optional property not found
            $PeriodId = $null
        } else {
            $PeriodId = $JsonParameters.PSobject.Properties["period_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "length_seconds"))) { #optional property not found
            $LengthSeconds = $null
        } else {
            $LengthSeconds = $JsonParameters.PSobject.Properties["length_seconds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "length_months"))) { #optional property not found
            $LengthMonths = $null
        } else {
            $LengthMonths = $JsonParameters.PSobject.Properties["length_months"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unit_count"))) { #optional property not found
            $UnitCount = $null
        } else {
            $UnitCount = $JsonParameters.PSobject.Properties["unit_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unit_name"))) { #optional property not found
            $UnitName = $null
        } else {
            $UnitName = $JsonParameters.PSobject.Properties["unit_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display_name"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["display_name"].value
        }

        $PSO = [PSCustomObject]@{
            "period_id" = ${PeriodId}
            "length_seconds" = ${LengthSeconds}
            "length_months" = ${LengthMonths}
            "unit_count" = ${UnitCount}
            "unit_name" = ${UnitName}
            "display_name" = ${DisplayName}
        }

        return $PSO
    }

}

