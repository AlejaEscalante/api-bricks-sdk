#
# REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents the response DTO for auction information

.PARAMETER Symbol
The stock symbol
.PARAMETER TimestampNanos
Original timestamp in nanoseconds since epoch
.PARAMETER Timestamp
Time when the auction data was recorded as DateTime
.PARAMETER AuctionType
Type of auction as byte value
.PARAMETER AuctionTypeCode
Type of auction as character string
.PARAMETER AuctionTypeText
Human-readable description of the auction type
.PARAMETER IsAuctionTypeOpening
Indicates if the auction type is 'Opening Auction' ('O'/0x4f).
.PARAMETER IsAuctionTypeClosing
Indicates if the auction type is 'Closing Auction' ('C'/0x43).
.PARAMETER IsAuctionTypeIpo
Indicates if the auction type is 'IPO Auction' ('I'/0x49).
.PARAMETER IsAuctionTypeHalt
Indicates if the auction type is 'Halt Auction' ('H'/0x48).
.PARAMETER IsAuctionTypeVolatility
Indicates if the auction type is 'Volatility Auction' ('V'/0x56).
.PARAMETER PairedShares
Number of shares paired at the Reference Price
.PARAMETER ReferencePrice
Reference price as decimal
.PARAMETER IndicativeClearingPrice
Indicative clearing price as decimal
.PARAMETER ImbalanceShares
Number of unpaired shares at the Reference Price
.PARAMETER ImbalanceSide
Side of the imbalance as byte value
.PARAMETER ImbalanceSideCode
Side of the imbalance as character string
.PARAMETER ImbalanceSideText
Human-readable description of the imbalance side
.PARAMETER IsImbalanceSideBuy
Indicates if there is a buy-side imbalance ('B'/0x42).
.PARAMETER IsImbalanceSideSell
Indicates if there is a sell-side imbalance ('S'/0x53).
.PARAMETER IsImbalanceSideNone
Indicates if there is no imbalance ('N'/0x4e).
.PARAMETER ExtensionNumber
Number of extensions to the auction
.PARAMETER ScheduledAuctionTimeSeconds
Scheduled auction time in seconds since epoch
.PARAMETER ScheduledAuctionTime
Scheduled time for the auction as DateTime
.PARAMETER AuctionBookClearingPrice
Auction book clearing price as decimal
.PARAMETER CollarReferencePrice
Collar reference price as decimal
.PARAMETER LowerAuctionCollar
Lower auction collar as decimal
.PARAMETER UpperAuctionCollar
Upper auction collar as decimal
.OUTPUTS

AdminAuctionInformationModel<PSCustomObject>
#>

function Initialize-AdminAuctionInformationModel {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Symbol},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TimestampNanos},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AuctionType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AuctionTypeCode},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AuctionTypeText},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsAuctionTypeOpening},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsAuctionTypeClosing},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsAuctionTypeIpo},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsAuctionTypeHalt},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsAuctionTypeVolatility},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PairedShares},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${ReferencePrice},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${IndicativeClearingPrice},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ImbalanceShares},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ImbalanceSide},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImbalanceSideCode},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImbalanceSideText},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsImbalanceSideBuy},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsImbalanceSideSell},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsImbalanceSideNone},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ExtensionNumber},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ScheduledAuctionTimeSeconds},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ScheduledAuctionTime},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${AuctionBookClearingPrice},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${CollarReferencePrice},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${LowerAuctionCollar},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${UpperAuctionCollar}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AdminAuctionInformationModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "symbol" = ${Symbol}
            "timestamp_nanos" = ${TimestampNanos}
            "timestamp" = ${Timestamp}
            "auction_type" = ${AuctionType}
            "auction_type_code" = ${AuctionTypeCode}
            "auction_type_text" = ${AuctionTypeText}
            "is_auction_type_opening" = ${IsAuctionTypeOpening}
            "is_auction_type_closing" = ${IsAuctionTypeClosing}
            "is_auction_type_ipo" = ${IsAuctionTypeIpo}
            "is_auction_type_halt" = ${IsAuctionTypeHalt}
            "is_auction_type_volatility" = ${IsAuctionTypeVolatility}
            "paired_shares" = ${PairedShares}
            "reference_price" = ${ReferencePrice}
            "indicative_clearing_price" = ${IndicativeClearingPrice}
            "imbalance_shares" = ${ImbalanceShares}
            "imbalance_side" = ${ImbalanceSide}
            "imbalance_side_code" = ${ImbalanceSideCode}
            "imbalance_side_text" = ${ImbalanceSideText}
            "is_imbalance_side_buy" = ${IsImbalanceSideBuy}
            "is_imbalance_side_sell" = ${IsImbalanceSideSell}
            "is_imbalance_side_none" = ${IsImbalanceSideNone}
            "extension_number" = ${ExtensionNumber}
            "scheduled_auction_time_seconds" = ${ScheduledAuctionTimeSeconds}
            "scheduled_auction_time" = ${ScheduledAuctionTime}
            "auction_book_clearing_price" = ${AuctionBookClearingPrice}
            "collar_reference_price" = ${CollarReferencePrice}
            "lower_auction_collar" = ${LowerAuctionCollar}
            "upper_auction_collar" = ${UpperAuctionCollar}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AdminAuctionInformationModel<PSCustomObject>

.DESCRIPTION

Convert from JSON to AdminAuctionInformationModel<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AdminAuctionInformationModel<PSCustomObject>
#>
function ConvertFrom-JsonToAdminAuctionInformationModel {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AdminAuctionInformationModel' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AdminAuctionInformationModel
        $AllProperties = ("symbol", "timestamp_nanos", "timestamp", "auction_type", "auction_type_code", "auction_type_text", "is_auction_type_opening", "is_auction_type_closing", "is_auction_type_ipo", "is_auction_type_halt", "is_auction_type_volatility", "paired_shares", "reference_price", "indicative_clearing_price", "imbalance_shares", "imbalance_side", "imbalance_side_code", "imbalance_side_text", "is_imbalance_side_buy", "is_imbalance_side_sell", "is_imbalance_side_none", "extension_number", "scheduled_auction_time_seconds", "scheduled_auction_time", "auction_book_clearing_price", "collar_reference_price", "lower_auction_collar", "upper_auction_collar")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol"))) { #optional property not found
            $Symbol = $null
        } else {
            $Symbol = $JsonParameters.PSobject.Properties["symbol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp_nanos"))) { #optional property not found
            $TimestampNanos = $null
        } else {
            $TimestampNanos = $JsonParameters.PSobject.Properties["timestamp_nanos"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "auction_type"))) { #optional property not found
            $AuctionType = $null
        } else {
            $AuctionType = $JsonParameters.PSobject.Properties["auction_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "auction_type_code"))) { #optional property not found
            $AuctionTypeCode = $null
        } else {
            $AuctionTypeCode = $JsonParameters.PSobject.Properties["auction_type_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "auction_type_text"))) { #optional property not found
            $AuctionTypeText = $null
        } else {
            $AuctionTypeText = $JsonParameters.PSobject.Properties["auction_type_text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_auction_type_opening"))) { #optional property not found
            $IsAuctionTypeOpening = $null
        } else {
            $IsAuctionTypeOpening = $JsonParameters.PSobject.Properties["is_auction_type_opening"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_auction_type_closing"))) { #optional property not found
            $IsAuctionTypeClosing = $null
        } else {
            $IsAuctionTypeClosing = $JsonParameters.PSobject.Properties["is_auction_type_closing"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_auction_type_ipo"))) { #optional property not found
            $IsAuctionTypeIpo = $null
        } else {
            $IsAuctionTypeIpo = $JsonParameters.PSobject.Properties["is_auction_type_ipo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_auction_type_halt"))) { #optional property not found
            $IsAuctionTypeHalt = $null
        } else {
            $IsAuctionTypeHalt = $JsonParameters.PSobject.Properties["is_auction_type_halt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_auction_type_volatility"))) { #optional property not found
            $IsAuctionTypeVolatility = $null
        } else {
            $IsAuctionTypeVolatility = $JsonParameters.PSobject.Properties["is_auction_type_volatility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "paired_shares"))) { #optional property not found
            $PairedShares = $null
        } else {
            $PairedShares = $JsonParameters.PSobject.Properties["paired_shares"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reference_price"))) { #optional property not found
            $ReferencePrice = $null
        } else {
            $ReferencePrice = $JsonParameters.PSobject.Properties["reference_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "indicative_clearing_price"))) { #optional property not found
            $IndicativeClearingPrice = $null
        } else {
            $IndicativeClearingPrice = $JsonParameters.PSobject.Properties["indicative_clearing_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imbalance_shares"))) { #optional property not found
            $ImbalanceShares = $null
        } else {
            $ImbalanceShares = $JsonParameters.PSobject.Properties["imbalance_shares"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imbalance_side"))) { #optional property not found
            $ImbalanceSide = $null
        } else {
            $ImbalanceSide = $JsonParameters.PSobject.Properties["imbalance_side"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imbalance_side_code"))) { #optional property not found
            $ImbalanceSideCode = $null
        } else {
            $ImbalanceSideCode = $JsonParameters.PSobject.Properties["imbalance_side_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imbalance_side_text"))) { #optional property not found
            $ImbalanceSideText = $null
        } else {
            $ImbalanceSideText = $JsonParameters.PSobject.Properties["imbalance_side_text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_imbalance_side_buy"))) { #optional property not found
            $IsImbalanceSideBuy = $null
        } else {
            $IsImbalanceSideBuy = $JsonParameters.PSobject.Properties["is_imbalance_side_buy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_imbalance_side_sell"))) { #optional property not found
            $IsImbalanceSideSell = $null
        } else {
            $IsImbalanceSideSell = $JsonParameters.PSobject.Properties["is_imbalance_side_sell"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_imbalance_side_none"))) { #optional property not found
            $IsImbalanceSideNone = $null
        } else {
            $IsImbalanceSideNone = $JsonParameters.PSobject.Properties["is_imbalance_side_none"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "extension_number"))) { #optional property not found
            $ExtensionNumber = $null
        } else {
            $ExtensionNumber = $JsonParameters.PSobject.Properties["extension_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scheduled_auction_time_seconds"))) { #optional property not found
            $ScheduledAuctionTimeSeconds = $null
        } else {
            $ScheduledAuctionTimeSeconds = $JsonParameters.PSobject.Properties["scheduled_auction_time_seconds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scheduled_auction_time"))) { #optional property not found
            $ScheduledAuctionTime = $null
        } else {
            $ScheduledAuctionTime = $JsonParameters.PSobject.Properties["scheduled_auction_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "auction_book_clearing_price"))) { #optional property not found
            $AuctionBookClearingPrice = $null
        } else {
            $AuctionBookClearingPrice = $JsonParameters.PSobject.Properties["auction_book_clearing_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "collar_reference_price"))) { #optional property not found
            $CollarReferencePrice = $null
        } else {
            $CollarReferencePrice = $JsonParameters.PSobject.Properties["collar_reference_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lower_auction_collar"))) { #optional property not found
            $LowerAuctionCollar = $null
        } else {
            $LowerAuctionCollar = $JsonParameters.PSobject.Properties["lower_auction_collar"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "upper_auction_collar"))) { #optional property not found
            $UpperAuctionCollar = $null
        } else {
            $UpperAuctionCollar = $JsonParameters.PSobject.Properties["upper_auction_collar"].value
        }

        $PSO = [PSCustomObject]@{
            "symbol" = ${Symbol}
            "timestamp_nanos" = ${TimestampNanos}
            "timestamp" = ${Timestamp}
            "auction_type" = ${AuctionType}
            "auction_type_code" = ${AuctionTypeCode}
            "auction_type_text" = ${AuctionTypeText}
            "is_auction_type_opening" = ${IsAuctionTypeOpening}
            "is_auction_type_closing" = ${IsAuctionTypeClosing}
            "is_auction_type_ipo" = ${IsAuctionTypeIpo}
            "is_auction_type_halt" = ${IsAuctionTypeHalt}
            "is_auction_type_volatility" = ${IsAuctionTypeVolatility}
            "paired_shares" = ${PairedShares}
            "reference_price" = ${ReferencePrice}
            "indicative_clearing_price" = ${IndicativeClearingPrice}
            "imbalance_shares" = ${ImbalanceShares}
            "imbalance_side" = ${ImbalanceSide}
            "imbalance_side_code" = ${ImbalanceSideCode}
            "imbalance_side_text" = ${ImbalanceSideText}
            "is_imbalance_side_buy" = ${IsImbalanceSideBuy}
            "is_imbalance_side_sell" = ${IsImbalanceSideSell}
            "is_imbalance_side_none" = ${IsImbalanceSideNone}
            "extension_number" = ${ExtensionNumber}
            "scheduled_auction_time_seconds" = ${ScheduledAuctionTimeSeconds}
            "scheduled_auction_time" = ${ScheduledAuctionTime}
            "auction_book_clearing_price" = ${AuctionBookClearingPrice}
            "collar_reference_price" = ${CollarReferencePrice}
            "lower_auction_collar" = ${LowerAuctionCollar}
            "upper_auction_collar" = ${UpperAuctionCollar}
        }

        return $PSO
    }

}

