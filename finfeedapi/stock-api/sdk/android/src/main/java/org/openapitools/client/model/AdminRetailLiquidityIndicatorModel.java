/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Represents the response DTO for retail liquidity indicator information
 **/
@ApiModel(description = "Represents the response DTO for retail liquidity indicator information")
public class AdminRetailLiquidityIndicatorModel {
  
  @SerializedName("symbol")
  private String symbol = null;
  @SerializedName("timestamp_nanos")
  private Long timestampNanos = null;
  @SerializedName("timestamp")
  private Date timestamp = null;
  @SerializedName("retail_liquidity_indicator")
  private Integer retailLiquidityIndicator = null;
  @SerializedName("retail_liquidity_indicator_code")
  private String retailLiquidityIndicatorCode = null;
  @SerializedName("retail_liquidity_indicator_text")
  private String retailLiquidityIndicatorText = null;
  @SerializedName("is_retail_indicator_not_applicable")
  private Boolean isRetailIndicatorNotApplicable = null;
  @SerializedName("is_retail_indicator_buy_interest")
  private Boolean isRetailIndicatorBuyInterest = null;
  @SerializedName("is_retail_indicator_sell_interest")
  private Boolean isRetailIndicatorSellInterest = null;
  @SerializedName("is_retail_indicator_buy_and_sell_interest")
  private Boolean isRetailIndicatorBuyAndSellInterest = null;

  /**
   * The stock symbol
   **/
  @ApiModelProperty(value = "The stock symbol")
  public String getSymbol() {
    return symbol;
  }
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  /**
   * Original timestamp in nanoseconds since epoch
   **/
  @ApiModelProperty(value = "Original timestamp in nanoseconds since epoch")
  public Long getTimestampNanos() {
    return timestampNanos;
  }
  public void setTimestampNanos(Long timestampNanos) {
    this.timestampNanos = timestampNanos;
  }

  /**
   * Time when the retail liquidity indicator was recorded as DateTime
   **/
  @ApiModelProperty(value = "Time when the retail liquidity indicator was recorded as DateTime")
  public Date getTimestamp() {
    return timestamp;
  }
  public void setTimestamp(Date timestamp) {
    this.timestamp = timestamp;
  }

  /**
   * Retail liquidity indicator as byte value
   **/
  @ApiModelProperty(value = "Retail liquidity indicator as byte value")
  public Integer getRetailLiquidityIndicator() {
    return retailLiquidityIndicator;
  }
  public void setRetailLiquidityIndicator(Integer retailLiquidityIndicator) {
    this.retailLiquidityIndicator = retailLiquidityIndicator;
  }

  /**
   * Retail liquidity indicator as character string
   **/
  @ApiModelProperty(value = "Retail liquidity indicator as character string")
  public String getRetailLiquidityIndicatorCode() {
    return retailLiquidityIndicatorCode;
  }
  public void setRetailLiquidityIndicatorCode(String retailLiquidityIndicatorCode) {
    this.retailLiquidityIndicatorCode = retailLiquidityIndicatorCode;
  }

  /**
   * Human-readable description of the retail liquidity indicator
   **/
  @ApiModelProperty(value = "Human-readable description of the retail liquidity indicator")
  public String getRetailLiquidityIndicatorText() {
    return retailLiquidityIndicatorText;
  }
  public void setRetailLiquidityIndicatorText(String retailLiquidityIndicatorText) {
    this.retailLiquidityIndicatorText = retailLiquidityIndicatorText;
  }

  /**
   * Indicates if the indicator is 'Not Applicable' (' '/0x20).
   **/
  @ApiModelProperty(value = "Indicates if the indicator is 'Not Applicable' (' '/0x20).")
  public Boolean getIsRetailIndicatorNotApplicable() {
    return isRetailIndicatorNotApplicable;
  }
  public void setIsRetailIndicatorNotApplicable(Boolean isRetailIndicatorNotApplicable) {
    this.isRetailIndicatorNotApplicable = isRetailIndicatorNotApplicable;
  }

  /**
   * Indicates if there is 'Buy interest for Retail' ('A'/0x41).
   **/
  @ApiModelProperty(value = "Indicates if there is 'Buy interest for Retail' ('A'/0x41).")
  public Boolean getIsRetailIndicatorBuyInterest() {
    return isRetailIndicatorBuyInterest;
  }
  public void setIsRetailIndicatorBuyInterest(Boolean isRetailIndicatorBuyInterest) {
    this.isRetailIndicatorBuyInterest = isRetailIndicatorBuyInterest;
  }

  /**
   * Indicates if there is 'Sell interest for Retail' ('B'/0x42).
   **/
  @ApiModelProperty(value = "Indicates if there is 'Sell interest for Retail' ('B'/0x42).")
  public Boolean getIsRetailIndicatorSellInterest() {
    return isRetailIndicatorSellInterest;
  }
  public void setIsRetailIndicatorSellInterest(Boolean isRetailIndicatorSellInterest) {
    this.isRetailIndicatorSellInterest = isRetailIndicatorSellInterest;
  }

  /**
   * Indicates if there is 'Buy and sell interest for Retail' ('C'/0x43).
   **/
  @ApiModelProperty(value = "Indicates if there is 'Buy and sell interest for Retail' ('C'/0x43).")
  public Boolean getIsRetailIndicatorBuyAndSellInterest() {
    return isRetailIndicatorBuyAndSellInterest;
  }
  public void setIsRetailIndicatorBuyAndSellInterest(Boolean isRetailIndicatorBuyAndSellInterest) {
    this.isRetailIndicatorBuyAndSellInterest = isRetailIndicatorBuyAndSellInterest;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminRetailLiquidityIndicatorModel adminRetailLiquidityIndicatorModel = (AdminRetailLiquidityIndicatorModel) o;
    return (this.symbol == null ? adminRetailLiquidityIndicatorModel.symbol == null : this.symbol.equals(adminRetailLiquidityIndicatorModel.symbol)) &&
        (this.timestampNanos == null ? adminRetailLiquidityIndicatorModel.timestampNanos == null : this.timestampNanos.equals(adminRetailLiquidityIndicatorModel.timestampNanos)) &&
        (this.timestamp == null ? adminRetailLiquidityIndicatorModel.timestamp == null : this.timestamp.equals(adminRetailLiquidityIndicatorModel.timestamp)) &&
        (this.retailLiquidityIndicator == null ? adminRetailLiquidityIndicatorModel.retailLiquidityIndicator == null : this.retailLiquidityIndicator.equals(adminRetailLiquidityIndicatorModel.retailLiquidityIndicator)) &&
        (this.retailLiquidityIndicatorCode == null ? adminRetailLiquidityIndicatorModel.retailLiquidityIndicatorCode == null : this.retailLiquidityIndicatorCode.equals(adminRetailLiquidityIndicatorModel.retailLiquidityIndicatorCode)) &&
        (this.retailLiquidityIndicatorText == null ? adminRetailLiquidityIndicatorModel.retailLiquidityIndicatorText == null : this.retailLiquidityIndicatorText.equals(adminRetailLiquidityIndicatorModel.retailLiquidityIndicatorText)) &&
        (this.isRetailIndicatorNotApplicable == null ? adminRetailLiquidityIndicatorModel.isRetailIndicatorNotApplicable == null : this.isRetailIndicatorNotApplicable.equals(adminRetailLiquidityIndicatorModel.isRetailIndicatorNotApplicable)) &&
        (this.isRetailIndicatorBuyInterest == null ? adminRetailLiquidityIndicatorModel.isRetailIndicatorBuyInterest == null : this.isRetailIndicatorBuyInterest.equals(adminRetailLiquidityIndicatorModel.isRetailIndicatorBuyInterest)) &&
        (this.isRetailIndicatorSellInterest == null ? adminRetailLiquidityIndicatorModel.isRetailIndicatorSellInterest == null : this.isRetailIndicatorSellInterest.equals(adminRetailLiquidityIndicatorModel.isRetailIndicatorSellInterest)) &&
        (this.isRetailIndicatorBuyAndSellInterest == null ? adminRetailLiquidityIndicatorModel.isRetailIndicatorBuyAndSellInterest == null : this.isRetailIndicatorBuyAndSellInterest.equals(adminRetailLiquidityIndicatorModel.isRetailIndicatorBuyAndSellInterest));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.symbol == null ? 0: this.symbol.hashCode());
    result = 31 * result + (this.timestampNanos == null ? 0: this.timestampNanos.hashCode());
    result = 31 * result + (this.timestamp == null ? 0: this.timestamp.hashCode());
    result = 31 * result + (this.retailLiquidityIndicator == null ? 0: this.retailLiquidityIndicator.hashCode());
    result = 31 * result + (this.retailLiquidityIndicatorCode == null ? 0: this.retailLiquidityIndicatorCode.hashCode());
    result = 31 * result + (this.retailLiquidityIndicatorText == null ? 0: this.retailLiquidityIndicatorText.hashCode());
    result = 31 * result + (this.isRetailIndicatorNotApplicable == null ? 0: this.isRetailIndicatorNotApplicable.hashCode());
    result = 31 * result + (this.isRetailIndicatorBuyInterest == null ? 0: this.isRetailIndicatorBuyInterest.hashCode());
    result = 31 * result + (this.isRetailIndicatorSellInterest == null ? 0: this.isRetailIndicatorSellInterest.hashCode());
    result = 31 * result + (this.isRetailIndicatorBuyAndSellInterest == null ? 0: this.isRetailIndicatorBuyAndSellInterest.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminRetailLiquidityIndicatorModel {\n");
    
    sb.append("  symbol: ").append(symbol).append("\n");
    sb.append("  timestampNanos: ").append(timestampNanos).append("\n");
    sb.append("  timestamp: ").append(timestamp).append("\n");
    sb.append("  retailLiquidityIndicator: ").append(retailLiquidityIndicator).append("\n");
    sb.append("  retailLiquidityIndicatorCode: ").append(retailLiquidityIndicatorCode).append("\n");
    sb.append("  retailLiquidityIndicatorText: ").append(retailLiquidityIndicatorText).append("\n");
    sb.append("  isRetailIndicatorNotApplicable: ").append(isRetailIndicatorNotApplicable).append("\n");
    sb.append("  isRetailIndicatorBuyInterest: ").append(isRetailIndicatorBuyInterest).append("\n");
    sb.append("  isRetailIndicatorSellInterest: ").append(isRetailIndicatorSellInterest).append("\n");
    sb.append("  isRetailIndicatorBuyAndSellInterest: ").append(isRetailIndicatorBuyAndSellInterest).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
