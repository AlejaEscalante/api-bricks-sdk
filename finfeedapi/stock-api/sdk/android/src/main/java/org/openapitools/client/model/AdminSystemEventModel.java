/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Represents the response DTO for system event information
 **/
@ApiModel(description = "Represents the response DTO for system event information")
public class AdminSystemEventModel {
  
  @SerializedName("timestamp_nanos")
  private Long timestampNanos = null;
  @SerializedName("timestamp")
  private Date timestamp = null;
  @SerializedName("system_event")
  private Integer systemEvent = null;
  @SerializedName("system_event_code")
  private String systemEventCode = null;
  @SerializedName("system_event_text")
  private String systemEventText = null;
  @SerializedName("is_system_event_start_of_messages")
  private Boolean isSystemEventStartOfMessages = null;
  @SerializedName("is_system_event_start_of_system_hours")
  private Boolean isSystemEventStartOfSystemHours = null;
  @SerializedName("is_system_event_start_of_regular_market_hours")
  private Boolean isSystemEventStartOfRegularMarketHours = null;
  @SerializedName("is_system_event_end_of_regular_market_hours")
  private Boolean isSystemEventEndOfRegularMarketHours = null;
  @SerializedName("is_system_event_end_of_system_hours")
  private Boolean isSystemEventEndOfSystemHours = null;
  @SerializedName("is_system_event_end_of_messages")
  private Boolean isSystemEventEndOfMessages = null;

  /**
   * Original timestamp in nanoseconds since epoch
   **/
  @ApiModelProperty(value = "Original timestamp in nanoseconds since epoch")
  public Long getTimestampNanos() {
    return timestampNanos;
  }
  public void setTimestampNanos(Long timestampNanos) {
    this.timestampNanos = timestampNanos;
  }

  /**
   * Time when the system event was recorded as DateTime
   **/
  @ApiModelProperty(value = "Time when the system event was recorded as DateTime")
  public Date getTimestamp() {
    return timestamp;
  }
  public void setTimestamp(Date timestamp) {
    this.timestamp = timestamp;
  }

  /**
   * System event as byte value
   **/
  @ApiModelProperty(value = "System event as byte value")
  public Integer getSystemEvent() {
    return systemEvent;
  }
  public void setSystemEvent(Integer systemEvent) {
    this.systemEvent = systemEvent;
  }

  /**
   * System event as string
   **/
  @ApiModelProperty(value = "System event as string")
  public String getSystemEventCode() {
    return systemEventCode;
  }
  public void setSystemEventCode(String systemEventCode) {
    this.systemEventCode = systemEventCode;
  }

  /**
   * Human-readable description of the system event
   **/
  @ApiModelProperty(value = "Human-readable description of the system event")
  public String getSystemEventText() {
    return systemEventText;
  }
  public void setSystemEventText(String systemEventText) {
    this.systemEventText = systemEventText;
  }

  /**
   * Indicates if the system event is 'Start of Messages' (O).  Outside of heartbeat messages on the lower level protocol,   the start of day message is the first message sent in any trading session.
   **/
  @ApiModelProperty(value = "Indicates if the system event is 'Start of Messages' (O).  Outside of heartbeat messages on the lower level protocol,   the start of day message is the first message sent in any trading session.")
  public Boolean getIsSystemEventStartOfMessages() {
    return isSystemEventStartOfMessages;
  }
  public void setIsSystemEventStartOfMessages(Boolean isSystemEventStartOfMessages) {
    this.isSystemEventStartOfMessages = isSystemEventStartOfMessages;
  }

  /**
   * Indicates if the system event is 'Start of System Hours' (S).  This message indicates that IEX is open and ready to start accepting orders.
   **/
  @ApiModelProperty(value = "Indicates if the system event is 'Start of System Hours' (S).  This message indicates that IEX is open and ready to start accepting orders.")
  public Boolean getIsSystemEventStartOfSystemHours() {
    return isSystemEventStartOfSystemHours;
  }
  public void setIsSystemEventStartOfSystemHours(Boolean isSystemEventStartOfSystemHours) {
    this.isSystemEventStartOfSystemHours = isSystemEventStartOfSystemHours;
  }

  /**
   * Indicates if the system event is 'Start of Regular Market Hours' (R).  This message indicates that DAY and GTX orders, as well as market orders and pegged orders,   are available for execution on IEX.
   **/
  @ApiModelProperty(value = "Indicates if the system event is 'Start of Regular Market Hours' (R).  This message indicates that DAY and GTX orders, as well as market orders and pegged orders,   are available for execution on IEX.")
  public Boolean getIsSystemEventStartOfRegularMarketHours() {
    return isSystemEventStartOfRegularMarketHours;
  }
  public void setIsSystemEventStartOfRegularMarketHours(Boolean isSystemEventStartOfRegularMarketHours) {
    this.isSystemEventStartOfRegularMarketHours = isSystemEventStartOfRegularMarketHours;
  }

  /**
   * Indicates if the system event is 'End of Regular Market Hours' (M).  This message indicates that DAY orders, market orders, and pegged orders   are no longer accepted by IEX.
   **/
  @ApiModelProperty(value = "Indicates if the system event is 'End of Regular Market Hours' (M).  This message indicates that DAY orders, market orders, and pegged orders   are no longer accepted by IEX.")
  public Boolean getIsSystemEventEndOfRegularMarketHours() {
    return isSystemEventEndOfRegularMarketHours;
  }
  public void setIsSystemEventEndOfRegularMarketHours(Boolean isSystemEventEndOfRegularMarketHours) {
    this.isSystemEventEndOfRegularMarketHours = isSystemEventEndOfRegularMarketHours;
  }

  /**
   * Indicates if the system event is 'End of System Hours' (E).  This message indicates that IEX is now closed and will not accept   any new orders during this trading session. It is still possible   to receive messages after the end of day.
   **/
  @ApiModelProperty(value = "Indicates if the system event is 'End of System Hours' (E).  This message indicates that IEX is now closed and will not accept   any new orders during this trading session. It is still possible   to receive messages after the end of day.")
  public Boolean getIsSystemEventEndOfSystemHours() {
    return isSystemEventEndOfSystemHours;
  }
  public void setIsSystemEventEndOfSystemHours(Boolean isSystemEventEndOfSystemHours) {
    this.isSystemEventEndOfSystemHours = isSystemEventEndOfSystemHours;
  }

  /**
   * Indicates if the system event is 'End of Messages' (C).  This is always the last message sent in any trading session.
   **/
  @ApiModelProperty(value = "Indicates if the system event is 'End of Messages' (C).  This is always the last message sent in any trading session.")
  public Boolean getIsSystemEventEndOfMessages() {
    return isSystemEventEndOfMessages;
  }
  public void setIsSystemEventEndOfMessages(Boolean isSystemEventEndOfMessages) {
    this.isSystemEventEndOfMessages = isSystemEventEndOfMessages;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminSystemEventModel adminSystemEventModel = (AdminSystemEventModel) o;
    return (this.timestampNanos == null ? adminSystemEventModel.timestampNanos == null : this.timestampNanos.equals(adminSystemEventModel.timestampNanos)) &&
        (this.timestamp == null ? adminSystemEventModel.timestamp == null : this.timestamp.equals(adminSystemEventModel.timestamp)) &&
        (this.systemEvent == null ? adminSystemEventModel.systemEvent == null : this.systemEvent.equals(adminSystemEventModel.systemEvent)) &&
        (this.systemEventCode == null ? adminSystemEventModel.systemEventCode == null : this.systemEventCode.equals(adminSystemEventModel.systemEventCode)) &&
        (this.systemEventText == null ? adminSystemEventModel.systemEventText == null : this.systemEventText.equals(adminSystemEventModel.systemEventText)) &&
        (this.isSystemEventStartOfMessages == null ? adminSystemEventModel.isSystemEventStartOfMessages == null : this.isSystemEventStartOfMessages.equals(adminSystemEventModel.isSystemEventStartOfMessages)) &&
        (this.isSystemEventStartOfSystemHours == null ? adminSystemEventModel.isSystemEventStartOfSystemHours == null : this.isSystemEventStartOfSystemHours.equals(adminSystemEventModel.isSystemEventStartOfSystemHours)) &&
        (this.isSystemEventStartOfRegularMarketHours == null ? adminSystemEventModel.isSystemEventStartOfRegularMarketHours == null : this.isSystemEventStartOfRegularMarketHours.equals(adminSystemEventModel.isSystemEventStartOfRegularMarketHours)) &&
        (this.isSystemEventEndOfRegularMarketHours == null ? adminSystemEventModel.isSystemEventEndOfRegularMarketHours == null : this.isSystemEventEndOfRegularMarketHours.equals(adminSystemEventModel.isSystemEventEndOfRegularMarketHours)) &&
        (this.isSystemEventEndOfSystemHours == null ? adminSystemEventModel.isSystemEventEndOfSystemHours == null : this.isSystemEventEndOfSystemHours.equals(adminSystemEventModel.isSystemEventEndOfSystemHours)) &&
        (this.isSystemEventEndOfMessages == null ? adminSystemEventModel.isSystemEventEndOfMessages == null : this.isSystemEventEndOfMessages.equals(adminSystemEventModel.isSystemEventEndOfMessages));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.timestampNanos == null ? 0: this.timestampNanos.hashCode());
    result = 31 * result + (this.timestamp == null ? 0: this.timestamp.hashCode());
    result = 31 * result + (this.systemEvent == null ? 0: this.systemEvent.hashCode());
    result = 31 * result + (this.systemEventCode == null ? 0: this.systemEventCode.hashCode());
    result = 31 * result + (this.systemEventText == null ? 0: this.systemEventText.hashCode());
    result = 31 * result + (this.isSystemEventStartOfMessages == null ? 0: this.isSystemEventStartOfMessages.hashCode());
    result = 31 * result + (this.isSystemEventStartOfSystemHours == null ? 0: this.isSystemEventStartOfSystemHours.hashCode());
    result = 31 * result + (this.isSystemEventStartOfRegularMarketHours == null ? 0: this.isSystemEventStartOfRegularMarketHours.hashCode());
    result = 31 * result + (this.isSystemEventEndOfRegularMarketHours == null ? 0: this.isSystemEventEndOfRegularMarketHours.hashCode());
    result = 31 * result + (this.isSystemEventEndOfSystemHours == null ? 0: this.isSystemEventEndOfSystemHours.hashCode());
    result = 31 * result + (this.isSystemEventEndOfMessages == null ? 0: this.isSystemEventEndOfMessages.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminSystemEventModel {\n");
    
    sb.append("  timestampNanos: ").append(timestampNanos).append("\n");
    sb.append("  timestamp: ").append(timestamp).append("\n");
    sb.append("  systemEvent: ").append(systemEvent).append("\n");
    sb.append("  systemEventCode: ").append(systemEventCode).append("\n");
    sb.append("  systemEventText: ").append(systemEventText).append("\n");
    sb.append("  isSystemEventStartOfMessages: ").append(isSystemEventStartOfMessages).append("\n");
    sb.append("  isSystemEventStartOfSystemHours: ").append(isSystemEventStartOfSystemHours).append("\n");
    sb.append("  isSystemEventStartOfRegularMarketHours: ").append(isSystemEventStartOfRegularMarketHours).append("\n");
    sb.append("  isSystemEventEndOfRegularMarketHours: ").append(isSystemEventEndOfRegularMarketHours).append("\n");
    sb.append("  isSystemEventEndOfSystemHours: ").append(isSystemEventEndOfSystemHours).append("\n");
    sb.append("  isSystemEventEndOfMessages: ").append(isSystemEventEndOfMessages).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
