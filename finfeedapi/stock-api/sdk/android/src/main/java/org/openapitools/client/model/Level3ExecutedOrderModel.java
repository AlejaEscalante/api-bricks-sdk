/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Represents the response DTO for order executed information
 **/
@ApiModel(description = "Represents the response DTO for order executed information")
public class Level3ExecutedOrderModel {
  
  @SerializedName("symbol")
  private String symbol = null;
  @SerializedName("timestamp_nanos")
  private Long timestampNanos = null;
  @SerializedName("timestamp")
  private Date timestamp = null;
  @SerializedName("order_id_reference")
  private Long orderIdReference = null;
  @SerializedName("sale_condition_flags")
  private Integer saleConditionFlags = null;
  @SerializedName("is_intermarket_sweep")
  private Boolean isIntermarketSweep = null;
  @SerializedName("is_extended_hours_trade")
  private Boolean isExtendedHoursTrade = null;
  @SerializedName("is_odd_lot_trade")
  private Boolean isOddLotTrade = null;
  @SerializedName("is_trade_through_exempt")
  private Boolean isTradeThroughExempt = null;
  @SerializedName("is_single_price_cross_trade")
  private Boolean isSinglePriceCrossTrade = null;
  @SerializedName("size")
  private Integer size = null;
  @SerializedName("price")
  private Double price = null;
  @SerializedName("trade_id")
  private Long tradeId = null;

  /**
   * The stock symbol
   **/
  @ApiModelProperty(value = "The stock symbol")
  public String getSymbol() {
    return symbol;
  }
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  /**
   * Original timestamp in nanoseconds since epoch
   **/
  @ApiModelProperty(value = "Original timestamp in nanoseconds since epoch")
  public Long getTimestampNanos() {
    return timestampNanos;
  }
  public void setTimestampNanos(Long timestampNanos) {
    this.timestampNanos = timestampNanos;
  }

  /**
   * Time when the order was executed as DateTime
   **/
  @ApiModelProperty(value = "Time when the order was executed as DateTime")
  public Date getTimestamp() {
    return timestamp;
  }
  public void setTimestamp(Date timestamp) {
    this.timestamp = timestamp;
  }

  /**
   * Order identifier reference
   **/
  @ApiModelProperty(value = "Order identifier reference")
  public Long getOrderIdReference() {
    return orderIdReference;
  }
  public void setOrderIdReference(Long orderIdReference) {
    this.orderIdReference = orderIdReference;
  }

  /**
   * Sale condition flags for the execution as byte value
   **/
  @ApiModelProperty(value = "Sale condition flags for the execution as byte value")
  public Integer getSaleConditionFlags() {
    return saleConditionFlags;
  }
  public void setSaleConditionFlags(Integer saleConditionFlags) {
    this.saleConditionFlags = saleConditionFlags;
  }

  /**
   * Bit 7 (Mask 0x80): Intermarket Sweep Flag  True: Intermarket Sweep Order (\"ISO\")  False: Non-Intermarket Sweep Order
   **/
  @ApiModelProperty(value = "Bit 7 (Mask 0x80): Intermarket Sweep Flag  True: Intermarket Sweep Order (\"ISO\")  False: Non-Intermarket Sweep Order")
  public Boolean getIsIntermarketSweep() {
    return isIntermarketSweep;
  }
  public void setIsIntermarketSweep(Boolean isIntermarketSweep) {
    this.isIntermarketSweep = isIntermarketSweep;
  }

  /**
   * Bit 6 (Mask 0x40): Extended Hours Flag  True: Extended Hours Trade (i.e., Form T sale condition)  False: Regular Market Session Trade
   **/
  @ApiModelProperty(value = "Bit 6 (Mask 0x40): Extended Hours Flag  True: Extended Hours Trade (i.e., Form T sale condition)  False: Regular Market Session Trade")
  public Boolean getIsExtendedHoursTrade() {
    return isExtendedHoursTrade;
  }
  public void setIsExtendedHoursTrade(Boolean isExtendedHoursTrade) {
    this.isExtendedHoursTrade = isExtendedHoursTrade;
  }

  /**
   * Bit 5 (Mask 0x20): Odd Lot Flag  True: Odd Lot Trade  False: Round or Mixed Lot Trade
   **/
  @ApiModelProperty(value = "Bit 5 (Mask 0x20): Odd Lot Flag  True: Odd Lot Trade  False: Round or Mixed Lot Trade")
  public Boolean getIsOddLotTrade() {
    return isOddLotTrade;
  }
  public void setIsOddLotTrade(Boolean isOddLotTrade) {
    this.isOddLotTrade = isOddLotTrade;
  }

  /**
   * Bit 4 (Mask 0x10): Trade Through Exempt Flag  True: Trade is not subject to Rule 611 (Trade Through) of SEC Reg. NMS  False: Trade is subject to Rule 611 (Trade Through) of SEC Reg. NMS
   **/
  @ApiModelProperty(value = "Bit 4 (Mask 0x10): Trade Through Exempt Flag  True: Trade is not subject to Rule 611 (Trade Through) of SEC Reg. NMS  False: Trade is subject to Rule 611 (Trade Through) of SEC Reg. NMS")
  public Boolean getIsTradeThroughExempt() {
    return isTradeThroughExempt;
  }
  public void setIsTradeThroughExempt(Boolean isTradeThroughExempt) {
    this.isTradeThroughExempt = isTradeThroughExempt;
  }

  /**
   * Bit 3 (Mask 0x08): Single-price Cross Trade Flag  True: Trade resulting from a single-price cross  False: Execution during continuous trading
   **/
  @ApiModelProperty(value = "Bit 3 (Mask 0x08): Single-price Cross Trade Flag  True: Trade resulting from a single-price cross  False: Execution during continuous trading")
  public Boolean getIsSinglePriceCrossTrade() {
    return isSinglePriceCrossTrade;
  }
  public void setIsSinglePriceCrossTrade(Boolean isSinglePriceCrossTrade) {
    this.isSinglePriceCrossTrade = isSinglePriceCrossTrade;
  }

  /**
   * Trade volume in number of shares
   **/
  @ApiModelProperty(value = "Trade volume in number of shares")
  public Integer getSize() {
    return size;
  }
  public void setSize(Integer size) {
    this.size = size;
  }

  /**
   * Execution price as decimal
   **/
  @ApiModelProperty(value = "Execution price as decimal")
  public Double getPrice() {
    return price;
  }
  public void setPrice(Double price) {
    this.price = price;
  }

  /**
   * IEX trade identifier
   **/
  @ApiModelProperty(value = "IEX trade identifier")
  public Long getTradeId() {
    return tradeId;
  }
  public void setTradeId(Long tradeId) {
    this.tradeId = tradeId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Level3ExecutedOrderModel level3ExecutedOrderModel = (Level3ExecutedOrderModel) o;
    return (this.symbol == null ? level3ExecutedOrderModel.symbol == null : this.symbol.equals(level3ExecutedOrderModel.symbol)) &&
        (this.timestampNanos == null ? level3ExecutedOrderModel.timestampNanos == null : this.timestampNanos.equals(level3ExecutedOrderModel.timestampNanos)) &&
        (this.timestamp == null ? level3ExecutedOrderModel.timestamp == null : this.timestamp.equals(level3ExecutedOrderModel.timestamp)) &&
        (this.orderIdReference == null ? level3ExecutedOrderModel.orderIdReference == null : this.orderIdReference.equals(level3ExecutedOrderModel.orderIdReference)) &&
        (this.saleConditionFlags == null ? level3ExecutedOrderModel.saleConditionFlags == null : this.saleConditionFlags.equals(level3ExecutedOrderModel.saleConditionFlags)) &&
        (this.isIntermarketSweep == null ? level3ExecutedOrderModel.isIntermarketSweep == null : this.isIntermarketSweep.equals(level3ExecutedOrderModel.isIntermarketSweep)) &&
        (this.isExtendedHoursTrade == null ? level3ExecutedOrderModel.isExtendedHoursTrade == null : this.isExtendedHoursTrade.equals(level3ExecutedOrderModel.isExtendedHoursTrade)) &&
        (this.isOddLotTrade == null ? level3ExecutedOrderModel.isOddLotTrade == null : this.isOddLotTrade.equals(level3ExecutedOrderModel.isOddLotTrade)) &&
        (this.isTradeThroughExempt == null ? level3ExecutedOrderModel.isTradeThroughExempt == null : this.isTradeThroughExempt.equals(level3ExecutedOrderModel.isTradeThroughExempt)) &&
        (this.isSinglePriceCrossTrade == null ? level3ExecutedOrderModel.isSinglePriceCrossTrade == null : this.isSinglePriceCrossTrade.equals(level3ExecutedOrderModel.isSinglePriceCrossTrade)) &&
        (this.size == null ? level3ExecutedOrderModel.size == null : this.size.equals(level3ExecutedOrderModel.size)) &&
        (this.price == null ? level3ExecutedOrderModel.price == null : this.price.equals(level3ExecutedOrderModel.price)) &&
        (this.tradeId == null ? level3ExecutedOrderModel.tradeId == null : this.tradeId.equals(level3ExecutedOrderModel.tradeId));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.symbol == null ? 0: this.symbol.hashCode());
    result = 31 * result + (this.timestampNanos == null ? 0: this.timestampNanos.hashCode());
    result = 31 * result + (this.timestamp == null ? 0: this.timestamp.hashCode());
    result = 31 * result + (this.orderIdReference == null ? 0: this.orderIdReference.hashCode());
    result = 31 * result + (this.saleConditionFlags == null ? 0: this.saleConditionFlags.hashCode());
    result = 31 * result + (this.isIntermarketSweep == null ? 0: this.isIntermarketSweep.hashCode());
    result = 31 * result + (this.isExtendedHoursTrade == null ? 0: this.isExtendedHoursTrade.hashCode());
    result = 31 * result + (this.isOddLotTrade == null ? 0: this.isOddLotTrade.hashCode());
    result = 31 * result + (this.isTradeThroughExempt == null ? 0: this.isTradeThroughExempt.hashCode());
    result = 31 * result + (this.isSinglePriceCrossTrade == null ? 0: this.isSinglePriceCrossTrade.hashCode());
    result = 31 * result + (this.size == null ? 0: this.size.hashCode());
    result = 31 * result + (this.price == null ? 0: this.price.hashCode());
    result = 31 * result + (this.tradeId == null ? 0: this.tradeId.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Level3ExecutedOrderModel {\n");
    
    sb.append("  symbol: ").append(symbol).append("\n");
    sb.append("  timestampNanos: ").append(timestampNanos).append("\n");
    sb.append("  timestamp: ").append(timestamp).append("\n");
    sb.append("  orderIdReference: ").append(orderIdReference).append("\n");
    sb.append("  saleConditionFlags: ").append(saleConditionFlags).append("\n");
    sb.append("  isIntermarketSweep: ").append(isIntermarketSweep).append("\n");
    sb.append("  isExtendedHoursTrade: ").append(isExtendedHoursTrade).append("\n");
    sb.append("  isOddLotTrade: ").append(isOddLotTrade).append("\n");
    sb.append("  isTradeThroughExempt: ").append(isTradeThroughExempt).append("\n");
    sb.append("  isSinglePriceCrossTrade: ").append(isSinglePriceCrossTrade).append("\n");
    sb.append("  size: ").append(size).append("\n");
    sb.append("  price: ").append(price).append("\n");
    sb.append("  tradeId: ").append(tradeId).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
