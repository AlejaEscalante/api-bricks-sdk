/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.AdminMessageModel
import java.time.OffsetDateTime
import org.openapitools.client.model.OrderBookModel
import org.openapitools.client.model.PriceLevelUpdateModel
import org.openapitools.client.model.QuoteUpdateModel
import org.openapitools.client.model.SystemEventModel
import org.openapitools.client.model.TradeModel
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object NativeIEXApi {

  def apply(baseUrl: String = "https://api-historical.stock.finfeedapi.com") = new NativeIEXApi(baseUrl)
}

class NativeIEXApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : Seq[AdminMessageModel] (successful operation)
   * 
   * @param symbol The symbol identifier
   * @param date Optional date in format YYYY-MM-DD (defaults to latest available data)
   */
  def v1NativeIexAdminMessagesSymbolGet(symbol: String, date: OffsetDateTime): ApiRequest[Seq[AdminMessageModel]] =
    ApiRequest[Seq[AdminMessageModel]](ApiMethods.GET, baseUrl, "/v1/native/iex/admin/messages/{symbol}", "application/json")
      .withQueryParam("date", date)
      .withPathParam("symbol", symbol)
      .withSuccessResponse[Seq[AdminMessageModel]](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[SystemEventModel] (successful operation)
   * 
   * @param date Date in format YYYY-MM-DD
   */
  def v1NativeIexAdminSystemEventGet(date: OffsetDateTime): ApiRequest[Seq[SystemEventModel]] =
    ApiRequest[Seq[SystemEventModel]](ApiMethods.GET, baseUrl, "/v1/native/iex/admin/system-event", "application/json")
      .withQueryParam("date", date)
      .withSuccessResponse[Seq[SystemEventModel]](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[QuoteUpdateModel] (successful operation)
   * 
   * @param symbol The symbol identifier
   * @param date Optional date in format YYYY-MM-DD (defaults to latest available data)
   */
  def v1NativeIexLevel1QuoteSymbolGet(symbol: String, date: OffsetDateTime): ApiRequest[Seq[QuoteUpdateModel]] =
    ApiRequest[Seq[QuoteUpdateModel]](ApiMethods.GET, baseUrl, "/v1/native/iex/level1-quote/{symbol}", "application/json")
      .withQueryParam("date", date)
      .withPathParam("symbol", symbol)
      .withSuccessResponse[Seq[QuoteUpdateModel]](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[PriceLevelUpdateModel] (successful operation)
   * 
   * @param symbol The symbol identifier
   * @param date Optional date in format YYYY-MM-DD (defaults to latest available data)
   */
  def v1NativeIexLevel2PriceLevelUpdateSymbolGet(symbol: String, date: OffsetDateTime): ApiRequest[Seq[PriceLevelUpdateModel]] =
    ApiRequest[Seq[PriceLevelUpdateModel]](ApiMethods.GET, baseUrl, "/v1/native/iex/level2-price-level-update/{symbol}", "application/json")
      .withQueryParam("date", date)
      .withPathParam("symbol", symbol)
      .withSuccessResponse[Seq[PriceLevelUpdateModel]](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[OrderBookModel] (successful operation)
   * 
   * @param symbol The symbol identifier
   * @param date Optional date in format YYYY-MM-DD (defaults to latest available data)
   */
  def v1NativeIexLevel3OrderBookSymbolGet(symbol: String, date: OffsetDateTime): ApiRequest[Seq[OrderBookModel]] =
    ApiRequest[Seq[OrderBookModel]](ApiMethods.GET, baseUrl, "/v1/native/iex/level3-order-book/{symbol}", "application/json")
      .withQueryParam("date", date)
      .withPathParam("symbol", symbol)
      .withSuccessResponse[Seq[OrderBookModel]](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[TradeModel] (successful operation)
   * 
   * @param symbol The symbol identifier
   * @param date Optional date in format YYYY-MM-DD (defaults to latest available data)
   */
  def v1NativeIexTradeSymbolGet(symbol: String, date: OffsetDateTime): ApiRequest[Seq[TradeModel]] =
    ApiRequest[Seq[TradeModel]](ApiMethods.GET, baseUrl, "/v1/native/iex/trade/{symbol}", "application/json")
      .withQueryParam("date", date)
      .withPathParam("symbol", symbol)
      .withSuccessResponse[Seq[TradeModel]](200)
      



}

