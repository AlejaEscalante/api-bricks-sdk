/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.TradeTradeModel

class TradeTradeModelTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of TradeTradeModel
        //val modelInstance = TradeTradeModel()

        // to test the property `isTradeBreak` - Indicates if this record represents a trade break (true) or a trade report (false).
        should("test isTradeBreak") {
            // uncomment below to test the property
            //modelInstance.isTradeBreak shouldBe ("TODO")
        }

        // to test the property `symbol` - The stock symbol.
        should("test symbol") {
            // uncomment below to test the property
            //modelInstance.symbol shouldBe ("TODO")
        }

        // to test the property `timestampNanos` - Original timestamp in nanoseconds since epoch.
        should("test timestampNanos") {
            // uncomment below to test the property
            //modelInstance.timestampNanos shouldBe ("TODO")
        }

        // to test the property `timestamp` - Time when the event was recorded as DateTime (UTC).
        should("test timestamp") {
            // uncomment below to test the property
            //modelInstance.timestamp shouldBe ("TODO")
        }

        // to test the property `propertySize` - Trade volume (or break volume) in number of shares.
        should("test propertySize") {
            // uncomment below to test the property
            //modelInstance.propertySize shouldBe ("TODO")
        }

        // to test the property `price` - Trade price (or break price) as decimal.
        should("test price") {
            // uncomment below to test the property
            //modelInstance.price shouldBe ("TODO")
        }

        // to test the property `tradeId` - IEX trade identifier (same for report and its corresponding break).
        should("test tradeId") {
            // uncomment below to test the property
            //modelInstance.tradeId shouldBe ("TODO")
        }

        // to test the property `isIntermarketSweep` - Bit 7 (Mask 0x80): Intermarket Sweep Flag.  True: Intermarket Sweep Order (\"ISO\").  False: Non-Intermarket Sweep Order.
        should("test isIntermarketSweep") {
            // uncomment below to test the property
            //modelInstance.isIntermarketSweep shouldBe ("TODO")
        }

        // to test the property `isExtendedHoursTrade` - Bit 6 (Mask 0x40): Extended Hours Flag.  True: Extended Hours Trade (i.e., Form T sale condition).  False: Regular Market Session Trade.
        should("test isExtendedHoursTrade") {
            // uncomment below to test the property
            //modelInstance.isExtendedHoursTrade shouldBe ("TODO")
        }

        // to test the property `isOddLotTrade` - Bit 5 (Mask 0x20): Odd Lot Flag.  True: Odd Lot Trade.  False: Round or Mixed Lot Trade.
        should("test isOddLotTrade") {
            // uncomment below to test the property
            //modelInstance.isOddLotTrade shouldBe ("TODO")
        }

        // to test the property `isTradeThroughExempt` - Bit 4 (Mask 0x10): Trade Through Exempt Flag.  True: Trade is not subject to Rule 611 (Trade Through) of SEC Reg. NMS.  False: Trade is subject to Rule 611 (Trade Through) of SEC Reg. NMS.  Applied when the taking order was an ISO that traded through a protected quotation,  OR the NBBO was crossed at the time of the trade,  OR the trade occurred through a self-helped venue's quotation,  OR the trade was a single-price cross.
        should("test isTradeThroughExempt") {
            // uncomment below to test the property
            //modelInstance.isTradeThroughExempt shouldBe ("TODO")
        }

        // to test the property `isSinglePriceCrossTrade` - Bit 3 (Mask 0x08): Single-price Cross Trade Flag.  True: Trade resulting from a single-price cross.  False: Execution during continuous trading.
        should("test isSinglePriceCrossTrade") {
            // uncomment below to test the property
            //modelInstance.isSinglePriceCrossTrade shouldBe ("TODO")
        }

    }
}
