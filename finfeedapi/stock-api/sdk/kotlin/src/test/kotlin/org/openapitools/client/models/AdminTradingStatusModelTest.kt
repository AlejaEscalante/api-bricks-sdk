/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.AdminTradingStatusModel

class AdminTradingStatusModelTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of AdminTradingStatusModel
        //val modelInstance = AdminTradingStatusModel()

        // to test the property `symbol` - The stock symbol
        should("test symbol") {
            // uncomment below to test the property
            //modelInstance.symbol shouldBe ("TODO")
        }

        // to test the property `timestampNanos` - Original timestamp in nanoseconds since epoch
        should("test timestampNanos") {
            // uncomment below to test the property
            //modelInstance.timestampNanos shouldBe ("TODO")
        }

        // to test the property `timestamp` - Time when the trading status was recorded as DateTime
        should("test timestamp") {
            // uncomment below to test the property
            //modelInstance.timestamp shouldBe ("TODO")
        }

        // to test the property `isTradingLive` - Gets whether the security is currently trading on IEX
        should("test isTradingLive") {
            // uncomment below to test the property
            //modelInstance.isTradingLive shouldBe ("TODO")
        }

        // to test the property `isTradingHalted` - Gets whether the security is halted across all US equity markets
        should("test isTradingHalted") {
            // uncomment below to test the property
            //modelInstance.isTradingHalted shouldBe ("TODO")
        }

        // to test the property `isTradingInOrderAcceptancePeriod` - Gets whether the security is in Order Acceptance Period on IEX
        should("test isTradingInOrderAcceptancePeriod") {
            // uncomment below to test the property
            //modelInstance.isTradingInOrderAcceptancePeriod shouldBe ("TODO")
        }

        // to test the property `isTradingPaused` - Gets whether the security is paused and in Order Acceptance Period on IEX
        should("test isTradingPaused") {
            // uncomment below to test the property
            //modelInstance.isTradingPaused shouldBe ("TODO")
        }

        // to test the property `isReasonHaltNewsPending` - Gets whether the halt reason is News Pending
        should("test isReasonHaltNewsPending") {
            // uncomment below to test the property
            //modelInstance.isReasonHaltNewsPending shouldBe ("TODO")
        }

        // to test the property `isReasonIpoNotYetTrading` - Gets whether the halt reason is IPO Not Yet Trading
        should("test isReasonIpoNotYetTrading") {
            // uncomment below to test the property
            //modelInstance.isReasonIpoNotYetTrading shouldBe ("TODO")
        }

        // to test the property `isReasonIpoDeferred` - Gets whether the halt reason is IPO Deferred
        should("test isReasonIpoDeferred") {
            // uncomment below to test the property
            //modelInstance.isReasonIpoDeferred shouldBe ("TODO")
        }

        // to test the property `isReasonHaltNewsDissemination` - Gets whether the order acceptance period reason is Halt News Dissemination
        should("test isReasonHaltNewsDissemination") {
            // uncomment below to test the property
            //modelInstance.isReasonHaltNewsDissemination shouldBe ("TODO")
        }

        // to test the property `isReasonIpoOrderAcceptancePeriod` - Gets whether the order acceptance period reason is IPO Order Acceptance Period
        should("test isReasonIpoOrderAcceptancePeriod") {
            // uncomment below to test the property
            //modelInstance.isReasonIpoOrderAcceptancePeriod shouldBe ("TODO")
        }

        // to test the property `isReasonIpoPreLaunchPeriod` - Gets whether the order acceptance period reason is IPO Pre-Launch Period
        should("test isReasonIpoPreLaunchPeriod") {
            // uncomment below to test the property
            //modelInstance.isReasonIpoPreLaunchPeriod shouldBe ("TODO")
        }

        // to test the property `isReasonMarketWideCircuitBreakerLevel1` - Gets whether the order acceptance period reason is Market-Wide Circuit Breaker Level 1 – Breached
        should("test isReasonMarketWideCircuitBreakerLevel1") {
            // uncomment below to test the property
            //modelInstance.isReasonMarketWideCircuitBreakerLevel1 shouldBe ("TODO")
        }

        // to test the property `isReasonMarketWideCircuitBreakerLevel2` - Gets whether the order acceptance period reason is Market-Wide Circuit Breaker Level 2 – Breached
        should("test isReasonMarketWideCircuitBreakerLevel2") {
            // uncomment below to test the property
            //modelInstance.isReasonMarketWideCircuitBreakerLevel2 shouldBe ("TODO")
        }

        // to test the property `isReasonMarketWideCircuitBreakerLevel3` - Gets whether the halt reason is Market-Wide Circuit Breaker Level 3 – Breached
        should("test isReasonMarketWideCircuitBreakerLevel3") {
            // uncomment below to test the property
            //modelInstance.isReasonMarketWideCircuitBreakerLevel3 shouldBe ("TODO")
        }

        // to test the property `isReasonNotApplicable` - Gets whether the reason is Not Applicable
        should("test isReasonNotApplicable") {
            // uncomment below to test the property
            //modelInstance.isReasonNotApplicable shouldBe ("TODO")
        }

        // to test the property `isReasonNotAvailable` - Gets whether the halt reason is Not Available
        should("test isReasonNotAvailable") {
            // uncomment below to test the property
            //modelInstance.isReasonNotAvailable shouldBe ("TODO")
        }

    }
}
