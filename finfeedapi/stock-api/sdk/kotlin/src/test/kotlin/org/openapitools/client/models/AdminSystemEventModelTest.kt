/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.AdminSystemEventModel

class AdminSystemEventModelTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of AdminSystemEventModel
        //val modelInstance = AdminSystemEventModel()

        // to test the property `timestampNanos` - Original timestamp in nanoseconds since epoch
        should("test timestampNanos") {
            // uncomment below to test the property
            //modelInstance.timestampNanos shouldBe ("TODO")
        }

        // to test the property `timestamp` - Time when the system event was recorded as DateTime
        should("test timestamp") {
            // uncomment below to test the property
            //modelInstance.timestamp shouldBe ("TODO")
        }

        // to test the property `systemEvent` - System event as byte value
        should("test systemEvent") {
            // uncomment below to test the property
            //modelInstance.systemEvent shouldBe ("TODO")
        }

        // to test the property `systemEventCode` - System event as string
        should("test systemEventCode") {
            // uncomment below to test the property
            //modelInstance.systemEventCode shouldBe ("TODO")
        }

        // to test the property `systemEventText` - Human-readable description of the system event
        should("test systemEventText") {
            // uncomment below to test the property
            //modelInstance.systemEventText shouldBe ("TODO")
        }

        // to test the property `isSystemEventStartOfMessages` - Indicates if the system event is 'Start of Messages' (O).  Outside of heartbeat messages on the lower level protocol,   the start of day message is the first message sent in any trading session.
        should("test isSystemEventStartOfMessages") {
            // uncomment below to test the property
            //modelInstance.isSystemEventStartOfMessages shouldBe ("TODO")
        }

        // to test the property `isSystemEventStartOfSystemHours` - Indicates if the system event is 'Start of System Hours' (S).  This message indicates that IEX is open and ready to start accepting orders.
        should("test isSystemEventStartOfSystemHours") {
            // uncomment below to test the property
            //modelInstance.isSystemEventStartOfSystemHours shouldBe ("TODO")
        }

        // to test the property `isSystemEventStartOfRegularMarketHours` - Indicates if the system event is 'Start of Regular Market Hours' (R).  This message indicates that DAY and GTX orders, as well as market orders and pegged orders,   are available for execution on IEX.
        should("test isSystemEventStartOfRegularMarketHours") {
            // uncomment below to test the property
            //modelInstance.isSystemEventStartOfRegularMarketHours shouldBe ("TODO")
        }

        // to test the property `isSystemEventEndOfRegularMarketHours` - Indicates if the system event is 'End of Regular Market Hours' (M).  This message indicates that DAY orders, market orders, and pegged orders   are no longer accepted by IEX.
        should("test isSystemEventEndOfRegularMarketHours") {
            // uncomment below to test the property
            //modelInstance.isSystemEventEndOfRegularMarketHours shouldBe ("TODO")
        }

        // to test the property `isSystemEventEndOfSystemHours` - Indicates if the system event is 'End of System Hours' (E).  This message indicates that IEX is now closed and will not accept   any new orders during this trading session. It is still possible   to receive messages after the end of day.
        should("test isSystemEventEndOfSystemHours") {
            // uncomment below to test the property
            //modelInstance.isSystemEventEndOfSystemHours shouldBe ("TODO")
        }

        // to test the property `isSystemEventEndOfMessages` - Indicates if the system event is 'End of Messages' (C).  This is always the last message sent in any trading session.
        should("test isSystemEventEndOfMessages") {
            // uncomment below to test the property
            //modelInstance.isSystemEventEndOfMessages shouldBe ("TODO")
        }

    }
}
