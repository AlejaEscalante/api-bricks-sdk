/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.AdminShortSalePriceTestStatusModel

class AdminShortSalePriceTestStatusModelTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of AdminShortSalePriceTestStatusModel
        //val modelInstance = AdminShortSalePriceTestStatusModel()

        // to test the property `symbol` - The stock symbol
        should("test symbol") {
            // uncomment below to test the property
            //modelInstance.symbol shouldBe ("TODO")
        }

        // to test the property `timestampNanos` - Original timestamp in nanoseconds since epoch
        should("test timestampNanos") {
            // uncomment below to test the property
            //modelInstance.timestampNanos shouldBe ("TODO")
        }

        // to test the property `timestamp` - Time when the short sale price test status was recorded as DateTime
        should("test timestamp") {
            // uncomment below to test the property
            //modelInstance.timestamp shouldBe ("TODO")
        }

        // to test the property `shortSalePriceTestStatus` - Short sale price test status as byte value
        should("test shortSalePriceTestStatus") {
            // uncomment below to test the property
            //modelInstance.shortSalePriceTestStatus shouldBe ("TODO")
        }

        // to test the property `shortSalePriceTestStatusCode` - Short sale price test status as hex string
        should("test shortSalePriceTestStatusCode") {
            // uncomment below to test the property
            //modelInstance.shortSalePriceTestStatusCode shouldBe ("TODO")
        }

        // to test the property `shortSalePriceTestStatusText` - Human-readable description of the short sale price test status
        should("test shortSalePriceTestStatusText") {
            // uncomment below to test the property
            //modelInstance.shortSalePriceTestStatusText shouldBe ("TODO")
        }

        // to test the property `isShortSalePriceTestNotInEffect` - Indicates if the short sale price test is not in effect
        should("test isShortSalePriceTestNotInEffect") {
            // uncomment below to test the property
            //modelInstance.isShortSalePriceTestNotInEffect shouldBe ("TODO")
        }

        // to test the property `isShortSalePriceTestInEffect` - Indicates if the short sale price test is in effect
        should("test isShortSalePriceTestInEffect") {
            // uncomment below to test the property
            //modelInstance.isShortSalePriceTestInEffect shouldBe ("TODO")
        }

        // to test the property `detail` - Detail of the short sale price test as byte value
        should("test detail") {
            // uncomment below to test the property
            //modelInstance.detail shouldBe ("TODO")
        }

        // to test the property `detailCode` - Detail of the short sale price test as character string
        should("test detailCode") {
            // uncomment below to test the property
            //modelInstance.detailCode shouldBe ("TODO")
        }

        // to test the property `detailText` - Human-readable description of the short sale price test detail
        should("test detailText") {
            // uncomment below to test the property
            //modelInstance.detailText shouldBe ("TODO")
        }

        // to test the property `isDetailNoPriceTest` - Indicates if there is no price test in place
        should("test isDetailNoPriceTest") {
            // uncomment below to test the property
            //modelInstance.isDetailNoPriceTest shouldBe ("TODO")
        }

        // to test the property `isDetailActivated` - Indicates if the short sale price test restriction is in effect due to an intraday price drop
        should("test isDetailActivated") {
            // uncomment below to test the property
            //modelInstance.isDetailActivated shouldBe ("TODO")
        }

        // to test the property `isDetailContinued` - Indicates if the short sale price test restriction remains in effect from prior day
        should("test isDetailContinued") {
            // uncomment below to test the property
            //modelInstance.isDetailContinued shouldBe ("TODO")
        }

        // to test the property `isDetailDeactivated` - Indicates if the short sale price test restriction is deactivated
        should("test isDetailDeactivated") {
            // uncomment below to test the property
            //modelInstance.isDetailDeactivated shouldBe ("TODO")
        }

        // to test the property `isDetailNotAvailable` - Indicates if the detail is not available
        should("test isDetailNotAvailable") {
            // uncomment below to test the property
            //modelInstance.isDetailNotAvailable shouldBe ("TODO")
        }

    }
}
