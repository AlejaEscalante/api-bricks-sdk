=begin
#REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Contact: support@apibricks.io
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Represents the response DTO for order executed information
  class Level3ExecutedOrderModel
    # The stock symbol
    attr_accessor :symbol

    # Original timestamp in nanoseconds since epoch
    attr_accessor :timestamp_nanos

    # Time when the order was executed as DateTime
    attr_accessor :timestamp

    # Order identifier reference
    attr_accessor :order_id_reference

    # Sale condition flags for the execution as byte value
    attr_accessor :sale_condition_flags

    # Bit 7 (Mask 0x80): Intermarket Sweep Flag  True: Intermarket Sweep Order (\"ISO\")  False: Non-Intermarket Sweep Order
    attr_accessor :is_intermarket_sweep

    # Bit 6 (Mask 0x40): Extended Hours Flag  True: Extended Hours Trade (i.e., Form T sale condition)  False: Regular Market Session Trade
    attr_accessor :is_extended_hours_trade

    # Bit 5 (Mask 0x20): Odd Lot Flag  True: Odd Lot Trade  False: Round or Mixed Lot Trade
    attr_accessor :is_odd_lot_trade

    # Bit 4 (Mask 0x10): Trade Through Exempt Flag  True: Trade is not subject to Rule 611 (Trade Through) of SEC Reg. NMS  False: Trade is subject to Rule 611 (Trade Through) of SEC Reg. NMS
    attr_accessor :is_trade_through_exempt

    # Bit 3 (Mask 0x08): Single-price Cross Trade Flag  True: Trade resulting from a single-price cross  False: Execution during continuous trading
    attr_accessor :is_single_price_cross_trade

    # Trade volume in number of shares
    attr_accessor :size

    # Execution price as decimal
    attr_accessor :price

    # IEX trade identifier
    attr_accessor :trade_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'symbol' => :'symbol',
        :'timestamp_nanos' => :'timestamp_nanos',
        :'timestamp' => :'timestamp',
        :'order_id_reference' => :'order_id_reference',
        :'sale_condition_flags' => :'sale_condition_flags',
        :'is_intermarket_sweep' => :'is_intermarket_sweep',
        :'is_extended_hours_trade' => :'is_extended_hours_trade',
        :'is_odd_lot_trade' => :'is_odd_lot_trade',
        :'is_trade_through_exempt' => :'is_trade_through_exempt',
        :'is_single_price_cross_trade' => :'is_single_price_cross_trade',
        :'size' => :'size',
        :'price' => :'price',
        :'trade_id' => :'trade_id'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'symbol' => :'String',
        :'timestamp_nanos' => :'Integer',
        :'timestamp' => :'Time',
        :'order_id_reference' => :'Integer',
        :'sale_condition_flags' => :'Integer',
        :'is_intermarket_sweep' => :'Boolean',
        :'is_extended_hours_trade' => :'Boolean',
        :'is_odd_lot_trade' => :'Boolean',
        :'is_trade_through_exempt' => :'Boolean',
        :'is_single_price_cross_trade' => :'Boolean',
        :'size' => :'Integer',
        :'price' => :'Float',
        :'trade_id' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'symbol',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Level3ExecutedOrderModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Level3ExecutedOrderModel`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'symbol')
        self.symbol = attributes[:'symbol']
      end

      if attributes.key?(:'timestamp_nanos')
        self.timestamp_nanos = attributes[:'timestamp_nanos']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'order_id_reference')
        self.order_id_reference = attributes[:'order_id_reference']
      end

      if attributes.key?(:'sale_condition_flags')
        self.sale_condition_flags = attributes[:'sale_condition_flags']
      end

      if attributes.key?(:'is_intermarket_sweep')
        self.is_intermarket_sweep = attributes[:'is_intermarket_sweep']
      end

      if attributes.key?(:'is_extended_hours_trade')
        self.is_extended_hours_trade = attributes[:'is_extended_hours_trade']
      end

      if attributes.key?(:'is_odd_lot_trade')
        self.is_odd_lot_trade = attributes[:'is_odd_lot_trade']
      end

      if attributes.key?(:'is_trade_through_exempt')
        self.is_trade_through_exempt = attributes[:'is_trade_through_exempt']
      end

      if attributes.key?(:'is_single_price_cross_trade')
        self.is_single_price_cross_trade = attributes[:'is_single_price_cross_trade']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'trade_id')
        self.trade_id = attributes[:'trade_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          symbol == o.symbol &&
          timestamp_nanos == o.timestamp_nanos &&
          timestamp == o.timestamp &&
          order_id_reference == o.order_id_reference &&
          sale_condition_flags == o.sale_condition_flags &&
          is_intermarket_sweep == o.is_intermarket_sweep &&
          is_extended_hours_trade == o.is_extended_hours_trade &&
          is_odd_lot_trade == o.is_odd_lot_trade &&
          is_trade_through_exempt == o.is_trade_through_exempt &&
          is_single_price_cross_trade == o.is_single_price_cross_trade &&
          size == o.size &&
          price == o.price &&
          trade_id == o.trade_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [symbol, timestamp_nanos, timestamp, order_id_reference, sale_condition_flags, is_intermarket_sweep, is_extended_hours_trade, is_odd_lot_trade, is_trade_through_exempt, is_single_price_cross_trade, size, price, trade_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
