/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/FinFeedAPI_SymbolModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

FinFeedAPI_SymbolModel::FinFeedAPI_SymbolModel()
{
    m_Symbol_id = utility::conversions::to_string_t("");
    m_Symbol_idIsSet = false;
    m_Exchange_id = utility::conversions::to_string_t("");
    m_Exchange_idIsSet = false;
    m_Security_category = utility::conversions::to_string_t("");
    m_Security_categoryIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_date = utility::conversions::to_string_t("");
    m_dateIsSet = false;
    m_Asset_class = utility::conversions::to_string_t("");
    m_Asset_classIsSet = false;
}

FinFeedAPI_SymbolModel::~FinFeedAPI_SymbolModel()
{
}

void FinFeedAPI_SymbolModel::validate()
{
    // TODO: implement validation
}

web::json::value FinFeedAPI_SymbolModel::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Symbol_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("symbol_id"))] = ModelBase::toJson(m_Symbol_id);
    }
    if(m_Exchange_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("exchange_id"))] = ModelBase::toJson(m_Exchange_id);
    }
    if(m_Security_categoryIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("security_category"))] = ModelBase::toJson(m_Security_category);
    }
    if(m_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_dateIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("date"))] = ModelBase::toJson(m_date);
    }
    if(m_Asset_classIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("asset_class"))] = ModelBase::toJson(m_Asset_class);
    }

    return val;
}

bool FinFeedAPI_SymbolModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("symbol_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolId);
            setSymbolId(refVal_setSymbolId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exchange_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exchange_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExchangeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExchangeId);
            setExchangeId(refVal_setExchangeId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("security_category"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("security_category")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSecurityCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecurityCategory);
            setSecurityCategory(refVal_setSecurityCategory);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDate);
            setDate(refVal_setDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("asset_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("asset_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetClass);
            setAssetClass(refVal_setAssetClass);
            
        }
    }
    return ok;
}

void FinFeedAPI_SymbolModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Symbol_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol_id")), m_Symbol_id));
    }
    if(m_Exchange_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exchange_id")), m_Exchange_id));
    }
    if(m_Security_categoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("security_category")), m_Security_category));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("date")), m_date));
    }
    if(m_Asset_classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("asset_class")), m_Asset_class));
    }
}

bool FinFeedAPI_SymbolModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol_id"))))
    {
        utility::string_t refVal_setSymbolId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol_id"))), refVal_setSymbolId );
        setSymbolId(refVal_setSymbolId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exchange_id"))))
    {
        utility::string_t refVal_setExchangeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exchange_id"))), refVal_setExchangeId );
        setExchangeId(refVal_setExchangeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("security_category"))))
    {
        utility::string_t refVal_setSecurityCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("security_category"))), refVal_setSecurityCategory );
        setSecurityCategory(refVal_setSecurityCategory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("date"))))
    {
        utility::string_t refVal_setDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("date"))), refVal_setDate );
        setDate(refVal_setDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("asset_class"))))
    {
        utility::string_t refVal_setAssetClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("asset_class"))), refVal_setAssetClass );
        setAssetClass(refVal_setAssetClass);
    }
    return ok;
}


utility::string_t FinFeedAPI_SymbolModel::getSymbolId() const
{
    return m_Symbol_id;
}


void FinFeedAPI_SymbolModel::setSymbolId(const utility::string_t& value)
{
    m_Symbol_id = value;
    m_Symbol_idIsSet = true;
}

bool FinFeedAPI_SymbolModel::symbolIdIsSet() const
{
    return m_Symbol_idIsSet;
}

void FinFeedAPI_SymbolModel::unsetSymbol_id()
{
    m_Symbol_idIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getExchangeId() const
{
    return m_Exchange_id;
}


void FinFeedAPI_SymbolModel::setExchangeId(const utility::string_t& value)
{
    m_Exchange_id = value;
    m_Exchange_idIsSet = true;
}

bool FinFeedAPI_SymbolModel::exchangeIdIsSet() const
{
    return m_Exchange_idIsSet;
}

void FinFeedAPI_SymbolModel::unsetExchange_id()
{
    m_Exchange_idIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getSecurityCategory() const
{
    return m_Security_category;
}


void FinFeedAPI_SymbolModel::setSecurityCategory(const utility::string_t& value)
{
    m_Security_category = value;
    m_Security_categoryIsSet = true;
}

bool FinFeedAPI_SymbolModel::securityCategoryIsSet() const
{
    return m_Security_categoryIsSet;
}

void FinFeedAPI_SymbolModel::unsetSecurity_category()
{
    m_Security_categoryIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getName() const
{
    return m_Name;
}


void FinFeedAPI_SymbolModel::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool FinFeedAPI_SymbolModel::nameIsSet() const
{
    return m_NameIsSet;
}

void FinFeedAPI_SymbolModel::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getDate() const
{
    return m_date;
}


void FinFeedAPI_SymbolModel::setDate(const utility::string_t& value)
{
    m_date = value;
    m_dateIsSet = true;
}

bool FinFeedAPI_SymbolModel::dateIsSet() const
{
    return m_dateIsSet;
}

void FinFeedAPI_SymbolModel::unsetdate()
{
    m_dateIsSet = false;
}
utility::string_t FinFeedAPI_SymbolModel::getAssetClass() const
{
    return m_Asset_class;
}


void FinFeedAPI_SymbolModel::setAssetClass(const utility::string_t& value)
{
    m_Asset_class = value;
    m_Asset_classIsSet = true;
}

bool FinFeedAPI_SymbolModel::assetClassIsSet() const
{
    return m_Asset_classIsSet;
}

void FinFeedAPI_SymbolModel::unsetAsset_class()
{
    m_Asset_classIsSet = false;
}

}
}
}
}


