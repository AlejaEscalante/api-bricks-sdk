/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Level2_PriceLevelUpdateModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Level2_PriceLevelUpdateModel::Level2_PriceLevelUpdateModel()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Timestamp_nanos = 0L;
    m_Timestamp_nanosIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_Is_side_buy = false;
    m_Is_side_buyIsSet = false;
    m_Is_event_processing_complete = false;
    m_Is_event_processing_completeIsSet = false;
    m_Size = 0;
    m_SizeIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
}

Level2_PriceLevelUpdateModel::~Level2_PriceLevelUpdateModel()
{
}

void Level2_PriceLevelUpdateModel::validate()
{
    // TODO: implement validation
}

web::json::value Level2_PriceLevelUpdateModel::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SymbolIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_Timestamp_nanosIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("timestamp_nanos"))] = ModelBase::toJson(m_Timestamp_nanos);
    }
    if(m_TimestampIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Is_side_buyIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_side_buy"))] = ModelBase::toJson(m_Is_side_buy);
    }
    if(m_Is_event_processing_completeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("is_event_processing_complete"))] = ModelBase::toJson(m_Is_event_processing_complete);
    }
    if(m_SizeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("size"))] = ModelBase::toJson(m_Size);
    }
    if(m_PriceIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("price"))] = ModelBase::toJson(m_Price);
    }

    return val;
}

bool Level2_PriceLevelUpdateModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp_nanos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp_nanos")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTimestampNanos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestampNanos);
            setTimestampNanos(refVal_setTimestampNanos);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_side_buy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_side_buy")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSideBuy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSideBuy);
            setIsSideBuy(refVal_setIsSideBuy);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_event_processing_complete"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_event_processing_complete")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsEventProcessingComplete;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsEventProcessingComplete);
            setIsEventProcessingComplete(refVal_setIsEventProcessingComplete);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSize);
            setSize(refVal_setSize);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price")));
        if(!fieldValue.is_null())
        {
            double refVal_setPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice);
            setPrice(refVal_setPrice);
            
        }
    }
    return ok;
}

void Level2_PriceLevelUpdateModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_Timestamp_nanosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp_nanos")), m_Timestamp_nanos));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_Is_side_buyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_side_buy")), m_Is_side_buy));
    }
    if(m_Is_event_processing_completeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_event_processing_complete")), m_Is_event_processing_complete));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size")), m_Size));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price")), m_Price));
    }
}

bool Level2_PriceLevelUpdateModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp_nanos"))))
    {
        int64_t refVal_setTimestampNanos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp_nanos"))), refVal_setTimestampNanos );
        setTimestampNanos(refVal_setTimestampNanos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_side_buy"))))
    {
        bool refVal_setIsSideBuy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_side_buy"))), refVal_setIsSideBuy );
        setIsSideBuy(refVal_setIsSideBuy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_event_processing_complete"))))
    {
        bool refVal_setIsEventProcessingComplete;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_event_processing_complete"))), refVal_setIsEventProcessingComplete );
        setIsEventProcessingComplete(refVal_setIsEventProcessingComplete);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("size"))))
    {
        int32_t refVal_setSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size"))), refVal_setSize );
        setSize(refVal_setSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price"))))
    {
        double refVal_setPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price"))), refVal_setPrice );
        setPrice(refVal_setPrice);
    }
    return ok;
}


utility::string_t Level2_PriceLevelUpdateModel::getSymbol() const
{
    return m_Symbol;
}


void Level2_PriceLevelUpdateModel::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Level2_PriceLevelUpdateModel::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Level2_PriceLevelUpdateModel::unsetSymbol()
{
    m_SymbolIsSet = false;
}
int64_t Level2_PriceLevelUpdateModel::getTimestampNanos() const
{
    return m_Timestamp_nanos;
}

void Level2_PriceLevelUpdateModel::setTimestampNanos(int64_t value)
{
    m_Timestamp_nanos = value;
    m_Timestamp_nanosIsSet = true;
}

bool Level2_PriceLevelUpdateModel::timestampNanosIsSet() const
{
    return m_Timestamp_nanosIsSet;
}

void Level2_PriceLevelUpdateModel::unsetTimestamp_nanos()
{
    m_Timestamp_nanosIsSet = false;
}
utility::datetime Level2_PriceLevelUpdateModel::getTimestamp() const
{
    return m_Timestamp;
}


void Level2_PriceLevelUpdateModel::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Level2_PriceLevelUpdateModel::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Level2_PriceLevelUpdateModel::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
bool Level2_PriceLevelUpdateModel::isIsSideBuy() const
{
    return m_Is_side_buy;
}

void Level2_PriceLevelUpdateModel::setIsSideBuy(bool value)
{
    m_Is_side_buy = value;
    m_Is_side_buyIsSet = true;
}

bool Level2_PriceLevelUpdateModel::isSideBuyIsSet() const
{
    return m_Is_side_buyIsSet;
}

void Level2_PriceLevelUpdateModel::unsetIs_side_buy()
{
    m_Is_side_buyIsSet = false;
}
bool Level2_PriceLevelUpdateModel::isIsEventProcessingComplete() const
{
    return m_Is_event_processing_complete;
}

void Level2_PriceLevelUpdateModel::setIsEventProcessingComplete(bool value)
{
    m_Is_event_processing_complete = value;
    m_Is_event_processing_completeIsSet = true;
}

bool Level2_PriceLevelUpdateModel::isEventProcessingCompleteIsSet() const
{
    return m_Is_event_processing_completeIsSet;
}

void Level2_PriceLevelUpdateModel::unsetIs_event_processing_complete()
{
    m_Is_event_processing_completeIsSet = false;
}
int32_t Level2_PriceLevelUpdateModel::getSize() const
{
    return m_Size;
}

void Level2_PriceLevelUpdateModel::setSize(int32_t value)
{
    m_Size = value;
    m_SizeIsSet = true;
}

bool Level2_PriceLevelUpdateModel::sizeIsSet() const
{
    return m_SizeIsSet;
}

void Level2_PriceLevelUpdateModel::unsetSize()
{
    m_SizeIsSet = false;
}
double Level2_PriceLevelUpdateModel::getPrice() const
{
    return m_Price;
}

void Level2_PriceLevelUpdateModel::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool Level2_PriceLevelUpdateModel::priceIsSet() const
{
    return m_PriceIsSet;
}

void Level2_PriceLevelUpdateModel::unsetPrice()
{
    m_PriceIsSet = false;
}

}
}
}
}


