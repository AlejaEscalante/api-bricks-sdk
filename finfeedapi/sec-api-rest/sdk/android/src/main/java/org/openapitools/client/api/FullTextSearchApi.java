/**
 * FinFeedAPI SEC REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.DTOSecFilingResultDto;
import java.util.*;
import org.openapitools.client.model.MvcProblemDetails;
import org.openapitools.client.model.MvcValidationProblemDetails;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class FullTextSearchApi {
  String basePath = "https://api.sec.finfeedapi.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Full-text search of SEC filing documents
  * Search across SEC filing documents with advanced filtering and sorting capabilities.  ### Available Sort Fields  Field Name | Description -----------|------------- AccessionNumber | SEC filing accession number FormType | Type of the filing document FilingDate | Date when filing was submitted CompanyName | Name of the company CIK | Central Index Key DocumentFilename | Name of the filing document DocumentDescription | Description of the document  ### Search Options  Option | Description --------|------------- text_contains | Keywords that must appear in the document text_not_contain | Keywords that must not appear in the document  ### Date Format All dates must be provided in YYYY-MM-DD format  :::tip Use text_contains and text_not_contain with multiple keywords separated by commas for more precise searches :::  :::note The search is case-insensitive and supports partial word matches :::
   * @param formType Filter by form type (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated
   * @param fillingDateStart Filter by filling date start (inclusive), format YYYY-MM-DD
   * @param fillingDateEnd Filter by filling date end (inclusive), format YYYY-MM-DD
   * @param textContains Keywords that the text must contain. Multiple values can be comma-separated
   * @param textNotContain Keywords that the text must not contain. Multiple values can be comma-separated
   * @param pageSize Number of results per page (default: 100)
   * @param pageNumber Page number to retrieve (default: 1)
   * @param sortBy Field to sort by (default: AccessionNumber)
   * @param sortOrder Sort order (asc or desc). Defaults to asc
   * @return List<DTOSecFilingResultDto>
  */
  public List<DTOSecFilingResultDto> v1FullTextGet (String formType, String fillingDateStart, String fillingDateEnd, String textContains, String textNotContain, Integer pageSize, Integer pageNumber, String sortBy, String sortOrder) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/full-text";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "form_type", formType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filling_date_start", fillingDateStart));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filling_date_end", fillingDateEnd));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "text_contains", textContains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "text_not_contain", textNotContain));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_number", pageNumber));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_by", sortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_order", sortOrder));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<DTOSecFilingResultDto>) ApiInvoker.deserialize(localVarResponse, "array", DTOSecFilingResultDto.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Full-text search of SEC filing documents
   * Search across SEC filing documents with advanced filtering and sorting capabilities.  ### Available Sort Fields  Field Name | Description -----------|------------- AccessionNumber | SEC filing accession number FormType | Type of the filing document FilingDate | Date when filing was submitted CompanyName | Name of the company CIK | Central Index Key DocumentFilename | Name of the filing document DocumentDescription | Description of the document  ### Search Options  Option | Description --------|------------- text_contains | Keywords that must appear in the document text_not_contain | Keywords that must not appear in the document  ### Date Format All dates must be provided in YYYY-MM-DD format  :::tip Use text_contains and text_not_contain with multiple keywords separated by commas for more precise searches :::  :::note The search is case-insensitive and supports partial word matches :::
   * @param formType Filter by form type (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated   * @param fillingDateStart Filter by filling date start (inclusive), format YYYY-MM-DD   * @param fillingDateEnd Filter by filling date end (inclusive), format YYYY-MM-DD   * @param textContains Keywords that the text must contain. Multiple values can be comma-separated   * @param textNotContain Keywords that the text must not contain. Multiple values can be comma-separated   * @param pageSize Number of results per page (default: 100)   * @param pageNumber Page number to retrieve (default: 1)   * @param sortBy Field to sort by (default: AccessionNumber)   * @param sortOrder Sort order (asc or desc). Defaults to asc
  */
  public void v1FullTextGet (String formType, String fillingDateStart, String fillingDateEnd, String textContains, String textNotContain, Integer pageSize, Integer pageNumber, String sortBy, String sortOrder, final Response.Listener<List<DTOSecFilingResultDto>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/full-text".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "form_type", formType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filling_date_start", fillingDateStart));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filling_date_end", fillingDateEnd));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "text_contains", textContains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "text_not_contain", textNotContain));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_number", pageNumber));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_by", sortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_order", sortOrder));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<DTOSecFilingResultDto>) ApiInvoker.deserialize(localVarResponse,  "array", DTOSecFilingResultDto.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
