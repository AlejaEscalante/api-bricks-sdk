/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { DTOSecFilingResultDto } from '../model/dTOSecFilingResultDto';
import { MvcProblemDetails } from '../model/mvcProblemDetails';
import { MvcValidationProblemDetails } from '../model/mvcValidationProblemDetails';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.sec.finfeedapi.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum FullTextSearchApiApiKeys {
    APIKey,
}

export class FullTextSearchApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'APIKey': new ApiKeyAuth('header', 'Authorization'),
        'Bearer': new HttpBearerAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: FullTextSearchApiApiKeys, value: string) {
        (this.authentications as any)[FullTextSearchApiApiKeys[key]].apiKey = value;
    }

    set accessToken(accessToken: string | (() => string)) {
        this.authentications.Bearer.accessToken = accessToken;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Search across SEC filing documents with advanced filtering and sorting capabilities.    ### Available Sort Fields    Field Name | Description  -----------|-------------  AccessionNumber | SEC filing accession number  FormType | Type of the filing document  FilingDate | Date when filing was submitted  CompanyName | Name of the company  CIK | Central Index Key  DocumentFilename | Name of the filing document  DocumentDescription | Description of the document    ### Search Options    Option | Description  --------|-------------  text_contains | Keywords that must appear in the document  text_not_contain | Keywords that must not appear in the document    ### Date Format  All dates must be provided in YYYY-MM-DD format    :::tip  Use text_contains and text_not_contain with multiple keywords separated by commas for more precise searches  :::    :::note  The search is case-insensitive and supports partial word matches  :::
     * @summary Full-text search of SEC filing documents
     * @param formType Filter by form type (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated
     * @param fillingDateStart Filter by filling date start (inclusive), format YYYY-MM-DD
     * @param fillingDateEnd Filter by filling date end (inclusive), format YYYY-MM-DD
     * @param textContains Keywords that the text must contain. Multiple values can be comma-separated
     * @param textNotContain Keywords that the text must not contain. Multiple values can be comma-separated
     * @param pageSize Number of results per page (default: 100)
     * @param pageNumber Page number to retrieve (default: 1)
     * @param sortBy Field to sort by (default: AccessionNumber)
     * @param sortOrder Sort order (asc or desc). Defaults to asc
     */
    public async v1FullTextGet (formType?: string, fillingDateStart?: string, fillingDateEnd?: string, textContains?: string, textNotContain?: string, pageSize?: number, pageNumber?: number, sortBy?: string, sortOrder?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<DTOSecFilingResultDto>;  }> {
        const localVarPath = this.basePath + '/v1/full-text';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (formType !== undefined) {
            localVarQueryParameters['form_type'] = ObjectSerializer.serialize(formType, "string");
        }

        if (fillingDateStart !== undefined) {
            localVarQueryParameters['filling_date_start'] = ObjectSerializer.serialize(fillingDateStart, "string");
        }

        if (fillingDateEnd !== undefined) {
            localVarQueryParameters['filling_date_end'] = ObjectSerializer.serialize(fillingDateEnd, "string");
        }

        if (textContains !== undefined) {
            localVarQueryParameters['text_contains'] = ObjectSerializer.serialize(textContains, "string");
        }

        if (textNotContain !== undefined) {
            localVarQueryParameters['text_not_contain'] = ObjectSerializer.serialize(textNotContain, "string");
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['page_size'] = ObjectSerializer.serialize(pageSize, "number");
        }

        if (pageNumber !== undefined) {
            localVarQueryParameters['page_number'] = ObjectSerializer.serialize(pageNumber, "number");
        }

        if (sortBy !== undefined) {
            localVarQueryParameters['sort_by'] = ObjectSerializer.serialize(sortBy, "string");
        }

        if (sortOrder !== undefined) {
            localVarQueryParameters['sort_order'] = ObjectSerializer.serialize(sortOrder, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<DTOSecFilingResultDto>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<DTOSecFilingResultDto>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
