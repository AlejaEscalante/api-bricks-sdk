#
# FinFeedAPI SEC REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

Full-text search of SEC filing documents

.DESCRIPTION

No description available.

.PARAMETER FormType
Filter by form type (e.g., ""10-K"", ""8-K""). Multiple values can be comma-separated

.PARAMETER FillingDateStart
Filter by filling date start (inclusive), format YYYY-MM-DD

.PARAMETER FillingDateEnd
Filter by filling date end (inclusive), format YYYY-MM-DD

.PARAMETER TextContains
Keywords that the text must contain. Multiple values can be comma-separated

.PARAMETER TextNotContain
Keywords that the text must not contain. Multiple values can be comma-separated

.PARAMETER PageSize
Number of results per page (default: 100)

.PARAMETER PageNumber
Page number to retrieve (default: 1)

.PARAMETER SortBy
Field to sort by (default: AccessionNumber)

.PARAMETER SortOrder
Sort order (asc or desc). Defaults to asc

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DTOSecFilingResultDto[]
#>
function Invoke-V1FullTextGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${FormType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${FillingDateStart},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${FillingDateEnd},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TextContains},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TextNotContain},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${PageSize},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${PageNumber},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SortBy},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SortOrder},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-V1FullTextGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/v1/full-text'

        if ($FormType) {
            $LocalVarQueryParameters['form_type'] = $FormType
        }

        if ($FillingDateStart) {
            $LocalVarQueryParameters['filling_date_start'] = $FillingDateStart
        }

        if ($FillingDateEnd) {
            $LocalVarQueryParameters['filling_date_end'] = $FillingDateEnd
        }

        if ($TextContains) {
            $LocalVarQueryParameters['text_contains'] = $TextContains
        }

        if ($TextNotContain) {
            $LocalVarQueryParameters['text_not_contain'] = $TextNotContain
        }

        if ($PageSize) {
            $LocalVarQueryParameters['page_size'] = $PageSize
        }

        if ($PageNumber) {
            $LocalVarQueryParameters['page_number'] = $PageNumber
        }

        if ($SortBy) {
            $LocalVarQueryParameters['sort_by'] = $SortBy
        }

        if ($SortOrder) {
            $LocalVarQueryParameters['sort_order'] = $SortOrder
        }

        if ($Configuration["ApiKeyPrefix"] -and $Configuration["ApiKeyPrefix"]["Authorization"]) {
            $apiKeyPrefix = $Configuration["ApiKeyPrefix"]["Authorization"]
        } else {
            $apiKeyPrefix = ""
        }
        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $apiKeyPrefix + $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["AccessToken"]) {
            $LocalVarHeaderParameters['Authorization'] = "Bearer " + $Configuration["AccessToken"]
            Write-Verbose ("Using Bearer authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DTOSecFilingResultDto[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

