/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as $ from 'jquery';
import * as models from '../model/models';
import { COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


export class FilingMetadataApi {
    protected basePath = 'https://api.sec.finfeedapi.com';
    public defaultHeaders: Array<string> = [];
    public defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings = undefined;
    public configuration: Configuration = new Configuration();

    constructor(basePath?: string, configuration?: Configuration, defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
        if (defaultExtraJQueryAjaxSettings) {
            this.defaultExtraJQueryAjaxSettings = defaultExtraJQueryAjaxSettings;
        }
    }

    private extendObj<T1 extends object, T2 extends T1>(objA: T2, objB: T2): T1|T2 {
        for (let key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    }

    /**
     * Retrieves metadata for SEC filings based on various filter criteria with pagination and sorting support.    ### Available Sort Fields    Field Name | Description  -----------|-------------  AccessionNumber | SEC filing accession number  FilingDate | Date when filing was submitted  AcceptanceDateTime | Date and time of filing acceptance  ReportDate | Date of the report  Size | Size of the filing document    ### Date Format  All dates must be provided in YYYY-MM-DD format    ### Form Types  Form types can be provided as comma-separated values, e.g.: \"10-K,8-K,10-Q\"    :::tip  For optimal performance, use date ranges and form types to narrow down your search  :::
     * @summary Query SEC filing metadata
     * @param cik Filter by Central Index Key (CIK)
     * @param ticker Filter by stock ticker symbol
     * @param formType Filter by form type(s) (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated
     * @param fillingDateStart Filter by filling date start (inclusive), format YYYY-MM-DD
     * @param fillingDateEnd Filter by filling date end (inclusive), format YYYY-MM-DD
     * @param reportDateStart Filter by report date start (inclusive), format YYYY-MM-DD
     * @param reportDateEnd Filter by report date end (inclusive), format YYYY-MM-DD
     * @param itemsContain Filter filings where the \&#39;Items\&#39; field contains the specified text
     * @param pageSize Number of results per page (default: 50, max: 200)
     * @param pageNumber Page number to retrieve (default: 1)
     * @param sortBy Field to sort results by (default: AccessionNumber)
     * @param sortOrder Sort order (asc or desc, default: desc)
     */
    public v1FilingsGet(cik?: number, ticker?: string, formType?: string, fillingDateStart?: string, fillingDateEnd?: string, reportDateStart?: string, reportDateEnd?: string, itemsContain?: string, pageSize?: number, pageNumber?: number, sortBy?: models.DTOFilingSortBy, sortOrder?: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: Array<models.DTOFilingMetadataDto>;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/v1/filings';

        let queryParameters: any = {};
        let headerParams: any = {};
        if (cik !== null && cik !== undefined) {
            queryParameters['cik'] = <string><any>cik;
        }
        if (ticker !== null && ticker !== undefined) {
            queryParameters['ticker'] = <string><any>ticker;
        }
        if (formType !== null && formType !== undefined) {
            queryParameters['form_type'] = <string><any>formType;
        }
        if (fillingDateStart !== null && fillingDateStart !== undefined) {
            queryParameters['filling_date_start'] = <string><any>fillingDateStart;
        }
        if (fillingDateEnd !== null && fillingDateEnd !== undefined) {
            queryParameters['filling_date_end'] = <string><any>fillingDateEnd;
        }
        if (reportDateStart !== null && reportDateStart !== undefined) {
            queryParameters['report_date_start'] = <string><any>reportDateStart;
        }
        if (reportDateEnd !== null && reportDateEnd !== undefined) {
            queryParameters['report_date_end'] = <string><any>reportDateEnd;
        }
        if (itemsContain !== null && itemsContain !== undefined) {
            queryParameters['items_contain'] = <string><any>itemsContain;
        }
        if (pageSize !== null && pageSize !== undefined) {
            queryParameters['page_size'] = <string><any>pageSize;
        }
        if (pageNumber !== null && pageNumber !== undefined) {
            queryParameters['page_number'] = <string><any>pageNumber;
        }
        if (sortBy !== null && sortBy !== undefined) {
            queryParameters['sort_by'] = <string><any>sortBy;
        }
        if (sortOrder !== null && sortOrder !== undefined) {
            queryParameters['sort_order'] = <string><any>sortOrder;
        }

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: Array<models.DTOFilingMetadataDto>;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: Array<models.DTOFilingMetadataDto>, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

}
