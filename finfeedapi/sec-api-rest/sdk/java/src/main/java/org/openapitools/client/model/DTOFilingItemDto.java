/*
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DTOFilingItemDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-16T06:10:51.316833191Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class DTOFilingItemDto {
  public static final String SERIALIZED_NAME_ITEM_NUMBER = "item_number";
  @SerializedName(SERIALIZED_NAME_ITEM_NUMBER)
  @javax.annotation.Nullable
  private String itemNumber;

  public static final String SERIALIZED_NAME_ITEM_TITLE = "item_title";
  @SerializedName(SERIALIZED_NAME_ITEM_TITLE)
  @javax.annotation.Nullable
  private String itemTitle;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  @javax.annotation.Nullable
  private String content;

  public DTOFilingItemDto() {
  }

  public DTOFilingItemDto itemNumber(@javax.annotation.Nullable String itemNumber) {
    this.itemNumber = itemNumber;
    return this;
  }

  /**
   * Get itemNumber
   * @return itemNumber
   */
  @javax.annotation.Nullable
  public String getItemNumber() {
    return itemNumber;
  }

  public void setItemNumber(@javax.annotation.Nullable String itemNumber) {
    this.itemNumber = itemNumber;
  }


  public DTOFilingItemDto itemTitle(@javax.annotation.Nullable String itemTitle) {
    this.itemTitle = itemTitle;
    return this;
  }

  /**
   * Get itemTitle
   * @return itemTitle
   */
  @javax.annotation.Nullable
  public String getItemTitle() {
    return itemTitle;
  }

  public void setItemTitle(@javax.annotation.Nullable String itemTitle) {
    this.itemTitle = itemTitle;
  }


  public DTOFilingItemDto content(@javax.annotation.Nullable String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(@javax.annotation.Nullable String content) {
    this.content = content;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DTOFilingItemDto dtOFilingItemDto = (DTOFilingItemDto) o;
    return Objects.equals(this.itemNumber, dtOFilingItemDto.itemNumber) &&
        Objects.equals(this.itemTitle, dtOFilingItemDto.itemTitle) &&
        Objects.equals(this.content, dtOFilingItemDto.content);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemNumber, itemTitle, content);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DTOFilingItemDto {\n");
    sb.append("    itemNumber: ").append(toIndentedString(itemNumber)).append("\n");
    sb.append("    itemTitle: ").append(toIndentedString(itemTitle)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("item_number");
    openapiFields.add("item_title");
    openapiFields.add("content");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DTOFilingItemDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DTOFilingItemDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DTOFilingItemDto is not found in the empty JSON string", DTOFilingItemDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DTOFilingItemDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DTOFilingItemDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("item_number") != null && !jsonObj.get("item_number").isJsonNull()) && !jsonObj.get("item_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_number").toString()));
      }
      if ((jsonObj.get("item_title") != null && !jsonObj.get("item_title").isJsonNull()) && !jsonObj.get("item_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_title").toString()));
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DTOFilingItemDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DTOFilingItemDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DTOFilingItemDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DTOFilingItemDto.class));

       return (TypeAdapter<T>) new TypeAdapter<DTOFilingItemDto>() {
           @Override
           public void write(JsonWriter out, DTOFilingItemDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DTOFilingItemDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DTOFilingItemDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DTOFilingItemDto
   * @throws IOException if the JSON string is invalid with respect to DTOFilingItemDto
   */
  public static DTOFilingItemDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DTOFilingItemDto.class);
  }

  /**
   * Convert an instance of DTOFilingItemDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

