/*
 * FinFeedAPI SEC REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DTOSecFilingResultDto;
import org.openapitools.client.model.MvcProblemDetails;
import org.openapitools.client.model.MvcValidationProblemDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FullTextSearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FullTextSearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FullTextSearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1FullTextGet
     * @param formType Filter by form type (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated (optional)
     * @param fillingDateStart Filter by filling date start (inclusive), format YYYY-MM-DD (optional)
     * @param fillingDateEnd Filter by filling date end (inclusive), format YYYY-MM-DD (optional)
     * @param textContains Keywords that the text must contain. Multiple values can be comma-separated (optional)
     * @param textNotContain Keywords that the text must not contain. Multiple values can be comma-separated (optional)
     * @param pageSize Number of results per page (default: 100) (optional)
     * @param pageNumber Page number to retrieve (default: 1) (optional)
     * @param sortBy Field to sort by (default: AccessionNumber) (optional, default to AccessionNumber)
     * @param sortOrder Sort order (asc or desc). Defaults to asc (optional, default to asc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FullTextGetCall(@javax.annotation.Nullable String formType, @javax.annotation.Nullable String fillingDateStart, @javax.annotation.Nullable String fillingDateEnd, @javax.annotation.Nullable String textContains, @javax.annotation.Nullable String textNotContain, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/full-text";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (formType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("form_type", formType));
        }

        if (fillingDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filling_date_start", fillingDateStart));
        }

        if (fillingDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filling_date_end", fillingDateEnd));
        }

        if (textContains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text_contains", textContains));
        }

        if (textNotContain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text_not_contain", textNotContain));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_number", pageNumber));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1FullTextGetValidateBeforeCall(@javax.annotation.Nullable String formType, @javax.annotation.Nullable String fillingDateStart, @javax.annotation.Nullable String fillingDateEnd, @javax.annotation.Nullable String textContains, @javax.annotation.Nullable String textNotContain, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder, final ApiCallback _callback) throws ApiException {
        return v1FullTextGetCall(formType, fillingDateStart, fillingDateEnd, textContains, textNotContain, pageSize, pageNumber, sortBy, sortOrder, _callback);

    }

    /**
     * Full-text search of SEC filing documents
     * Search across SEC filing documents with advanced filtering and sorting capabilities.  ### Available Sort Fields  Field Name | Description -----------|------------- AccessionNumber | SEC filing accession number FormType | Type of the filing document FilingDate | Date when filing was submitted CompanyName | Name of the company CIK | Central Index Key DocumentFilename | Name of the filing document DocumentDescription | Description of the document  ### Search Options  Option | Description --------|------------- text_contains | Keywords that must appear in the document text_not_contain | Keywords that must not appear in the document  ### Date Format All dates must be provided in YYYY-MM-DD format  :::tip Use text_contains and text_not_contain with multiple keywords separated by commas for more precise searches :::  :::note The search is case-insensitive and supports partial word matches :::
     * @param formType Filter by form type (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated (optional)
     * @param fillingDateStart Filter by filling date start (inclusive), format YYYY-MM-DD (optional)
     * @param fillingDateEnd Filter by filling date end (inclusive), format YYYY-MM-DD (optional)
     * @param textContains Keywords that the text must contain. Multiple values can be comma-separated (optional)
     * @param textNotContain Keywords that the text must not contain. Multiple values can be comma-separated (optional)
     * @param pageSize Number of results per page (default: 100) (optional)
     * @param pageNumber Page number to retrieve (default: 1) (optional)
     * @param sortBy Field to sort by (default: AccessionNumber) (optional, default to AccessionNumber)
     * @param sortOrder Sort order (asc or desc). Defaults to asc (optional, default to asc)
     * @return List&lt;DTOSecFilingResultDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public List<DTOSecFilingResultDto> v1FullTextGet(@javax.annotation.Nullable String formType, @javax.annotation.Nullable String fillingDateStart, @javax.annotation.Nullable String fillingDateEnd, @javax.annotation.Nullable String textContains, @javax.annotation.Nullable String textNotContain, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder) throws ApiException {
        ApiResponse<List<DTOSecFilingResultDto>> localVarResp = v1FullTextGetWithHttpInfo(formType, fillingDateStart, fillingDateEnd, textContains, textNotContain, pageSize, pageNumber, sortBy, sortOrder);
        return localVarResp.getData();
    }

    /**
     * Full-text search of SEC filing documents
     * Search across SEC filing documents with advanced filtering and sorting capabilities.  ### Available Sort Fields  Field Name | Description -----------|------------- AccessionNumber | SEC filing accession number FormType | Type of the filing document FilingDate | Date when filing was submitted CompanyName | Name of the company CIK | Central Index Key DocumentFilename | Name of the filing document DocumentDescription | Description of the document  ### Search Options  Option | Description --------|------------- text_contains | Keywords that must appear in the document text_not_contain | Keywords that must not appear in the document  ### Date Format All dates must be provided in YYYY-MM-DD format  :::tip Use text_contains and text_not_contain with multiple keywords separated by commas for more precise searches :::  :::note The search is case-insensitive and supports partial word matches :::
     * @param formType Filter by form type (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated (optional)
     * @param fillingDateStart Filter by filling date start (inclusive), format YYYY-MM-DD (optional)
     * @param fillingDateEnd Filter by filling date end (inclusive), format YYYY-MM-DD (optional)
     * @param textContains Keywords that the text must contain. Multiple values can be comma-separated (optional)
     * @param textNotContain Keywords that the text must not contain. Multiple values can be comma-separated (optional)
     * @param pageSize Number of results per page (default: 100) (optional)
     * @param pageNumber Page number to retrieve (default: 1) (optional)
     * @param sortBy Field to sort by (default: AccessionNumber) (optional, default to AccessionNumber)
     * @param sortOrder Sort order (asc or desc). Defaults to asc (optional, default to asc)
     * @return ApiResponse&lt;List&lt;DTOSecFilingResultDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DTOSecFilingResultDto>> v1FullTextGetWithHttpInfo(@javax.annotation.Nullable String formType, @javax.annotation.Nullable String fillingDateStart, @javax.annotation.Nullable String fillingDateEnd, @javax.annotation.Nullable String textContains, @javax.annotation.Nullable String textNotContain, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = v1FullTextGetValidateBeforeCall(formType, fillingDateStart, fillingDateEnd, textContains, textNotContain, pageSize, pageNumber, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<List<DTOSecFilingResultDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Full-text search of SEC filing documents (asynchronously)
     * Search across SEC filing documents with advanced filtering and sorting capabilities.  ### Available Sort Fields  Field Name | Description -----------|------------- AccessionNumber | SEC filing accession number FormType | Type of the filing document FilingDate | Date when filing was submitted CompanyName | Name of the company CIK | Central Index Key DocumentFilename | Name of the filing document DocumentDescription | Description of the document  ### Search Options  Option | Description --------|------------- text_contains | Keywords that must appear in the document text_not_contain | Keywords that must not appear in the document  ### Date Format All dates must be provided in YYYY-MM-DD format  :::tip Use text_contains and text_not_contain with multiple keywords separated by commas for more precise searches :::  :::note The search is case-insensitive and supports partial word matches :::
     * @param formType Filter by form type (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated (optional)
     * @param fillingDateStart Filter by filling date start (inclusive), format YYYY-MM-DD (optional)
     * @param fillingDateEnd Filter by filling date end (inclusive), format YYYY-MM-DD (optional)
     * @param textContains Keywords that the text must contain. Multiple values can be comma-separated (optional)
     * @param textNotContain Keywords that the text must not contain. Multiple values can be comma-separated (optional)
     * @param pageSize Number of results per page (default: 100) (optional)
     * @param pageNumber Page number to retrieve (default: 1) (optional)
     * @param sortBy Field to sort by (default: AccessionNumber) (optional, default to AccessionNumber)
     * @param sortOrder Sort order (asc or desc). Defaults to asc (optional, default to asc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FullTextGetAsync(@javax.annotation.Nullable String formType, @javax.annotation.Nullable String fillingDateStart, @javax.annotation.Nullable String fillingDateEnd, @javax.annotation.Nullable String textContains, @javax.annotation.Nullable String textNotContain, @javax.annotation.Nullable Integer pageSize, @javax.annotation.Nullable Integer pageNumber, @javax.annotation.Nullable String sortBy, @javax.annotation.Nullable String sortOrder, final ApiCallback<List<DTOSecFilingResultDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1FullTextGetValidateBeforeCall(formType, fillingDateStart, fillingDateEnd, textContains, textNotContain, pageSize, pageNumber, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<List<DTOSecFilingResultDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
