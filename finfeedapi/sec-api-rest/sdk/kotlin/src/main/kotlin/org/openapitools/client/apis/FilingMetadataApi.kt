/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.DTOFilingMetadataDto
import org.openapitools.client.models.DTOFilingSortBy
import org.openapitools.client.models.MvcProblemDetails
import org.openapitools.client.models.MvcValidationProblemDetails

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class FilingMetadataApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api-historical.sec.finfeedapi.com")
        }
    }

    /**
     * GET /v1/filings
     * Query SEC filing metadata
     * Retrieves metadata for SEC filings based on various filter criteria with pagination and sorting support.    ### Available Sort Fields    Field Name | Description  -----------|-------------  AccessionNumber | SEC filing accession number  FilingDate | Date when filing was submitted  AcceptanceDateTime | Date and time of filing acceptance  ReportDate | Date of the report  Size | Size of the filing document    ### Date Format  All dates must be provided in YYYY-MM-DD format    ### Form Types  Form types can be provided as comma-separated values, e.g.: \&quot;10-K,8-K,10-Q\&quot;    :::tip  For optimal performance, use date ranges and form types to narrow down your search  :::
     * @param cik Filter by Central Index Key (CIK) (optional)
     * @param formType Filter by form type(s) (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated (optional)
     * @param fillingDateStart Filter by filling date start (inclusive), format YYYY-MM-DD (optional)
     * @param fillingDateEnd Filter by filling date end (inclusive), format YYYY-MM-DD (optional)
     * @param reportDateStart Filter by report date start (inclusive), format YYYY-MM-DD (optional)
     * @param reportDateEnd Filter by report date end (inclusive), format YYYY-MM-DD (optional)
     * @param itemsContain Filter filings where the &#39;Items&#39; field contains the specified text (optional)
     * @param pageSize Number of results per page (default: 50, max: 200) (optional)
     * @param pageNumber Page number to retrieve (default: 1) (optional)
     * @param sortBy Field to sort results by (default: AccessionNumber) (optional)
     * @param sortOrder Sort order (asc or desc, default: desc) (optional, default to "desc")
     * @return kotlin.collections.List<DTOFilingMetadataDto>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1FilingsGet(cik: kotlin.Long? = null, formType: kotlin.String? = null, fillingDateStart: kotlin.String? = null, fillingDateEnd: kotlin.String? = null, reportDateStart: kotlin.String? = null, reportDateEnd: kotlin.String? = null, itemsContain: kotlin.String? = null, pageSize: kotlin.Int? = null, pageNumber: kotlin.Int? = null, sortBy: DTOFilingSortBy? = null, sortOrder: kotlin.String? = "desc") : kotlin.collections.List<DTOFilingMetadataDto> {
        val localVarResponse = v1FilingsGetWithHttpInfo(cik = cik, formType = formType, fillingDateStart = fillingDateStart, fillingDateEnd = fillingDateEnd, reportDateStart = reportDateStart, reportDateEnd = reportDateEnd, itemsContain = itemsContain, pageSize = pageSize, pageNumber = pageNumber, sortBy = sortBy, sortOrder = sortOrder)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<DTOFilingMetadataDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/filings
     * Query SEC filing metadata
     * Retrieves metadata for SEC filings based on various filter criteria with pagination and sorting support.    ### Available Sort Fields    Field Name | Description  -----------|-------------  AccessionNumber | SEC filing accession number  FilingDate | Date when filing was submitted  AcceptanceDateTime | Date and time of filing acceptance  ReportDate | Date of the report  Size | Size of the filing document    ### Date Format  All dates must be provided in YYYY-MM-DD format    ### Form Types  Form types can be provided as comma-separated values, e.g.: \&quot;10-K,8-K,10-Q\&quot;    :::tip  For optimal performance, use date ranges and form types to narrow down your search  :::
     * @param cik Filter by Central Index Key (CIK) (optional)
     * @param formType Filter by form type(s) (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated (optional)
     * @param fillingDateStart Filter by filling date start (inclusive), format YYYY-MM-DD (optional)
     * @param fillingDateEnd Filter by filling date end (inclusive), format YYYY-MM-DD (optional)
     * @param reportDateStart Filter by report date start (inclusive), format YYYY-MM-DD (optional)
     * @param reportDateEnd Filter by report date end (inclusive), format YYYY-MM-DD (optional)
     * @param itemsContain Filter filings where the &#39;Items&#39; field contains the specified text (optional)
     * @param pageSize Number of results per page (default: 50, max: 200) (optional)
     * @param pageNumber Page number to retrieve (default: 1) (optional)
     * @param sortBy Field to sort results by (default: AccessionNumber) (optional)
     * @param sortOrder Sort order (asc or desc, default: desc) (optional, default to "desc")
     * @return ApiResponse<kotlin.collections.List<DTOFilingMetadataDto>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1FilingsGetWithHttpInfo(cik: kotlin.Long?, formType: kotlin.String?, fillingDateStart: kotlin.String?, fillingDateEnd: kotlin.String?, reportDateStart: kotlin.String?, reportDateEnd: kotlin.String?, itemsContain: kotlin.String?, pageSize: kotlin.Int?, pageNumber: kotlin.Int?, sortBy: DTOFilingSortBy?, sortOrder: kotlin.String?) : ApiResponse<kotlin.collections.List<DTOFilingMetadataDto>?> {
        val localVariableConfig = v1FilingsGetRequestConfig(cik = cik, formType = formType, fillingDateStart = fillingDateStart, fillingDateEnd = fillingDateEnd, reportDateStart = reportDateStart, reportDateEnd = reportDateEnd, itemsContain = itemsContain, pageSize = pageSize, pageNumber = pageNumber, sortBy = sortBy, sortOrder = sortOrder)

        return request<Unit, kotlin.collections.List<DTOFilingMetadataDto>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1FilingsGet
     *
     * @param cik Filter by Central Index Key (CIK) (optional)
     * @param formType Filter by form type(s) (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated (optional)
     * @param fillingDateStart Filter by filling date start (inclusive), format YYYY-MM-DD (optional)
     * @param fillingDateEnd Filter by filling date end (inclusive), format YYYY-MM-DD (optional)
     * @param reportDateStart Filter by report date start (inclusive), format YYYY-MM-DD (optional)
     * @param reportDateEnd Filter by report date end (inclusive), format YYYY-MM-DD (optional)
     * @param itemsContain Filter filings where the &#39;Items&#39; field contains the specified text (optional)
     * @param pageSize Number of results per page (default: 50, max: 200) (optional)
     * @param pageNumber Page number to retrieve (default: 1) (optional)
     * @param sortBy Field to sort results by (default: AccessionNumber) (optional)
     * @param sortOrder Sort order (asc or desc, default: desc) (optional, default to "desc")
     * @return RequestConfig
     */
    fun v1FilingsGetRequestConfig(cik: kotlin.Long?, formType: kotlin.String?, fillingDateStart: kotlin.String?, fillingDateEnd: kotlin.String?, reportDateStart: kotlin.String?, reportDateEnd: kotlin.String?, itemsContain: kotlin.String?, pageSize: kotlin.Int?, pageNumber: kotlin.Int?, sortBy: DTOFilingSortBy?, sortOrder: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (cik != null) {
                    put("cik", listOf(cik.toString()))
                }
                if (formType != null) {
                    put("form_type", listOf(formType.toString()))
                }
                if (fillingDateStart != null) {
                    put("filling_date_start", listOf(fillingDateStart.toString()))
                }
                if (fillingDateEnd != null) {
                    put("filling_date_end", listOf(fillingDateEnd.toString()))
                }
                if (reportDateStart != null) {
                    put("report_date_start", listOf(reportDateStart.toString()))
                }
                if (reportDateEnd != null) {
                    put("report_date_end", listOf(reportDateEnd.toString()))
                }
                if (itemsContain != null) {
                    put("items_contain", listOf(itemsContain.toString()))
                }
                if (pageSize != null) {
                    put("page_size", listOf(pageSize.toString()))
                }
                if (pageNumber != null) {
                    put("page_number", listOf(pageNumber.toString()))
                }
                if (sortBy != null) {
                    put("sort_by", listOf(sortBy.toString()))
                }
                if (sortOrder != null) {
                    put("sort_order", listOf(sortOrder.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/filings",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
