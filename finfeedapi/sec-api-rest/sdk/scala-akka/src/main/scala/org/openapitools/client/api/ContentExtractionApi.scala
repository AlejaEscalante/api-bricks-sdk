/**
 * FinFeedAPI SEC REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.AnyType
import org.openapitools.client.model.ExtractorType
import org.openapitools.client.model.ProblemDetails
import org.openapitools.client.model.ValidationProblemDetails
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object ContentExtractionApi {

  def apply(baseUrl: String = "https://api.sec.finfeedapi.com") = new ContentExtractionApi(baseUrl)
}

class ContentExtractionApi(baseUrl: String) {

  /**
   * Retrieves filing content from the EDGAR database and intelligently classifies it according to form type and item categories.  ### Supported Form Types  Form Type | Description ----------|------------ 8-K      | Current report filing 10-K     | Annual report filing 10-Q     | Quarterly report filing  ### Content Classification - 8-K forms: Content classified by item numbers (e.g., 1.01, 2.01) - 10-K/10-Q forms: Items categorized by their respective part and item structure  :::note Both HTML and plain text documents are supported for content extraction. :::
   * 
   * Expected answers:
   *   code 200 : Map[String, AnyType] (Successful extraction)
   *   code 400 : ValidationProblemDetails (Invalid request)
   *   code 404 :  (Filing not found)
   *   code 500 : ProblemDetails (Server error)
   * 
   * Available security schemes:
   *   APIKey (apiKey)
   *   JWT (http)
   * 
   * @param accessionNumber The SEC filing accession number used to retrieve the filing from EDGAR database.
   * @param `type` Result type (text or html, default: text)
   */
  def v1ExtractorGet(accessionNumber: String, `type`: Option[ExtractorType] = None)(implicit apiKey: ApiKeyValue, bearerToken: BearerToken): ApiRequest[Map[String, AnyType]] =
    ApiRequest[Map[String, AnyType]](ApiMethods.GET, baseUrl, "/v1/extractor", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withCredentials(bearerToken).withQueryParam("accession_number", accessionNumber)
      .withQueryParam("type", `type`)
      .withSuccessResponse[Map[String, AnyType]](200)
      .withErrorResponse[ValidationProblemDetails](400)
      .withErrorResponse[Unit](404)
      .withErrorResponse[ProblemDetails](500)
      

  /**
   * Retrieves filing content from the EDGAR database and returns only the text content of the specified item number.  ### Item Number Format  Form Type | Item Format Examples -----------|------------------- 8-K       | 1.01, 2.01, 7.01 10-K      | 1, 2, 3 10-K/10-Q | PartI 1, PartII 2  :::tip For best results, ensure the item number matches exactly with the filing's structure. :::
   * 
   * Expected answers:
   *   code 200 : String (Successful extraction)
   *   code 400 : ValidationProblemDetails (Invalid request)
   *   code 404 :  (Filing or item not found)
   *   code 500 : ProblemDetails (Server error)
   * 
   * Available security schemes:
   *   APIKey (apiKey)
   *   JWT (http)
   * 
   * @param accessionNumber The SEC filing accession number used to retrieve the filing from EDGAR database.
   * @param itemNumber The specific item number to extract (e.g., \"1.01\", \"2.01\", \"7.01\").
   * @param `type` Result type (text or html, default: text)
   */
  def v1ExtractorItemGet(accessionNumber: String, itemNumber: String, `type`: Option[ExtractorType] = None)(implicit apiKey: ApiKeyValue, bearerToken: BearerToken): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/v1/extractor/item", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withCredentials(bearerToken).withQueryParam("accession_number", accessionNumber)
      .withQueryParam("item_number", itemNumber)
      .withQueryParam("type", `type`)
      .withSuccessResponse[String](200)
      .withErrorResponse[ValidationProblemDetails](400)
      .withErrorResponse[Unit](404)
      .withErrorResponse[ProblemDetails](500)
      



}

