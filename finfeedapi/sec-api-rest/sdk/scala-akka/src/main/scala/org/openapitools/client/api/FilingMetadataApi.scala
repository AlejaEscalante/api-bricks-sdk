/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.FilingMetadataDto
import org.openapitools.client.model.FilingSortBy
import org.openapitools.client.model.ProblemDetails
import org.openapitools.client.model.ValidationProblemDetails
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object FilingMetadataApi {

  def apply(baseUrl: String = "https://api-historical.sec.finfeedapi.com") = new FilingMetadataApi(baseUrl)
}

class FilingMetadataApi(baseUrl: String) {

  /**
   * Retrieves metadata for SEC filings based on various filter criteria with pagination and sorting support.    ### Available Sort Fields    Field Name | Description  -----------|-------------  AccessionNumber | SEC filing accession number  FilingDate | Date when filing was submitted  AcceptanceDateTime | Date and time of filing acceptance  ReportDate | Date of the report  Size | Size of the filing document    ### Date Format  All dates must be provided in YYYY-MM-DD format    ### Form Types  Form types can be provided as comma-separated values, e.g.: \"10-K,8-K,10-Q\"    :::tip  For optimal performance, use date ranges and form types to narrow down your search  :::
   * 
   * Expected answers:
   *   code 200 : Seq[FilingMetadataDto] (Successful operation)
   *   code 400 : ValidationProblemDetails (Invalid request)
   *   code 500 : ProblemDetails (Server error)
   * 
   * @param cik Filter by Central Index Key (CIK)
   * @param ticker Filter by stock ticker symbol
   * @param formType Filter by form type(s) (e.g., \"10-K\", \"8-K\"). Multiple values can be comma-separated
   * @param fillingDateStart Filter by filling date start (inclusive), format YYYY-MM-DD
   * @param fillingDateEnd Filter by filling date end (inclusive), format YYYY-MM-DD
   * @param reportDateStart Filter by report date start (inclusive), format YYYY-MM-DD
   * @param reportDateEnd Filter by report date end (inclusive), format YYYY-MM-DD
   * @param itemsContain Filter filings where the 'Items' field contains the specified text
   * @param pageSize Number of results per page (default: 50, max: 200)
   * @param pageNumber Page number to retrieve (default: 1)
   * @param sortBy Field to sort results by (default: AccessionNumber)
   * @param sortOrder Sort order (asc or desc, default: desc)
   */
  def v1FilingsGet(cik: Option[Long] = None, ticker: Option[String] = None, formType: Option[String] = None, fillingDateStart: Option[String] = None, fillingDateEnd: Option[String] = None, reportDateStart: Option[String] = None, reportDateEnd: Option[String] = None, itemsContain: Option[String] = None, pageSize: Option[Int] = None, pageNumber: Option[Int] = None, sortBy: Option[FilingSortBy] = None, sortOrder: Option[String] = None): ApiRequest[Seq[FilingMetadataDto]] =
    ApiRequest[Seq[FilingMetadataDto]](ApiMethods.GET, baseUrl, "/v1/filings", "application/json")
      .withQueryParam("cik", cik)
      .withQueryParam("ticker", ticker)
      .withQueryParam("form_type", formType)
      .withQueryParam("filling_date_start", fillingDateStart)
      .withQueryParam("filling_date_end", fillingDateEnd)
      .withQueryParam("report_date_start", reportDateStart)
      .withQueryParam("report_date_end", reportDateEnd)
      .withQueryParam("items_contain", itemsContain)
      .withQueryParam("page_size", pageSize)
      .withQueryParam("page_number", pageNumber)
      .withQueryParam("sort_by", sortBy)
      .withQueryParam("sort_order", sortOrder)
      .withSuccessResponse[Seq[FilingMetadataDto]](200)
      .withErrorResponse[ValidationProblemDetails](400)
      .withErrorResponse[ProblemDetails](500)
      



}

