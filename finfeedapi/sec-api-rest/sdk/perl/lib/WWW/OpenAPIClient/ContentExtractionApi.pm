=begin comment

REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Contact: support@apibricks.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ContentExtractionApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# v1_extractor_get
#
# Extract and classify SEC filing content
#
# @param string $accession_number The SEC filing accession number used to retrieve the filing from EDGAR database. (required)
# @param DTOExtractorType $type Result type (text or html, default: text) (optional)
{
    my $params = {
    'accession_number' => {
        data_type => 'string',
        description => 'The SEC filing accession number used to retrieve the filing from EDGAR database.',
        required => '1',
    },
    'type' => {
        data_type => 'DTOExtractorType',
        description => 'Result type (text or html, default: text)',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1_extractor_get' } = {
        summary => 'Extract and classify SEC filing content',
        params => $params,
        returns => 'HASH[string,object]',
        };
}
# @return HASH[string,object]
#
sub v1_extractor_get {
    my ($self, %args) = @_;

    # verify the required parameter 'accession_number' is set
    unless (exists $args{'accession_number'}) {
      croak("Missing the required parameter 'accession_number' when calling v1_extractor_get");
    }

    # parse inputs
    my $_resource_path = '/v1/extractor';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'accession_number'}) {
        $query_params->{'accession_number'} = $self->{api_client}->to_query_value($args{'accession_number'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('HASH[string,object]', $response);
    return $_response_object;
}

#
# v1_extractor_item_get
#
# Extract specific item content from SEC filing
#
# @param string $accession_number The SEC filing accession number used to retrieve the filing from EDGAR database. (required)
# @param string $item_number The specific item number to extract (e.g., \&quot;1.01\&quot;, \&quot;2.01\&quot;, \&quot;7.01\&quot;). (required)
# @param DTOExtractorType $type Result type (text or html, default: text) (optional)
{
    my $params = {
    'accession_number' => {
        data_type => 'string',
        description => 'The SEC filing accession number used to retrieve the filing from EDGAR database.',
        required => '1',
    },
    'item_number' => {
        data_type => 'string',
        description => 'The specific item number to extract (e.g., \&quot;1.01\&quot;, \&quot;2.01\&quot;, \&quot;7.01\&quot;).',
        required => '1',
    },
    'type' => {
        data_type => 'DTOExtractorType',
        description => 'Result type (text or html, default: text)',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1_extractor_item_get' } = {
        summary => 'Extract specific item content from SEC filing',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub v1_extractor_item_get {
    my ($self, %args) = @_;

    # verify the required parameter 'accession_number' is set
    unless (exists $args{'accession_number'}) {
      croak("Missing the required parameter 'accession_number' when calling v1_extractor_item_get");
    }

    # verify the required parameter 'item_number' is set
    unless (exists $args{'item_number'}) {
      croak("Missing the required parameter 'item_number' when calling v1_extractor_item_get");
    }

    # parse inputs
    my $_resource_path = '/v1/extractor/item';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'accession_number'}) {
        $query_params->{'accession_number'} = $self->{api_client}->to_query_value($args{'accession_number'});
    }

    # query params
    if ( exists $args{'item_number'}) {
        $query_params->{'item_number'} = $self->{api_client}->to_query_value($args{'item_number'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

1;
