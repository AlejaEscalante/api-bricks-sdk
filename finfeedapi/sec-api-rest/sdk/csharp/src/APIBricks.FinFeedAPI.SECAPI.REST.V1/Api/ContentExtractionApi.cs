// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using APIBricks.FinFeedAPI.SECAPI.REST.V1.Client;
using APIBricks.FinFeedAPI.SECAPI.REST.V1.Model;
using System.Diagnostics.CodeAnalysis;

namespace APIBricks.FinFeedAPI.SECAPI.REST.V1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IContentExtractionApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ContentExtractionApiEvents Events { get; }

        /// <summary>
        /// Extract and classify SEC filing content
        /// </summary>
        /// <remarks>
        /// Retrieves filing content from the EDGAR database and intelligently classifies it according to form type and item categories.    ### Supported Form Types    Form Type | Description  - -- -- -- -- -|- -- -- -- -- -- -  8-K      | Current report filing  10-K     | Annual report filing  10-Q     | Quarterly report filing    ### Content Classification  - 8-K forms: Content classified by item numbers (e.g., 1.01, 2.01)  - 10-K/10-Q forms: Items categorized by their respective part and item structure    :::note  Both HTML and plain text documents are supported for content extraction.  :::
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessionNumber">The SEC filing accession number used to retrieve the filing from EDGAR database.</param>
        /// <param name="type">Result type (text or html, default: text) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1ExtractorGetApiResponse"/>&gt;</returns>
        Task<IV1ExtractorGetApiResponse> V1ExtractorGetAsync(string accessionNumber, Option<DTOExtractorType> type = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Extract and classify SEC filing content
        /// </summary>
        /// <remarks>
        /// Retrieves filing content from the EDGAR database and intelligently classifies it according to form type and item categories.    ### Supported Form Types    Form Type | Description  - -- -- -- -- -|- -- -- -- -- -- -  8-K      | Current report filing  10-K     | Annual report filing  10-Q     | Quarterly report filing    ### Content Classification  - 8-K forms: Content classified by item numbers (e.g., 1.01, 2.01)  - 10-K/10-Q forms: Items categorized by their respective part and item structure    :::note  Both HTML and plain text documents are supported for content extraction.  :::
        /// </remarks>
        /// <param name="accessionNumber">The SEC filing accession number used to retrieve the filing from EDGAR database.</param>
        /// <param name="type">Result type (text or html, default: text) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1ExtractorGetApiResponse"/>?&gt;</returns>
        Task<IV1ExtractorGetApiResponse?> V1ExtractorGetOrDefaultAsync(string accessionNumber, Option<DTOExtractorType> type = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Extract specific item content from SEC filing
        /// </summary>
        /// <remarks>
        /// Retrieves filing content from the EDGAR database and returns only the text content of the specified item number.    ### Item Number Format    Form Type | Item Format Examples  - -- -- -- -- --|- -- -- -- -- -- -- -- -- --  8-K       | 1.01, 2.01, 7.01  10-K      | 1, 2, 3  10-K/10-Q | PartI 1, PartII 2    :::tip  For best results, ensure the item number matches exactly with the filing&#39;s structure.  :::
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessionNumber">The SEC filing accession number used to retrieve the filing from EDGAR database.</param>
        /// <param name="itemNumber">The specific item number to extract (e.g., \&quot;1.01\&quot;, \&quot;2.01\&quot;, \&quot;7.01\&quot;).</param>
        /// <param name="type">Result type (text or html, default: text) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1ExtractorItemGetApiResponse"/>&gt;</returns>
        Task<IV1ExtractorItemGetApiResponse> V1ExtractorItemGetAsync(string accessionNumber, string itemNumber, Option<DTOExtractorType> type = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Extract specific item content from SEC filing
        /// </summary>
        /// <remarks>
        /// Retrieves filing content from the EDGAR database and returns only the text content of the specified item number.    ### Item Number Format    Form Type | Item Format Examples  - -- -- -- -- --|- -- -- -- -- -- -- -- -- --  8-K       | 1.01, 2.01, 7.01  10-K      | 1, 2, 3  10-K/10-Q | PartI 1, PartII 2    :::tip  For best results, ensure the item number matches exactly with the filing&#39;s structure.  :::
        /// </remarks>
        /// <param name="accessionNumber">The SEC filing accession number used to retrieve the filing from EDGAR database.</param>
        /// <param name="itemNumber">The specific item number to extract (e.g., \&quot;1.01\&quot;, \&quot;2.01\&quot;, \&quot;7.01\&quot;).</param>
        /// <param name="type">Result type (text or html, default: text) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1ExtractorItemGetApiResponse"/>?&gt;</returns>
        Task<IV1ExtractorItemGetApiResponse?> V1ExtractorItemGetOrDefaultAsync(string accessionNumber, string itemNumber, Option<DTOExtractorType> type = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IV1ExtractorGetApiResponse"/>
    /// </summary>
    public interface IV1ExtractorGetApiResponse : APIBricks.FinFeedAPI.SECAPI.REST.V1.Client.IApiResponse, IOk<Dictionary<string, Object>?>, IBadRequest<APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcValidationProblemDetails?>, IInternalServerError<APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IV1ExtractorItemGetApiResponse"/>
    /// </summary>
    public interface IV1ExtractorItemGetApiResponse : APIBricks.FinFeedAPI.SECAPI.REST.V1.Client.IApiResponse, IOk<string?>, IBadRequest<APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcValidationProblemDetails?>, IInternalServerError<APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ContentExtractionApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1ExtractorGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1ExtractorGet;

        internal void ExecuteOnV1ExtractorGet(ContentExtractionApi.V1ExtractorGetApiResponse apiResponse)
        {
            OnV1ExtractorGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1ExtractorGet(Exception exception)
        {
            OnErrorV1ExtractorGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1ExtractorItemGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1ExtractorItemGet;

        internal void ExecuteOnV1ExtractorItemGet(ContentExtractionApi.V1ExtractorItemGetApiResponse apiResponse)
        {
            OnV1ExtractorItemGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1ExtractorItemGet(Exception exception)
        {
            OnErrorV1ExtractorItemGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ContentExtractionApi : IContentExtractionApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ContentExtractionApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ContentExtractionApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentExtractionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContentExtractionApi(ILogger<ContentExtractionApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ContentExtractionApiEvents contentExtractionApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ContentExtractionApi>();
            HttpClient = httpClient;
            Events = contentExtractionApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatV1ExtractorGet(ref string accessionNumber, ref Option<DTOExtractorType> type);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="accessionNumber"></param>
        /// <returns></returns>
        private void ValidateV1ExtractorGet(string accessionNumber)
        {
            if (accessionNumber == null)
                throw new ArgumentNullException(nameof(accessionNumber));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="accessionNumber"></param>
        /// <param name="type"></param>
        private void AfterV1ExtractorGetDefaultImplementation(IV1ExtractorGetApiResponse apiResponseLocalVar, string accessionNumber, Option<DTOExtractorType> type)
        {
            bool suppressDefaultLog = false;
            AfterV1ExtractorGet(ref suppressDefaultLog, apiResponseLocalVar, accessionNumber, type);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="accessionNumber"></param>
        /// <param name="type"></param>
        partial void AfterV1ExtractorGet(ref bool suppressDefaultLog, IV1ExtractorGetApiResponse apiResponseLocalVar, string accessionNumber, Option<DTOExtractorType> type);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="accessionNumber"></param>
        /// <param name="type"></param>
        private void OnErrorV1ExtractorGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string accessionNumber, Option<DTOExtractorType> type)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1ExtractorGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, accessionNumber, type);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="accessionNumber"></param>
        /// <param name="type"></param>
        partial void OnErrorV1ExtractorGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string accessionNumber, Option<DTOExtractorType> type);

        /// <summary>
        /// Extract and classify SEC filing content Retrieves filing content from the EDGAR database and intelligently classifies it according to form type and item categories.    ### Supported Form Types    Form Type | Description  - -- -- -- -- -|- -- -- -- -- -- -  8-K      | Current report filing  10-K     | Annual report filing  10-Q     | Quarterly report filing    ### Content Classification  - 8-K forms: Content classified by item numbers (e.g., 1.01, 2.01)  - 10-K/10-Q forms: Items categorized by their respective part and item structure    :::note  Both HTML and plain text documents are supported for content extraction.  :::
        /// </summary>
        /// <param name="accessionNumber">The SEC filing accession number used to retrieve the filing from EDGAR database.</param>
        /// <param name="type">Result type (text or html, default: text) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1ExtractorGetApiResponse"/>&gt;</returns>
        public async Task<IV1ExtractorGetApiResponse?> V1ExtractorGetOrDefaultAsync(string accessionNumber, Option<DTOExtractorType> type = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1ExtractorGetAsync(accessionNumber, type, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Extract and classify SEC filing content Retrieves filing content from the EDGAR database and intelligently classifies it according to form type and item categories.    ### Supported Form Types    Form Type | Description  - -- -- -- -- -|- -- -- -- -- -- -  8-K      | Current report filing  10-K     | Annual report filing  10-Q     | Quarterly report filing    ### Content Classification  - 8-K forms: Content classified by item numbers (e.g., 1.01, 2.01)  - 10-K/10-Q forms: Items categorized by their respective part and item structure    :::note  Both HTML and plain text documents are supported for content extraction.  :::
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessionNumber">The SEC filing accession number used to retrieve the filing from EDGAR database.</param>
        /// <param name="type">Result type (text or html, default: text) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1ExtractorGetApiResponse"/>&gt;</returns>
        public async Task<IV1ExtractorGetApiResponse> V1ExtractorGetAsync(string accessionNumber, Option<DTOExtractorType> type = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1ExtractorGet(accessionNumber);

                FormatV1ExtractorGet(ref accessionNumber, ref type);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/extractor"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/extractor");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["accession_number"] = ClientUtils.ParameterToString(accessionNumber);

                    if (type.IsSet)
                        parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1ExtractorGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1ExtractorGetApiResponse>();

                        V1ExtractorGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/extractor", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1ExtractorGetDefaultImplementation(apiResponseLocalVar, accessionNumber, type);

                        Events.ExecuteOnV1ExtractorGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1ExtractorGetDefaultImplementation(e, "/v1/extractor", uriBuilderLocalVar.Path, accessionNumber, type);
                Events.ExecuteOnErrorV1ExtractorGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1ExtractorGetApiResponse"/>
        /// </summary>
        public partial class V1ExtractorGetApiResponse : APIBricks.FinFeedAPI.SECAPI.REST.V1.Client.ApiResponse, IV1ExtractorGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1ExtractorGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1ExtractorGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1ExtractorGetApiResponse(ILogger<V1ExtractorGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Dictionary<string, Object>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, Object>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Dictionary<string, Object>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcValidationProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcValidationProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcValidationProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcProblemDetails? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcProblemDetails? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1ExtractorItemGet(ref string accessionNumber, ref string itemNumber, ref Option<DTOExtractorType> type);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="accessionNumber"></param>
        /// <param name="itemNumber"></param>
        /// <returns></returns>
        private void ValidateV1ExtractorItemGet(string accessionNumber, string itemNumber)
        {
            if (accessionNumber == null)
                throw new ArgumentNullException(nameof(accessionNumber));

            if (itemNumber == null)
                throw new ArgumentNullException(nameof(itemNumber));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="accessionNumber"></param>
        /// <param name="itemNumber"></param>
        /// <param name="type"></param>
        private void AfterV1ExtractorItemGetDefaultImplementation(IV1ExtractorItemGetApiResponse apiResponseLocalVar, string accessionNumber, string itemNumber, Option<DTOExtractorType> type)
        {
            bool suppressDefaultLog = false;
            AfterV1ExtractorItemGet(ref suppressDefaultLog, apiResponseLocalVar, accessionNumber, itemNumber, type);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="accessionNumber"></param>
        /// <param name="itemNumber"></param>
        /// <param name="type"></param>
        partial void AfterV1ExtractorItemGet(ref bool suppressDefaultLog, IV1ExtractorItemGetApiResponse apiResponseLocalVar, string accessionNumber, string itemNumber, Option<DTOExtractorType> type);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="accessionNumber"></param>
        /// <param name="itemNumber"></param>
        /// <param name="type"></param>
        private void OnErrorV1ExtractorItemGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string accessionNumber, string itemNumber, Option<DTOExtractorType> type)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1ExtractorItemGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, accessionNumber, itemNumber, type);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="accessionNumber"></param>
        /// <param name="itemNumber"></param>
        /// <param name="type"></param>
        partial void OnErrorV1ExtractorItemGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string accessionNumber, string itemNumber, Option<DTOExtractorType> type);

        /// <summary>
        /// Extract specific item content from SEC filing Retrieves filing content from the EDGAR database and returns only the text content of the specified item number.    ### Item Number Format    Form Type | Item Format Examples  - -- -- -- -- --|- -- -- -- -- -- -- -- -- --  8-K       | 1.01, 2.01, 7.01  10-K      | 1, 2, 3  10-K/10-Q | PartI 1, PartII 2    :::tip  For best results, ensure the item number matches exactly with the filing&#39;s structure.  :::
        /// </summary>
        /// <param name="accessionNumber">The SEC filing accession number used to retrieve the filing from EDGAR database.</param>
        /// <param name="itemNumber">The specific item number to extract (e.g., \&quot;1.01\&quot;, \&quot;2.01\&quot;, \&quot;7.01\&quot;).</param>
        /// <param name="type">Result type (text or html, default: text) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1ExtractorItemGetApiResponse"/>&gt;</returns>
        public async Task<IV1ExtractorItemGetApiResponse?> V1ExtractorItemGetOrDefaultAsync(string accessionNumber, string itemNumber, Option<DTOExtractorType> type = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1ExtractorItemGetAsync(accessionNumber, itemNumber, type, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Extract specific item content from SEC filing Retrieves filing content from the EDGAR database and returns only the text content of the specified item number.    ### Item Number Format    Form Type | Item Format Examples  - -- -- -- -- --|- -- -- -- -- -- -- -- -- --  8-K       | 1.01, 2.01, 7.01  10-K      | 1, 2, 3  10-K/10-Q | PartI 1, PartII 2    :::tip  For best results, ensure the item number matches exactly with the filing&#39;s structure.  :::
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessionNumber">The SEC filing accession number used to retrieve the filing from EDGAR database.</param>
        /// <param name="itemNumber">The specific item number to extract (e.g., \&quot;1.01\&quot;, \&quot;2.01\&quot;, \&quot;7.01\&quot;).</param>
        /// <param name="type">Result type (text or html, default: text) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1ExtractorItemGetApiResponse"/>&gt;</returns>
        public async Task<IV1ExtractorItemGetApiResponse> V1ExtractorItemGetAsync(string accessionNumber, string itemNumber, Option<DTOExtractorType> type = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1ExtractorItemGet(accessionNumber, itemNumber);

                FormatV1ExtractorItemGet(ref accessionNumber, ref itemNumber, ref type);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/extractor/item"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/extractor/item");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["accession_number"] = ClientUtils.ParameterToString(accessionNumber);
                    parseQueryStringLocalVar["item_number"] = ClientUtils.ParameterToString(itemNumber);

                    if (type.IsSet)
                        parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1ExtractorItemGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1ExtractorItemGetApiResponse>();

                        V1ExtractorItemGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/extractor/item", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1ExtractorItemGetDefaultImplementation(apiResponseLocalVar, accessionNumber, itemNumber, type);

                        Events.ExecuteOnV1ExtractorItemGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1ExtractorItemGetDefaultImplementation(e, "/v1/extractor/item", uriBuilderLocalVar.Path, accessionNumber, itemNumber, type);
                Events.ExecuteOnErrorV1ExtractorItemGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1ExtractorItemGetApiResponse"/>
        /// </summary>
        public partial class V1ExtractorItemGetApiResponse : APIBricks.FinFeedAPI.SECAPI.REST.V1.Client.ApiResponse, IV1ExtractorItemGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1ExtractorItemGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1ExtractorItemGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1ExtractorItemGetApiResponse(ILogger<V1ExtractorItemGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public string? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out string? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcValidationProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcValidationProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcValidationProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcProblemDetails? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcProblemDetails? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
