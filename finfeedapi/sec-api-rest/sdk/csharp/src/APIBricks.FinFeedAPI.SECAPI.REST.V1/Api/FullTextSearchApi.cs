// <auto-generated>
/*
 * FinFeedAPI SEC REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using APIBricks.FinFeedAPI.SECAPI.REST.V1.Client;
using APIBricks.FinFeedAPI.SECAPI.REST.V1.Model;
using System.Diagnostics.CodeAnalysis;

namespace APIBricks.FinFeedAPI.SECAPI.REST.V1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IFullTextSearchApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        FullTextSearchApiEvents Events { get; }

        /// <summary>
        /// Full-text search of SEC filing documents
        /// </summary>
        /// <remarks>
        /// Search across SEC filing documents with advanced filtering and sorting capabilities.  ### Available Sort Fields  Field Name | Description - -- -- -- -- --|- -- -- -- -- -- -- AccessionNumber | SEC filing accession number FormType | Type of the filing document FilingDate | Date when filing was submitted CompanyName | Name of the company CIK | Central Index Key DocumentFilename | Name of the filing document DocumentDescription | Description of the document  ### Search Options  Option | Description - -- -- -- -|- -- -- -- -- -- -- text_contains | Keywords that must appear in the document text_not_contain | Keywords that must not appear in the document  ### Date Format All dates must be provided in YYYY-MM-DD format  :::tip Use text_contains and text_not_contain with multiple keywords separated by commas for more precise searches :::  :::note The search is case-insensitive and supports partial word matches :::
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="formType">Filter by form type (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated (optional)</param>
        /// <param name="fillingDateStart">Filter by filling date start (inclusive), format YYYY-MM-DD (optional)</param>
        /// <param name="fillingDateEnd">Filter by filling date end (inclusive), format YYYY-MM-DD (optional)</param>
        /// <param name="textContains">Keywords that the text must contain. Multiple values can be comma-separated (optional)</param>
        /// <param name="textNotContain">Keywords that the text must not contain. Multiple values can be comma-separated (optional)</param>
        /// <param name="pageSize">Number of results per page (default: 100) (optional)</param>
        /// <param name="pageNumber">Page number to retrieve (default: 1) (optional)</param>
        /// <param name="sortBy">Field to sort by (default: AccessionNumber) (optional, default to &quot;AccessionNumber&quot;)</param>
        /// <param name="sortOrder">Sort order (asc or desc). Defaults to asc (optional, default to &quot;asc&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1FullTextGetApiResponse"/>&gt;</returns>
        Task<IV1FullTextGetApiResponse> V1FullTextGetAsync(Option<string> formType = default, Option<string> fillingDateStart = default, Option<string> fillingDateEnd = default, Option<string> textContains = default, Option<string> textNotContain = default, Option<int> pageSize = default, Option<int> pageNumber = default, Option<string> sortBy = default, Option<string> sortOrder = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Full-text search of SEC filing documents
        /// </summary>
        /// <remarks>
        /// Search across SEC filing documents with advanced filtering and sorting capabilities.  ### Available Sort Fields  Field Name | Description - -- -- -- -- --|- -- -- -- -- -- -- AccessionNumber | SEC filing accession number FormType | Type of the filing document FilingDate | Date when filing was submitted CompanyName | Name of the company CIK | Central Index Key DocumentFilename | Name of the filing document DocumentDescription | Description of the document  ### Search Options  Option | Description - -- -- -- -|- -- -- -- -- -- -- text_contains | Keywords that must appear in the document text_not_contain | Keywords that must not appear in the document  ### Date Format All dates must be provided in YYYY-MM-DD format  :::tip Use text_contains and text_not_contain with multiple keywords separated by commas for more precise searches :::  :::note The search is case-insensitive and supports partial word matches :::
        /// </remarks>
        /// <param name="formType">Filter by form type (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated (optional)</param>
        /// <param name="fillingDateStart">Filter by filling date start (inclusive), format YYYY-MM-DD (optional)</param>
        /// <param name="fillingDateEnd">Filter by filling date end (inclusive), format YYYY-MM-DD (optional)</param>
        /// <param name="textContains">Keywords that the text must contain. Multiple values can be comma-separated (optional)</param>
        /// <param name="textNotContain">Keywords that the text must not contain. Multiple values can be comma-separated (optional)</param>
        /// <param name="pageSize">Number of results per page (default: 100) (optional)</param>
        /// <param name="pageNumber">Page number to retrieve (default: 1) (optional)</param>
        /// <param name="sortBy">Field to sort by (default: AccessionNumber) (optional, default to &quot;AccessionNumber&quot;)</param>
        /// <param name="sortOrder">Sort order (asc or desc). Defaults to asc (optional, default to &quot;asc&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1FullTextGetApiResponse"/>?&gt;</returns>
        Task<IV1FullTextGetApiResponse?> V1FullTextGetOrDefaultAsync(Option<string> formType = default, Option<string> fillingDateStart = default, Option<string> fillingDateEnd = default, Option<string> textContains = default, Option<string> textNotContain = default, Option<int> pageSize = default, Option<int> pageNumber = default, Option<string> sortBy = default, Option<string> sortOrder = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IV1FullTextGetApiResponse"/>
    /// </summary>
    public interface IV1FullTextGetApiResponse : APIBricks.FinFeedAPI.SECAPI.REST.V1.Client.IApiResponse, IOk<List<DTOSecFilingResultDto>?>, IBadRequest<APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcValidationProblemDetails?>, IInternalServerError<APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class FullTextSearchApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1FullTextGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1FullTextGet;

        internal void ExecuteOnV1FullTextGet(FullTextSearchApi.V1FullTextGetApiResponse apiResponse)
        {
            OnV1FullTextGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1FullTextGet(Exception exception)
        {
            OnErrorV1FullTextGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class FullTextSearchApi : IFullTextSearchApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<FullTextSearchApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public FullTextSearchApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="FullTextSearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FullTextSearchApi(ILogger<FullTextSearchApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, FullTextSearchApiEvents fullTextSearchApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<FullTextSearchApi>();
            HttpClient = httpClient;
            Events = fullTextSearchApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatV1FullTextGet(ref Option<string> formType, ref Option<string> fillingDateStart, ref Option<string> fillingDateEnd, ref Option<string> textContains, ref Option<string> textNotContain, ref Option<int> pageSize, ref Option<int> pageNumber, ref Option<string> sortBy, ref Option<string> sortOrder);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="formType"></param>
        /// <param name="fillingDateStart"></param>
        /// <param name="fillingDateEnd"></param>
        /// <param name="textContains"></param>
        /// <param name="textNotContain"></param>
        /// <param name="sortBy"></param>
        /// <param name="sortOrder"></param>
        /// <returns></returns>
        private void ValidateV1FullTextGet(Option<string> formType, Option<string> fillingDateStart, Option<string> fillingDateEnd, Option<string> textContains, Option<string> textNotContain, Option<string> sortBy, Option<string> sortOrder)
        {
            if (formType.IsSet && formType.Value == null)
                throw new ArgumentNullException(nameof(formType));

            if (fillingDateStart.IsSet && fillingDateStart.Value == null)
                throw new ArgumentNullException(nameof(fillingDateStart));

            if (fillingDateEnd.IsSet && fillingDateEnd.Value == null)
                throw new ArgumentNullException(nameof(fillingDateEnd));

            if (textContains.IsSet && textContains.Value == null)
                throw new ArgumentNullException(nameof(textContains));

            if (textNotContain.IsSet && textNotContain.Value == null)
                throw new ArgumentNullException(nameof(textNotContain));

            if (sortBy.IsSet && sortBy.Value == null)
                throw new ArgumentNullException(nameof(sortBy));

            if (sortOrder.IsSet && sortOrder.Value == null)
                throw new ArgumentNullException(nameof(sortOrder));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="formType"></param>
        /// <param name="fillingDateStart"></param>
        /// <param name="fillingDateEnd"></param>
        /// <param name="textContains"></param>
        /// <param name="textNotContain"></param>
        /// <param name="pageSize"></param>
        /// <param name="pageNumber"></param>
        /// <param name="sortBy"></param>
        /// <param name="sortOrder"></param>
        private void AfterV1FullTextGetDefaultImplementation(IV1FullTextGetApiResponse apiResponseLocalVar, Option<string> formType, Option<string> fillingDateStart, Option<string> fillingDateEnd, Option<string> textContains, Option<string> textNotContain, Option<int> pageSize, Option<int> pageNumber, Option<string> sortBy, Option<string> sortOrder)
        {
            bool suppressDefaultLog = false;
            AfterV1FullTextGet(ref suppressDefaultLog, apiResponseLocalVar, formType, fillingDateStart, fillingDateEnd, textContains, textNotContain, pageSize, pageNumber, sortBy, sortOrder);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="formType"></param>
        /// <param name="fillingDateStart"></param>
        /// <param name="fillingDateEnd"></param>
        /// <param name="textContains"></param>
        /// <param name="textNotContain"></param>
        /// <param name="pageSize"></param>
        /// <param name="pageNumber"></param>
        /// <param name="sortBy"></param>
        /// <param name="sortOrder"></param>
        partial void AfterV1FullTextGet(ref bool suppressDefaultLog, IV1FullTextGetApiResponse apiResponseLocalVar, Option<string> formType, Option<string> fillingDateStart, Option<string> fillingDateEnd, Option<string> textContains, Option<string> textNotContain, Option<int> pageSize, Option<int> pageNumber, Option<string> sortBy, Option<string> sortOrder);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="formType"></param>
        /// <param name="fillingDateStart"></param>
        /// <param name="fillingDateEnd"></param>
        /// <param name="textContains"></param>
        /// <param name="textNotContain"></param>
        /// <param name="pageSize"></param>
        /// <param name="pageNumber"></param>
        /// <param name="sortBy"></param>
        /// <param name="sortOrder"></param>
        private void OnErrorV1FullTextGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> formType, Option<string> fillingDateStart, Option<string> fillingDateEnd, Option<string> textContains, Option<string> textNotContain, Option<int> pageSize, Option<int> pageNumber, Option<string> sortBy, Option<string> sortOrder)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1FullTextGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, formType, fillingDateStart, fillingDateEnd, textContains, textNotContain, pageSize, pageNumber, sortBy, sortOrder);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="formType"></param>
        /// <param name="fillingDateStart"></param>
        /// <param name="fillingDateEnd"></param>
        /// <param name="textContains"></param>
        /// <param name="textNotContain"></param>
        /// <param name="pageSize"></param>
        /// <param name="pageNumber"></param>
        /// <param name="sortBy"></param>
        /// <param name="sortOrder"></param>
        partial void OnErrorV1FullTextGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> formType, Option<string> fillingDateStart, Option<string> fillingDateEnd, Option<string> textContains, Option<string> textNotContain, Option<int> pageSize, Option<int> pageNumber, Option<string> sortBy, Option<string> sortOrder);

        /// <summary>
        /// Full-text search of SEC filing documents Search across SEC filing documents with advanced filtering and sorting capabilities.  ### Available Sort Fields  Field Name | Description - -- -- -- -- --|- -- -- -- -- -- -- AccessionNumber | SEC filing accession number FormType | Type of the filing document FilingDate | Date when filing was submitted CompanyName | Name of the company CIK | Central Index Key DocumentFilename | Name of the filing document DocumentDescription | Description of the document  ### Search Options  Option | Description - -- -- -- -|- -- -- -- -- -- -- text_contains | Keywords that must appear in the document text_not_contain | Keywords that must not appear in the document  ### Date Format All dates must be provided in YYYY-MM-DD format  :::tip Use text_contains and text_not_contain with multiple keywords separated by commas for more precise searches :::  :::note The search is case-insensitive and supports partial word matches :::
        /// </summary>
        /// <param name="formType">Filter by form type (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated (optional)</param>
        /// <param name="fillingDateStart">Filter by filling date start (inclusive), format YYYY-MM-DD (optional)</param>
        /// <param name="fillingDateEnd">Filter by filling date end (inclusive), format YYYY-MM-DD (optional)</param>
        /// <param name="textContains">Keywords that the text must contain. Multiple values can be comma-separated (optional)</param>
        /// <param name="textNotContain">Keywords that the text must not contain. Multiple values can be comma-separated (optional)</param>
        /// <param name="pageSize">Number of results per page (default: 100) (optional)</param>
        /// <param name="pageNumber">Page number to retrieve (default: 1) (optional)</param>
        /// <param name="sortBy">Field to sort by (default: AccessionNumber) (optional, default to &quot;AccessionNumber&quot;)</param>
        /// <param name="sortOrder">Sort order (asc or desc). Defaults to asc (optional, default to &quot;asc&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1FullTextGetApiResponse"/>&gt;</returns>
        public async Task<IV1FullTextGetApiResponse?> V1FullTextGetOrDefaultAsync(Option<string> formType = default, Option<string> fillingDateStart = default, Option<string> fillingDateEnd = default, Option<string> textContains = default, Option<string> textNotContain = default, Option<int> pageSize = default, Option<int> pageNumber = default, Option<string> sortBy = default, Option<string> sortOrder = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1FullTextGetAsync(formType, fillingDateStart, fillingDateEnd, textContains, textNotContain, pageSize, pageNumber, sortBy, sortOrder, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Full-text search of SEC filing documents Search across SEC filing documents with advanced filtering and sorting capabilities.  ### Available Sort Fields  Field Name | Description - -- -- -- -- --|- -- -- -- -- -- -- AccessionNumber | SEC filing accession number FormType | Type of the filing document FilingDate | Date when filing was submitted CompanyName | Name of the company CIK | Central Index Key DocumentFilename | Name of the filing document DocumentDescription | Description of the document  ### Search Options  Option | Description - -- -- -- -|- -- -- -- -- -- -- text_contains | Keywords that must appear in the document text_not_contain | Keywords that must not appear in the document  ### Date Format All dates must be provided in YYYY-MM-DD format  :::tip Use text_contains and text_not_contain with multiple keywords separated by commas for more precise searches :::  :::note The search is case-insensitive and supports partial word matches :::
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="formType">Filter by form type (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated (optional)</param>
        /// <param name="fillingDateStart">Filter by filling date start (inclusive), format YYYY-MM-DD (optional)</param>
        /// <param name="fillingDateEnd">Filter by filling date end (inclusive), format YYYY-MM-DD (optional)</param>
        /// <param name="textContains">Keywords that the text must contain. Multiple values can be comma-separated (optional)</param>
        /// <param name="textNotContain">Keywords that the text must not contain. Multiple values can be comma-separated (optional)</param>
        /// <param name="pageSize">Number of results per page (default: 100) (optional)</param>
        /// <param name="pageNumber">Page number to retrieve (default: 1) (optional)</param>
        /// <param name="sortBy">Field to sort by (default: AccessionNumber) (optional, default to &quot;AccessionNumber&quot;)</param>
        /// <param name="sortOrder">Sort order (asc or desc). Defaults to asc (optional, default to &quot;asc&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1FullTextGetApiResponse"/>&gt;</returns>
        public async Task<IV1FullTextGetApiResponse> V1FullTextGetAsync(Option<string> formType = default, Option<string> fillingDateStart = default, Option<string> fillingDateEnd = default, Option<string> textContains = default, Option<string> textNotContain = default, Option<int> pageSize = default, Option<int> pageNumber = default, Option<string> sortBy = default, Option<string> sortOrder = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1FullTextGet(formType, fillingDateStart, fillingDateEnd, textContains, textNotContain, sortBy, sortOrder);

                FormatV1FullTextGet(ref formType, ref fillingDateStart, ref fillingDateEnd, ref textContains, ref textNotContain, ref pageSize, ref pageNumber, ref sortBy, ref sortOrder);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/full-text"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/full-text");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (formType.IsSet)
                        parseQueryStringLocalVar["form_type"] = ClientUtils.ParameterToString(formType.Value);

                    if (fillingDateStart.IsSet)
                        parseQueryStringLocalVar["filling_date_start"] = ClientUtils.ParameterToString(fillingDateStart.Value);

                    if (fillingDateEnd.IsSet)
                        parseQueryStringLocalVar["filling_date_end"] = ClientUtils.ParameterToString(fillingDateEnd.Value);

                    if (textContains.IsSet)
                        parseQueryStringLocalVar["text_contains"] = ClientUtils.ParameterToString(textContains.Value);

                    if (textNotContain.IsSet)
                        parseQueryStringLocalVar["text_not_contain"] = ClientUtils.ParameterToString(textNotContain.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (pageNumber.IsSet)
                        parseQueryStringLocalVar["page_number"] = ClientUtils.ParameterToString(pageNumber.Value);

                    if (sortBy.IsSet)
                        parseQueryStringLocalVar["sort_by"] = ClientUtils.ParameterToString(sortBy.Value);

                    if (sortOrder.IsSet)
                        parseQueryStringLocalVar["sort_order"] = ClientUtils.ParameterToString(sortOrder.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1FullTextGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1FullTextGetApiResponse>();

                        V1FullTextGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/full-text", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1FullTextGetDefaultImplementation(apiResponseLocalVar, formType, fillingDateStart, fillingDateEnd, textContains, textNotContain, pageSize, pageNumber, sortBy, sortOrder);

                        Events.ExecuteOnV1FullTextGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1FullTextGetDefaultImplementation(e, "/v1/full-text", uriBuilderLocalVar.Path, formType, fillingDateStart, fillingDateEnd, textContains, textNotContain, pageSize, pageNumber, sortBy, sortOrder);
                Events.ExecuteOnErrorV1FullTextGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1FullTextGetApiResponse"/>
        /// </summary>
        public partial class V1FullTextGetApiResponse : APIBricks.FinFeedAPI.SECAPI.REST.V1.Client.ApiResponse, IV1FullTextGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1FullTextGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1FullTextGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1FullTextGetApiResponse(ILogger<V1FullTextGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<DTOSecFilingResultDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<DTOSecFilingResultDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<DTOSecFilingResultDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcValidationProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcValidationProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcValidationProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcProblemDetails? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out APIBricks.FinFeedAPI.SECAPI.REST.V1.Model.MvcProblemDetails? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
