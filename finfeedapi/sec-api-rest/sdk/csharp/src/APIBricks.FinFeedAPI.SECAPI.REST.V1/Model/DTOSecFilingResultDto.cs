// <auto-generated>
/*
 * FinFeedAPI SEC REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.FinFeedAPI.SECAPI.REST.V1.Client.ClientUtils;
using APIBricks.FinFeedAPI.SECAPI.REST.V1.Client;

namespace APIBricks.FinFeedAPI.SECAPI.REST.V1.Model
{
    /// <summary>
    /// DTOSecFilingResultDto
    /// </summary>
    public partial class DTOSecFilingResultDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DTOSecFilingResultDto" /> class.
        /// </summary>
        /// <param name="accessionNumber">accessionNumber</param>
        /// <param name="formType">formType</param>
        /// <param name="filingDate">filingDate</param>
        /// <param name="companyName">companyName</param>
        /// <param name="cik">cik</param>
        /// <param name="documentFilename">documentFilename</param>
        /// <param name="documentDescription">documentDescription</param>
        /// <param name="sourceFile">sourceFile</param>
        [JsonConstructor]
        public DTOSecFilingResultDto(Option<string?> accessionNumber = default, Option<string?> formType = default, Option<DateOnly?> filingDate = default, Option<string?> companyName = default, Option<long?> cik = default, Option<string?> documentFilename = default, Option<string?> documentDescription = default, Option<string?> sourceFile = default)
        {
            AccessionNumberOption = accessionNumber;
            FormTypeOption = formType;
            FilingDateOption = filingDate;
            CompanyNameOption = companyName;
            CikOption = cik;
            DocumentFilenameOption = documentFilename;
            DocumentDescriptionOption = documentDescription;
            SourceFileOption = sourceFile;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AccessionNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AccessionNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccessionNumber
        /// </summary>
        [JsonPropertyName("accession_number")]
        public string? AccessionNumber { get { return this.AccessionNumberOption; } set { this.AccessionNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FormTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets FormType
        /// </summary>
        [JsonPropertyName("form_type")]
        public string? FormType { get { return this.FormTypeOption; } set { this.FormTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of FilingDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> FilingDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets FilingDate
        /// </summary>
        [JsonPropertyName("filing_date")]
        public DateOnly? FilingDate { get { return this.FilingDateOption; } set { this.FilingDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of CompanyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CompanyNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [JsonPropertyName("company_name")]
        public string? CompanyName { get { return this.CompanyNameOption; } set { this.CompanyNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Cik
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CikOption { get; private set; }

        /// <summary>
        /// Gets or Sets Cik
        /// </summary>
        [JsonPropertyName("cik")]
        public long? Cik { get { return this.CikOption; } set { this.CikOption = new(value); } }

        /// <summary>
        /// Used to track the state of DocumentFilename
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DocumentFilenameOption { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentFilename
        /// </summary>
        [JsonPropertyName("document_filename")]
        public string? DocumentFilename { get { return this.DocumentFilenameOption; } set { this.DocumentFilenameOption = new(value); } }

        /// <summary>
        /// Used to track the state of DocumentDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DocumentDescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets DocumentDescription
        /// </summary>
        [JsonPropertyName("document_description")]
        public string? DocumentDescription { get { return this.DocumentDescriptionOption; } set { this.DocumentDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceFile
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceFileOption { get; private set; }

        /// <summary>
        /// Gets or Sets SourceFile
        /// </summary>
        [JsonPropertyName("source_file")]
        public string? SourceFile { get { return this.SourceFileOption; } set { this.SourceFileOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DTOSecFilingResultDto {\n");
            sb.Append("  AccessionNumber: ").Append(AccessionNumber).Append("\n");
            sb.Append("  FormType: ").Append(FormType).Append("\n");
            sb.Append("  FilingDate: ").Append(FilingDate).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Cik: ").Append(Cik).Append("\n");
            sb.Append("  DocumentFilename: ").Append(DocumentFilename).Append("\n");
            sb.Append("  DocumentDescription: ").Append(DocumentDescription).Append("\n");
            sb.Append("  SourceFile: ").Append(SourceFile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DTOSecFilingResultDto" />
    /// </summary>
    public class DTOSecFilingResultDtoJsonConverter : JsonConverter<DTOSecFilingResultDto>
    {
        /// <summary>
        /// The format to use to serialize FilingDate
        /// </summary>
        public static string FilingDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="DTOSecFilingResultDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DTOSecFilingResultDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> accessionNumber = default;
            Option<string?> formType = default;
            Option<DateOnly?> filingDate = default;
            Option<string?> companyName = default;
            Option<long?> cik = default;
            Option<string?> documentFilename = default;
            Option<string?> documentDescription = default;
            Option<string?> sourceFile = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accession_number":
                            accessionNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "form_type":
                            formType = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "filing_date":
                            filingDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "company_name":
                            companyName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "cik":
                            cik = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "document_filename":
                            documentFilename = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "document_description":
                            documentDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "source_file":
                            sourceFile = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (filingDate.IsSet && filingDate.Value == null)
                throw new ArgumentNullException(nameof(filingDate), "Property is not nullable for class DTOSecFilingResultDto.");

            if (cik.IsSet && cik.Value == null)
                throw new ArgumentNullException(nameof(cik), "Property is not nullable for class DTOSecFilingResultDto.");

            return new DTOSecFilingResultDto(accessionNumber, formType, filingDate, companyName, cik, documentFilename, documentDescription, sourceFile);
        }

        /// <summary>
        /// Serializes a <see cref="DTOSecFilingResultDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dTOSecFilingResultDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DTOSecFilingResultDto dTOSecFilingResultDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dTOSecFilingResultDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DTOSecFilingResultDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dTOSecFilingResultDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DTOSecFilingResultDto dTOSecFilingResultDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dTOSecFilingResultDto.AccessionNumberOption.IsSet)
                if (dTOSecFilingResultDto.AccessionNumberOption.Value != null)
                    writer.WriteString("accession_number", dTOSecFilingResultDto.AccessionNumber);
                else
                    writer.WriteNull("accession_number");

            if (dTOSecFilingResultDto.FormTypeOption.IsSet)
                if (dTOSecFilingResultDto.FormTypeOption.Value != null)
                    writer.WriteString("form_type", dTOSecFilingResultDto.FormType);
                else
                    writer.WriteNull("form_type");

            if (dTOSecFilingResultDto.FilingDateOption.IsSet)
                writer.WriteString("filing_date", dTOSecFilingResultDto.FilingDateOption.Value!.Value.ToString(FilingDateFormat));

            if (dTOSecFilingResultDto.CompanyNameOption.IsSet)
                if (dTOSecFilingResultDto.CompanyNameOption.Value != null)
                    writer.WriteString("company_name", dTOSecFilingResultDto.CompanyName);
                else
                    writer.WriteNull("company_name");

            if (dTOSecFilingResultDto.CikOption.IsSet)
                writer.WriteNumber("cik", dTOSecFilingResultDto.CikOption.Value!.Value);

            if (dTOSecFilingResultDto.DocumentFilenameOption.IsSet)
                if (dTOSecFilingResultDto.DocumentFilenameOption.Value != null)
                    writer.WriteString("document_filename", dTOSecFilingResultDto.DocumentFilename);
                else
                    writer.WriteNull("document_filename");

            if (dTOSecFilingResultDto.DocumentDescriptionOption.IsSet)
                if (dTOSecFilingResultDto.DocumentDescriptionOption.Value != null)
                    writer.WriteString("document_description", dTOSecFilingResultDto.DocumentDescription);
                else
                    writer.WriteNull("document_description");

            if (dTOSecFilingResultDto.SourceFileOption.IsSet)
                if (dTOSecFilingResultDto.SourceFileOption.Value != null)
                    writer.WriteString("source_file", dTOSecFilingResultDto.SourceFile);
                else
                    writer.WriteNull("source_file");
        }
    }
}
