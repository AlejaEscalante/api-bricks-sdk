--  REST API
--  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
--
--  The version of the OpenAPI document: v1
--  Contact: support@apibricks.io
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.13.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

package body .Models is
   pragma Style_Checks ("-bmrIu");

   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;


   function To_DTOExtractorType_Type (Value : in String) return .Models.DTOExtractorType_Type is
   begin
      if Value = "text" then
         return TEXT;
      end if;
      if Value = "html" then
         return HTML;
      end if;
      raise Constraint_Error;
   end To_DTOExtractorType_Type;

   function To_String (Value : in .Models.DTOExtractorType_Type) return String is
   begin
      case Value is
         when TEXT =>
            return "text";

         when HTML =>
            return "html";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DTOExtractorType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DTOExtractorType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DTOExtractorType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_DTOExtractorType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DTOExtractorType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DTOExtractorType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DTOFilingMetadataDto_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Cik.Is_Null then
         Into.Write_Entity ("cik", Value.Cik);
      end if;
      Into.Write_Entity ("accession_number", Value.Accession_Number);
      if not Value.Filing_Date.Is_Null then
         Into.Write_Entity ("filing_date", Value.Filing_Date);
      end if;
      Into.Write_Entity ("report_date", Value.Report_Date);
      Into.Write_Entity ("acceptance_date_time", Value.Acceptance_Date_Time);
      Into.Write_Entity ("act", Value.Act);
      Into.Write_Entity ("form", Value.Form);
      Into.Write_Entity ("file_number", Value.File_Number);
      Into.Write_Entity ("film_number", Value.Film_Number);
      Into.Write_Entity ("items", Value.Items);
      Into.Write_Entity ("core_type", Value.Core_Type);
      Into.Write_Entity ("size", Value.Size);
      Into.Write_Entity ("is_xbrl", Value.Is_Xbrl);
      Into.Write_Entity ("is_inline_xbrl", Value.Is_Inline_Xbrl);
      Into.Write_Entity ("primary_document", Value.Primary_Document);
      Into.Write_Entity ("primary_doc_description", Value.Primary_Doc_Description);
      Into.Write_Entity ("source_file", Value.Source_File);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DTOFilingMetadataDto_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DTOFilingMetadataDto_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "cik", Value.Cik);
      Swagger.Streams.Deserialize (Object, "accession_number", Value.Accession_Number);
      Swagger.Streams.Deserialize (Object, "filing_date", Value.Filing_Date);
      Swagger.Streams.Deserialize (Object, "report_date", Value.Report_Date);
      Swagger.Streams.Deserialize (Object, "acceptance_date_time", Value.Acceptance_Date_Time);
      Swagger.Streams.Deserialize (Object, "act", Value.Act);
      Swagger.Streams.Deserialize (Object, "form", Value.Form);
      Swagger.Streams.Deserialize (Object, "file_number", Value.File_Number);
      Swagger.Streams.Deserialize (Object, "film_number", Value.Film_Number);
      Swagger.Streams.Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "core_type", Value.Core_Type);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "is_xbrl", Value.Is_Xbrl);
      Swagger.Streams.Deserialize (Object, "is_inline_xbrl", Value.Is_Inline_Xbrl);
      Swagger.Streams.Deserialize (Object, "primary_document", Value.Primary_Document);
      Swagger.Streams.Deserialize (Object, "primary_doc_description", Value.Primary_Doc_Description);
      Swagger.Streams.Deserialize (Object, "source_file", Value.Source_File);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DTOFilingMetadataDto_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DTOFilingMetadataDto_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_DTOFilingSortBy_Type (Value : in String) return .Models.DTOFilingSortBy_Type is
   begin
      if Value = "AccessionNumber" then
         return ACCESSIONNUMBER;
      end if;
      if Value = "FilingDate" then
         return FILINGDATE;
      end if;
      if Value = "ReportDate" then
         return REPORTDATE;
      end if;
      if Value = "AcceptanceDateTime" then
         return ACCEPTANCEDATETIME;
      end if;
      if Value = "Size" then
         return SIZE;
      end if;
      raise Constraint_Error;
   end To_DTOFilingSortBy_Type;

   function To_String (Value : in .Models.DTOFilingSortBy_Type) return String is
   begin
      case Value is
         when ACCESSIONNUMBER =>
            return "AccessionNumber";

         when FILINGDATE =>
            return "FilingDate";

         when REPORTDATE =>
            return "ReportDate";

         when ACCEPTANCEDATETIME =>
            return "AcceptanceDateTime";

         when SIZE =>
            return "Size";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DTOFilingSortBy_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DTOFilingSortBy_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DTOFilingSortBy_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_DTOFilingSortBy_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DTOFilingSortBy_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DTOFilingSortBy_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DTOSecFilingResultDto_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("accession_number", Value.Accession_Number);
      Into.Write_Entity ("form_type", Value.Form_Type);
      if not Value.Filing_Date.Is_Null then
         Into.Write_Entity ("filing_date", Value.Filing_Date);
      end if;
      Into.Write_Entity ("company_name", Value.Company_Name);
      if not Value.Cik.Is_Null then
         Into.Write_Entity ("cik", Value.Cik);
      end if;
      Into.Write_Entity ("document_filename", Value.Document_Filename);
      Into.Write_Entity ("document_description", Value.Document_Description);
      Into.Write_Entity ("source_file", Value.Source_File);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DTOSecFilingResultDto_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DTOSecFilingResultDto_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "accession_number", Value.Accession_Number);
      Swagger.Streams.Deserialize (Object, "form_type", Value.Form_Type);
      Swagger.Streams.Deserialize (Object, "filing_date", Value.Filing_Date);
      Swagger.Streams.Deserialize (Object, "company_name", Value.Company_Name);
      Swagger.Streams.Deserialize (Object, "cik", Value.Cik);
      Swagger.Streams.Deserialize (Object, "document_filename", Value.Document_Filename);
      Swagger.Streams.Deserialize (Object, "document_description", Value.Document_Description);
      Swagger.Streams.Deserialize (Object, "source_file", Value.Source_File);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DTOSecFilingResultDto_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DTOSecFilingResultDto_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MvcProblemDetails_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("type", Value.P_Type);
      Into.Write_Entity ("title", Value.Title);
      Into.Write_Entity ("status", Value.Status);
      Into.Write_Entity ("detail", Value.Detail);
      Into.Write_Entity ("instance", Value.Instance);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MvcProblemDetails_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MvcProblemDetails_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "detail", Value.Detail);
      Swagger.Streams.Deserialize (Object, "instance", Value.Instance);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MvcProblemDetails_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MvcProblemDetails_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MvcValidationProblemDetails_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("type", Value.P_Type);
      Into.Write_Entity ("title", Value.Title);
      Into.Write_Entity ("status", Value.Status);
      Into.Write_Entity ("detail", Value.Detail);
      Into.Write_Entity ("instance", Value.Instance);
      Serialize (Into, "errors", Value.Errors);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MvcValidationProblemDetails_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MvcValidationProblemDetails_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "detail", Value.Detail);
      Swagger.Streams.Deserialize (Object, "instance", Value.Instance);
      Swagger.Streams.Deserialize (Object, "errors", Value.Errors);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MvcValidationProblemDetails_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MvcValidationProblemDetails_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


end .Models;
