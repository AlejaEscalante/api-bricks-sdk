note
 description:"[
		REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	FILINGMETADATA_API

inherit

    API_I


feature -- API Access


	v1_filings_get (cik: INTEGER_64; form_type: STRING_32; filling_date_start: STRING_32; filling_date_end: STRING_32; report_date_start: STRING_32; report_date_end: STRING_32; items_contain: STRING_32; page_size: INTEGER_32; page_number: INTEGER_32; sort_by: detachable DTO_FILING_SORT_BY; sort_order: STRING_32): detachable LIST [DTO_FILING_METADATA_DTO]
			-- Query SEC filing metadata
			-- Retrieves metadata for SEC filings based on various filter criteria with pagination and sorting support.    ### Available Sort Fields    Field Name | Description  -----------|-------------  AccessionNumber | SEC filing accession number  FilingDate | Date when filing was submitted  AcceptanceDateTime | Date and time of filing acceptance  ReportDate | Date of the report  Size | Size of the filing document    ### Date Format  All dates must be provided in YYYY-MM-DD format    ### Form Types  Form types can be provided as comma-separated values, e.g.: \&quot;10-K,8-K,10-Q\&quot;    :::tip  For optimal performance, use date ranges and form types to narrow down your search  :::
			-- 
			-- argument: cik Filter by Central Index Key (CIK) (optional, default to null)
			-- 
			-- argument: form_type Filter by form type(s) (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated (optional, default to null)
			-- 
			-- argument: filling_date_start Filter by filling date start (inclusive), format YYYY-MM-DD (optional, default to null)
			-- 
			-- argument: filling_date_end Filter by filling date end (inclusive), format YYYY-MM-DD (optional, default to null)
			-- 
			-- argument: report_date_start Filter by report date start (inclusive), format YYYY-MM-DD (optional, default to null)
			-- 
			-- argument: report_date_end Filter by report date end (inclusive), format YYYY-MM-DD (optional, default to null)
			-- 
			-- argument: items_contain Filter filings where the &#39;Items&#39; field contains the specified text (optional, default to null)
			-- 
			-- argument: page_size Number of results per page (default: 50, max: 200) (optional, default to null)
			-- 
			-- argument: page_number Page number to retrieve (default: 1) (optional, default to null)
			-- 
			-- argument: sort_by Field to sort results by (default: AccessionNumber) (optional, default to null)
			-- 
			-- argument: sort_order Sort order (asc or desc, default: desc) (optional, default to desc)
			-- 
			-- 
			-- Result LIST [DTO_FILING_METADATA_DTO]
		require
			page_size_is_less_or_equal_than: page_size <= 200
     		page_size_is_greater_or_equal_than: page_size >= 1
			page_number_is_less_or_equal_than: page_number <= 2147483647
     		page_number_is_greater_or_equal_than: page_number >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/filings"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "cik", cik));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "form_type", form_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "filling_date_start", filling_date_start));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "filling_date_end", filling_date_end));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "report_date_start", report_date_start));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "report_date_end", report_date_end));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "items_contain", items_contain));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_size", page_size));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_number", page_number));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "sort_by", sort_by));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "sort_order", sort_order));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [DTO_FILING_METADATA_DTO] } l_response.data ({ LIST [DTO_FILING_METADATA_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
