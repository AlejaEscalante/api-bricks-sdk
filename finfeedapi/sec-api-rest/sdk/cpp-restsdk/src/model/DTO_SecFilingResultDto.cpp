/**
 * FinFeedAPI SEC REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DTO_SecFilingResultDto.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

DTO_SecFilingResultDto::DTO_SecFilingResultDto()
{
    m_Accession_number = utility::conversions::to_string_t("");
    m_Accession_numberIsSet = false;
    m_Form_type = utility::conversions::to_string_t("");
    m_Form_typeIsSet = false;
    m_Filing_dateIsSet = false;
    m_Company_name = utility::conversions::to_string_t("");
    m_Company_nameIsSet = false;
    m_Cik = 0L;
    m_CikIsSet = false;
    m_Document_filename = utility::conversions::to_string_t("");
    m_Document_filenameIsSet = false;
    m_Document_description = utility::conversions::to_string_t("");
    m_Document_descriptionIsSet = false;
    m_Source_file = utility::conversions::to_string_t("");
    m_Source_fileIsSet = false;
}

DTO_SecFilingResultDto::~DTO_SecFilingResultDto()
{
}

void DTO_SecFilingResultDto::validate()
{
    // TODO: implement validation
}

web::json::value DTO_SecFilingResultDto::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Accession_numberIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("accession_number"))] = ModelBase::toJson(m_Accession_number);
    }
    if(m_Form_typeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("form_type"))] = ModelBase::toJson(m_Form_type);
    }
    if(m_Filing_dateIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("filing_date"))] = ModelBase::toJson(m_Filing_date);
    }
    if(m_Company_nameIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("company_name"))] = ModelBase::toJson(m_Company_name);
    }
    if(m_CikIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("cik"))] = ModelBase::toJson(m_Cik);
    }
    if(m_Document_filenameIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("document_filename"))] = ModelBase::toJson(m_Document_filename);
    }
    if(m_Document_descriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("document_description"))] = ModelBase::toJson(m_Document_description);
    }
    if(m_Source_fileIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("source_file"))] = ModelBase::toJson(m_Source_file);
    }

    return val;
}

bool DTO_SecFilingResultDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("accession_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accession_number")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccessionNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccessionNumber);
            setAccessionNumber(refVal_setAccessionNumber);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("form_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("form_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFormType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormType);
            setFormType(refVal_setFormType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("filing_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("filing_date")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setFilingDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilingDate);
            setFilingDate(refVal_setFilingDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("company_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("company_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCompanyName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCompanyName);
            setCompanyName(refVal_setCompanyName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cik"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cik")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCik;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCik);
            setCik(refVal_setCik);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("document_filename"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("document_filename")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDocumentFilename;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDocumentFilename);
            setDocumentFilename(refVal_setDocumentFilename);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("document_description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("document_description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDocumentDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDocumentDescription);
            setDocumentDescription(refVal_setDocumentDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("source_file"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("source_file")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSourceFile;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSourceFile);
            setSourceFile(refVal_setSourceFile);
            
        }
    }
    return ok;
}

void DTO_SecFilingResultDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Accession_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accession_number")), m_Accession_number));
    }
    if(m_Form_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("form_type")), m_Form_type));
    }
    if(m_Filing_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("filing_date")), m_Filing_date));
    }
    if(m_Company_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("company_name")), m_Company_name));
    }
    if(m_CikIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cik")), m_Cik));
    }
    if(m_Document_filenameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("document_filename")), m_Document_filename));
    }
    if(m_Document_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("document_description")), m_Document_description));
    }
    if(m_Source_fileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("source_file")), m_Source_file));
    }
}

bool DTO_SecFilingResultDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("accession_number"))))
    {
        utility::string_t refVal_setAccessionNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accession_number"))), refVal_setAccessionNumber );
        setAccessionNumber(refVal_setAccessionNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("form_type"))))
    {
        utility::string_t refVal_setFormType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("form_type"))), refVal_setFormType );
        setFormType(refVal_setFormType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("filing_date"))))
    {
        utility::datetime refVal_setFilingDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("filing_date"))), refVal_setFilingDate );
        setFilingDate(refVal_setFilingDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("company_name"))))
    {
        utility::string_t refVal_setCompanyName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("company_name"))), refVal_setCompanyName );
        setCompanyName(refVal_setCompanyName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cik"))))
    {
        int64_t refVal_setCik;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cik"))), refVal_setCik );
        setCik(refVal_setCik);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("document_filename"))))
    {
        utility::string_t refVal_setDocumentFilename;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("document_filename"))), refVal_setDocumentFilename );
        setDocumentFilename(refVal_setDocumentFilename);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("document_description"))))
    {
        utility::string_t refVal_setDocumentDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("document_description"))), refVal_setDocumentDescription );
        setDocumentDescription(refVal_setDocumentDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("source_file"))))
    {
        utility::string_t refVal_setSourceFile;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("source_file"))), refVal_setSourceFile );
        setSourceFile(refVal_setSourceFile);
    }
    return ok;
}


utility::string_t DTO_SecFilingResultDto::getAccessionNumber() const
{
    return m_Accession_number;
}


void DTO_SecFilingResultDto::setAccessionNumber(const utility::string_t& value)
{
    m_Accession_number = value;
    m_Accession_numberIsSet = true;
}

bool DTO_SecFilingResultDto::accessionNumberIsSet() const
{
    return m_Accession_numberIsSet;
}

void DTO_SecFilingResultDto::unsetAccession_number()
{
    m_Accession_numberIsSet = false;
}
utility::string_t DTO_SecFilingResultDto::getFormType() const
{
    return m_Form_type;
}


void DTO_SecFilingResultDto::setFormType(const utility::string_t& value)
{
    m_Form_type = value;
    m_Form_typeIsSet = true;
}

bool DTO_SecFilingResultDto::formTypeIsSet() const
{
    return m_Form_typeIsSet;
}

void DTO_SecFilingResultDto::unsetForm_type()
{
    m_Form_typeIsSet = false;
}
utility::datetime DTO_SecFilingResultDto::getFilingDate() const
{
    return m_Filing_date;
}


void DTO_SecFilingResultDto::setFilingDate(const utility::datetime& value)
{
    m_Filing_date = value;
    m_Filing_dateIsSet = true;
}

bool DTO_SecFilingResultDto::filingDateIsSet() const
{
    return m_Filing_dateIsSet;
}

void DTO_SecFilingResultDto::unsetFiling_date()
{
    m_Filing_dateIsSet = false;
}
utility::string_t DTO_SecFilingResultDto::getCompanyName() const
{
    return m_Company_name;
}


void DTO_SecFilingResultDto::setCompanyName(const utility::string_t& value)
{
    m_Company_name = value;
    m_Company_nameIsSet = true;
}

bool DTO_SecFilingResultDto::companyNameIsSet() const
{
    return m_Company_nameIsSet;
}

void DTO_SecFilingResultDto::unsetCompany_name()
{
    m_Company_nameIsSet = false;
}
int64_t DTO_SecFilingResultDto::getCik() const
{
    return m_Cik;
}

void DTO_SecFilingResultDto::setCik(int64_t value)
{
    m_Cik = value;
    m_CikIsSet = true;
}

bool DTO_SecFilingResultDto::cikIsSet() const
{
    return m_CikIsSet;
}

void DTO_SecFilingResultDto::unsetCik()
{
    m_CikIsSet = false;
}
utility::string_t DTO_SecFilingResultDto::getDocumentFilename() const
{
    return m_Document_filename;
}


void DTO_SecFilingResultDto::setDocumentFilename(const utility::string_t& value)
{
    m_Document_filename = value;
    m_Document_filenameIsSet = true;
}

bool DTO_SecFilingResultDto::documentFilenameIsSet() const
{
    return m_Document_filenameIsSet;
}

void DTO_SecFilingResultDto::unsetDocument_filename()
{
    m_Document_filenameIsSet = false;
}
utility::string_t DTO_SecFilingResultDto::getDocumentDescription() const
{
    return m_Document_description;
}


void DTO_SecFilingResultDto::setDocumentDescription(const utility::string_t& value)
{
    m_Document_description = value;
    m_Document_descriptionIsSet = true;
}

bool DTO_SecFilingResultDto::documentDescriptionIsSet() const
{
    return m_Document_descriptionIsSet;
}

void DTO_SecFilingResultDto::unsetDocument_description()
{
    m_Document_descriptionIsSet = false;
}
utility::string_t DTO_SecFilingResultDto::getSourceFile() const
{
    return m_Source_file;
}


void DTO_SecFilingResultDto::setSourceFile(const utility::string_t& value)
{
    m_Source_file = value;
    m_Source_fileIsSet = true;
}

bool DTO_SecFilingResultDto::sourceFileIsSet() const
{
    return m_Source_fileIsSet;
}

void DTO_SecFilingResultDto::unsetSource_file()
{
    m_Source_fileIsSet = false;
}

}
}
}
}


