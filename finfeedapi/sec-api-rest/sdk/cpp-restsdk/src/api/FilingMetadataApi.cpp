/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "CppRestOpenAPIClient/api/FilingMetadataApi.h"
#include "CppRestOpenAPIClient/IHttpBody.h"
#include "CppRestOpenAPIClient/JsonBody.h"
#include "CppRestOpenAPIClient/MultipartFormData.h"

#include <boost/algorithm/string/replace.hpp>

#include <unordered_set>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;

FilingMetadataApi::FilingMetadataApi( std::shared_ptr<const ApiClient> apiClient )
    : m_ApiClient(apiClient)
{
}

FilingMetadataApi::~FilingMetadataApi()
{
}

pplx::task<std::vector<std::shared_ptr<DTO_FilingMetadataDto>>> FilingMetadataApi::v1FilingsGet(boost::optional<int64_t> cik, boost::optional<utility::string_t> ticker, boost::optional<utility::string_t> formType, boost::optional<utility::string_t> fillingDateStart, boost::optional<utility::string_t> fillingDateEnd, boost::optional<utility::string_t> reportDateStart, boost::optional<utility::string_t> reportDateEnd, boost::optional<utility::string_t> itemsContain, boost::optional<int32_t> pageSize, boost::optional<int32_t> pageNumber, boost::optional<std::shared_ptr<DTO_FilingSortBy>> sortBy, boost::optional<utility::string_t> sortOrder) const
{


    std::shared_ptr<const ApiConfiguration> localVarApiConfiguration( m_ApiClient->getConfiguration() );
    utility::string_t localVarPath = utility::conversions::to_string_t("/v1/filings");

    std::map<utility::string_t, utility::string_t> localVarQueryParams;
    std::map<utility::string_t, utility::string_t> localVarHeaderParams( localVarApiConfiguration->getDefaultHeaders() );
    std::map<utility::string_t, utility::string_t> localVarFormParams;
    std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

    std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
    localVarResponseHttpContentTypes.insert( utility::conversions::to_string_t("application/json") );

    utility::string_t localVarResponseHttpContentType;

    // use JSON if possible
    if ( localVarResponseHttpContentTypes.size() == 0 )
    {
        localVarResponseHttpContentType = utility::conversions::to_string_t("application/json");
    }
    // JSON
    else if ( localVarResponseHttpContentTypes.find(utility::conversions::to_string_t("application/json")) != localVarResponseHttpContentTypes.end() )
    {
        localVarResponseHttpContentType = utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if( localVarResponseHttpContentTypes.find(utility::conversions::to_string_t("multipart/form-data")) != localVarResponseHttpContentTypes.end() )
    {
        localVarResponseHttpContentType = utility::conversions::to_string_t("multipart/form-data");
    }
    else
    {
        throw ApiException(400, utility::conversions::to_string_t("FilingMetadataApi->v1FilingsGet does not produce any supported media type"));
    }

    localVarHeaderParams[utility::conversions::to_string_t("Accept")] = localVarResponseHttpContentType;

    std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

    if (cik)
    {
        localVarQueryParams[utility::conversions::to_string_t("cik")] = ApiClient::parameterToString(*cik);
    }
    if (ticker)
    {
        localVarQueryParams[utility::conversions::to_string_t("ticker")] = ApiClient::parameterToString(*ticker);
    }
    if (formType)
    {
        localVarQueryParams[utility::conversions::to_string_t("form_type")] = ApiClient::parameterToString(*formType);
    }
    if (fillingDateStart)
    {
        localVarQueryParams[utility::conversions::to_string_t("filling_date_start")] = ApiClient::parameterToString(*fillingDateStart);
    }
    if (fillingDateEnd)
    {
        localVarQueryParams[utility::conversions::to_string_t("filling_date_end")] = ApiClient::parameterToString(*fillingDateEnd);
    }
    if (reportDateStart)
    {
        localVarQueryParams[utility::conversions::to_string_t("report_date_start")] = ApiClient::parameterToString(*reportDateStart);
    }
    if (reportDateEnd)
    {
        localVarQueryParams[utility::conversions::to_string_t("report_date_end")] = ApiClient::parameterToString(*reportDateEnd);
    }
    if (itemsContain)
    {
        localVarQueryParams[utility::conversions::to_string_t("items_contain")] = ApiClient::parameterToString(*itemsContain);
    }
    if (pageSize)
    {
        localVarQueryParams[utility::conversions::to_string_t("page_size")] = ApiClient::parameterToString(*pageSize);
    }
    if (pageNumber)
    {
        localVarQueryParams[utility::conversions::to_string_t("page_number")] = ApiClient::parameterToString(*pageNumber);
    }
    if (sortBy && *sortBy != nullptr)
    {
        localVarQueryParams[utility::conversions::to_string_t("sort_by")] = ApiClient::parameterToString(*sortBy);
    }
    if (sortOrder)
    {
        localVarQueryParams[utility::conversions::to_string_t("sort_order")] = ApiClient::parameterToString(*sortOrder);
    }

    std::shared_ptr<IHttpBody> localVarHttpBody;
    utility::string_t localVarRequestHttpContentType;

    // use JSON if possible
    if ( localVarConsumeHttpContentTypes.size() == 0 || localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t("application/json")) != localVarConsumeHttpContentTypes.end() )
    {
        localVarRequestHttpContentType = utility::conversions::to_string_t("application/json");
    }
    // multipart formdata
    else if( localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t("multipart/form-data")) != localVarConsumeHttpContentTypes.end() )
    {
        localVarRequestHttpContentType = utility::conversions::to_string_t("multipart/form-data");
    }
    else if (localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t("application/x-www-form-urlencoded")) != localVarConsumeHttpContentTypes.end())
    {
        localVarRequestHttpContentType = utility::conversions::to_string_t("application/x-www-form-urlencoded");
    }
    else
    {
        throw ApiException(415, utility::conversions::to_string_t("FilingMetadataApi->v1FilingsGet does not consume any supported media type"));
    }


    return m_ApiClient->callApi(localVarPath, utility::conversions::to_string_t("GET"), localVarQueryParams, localVarHttpBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarRequestHttpContentType)
    .then([=, this](web::http::http_response localVarResponse)
    {
        if (m_ApiClient->getResponseHandler())
        {
            m_ApiClient->getResponseHandler()(localVarResponse.status_code(), localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400)
        {
            throw ApiException(localVarResponse.status_code()
                , utility::conversions::to_string_t("error calling v1FilingsGet: ") + localVarResponse.reason_phrase()
                , std::make_shared<std::stringstream>(localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if(localVarResponse.headers().has(utility::conversions::to_string_t("Content-Type")))
        {
            utility::string_t localVarContentType = localVarResponse.headers()[utility::conversions::to_string_t("Content-Type")];
            if( localVarContentType.find(localVarResponseHttpContentType) == std::string::npos )
            {
                throw ApiException(500
                    , utility::conversions::to_string_t("error calling v1FilingsGet: unexpected response type: ") + localVarContentType
                    , std::make_shared<std::stringstream>(localVarResponse.extract_utf8string(true).get()));
            }
        }

        return localVarResponse.extract_string();
    })
    .then([=, this](utility::string_t localVarResponse)
    {
        std::vector<std::shared_ptr<DTO_FilingMetadataDto>> localVarResult;

        if(localVarResponseHttpContentType == utility::conversions::to_string_t("application/json"))
        {
            web::json::value localVarJson = web::json::value::parse(localVarResponse);
            for( auto& localVarItem : localVarJson.as_array() )
            {
                std::shared_ptr<DTO_FilingMetadataDto> localVarItemObj;
                ModelBase::fromJson(localVarItem, localVarItemObj);
                localVarResult.push_back(localVarItemObj);
            }
        }
        // else if(localVarResponseHttpContentType == utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else
        {
            throw ApiException(500
                , utility::conversions::to_string_t("error calling v1FilingsGet: unsupported response type"));
        }

        return localVarResult;
    });
}

}
}
}
}

