/**
 * FinFeedAPI SEC REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FullTextSearchApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_FullTextSearchApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_FullTextSearchApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/DTO_SecFilingResultDto.h"
#include "CppRestOpenAPIClient/model/Mvc_ProblemDetails.h"
#include "CppRestOpenAPIClient/model/Mvc_ValidationProblemDetails.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  FullTextSearchApi 
{
public:

    explicit FullTextSearchApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~FullTextSearchApi();

    /// <summary>
    /// Full-text search of SEC filing documents
    /// </summary>
    /// <remarks>
    /// Search across SEC filing documents with advanced filtering and sorting capabilities.  ### Available Sort Fields  Field Name | Description -----------|------------- AccessionNumber | SEC filing accession number FormType | Type of the filing document FilingDate | Date when filing was submitted CompanyName | Name of the company CIK | Central Index Key DocumentFilename | Name of the filing document DocumentDescription | Description of the document  ### Search Options  Option | Description --------|------------- text_contains | Keywords that must appear in the document text_not_contain | Keywords that must not appear in the document  ### Date Format All dates must be provided in YYYY-MM-DD format  :::tip Use text_contains and text_not_contain with multiple keywords separated by commas for more precise searches :::  :::note The search is case-insensitive and supports partial word matches :::
    /// </remarks>
    /// <param name="formType">Filter by form type (e.g., \&quot;10-K\&quot;, \&quot;8-K\&quot;). Multiple values can be comma-separated (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="fillingDateStart">Filter by filling date start (inclusive), format YYYY-MM-DD (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="fillingDateEnd">Filter by filling date end (inclusive), format YYYY-MM-DD (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="textContains">Keywords that the text must contain. Multiple values can be comma-separated (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="textNotContain">Keywords that the text must not contain. Multiple values can be comma-separated (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pageSize">Number of results per page (default: 100) (optional, default to 0)</param>
    /// <param name="pageNumber">Page number to retrieve (default: 1) (optional, default to 0)</param>
    /// <param name="sortBy">Field to sort by (default: AccessionNumber) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="sortOrder">Sort order (asc or desc). Defaults to asc (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<DTO_SecFilingResultDto>>> v1FullTextGet(
        boost::optional<utility::string_t> formType,
        boost::optional<utility::string_t> fillingDateStart,
        boost::optional<utility::string_t> fillingDateEnd,
        boost::optional<utility::string_t> textContains,
        boost::optional<utility::string_t> textNotContain,
        boost::optional<int32_t> pageSize,
        boost::optional<int32_t> pageNumber,
        boost::optional<utility::string_t> sortBy,
        boost::optional<utility::string_t> sortOrder
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_FullTextSearchApi_H_ */

