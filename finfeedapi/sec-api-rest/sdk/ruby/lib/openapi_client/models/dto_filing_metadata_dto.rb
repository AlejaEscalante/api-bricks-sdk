=begin
#REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Contact: support@apibricks.io
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Represents the response for a single SEC filing metadata record.  Maps fields from the edgar_submissions table.
  class DTOFilingMetadataDto
    attr_accessor :cik

    attr_accessor :accession_number

    attr_accessor :filing_date

    attr_accessor :report_date

    attr_accessor :acceptance_date_time

    attr_accessor :act

    attr_accessor :form

    attr_accessor :file_number

    attr_accessor :film_number

    attr_accessor :items

    attr_accessor :core_type

    attr_accessor :size

    attr_accessor :is_xbrl

    attr_accessor :is_inline_xbrl

    attr_accessor :primary_document

    attr_accessor :primary_doc_description

    attr_accessor :source_file

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cik' => :'cik',
        :'accession_number' => :'accession_number',
        :'filing_date' => :'filing_date',
        :'report_date' => :'report_date',
        :'acceptance_date_time' => :'acceptance_date_time',
        :'act' => :'act',
        :'form' => :'form',
        :'file_number' => :'file_number',
        :'film_number' => :'film_number',
        :'items' => :'items',
        :'core_type' => :'core_type',
        :'size' => :'size',
        :'is_xbrl' => :'is_xbrl',
        :'is_inline_xbrl' => :'is_inline_xbrl',
        :'primary_document' => :'primary_document',
        :'primary_doc_description' => :'primary_doc_description',
        :'source_file' => :'source_file'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cik' => :'Integer',
        :'accession_number' => :'String',
        :'filing_date' => :'Date',
        :'report_date' => :'Date',
        :'acceptance_date_time' => :'Time',
        :'act' => :'String',
        :'form' => :'String',
        :'file_number' => :'String',
        :'film_number' => :'String',
        :'items' => :'String',
        :'core_type' => :'String',
        :'size' => :'Integer',
        :'is_xbrl' => :'Boolean',
        :'is_inline_xbrl' => :'Boolean',
        :'primary_document' => :'String',
        :'primary_doc_description' => :'String',
        :'source_file' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'accession_number',
        :'report_date',
        :'acceptance_date_time',
        :'act',
        :'form',
        :'file_number',
        :'film_number',
        :'items',
        :'core_type',
        :'size',
        :'is_xbrl',
        :'is_inline_xbrl',
        :'primary_document',
        :'primary_doc_description',
        :'source_file'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::DTOFilingMetadataDto` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::DTOFilingMetadataDto`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cik')
        self.cik = attributes[:'cik']
      end

      if attributes.key?(:'accession_number')
        self.accession_number = attributes[:'accession_number']
      end

      if attributes.key?(:'filing_date')
        self.filing_date = attributes[:'filing_date']
      end

      if attributes.key?(:'report_date')
        self.report_date = attributes[:'report_date']
      end

      if attributes.key?(:'acceptance_date_time')
        self.acceptance_date_time = attributes[:'acceptance_date_time']
      end

      if attributes.key?(:'act')
        self.act = attributes[:'act']
      end

      if attributes.key?(:'form')
        self.form = attributes[:'form']
      end

      if attributes.key?(:'file_number')
        self.file_number = attributes[:'file_number']
      end

      if attributes.key?(:'film_number')
        self.film_number = attributes[:'film_number']
      end

      if attributes.key?(:'items')
        self.items = attributes[:'items']
      end

      if attributes.key?(:'core_type')
        self.core_type = attributes[:'core_type']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'is_xbrl')
        self.is_xbrl = attributes[:'is_xbrl']
      end

      if attributes.key?(:'is_inline_xbrl')
        self.is_inline_xbrl = attributes[:'is_inline_xbrl']
      end

      if attributes.key?(:'primary_document')
        self.primary_document = attributes[:'primary_document']
      end

      if attributes.key?(:'primary_doc_description')
        self.primary_doc_description = attributes[:'primary_doc_description']
      end

      if attributes.key?(:'source_file')
        self.source_file = attributes[:'source_file']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cik == o.cik &&
          accession_number == o.accession_number &&
          filing_date == o.filing_date &&
          report_date == o.report_date &&
          acceptance_date_time == o.acceptance_date_time &&
          act == o.act &&
          form == o.form &&
          file_number == o.file_number &&
          film_number == o.film_number &&
          items == o.items &&
          core_type == o.core_type &&
          size == o.size &&
          is_xbrl == o.is_xbrl &&
          is_inline_xbrl == o.is_inline_xbrl &&
          primary_document == o.primary_document &&
          primary_doc_description == o.primary_doc_description &&
          source_file == o.source_file
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cik, accession_number, filing_date, report_date, acceptance_date_time, act, form, file_number, film_number, items, core_type, size, is_xbrl, is_inline_xbrl, primary_document, primary_doc_description, source_file].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
