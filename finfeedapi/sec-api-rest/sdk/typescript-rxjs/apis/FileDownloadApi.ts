// tslint:disable
/**
 * FinFeedAPI SEC REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    MvcProblemDetails,
    MvcValidationProblemDetails,
} from '../models';

export interface V1DownloadGetRequest {
    accessionNo: string;
    fileName: string;
}

/**
 * no description
 */
export class FileDownloadApi extends BaseAPI {

    /**
     * Downloads a specific file from the SEC EDGAR archive using the accession number and filename. The file is streamed directly from the SEC servers to the client.  ### Accession Number Format Accession numbers must be in the format: 0000000000-00-000000 (10 digits, dash, 2 digits, dash, 6 digits)  ### File Name Examples - Primary documents: `d123456d10k.htm`, `d789012d8k.htm` - XBRL files: `d123456d10k_htm.xml`, `FilingSummary.xml` - Exhibits: `d123456dexhibit99.htm`, `d123456dex101.htm`  ### File Types The endpoint supports downloading various file types from SEC filings: - HTML documents (.htm, .html) - XBRL files (.xml, .xsd) - Text files (.txt) - PDF files (.pdf) - Other document formats as submitted to SEC  :::tip You can find available filenames for a specific filing using the `/v1/filings` endpoint first :::  :::warning This endpoint streams files directly from the SEC. Large files may take longer to download. :::
     * Download file from SEC EDGAR archive
     */
    v1DownloadGet({ accessionNo, fileName }: V1DownloadGetRequest): Observable<void>
    v1DownloadGet({ accessionNo, fileName }: V1DownloadGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    v1DownloadGet({ accessionNo, fileName }: V1DownloadGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(accessionNo, 'accessionNo', 'v1DownloadGet');
        throwIfNullOrUndefined(fileName, 'fileName', 'v1DownloadGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'accession_no': accessionNo,
            'file_name': fileName,
        };

        return this.request<void>({
            url: '/v1/download',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
