/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.V1ExchangeRate
import org.openapitools.client.models.V1ExchangeRates
import org.openapitools.client.models.V1ExchangeRatesTimeseriesItem
import org.openapitools.client.models.V1TimeseriesPeriod

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ExchangeRatesApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api-historical.exrates.coinapi.io")
        }
    }

    /**
     * GET /v1/exchangerate/{asset_id_base}/{asset_id_quote}
     * Get specific rate
     * Retrieves the exchange rate for a specific base and quote asset at a given time or the current rate.              :::info If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements. :::
     * @param assetIdBase Requested exchange rate base asset identifier (from the Metadata -&gt; Assets)
     * @param assetIdQuote Requested exchange rate quote asset identifier (from the Metadata -&gt; Assets)
     * @param time Time at which exchange rate is calculated (optional, if not supplied then current rate is returned) (optional)
     * @return V1ExchangeRate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSpecificRate(assetIdBase: kotlin.String, assetIdQuote: kotlin.String, time: kotlin.String? = null) : V1ExchangeRate {
        val localVarResponse = getSpecificRateWithHttpInfo(assetIdBase = assetIdBase, assetIdQuote = assetIdQuote, time = time)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V1ExchangeRate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/exchangerate/{asset_id_base}/{asset_id_quote}
     * Get specific rate
     * Retrieves the exchange rate for a specific base and quote asset at a given time or the current rate.              :::info If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements. :::
     * @param assetIdBase Requested exchange rate base asset identifier (from the Metadata -&gt; Assets)
     * @param assetIdQuote Requested exchange rate quote asset identifier (from the Metadata -&gt; Assets)
     * @param time Time at which exchange rate is calculated (optional, if not supplied then current rate is returned) (optional)
     * @return ApiResponse<V1ExchangeRate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSpecificRateWithHttpInfo(assetIdBase: kotlin.String, assetIdQuote: kotlin.String, time: kotlin.String?) : ApiResponse<V1ExchangeRate?> {
        val localVariableConfig = getSpecificRateRequestConfig(assetIdBase = assetIdBase, assetIdQuote = assetIdQuote, time = time)

        return request<Unit, V1ExchangeRate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSpecificRate
     *
     * @param assetIdBase Requested exchange rate base asset identifier (from the Metadata -&gt; Assets)
     * @param assetIdQuote Requested exchange rate quote asset identifier (from the Metadata -&gt; Assets)
     * @param time Time at which exchange rate is calculated (optional, if not supplied then current rate is returned) (optional)
     * @return RequestConfig
     */
    fun getSpecificRateRequestConfig(assetIdBase: kotlin.String, assetIdQuote: kotlin.String, time: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (time != null) {
                    put("time", listOf(time.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/exchangerate/{asset_id_base}/{asset_id_quote}".replace("{"+"asset_id_base"+"}", encodeURIComponent(assetIdBase.toString())).replace("{"+"asset_id_quote"+"}", encodeURIComponent(assetIdQuote.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /v1/exchangerate/{asset_id_base}/{asset_id_quote}/history
     * Timeseries data
     * Get the historical exchange rates between two assets in the form of the timeseries.
     * @param assetIdBase Requested exchange rates base asset identifier (from the Metadata -&gt; Assets)
     * @param assetIdQuote Requested exchange rates base asset identifier (from the Metadata -&gt; Assets)
     * @param periodId Identifier of requested timeseries period (required, e.g. &#x60;5SEC&#x60; or &#x60;1HRS&#x60;) (optional)
     * @param timeStart Timeseries starting time in ISO 8601 (required) (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (required) (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return kotlin.collections.List<V1ExchangeRatesTimeseriesItem>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGet(assetIdBase: kotlin.String, assetIdQuote: kotlin.String, periodId: kotlin.String? = null, timeStart: kotlin.String? = null, timeEnd: kotlin.String? = null, limit: kotlin.Int? = 100) : kotlin.collections.List<V1ExchangeRatesTimeseriesItem> {
        val localVarResponse = v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGetWithHttpInfo(assetIdBase = assetIdBase, assetIdQuote = assetIdQuote, periodId = periodId, timeStart = timeStart, timeEnd = timeEnd, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<V1ExchangeRatesTimeseriesItem>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/exchangerate/{asset_id_base}/{asset_id_quote}/history
     * Timeseries data
     * Get the historical exchange rates between two assets in the form of the timeseries.
     * @param assetIdBase Requested exchange rates base asset identifier (from the Metadata -&gt; Assets)
     * @param assetIdQuote Requested exchange rates base asset identifier (from the Metadata -&gt; Assets)
     * @param periodId Identifier of requested timeseries period (required, e.g. &#x60;5SEC&#x60; or &#x60;1HRS&#x60;) (optional)
     * @param timeStart Timeseries starting time in ISO 8601 (required) (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (required) (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return ApiResponse<kotlin.collections.List<V1ExchangeRatesTimeseriesItem>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGetWithHttpInfo(assetIdBase: kotlin.String, assetIdQuote: kotlin.String, periodId: kotlin.String?, timeStart: kotlin.String?, timeEnd: kotlin.String?, limit: kotlin.Int?) : ApiResponse<kotlin.collections.List<V1ExchangeRatesTimeseriesItem>?> {
        val localVariableConfig = v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGetRequestConfig(assetIdBase = assetIdBase, assetIdQuote = assetIdQuote, periodId = periodId, timeStart = timeStart, timeEnd = timeEnd, limit = limit)

        return request<Unit, kotlin.collections.List<V1ExchangeRatesTimeseriesItem>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGet
     *
     * @param assetIdBase Requested exchange rates base asset identifier (from the Metadata -&gt; Assets)
     * @param assetIdQuote Requested exchange rates base asset identifier (from the Metadata -&gt; Assets)
     * @param periodId Identifier of requested timeseries period (required, e.g. &#x60;5SEC&#x60; or &#x60;1HRS&#x60;) (optional)
     * @param timeStart Timeseries starting time in ISO 8601 (required) (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (required) (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return RequestConfig
     */
    fun v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGetRequestConfig(assetIdBase: kotlin.String, assetIdQuote: kotlin.String, periodId: kotlin.String?, timeStart: kotlin.String?, timeEnd: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (periodId != null) {
                    put("period_id", listOf(periodId.toString()))
                }
                if (timeStart != null) {
                    put("time_start", listOf(timeStart.toString()))
                }
                if (timeEnd != null) {
                    put("time_end", listOf(timeEnd.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/exchangerate/{asset_id_base}/{asset_id_quote}/history".replace("{"+"asset_id_base"+"}", encodeURIComponent(assetIdBase.toString())).replace("{"+"asset_id_quote"+"}", encodeURIComponent(assetIdQuote.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /v1/exchangerate/{asset_id_base}
     * Get all current rates
     * Get the current exchange rate between requested asset and all other assets.              :::info If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements. :::              :::info You can invert the rates by using Y &#x3D; 1 / X equation, for example BTC/USD &#x3D; 1 / (USD/BTC); :::
     * @param assetIdBase Requested exchange rates base asset identifier (from the Metadata -&gt; Assets)
     * @param filterAssetId Comma or semicolon delimited asset identifiers used to filter response (optional) (optional)
     * @param invert True will invert all the rates (optional, if true then rates will be calculated as &#x60;rate &#x3D; 1 / actual_rate&#x60; eg. &#x60;USD/BTC&#x60; as &#x60;BTC/USD&#x60;) (optional, default to false)
     * @param time Time for historical rates (optional) (optional)
     * @return V1ExchangeRates
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1ExchangerateAssetIdBaseGet(assetIdBase: kotlin.String, filterAssetId: kotlin.String? = null, invert: kotlin.Boolean? = false, time: kotlin.String? = null) : V1ExchangeRates {
        val localVarResponse = v1ExchangerateAssetIdBaseGetWithHttpInfo(assetIdBase = assetIdBase, filterAssetId = filterAssetId, invert = invert, time = time)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V1ExchangeRates
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/exchangerate/{asset_id_base}
     * Get all current rates
     * Get the current exchange rate between requested asset and all other assets.              :::info If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements. :::              :::info You can invert the rates by using Y &#x3D; 1 / X equation, for example BTC/USD &#x3D; 1 / (USD/BTC); :::
     * @param assetIdBase Requested exchange rates base asset identifier (from the Metadata -&gt; Assets)
     * @param filterAssetId Comma or semicolon delimited asset identifiers used to filter response (optional) (optional)
     * @param invert True will invert all the rates (optional, if true then rates will be calculated as &#x60;rate &#x3D; 1 / actual_rate&#x60; eg. &#x60;USD/BTC&#x60; as &#x60;BTC/USD&#x60;) (optional, default to false)
     * @param time Time for historical rates (optional) (optional)
     * @return ApiResponse<V1ExchangeRates?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1ExchangerateAssetIdBaseGetWithHttpInfo(assetIdBase: kotlin.String, filterAssetId: kotlin.String?, invert: kotlin.Boolean?, time: kotlin.String?) : ApiResponse<V1ExchangeRates?> {
        val localVariableConfig = v1ExchangerateAssetIdBaseGetRequestConfig(assetIdBase = assetIdBase, filterAssetId = filterAssetId, invert = invert, time = time)

        return request<Unit, V1ExchangeRates>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1ExchangerateAssetIdBaseGet
     *
     * @param assetIdBase Requested exchange rates base asset identifier (from the Metadata -&gt; Assets)
     * @param filterAssetId Comma or semicolon delimited asset identifiers used to filter response (optional) (optional)
     * @param invert True will invert all the rates (optional, if true then rates will be calculated as &#x60;rate &#x3D; 1 / actual_rate&#x60; eg. &#x60;USD/BTC&#x60; as &#x60;BTC/USD&#x60;) (optional, default to false)
     * @param time Time for historical rates (optional) (optional)
     * @return RequestConfig
     */
    fun v1ExchangerateAssetIdBaseGetRequestConfig(assetIdBase: kotlin.String, filterAssetId: kotlin.String?, invert: kotlin.Boolean?, time: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filterAssetId != null) {
                    put("filter_asset_id", listOf(filterAssetId.toString()))
                }
                if (invert != null) {
                    put("invert", listOf(invert.toString()))
                }
                if (time != null) {
                    put("time", listOf(time.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/exchangerate/{asset_id_base}".replace("{"+"asset_id_base"+"}", encodeURIComponent(assetIdBase.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /v1/exchangerate/history/periods
     * Timeseries periods
     * You can also obtain historical exchange rates of any asset pair, grouped into time periods. Get full list of supported time periods available for requesting exchange rates historical timeseries data.              ## Timeseries periods Time unit | Period identifiers --- | --- Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY
     * @return kotlin.collections.List<V1TimeseriesPeriod>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1ExchangerateHistoryPeriodsGet() : kotlin.collections.List<V1TimeseriesPeriod> {
        val localVarResponse = v1ExchangerateHistoryPeriodsGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<V1TimeseriesPeriod>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/exchangerate/history/periods
     * Timeseries periods
     * You can also obtain historical exchange rates of any asset pair, grouped into time periods. Get full list of supported time periods available for requesting exchange rates historical timeseries data.              ## Timeseries periods Time unit | Period identifiers --- | --- Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY
     * @return ApiResponse<kotlin.collections.List<V1TimeseriesPeriod>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1ExchangerateHistoryPeriodsGetWithHttpInfo() : ApiResponse<kotlin.collections.List<V1TimeseriesPeriod>?> {
        val localVariableConfig = v1ExchangerateHistoryPeriodsGetRequestConfig()

        return request<Unit, kotlin.collections.List<V1TimeseriesPeriod>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1ExchangerateHistoryPeriodsGet
     *
     * @return RequestConfig
     */
    fun v1ExchangerateHistoryPeriodsGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/exchangerate/history/periods",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
