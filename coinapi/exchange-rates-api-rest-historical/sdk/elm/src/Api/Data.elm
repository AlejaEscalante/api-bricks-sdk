{-
   Exchange Rates Historical REST API
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   The version of the OpenAPI document: v1
   Contact: support@apibricks.io

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( V1Asset
    , V1ChainNetworkAddress
    , V1ExchangeRate
    , V1ExchangeRates
    , V1ExchangeRatesRate
    , V1ExchangeRatesTimeseriesItem
    , V1Icon
    , V1TimeseriesPeriod
    , encodeV1Asset
    , encodeV1ChainNetworkAddress
    , encodeV1ExchangeRate
    , encodeV1ExchangeRates
    , encodeV1ExchangeRatesRate
    , encodeV1ExchangeRatesTimeseriesItem
    , encodeV1Icon
    , encodeV1TimeseriesPeriod
    , v1AssetDecoder
    , v1ChainNetworkAddressDecoder
    , v1ExchangeRateDecoder
    , v1ExchangeRatesDecoder
    , v1ExchangeRatesRateDecoder
    , v1ExchangeRatesTimeseriesItemDecoder
    , v1IconDecoder
    , v1TimeseriesPeriodDecoder
    )

import Api
import Api.Time exposing (Posix)
import Dict
import Json.Decode
import Json.Encode
import Uuid exposing (Uuid)


-- MODEL


{-| Represents an asset.
-}
type alias V1Asset =
    { assetId : Maybe String
    , name : Maybe String
    , typeIsCrypto : Maybe Int
    , dataQuoteStart : Maybe Posix
    , dataQuoteEnd : Maybe Posix
    , dataOrderbookStart : Maybe Posix
    , dataOrderbookEnd : Maybe Posix
    , dataTradeStart : Maybe Posix
    , dataTradeEnd : Maybe Posix
    , dataSymbolsCount : Maybe Int
    , volume1hrsUsd : Maybe Float
    , volume1dayUsd : Maybe Float
    , volume1mthUsd : Maybe Float
    , priceUsd : Maybe Float
    , idIcon : Maybe Uuid
    , supplyCurrent : Maybe Float
    , supplyTotal : Maybe Float
    , supplyMax : Maybe Float
    , chainAddresses : Maybe ( List V1ChainNetworkAddress )
    , dataStart : Maybe String
    , dataEnd : Maybe String
    }


{-| Contains information about assets' chain network addresses
-}
type alias V1ChainNetworkAddress =
    { chainId : Maybe String
    , networkId : Maybe String
    , address : Maybe String
    }


{-| Represents an exchange rate.
-}
type alias V1ExchangeRate =
    { time : Maybe Posix
    , assetIdBase : Maybe String
    , assetIdQuote : Maybe String
    , rate : Maybe Float
    }


{-| Represents exchange rates for a specific base asset.
-}
type alias V1ExchangeRates =
    { assetIdBase : Maybe String
    , rates : Maybe ( List V1ExchangeRatesRate )
    }


{-| Represents an exchange rate within a collection of exchange rates.
-}
type alias V1ExchangeRatesRate =
    { time : Maybe Posix
    , assetIdQuote : Maybe String
    , rate : Maybe Float
    }


{-| Represents an item in the exchange rate timeseries.
-}
type alias V1ExchangeRatesTimeseriesItem =
    { timePeriodStart : Maybe Posix
    , timePeriodEnd : Maybe Posix
    , timeOpen : Maybe Posix
    , timeClose : Maybe Posix
    , rateOpen : Maybe Float
    , rateHigh : Maybe Float
    , rateLow : Maybe Float
    , rateClose : Maybe Float
    }


{-| Represents an icon.
-}
type alias V1Icon =
    { exchangeId : Maybe String
    , assetId : Maybe String
    , url : Maybe String
    }


{-| Represents a timeseries period used in exchange rate data.
-}
type alias V1TimeseriesPeriod =
    { periodId : Maybe String
    , lengthSeconds : Maybe Int
    , lengthMonths : Maybe Int
    , unitCount : Maybe Int
    , unitName : Maybe String
    , displayName : Maybe String
    }


-- ENCODER


encodeV1Asset : V1Asset -> Json.Encode.Value
encodeV1Asset =
    encodeObject << encodeV1AssetPairs


encodeV1AssetWithTag : ( String, String ) -> V1Asset -> Json.Encode.Value
encodeV1AssetWithTag (tagField, tag) model =
    encodeObject (encodeV1AssetPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeV1AssetPairs : V1Asset -> List EncodedField
encodeV1AssetPairs model =
    let
        pairs =
            [ maybeEncodeNullable "asset_id" Json.Encode.string model.assetId
            , maybeEncodeNullable "name" Json.Encode.string model.name
            , maybeEncode "type_is_crypto" Json.Encode.int model.typeIsCrypto
            , maybeEncodeNullable "data_quote_start" Api.Time.encodeDateTime model.dataQuoteStart
            , maybeEncodeNullable "data_quote_end" Api.Time.encodeDateTime model.dataQuoteEnd
            , maybeEncodeNullable "data_orderbook_start" Api.Time.encodeDateTime model.dataOrderbookStart
            , maybeEncodeNullable "data_orderbook_end" Api.Time.encodeDateTime model.dataOrderbookEnd
            , maybeEncodeNullable "data_trade_start" Api.Time.encodeDateTime model.dataTradeStart
            , maybeEncodeNullable "data_trade_end" Api.Time.encodeDateTime model.dataTradeEnd
            , maybeEncodeNullable "data_symbols_count" Json.Encode.int model.dataSymbolsCount
            , maybeEncodeNullable "volume_1hrs_usd" Json.Encode.float model.volume1hrsUsd
            , maybeEncodeNullable "volume_1day_usd" Json.Encode.float model.volume1dayUsd
            , maybeEncodeNullable "volume_1mth_usd" Json.Encode.float model.volume1mthUsd
            , maybeEncodeNullable "price_usd" Json.Encode.float model.priceUsd
            , maybeEncodeNullable "id_icon" Uuid.encode model.idIcon
            , maybeEncodeNullable "supply_current" Json.Encode.float model.supplyCurrent
            , maybeEncodeNullable "supply_total" Json.Encode.float model.supplyTotal
            , maybeEncodeNullable "supply_max" Json.Encode.float model.supplyMax
            , maybeEncodeNullable "chain_addresses" (Json.Encode.list encodeV1ChainNetworkAddress) model.chainAddresses
            , maybeEncodeNullable "data_start" Json.Encode.string model.dataStart
            , maybeEncodeNullable "data_end" Json.Encode.string model.dataEnd
            ]
    in
    pairs


encodeV1ChainNetworkAddress : V1ChainNetworkAddress -> Json.Encode.Value
encodeV1ChainNetworkAddress =
    encodeObject << encodeV1ChainNetworkAddressPairs


encodeV1ChainNetworkAddressWithTag : ( String, String ) -> V1ChainNetworkAddress -> Json.Encode.Value
encodeV1ChainNetworkAddressWithTag (tagField, tag) model =
    encodeObject (encodeV1ChainNetworkAddressPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeV1ChainNetworkAddressPairs : V1ChainNetworkAddress -> List EncodedField
encodeV1ChainNetworkAddressPairs model =
    let
        pairs =
            [ maybeEncodeNullable "chain_id" Json.Encode.string model.chainId
            , maybeEncodeNullable "network_id" Json.Encode.string model.networkId
            , maybeEncodeNullable "address" Json.Encode.string model.address
            ]
    in
    pairs


encodeV1ExchangeRate : V1ExchangeRate -> Json.Encode.Value
encodeV1ExchangeRate =
    encodeObject << encodeV1ExchangeRatePairs


encodeV1ExchangeRateWithTag : ( String, String ) -> V1ExchangeRate -> Json.Encode.Value
encodeV1ExchangeRateWithTag (tagField, tag) model =
    encodeObject (encodeV1ExchangeRatePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeV1ExchangeRatePairs : V1ExchangeRate -> List EncodedField
encodeV1ExchangeRatePairs model =
    let
        pairs =
            [ maybeEncode "time" Api.Time.encodeDateTime model.time
            , maybeEncodeNullable "asset_id_base" Json.Encode.string model.assetIdBase
            , maybeEncodeNullable "asset_id_quote" Json.Encode.string model.assetIdQuote
            , maybeEncode "rate" Json.Encode.float model.rate
            ]
    in
    pairs


encodeV1ExchangeRates : V1ExchangeRates -> Json.Encode.Value
encodeV1ExchangeRates =
    encodeObject << encodeV1ExchangeRatesPairs


encodeV1ExchangeRatesWithTag : ( String, String ) -> V1ExchangeRates -> Json.Encode.Value
encodeV1ExchangeRatesWithTag (tagField, tag) model =
    encodeObject (encodeV1ExchangeRatesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeV1ExchangeRatesPairs : V1ExchangeRates -> List EncodedField
encodeV1ExchangeRatesPairs model =
    let
        pairs =
            [ maybeEncodeNullable "asset_id_base" Json.Encode.string model.assetIdBase
            , maybeEncodeNullable "rates" (Json.Encode.list encodeV1ExchangeRatesRate) model.rates
            ]
    in
    pairs


encodeV1ExchangeRatesRate : V1ExchangeRatesRate -> Json.Encode.Value
encodeV1ExchangeRatesRate =
    encodeObject << encodeV1ExchangeRatesRatePairs


encodeV1ExchangeRatesRateWithTag : ( String, String ) -> V1ExchangeRatesRate -> Json.Encode.Value
encodeV1ExchangeRatesRateWithTag (tagField, tag) model =
    encodeObject (encodeV1ExchangeRatesRatePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeV1ExchangeRatesRatePairs : V1ExchangeRatesRate -> List EncodedField
encodeV1ExchangeRatesRatePairs model =
    let
        pairs =
            [ maybeEncode "time" Api.Time.encodeDateTime model.time
            , maybeEncodeNullable "asset_id_quote" Json.Encode.string model.assetIdQuote
            , maybeEncode "rate" Json.Encode.float model.rate
            ]
    in
    pairs


encodeV1ExchangeRatesTimeseriesItem : V1ExchangeRatesTimeseriesItem -> Json.Encode.Value
encodeV1ExchangeRatesTimeseriesItem =
    encodeObject << encodeV1ExchangeRatesTimeseriesItemPairs


encodeV1ExchangeRatesTimeseriesItemWithTag : ( String, String ) -> V1ExchangeRatesTimeseriesItem -> Json.Encode.Value
encodeV1ExchangeRatesTimeseriesItemWithTag (tagField, tag) model =
    encodeObject (encodeV1ExchangeRatesTimeseriesItemPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeV1ExchangeRatesTimeseriesItemPairs : V1ExchangeRatesTimeseriesItem -> List EncodedField
encodeV1ExchangeRatesTimeseriesItemPairs model =
    let
        pairs =
            [ maybeEncode "time_period_start" Api.Time.encodeDateTime model.timePeriodStart
            , maybeEncode "time_period_end" Api.Time.encodeDateTime model.timePeriodEnd
            , maybeEncodeNullable "time_open" Api.Time.encodeDateTime model.timeOpen
            , maybeEncodeNullable "time_close" Api.Time.encodeDateTime model.timeClose
            , maybeEncodeNullable "rate_open" Json.Encode.float model.rateOpen
            , maybeEncodeNullable "rate_high" Json.Encode.float model.rateHigh
            , maybeEncodeNullable "rate_low" Json.Encode.float model.rateLow
            , maybeEncodeNullable "rate_close" Json.Encode.float model.rateClose
            ]
    in
    pairs


encodeV1Icon : V1Icon -> Json.Encode.Value
encodeV1Icon =
    encodeObject << encodeV1IconPairs


encodeV1IconWithTag : ( String, String ) -> V1Icon -> Json.Encode.Value
encodeV1IconWithTag (tagField, tag) model =
    encodeObject (encodeV1IconPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeV1IconPairs : V1Icon -> List EncodedField
encodeV1IconPairs model =
    let
        pairs =
            [ maybeEncodeNullable "exchange_id" Json.Encode.string model.exchangeId
            , maybeEncodeNullable "asset_id" Json.Encode.string model.assetId
            , maybeEncodeNullable "url" Json.Encode.string model.url
            ]
    in
    pairs


encodeV1TimeseriesPeriod : V1TimeseriesPeriod -> Json.Encode.Value
encodeV1TimeseriesPeriod =
    encodeObject << encodeV1TimeseriesPeriodPairs


encodeV1TimeseriesPeriodWithTag : ( String, String ) -> V1TimeseriesPeriod -> Json.Encode.Value
encodeV1TimeseriesPeriodWithTag (tagField, tag) model =
    encodeObject (encodeV1TimeseriesPeriodPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeV1TimeseriesPeriodPairs : V1TimeseriesPeriod -> List EncodedField
encodeV1TimeseriesPeriodPairs model =
    let
        pairs =
            [ maybeEncodeNullable "period_id" Json.Encode.string model.periodId
            , maybeEncode "length_seconds" Json.Encode.int model.lengthSeconds
            , maybeEncode "length_months" Json.Encode.int model.lengthMonths
            , maybeEncodeNullable "unit_count" Json.Encode.int model.unitCount
            , maybeEncodeNullable "unit_name" Json.Encode.string model.unitName
            , maybeEncodeNullable "display_name" Json.Encode.string model.displayName
            ]
    in
    pairs


-- DECODER


v1AssetDecoder : Json.Decode.Decoder V1Asset
v1AssetDecoder =
    Json.Decode.succeed V1Asset
        |> maybeDecodeNullable "asset_id" Json.Decode.string Nothing
        |> maybeDecodeNullable "name" Json.Decode.string Nothing
        |> maybeDecode "type_is_crypto" Json.Decode.int Nothing
        |> maybeDecodeNullable "data_quote_start" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "data_quote_end" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "data_orderbook_start" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "data_orderbook_end" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "data_trade_start" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "data_trade_end" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "data_symbols_count" Json.Decode.int Nothing
        |> maybeDecodeNullable "volume_1hrs_usd" Json.Decode.float Nothing
        |> maybeDecodeNullable "volume_1day_usd" Json.Decode.float Nothing
        |> maybeDecodeNullable "volume_1mth_usd" Json.Decode.float Nothing
        |> maybeDecodeNullable "price_usd" Json.Decode.float Nothing
        |> maybeDecodeNullable "id_icon" Uuid.decoder Nothing
        |> maybeDecodeNullable "supply_current" Json.Decode.float Nothing
        |> maybeDecodeNullable "supply_total" Json.Decode.float Nothing
        |> maybeDecodeNullable "supply_max" Json.Decode.float Nothing
        |> maybeDecodeNullable "chain_addresses" (Json.Decode.list v1ChainNetworkAddressDecoder) Nothing
        |> maybeDecodeNullable "data_start" Json.Decode.string Nothing
        |> maybeDecodeNullable "data_end" Json.Decode.string Nothing


v1ChainNetworkAddressDecoder : Json.Decode.Decoder V1ChainNetworkAddress
v1ChainNetworkAddressDecoder =
    Json.Decode.succeed V1ChainNetworkAddress
        |> maybeDecodeNullable "chain_id" Json.Decode.string Nothing
        |> maybeDecodeNullable "network_id" Json.Decode.string Nothing
        |> maybeDecodeNullable "address" Json.Decode.string Nothing


v1ExchangeRateDecoder : Json.Decode.Decoder V1ExchangeRate
v1ExchangeRateDecoder =
    Json.Decode.succeed V1ExchangeRate
        |> maybeDecode "time" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "asset_id_base" Json.Decode.string Nothing
        |> maybeDecodeNullable "asset_id_quote" Json.Decode.string Nothing
        |> maybeDecode "rate" Json.Decode.float Nothing


v1ExchangeRatesDecoder : Json.Decode.Decoder V1ExchangeRates
v1ExchangeRatesDecoder =
    Json.Decode.succeed V1ExchangeRates
        |> maybeDecodeNullable "asset_id_base" Json.Decode.string Nothing
        |> maybeDecodeNullable "rates" (Json.Decode.list v1ExchangeRatesRateDecoder) Nothing


v1ExchangeRatesRateDecoder : Json.Decode.Decoder V1ExchangeRatesRate
v1ExchangeRatesRateDecoder =
    Json.Decode.succeed V1ExchangeRatesRate
        |> maybeDecode "time" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "asset_id_quote" Json.Decode.string Nothing
        |> maybeDecode "rate" Json.Decode.float Nothing


v1ExchangeRatesTimeseriesItemDecoder : Json.Decode.Decoder V1ExchangeRatesTimeseriesItem
v1ExchangeRatesTimeseriesItemDecoder =
    Json.Decode.succeed V1ExchangeRatesTimeseriesItem
        |> maybeDecode "time_period_start" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "time_period_end" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "time_open" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "time_close" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "rate_open" Json.Decode.float Nothing
        |> maybeDecodeNullable "rate_high" Json.Decode.float Nothing
        |> maybeDecodeNullable "rate_low" Json.Decode.float Nothing
        |> maybeDecodeNullable "rate_close" Json.Decode.float Nothing


v1IconDecoder : Json.Decode.Decoder V1Icon
v1IconDecoder =
    Json.Decode.succeed V1Icon
        |> maybeDecodeNullable "exchange_id" Json.Decode.string Nothing
        |> maybeDecodeNullable "asset_id" Json.Decode.string Nothing
        |> maybeDecodeNullable "url" Json.Decode.string Nothing


v1TimeseriesPeriodDecoder : Json.Decode.Decoder V1TimeseriesPeriod
v1TimeseriesPeriodDecoder =
    Json.Decode.succeed V1TimeseriesPeriod
        |> maybeDecodeNullable "period_id" Json.Decode.string Nothing
        |> maybeDecode "length_seconds" Json.Decode.int Nothing
        |> maybeDecode "length_months" Json.Decode.int Nothing
        |> maybeDecodeNullable "unit_count" Json.Decode.int Nothing
        |> maybeDecodeNullable "unit_name" Json.Decode.string Nothing
        |> maybeDecodeNullable "display_name" Json.Decode.string Nothing




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f