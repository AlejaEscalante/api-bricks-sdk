#
# Exchange Rates Historical REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents an icon.

.PARAMETER ExchangeId
Gets or sets the exchange ID associated with the icon.
.PARAMETER AssetId
Gets or sets the asset ID associated with the icon.
.PARAMETER Url
Gets or sets the URL of the icon.
.OUTPUTS

V1Icon<PSCustomObject>
#>

function Initialize-V1Icon {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExchangeId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => V1Icon' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "exchange_id" = ${ExchangeId}
            "asset_id" = ${AssetId}
            "url" = ${Url}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to V1Icon<PSCustomObject>

.DESCRIPTION

Convert from JSON to V1Icon<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

V1Icon<PSCustomObject>
#>
function ConvertFrom-JsonToV1Icon {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => V1Icon' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V1Icon
        $AllProperties = ("exchange_id", "asset_id", "url")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exchange_id"))) { #optional property not found
            $ExchangeId = $null
        } else {
            $ExchangeId = $JsonParameters.PSobject.Properties["exchange_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_id"))) { #optional property not found
            $AssetId = $null
        } else {
            $AssetId = $JsonParameters.PSobject.Properties["asset_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) { #optional property not found
            $Url = $null
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        $PSO = [PSCustomObject]@{
            "exchange_id" = ${ExchangeId}
            "asset_id" = ${AssetId}
            "url" = ${Url}
        }

        return $PSO
    }

}

