#
# Exchange Rates Historical REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Contains information about assets' chain network addresses

.PARAMETER ChainId
Gets or sets chain id
.PARAMETER NetworkId
Gets or sets network id
.PARAMETER Address
Gets or sets chain address
.OUTPUTS

V1ChainNetworkAddress<PSCustomObject>
#>

function Initialize-V1ChainNetworkAddress {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ChainId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NetworkId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Address}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => V1ChainNetworkAddress' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "chain_id" = ${ChainId}
            "network_id" = ${NetworkId}
            "address" = ${Address}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to V1ChainNetworkAddress<PSCustomObject>

.DESCRIPTION

Convert from JSON to V1ChainNetworkAddress<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

V1ChainNetworkAddress<PSCustomObject>
#>
function ConvertFrom-JsonToV1ChainNetworkAddress {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => V1ChainNetworkAddress' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V1ChainNetworkAddress
        $AllProperties = ("chain_id", "network_id", "address")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "chain_id"))) { #optional property not found
            $ChainId = $null
        } else {
            $ChainId = $JsonParameters.PSobject.Properties["chain_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "network_id"))) { #optional property not found
            $NetworkId = $null
        } else {
            $NetworkId = $JsonParameters.PSobject.Properties["network_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "address"))) { #optional property not found
            $Address = $null
        } else {
            $Address = $JsonParameters.PSobject.Properties["address"].value
        }

        $PSO = [PSCustomObject]@{
            "chain_id" = ${ChainId}
            "network_id" = ${NetworkId}
            "address" = ${Address}
        }

        return $PSO
    }

}

