/**
 * Exchange Rates Historical REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V1_ExchangeRatesTimeseriesItem.h
 *
 * Represents an item in the exchange rate timeseries.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V1_ExchangeRatesTimeseriesItem_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V1_ExchangeRatesTimeseriesItem_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents an item in the exchange rate timeseries.
/// </summary>
class  V1_ExchangeRatesTimeseriesItem
    : public ModelBase
{
public:
    V1_ExchangeRatesTimeseriesItem();
    virtual ~V1_ExchangeRatesTimeseriesItem();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// V1_ExchangeRatesTimeseriesItem members


    /// <summary>
    /// Gets or sets the start time of the period.
    /// </summary>
    utility::datetime getTimePeriodStart() const;
    bool timePeriodStartIsSet() const;
    void unsetTime_period_start();
    void setTimePeriodStart(const utility::datetime& value);

    /// <summary>
    /// Gets or sets the end time of the period.
    /// </summary>
    utility::datetime getTimePeriodEnd() const;
    bool timePeriodEndIsSet() const;
    void unsetTime_period_end();
    void setTimePeriodEnd(const utility::datetime& value);

    /// <summary>
    /// Gets or sets the opening time of the period.
    /// </summary>
    utility::datetime getTimeOpen() const;
    bool timeOpenIsSet() const;
    void unsetTime_open();
    void setTimeOpen(const utility::datetime& value);

    /// <summary>
    /// Gets or sets the closing time of the period.
    /// </summary>
    utility::datetime getTimeClose() const;
    bool timeCloseIsSet() const;
    void unsetTime_close();
    void setTimeClose(const utility::datetime& value);

    /// <summary>
    /// Gets or sets the opening rate for the period.
    /// </summary>
    double getRateOpen() const;
    bool rateOpenIsSet() const;
    void unsetRate_open();
    void setRateOpen(double value);

    /// <summary>
    /// Gets or sets the highest rate for the period.
    /// </summary>
    double getRateHigh() const;
    bool rateHighIsSet() const;
    void unsetRate_high();
    void setRateHigh(double value);

    /// <summary>
    /// Gets or sets the lowest rate for the period.
    /// </summary>
    double getRateLow() const;
    bool rateLowIsSet() const;
    void unsetRate_low();
    void setRateLow(double value);

    /// <summary>
    /// Gets or sets the closing rate for the period.
    /// </summary>
    double getRateClose() const;
    bool rateCloseIsSet() const;
    void unsetRate_close();
    void setRateClose(double value);


protected:
    utility::datetime m_Time_period_start;
    bool m_Time_period_startIsSet;

    utility::datetime m_Time_period_end;
    bool m_Time_period_endIsSet;

    utility::datetime m_Time_open;
    bool m_Time_openIsSet;

    utility::datetime m_Time_close;
    bool m_Time_closeIsSet;

    double m_Rate_open;
    bool m_Rate_openIsSet;

    double m_Rate_high;
    bool m_Rate_highIsSet;

    double m_Rate_low;
    bool m_Rate_lowIsSet;

    double m_Rate_close;
    bool m_Rate_closeIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V1_ExchangeRatesTimeseriesItem_H_ */
