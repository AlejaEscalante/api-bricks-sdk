/**
 * Exchange Rates Historical REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ExchangeRatesApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_ExchangeRatesApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_ExchangeRatesApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/V1_ExchangeRate.h"
#include "CppRestOpenAPIClient/model/V1_ExchangeRates.h"
#include "CppRestOpenAPIClient/model/V1_ExchangeRatesTimeseriesItem.h"
#include "CppRestOpenAPIClient/model/V1_TimeseriesPeriod.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  ExchangeRatesApi 
{
public:

    explicit ExchangeRatesApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~ExchangeRatesApi();

    /// <summary>
    /// Get specific rate
    /// </summary>
    /// <remarks>
    /// Retrieves the exchange rate for a specific base and quote asset at a given time or the current rate.              :::info If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements. :::
    /// </remarks>
    /// <param name="assetIdBase">Requested exchange rate base asset identifier (from the Metadata -&gt; Assets)</param>
    /// <param name="assetIdQuote">Requested exchange rate quote asset identifier (from the Metadata -&gt; Assets)</param>
    /// <param name="time">Time at which exchange rate is calculated (optional, if not supplied then current rate is returned) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V1_ExchangeRate>> get_specific_rate(
        utility::string_t assetIdBase,
        utility::string_t assetIdQuote,
        boost::optional<utility::string_t> time
    ) const;
    /// <summary>
    /// Timeseries data
    /// </summary>
    /// <remarks>
    /// Get the historical exchange rates between two assets in the form of the timeseries.
    /// </remarks>
    /// <param name="assetIdBase">Requested exchange rates base asset identifier (from the Metadata -&gt; Assets)</param>
    /// <param name="assetIdQuote">Requested exchange rates base asset identifier (from the Metadata -&gt; Assets)</param>
    /// <param name="periodId">Identifier of requested timeseries period (required, e.g. &#x60;5SEC&#x60; or &#x60;1HRS&#x60;) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeStart">Timeseries starting time in ISO 8601 (required) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeEnd">Timeseries ending time in ISO 8601 (required) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<V1_ExchangeRatesTimeseriesItem>>> v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGet(
        utility::string_t assetIdBase,
        utility::string_t assetIdQuote,
        boost::optional<utility::string_t> periodId,
        boost::optional<utility::string_t> timeStart,
        boost::optional<utility::string_t> timeEnd,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Get all current rates
    /// </summary>
    /// <remarks>
    /// Get the current exchange rate between requested asset and all other assets.              :::info If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements. :::              :::info You can invert the rates by using Y &#x3D; 1 / X equation, for example BTC/USD &#x3D; 1 / (USD/BTC); :::
    /// </remarks>
    /// <param name="assetIdBase">Requested exchange rates base asset identifier (from the Metadata -&gt; Assets)</param>
    /// <param name="filterAssetId">Comma or semicolon delimited asset identifiers used to filter response (optional) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="invert">True will invert all the rates (optional, if true then rates will be calculated as &#x60;rate &#x3D; 1 / actual_rate&#x60; eg. &#x60;USD/BTC&#x60; as &#x60;BTC/USD&#x60;) (optional, default to false)</param>
    /// <param name="time">Time for historical rates (optional) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V1_ExchangeRates>> v1ExchangerateAssetIdBaseGet(
        utility::string_t assetIdBase,
        boost::optional<utility::string_t> filterAssetId,
        boost::optional<bool> invert,
        boost::optional<utility::string_t> time
    ) const;
    /// <summary>
    /// Timeseries periods
    /// </summary>
    /// <remarks>
    /// You can also obtain historical exchange rates of any asset pair, grouped into time periods. Get full list of supported time periods available for requesting exchange rates historical timeseries data.              ## Timeseries periods Time unit | Period identifiers --- | --- Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<V1_TimeseriesPeriod>>> v1ExchangerateHistoryPeriodsGet(
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_ExchangeRatesApi_H_ */

