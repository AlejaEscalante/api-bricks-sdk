/**
 * Exchange Rates Historical REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_TimeseriesPeriod.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_TimeseriesPeriod::V1_TimeseriesPeriod()
{
    m_Period_id = utility::conversions::to_string_t("");
    m_Period_idIsSet = false;
    m_Length_seconds = 0;
    m_Length_secondsIsSet = false;
    m_Length_months = 0;
    m_Length_monthsIsSet = false;
    m_Unit_count = 0;
    m_Unit_countIsSet = false;
    m_Unit_name = utility::conversions::to_string_t("");
    m_Unit_nameIsSet = false;
    m_Display_name = utility::conversions::to_string_t("");
    m_Display_nameIsSet = false;
}

V1_TimeseriesPeriod::~V1_TimeseriesPeriod()
{
}

void V1_TimeseriesPeriod::validate()
{
    // TODO: implement validation
}

web::json::value V1_TimeseriesPeriod::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Period_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("period_id"))] = ModelBase::toJson(m_Period_id);
    }
    if(m_Length_secondsIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("length_seconds"))] = ModelBase::toJson(m_Length_seconds);
    }
    if(m_Length_monthsIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("length_months"))] = ModelBase::toJson(m_Length_months);
    }
    if(m_Unit_countIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("unit_count"))] = ModelBase::toJson(m_Unit_count);
    }
    if(m_Unit_nameIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("unit_name"))] = ModelBase::toJson(m_Unit_name);
    }
    if(m_Display_nameIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("display_name"))] = ModelBase::toJson(m_Display_name);
    }

    return val;
}

bool V1_TimeseriesPeriod::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("period_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("period_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPeriodId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPeriodId);
            setPeriodId(refVal_setPeriodId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("length_seconds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("length_seconds")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLengthSeconds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLengthSeconds);
            setLengthSeconds(refVal_setLengthSeconds);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("length_months"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("length_months")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLengthMonths;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLengthMonths);
            setLengthMonths(refVal_setLengthMonths);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("unit_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("unit_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUnitCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUnitCount);
            setUnitCount(refVal_setUnitCount);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("unit_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("unit_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUnitName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUnitName);
            setUnitName(refVal_setUnitName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("display_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("display_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDisplayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDisplayName);
            setDisplayName(refVal_setDisplayName);
            
        }
    }
    return ok;
}

void V1_TimeseriesPeriod::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Period_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("period_id")), m_Period_id));
    }
    if(m_Length_secondsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("length_seconds")), m_Length_seconds));
    }
    if(m_Length_monthsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("length_months")), m_Length_months));
    }
    if(m_Unit_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("unit_count")), m_Unit_count));
    }
    if(m_Unit_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("unit_name")), m_Unit_name));
    }
    if(m_Display_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("display_name")), m_Display_name));
    }
}

bool V1_TimeseriesPeriod::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("period_id"))))
    {
        utility::string_t refVal_setPeriodId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("period_id"))), refVal_setPeriodId );
        setPeriodId(refVal_setPeriodId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("length_seconds"))))
    {
        int32_t refVal_setLengthSeconds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("length_seconds"))), refVal_setLengthSeconds );
        setLengthSeconds(refVal_setLengthSeconds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("length_months"))))
    {
        int32_t refVal_setLengthMonths;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("length_months"))), refVal_setLengthMonths );
        setLengthMonths(refVal_setLengthMonths);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("unit_count"))))
    {
        int32_t refVal_setUnitCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("unit_count"))), refVal_setUnitCount );
        setUnitCount(refVal_setUnitCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("unit_name"))))
    {
        utility::string_t refVal_setUnitName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("unit_name"))), refVal_setUnitName );
        setUnitName(refVal_setUnitName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("display_name"))))
    {
        utility::string_t refVal_setDisplayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("display_name"))), refVal_setDisplayName );
        setDisplayName(refVal_setDisplayName);
    }
    return ok;
}


utility::string_t V1_TimeseriesPeriod::getPeriodId() const
{
    return m_Period_id;
}


void V1_TimeseriesPeriod::setPeriodId(const utility::string_t& value)
{
    m_Period_id = value;
    m_Period_idIsSet = true;
}

bool V1_TimeseriesPeriod::periodIdIsSet() const
{
    return m_Period_idIsSet;
}

void V1_TimeseriesPeriod::unsetPeriod_id()
{
    m_Period_idIsSet = false;
}
int32_t V1_TimeseriesPeriod::getLengthSeconds() const
{
    return m_Length_seconds;
}

void V1_TimeseriesPeriod::setLengthSeconds(int32_t value)
{
    m_Length_seconds = value;
    m_Length_secondsIsSet = true;
}

bool V1_TimeseriesPeriod::lengthSecondsIsSet() const
{
    return m_Length_secondsIsSet;
}

void V1_TimeseriesPeriod::unsetLength_seconds()
{
    m_Length_secondsIsSet = false;
}
int32_t V1_TimeseriesPeriod::getLengthMonths() const
{
    return m_Length_months;
}

void V1_TimeseriesPeriod::setLengthMonths(int32_t value)
{
    m_Length_months = value;
    m_Length_monthsIsSet = true;
}

bool V1_TimeseriesPeriod::lengthMonthsIsSet() const
{
    return m_Length_monthsIsSet;
}

void V1_TimeseriesPeriod::unsetLength_months()
{
    m_Length_monthsIsSet = false;
}
int32_t V1_TimeseriesPeriod::getUnitCount() const
{
    return m_Unit_count;
}

void V1_TimeseriesPeriod::setUnitCount(int32_t value)
{
    m_Unit_count = value;
    m_Unit_countIsSet = true;
}

bool V1_TimeseriesPeriod::unitCountIsSet() const
{
    return m_Unit_countIsSet;
}

void V1_TimeseriesPeriod::unsetUnit_count()
{
    m_Unit_countIsSet = false;
}
utility::string_t V1_TimeseriesPeriod::getUnitName() const
{
    return m_Unit_name;
}


void V1_TimeseriesPeriod::setUnitName(const utility::string_t& value)
{
    m_Unit_name = value;
    m_Unit_nameIsSet = true;
}

bool V1_TimeseriesPeriod::unitNameIsSet() const
{
    return m_Unit_nameIsSet;
}

void V1_TimeseriesPeriod::unsetUnit_name()
{
    m_Unit_nameIsSet = false;
}
utility::string_t V1_TimeseriesPeriod::getDisplayName() const
{
    return m_Display_name;
}


void V1_TimeseriesPeriod::setDisplayName(const utility::string_t& value)
{
    m_Display_name = value;
    m_Display_nameIsSet = true;
}

bool V1_TimeseriesPeriod::displayNameIsSet() const
{
    return m_Display_nameIsSet;
}

void V1_TimeseriesPeriod::unsetDisplay_name()
{
    m_Display_nameIsSet = false;
}

}
}
}
}


