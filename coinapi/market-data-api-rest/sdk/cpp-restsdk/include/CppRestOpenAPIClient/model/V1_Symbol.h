/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V1_Symbol.h
 *
 * Represents a symbol data model.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V1_Symbol_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V1_Symbol_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents a symbol data model.
/// </summary>
class  V1_Symbol
    : public ModelBase
{
public:
    V1_Symbol();
    virtual ~V1_Symbol();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// V1_Symbol members


    /// <summary>
    /// The symbol identifier.
    /// </summary>
    utility::string_t getSymbolId() const;
    bool symbolIdIsSet() const;
    void unsetSymbol_id();
    void setSymbolId(const utility::string_t& value);

    /// <summary>
    /// The exchange identifier.
    /// </summary>
    utility::string_t getExchangeId() const;
    bool exchangeIdIsSet() const;
    void unsetExchange_id();
    void setExchangeId(const utility::string_t& value);

    /// <summary>
    /// The symbol type.
    /// </summary>
    utility::string_t getSymbolType() const;
    bool symbolTypeIsSet() const;
    void unsetSymbol_type();
    void setSymbolType(const utility::string_t& value);

    /// <summary>
    /// The base asset identifier.
    /// </summary>
    utility::string_t getAssetIdBase() const;
    bool assetIdBaseIsSet() const;
    void unsetAsset_id_base();
    void setAssetIdBase(const utility::string_t& value);

    /// <summary>
    /// The quote asset identifier.
    /// </summary>
    utility::string_t getAssetIdQuote() const;
    bool assetIdQuoteIsSet() const;
    void unsetAsset_id_quote();
    void setAssetIdQuote(const utility::string_t& value);

    /// <summary>
    /// The unit asset identifier.
    /// </summary>
    utility::string_t getAssetIdUnit() const;
    bool assetIdUnitIsSet() const;
    void unsetAsset_id_unit();
    void setAssetIdUnit(const utility::string_t& value);

    /// <summary>
    /// The contract unit for futures.
    /// </summary>
    double getFutureContractUnit() const;
    bool futureContractUnitIsSet() const;
    void unsetFuture_contract_unit();
    void setFutureContractUnit(double value);

    /// <summary>
    /// The asset used as the unit for futures contract.
    /// </summary>
    utility::string_t getFutureContractUnitAsset() const;
    bool futureContractUnitAssetIsSet() const;
    void unsetFuture_contract_unit_asset();
    void setFutureContractUnitAsset(const utility::string_t& value);

    /// <summary>
    /// The future delivery time for futures contract.
    /// </summary>
    utility::datetime getFutureDeliveryTime() const;
    bool futureDeliveryTimeIsSet() const;
    void unsetFuture_delivery_time();
    void setFutureDeliveryTime(const utility::datetime& value);

    /// <summary>
    /// Indicates whether the option type is a call.
    /// </summary>
    bool isOptionTypeIsCall() const;
    bool optionTypeIsCallIsSet() const;
    void unsetOption_type_is_call();
    void setOptionTypeIsCall(bool value);

    /// <summary>
    /// The strike price for options.
    /// </summary>
    double getOptionStrikePrice() const;
    bool optionStrikePriceIsSet() const;
    void unsetOption_strike_price();
    void setOptionStrikePrice(double value);

    /// <summary>
    /// The contract unit for options.
    /// </summary>
    double getOptionContractUnit() const;
    bool optionContractUnitIsSet() const;
    void unsetOption_contract_unit();
    void setOptionContractUnit(double value);

    /// <summary>
    /// The exercise style for options.
    /// </summary>
    utility::string_t getOptionExerciseStyle() const;
    bool optionExerciseStyleIsSet() const;
    void unsetOption_exercise_style();
    void setOptionExerciseStyle(const utility::string_t& value);

    /// <summary>
    /// The expiration time for options.
    /// </summary>
    utility::datetime getOptionExpirationTime() const;
    bool optionExpirationTimeIsSet() const;
    void unsetOption_expiration_time();
    void setOptionExpirationTime(const utility::datetime& value);

    /// <summary>
    /// The delivery time for contracts.
    /// </summary>
    utility::datetime getContractDeliveryTime() const;
    bool contractDeliveryTimeIsSet() const;
    void unsetContract_delivery_time();
    void setContractDeliveryTime(const utility::datetime& value);

    /// <summary>
    /// The contract unit for contracts.
    /// </summary>
    double getContractUnit() const;
    bool contractUnitIsSet() const;
    void unsetContract_unit();
    void setContractUnit(double value);

    /// <summary>
    /// The asset used as the unit for contracts.
    /// </summary>
    utility::string_t getContractUnitAsset() const;
    bool contractUnitAssetIsSet() const;
    void unsetContract_unit_asset();
    void setContractUnitAsset(const utility::string_t& value);

    /// <summary>
    /// The contract identifier.
    /// </summary>
    utility::string_t getContractId() const;
    bool contractIdIsSet() const;
    void unsetContract_id();
    void setContractId(const utility::string_t& value);

    /// <summary>
    /// The display name of the contract.
    /// </summary>
    utility::string_t getContractDisplayName() const;
    bool contractDisplayNameIsSet() const;
    void unsetContract_display_name();
    void setContractDisplayName(const utility::string_t& value);

    /// <summary>
    /// The display description of the contract.
    /// </summary>
    utility::string_t getContractDisplayDescription() const;
    bool contractDisplayDescriptionIsSet() const;
    void unsetContract_display_description();
    void setContractDisplayDescription(const utility::string_t& value);

    utility::string_t getDataStart() const;
    bool dataStartIsSet() const;
    void unsetData_start();
    void setDataStart(const utility::string_t& value);

    utility::string_t getDataEnd() const;
    bool dataEndIsSet() const;
    void unsetData_end();
    void setDataEnd(const utility::string_t& value);

    /// <summary>
    /// The start date of quote data.
    /// </summary>
    utility::datetime getDataQuoteStart() const;
    bool dataQuoteStartIsSet() const;
    void unsetData_quote_start();
    void setDataQuoteStart(const utility::datetime& value);

    /// <summary>
    /// The end date of quote data.
    /// </summary>
    utility::datetime getDataQuoteEnd() const;
    bool dataQuoteEndIsSet() const;
    void unsetData_quote_end();
    void setDataQuoteEnd(const utility::datetime& value);

    /// <summary>
    /// The start date of order book data.
    /// </summary>
    utility::datetime getDataOrderbookStart() const;
    bool dataOrderbookStartIsSet() const;
    void unsetData_orderbook_start();
    void setDataOrderbookStart(const utility::datetime& value);

    /// <summary>
    /// The end date of order book data.
    /// </summary>
    utility::datetime getDataOrderbookEnd() const;
    bool dataOrderbookEndIsSet() const;
    void unsetData_orderbook_end();
    void setDataOrderbookEnd(const utility::datetime& value);

    /// <summary>
    /// The start date of trade data.
    /// </summary>
    utility::datetime getDataTradeStart() const;
    bool dataTradeStartIsSet() const;
    void unsetData_trade_start();
    void setDataTradeStart(const utility::datetime& value);

    /// <summary>
    /// The end date of trade data.
    /// </summary>
    utility::datetime getDataTradeEnd() const;
    bool dataTradeEndIsSet() const;
    void unsetData_trade_end();
    void setDataTradeEnd(const utility::datetime& value);

    /// <summary>
    /// The index identifier.
    /// </summary>
    utility::string_t getIndexId() const;
    bool indexIdIsSet() const;
    void unsetIndex_id();
    void setIndexId(const utility::string_t& value);

    /// <summary>
    /// The display name of the index.
    /// </summary>
    utility::string_t getIndexDisplayName() const;
    bool indexDisplayNameIsSet() const;
    void unsetIndex_display_name();
    void setIndexDisplayName(const utility::string_t& value);

    /// <summary>
    /// The display description of the index.
    /// </summary>
    utility::string_t getIndexDisplayDescription() const;
    bool indexDisplayDescriptionIsSet() const;
    void unsetIndex_display_description();
    void setIndexDisplayDescription(const utility::string_t& value);

    /// <summary>
    /// The volume in the last 1 hour.
    /// </summary>
    double getVolume1hrs() const;
    bool volume1hrsIsSet() const;
    void unsetVolume_1hrs();
    void setVolume1hrs(double value);

    /// <summary>
    /// The volume in USD in the last 1 hour.
    /// </summary>
    double getVolume1hrsUsd() const;
    bool volume1hrsUsdIsSet() const;
    void unsetVolume_1hrs_usd();
    void setVolume1hrsUsd(double value);

    /// <summary>
    /// The volume in the last 1 day.
    /// </summary>
    double getVolume1day() const;
    bool volume1dayIsSet() const;
    void unsetVolume_1day();
    void setVolume1day(double value);

    /// <summary>
    /// The volume in USD in the last 1 day.
    /// </summary>
    double getVolume1dayUsd() const;
    bool volume1dayUsdIsSet() const;
    void unsetVolume_1day_usd();
    void setVolume1dayUsd(double value);

    /// <summary>
    /// The volume in the last 1 month.
    /// </summary>
    double getVolume1mth() const;
    bool volume1mthIsSet() const;
    void unsetVolume_1mth();
    void setVolume1mth(double value);

    /// <summary>
    /// The volume in USD in the last 1 month.
    /// </summary>
    double getVolume1mthUsd() const;
    bool volume1mthUsdIsSet() const;
    void unsetVolume_1mth_usd();
    void setVolume1mthUsd(double value);

    /// <summary>
    /// The price.
    /// </summary>
    double getPrice() const;
    bool priceIsSet() const;
    void unsetPrice();
    void setPrice(double value);

    /// <summary>
    /// The symbol identifier in the exchange.
    /// </summary>
    utility::string_t getSymbolIdExchange() const;
    bool symbolIdExchangeIsSet() const;
    void unsetSymbol_id_exchange();
    void setSymbolIdExchange(const utility::string_t& value);

    /// <summary>
    /// The base asset identifier in the exchange.
    /// </summary>
    utility::string_t getAssetIdBaseExchange() const;
    bool assetIdBaseExchangeIsSet() const;
    void unsetAsset_id_base_exchange();
    void setAssetIdBaseExchange(const utility::string_t& value);

    /// <summary>
    /// The quote asset identifier in the exchange.
    /// </summary>
    utility::string_t getAssetIdQuoteExchange() const;
    bool assetIdQuoteExchangeIsSet() const;
    void unsetAsset_id_quote_exchange();
    void setAssetIdQuoteExchange(const utility::string_t& value);

    /// <summary>
    /// The price precision.
    /// </summary>
    double getPricePrecision() const;
    bool pricePrecisionIsSet() const;
    void unsetPrice_precision();
    void setPricePrecision(double value);

    /// <summary>
    /// The size precision.
    /// </summary>
    double getSizePrecision() const;
    bool sizePrecisionIsSet() const;
    void unsetSize_precision();
    void setSizePrecision(double value);

    /// <summary>
    /// Not normalized raw kvp data.
    /// </summary>
    std::map<utility::string_t, utility::string_t> getRawKvp() const;
    bool rawKvpIsSet() const;
    void unsetRaw_kvp();
    void setRawKvp(const std::map<utility::string_t, utility::string_t>& value);

    /// <summary>
    /// Volume unit in USD.
    /// </summary>
    double getVolumeToUsd() const;
    bool volumeToUsdIsSet() const;
    void unsetVolume_to_usd();
    void setVolumeToUsd(double value);


protected:
    utility::string_t m_Symbol_id;
    bool m_Symbol_idIsSet;

    utility::string_t m_Exchange_id;
    bool m_Exchange_idIsSet;

    utility::string_t m_Symbol_type;
    bool m_Symbol_typeIsSet;

    utility::string_t m_Asset_id_base;
    bool m_Asset_id_baseIsSet;

    utility::string_t m_Asset_id_quote;
    bool m_Asset_id_quoteIsSet;

    utility::string_t m_Asset_id_unit;
    bool m_Asset_id_unitIsSet;

    double m_Future_contract_unit;
    bool m_Future_contract_unitIsSet;

    utility::string_t m_Future_contract_unit_asset;
    bool m_Future_contract_unit_assetIsSet;

    utility::datetime m_Future_delivery_time;
    bool m_Future_delivery_timeIsSet;

    bool m_Option_type_is_call;
    bool m_Option_type_is_callIsSet;

    double m_Option_strike_price;
    bool m_Option_strike_priceIsSet;

    double m_Option_contract_unit;
    bool m_Option_contract_unitIsSet;

    utility::string_t m_Option_exercise_style;
    bool m_Option_exercise_styleIsSet;

    utility::datetime m_Option_expiration_time;
    bool m_Option_expiration_timeIsSet;

    utility::datetime m_Contract_delivery_time;
    bool m_Contract_delivery_timeIsSet;

    double m_Contract_unit;
    bool m_Contract_unitIsSet;

    utility::string_t m_Contract_unit_asset;
    bool m_Contract_unit_assetIsSet;

    utility::string_t m_Contract_id;
    bool m_Contract_idIsSet;

    utility::string_t m_Contract_display_name;
    bool m_Contract_display_nameIsSet;

    utility::string_t m_Contract_display_description;
    bool m_Contract_display_descriptionIsSet;

    utility::string_t m_Data_start;
    bool m_Data_startIsSet;

    utility::string_t m_Data_end;
    bool m_Data_endIsSet;

    utility::datetime m_Data_quote_start;
    bool m_Data_quote_startIsSet;

    utility::datetime m_Data_quote_end;
    bool m_Data_quote_endIsSet;

    utility::datetime m_Data_orderbook_start;
    bool m_Data_orderbook_startIsSet;

    utility::datetime m_Data_orderbook_end;
    bool m_Data_orderbook_endIsSet;

    utility::datetime m_Data_trade_start;
    bool m_Data_trade_startIsSet;

    utility::datetime m_Data_trade_end;
    bool m_Data_trade_endIsSet;

    utility::string_t m_Index_id;
    bool m_Index_idIsSet;

    utility::string_t m_Index_display_name;
    bool m_Index_display_nameIsSet;

    utility::string_t m_Index_display_description;
    bool m_Index_display_descriptionIsSet;

    double m_Volume_1hrs;
    bool m_Volume_1hrsIsSet;

    double m_Volume_1hrs_usd;
    bool m_Volume_1hrs_usdIsSet;

    double m_Volume_1day;
    bool m_Volume_1dayIsSet;

    double m_Volume_1day_usd;
    bool m_Volume_1day_usdIsSet;

    double m_Volume_1mth;
    bool m_Volume_1mthIsSet;

    double m_Volume_1mth_usd;
    bool m_Volume_1mth_usdIsSet;

    double m_Price;
    bool m_PriceIsSet;

    utility::string_t m_Symbol_id_exchange;
    bool m_Symbol_id_exchangeIsSet;

    utility::string_t m_Asset_id_base_exchange;
    bool m_Asset_id_base_exchangeIsSet;

    utility::string_t m_Asset_id_quote_exchange;
    bool m_Asset_id_quote_exchangeIsSet;

    double m_Price_precision;
    bool m_Price_precisionIsSet;

    double m_Size_precision;
    bool m_Size_precisionIsSet;

    std::map<utility::string_t, utility::string_t> m_Raw_kvp;
    bool m_Raw_kvpIsSet;

    double m_Volume_to_usd;
    bool m_Volume_to_usdIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V1_Symbol_H_ */
