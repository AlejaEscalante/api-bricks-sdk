/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V1_QuoteTrade.h
 *
 * Represents a quote trade data model.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V1_QuoteTrade_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V1_QuoteTrade_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/V1_LastTrade.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class V1_LastTrade;


/// <summary>
/// Represents a quote trade data model.
/// </summary>
class  V1_QuoteTrade
    : public ModelBase
{
public:
    V1_QuoteTrade();
    virtual ~V1_QuoteTrade();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// V1_QuoteTrade members


    /// <summary>
    /// The symbol identifier.
    /// </summary>
    utility::string_t getSymbolId() const;
    bool symbolIdIsSet() const;
    void unsetSymbol_id();
    void setSymbolId(const utility::string_t& value);

    /// <summary>
    /// The exchange time of the quote trade.
    /// </summary>
    utility::datetime getTimeExchange() const;
    bool timeExchangeIsSet() const;
    void unsetTime_exchange();
    void setTimeExchange(const utility::datetime& value);

    /// <summary>
    /// The CoinAPI time when the quote trade was received.
    /// </summary>
    utility::datetime getTimeCoinapi() const;
    bool timeCoinapiIsSet() const;
    void unsetTime_coinapi();
    void setTimeCoinapi(const utility::datetime& value);

    /// <summary>
    /// The best asking price.
    /// </summary>
    double getAskPrice() const;
    bool askPriceIsSet() const;
    void unsetAsk_price();
    void setAskPrice(double value);

    /// <summary>
    /// The volume resting on the best ask. If the value is equal to zero, then the size is unknown.
    /// </summary>
    double getAskSize() const;
    bool askSizeIsSet() const;
    void unsetAsk_size();
    void setAskSize(double value);

    /// <summary>
    /// The best bidding price.
    /// </summary>
    double getBidPrice() const;
    bool bidPriceIsSet() const;
    void unsetBid_price();
    void setBidPrice(double value);

    /// <summary>
    /// The volume resting on the best bid. If the value is equal to zero, then the size is unknown.
    /// </summary>
    double getBidSize() const;
    bool bidSizeIsSet() const;
    void unsetBid_size();
    void setBidSize(double value);

    std::shared_ptr<V1_LastTrade> getLastTrade() const;
    bool lastTradeIsSet() const;
    void unsetLast_trade();
    void setLastTrade(const std::shared_ptr<V1_LastTrade>& value);


protected:
    utility::string_t m_Symbol_id;
    bool m_Symbol_idIsSet;

    utility::datetime m_Time_exchange;
    bool m_Time_exchangeIsSet;

    utility::datetime m_Time_coinapi;
    bool m_Time_coinapiIsSet;

    double m_Ask_price;
    bool m_Ask_priceIsSet;

    double m_Ask_size;
    bool m_Ask_sizeIsSet;

    double m_Bid_price;
    bool m_Bid_priceIsSet;

    double m_Bid_size;
    bool m_Bid_sizeIsSet;

    std::shared_ptr<V1_LastTrade> m_Last_trade;
    bool m_Last_tradeIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V1_QuoteTrade_H_ */
