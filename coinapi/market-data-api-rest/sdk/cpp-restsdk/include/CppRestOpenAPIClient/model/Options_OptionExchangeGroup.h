/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Options_OptionExchangeGroup.h
 *
 * Represents an option exchange group data model.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Options_OptionExchangeGroup_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Options_OptionExchangeGroup_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/Options_Strike.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Options_Strike;


/// <summary>
/// Represents an option exchange group data model.
/// </summary>
class  Options_OptionExchangeGroup
    : public ModelBase
{
public:
    Options_OptionExchangeGroup();
    virtual ~Options_OptionExchangeGroup();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Options_OptionExchangeGroup members


    /// <summary>
    /// The base asset identifier.
    /// </summary>
    utility::string_t getAssetIdBase() const;
    bool assetIdBaseIsSet() const;
    void unsetAsset_id_base();
    void setAssetIdBase(const utility::string_t& value);

    /// <summary>
    /// The quote asset identifier.
    /// </summary>
    utility::string_t getAssetIdQuote() const;
    bool assetIdQuoteIsSet() const;
    void unsetAsset_id_quote();
    void setAssetIdQuote(const utility::string_t& value);

    /// <summary>
    /// The underlying price of the option.
    /// </summary>
    double getUnderlyingPrice() const;
    bool underlyingPriceIsSet() const;
    void unsetUnderlying_price();
    void setUnderlyingPrice(double value);

    /// <summary>
    /// The expiration time of the option.
    /// </summary>
    utility::datetime getTimeExpiration() const;
    bool timeExpirationIsSet() const;
    void unsetTime_expiration();
    void setTimeExpiration(const utility::datetime& value);

    /// <summary>
    /// The list of strikes available.
    /// </summary>
    std::vector<std::shared_ptr<Options_Strike>> getStrikes() const;
    bool strikesIsSet() const;
    void unsetStrikes();
    void setStrikes(const std::vector<std::shared_ptr<Options_Strike>>& value);


protected:
    utility::string_t m_Asset_id_base;
    bool m_Asset_id_baseIsSet;

    utility::string_t m_Asset_id_quote;
    bool m_Asset_id_quoteIsSet;

    double m_Underlying_price;
    bool m_Underlying_priceIsSet;

    utility::datetime m_Time_expiration;
    bool m_Time_expirationIsSet;

    std::vector<std::shared_ptr<Options_Strike>> m_Strikes;
    bool m_StrikesIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Options_OptionExchangeGroup_H_ */
