/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V1_ListingItem.h
 *
 * Represents a listing item.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V1_ListingItem_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V1_ListingItem_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents a listing item.
/// </summary>
class  V1_ListingItem
    : public ModelBase
{
public:
    V1_ListingItem();
    virtual ~V1_ListingItem();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// V1_ListingItem members


    /// <summary>
    /// Gets or sets the metric ID.
    /// </summary>
    utility::string_t getMetricId() const;
    bool metricIdIsSet() const;
    void unsetMetric_id();
    void setMetricId(const utility::string_t& value);

    /// <summary>
    /// Gets or sets the symbol ID.
    /// </summary>
    utility::string_t getSymbolId() const;
    bool symbolIdIsSet() const;
    void unsetSymbol_id();
    void setSymbolId(const utility::string_t& value);

    /// <summary>
    /// Gets or sets the symbol ID from the exchange.
    /// </summary>
    utility::string_t getSymbolIdExternal() const;
    bool symbolIdExternalIsSet() const;
    void unsetSymbol_id_external();
    void setSymbolIdExternal(const utility::string_t& value);

    /// <summary>
    /// Gets or sets the exchange ID.
    /// </summary>
    utility::string_t getExchangeId() const;
    bool exchangeIdIsSet() const;
    void unsetExchange_id();
    void setExchangeId(const utility::string_t& value);

    /// <summary>
    /// Gets or sets the asset ID.
    /// </summary>
    utility::string_t getAssetId() const;
    bool assetIdIsSet() const;
    void unsetAsset_id();
    void setAssetId(const utility::string_t& value);

    /// <summary>
    /// Gets or sets the asset ID from the exchange.
    /// </summary>
    utility::string_t getAssetIdExternal() const;
    bool assetIdExternalIsSet() const;
    void unsetAsset_id_external();
    void setAssetIdExternal(const utility::string_t& value);

    /// <summary>
    /// Gets or sets the chain id.
    /// </summary>
    utility::string_t getChainId() const;
    bool chainIdIsSet() const;
    void unsetChain_id();
    void setChainId(const utility::string_t& value);

    /// <summary>
    /// Gets or sets the network id.
    /// </summary>
    utility::string_t getNetworkId() const;
    bool networkIdIsSet() const;
    void unsetNetwork_id();
    void setNetworkId(const utility::string_t& value);


protected:
    utility::string_t m_Metric_id;
    bool m_Metric_idIsSet;

    utility::string_t m_Symbol_id;
    bool m_Symbol_idIsSet;

    utility::string_t m_Symbol_id_external;
    bool m_Symbol_id_externalIsSet;

    utility::string_t m_Exchange_id;
    bool m_Exchange_idIsSet;

    utility::string_t m_Asset_id;
    bool m_Asset_idIsSet;

    utility::string_t m_Asset_id_external;
    bool m_Asset_id_externalIsSet;

    utility::string_t m_Chain_id;
    bool m_Chain_idIsSet;

    utility::string_t m_Network_id;
    bool m_Network_idIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V1_ListingItem_H_ */
