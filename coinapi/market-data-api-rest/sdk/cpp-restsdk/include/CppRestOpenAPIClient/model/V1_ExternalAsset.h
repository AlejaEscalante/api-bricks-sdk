/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V1_ExternalAsset.h
 *
 * Represents an external asset with description.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V1_ExternalAsset_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V1_ExternalAsset_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents an external asset with description.
/// </summary>
class  V1_ExternalAsset
    : public ModelBase
{
public:
    V1_ExternalAsset();
    virtual ~V1_ExternalAsset();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// V1_ExternalAsset members


    /// <summary>
    /// Gets or sets the asset identifier.
    /// </summary>
    utility::string_t getAssetId() const;
    bool assetIdIsSet() const;
    void unsetAsset_id();
    void setAssetId(const utility::string_t& value);

    /// <summary>
    /// Gets or sets the description of the asset.
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();
    void setDescription(const utility::string_t& value);

    /// <summary>
    /// Gets or sets the type/category of the asset.
    /// </summary>
    utility::string_t getAssetType() const;
    bool assetTypeIsSet() const;
    void unsetAsset_type();
    void setAssetType(const utility::string_t& value);


protected:
    utility::string_t m_Asset_id;
    bool m_Asset_idIsSet;

    utility::string_t m_Description;
    bool m_DescriptionIsSet;

    utility::string_t m_Asset_type;
    bool m_Asset_typeIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V1_ExternalAsset_H_ */
