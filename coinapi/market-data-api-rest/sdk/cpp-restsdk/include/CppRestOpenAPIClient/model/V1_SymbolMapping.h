/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V1_SymbolMapping.h
 *
 * Represents symbol mapping information for exchange symbols.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V1_SymbolMapping_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V1_SymbolMapping_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents symbol mapping information for exchange symbols.
/// </summary>
class  V1_SymbolMapping
    : public ModelBase
{
public:
    V1_SymbolMapping();
    virtual ~V1_SymbolMapping();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// V1_SymbolMapping members


    /// <summary>
    /// The symbol ID.
    /// </summary>
    utility::string_t getSymbolId() const;
    bool symbolIdIsSet() const;
    void unsetSymbol_id();
    void setSymbolId(const utility::string_t& value);

    /// <summary>
    /// The exchange-specific symbol ID.
    /// </summary>
    utility::string_t getSymbolIdExchange() const;
    bool symbolIdExchangeIsSet() const;
    void unsetSymbol_id_exchange();
    void setSymbolIdExchange(const utility::string_t& value);

    /// <summary>
    /// The CoinAPI DataInfo ID.
    /// </summary>
    int32_t getCoinapiDatainfoId() const;
    bool coinapiDatainfoIdIsSet() const;
    void unsetCoinapi_datainfo_id();
    void setCoinapiDatainfoId(int32_t value);

    /// <summary>
    /// The exchange-specific base asset ID.
    /// </summary>
    utility::string_t getAssetIdBaseExchange() const;
    bool assetIdBaseExchangeIsSet() const;
    void unsetAsset_id_base_exchange();
    void setAssetIdBaseExchange(const utility::string_t& value);

    /// <summary>
    /// The exchange-specific quote asset ID.
    /// </summary>
    utility::string_t getAssetIdQuoteExchange() const;
    bool assetIdQuoteExchangeIsSet() const;
    void unsetAsset_id_quote_exchange();
    void setAssetIdQuoteExchange(const utility::string_t& value);

    /// <summary>
    /// The base asset ID.
    /// </summary>
    utility::string_t getAssetIdBase() const;
    bool assetIdBaseIsSet() const;
    void unsetAsset_id_base();
    void setAssetIdBase(const utility::string_t& value);

    /// <summary>
    /// The quote asset ID.
    /// </summary>
    utility::string_t getAssetIdQuote() const;
    bool assetIdQuoteIsSet() const;
    void unsetAsset_id_quote();
    void setAssetIdQuote(const utility::string_t& value);

    /// <summary>
    /// The price precision.
    /// </summary>
    double getPricePrecision() const;
    bool pricePrecisionIsSet() const;
    void unsetPrice_precision();
    void setPricePrecision(double value);

    /// <summary>
    /// The size precision.
    /// </summary>
    double getSizePrecision() const;
    bool sizePrecisionIsSet() const;
    void unsetSize_precision();
    void setSizePrecision(double value);


protected:
    utility::string_t m_Symbol_id;
    bool m_Symbol_idIsSet;

    utility::string_t m_Symbol_id_exchange;
    bool m_Symbol_id_exchangeIsSet;

    int32_t m_Coinapi_datainfo_id;
    bool m_Coinapi_datainfo_idIsSet;

    utility::string_t m_Asset_id_base_exchange;
    bool m_Asset_id_base_exchangeIsSet;

    utility::string_t m_Asset_id_quote_exchange;
    bool m_Asset_id_quote_exchangeIsSet;

    utility::string_t m_Asset_id_base;
    bool m_Asset_id_baseIsSet;

    utility::string_t m_Asset_id_quote;
    bool m_Asset_id_quoteIsSet;

    double m_Price_precision;
    bool m_Price_precisionIsSet;

    double m_Size_precision;
    bool m_Size_precisionIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V1_SymbolMapping_H_ */
