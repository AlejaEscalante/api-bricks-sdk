/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V1_Exchange.h
 *
 * Represents an exchange.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V1_Exchange_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V1_Exchange_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/V1_Icon.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class V1_Icon;


/// <summary>
/// Represents an exchange.
/// </summary>
class  V1_Exchange
    : public ModelBase
{
public:
    V1_Exchange();
    virtual ~V1_Exchange();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// V1_Exchange members


    /// <summary>
    /// Gets or sets the exchange ID.
    /// </summary>
    utility::string_t getExchangeId() const;
    bool exchangeIdIsSet() const;
    void unsetExchange_id();
    void setExchangeId(const utility::string_t& value);

    /// <summary>
    /// Gets or sets the website URL of the exchange.
    /// </summary>
    utility::string_t getWebsite() const;
    bool websiteIsSet() const;
    void unsetWebsite();
    void setWebsite(const utility::string_t& value);

    /// <summary>
    /// Gets or sets the name of the exchange.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();
    void setName(const utility::string_t& value);

    utility::string_t getDataStart() const;
    bool dataStartIsSet() const;
    void unsetData_start();
    void setDataStart(const utility::string_t& value);

    utility::string_t getDataEnd() const;
    bool dataEndIsSet() const;
    void unsetData_end();
    void setDataEnd(const utility::string_t& value);

    /// <summary>
    /// Gets or sets the start date of quote data.
    /// </summary>
    utility::datetime getDataQuoteStart() const;
    bool dataQuoteStartIsSet() const;
    void unsetData_quote_start();
    void setDataQuoteStart(const utility::datetime& value);

    /// <summary>
    /// Gets or sets the end date of quote data.
    /// </summary>
    utility::datetime getDataQuoteEnd() const;
    bool dataQuoteEndIsSet() const;
    void unsetData_quote_end();
    void setDataQuoteEnd(const utility::datetime& value);

    /// <summary>
    /// Gets or sets the start date of order book data.
    /// </summary>
    utility::datetime getDataOrderbookStart() const;
    bool dataOrderbookStartIsSet() const;
    void unsetData_orderbook_start();
    void setDataOrderbookStart(const utility::datetime& value);

    /// <summary>
    /// Gets or sets the end date of order book data.
    /// </summary>
    utility::datetime getDataOrderbookEnd() const;
    bool dataOrderbookEndIsSet() const;
    void unsetData_orderbook_end();
    void setDataOrderbookEnd(const utility::datetime& value);

    /// <summary>
    /// Gets or sets the start date of trade data.
    /// </summary>
    utility::datetime getDataTradeStart() const;
    bool dataTradeStartIsSet() const;
    void unsetData_trade_start();
    void setDataTradeStart(const utility::datetime& value);

    /// <summary>
    /// Gets or sets the end date of trade data.
    /// </summary>
    utility::datetime getDataTradeEnd() const;
    bool dataTradeEndIsSet() const;
    void unsetData_trade_end();
    void setDataTradeEnd(const utility::datetime& value);

    /// <summary>
    /// Gets or sets the number of trades.
    /// </summary>
    int64_t getDataTradeCount() const;
    bool dataTradeCountIsSet() const;
    void unsetData_trade_count();
    void setDataTradeCount(int64_t value);

    /// <summary>
    /// Gets or sets the number of symbols.
    /// </summary>
    int64_t getDataSymbolsCount() const;
    bool dataSymbolsCountIsSet() const;
    void unsetData_symbols_count();
    void setDataSymbolsCount(int64_t value);

    /// <summary>
    /// Gets or sets the USD volume in the last 1 hour.
    /// </summary>
    double getVolume1hrsUsd() const;
    bool volume1hrsUsdIsSet() const;
    void unsetVolume_1hrs_usd();
    void setVolume1hrsUsd(double value);

    /// <summary>
    /// Gets or sets the USD volume in the last 1 day.
    /// </summary>
    double getVolume1dayUsd() const;
    bool volume1dayUsdIsSet() const;
    void unsetVolume_1day_usd();
    void setVolume1dayUsd(double value);

    /// <summary>
    /// Gets or sets the USD volume in the last 1 month.
    /// </summary>
    double getVolume1mthUsd() const;
    bool volume1mthUsdIsSet() const;
    void unsetVolume_1mth_usd();
    void setVolume1mthUsd(double value);

    /// <summary>
    /// Gets or sets the list of metric IDs.
    /// </summary>
    std::vector<utility::string_t> getMetricId() const;
    bool metricIdIsSet() const;
    void unsetMetric_id();
    void setMetricId(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Gets or sets the list of icons for the exchange.
    /// </summary>
    std::vector<std::shared_ptr<V1_Icon>> getIcons() const;
    bool iconsIsSet() const;
    void unsetIcons();
    void setIcons(const std::vector<std::shared_ptr<V1_Icon>>& value);

    /// <summary>
    /// Rank of the exchange.
    /// </summary>
    double getRank() const;
    bool rankIsSet() const;
    void unsetRank();
    void setRank(double value);

    /// <summary>
    /// Status of the integration
    /// </summary>
    utility::string_t getIntegrationStatus() const;
    bool integrationStatusIsSet() const;
    void unsetIntegration_status();
    void setIntegrationStatus(const utility::string_t& value);


protected:
    utility::string_t m_Exchange_id;
    bool m_Exchange_idIsSet;

    utility::string_t m_Website;
    bool m_WebsiteIsSet;

    utility::string_t m_Name;
    bool m_NameIsSet;

    utility::string_t m_Data_start;
    bool m_Data_startIsSet;

    utility::string_t m_Data_end;
    bool m_Data_endIsSet;

    utility::datetime m_Data_quote_start;
    bool m_Data_quote_startIsSet;

    utility::datetime m_Data_quote_end;
    bool m_Data_quote_endIsSet;

    utility::datetime m_Data_orderbook_start;
    bool m_Data_orderbook_startIsSet;

    utility::datetime m_Data_orderbook_end;
    bool m_Data_orderbook_endIsSet;

    utility::datetime m_Data_trade_start;
    bool m_Data_trade_startIsSet;

    utility::datetime m_Data_trade_end;
    bool m_Data_trade_endIsSet;

    int64_t m_Data_trade_count;
    bool m_Data_trade_countIsSet;

    int64_t m_Data_symbols_count;
    bool m_Data_symbols_countIsSet;

    double m_Volume_1hrs_usd;
    bool m_Volume_1hrs_usdIsSet;

    double m_Volume_1day_usd;
    bool m_Volume_1day_usdIsSet;

    double m_Volume_1mth_usd;
    bool m_Volume_1mth_usdIsSet;

    std::vector<utility::string_t> m_Metric_id;
    bool m_Metric_idIsSet;

    std::vector<std::shared_ptr<V1_Icon>> m_Icons;
    bool m_IconsIsSet;

    double m_Rank;
    bool m_RankIsSet;

    utility::string_t m_Integration_status;
    bool m_Integration_statusIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V1_Exchange_H_ */
