/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V1_Trade.h
 *
 * Represents a trade executed on the exchange.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V1_Trade_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V1_Trade_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents a trade executed on the exchange.
/// </summary>
class  V1_Trade
    : public ModelBase
{
public:
    V1_Trade();
    virtual ~V1_Trade();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// V1_Trade members


    /// <summary>
    /// The symbol identifier.
    /// </summary>
    utility::string_t getSymbolId() const;
    bool symbolIdIsSet() const;
    void unsetSymbol_id();
    void setSymbolId(const utility::string_t& value);

    /// <summary>
    /// The time of trade reported by the exchange.
    /// </summary>
    utility::datetime getTimeExchange() const;
    bool timeExchangeIsSet() const;
    void unsetTime_exchange();
    void setTimeExchange(const utility::datetime& value);

    /// <summary>
    /// The time when the trade was received by CoinAPI.
    /// </summary>
    utility::datetime getTimeCoinapi() const;
    bool timeCoinapiIsSet() const;
    void unsetTime_coinapi();
    void setTimeCoinapi(const utility::datetime& value);

    /// <summary>
    /// The unique identifier for the trade.
    /// </summary>
    utility::string_t getUuid() const;
    bool uuidIsSet() const;
    void unsetUuid();
    void setUuid(const utility::string_t& value);

    /// <summary>
    /// The price of the transaction.
    /// </summary>
    double getPrice() const;
    bool priceIsSet() const;
    void unsetPrice();
    void setPrice(double value);

    /// <summary>
    /// The base asset amount traded in the transaction.
    /// </summary>
    double getSize() const;
    bool sizeIsSet() const;
    void unsetSize();
    void setSize(double value);

    /// <summary>
    /// The aggressor side of the transaction (BUY/SELL/BUY_ESTIMATED/SELL_ESTIMATED/UNKNOWN).
    /// </summary>
    utility::string_t getTakerSide() const;
    bool takerSideIsSet() const;
    void unsetTaker_side();
    void setTakerSide(const utility::string_t& value);

    /// <summary>
    /// The trade identifier.
    /// </summary>
    utility::string_t getIdTrade() const;
    bool idTradeIsSet() const;
    void unsetId_trade();
    void setIdTrade(const utility::string_t& value);

    /// <summary>
    /// The order maker identifier.
    /// </summary>
    utility::string_t getIdOrderMaker() const;
    bool idOrderMakerIsSet() const;
    void unsetId_order_maker();
    void setIdOrderMaker(const utility::string_t& value);

    /// <summary>
    /// The order taker identifier.
    /// </summary>
    utility::string_t getIdOrderTaker() const;
    bool idOrderTakerIsSet() const;
    void unsetId_order_taker();
    void setIdOrderTaker(const utility::string_t& value);


protected:
    utility::string_t m_Symbol_id;
    bool m_Symbol_idIsSet;

    utility::datetime m_Time_exchange;
    bool m_Time_exchangeIsSet;

    utility::datetime m_Time_coinapi;
    bool m_Time_coinapiIsSet;

    utility::string_t m_Uuid;
    bool m_UuidIsSet;

    double m_Price;
    bool m_PriceIsSet;

    double m_Size;
    bool m_SizeIsSet;

    utility::string_t m_Taker_side;
    bool m_Taker_sideIsSet;

    utility::string_t m_Id_trade;
    bool m_Id_tradeIsSet;

    utility::string_t m_Id_order_maker;
    bool m_Id_order_makerIsSet;

    utility::string_t m_Id_order_taker;
    bool m_Id_order_takerIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V1_Trade_H_ */
