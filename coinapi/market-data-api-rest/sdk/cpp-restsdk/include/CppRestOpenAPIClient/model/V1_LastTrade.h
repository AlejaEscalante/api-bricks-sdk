/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V1_LastTrade.h
 *
 * Represents the last executed transaction.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V1_LastTrade_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V1_LastTrade_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents the last executed transaction.
/// </summary>
class  V1_LastTrade
    : public ModelBase
{
public:
    V1_LastTrade();
    virtual ~V1_LastTrade();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// V1_LastTrade members


    /// <summary>
    /// The exchange time of the last trade.
    /// </summary>
    utility::datetime getTimeExchange() const;
    bool timeExchangeIsSet() const;
    void unsetTime_exchange();
    void setTimeExchange(const utility::datetime& value);

    /// <summary>
    /// The CoinAPI time when the last trade was received.
    /// </summary>
    utility::datetime getTimeCoinapi() const;
    bool timeCoinapiIsSet() const;
    void unsetTime_coinapi();
    void setTimeCoinapi(const utility::datetime& value);

    /// <summary>
    /// The UUID of the last trade.
    /// </summary>
    utility::string_t getUuid() const;
    bool uuidIsSet() const;
    void unsetUuid();
    void setUuid(const utility::string_t& value);

    /// <summary>
    /// The price of the last trade.
    /// </summary>
    double getPrice() const;
    bool priceIsSet() const;
    void unsetPrice();
    void setPrice(double value);

    /// <summary>
    /// The size of the last trade.
    /// </summary>
    double getSize() const;
    bool sizeIsSet() const;
    void unsetSize();
    void setSize(double value);

    /// <summary>
    /// The taker side of the last trade.
    /// </summary>
    utility::string_t getTakerSide() const;
    bool takerSideIsSet() const;
    void unsetTaker_side();
    void setTakerSide(const utility::string_t& value);


protected:
    utility::datetime m_Time_exchange;
    bool m_Time_exchangeIsSet;

    utility::datetime m_Time_coinapi;
    bool m_Time_coinapiIsSet;

    utility::string_t m_Uuid;
    bool m_UuidIsSet;

    double m_Price;
    bool m_PriceIsSet;

    double m_Size;
    bool m_SizeIsSet;

    utility::string_t m_Taker_side;
    bool m_Taker_sideIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V1_LastTrade_H_ */
