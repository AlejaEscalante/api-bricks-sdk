/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OhlcvApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_OhlcvApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_OhlcvApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/Models_ExchangeTimeseriesItem.h"
#include "CppRestOpenAPIClient/model/V1_TimeseriesItem.h"
#include "CppRestOpenAPIClient/model/V1_TimeseriesPeriod.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  OhlcvApi 
{
public:

    explicit OhlcvApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~OhlcvApi();

    /// <summary>
    /// Historical data by exchange
    /// </summary>
    /// <remarks>
    /// Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific exchange eg &#x60;BITSTAMP&#x60;              :::info The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. The difference between &#x60;time_end&#x60; and &#x60;time_start&#x60; cannot be higher than 1 day. The &#x60;period_id&#x60; cannot be higher than &#x60;1DAY&#x60;. :::
    /// </remarks>
    /// <param name="exchangeId">Exchange identifier of requested timeseries (from the Metadata -&gt; Exchanges)</param>
    /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;)</param>
    /// <param name="timeStart">Timeseries starting time in ISO 8601</param>
    /// <param name="timeEnd">Timeseries ending time in ISO 8601</param>
    pplx::task<std::vector<std::shared_ptr<Models_ExchangeTimeseriesItem>>> v1OhlcvExchangesExchangeIdHistoryGet(
        utility::string_t exchangeId,
        utility::string_t periodId,
        utility::string_t timeStart,
        utility::string_t timeEnd
    ) const;
    /// <summary>
    /// List all periods
    /// </summary>
    /// <remarks>
    /// Get full list of supported time periods available for requesting OHLCV timeseries data.              ### Available periods              Time unit | Period identifiers --------- | ----------- Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY Month | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH Year | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS              :::tip You can assume that we will not remove any periods from this response, however, we may add new ones. :::
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<V1_TimeseriesPeriod>>> v1OhlcvPeriodsGet(
    ) const;
    /// <summary>
    /// Historical data
    /// </summary>
    /// <remarks>
    /// Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data              :::info The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. :::
    /// </remarks>
    /// <param name="symbolId">Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)</param>
    /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)</param>
    /// <param name="timeStart">Timeseries starting time in ISO 8601 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeEnd">Timeseries ending time in ISO 8601 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<V1_TimeseriesItem>>> v1OhlcvSymbolIdHistoryGet(
        utility::string_t symbolId,
        utility::string_t periodId,
        boost::optional<utility::string_t> timeStart,
        boost::optional<utility::string_t> timeEnd,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Latest data
    /// </summary>
    /// <remarks>
    /// Get OHLCV latest timeseries data returned in time descending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data              :::info OHLCV Latest endpoint is just the shortcut to the OHLCV Historical endpoint with substituted &#x60;time_start&#x60; and &#x60;time_end&#x60; parameters.  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. :::
    /// </remarks>
    /// <param name="symbolId">Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)</param>
    /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)</param>
    /// <param name="limit">Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<V1_TimeseriesItem>>> v1OhlcvSymbolIdLatestGet(
        utility::string_t symbolId,
        utility::string_t periodId,
        boost::optional<int32_t> limit
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_OhlcvApi_H_ */

