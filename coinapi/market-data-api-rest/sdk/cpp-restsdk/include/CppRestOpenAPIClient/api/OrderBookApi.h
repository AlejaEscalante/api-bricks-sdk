/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderBookApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_OrderBookApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_OrderBookApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/V1_OrderBook.h"
#include "CppRestOpenAPIClient/model/V1_OrderBookBase.h"
#include "CppRestOpenAPIClient/model/V1_OrderBookDepth.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  OrderBookApi 
{
public:

    explicit OrderBookApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~OrderBookApi();

    /// <summary>
    /// Get current order book
    /// </summary>
    /// <remarks>
    /// Retrieves the current order book for the specified symbol.
    /// </remarks>
    /// <param name="symbolId">The symbol ID (from the Metadata -&gt; Symbols)</param>
    /// <param name="limitLevels">The maximum number of levels to include in the response. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<V1_OrderBookBase>> v1OrderbooksSymbolIdCurrentGet(
        utility::string_t symbolId,
        boost::optional<int32_t> limitLevels
    ) const;
    /// <summary>
    /// Current depth of the order book
    /// </summary>
    /// <remarks>
    /// Retrieves the current depth of the order book for the specified symbol.
    /// </remarks>
    /// <param name="symbolId">The symbol ID (from the Metadata -&gt; Symbols)</param>
    /// <param name="limitLevels">The maximum number of levels to include in the response. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<V1_OrderBookDepth>> v1OrderbooksSymbolIdDepthCurrentGet(
        utility::string_t symbolId,
        boost::optional<int32_t> limitLevels
    ) const;
    /// <summary>
    /// Historical data
    /// </summary>
    /// <remarks>
    /// Get historical order book snapshots for a specific symbol within time range, returned in time ascending order.              :::info The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels. :::  :::warning The &#39;time_start&#39; and &#39;time_end&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day. Please use the &#39;date&#39; parameter instead for querying data for a specific day without filter. :::
    /// </remarks>
    /// <param name="symbolId">Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols)</param>
    /// <param name="date">Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeStart">Starting time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeEnd">Timeseries ending time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 0)</param>
    /// <param name="limitLevels">Maximum amount of levels from each side of the book to include in response (optional) (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<V1_OrderBook>>> v1OrderbooksSymbolIdHistoryGet(
        utility::string_t symbolId,
        boost::optional<utility::string_t> date,
        boost::optional<utility::string_t> timeStart,
        boost::optional<utility::string_t> timeEnd,
        boost::optional<int32_t> limit,
        boost::optional<int32_t> limitLevels
    ) const;
    /// <summary>
    /// Latest data
    /// </summary>
    /// <remarks>
    /// Get latest order book snapshots for a specific symbol, returned in time descending order.              :::info The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels. :::
    /// </remarks>
    /// <param name="symbolId">Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)</param>
    /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 0)</param>
    /// <param name="limitLevels">Maximum amount of levels from each side of the book to include in response (optional) (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<V1_OrderBook>>> v1OrderbooksSymbolIdLatestGet(
        utility::string_t symbolId,
        boost::optional<int32_t> limit,
        boost::optional<int32_t> limitLevels
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_OrderBookApi_H_ */

