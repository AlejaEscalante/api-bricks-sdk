/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TradesApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_TradesApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_TradesApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/V1_Trade.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  TradesApi 
{
public:

    explicit TradesApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~TradesApi();

    /// <summary>
    /// Latest data
    /// </summary>
    /// <remarks>
    /// Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.
    /// </remarks>
    /// <param name="filterSymbolId">Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="includeId">Information that additional exchange trade identifier should be included in the &#x60;id_trade&#x60; parameter of the trade if exchange providing identifiers. (optional, default to false)</param>
    /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<V1_Trade>>> v1TradesLatestGet(
        boost::optional<utility::string_t> filterSymbolId,
        boost::optional<bool> includeId,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Historical data
    /// </summary>
    /// <remarks>
    /// Get history transactions from specific symbol, returned in time ascending order.  :::warning The &#39;time_start&#39; and &#39;time_end&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day. Please use the &#39;date&#39; parameter instead for querying data for a specific day without filter. :::
    /// </remarks>
    /// <param name="symbolId">Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols)</param>
    /// <param name="date">Date in ISO 8601, returned data is for the whole given day (required if &#39;time_start&#39; is not provided) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeStart">Starting time in ISO 8601 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeEnd">Timeseries ending time in ISO 8601 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 0)</param>
    /// <param name="includeId">Information that additional exchange trade identifier should be included in the &#x60;id_trade&#x60; parameter of the trade if exchange providing identifiers. (optional, default to false)</param>
    pplx::task<std::vector<std::shared_ptr<V1_Trade>>> v1TradesSymbolIdHistoryGet(
        utility::string_t symbolId,
        boost::optional<utility::string_t> date,
        boost::optional<utility::string_t> timeStart,
        boost::optional<utility::string_t> timeEnd,
        boost::optional<int32_t> limit,
        boost::optional<bool> includeId
    ) const;
    /// <summary>
    /// Latest data by symbol_id
    /// </summary>
    /// <remarks>
    /// Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.
    /// </remarks>
    /// <param name="symbolId">Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols)</param>
    /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 0)</param>
    /// <param name="includeId">Information that additional exchange trade identifier should be included in the &#x60;id_trade&#x60; parameter of the trade if exchange providing identifiers. (optional, default to false)</param>
    pplx::task<std::vector<std::shared_ptr<V1_Trade>>> v1TradesSymbolIdLatestGet(
        utility::string_t symbolId,
        boost::optional<int32_t> limit,
        boost::optional<bool> includeId
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_TradesApi_H_ */

