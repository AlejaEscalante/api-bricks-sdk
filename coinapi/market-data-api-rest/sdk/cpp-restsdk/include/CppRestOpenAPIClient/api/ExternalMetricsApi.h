/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ExternalMetricsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_ExternalMetricsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_ExternalMetricsApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/Object.h"
#include "CppRestOpenAPIClient/model/V1_Chain.h"
#include "CppRestOpenAPIClient/model/V1_ExternalAsset.h"
#include "CppRestOpenAPIClient/model/V1_ExternalExchange.h"
#include "CppRestOpenAPIClient/model/V1_MetricInfo.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  ExternalMetricsApi 
{
public:

    explicit ExternalMetricsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~ExternalMetricsApi();

    /// <summary>
    /// Historical metrics for the asset from external sources
    /// </summary>
    /// <remarks>
    /// Get asset metrics history from external data providers. Data is typically aggregated daily.
    /// </remarks>
    /// <param name="metricId">Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; - internal metric key)</param>
    /// <param name="assetId">Asset identifier (e.g., &#x60;USDC&#x60;, &#x60;USDT&#x60; - from supported assets list)</param>
    /// <param name="timeStart">Starting time in ISO 8601 (optional, default to utility::datetime())</param>
    /// <param name="timeEnd">Ending time in ISO 8601 (optional, default to utility::datetime())</param>
    /// <param name="timeFormat">If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<Object>>> v1ExternalmetricsAssetHistoryGet(
        utility::string_t metricId,
        utility::string_t assetId,
        boost::optional<utility::datetime> timeStart,
        boost::optional<utility::datetime> timeEnd,
        boost::optional<utility::string_t> timeFormat,
        boost::optional<utility::string_t> periodId,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Listing of metrics available for specific asset
    /// </summary>
    /// <remarks>
    /// Get all metrics that are actually available for the specified asset from external providers.
    /// </remarks>
    /// <param name="assetId">Asset identifier (e.g., USDC, USDT)</param>
    pplx::task<std::vector<std::shared_ptr<V1_MetricInfo>>> v1ExternalmetricsAssetListingGet(
        utility::string_t assetId
    ) const;
    /// <summary>
    /// Listing of all supported external assets
    /// </summary>
    /// <remarks>
    /// Get all assets (primarily stablecoins) supported by external data providers.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<V1_ExternalAsset>>> v1ExternalmetricsAssetsGet(
    ) const;
    /// <summary>
    /// Historical metrics for the chain from external sources
    /// </summary>
    /// <remarks>
    /// Get chain metrics history from external data providers. Data is typically aggregated daily.
    /// </remarks>
    /// <param name="metricId">Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; - internal metric key)</param>
    /// <param name="chainId">Chain identifier (e.g., &#x60;Ethereum&#x60;, &#x60;Arbitrum&#x60; - from supported chains list)</param>
    /// <param name="timeStart">Starting time in ISO 8601 (optional, default to utility::datetime())</param>
    /// <param name="timeEnd">Ending time in ISO 8601 (optional, default to utility::datetime())</param>
    /// <param name="timeFormat">If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<Object>>> v1ExternalmetricsChainHistoryGet(
        utility::string_t metricId,
        utility::string_t chainId,
        boost::optional<utility::datetime> timeStart,
        boost::optional<utility::datetime> timeEnd,
        boost::optional<utility::string_t> timeFormat,
        boost::optional<utility::string_t> periodId,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Listing of metrics available for specific chain
    /// </summary>
    /// <remarks>
    /// Get all metrics that are actually available for the specified blockchain chain from external providers.
    /// </remarks>
    /// <param name="chainId">Chain identifier (e.g., ETHEREUM, ARBITRUM)</param>
    pplx::task<std::vector<std::shared_ptr<V1_MetricInfo>>> v1ExternalmetricsChainListingGet(
        utility::string_t chainId
    ) const;
    /// <summary>
    /// Listing of all supported external chains
    /// </summary>
    /// <remarks>
    /// Get all blockchain chains supported by external data providers.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<V1_Chain>>> v1ExternalmetricsChainsGet(
    ) const;
    /// <summary>
    /// Historical metrics for the exchange from both external and internal sources
    /// </summary>
    /// <remarks>
    /// Get exchange metrics history from external data providers or internal sources based on metric type.
    /// </remarks>
    /// <param name="metricId">Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; for external, or generic metric IDs)</param>
    /// <param name="exchangeId">Exchange identifier (e.g., &#x60;BINANCE&#x60;, &#x60;UNISWAP-V3-ETHEREUM&#x60;)</param>
    /// <param name="timeStart">Starting time in ISO 8601 (optional, default to utility::datetime())</param>
    /// <param name="timeEnd">Ending time in ISO 8601 (optional, default to utility::datetime())</param>
    /// <param name="timeFormat">If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<Object>>> v1ExternalmetricsExchangeHistoryGet(
        utility::string_t metricId,
        utility::string_t exchangeId,
        boost::optional<utility::datetime> timeStart,
        boost::optional<utility::datetime> timeEnd,
        boost::optional<utility::string_t> timeFormat,
        boost::optional<utility::string_t> periodId,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Listing of metrics available for specific exchange (both external and generic)
    /// </summary>
    /// <remarks>
    /// Get all metrics that are actually available for the specified exchange from both external providers and internal sources.
    /// </remarks>
    /// <param name="exchangeId">Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM)</param>
    pplx::task<std::vector<std::shared_ptr<V1_MetricInfo>>> v1ExternalmetricsExchangeListingGet(
        utility::string_t exchangeId
    ) const;
    /// <summary>
    /// Listing of all supported external exchanges
    /// </summary>
    /// <remarks>
    /// Get all exchanges that have mapping to external data providers for metrics that actually have sources.  Only returns exchanges that are properly mapped to external protocols for metrics with defined sources.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<V1_ExternalExchange>>> v1ExternalmetricsExchangesGet(
    ) const;
    /// <summary>
    /// Listing of all supported metrics (both external and generic)
    /// </summary>
    /// <remarks>
    /// Get all metrics available from external data providers and internal generic metrics.  External metrics have detailed descriptions, while generic metrics are marked as such.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<V1_MetricInfo>>> v1ExternalmetricsListingGet(
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_ExternalMetricsApi_H_ */

