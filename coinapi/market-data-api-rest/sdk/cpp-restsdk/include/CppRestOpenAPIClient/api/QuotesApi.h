/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * QuotesApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_QuotesApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_QuotesApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/V1_Quote.h"
#include "CppRestOpenAPIClient/model/V1_QuoteTrade.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  QuotesApi 
{
public:

    explicit QuotesApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~QuotesApi();

    /// <summary>
    /// Current data
    /// </summary>
    /// <remarks>
    /// Get current quotes for all symbols or for a specific symbol.              :::info When requesting current data for a specific symbol, output is not encapsulated into JSON array as only one item is returned. :::
    /// </remarks>
    /// <param name="filterSymbolId">Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<V1_QuoteTrade>>> v1QuotesCurrentGet(
        boost::optional<utility::string_t> filterSymbolId
    ) const;
    /// <summary>
    /// Latest data
    /// </summary>
    /// <remarks>
    /// Get latest updates of the quotes up to 1 minute ago. Latest data is always returned in time descending order.
    /// </remarks>
    /// <param name="filterSymbolId">Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<V1_Quote>>> v1QuotesLatestGet(
        boost::optional<utility::string_t> filterSymbolId,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Current quotes for a specific symbol
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbolId">The symbol identifier (from the Metadata -&gt; Symbols)</param>
    pplx::task<std::shared_ptr<V1_QuoteTrade>> v1QuotesSymbolIdCurrentGet(
        utility::string_t symbolId
    ) const;
    /// <summary>
    /// Historical data
    /// </summary>
    /// <remarks>
    /// Get historical quote updates within requested time range, returned in time ascending order.  :::warning The &#39;time_start&#39; and &#39;time_end&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day. Please use the &#39;date&#39; parameter instead for querying data for a specific day without filter. :::
    /// </remarks>
    /// <param name="symbolId">Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols)</param>
    /// <param name="date">Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeStart">Starting time in ISO 8601 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeEnd">Timeseries ending time in ISO 8601 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<V1_Quote>>> v1QuotesSymbolIdHistoryGet(
        utility::string_t symbolId,
        boost::optional<utility::string_t> date,
        boost::optional<utility::string_t> timeStart,
        boost::optional<utility::string_t> timeEnd,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Latest quote updates for a specific symbol
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbolId">Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)</param>
    /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<V1_Quote>>> v1QuotesSymbolIdLatestGet(
        utility::string_t symbolId,
        boost::optional<int32_t> limit
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_QuotesApi_H_ */

