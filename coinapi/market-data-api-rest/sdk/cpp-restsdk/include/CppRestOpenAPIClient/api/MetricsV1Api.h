/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MetricsV1Api.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_MetricsV1Api_H_
#define ORG_OPENAPITOOLS_CLIENT_API_MetricsV1Api_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/V1_GeneralData.h"
#include "CppRestOpenAPIClient/model/V1_ListingItem.h"
#include "CppRestOpenAPIClient/model/V1_Metric.h"
#include "CppRestOpenAPIClient/model/V1_MetricData.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  MetricsV1Api 
{
public:

    explicit MetricsV1Api( std::shared_ptr<const ApiClient> apiClient );

    virtual ~MetricsV1Api();

    /// <summary>
    /// Current metrics for given asset
    /// </summary>
    /// <remarks>
    /// Get current asset metrics.
    /// </remarks>
    /// <param name="metricId">Metric identifier (from the Metrics -&gt; Listing) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="assetId">Asset identifier (from the Metadata -&gt; Assets) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="assetIdExternal">Exchange asset identifier (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="exchangeId">Exchange identifier (from the Metadata -&gt; Exchanges) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<V1_GeneralData>>> v1MetricsAssetCurrentGet(
        boost::optional<utility::string_t> metricId,
        boost::optional<utility::string_t> assetId,
        boost::optional<utility::string_t> assetIdExternal,
        boost::optional<utility::string_t> exchangeId
    ) const;
    /// <summary>
    /// Historical metrics for asset
    /// </summary>
    /// <remarks>
    /// Get asset metrics history.
    /// </remarks>
    /// <param name="metricId">Metric identifier (from the Metrics -&gt; Listing)</param>
    /// <param name="exchangeId">Exchange identifier (from the Metadata -&gt; Exchanges)</param>
    /// <param name="assetId">Asset identifier (from the Metadata -&gt; Assets) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="assetIdExternal">Exchange asset identifier (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeStart">Starting time in ISO 8601 (optional, default to utility::datetime())</param>
    /// <param name="timeEnd">Ending time in ISO 8601 (optional, default to utility::datetime())</param>
    /// <param name="timeFormat">If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<V1_MetricData>>> v1MetricsAssetHistoryGet(
        utility::string_t metricId,
        utility::string_t exchangeId,
        boost::optional<utility::string_t> assetId,
        boost::optional<utility::string_t> assetIdExternal,
        boost::optional<utility::datetime> timeStart,
        boost::optional<utility::datetime> timeEnd,
        boost::optional<utility::string_t> timeFormat,
        boost::optional<utility::string_t> periodId,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Listing of all supported metrics for asset
    /// </summary>
    /// <remarks>
    /// Get data metrics for asset.
    /// </remarks>
    /// <param name="metricId">Metric identifier (from the Metrics -&gt; Listing) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="exchangeId">Exchange identifier (from the Metadata -&gt; Exchanges) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="chainId">Chain identifier (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="networkId">Network identifier (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="assetId">Asset identifier (from the Metadata -&gt; Assets) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="assetIdExternal">The asset external identifier (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<V1_ListingItem>>> v1MetricsAssetListingGet(
        boost::optional<utility::string_t> metricId,
        boost::optional<utility::string_t> exchangeId,
        boost::optional<utility::string_t> chainId,
        boost::optional<utility::string_t> networkId,
        boost::optional<utility::string_t> assetId,
        boost::optional<utility::string_t> assetIdExternal
    ) const;
    /// <summary>
    /// Current metrics for given exchange
    /// </summary>
    /// <remarks>
    /// Get current exchange metrics values.
    /// </remarks>
    /// <param name="exchangeId">The exchange identifier (from the Metadata -&gt; Exchanges)</param>
    /// <param name="metricId">The metric identifier (from the Metrics -&gt; Listing) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<V1_GeneralData>>> v1MetricsExchangeCurrentGet(
        utility::string_t exchangeId,
        boost::optional<utility::string_t> metricId
    ) const;
    /// <summary>
    /// Historical metrics for the exchange
    /// </summary>
    /// <remarks>
    /// Get exchange metrics history.
    /// </remarks>
    /// <param name="metricId">Metric identifier (from the Metrics -&gt; Listing)</param>
    /// <param name="exchangeId">Exchange identifier (from the Metadata -&gt; Exchanges)</param>
    /// <param name="timeStart">Starting time in ISO 8601 (optional, default to utility::datetime())</param>
    /// <param name="timeEnd">Ending time in ISO 8601 (optional, default to utility::datetime())</param>
    /// <param name="timeFormat">If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<V1_MetricData>>> v1MetricsExchangeHistoryGet(
        utility::string_t metricId,
        utility::string_t exchangeId,
        boost::optional<utility::datetime> timeStart,
        boost::optional<utility::datetime> timeEnd,
        boost::optional<utility::string_t> timeFormat,
        boost::optional<utility::string_t> periodId,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Listing of all supported exchange metrics
    /// </summary>
    /// <remarks>
    /// Get data metrics for exchange.
    /// </remarks>
    /// <param name="exchangeId">The exchange identifier (from the Metadata -&gt; Exchanges)</param>
    /// <param name="metricId">The metric identifier (from the Metrics -&gt; Listing) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<V1_ListingItem>>> v1MetricsExchangeListingGet(
        utility::string_t exchangeId,
        boost::optional<utility::string_t> metricId
    ) const;
    /// <summary>
    /// Listing of all supported metrics by CoinAPI
    /// </summary>
    /// <remarks>
    /// Get all data metrics.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<V1_Metric>>> v1MetricsListingGet(
    ) const;
    /// <summary>
    /// Current metrics for given symbol
    /// </summary>
    /// <remarks>
    /// Get current symbol metrics.
    /// </remarks>
    /// <param name="metricId">Metric identifier (from the Metrics -&gt; Listing) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="symbolId">Symbol identifier (from the Metadata -&gt; Symbols) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="exchangeId">Exchange id (from the Metadata -&gt; Exchanges) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<V1_GeneralData>>> v1MetricsSymbolCurrentGet(
        boost::optional<utility::string_t> metricId,
        boost::optional<utility::string_t> symbolId,
        boost::optional<utility::string_t> exchangeId
    ) const;
    /// <summary>
    /// Historical metrics for symbol
    /// </summary>
    /// <remarks>
    /// Get symbol metrics history.
    /// </remarks>
    /// <param name="metricId">Metric identifier (from the Metrics -&gt; Listing)</param>
    /// <param name="symbolId">Symbol identifier (from the Metadata -&gt; Symbols)</param>
    /// <param name="timeStart">Starting time in ISO 8601 (optional, default to utility::datetime())</param>
    /// <param name="timeEnd">Ending time in ISO 8601 (optional, default to utility::datetime())</param>
    /// <param name="timeFormat">If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<V1_MetricData>>> v1MetricsSymbolHistoryGet(
        utility::string_t metricId,
        utility::string_t symbolId,
        boost::optional<utility::datetime> timeStart,
        boost::optional<utility::datetime> timeEnd,
        boost::optional<utility::string_t> timeFormat,
        boost::optional<utility::string_t> periodId,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Listing of all supported metrics for symbol
    /// </summary>
    /// <remarks>
    /// Get data metrics for symbol.
    /// </remarks>
    /// <param name="metricId">Metric identifier (from the Metrics -&gt; Listing) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="exchangeId">Exchange identifier (from the Metadata -&gt; Exchanges) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="symbolId">Symbol identifier (from the Metadata -&gt; Symbols) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<V1_ListingItem>>> v1MetricsSymbolListingGet(
        boost::optional<utility::string_t> metricId,
        boost::optional<utility::string_t> exchangeId,
        boost::optional<utility::string_t> symbolId
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_MetricsV1Api_H_ */

