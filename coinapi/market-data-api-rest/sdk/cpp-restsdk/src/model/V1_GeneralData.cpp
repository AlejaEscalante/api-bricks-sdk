/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_GeneralData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_GeneralData::V1_GeneralData()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Exchange_id = utility::conversions::to_string_t("");
    m_Exchange_idIsSet = false;
    m_Asset_id = utility::conversions::to_string_t("");
    m_Asset_idIsSet = false;
    m_Symbol_id = utility::conversions::to_string_t("");
    m_Symbol_idIsSet = false;
    m_Metric_id = utility::conversions::to_string_t("");
    m_Metric_idIsSet = false;
    m_Value_decimal = 0.0;
    m_Value_decimalIsSet = false;
    m_Value_text = utility::conversions::to_string_t("");
    m_Value_textIsSet = false;
    m_Value_time = utility::datetime();
    m_Value_timeIsSet = false;
}

V1_GeneralData::~V1_GeneralData()
{
}

void V1_GeneralData::validate()
{
    // TODO: implement validation
}

web::json::value V1_GeneralData::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Entry_timeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Exchange_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("exchange_id"))] = ModelBase::toJson(m_Exchange_id);
    }
    if(m_Asset_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("asset_id"))] = ModelBase::toJson(m_Asset_id);
    }
    if(m_Symbol_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("symbol_id"))] = ModelBase::toJson(m_Symbol_id);
    }
    if(m_Metric_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("metric_id"))] = ModelBase::toJson(m_Metric_id);
    }
    if(m_Value_decimalIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("value_decimal"))] = ModelBase::toJson(m_Value_decimal);
    }
    if(m_Value_textIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("value_text"))] = ModelBase::toJson(m_Value_text);
    }
    if(m_Value_timeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("value_time"))] = ModelBase::toJson(m_Value_time);
    }

    return val;
}

bool V1_GeneralData::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exchange_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exchange_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExchangeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExchangeId);
            setExchangeId(refVal_setExchangeId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("asset_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("asset_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetId);
            setAssetId(refVal_setAssetId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("symbol_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolId);
            setSymbolId(refVal_setSymbolId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("metric_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metric_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMetricId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetricId);
            setMetricId(refVal_setMetricId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value_decimal"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value_decimal")));
        if(!fieldValue.is_null())
        {
            double refVal_setValueDecimal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValueDecimal);
            setValueDecimal(refVal_setValueDecimal);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value_text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value_text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValueText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValueText);
            setValueText(refVal_setValueText);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setValueTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValueTime);
            setValueTime(refVal_setValueTime);
            
        }
    }
    return ok;
}

void V1_GeneralData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Exchange_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exchange_id")), m_Exchange_id));
    }
    if(m_Asset_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("asset_id")), m_Asset_id));
    }
    if(m_Symbol_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol_id")), m_Symbol_id));
    }
    if(m_Metric_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metric_id")), m_Metric_id));
    }
    if(m_Value_decimalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value_decimal")), m_Value_decimal));
    }
    if(m_Value_textIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value_text")), m_Value_text));
    }
    if(m_Value_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value_time")), m_Value_time));
    }
}

bool V1_GeneralData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exchange_id"))))
    {
        utility::string_t refVal_setExchangeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exchange_id"))), refVal_setExchangeId );
        setExchangeId(refVal_setExchangeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("asset_id"))))
    {
        utility::string_t refVal_setAssetId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("asset_id"))), refVal_setAssetId );
        setAssetId(refVal_setAssetId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol_id"))))
    {
        utility::string_t refVal_setSymbolId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol_id"))), refVal_setSymbolId );
        setSymbolId(refVal_setSymbolId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("metric_id"))))
    {
        utility::string_t refVal_setMetricId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metric_id"))), refVal_setMetricId );
        setMetricId(refVal_setMetricId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value_decimal"))))
    {
        double refVal_setValueDecimal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value_decimal"))), refVal_setValueDecimal );
        setValueDecimal(refVal_setValueDecimal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value_text"))))
    {
        utility::string_t refVal_setValueText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value_text"))), refVal_setValueText );
        setValueText(refVal_setValueText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value_time"))))
    {
        utility::datetime refVal_setValueTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value_time"))), refVal_setValueTime );
        setValueTime(refVal_setValueTime);
    }
    return ok;
}


utility::datetime V1_GeneralData::getEntryTime() const
{
    return m_Entry_time;
}


void V1_GeneralData::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool V1_GeneralData::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void V1_GeneralData::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime V1_GeneralData::getRecvTime() const
{
    return m_Recv_time;
}


void V1_GeneralData::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool V1_GeneralData::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void V1_GeneralData::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
utility::string_t V1_GeneralData::getExchangeId() const
{
    return m_Exchange_id;
}


void V1_GeneralData::setExchangeId(const utility::string_t& value)
{
    m_Exchange_id = value;
    m_Exchange_idIsSet = true;
}

bool V1_GeneralData::exchangeIdIsSet() const
{
    return m_Exchange_idIsSet;
}

void V1_GeneralData::unsetExchange_id()
{
    m_Exchange_idIsSet = false;
}
utility::string_t V1_GeneralData::getAssetId() const
{
    return m_Asset_id;
}


void V1_GeneralData::setAssetId(const utility::string_t& value)
{
    m_Asset_id = value;
    m_Asset_idIsSet = true;
}

bool V1_GeneralData::assetIdIsSet() const
{
    return m_Asset_idIsSet;
}

void V1_GeneralData::unsetAsset_id()
{
    m_Asset_idIsSet = false;
}
utility::string_t V1_GeneralData::getSymbolId() const
{
    return m_Symbol_id;
}


void V1_GeneralData::setSymbolId(const utility::string_t& value)
{
    m_Symbol_id = value;
    m_Symbol_idIsSet = true;
}

bool V1_GeneralData::symbolIdIsSet() const
{
    return m_Symbol_idIsSet;
}

void V1_GeneralData::unsetSymbol_id()
{
    m_Symbol_idIsSet = false;
}
utility::string_t V1_GeneralData::getMetricId() const
{
    return m_Metric_id;
}


void V1_GeneralData::setMetricId(const utility::string_t& value)
{
    m_Metric_id = value;
    m_Metric_idIsSet = true;
}

bool V1_GeneralData::metricIdIsSet() const
{
    return m_Metric_idIsSet;
}

void V1_GeneralData::unsetMetric_id()
{
    m_Metric_idIsSet = false;
}
double V1_GeneralData::getValueDecimal() const
{
    return m_Value_decimal;
}

void V1_GeneralData::setValueDecimal(double value)
{
    m_Value_decimal = value;
    m_Value_decimalIsSet = true;
}

bool V1_GeneralData::valueDecimalIsSet() const
{
    return m_Value_decimalIsSet;
}

void V1_GeneralData::unsetValue_decimal()
{
    m_Value_decimalIsSet = false;
}
utility::string_t V1_GeneralData::getValueText() const
{
    return m_Value_text;
}


void V1_GeneralData::setValueText(const utility::string_t& value)
{
    m_Value_text = value;
    m_Value_textIsSet = true;
}

bool V1_GeneralData::valueTextIsSet() const
{
    return m_Value_textIsSet;
}

void V1_GeneralData::unsetValue_text()
{
    m_Value_textIsSet = false;
}
utility::datetime V1_GeneralData::getValueTime() const
{
    return m_Value_time;
}


void V1_GeneralData::setValueTime(const utility::datetime& value)
{
    m_Value_time = value;
    m_Value_timeIsSet = true;
}

bool V1_GeneralData::valueTimeIsSet() const
{
    return m_Value_timeIsSet;
}

void V1_GeneralData::unsetValue_time()
{
    m_Value_timeIsSet = false;
}

}
}
}
}


