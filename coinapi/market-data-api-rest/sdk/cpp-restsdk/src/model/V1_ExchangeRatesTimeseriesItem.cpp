/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_ExchangeRatesTimeseriesItem.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_ExchangeRatesTimeseriesItem::V1_ExchangeRatesTimeseriesItem()
{
    m_Time_period_start = utility::datetime();
    m_Time_period_startIsSet = false;
    m_Time_period_end = utility::datetime();
    m_Time_period_endIsSet = false;
    m_Time_open = utility::datetime();
    m_Time_openIsSet = false;
    m_Time_close = utility::datetime();
    m_Time_closeIsSet = false;
    m_Rate_open = 0.0;
    m_Rate_openIsSet = false;
    m_Rate_high = 0.0;
    m_Rate_highIsSet = false;
    m_Rate_low = 0.0;
    m_Rate_lowIsSet = false;
    m_Rate_close = 0.0;
    m_Rate_closeIsSet = false;
}

V1_ExchangeRatesTimeseriesItem::~V1_ExchangeRatesTimeseriesItem()
{
}

void V1_ExchangeRatesTimeseriesItem::validate()
{
    // TODO: implement validation
}

web::json::value V1_ExchangeRatesTimeseriesItem::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Time_period_startIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("time_period_start"))] = ModelBase::toJson(m_Time_period_start);
    }
    if(m_Time_period_endIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("time_period_end"))] = ModelBase::toJson(m_Time_period_end);
    }
    if(m_Time_openIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("time_open"))] = ModelBase::toJson(m_Time_open);
    }
    if(m_Time_closeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("time_close"))] = ModelBase::toJson(m_Time_close);
    }
    if(m_Rate_openIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("rate_open"))] = ModelBase::toJson(m_Rate_open);
    }
    if(m_Rate_highIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("rate_high"))] = ModelBase::toJson(m_Rate_high);
    }
    if(m_Rate_lowIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("rate_low"))] = ModelBase::toJson(m_Rate_low);
    }
    if(m_Rate_closeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("rate_close"))] = ModelBase::toJson(m_Rate_close);
    }

    return val;
}

bool V1_ExchangeRatesTimeseriesItem::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("time_period_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("time_period_start")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimePeriodStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimePeriodStart);
            setTimePeriodStart(refVal_setTimePeriodStart);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("time_period_end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("time_period_end")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimePeriodEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimePeriodEnd);
            setTimePeriodEnd(refVal_setTimePeriodEnd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("time_open"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("time_open")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimeOpen;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeOpen);
            setTimeOpen(refVal_setTimeOpen);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("time_close"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("time_close")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimeClose;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeClose);
            setTimeClose(refVal_setTimeClose);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("rate_open"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("rate_open")));
        if(!fieldValue.is_null())
        {
            double refVal_setRateOpen;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRateOpen);
            setRateOpen(refVal_setRateOpen);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("rate_high"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("rate_high")));
        if(!fieldValue.is_null())
        {
            double refVal_setRateHigh;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRateHigh);
            setRateHigh(refVal_setRateHigh);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("rate_low"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("rate_low")));
        if(!fieldValue.is_null())
        {
            double refVal_setRateLow;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRateLow);
            setRateLow(refVal_setRateLow);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("rate_close"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("rate_close")));
        if(!fieldValue.is_null())
        {
            double refVal_setRateClose;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRateClose);
            setRateClose(refVal_setRateClose);
            
        }
    }
    return ok;
}

void V1_ExchangeRatesTimeseriesItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Time_period_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("time_period_start")), m_Time_period_start));
    }
    if(m_Time_period_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("time_period_end")), m_Time_period_end));
    }
    if(m_Time_openIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("time_open")), m_Time_open));
    }
    if(m_Time_closeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("time_close")), m_Time_close));
    }
    if(m_Rate_openIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("rate_open")), m_Rate_open));
    }
    if(m_Rate_highIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("rate_high")), m_Rate_high));
    }
    if(m_Rate_lowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("rate_low")), m_Rate_low));
    }
    if(m_Rate_closeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("rate_close")), m_Rate_close));
    }
}

bool V1_ExchangeRatesTimeseriesItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("time_period_start"))))
    {
        utility::datetime refVal_setTimePeriodStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("time_period_start"))), refVal_setTimePeriodStart );
        setTimePeriodStart(refVal_setTimePeriodStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("time_period_end"))))
    {
        utility::datetime refVal_setTimePeriodEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("time_period_end"))), refVal_setTimePeriodEnd );
        setTimePeriodEnd(refVal_setTimePeriodEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("time_open"))))
    {
        utility::datetime refVal_setTimeOpen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("time_open"))), refVal_setTimeOpen );
        setTimeOpen(refVal_setTimeOpen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("time_close"))))
    {
        utility::datetime refVal_setTimeClose;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("time_close"))), refVal_setTimeClose );
        setTimeClose(refVal_setTimeClose);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("rate_open"))))
    {
        double refVal_setRateOpen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("rate_open"))), refVal_setRateOpen );
        setRateOpen(refVal_setRateOpen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("rate_high"))))
    {
        double refVal_setRateHigh;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("rate_high"))), refVal_setRateHigh );
        setRateHigh(refVal_setRateHigh);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("rate_low"))))
    {
        double refVal_setRateLow;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("rate_low"))), refVal_setRateLow );
        setRateLow(refVal_setRateLow);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("rate_close"))))
    {
        double refVal_setRateClose;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("rate_close"))), refVal_setRateClose );
        setRateClose(refVal_setRateClose);
    }
    return ok;
}


utility::datetime V1_ExchangeRatesTimeseriesItem::getTimePeriodStart() const
{
    return m_Time_period_start;
}


void V1_ExchangeRatesTimeseriesItem::setTimePeriodStart(const utility::datetime& value)
{
    m_Time_period_start = value;
    m_Time_period_startIsSet = true;
}

bool V1_ExchangeRatesTimeseriesItem::timePeriodStartIsSet() const
{
    return m_Time_period_startIsSet;
}

void V1_ExchangeRatesTimeseriesItem::unsetTime_period_start()
{
    m_Time_period_startIsSet = false;
}
utility::datetime V1_ExchangeRatesTimeseriesItem::getTimePeriodEnd() const
{
    return m_Time_period_end;
}


void V1_ExchangeRatesTimeseriesItem::setTimePeriodEnd(const utility::datetime& value)
{
    m_Time_period_end = value;
    m_Time_period_endIsSet = true;
}

bool V1_ExchangeRatesTimeseriesItem::timePeriodEndIsSet() const
{
    return m_Time_period_endIsSet;
}

void V1_ExchangeRatesTimeseriesItem::unsetTime_period_end()
{
    m_Time_period_endIsSet = false;
}
utility::datetime V1_ExchangeRatesTimeseriesItem::getTimeOpen() const
{
    return m_Time_open;
}


void V1_ExchangeRatesTimeseriesItem::setTimeOpen(const utility::datetime& value)
{
    m_Time_open = value;
    m_Time_openIsSet = true;
}

bool V1_ExchangeRatesTimeseriesItem::timeOpenIsSet() const
{
    return m_Time_openIsSet;
}

void V1_ExchangeRatesTimeseriesItem::unsetTime_open()
{
    m_Time_openIsSet = false;
}
utility::datetime V1_ExchangeRatesTimeseriesItem::getTimeClose() const
{
    return m_Time_close;
}


void V1_ExchangeRatesTimeseriesItem::setTimeClose(const utility::datetime& value)
{
    m_Time_close = value;
    m_Time_closeIsSet = true;
}

bool V1_ExchangeRatesTimeseriesItem::timeCloseIsSet() const
{
    return m_Time_closeIsSet;
}

void V1_ExchangeRatesTimeseriesItem::unsetTime_close()
{
    m_Time_closeIsSet = false;
}
double V1_ExchangeRatesTimeseriesItem::getRateOpen() const
{
    return m_Rate_open;
}

void V1_ExchangeRatesTimeseriesItem::setRateOpen(double value)
{
    m_Rate_open = value;
    m_Rate_openIsSet = true;
}

bool V1_ExchangeRatesTimeseriesItem::rateOpenIsSet() const
{
    return m_Rate_openIsSet;
}

void V1_ExchangeRatesTimeseriesItem::unsetRate_open()
{
    m_Rate_openIsSet = false;
}
double V1_ExchangeRatesTimeseriesItem::getRateHigh() const
{
    return m_Rate_high;
}

void V1_ExchangeRatesTimeseriesItem::setRateHigh(double value)
{
    m_Rate_high = value;
    m_Rate_highIsSet = true;
}

bool V1_ExchangeRatesTimeseriesItem::rateHighIsSet() const
{
    return m_Rate_highIsSet;
}

void V1_ExchangeRatesTimeseriesItem::unsetRate_high()
{
    m_Rate_highIsSet = false;
}
double V1_ExchangeRatesTimeseriesItem::getRateLow() const
{
    return m_Rate_low;
}

void V1_ExchangeRatesTimeseriesItem::setRateLow(double value)
{
    m_Rate_low = value;
    m_Rate_lowIsSet = true;
}

bool V1_ExchangeRatesTimeseriesItem::rateLowIsSet() const
{
    return m_Rate_lowIsSet;
}

void V1_ExchangeRatesTimeseriesItem::unsetRate_low()
{
    m_Rate_lowIsSet = false;
}
double V1_ExchangeRatesTimeseriesItem::getRateClose() const
{
    return m_Rate_close;
}

void V1_ExchangeRatesTimeseriesItem::setRateClose(double value)
{
    m_Rate_close = value;
    m_Rate_closeIsSet = true;
}

bool V1_ExchangeRatesTimeseriesItem::rateCloseIsSet() const
{
    return m_Rate_closeIsSet;
}

void V1_ExchangeRatesTimeseriesItem::unsetRate_close()
{
    m_Rate_closeIsSet = false;
}

}
}
}
}


