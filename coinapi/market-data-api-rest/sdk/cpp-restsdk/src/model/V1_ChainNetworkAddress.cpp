/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_ChainNetworkAddress.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_ChainNetworkAddress::V1_ChainNetworkAddress()
{
    m_Chain_id = utility::conversions::to_string_t("");
    m_Chain_idIsSet = false;
    m_Network_id = utility::conversions::to_string_t("");
    m_Network_idIsSet = false;
    m_Address = utility::conversions::to_string_t("");
    m_AddressIsSet = false;
}

V1_ChainNetworkAddress::~V1_ChainNetworkAddress()
{
}

void V1_ChainNetworkAddress::validate()
{
    // TODO: implement validation
}

web::json::value V1_ChainNetworkAddress::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Chain_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("chain_id"))] = ModelBase::toJson(m_Chain_id);
    }
    if(m_Network_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("network_id"))] = ModelBase::toJson(m_Network_id);
    }
    if(m_AddressIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("address"))] = ModelBase::toJson(m_Address);
    }

    return val;
}

bool V1_ChainNetworkAddress::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("chain_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chain_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setChainId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChainId);
            setChainId(refVal_setChainId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("network_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("network_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNetworkId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNetworkId);
            setNetworkId(refVal_setNetworkId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddress);
            setAddress(refVal_setAddress);
            
        }
    }
    return ok;
}

void V1_ChainNetworkAddress::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Chain_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chain_id")), m_Chain_id));
    }
    if(m_Network_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("network_id")), m_Network_id));
    }
    if(m_AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("address")), m_Address));
    }
}

bool V1_ChainNetworkAddress::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("chain_id"))))
    {
        utility::string_t refVal_setChainId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chain_id"))), refVal_setChainId );
        setChainId(refVal_setChainId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("network_id"))))
    {
        utility::string_t refVal_setNetworkId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("network_id"))), refVal_setNetworkId );
        setNetworkId(refVal_setNetworkId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("address"))))
    {
        utility::string_t refVal_setAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("address"))), refVal_setAddress );
        setAddress(refVal_setAddress);
    }
    return ok;
}


utility::string_t V1_ChainNetworkAddress::getChainId() const
{
    return m_Chain_id;
}


void V1_ChainNetworkAddress::setChainId(const utility::string_t& value)
{
    m_Chain_id = value;
    m_Chain_idIsSet = true;
}

bool V1_ChainNetworkAddress::chainIdIsSet() const
{
    return m_Chain_idIsSet;
}

void V1_ChainNetworkAddress::unsetChain_id()
{
    m_Chain_idIsSet = false;
}
utility::string_t V1_ChainNetworkAddress::getNetworkId() const
{
    return m_Network_id;
}


void V1_ChainNetworkAddress::setNetworkId(const utility::string_t& value)
{
    m_Network_id = value;
    m_Network_idIsSet = true;
}

bool V1_ChainNetworkAddress::networkIdIsSet() const
{
    return m_Network_idIsSet;
}

void V1_ChainNetworkAddress::unsetNetwork_id()
{
    m_Network_idIsSet = false;
}
utility::string_t V1_ChainNetworkAddress::getAddress() const
{
    return m_Address;
}


void V1_ChainNetworkAddress::setAddress(const utility::string_t& value)
{
    m_Address = value;
    m_AddressIsSet = true;
}

bool V1_ChainNetworkAddress::addressIsSet() const
{
    return m_AddressIsSet;
}

void V1_ChainNetworkAddress::unsetAddress()
{
    m_AddressIsSet = false;
}

}
}
}
}


