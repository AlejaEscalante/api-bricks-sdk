/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_Metric.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_Metric::V1_Metric()
{
    m_Metric_id = utility::conversions::to_string_t("");
    m_Metric_idIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
}

V1_Metric::~V1_Metric()
{
}

void V1_Metric::validate()
{
    // TODO: implement validation
}

web::json::value V1_Metric::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Metric_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("metric_id"))] = ModelBase::toJson(m_Metric_id);
    }
    if(m_DescriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }

    return val;
}

bool V1_Metric::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("metric_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metric_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMetricId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetricId);
            setMetricId(refVal_setMetricId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
            
        }
    }
    return ok;
}

void V1_Metric::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Metric_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metric_id")), m_Metric_id));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
}

bool V1_Metric::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("metric_id"))))
    {
        utility::string_t refVal_setMetricId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metric_id"))), refVal_setMetricId );
        setMetricId(refVal_setMetricId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    return ok;
}


utility::string_t V1_Metric::getMetricId() const
{
    return m_Metric_id;
}


void V1_Metric::setMetricId(const utility::string_t& value)
{
    m_Metric_id = value;
    m_Metric_idIsSet = true;
}

bool V1_Metric::metricIdIsSet() const
{
    return m_Metric_idIsSet;
}

void V1_Metric::unsetMetric_id()
{
    m_Metric_idIsSet = false;
}
utility::string_t V1_Metric::getDescription() const
{
    return m_Description;
}


void V1_Metric::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool V1_Metric::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void V1_Metric::unsetDescription()
{
    m_DescriptionIsSet = false;
}

}
}
}
}


