/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Options_Strike.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Options_Strike::Options_Strike()
{
    m_Strike_price = 0.0;
    m_Strike_priceIsSet = false;
    m_CallIsSet = false;
    m_PutIsSet = false;
}

Options_Strike::~Options_Strike()
{
}

void Options_Strike::validate()
{
    // TODO: implement validation
}

web::json::value Options_Strike::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Strike_priceIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("strike_price"))] = ModelBase::toJson(m_Strike_price);
    }
    if(m_CallIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("call"))] = ModelBase::toJson(m_Call);
    }
    if(m_PutIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("put"))] = ModelBase::toJson(m_Put);
    }

    return val;
}

bool Options_Strike::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("strike_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("strike_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setStrikePrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStrikePrice);
            setStrikePrice(refVal_setStrikePrice);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("call"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("call")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V1_QuoteTrade> refVal_setCall;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCall);
            setCall(refVal_setCall);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("put"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("put")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V1_QuoteTrade> refVal_setPut;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPut);
            setPut(refVal_setPut);
            
        }
    }
    return ok;
}

void Options_Strike::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Strike_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("strike_price")), m_Strike_price));
    }
    if(m_CallIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("call")), m_Call));
    }
    if(m_PutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("put")), m_Put));
    }
}

bool Options_Strike::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("strike_price"))))
    {
        double refVal_setStrikePrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("strike_price"))), refVal_setStrikePrice );
        setStrikePrice(refVal_setStrikePrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("call"))))
    {
        std::shared_ptr<V1_QuoteTrade> refVal_setCall;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("call"))), refVal_setCall );
        setCall(refVal_setCall);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("put"))))
    {
        std::shared_ptr<V1_QuoteTrade> refVal_setPut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("put"))), refVal_setPut );
        setPut(refVal_setPut);
    }
    return ok;
}


double Options_Strike::getStrikePrice() const
{
    return m_Strike_price;
}

void Options_Strike::setStrikePrice(double value)
{
    m_Strike_price = value;
    m_Strike_priceIsSet = true;
}

bool Options_Strike::strikePriceIsSet() const
{
    return m_Strike_priceIsSet;
}

void Options_Strike::unsetStrike_price()
{
    m_Strike_priceIsSet = false;
}
std::shared_ptr<V1_QuoteTrade> Options_Strike::getCall() const
{
    return m_Call;
}


void Options_Strike::setCall(const std::shared_ptr<V1_QuoteTrade>& value)
{
    m_Call = value;
    m_CallIsSet = true;
}

bool Options_Strike::callIsSet() const
{
    return m_CallIsSet;
}

void Options_Strike::unsetCall()
{
    m_CallIsSet = false;
}
std::shared_ptr<V1_QuoteTrade> Options_Strike::getPut() const
{
    return m_Put;
}


void Options_Strike::setPut(const std::shared_ptr<V1_QuoteTrade>& value)
{
    m_Put = value;
    m_PutIsSet = true;
}

bool Options_Strike::putIsSet() const
{
    return m_PutIsSet;
}

void Options_Strike::unsetPut()
{
    m_PutIsSet = false;
}

}
}
}
}


