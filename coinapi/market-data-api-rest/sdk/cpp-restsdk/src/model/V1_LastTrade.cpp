/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_LastTrade.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_LastTrade::V1_LastTrade()
{
    m_Time_exchange = utility::datetime();
    m_Time_exchangeIsSet = false;
    m_Time_coinapi = utility::datetime();
    m_Time_coinapiIsSet = false;
    m_Uuid = utility::conversions::to_string_t("");
    m_UuidIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_Size = 0.0;
    m_SizeIsSet = false;
    m_Taker_side = utility::conversions::to_string_t("");
    m_Taker_sideIsSet = false;
}

V1_LastTrade::~V1_LastTrade()
{
}

void V1_LastTrade::validate()
{
    // TODO: implement validation
}

web::json::value V1_LastTrade::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Time_exchangeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("time_exchange"))] = ModelBase::toJson(m_Time_exchange);
    }
    if(m_Time_coinapiIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("time_coinapi"))] = ModelBase::toJson(m_Time_coinapi);
    }
    if(m_UuidIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("uuid"))] = ModelBase::toJson(m_Uuid);
    }
    if(m_PriceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("price"))] = ModelBase::toJson(m_Price);
    }
    if(m_SizeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("size"))] = ModelBase::toJson(m_Size);
    }
    if(m_Taker_sideIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("taker_side"))] = ModelBase::toJson(m_Taker_side);
    }

    return val;
}

bool V1_LastTrade::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("time_exchange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("time_exchange")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimeExchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeExchange);
            setTimeExchange(refVal_setTimeExchange);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("time_coinapi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("time_coinapi")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimeCoinapi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeCoinapi);
            setTimeCoinapi(refVal_setTimeCoinapi);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("uuid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("uuid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUuid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUuid);
            setUuid(refVal_setUuid);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("price")));
        if(!fieldValue.is_null())
        {
            double refVal_setPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice);
            setPrice(refVal_setPrice);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("size")));
        if(!fieldValue.is_null())
        {
            double refVal_setSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSize);
            setSize(refVal_setSize);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("taker_side"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("taker_side")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTakerSide;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTakerSide);
            setTakerSide(refVal_setTakerSide);
            
        }
    }
    return ok;
}

void V1_LastTrade::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Time_exchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("time_exchange")), m_Time_exchange));
    }
    if(m_Time_coinapiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("time_coinapi")), m_Time_coinapi));
    }
    if(m_UuidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("uuid")), m_Uuid));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("price")), m_Price));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("size")), m_Size));
    }
    if(m_Taker_sideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("taker_side")), m_Taker_side));
    }
}

bool V1_LastTrade::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("time_exchange"))))
    {
        utility::datetime refVal_setTimeExchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("time_exchange"))), refVal_setTimeExchange );
        setTimeExchange(refVal_setTimeExchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("time_coinapi"))))
    {
        utility::datetime refVal_setTimeCoinapi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("time_coinapi"))), refVal_setTimeCoinapi );
        setTimeCoinapi(refVal_setTimeCoinapi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("uuid"))))
    {
        utility::string_t refVal_setUuid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("uuid"))), refVal_setUuid );
        setUuid(refVal_setUuid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("price"))))
    {
        double refVal_setPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("price"))), refVal_setPrice );
        setPrice(refVal_setPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("size"))))
    {
        double refVal_setSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("size"))), refVal_setSize );
        setSize(refVal_setSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("taker_side"))))
    {
        utility::string_t refVal_setTakerSide;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("taker_side"))), refVal_setTakerSide );
        setTakerSide(refVal_setTakerSide);
    }
    return ok;
}


utility::datetime V1_LastTrade::getTimeExchange() const
{
    return m_Time_exchange;
}


void V1_LastTrade::setTimeExchange(const utility::datetime& value)
{
    m_Time_exchange = value;
    m_Time_exchangeIsSet = true;
}

bool V1_LastTrade::timeExchangeIsSet() const
{
    return m_Time_exchangeIsSet;
}

void V1_LastTrade::unsetTime_exchange()
{
    m_Time_exchangeIsSet = false;
}
utility::datetime V1_LastTrade::getTimeCoinapi() const
{
    return m_Time_coinapi;
}


void V1_LastTrade::setTimeCoinapi(const utility::datetime& value)
{
    m_Time_coinapi = value;
    m_Time_coinapiIsSet = true;
}

bool V1_LastTrade::timeCoinapiIsSet() const
{
    return m_Time_coinapiIsSet;
}

void V1_LastTrade::unsetTime_coinapi()
{
    m_Time_coinapiIsSet = false;
}
utility::string_t V1_LastTrade::getUuid() const
{
    return m_Uuid;
}


void V1_LastTrade::setUuid(const utility::string_t& value)
{
    m_Uuid = value;
    m_UuidIsSet = true;
}

bool V1_LastTrade::uuidIsSet() const
{
    return m_UuidIsSet;
}

void V1_LastTrade::unsetUuid()
{
    m_UuidIsSet = false;
}
double V1_LastTrade::getPrice() const
{
    return m_Price;
}

void V1_LastTrade::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool V1_LastTrade::priceIsSet() const
{
    return m_PriceIsSet;
}

void V1_LastTrade::unsetPrice()
{
    m_PriceIsSet = false;
}
double V1_LastTrade::getSize() const
{
    return m_Size;
}

void V1_LastTrade::setSize(double value)
{
    m_Size = value;
    m_SizeIsSet = true;
}

bool V1_LastTrade::sizeIsSet() const
{
    return m_SizeIsSet;
}

void V1_LastTrade::unsetSize()
{
    m_SizeIsSet = false;
}
utility::string_t V1_LastTrade::getTakerSide() const
{
    return m_Taker_side;
}


void V1_LastTrade::setTakerSide(const utility::string_t& value)
{
    m_Taker_side = value;
    m_Taker_sideIsSet = true;
}

bool V1_LastTrade::takerSideIsSet() const
{
    return m_Taker_sideIsSet;
}

void V1_LastTrade::unsetTaker_side()
{
    m_Taker_sideIsSet = false;
}

}
}
}
}


