/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_Symbol.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_Symbol::V1_Symbol()
{
    m_Symbol_id = utility::conversions::to_string_t("");
    m_Symbol_idIsSet = false;
    m_Exchange_id = utility::conversions::to_string_t("");
    m_Exchange_idIsSet = false;
    m_Symbol_type = utility::conversions::to_string_t("");
    m_Symbol_typeIsSet = false;
    m_Asset_id_base = utility::conversions::to_string_t("");
    m_Asset_id_baseIsSet = false;
    m_Asset_id_quote = utility::conversions::to_string_t("");
    m_Asset_id_quoteIsSet = false;
    m_Asset_id_unit = utility::conversions::to_string_t("");
    m_Asset_id_unitIsSet = false;
    m_Future_contract_unit = 0.0;
    m_Future_contract_unitIsSet = false;
    m_Future_contract_unit_asset = utility::conversions::to_string_t("");
    m_Future_contract_unit_assetIsSet = false;
    m_Future_delivery_time = utility::datetime();
    m_Future_delivery_timeIsSet = false;
    m_Option_type_is_call = false;
    m_Option_type_is_callIsSet = false;
    m_Option_strike_price = 0.0;
    m_Option_strike_priceIsSet = false;
    m_Option_contract_unit = 0.0;
    m_Option_contract_unitIsSet = false;
    m_Option_exercise_style = utility::conversions::to_string_t("");
    m_Option_exercise_styleIsSet = false;
    m_Option_expiration_time = utility::datetime();
    m_Option_expiration_timeIsSet = false;
    m_Contract_delivery_time = utility::datetime();
    m_Contract_delivery_timeIsSet = false;
    m_Contract_unit = 0.0;
    m_Contract_unitIsSet = false;
    m_Contract_unit_asset = utility::conversions::to_string_t("");
    m_Contract_unit_assetIsSet = false;
    m_Contract_id = utility::conversions::to_string_t("");
    m_Contract_idIsSet = false;
    m_Contract_display_name = utility::conversions::to_string_t("");
    m_Contract_display_nameIsSet = false;
    m_Contract_display_description = utility::conversions::to_string_t("");
    m_Contract_display_descriptionIsSet = false;
    m_Data_start = utility::conversions::to_string_t("");
    m_Data_startIsSet = false;
    m_Data_end = utility::conversions::to_string_t("");
    m_Data_endIsSet = false;
    m_Data_quote_start = utility::datetime();
    m_Data_quote_startIsSet = false;
    m_Data_quote_end = utility::datetime();
    m_Data_quote_endIsSet = false;
    m_Data_orderbook_start = utility::datetime();
    m_Data_orderbook_startIsSet = false;
    m_Data_orderbook_end = utility::datetime();
    m_Data_orderbook_endIsSet = false;
    m_Data_trade_start = utility::datetime();
    m_Data_trade_startIsSet = false;
    m_Data_trade_end = utility::datetime();
    m_Data_trade_endIsSet = false;
    m_Index_id = utility::conversions::to_string_t("");
    m_Index_idIsSet = false;
    m_Index_display_name = utility::conversions::to_string_t("");
    m_Index_display_nameIsSet = false;
    m_Index_display_description = utility::conversions::to_string_t("");
    m_Index_display_descriptionIsSet = false;
    m_Volume_1hrs = 0.0;
    m_Volume_1hrsIsSet = false;
    m_Volume_1hrs_usd = 0.0;
    m_Volume_1hrs_usdIsSet = false;
    m_Volume_1day = 0.0;
    m_Volume_1dayIsSet = false;
    m_Volume_1day_usd = 0.0;
    m_Volume_1day_usdIsSet = false;
    m_Volume_1mth = 0.0;
    m_Volume_1mthIsSet = false;
    m_Volume_1mth_usd = 0.0;
    m_Volume_1mth_usdIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_Symbol_id_exchange = utility::conversions::to_string_t("");
    m_Symbol_id_exchangeIsSet = false;
    m_Asset_id_base_exchange = utility::conversions::to_string_t("");
    m_Asset_id_base_exchangeIsSet = false;
    m_Asset_id_quote_exchange = utility::conversions::to_string_t("");
    m_Asset_id_quote_exchangeIsSet = false;
    m_Price_precision = 0.0;
    m_Price_precisionIsSet = false;
    m_Size_precision = 0.0;
    m_Size_precisionIsSet = false;
    m_Raw_kvpIsSet = false;
    m_Volume_to_usd = 0.0;
    m_Volume_to_usdIsSet = false;
}

V1_Symbol::~V1_Symbol()
{
}

void V1_Symbol::validate()
{
    // TODO: implement validation
}

web::json::value V1_Symbol::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Symbol_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("symbol_id"))] = ModelBase::toJson(m_Symbol_id);
    }
    if(m_Exchange_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("exchange_id"))] = ModelBase::toJson(m_Exchange_id);
    }
    if(m_Symbol_typeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("symbol_type"))] = ModelBase::toJson(m_Symbol_type);
    }
    if(m_Asset_id_baseIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("asset_id_base"))] = ModelBase::toJson(m_Asset_id_base);
    }
    if(m_Asset_id_quoteIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("asset_id_quote"))] = ModelBase::toJson(m_Asset_id_quote);
    }
    if(m_Asset_id_unitIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("asset_id_unit"))] = ModelBase::toJson(m_Asset_id_unit);
    }
    if(m_Future_contract_unitIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("future_contract_unit"))] = ModelBase::toJson(m_Future_contract_unit);
    }
    if(m_Future_contract_unit_assetIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("future_contract_unit_asset"))] = ModelBase::toJson(m_Future_contract_unit_asset);
    }
    if(m_Future_delivery_timeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("future_delivery_time"))] = ModelBase::toJson(m_Future_delivery_time);
    }
    if(m_Option_type_is_callIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("option_type_is_call"))] = ModelBase::toJson(m_Option_type_is_call);
    }
    if(m_Option_strike_priceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("option_strike_price"))] = ModelBase::toJson(m_Option_strike_price);
    }
    if(m_Option_contract_unitIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("option_contract_unit"))] = ModelBase::toJson(m_Option_contract_unit);
    }
    if(m_Option_exercise_styleIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("option_exercise_style"))] = ModelBase::toJson(m_Option_exercise_style);
    }
    if(m_Option_expiration_timeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("option_expiration_time"))] = ModelBase::toJson(m_Option_expiration_time);
    }
    if(m_Contract_delivery_timeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("contract_delivery_time"))] = ModelBase::toJson(m_Contract_delivery_time);
    }
    if(m_Contract_unitIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("contract_unit"))] = ModelBase::toJson(m_Contract_unit);
    }
    if(m_Contract_unit_assetIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("contract_unit_asset"))] = ModelBase::toJson(m_Contract_unit_asset);
    }
    if(m_Contract_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("contract_id"))] = ModelBase::toJson(m_Contract_id);
    }
    if(m_Contract_display_nameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("contract_display_name"))] = ModelBase::toJson(m_Contract_display_name);
    }
    if(m_Contract_display_descriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("contract_display_description"))] = ModelBase::toJson(m_Contract_display_description);
    }
    if(m_Data_startIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_start"))] = ModelBase::toJson(m_Data_start);
    }
    if(m_Data_endIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_end"))] = ModelBase::toJson(m_Data_end);
    }
    if(m_Data_quote_startIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_quote_start"))] = ModelBase::toJson(m_Data_quote_start);
    }
    if(m_Data_quote_endIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_quote_end"))] = ModelBase::toJson(m_Data_quote_end);
    }
    if(m_Data_orderbook_startIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_orderbook_start"))] = ModelBase::toJson(m_Data_orderbook_start);
    }
    if(m_Data_orderbook_endIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_orderbook_end"))] = ModelBase::toJson(m_Data_orderbook_end);
    }
    if(m_Data_trade_startIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_trade_start"))] = ModelBase::toJson(m_Data_trade_start);
    }
    if(m_Data_trade_endIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_trade_end"))] = ModelBase::toJson(m_Data_trade_end);
    }
    if(m_Index_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("index_id"))] = ModelBase::toJson(m_Index_id);
    }
    if(m_Index_display_nameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("index_display_name"))] = ModelBase::toJson(m_Index_display_name);
    }
    if(m_Index_display_descriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("index_display_description"))] = ModelBase::toJson(m_Index_display_description);
    }
    if(m_Volume_1hrsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("volume_1hrs"))] = ModelBase::toJson(m_Volume_1hrs);
    }
    if(m_Volume_1hrs_usdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("volume_1hrs_usd"))] = ModelBase::toJson(m_Volume_1hrs_usd);
    }
    if(m_Volume_1dayIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("volume_1day"))] = ModelBase::toJson(m_Volume_1day);
    }
    if(m_Volume_1day_usdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("volume_1day_usd"))] = ModelBase::toJson(m_Volume_1day_usd);
    }
    if(m_Volume_1mthIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("volume_1mth"))] = ModelBase::toJson(m_Volume_1mth);
    }
    if(m_Volume_1mth_usdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("volume_1mth_usd"))] = ModelBase::toJson(m_Volume_1mth_usd);
    }
    if(m_PriceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("price"))] = ModelBase::toJson(m_Price);
    }
    if(m_Symbol_id_exchangeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("symbol_id_exchange"))] = ModelBase::toJson(m_Symbol_id_exchange);
    }
    if(m_Asset_id_base_exchangeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("asset_id_base_exchange"))] = ModelBase::toJson(m_Asset_id_base_exchange);
    }
    if(m_Asset_id_quote_exchangeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("asset_id_quote_exchange"))] = ModelBase::toJson(m_Asset_id_quote_exchange);
    }
    if(m_Price_precisionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("price_precision"))] = ModelBase::toJson(m_Price_precision);
    }
    if(m_Size_precisionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("size_precision"))] = ModelBase::toJson(m_Size_precision);
    }
    if(m_Raw_kvpIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("raw_kvp"))] = ModelBase::toJson(m_Raw_kvp);
    }
    if(m_Volume_to_usdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("volume_to_usd"))] = ModelBase::toJson(m_Volume_to_usd);
    }

    return val;
}

bool V1_Symbol::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("symbol_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("symbol_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolId);
            setSymbolId(refVal_setSymbolId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("exchange_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("exchange_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExchangeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExchangeId);
            setExchangeId(refVal_setExchangeId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("symbol_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("symbol_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolType);
            setSymbolType(refVal_setSymbolType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("asset_id_base"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("asset_id_base")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetIdBase;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetIdBase);
            setAssetIdBase(refVal_setAssetIdBase);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetIdQuote;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetIdQuote);
            setAssetIdQuote(refVal_setAssetIdQuote);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("asset_id_unit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("asset_id_unit")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetIdUnit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetIdUnit);
            setAssetIdUnit(refVal_setAssetIdUnit);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("future_contract_unit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("future_contract_unit")));
        if(!fieldValue.is_null())
        {
            double refVal_setFutureContractUnit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFutureContractUnit);
            setFutureContractUnit(refVal_setFutureContractUnit);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("future_contract_unit_asset"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("future_contract_unit_asset")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFutureContractUnitAsset;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFutureContractUnitAsset);
            setFutureContractUnitAsset(refVal_setFutureContractUnitAsset);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("future_delivery_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("future_delivery_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setFutureDeliveryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFutureDeliveryTime);
            setFutureDeliveryTime(refVal_setFutureDeliveryTime);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("option_type_is_call"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("option_type_is_call")));
        if(!fieldValue.is_null())
        {
            bool refVal_setOptionTypeIsCall;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOptionTypeIsCall);
            setOptionTypeIsCall(refVal_setOptionTypeIsCall);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("option_strike_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("option_strike_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setOptionStrikePrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOptionStrikePrice);
            setOptionStrikePrice(refVal_setOptionStrikePrice);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("option_contract_unit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("option_contract_unit")));
        if(!fieldValue.is_null())
        {
            double refVal_setOptionContractUnit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOptionContractUnit);
            setOptionContractUnit(refVal_setOptionContractUnit);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("option_exercise_style"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("option_exercise_style")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOptionExerciseStyle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOptionExerciseStyle);
            setOptionExerciseStyle(refVal_setOptionExerciseStyle);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("option_expiration_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("option_expiration_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setOptionExpirationTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOptionExpirationTime);
            setOptionExpirationTime(refVal_setOptionExpirationTime);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("contract_delivery_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("contract_delivery_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setContractDeliveryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContractDeliveryTime);
            setContractDeliveryTime(refVal_setContractDeliveryTime);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("contract_unit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("contract_unit")));
        if(!fieldValue.is_null())
        {
            double refVal_setContractUnit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContractUnit);
            setContractUnit(refVal_setContractUnit);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("contract_unit_asset"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("contract_unit_asset")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContractUnitAsset;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContractUnitAsset);
            setContractUnitAsset(refVal_setContractUnitAsset);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("contract_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("contract_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContractId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContractId);
            setContractId(refVal_setContractId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("contract_display_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("contract_display_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContractDisplayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContractDisplayName);
            setContractDisplayName(refVal_setContractDisplayName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("contract_display_description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("contract_display_description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContractDisplayDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContractDisplayDescription);
            setContractDisplayDescription(refVal_setContractDisplayDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_start")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDataStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataStart);
            setDataStart(refVal_setDataStart);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_end")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDataEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataEnd);
            setDataEnd(refVal_setDataEnd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_quote_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_quote_start")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDataQuoteStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataQuoteStart);
            setDataQuoteStart(refVal_setDataQuoteStart);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_quote_end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_quote_end")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDataQuoteEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataQuoteEnd);
            setDataQuoteEnd(refVal_setDataQuoteEnd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_start")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDataOrderbookStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataOrderbookStart);
            setDataOrderbookStart(refVal_setDataOrderbookStart);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_end")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDataOrderbookEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataOrderbookEnd);
            setDataOrderbookEnd(refVal_setDataOrderbookEnd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_trade_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_trade_start")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDataTradeStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataTradeStart);
            setDataTradeStart(refVal_setDataTradeStart);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_trade_end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_trade_end")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDataTradeEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataTradeEnd);
            setDataTradeEnd(refVal_setDataTradeEnd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("index_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("index_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIndexId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIndexId);
            setIndexId(refVal_setIndexId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("index_display_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("index_display_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIndexDisplayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIndexDisplayName);
            setIndexDisplayName(refVal_setIndexDisplayName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("index_display_description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("index_display_description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIndexDisplayDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIndexDisplayDescription);
            setIndexDisplayDescription(refVal_setIndexDisplayDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("volume_1hrs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("volume_1hrs")));
        if(!fieldValue.is_null())
        {
            double refVal_setVolume1hrs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolume1hrs);
            setVolume1hrs(refVal_setVolume1hrs);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("volume_1hrs_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("volume_1hrs_usd")));
        if(!fieldValue.is_null())
        {
            double refVal_setVolume1hrsUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolume1hrsUsd);
            setVolume1hrsUsd(refVal_setVolume1hrsUsd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("volume_1day"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("volume_1day")));
        if(!fieldValue.is_null())
        {
            double refVal_setVolume1day;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolume1day);
            setVolume1day(refVal_setVolume1day);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("volume_1day_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("volume_1day_usd")));
        if(!fieldValue.is_null())
        {
            double refVal_setVolume1dayUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolume1dayUsd);
            setVolume1dayUsd(refVal_setVolume1dayUsd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("volume_1mth"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("volume_1mth")));
        if(!fieldValue.is_null())
        {
            double refVal_setVolume1mth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolume1mth);
            setVolume1mth(refVal_setVolume1mth);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("volume_1mth_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("volume_1mth_usd")));
        if(!fieldValue.is_null())
        {
            double refVal_setVolume1mthUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolume1mthUsd);
            setVolume1mthUsd(refVal_setVolume1mthUsd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("price")));
        if(!fieldValue.is_null())
        {
            double refVal_setPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice);
            setPrice(refVal_setPrice);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("symbol_id_exchange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("symbol_id_exchange")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolIdExchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolIdExchange);
            setSymbolIdExchange(refVal_setSymbolIdExchange);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("asset_id_base_exchange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("asset_id_base_exchange")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetIdBaseExchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetIdBaseExchange);
            setAssetIdBaseExchange(refVal_setAssetIdBaseExchange);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote_exchange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote_exchange")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetIdQuoteExchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetIdQuoteExchange);
            setAssetIdQuoteExchange(refVal_setAssetIdQuoteExchange);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("price_precision"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("price_precision")));
        if(!fieldValue.is_null())
        {
            double refVal_setPricePrecision;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPricePrecision);
            setPricePrecision(refVal_setPricePrecision);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("size_precision"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("size_precision")));
        if(!fieldValue.is_null())
        {
            double refVal_setSizePrecision;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSizePrecision);
            setSizePrecision(refVal_setSizePrecision);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("raw_kvp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("raw_kvp")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_setRawKvp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRawKvp);
            setRawKvp(refVal_setRawKvp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("volume_to_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("volume_to_usd")));
        if(!fieldValue.is_null())
        {
            double refVal_setVolumeToUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolumeToUsd);
            setVolumeToUsd(refVal_setVolumeToUsd);
            
        }
    }
    return ok;
}

void V1_Symbol::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Symbol_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("symbol_id")), m_Symbol_id));
    }
    if(m_Exchange_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("exchange_id")), m_Exchange_id));
    }
    if(m_Symbol_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("symbol_type")), m_Symbol_type));
    }
    if(m_Asset_id_baseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("asset_id_base")), m_Asset_id_base));
    }
    if(m_Asset_id_quoteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("asset_id_quote")), m_Asset_id_quote));
    }
    if(m_Asset_id_unitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("asset_id_unit")), m_Asset_id_unit));
    }
    if(m_Future_contract_unitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("future_contract_unit")), m_Future_contract_unit));
    }
    if(m_Future_contract_unit_assetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("future_contract_unit_asset")), m_Future_contract_unit_asset));
    }
    if(m_Future_delivery_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("future_delivery_time")), m_Future_delivery_time));
    }
    if(m_Option_type_is_callIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("option_type_is_call")), m_Option_type_is_call));
    }
    if(m_Option_strike_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("option_strike_price")), m_Option_strike_price));
    }
    if(m_Option_contract_unitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("option_contract_unit")), m_Option_contract_unit));
    }
    if(m_Option_exercise_styleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("option_exercise_style")), m_Option_exercise_style));
    }
    if(m_Option_expiration_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("option_expiration_time")), m_Option_expiration_time));
    }
    if(m_Contract_delivery_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("contract_delivery_time")), m_Contract_delivery_time));
    }
    if(m_Contract_unitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("contract_unit")), m_Contract_unit));
    }
    if(m_Contract_unit_assetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("contract_unit_asset")), m_Contract_unit_asset));
    }
    if(m_Contract_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("contract_id")), m_Contract_id));
    }
    if(m_Contract_display_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("contract_display_name")), m_Contract_display_name));
    }
    if(m_Contract_display_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("contract_display_description")), m_Contract_display_description));
    }
    if(m_Data_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_start")), m_Data_start));
    }
    if(m_Data_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_end")), m_Data_end));
    }
    if(m_Data_quote_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_quote_start")), m_Data_quote_start));
    }
    if(m_Data_quote_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_quote_end")), m_Data_quote_end));
    }
    if(m_Data_orderbook_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_orderbook_start")), m_Data_orderbook_start));
    }
    if(m_Data_orderbook_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_orderbook_end")), m_Data_orderbook_end));
    }
    if(m_Data_trade_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_trade_start")), m_Data_trade_start));
    }
    if(m_Data_trade_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_trade_end")), m_Data_trade_end));
    }
    if(m_Index_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("index_id")), m_Index_id));
    }
    if(m_Index_display_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("index_display_name")), m_Index_display_name));
    }
    if(m_Index_display_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("index_display_description")), m_Index_display_description));
    }
    if(m_Volume_1hrsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("volume_1hrs")), m_Volume_1hrs));
    }
    if(m_Volume_1hrs_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("volume_1hrs_usd")), m_Volume_1hrs_usd));
    }
    if(m_Volume_1dayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("volume_1day")), m_Volume_1day));
    }
    if(m_Volume_1day_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("volume_1day_usd")), m_Volume_1day_usd));
    }
    if(m_Volume_1mthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("volume_1mth")), m_Volume_1mth));
    }
    if(m_Volume_1mth_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("volume_1mth_usd")), m_Volume_1mth_usd));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("price")), m_Price));
    }
    if(m_Symbol_id_exchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("symbol_id_exchange")), m_Symbol_id_exchange));
    }
    if(m_Asset_id_base_exchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("asset_id_base_exchange")), m_Asset_id_base_exchange));
    }
    if(m_Asset_id_quote_exchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("asset_id_quote_exchange")), m_Asset_id_quote_exchange));
    }
    if(m_Price_precisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("price_precision")), m_Price_precision));
    }
    if(m_Size_precisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("size_precision")), m_Size_precision));
    }
    if(m_Raw_kvpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("raw_kvp")), m_Raw_kvp));
    }
    if(m_Volume_to_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("volume_to_usd")), m_Volume_to_usd));
    }
}

bool V1_Symbol::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("symbol_id"))))
    {
        utility::string_t refVal_setSymbolId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("symbol_id"))), refVal_setSymbolId );
        setSymbolId(refVal_setSymbolId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("exchange_id"))))
    {
        utility::string_t refVal_setExchangeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("exchange_id"))), refVal_setExchangeId );
        setExchangeId(refVal_setExchangeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("symbol_type"))))
    {
        utility::string_t refVal_setSymbolType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("symbol_type"))), refVal_setSymbolType );
        setSymbolType(refVal_setSymbolType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_base"))))
    {
        utility::string_t refVal_setAssetIdBase;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_base"))), refVal_setAssetIdBase );
        setAssetIdBase(refVal_setAssetIdBase);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote"))))
    {
        utility::string_t refVal_setAssetIdQuote;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote"))), refVal_setAssetIdQuote );
        setAssetIdQuote(refVal_setAssetIdQuote);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_unit"))))
    {
        utility::string_t refVal_setAssetIdUnit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_unit"))), refVal_setAssetIdUnit );
        setAssetIdUnit(refVal_setAssetIdUnit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("future_contract_unit"))))
    {
        double refVal_setFutureContractUnit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("future_contract_unit"))), refVal_setFutureContractUnit );
        setFutureContractUnit(refVal_setFutureContractUnit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("future_contract_unit_asset"))))
    {
        utility::string_t refVal_setFutureContractUnitAsset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("future_contract_unit_asset"))), refVal_setFutureContractUnitAsset );
        setFutureContractUnitAsset(refVal_setFutureContractUnitAsset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("future_delivery_time"))))
    {
        utility::datetime refVal_setFutureDeliveryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("future_delivery_time"))), refVal_setFutureDeliveryTime );
        setFutureDeliveryTime(refVal_setFutureDeliveryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("option_type_is_call"))))
    {
        bool refVal_setOptionTypeIsCall;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("option_type_is_call"))), refVal_setOptionTypeIsCall );
        setOptionTypeIsCall(refVal_setOptionTypeIsCall);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("option_strike_price"))))
    {
        double refVal_setOptionStrikePrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("option_strike_price"))), refVal_setOptionStrikePrice );
        setOptionStrikePrice(refVal_setOptionStrikePrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("option_contract_unit"))))
    {
        double refVal_setOptionContractUnit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("option_contract_unit"))), refVal_setOptionContractUnit );
        setOptionContractUnit(refVal_setOptionContractUnit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("option_exercise_style"))))
    {
        utility::string_t refVal_setOptionExerciseStyle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("option_exercise_style"))), refVal_setOptionExerciseStyle );
        setOptionExerciseStyle(refVal_setOptionExerciseStyle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("option_expiration_time"))))
    {
        utility::datetime refVal_setOptionExpirationTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("option_expiration_time"))), refVal_setOptionExpirationTime );
        setOptionExpirationTime(refVal_setOptionExpirationTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("contract_delivery_time"))))
    {
        utility::datetime refVal_setContractDeliveryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("contract_delivery_time"))), refVal_setContractDeliveryTime );
        setContractDeliveryTime(refVal_setContractDeliveryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("contract_unit"))))
    {
        double refVal_setContractUnit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("contract_unit"))), refVal_setContractUnit );
        setContractUnit(refVal_setContractUnit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("contract_unit_asset"))))
    {
        utility::string_t refVal_setContractUnitAsset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("contract_unit_asset"))), refVal_setContractUnitAsset );
        setContractUnitAsset(refVal_setContractUnitAsset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("contract_id"))))
    {
        utility::string_t refVal_setContractId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("contract_id"))), refVal_setContractId );
        setContractId(refVal_setContractId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("contract_display_name"))))
    {
        utility::string_t refVal_setContractDisplayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("contract_display_name"))), refVal_setContractDisplayName );
        setContractDisplayName(refVal_setContractDisplayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("contract_display_description"))))
    {
        utility::string_t refVal_setContractDisplayDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("contract_display_description"))), refVal_setContractDisplayDescription );
        setContractDisplayDescription(refVal_setContractDisplayDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_start"))))
    {
        utility::string_t refVal_setDataStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_start"))), refVal_setDataStart );
        setDataStart(refVal_setDataStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_end"))))
    {
        utility::string_t refVal_setDataEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_end"))), refVal_setDataEnd );
        setDataEnd(refVal_setDataEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_quote_start"))))
    {
        utility::datetime refVal_setDataQuoteStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_quote_start"))), refVal_setDataQuoteStart );
        setDataQuoteStart(refVal_setDataQuoteStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_quote_end"))))
    {
        utility::datetime refVal_setDataQuoteEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_quote_end"))), refVal_setDataQuoteEnd );
        setDataQuoteEnd(refVal_setDataQuoteEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_start"))))
    {
        utility::datetime refVal_setDataOrderbookStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_start"))), refVal_setDataOrderbookStart );
        setDataOrderbookStart(refVal_setDataOrderbookStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_end"))))
    {
        utility::datetime refVal_setDataOrderbookEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_end"))), refVal_setDataOrderbookEnd );
        setDataOrderbookEnd(refVal_setDataOrderbookEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_trade_start"))))
    {
        utility::datetime refVal_setDataTradeStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_trade_start"))), refVal_setDataTradeStart );
        setDataTradeStart(refVal_setDataTradeStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_trade_end"))))
    {
        utility::datetime refVal_setDataTradeEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_trade_end"))), refVal_setDataTradeEnd );
        setDataTradeEnd(refVal_setDataTradeEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("index_id"))))
    {
        utility::string_t refVal_setIndexId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("index_id"))), refVal_setIndexId );
        setIndexId(refVal_setIndexId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("index_display_name"))))
    {
        utility::string_t refVal_setIndexDisplayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("index_display_name"))), refVal_setIndexDisplayName );
        setIndexDisplayName(refVal_setIndexDisplayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("index_display_description"))))
    {
        utility::string_t refVal_setIndexDisplayDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("index_display_description"))), refVal_setIndexDisplayDescription );
        setIndexDisplayDescription(refVal_setIndexDisplayDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("volume_1hrs"))))
    {
        double refVal_setVolume1hrs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("volume_1hrs"))), refVal_setVolume1hrs );
        setVolume1hrs(refVal_setVolume1hrs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("volume_1hrs_usd"))))
    {
        double refVal_setVolume1hrsUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("volume_1hrs_usd"))), refVal_setVolume1hrsUsd );
        setVolume1hrsUsd(refVal_setVolume1hrsUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("volume_1day"))))
    {
        double refVal_setVolume1day;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("volume_1day"))), refVal_setVolume1day );
        setVolume1day(refVal_setVolume1day);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("volume_1day_usd"))))
    {
        double refVal_setVolume1dayUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("volume_1day_usd"))), refVal_setVolume1dayUsd );
        setVolume1dayUsd(refVal_setVolume1dayUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("volume_1mth"))))
    {
        double refVal_setVolume1mth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("volume_1mth"))), refVal_setVolume1mth );
        setVolume1mth(refVal_setVolume1mth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("volume_1mth_usd"))))
    {
        double refVal_setVolume1mthUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("volume_1mth_usd"))), refVal_setVolume1mthUsd );
        setVolume1mthUsd(refVal_setVolume1mthUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("price"))))
    {
        double refVal_setPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("price"))), refVal_setPrice );
        setPrice(refVal_setPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("symbol_id_exchange"))))
    {
        utility::string_t refVal_setSymbolIdExchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("symbol_id_exchange"))), refVal_setSymbolIdExchange );
        setSymbolIdExchange(refVal_setSymbolIdExchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_base_exchange"))))
    {
        utility::string_t refVal_setAssetIdBaseExchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_base_exchange"))), refVal_setAssetIdBaseExchange );
        setAssetIdBaseExchange(refVal_setAssetIdBaseExchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote_exchange"))))
    {
        utility::string_t refVal_setAssetIdQuoteExchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote_exchange"))), refVal_setAssetIdQuoteExchange );
        setAssetIdQuoteExchange(refVal_setAssetIdQuoteExchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("price_precision"))))
    {
        double refVal_setPricePrecision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("price_precision"))), refVal_setPricePrecision );
        setPricePrecision(refVal_setPricePrecision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("size_precision"))))
    {
        double refVal_setSizePrecision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("size_precision"))), refVal_setSizePrecision );
        setSizePrecision(refVal_setSizePrecision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("raw_kvp"))))
    {
        std::map<utility::string_t, utility::string_t> refVal_setRawKvp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("raw_kvp"))), refVal_setRawKvp );
        setRawKvp(refVal_setRawKvp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("volume_to_usd"))))
    {
        double refVal_setVolumeToUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("volume_to_usd"))), refVal_setVolumeToUsd );
        setVolumeToUsd(refVal_setVolumeToUsd);
    }
    return ok;
}


utility::string_t V1_Symbol::getSymbolId() const
{
    return m_Symbol_id;
}


void V1_Symbol::setSymbolId(const utility::string_t& value)
{
    m_Symbol_id = value;
    m_Symbol_idIsSet = true;
}

bool V1_Symbol::symbolIdIsSet() const
{
    return m_Symbol_idIsSet;
}

void V1_Symbol::unsetSymbol_id()
{
    m_Symbol_idIsSet = false;
}
utility::string_t V1_Symbol::getExchangeId() const
{
    return m_Exchange_id;
}


void V1_Symbol::setExchangeId(const utility::string_t& value)
{
    m_Exchange_id = value;
    m_Exchange_idIsSet = true;
}

bool V1_Symbol::exchangeIdIsSet() const
{
    return m_Exchange_idIsSet;
}

void V1_Symbol::unsetExchange_id()
{
    m_Exchange_idIsSet = false;
}
utility::string_t V1_Symbol::getSymbolType() const
{
    return m_Symbol_type;
}


void V1_Symbol::setSymbolType(const utility::string_t& value)
{
    m_Symbol_type = value;
    m_Symbol_typeIsSet = true;
}

bool V1_Symbol::symbolTypeIsSet() const
{
    return m_Symbol_typeIsSet;
}

void V1_Symbol::unsetSymbol_type()
{
    m_Symbol_typeIsSet = false;
}
utility::string_t V1_Symbol::getAssetIdBase() const
{
    return m_Asset_id_base;
}


void V1_Symbol::setAssetIdBase(const utility::string_t& value)
{
    m_Asset_id_base = value;
    m_Asset_id_baseIsSet = true;
}

bool V1_Symbol::assetIdBaseIsSet() const
{
    return m_Asset_id_baseIsSet;
}

void V1_Symbol::unsetAsset_id_base()
{
    m_Asset_id_baseIsSet = false;
}
utility::string_t V1_Symbol::getAssetIdQuote() const
{
    return m_Asset_id_quote;
}


void V1_Symbol::setAssetIdQuote(const utility::string_t& value)
{
    m_Asset_id_quote = value;
    m_Asset_id_quoteIsSet = true;
}

bool V1_Symbol::assetIdQuoteIsSet() const
{
    return m_Asset_id_quoteIsSet;
}

void V1_Symbol::unsetAsset_id_quote()
{
    m_Asset_id_quoteIsSet = false;
}
utility::string_t V1_Symbol::getAssetIdUnit() const
{
    return m_Asset_id_unit;
}


void V1_Symbol::setAssetIdUnit(const utility::string_t& value)
{
    m_Asset_id_unit = value;
    m_Asset_id_unitIsSet = true;
}

bool V1_Symbol::assetIdUnitIsSet() const
{
    return m_Asset_id_unitIsSet;
}

void V1_Symbol::unsetAsset_id_unit()
{
    m_Asset_id_unitIsSet = false;
}
double V1_Symbol::getFutureContractUnit() const
{
    return m_Future_contract_unit;
}

void V1_Symbol::setFutureContractUnit(double value)
{
    m_Future_contract_unit = value;
    m_Future_contract_unitIsSet = true;
}

bool V1_Symbol::futureContractUnitIsSet() const
{
    return m_Future_contract_unitIsSet;
}

void V1_Symbol::unsetFuture_contract_unit()
{
    m_Future_contract_unitIsSet = false;
}
utility::string_t V1_Symbol::getFutureContractUnitAsset() const
{
    return m_Future_contract_unit_asset;
}


void V1_Symbol::setFutureContractUnitAsset(const utility::string_t& value)
{
    m_Future_contract_unit_asset = value;
    m_Future_contract_unit_assetIsSet = true;
}

bool V1_Symbol::futureContractUnitAssetIsSet() const
{
    return m_Future_contract_unit_assetIsSet;
}

void V1_Symbol::unsetFuture_contract_unit_asset()
{
    m_Future_contract_unit_assetIsSet = false;
}
utility::datetime V1_Symbol::getFutureDeliveryTime() const
{
    return m_Future_delivery_time;
}


void V1_Symbol::setFutureDeliveryTime(const utility::datetime& value)
{
    m_Future_delivery_time = value;
    m_Future_delivery_timeIsSet = true;
}

bool V1_Symbol::futureDeliveryTimeIsSet() const
{
    return m_Future_delivery_timeIsSet;
}

void V1_Symbol::unsetFuture_delivery_time()
{
    m_Future_delivery_timeIsSet = false;
}
bool V1_Symbol::isOptionTypeIsCall() const
{
    return m_Option_type_is_call;
}

void V1_Symbol::setOptionTypeIsCall(bool value)
{
    m_Option_type_is_call = value;
    m_Option_type_is_callIsSet = true;
}

bool V1_Symbol::optionTypeIsCallIsSet() const
{
    return m_Option_type_is_callIsSet;
}

void V1_Symbol::unsetOption_type_is_call()
{
    m_Option_type_is_callIsSet = false;
}
double V1_Symbol::getOptionStrikePrice() const
{
    return m_Option_strike_price;
}

void V1_Symbol::setOptionStrikePrice(double value)
{
    m_Option_strike_price = value;
    m_Option_strike_priceIsSet = true;
}

bool V1_Symbol::optionStrikePriceIsSet() const
{
    return m_Option_strike_priceIsSet;
}

void V1_Symbol::unsetOption_strike_price()
{
    m_Option_strike_priceIsSet = false;
}
double V1_Symbol::getOptionContractUnit() const
{
    return m_Option_contract_unit;
}

void V1_Symbol::setOptionContractUnit(double value)
{
    m_Option_contract_unit = value;
    m_Option_contract_unitIsSet = true;
}

bool V1_Symbol::optionContractUnitIsSet() const
{
    return m_Option_contract_unitIsSet;
}

void V1_Symbol::unsetOption_contract_unit()
{
    m_Option_contract_unitIsSet = false;
}
utility::string_t V1_Symbol::getOptionExerciseStyle() const
{
    return m_Option_exercise_style;
}


void V1_Symbol::setOptionExerciseStyle(const utility::string_t& value)
{
    m_Option_exercise_style = value;
    m_Option_exercise_styleIsSet = true;
}

bool V1_Symbol::optionExerciseStyleIsSet() const
{
    return m_Option_exercise_styleIsSet;
}

void V1_Symbol::unsetOption_exercise_style()
{
    m_Option_exercise_styleIsSet = false;
}
utility::datetime V1_Symbol::getOptionExpirationTime() const
{
    return m_Option_expiration_time;
}


void V1_Symbol::setOptionExpirationTime(const utility::datetime& value)
{
    m_Option_expiration_time = value;
    m_Option_expiration_timeIsSet = true;
}

bool V1_Symbol::optionExpirationTimeIsSet() const
{
    return m_Option_expiration_timeIsSet;
}

void V1_Symbol::unsetOption_expiration_time()
{
    m_Option_expiration_timeIsSet = false;
}
utility::datetime V1_Symbol::getContractDeliveryTime() const
{
    return m_Contract_delivery_time;
}


void V1_Symbol::setContractDeliveryTime(const utility::datetime& value)
{
    m_Contract_delivery_time = value;
    m_Contract_delivery_timeIsSet = true;
}

bool V1_Symbol::contractDeliveryTimeIsSet() const
{
    return m_Contract_delivery_timeIsSet;
}

void V1_Symbol::unsetContract_delivery_time()
{
    m_Contract_delivery_timeIsSet = false;
}
double V1_Symbol::getContractUnit() const
{
    return m_Contract_unit;
}

void V1_Symbol::setContractUnit(double value)
{
    m_Contract_unit = value;
    m_Contract_unitIsSet = true;
}

bool V1_Symbol::contractUnitIsSet() const
{
    return m_Contract_unitIsSet;
}

void V1_Symbol::unsetContract_unit()
{
    m_Contract_unitIsSet = false;
}
utility::string_t V1_Symbol::getContractUnitAsset() const
{
    return m_Contract_unit_asset;
}


void V1_Symbol::setContractUnitAsset(const utility::string_t& value)
{
    m_Contract_unit_asset = value;
    m_Contract_unit_assetIsSet = true;
}

bool V1_Symbol::contractUnitAssetIsSet() const
{
    return m_Contract_unit_assetIsSet;
}

void V1_Symbol::unsetContract_unit_asset()
{
    m_Contract_unit_assetIsSet = false;
}
utility::string_t V1_Symbol::getContractId() const
{
    return m_Contract_id;
}


void V1_Symbol::setContractId(const utility::string_t& value)
{
    m_Contract_id = value;
    m_Contract_idIsSet = true;
}

bool V1_Symbol::contractIdIsSet() const
{
    return m_Contract_idIsSet;
}

void V1_Symbol::unsetContract_id()
{
    m_Contract_idIsSet = false;
}
utility::string_t V1_Symbol::getContractDisplayName() const
{
    return m_Contract_display_name;
}


void V1_Symbol::setContractDisplayName(const utility::string_t& value)
{
    m_Contract_display_name = value;
    m_Contract_display_nameIsSet = true;
}

bool V1_Symbol::contractDisplayNameIsSet() const
{
    return m_Contract_display_nameIsSet;
}

void V1_Symbol::unsetContract_display_name()
{
    m_Contract_display_nameIsSet = false;
}
utility::string_t V1_Symbol::getContractDisplayDescription() const
{
    return m_Contract_display_description;
}


void V1_Symbol::setContractDisplayDescription(const utility::string_t& value)
{
    m_Contract_display_description = value;
    m_Contract_display_descriptionIsSet = true;
}

bool V1_Symbol::contractDisplayDescriptionIsSet() const
{
    return m_Contract_display_descriptionIsSet;
}

void V1_Symbol::unsetContract_display_description()
{
    m_Contract_display_descriptionIsSet = false;
}
utility::string_t V1_Symbol::getDataStart() const
{
    return m_Data_start;
}


void V1_Symbol::setDataStart(const utility::string_t& value)
{
    m_Data_start = value;
    m_Data_startIsSet = true;
}

bool V1_Symbol::dataStartIsSet() const
{
    return m_Data_startIsSet;
}

void V1_Symbol::unsetData_start()
{
    m_Data_startIsSet = false;
}
utility::string_t V1_Symbol::getDataEnd() const
{
    return m_Data_end;
}


void V1_Symbol::setDataEnd(const utility::string_t& value)
{
    m_Data_end = value;
    m_Data_endIsSet = true;
}

bool V1_Symbol::dataEndIsSet() const
{
    return m_Data_endIsSet;
}

void V1_Symbol::unsetData_end()
{
    m_Data_endIsSet = false;
}
utility::datetime V1_Symbol::getDataQuoteStart() const
{
    return m_Data_quote_start;
}


void V1_Symbol::setDataQuoteStart(const utility::datetime& value)
{
    m_Data_quote_start = value;
    m_Data_quote_startIsSet = true;
}

bool V1_Symbol::dataQuoteStartIsSet() const
{
    return m_Data_quote_startIsSet;
}

void V1_Symbol::unsetData_quote_start()
{
    m_Data_quote_startIsSet = false;
}
utility::datetime V1_Symbol::getDataQuoteEnd() const
{
    return m_Data_quote_end;
}


void V1_Symbol::setDataQuoteEnd(const utility::datetime& value)
{
    m_Data_quote_end = value;
    m_Data_quote_endIsSet = true;
}

bool V1_Symbol::dataQuoteEndIsSet() const
{
    return m_Data_quote_endIsSet;
}

void V1_Symbol::unsetData_quote_end()
{
    m_Data_quote_endIsSet = false;
}
utility::datetime V1_Symbol::getDataOrderbookStart() const
{
    return m_Data_orderbook_start;
}


void V1_Symbol::setDataOrderbookStart(const utility::datetime& value)
{
    m_Data_orderbook_start = value;
    m_Data_orderbook_startIsSet = true;
}

bool V1_Symbol::dataOrderbookStartIsSet() const
{
    return m_Data_orderbook_startIsSet;
}

void V1_Symbol::unsetData_orderbook_start()
{
    m_Data_orderbook_startIsSet = false;
}
utility::datetime V1_Symbol::getDataOrderbookEnd() const
{
    return m_Data_orderbook_end;
}


void V1_Symbol::setDataOrderbookEnd(const utility::datetime& value)
{
    m_Data_orderbook_end = value;
    m_Data_orderbook_endIsSet = true;
}

bool V1_Symbol::dataOrderbookEndIsSet() const
{
    return m_Data_orderbook_endIsSet;
}

void V1_Symbol::unsetData_orderbook_end()
{
    m_Data_orderbook_endIsSet = false;
}
utility::datetime V1_Symbol::getDataTradeStart() const
{
    return m_Data_trade_start;
}


void V1_Symbol::setDataTradeStart(const utility::datetime& value)
{
    m_Data_trade_start = value;
    m_Data_trade_startIsSet = true;
}

bool V1_Symbol::dataTradeStartIsSet() const
{
    return m_Data_trade_startIsSet;
}

void V1_Symbol::unsetData_trade_start()
{
    m_Data_trade_startIsSet = false;
}
utility::datetime V1_Symbol::getDataTradeEnd() const
{
    return m_Data_trade_end;
}


void V1_Symbol::setDataTradeEnd(const utility::datetime& value)
{
    m_Data_trade_end = value;
    m_Data_trade_endIsSet = true;
}

bool V1_Symbol::dataTradeEndIsSet() const
{
    return m_Data_trade_endIsSet;
}

void V1_Symbol::unsetData_trade_end()
{
    m_Data_trade_endIsSet = false;
}
utility::string_t V1_Symbol::getIndexId() const
{
    return m_Index_id;
}


void V1_Symbol::setIndexId(const utility::string_t& value)
{
    m_Index_id = value;
    m_Index_idIsSet = true;
}

bool V1_Symbol::indexIdIsSet() const
{
    return m_Index_idIsSet;
}

void V1_Symbol::unsetIndex_id()
{
    m_Index_idIsSet = false;
}
utility::string_t V1_Symbol::getIndexDisplayName() const
{
    return m_Index_display_name;
}


void V1_Symbol::setIndexDisplayName(const utility::string_t& value)
{
    m_Index_display_name = value;
    m_Index_display_nameIsSet = true;
}

bool V1_Symbol::indexDisplayNameIsSet() const
{
    return m_Index_display_nameIsSet;
}

void V1_Symbol::unsetIndex_display_name()
{
    m_Index_display_nameIsSet = false;
}
utility::string_t V1_Symbol::getIndexDisplayDescription() const
{
    return m_Index_display_description;
}


void V1_Symbol::setIndexDisplayDescription(const utility::string_t& value)
{
    m_Index_display_description = value;
    m_Index_display_descriptionIsSet = true;
}

bool V1_Symbol::indexDisplayDescriptionIsSet() const
{
    return m_Index_display_descriptionIsSet;
}

void V1_Symbol::unsetIndex_display_description()
{
    m_Index_display_descriptionIsSet = false;
}
double V1_Symbol::getVolume1hrs() const
{
    return m_Volume_1hrs;
}

void V1_Symbol::setVolume1hrs(double value)
{
    m_Volume_1hrs = value;
    m_Volume_1hrsIsSet = true;
}

bool V1_Symbol::volume1hrsIsSet() const
{
    return m_Volume_1hrsIsSet;
}

void V1_Symbol::unsetVolume_1hrs()
{
    m_Volume_1hrsIsSet = false;
}
double V1_Symbol::getVolume1hrsUsd() const
{
    return m_Volume_1hrs_usd;
}

void V1_Symbol::setVolume1hrsUsd(double value)
{
    m_Volume_1hrs_usd = value;
    m_Volume_1hrs_usdIsSet = true;
}

bool V1_Symbol::volume1hrsUsdIsSet() const
{
    return m_Volume_1hrs_usdIsSet;
}

void V1_Symbol::unsetVolume_1hrs_usd()
{
    m_Volume_1hrs_usdIsSet = false;
}
double V1_Symbol::getVolume1day() const
{
    return m_Volume_1day;
}

void V1_Symbol::setVolume1day(double value)
{
    m_Volume_1day = value;
    m_Volume_1dayIsSet = true;
}

bool V1_Symbol::volume1dayIsSet() const
{
    return m_Volume_1dayIsSet;
}

void V1_Symbol::unsetVolume_1day()
{
    m_Volume_1dayIsSet = false;
}
double V1_Symbol::getVolume1dayUsd() const
{
    return m_Volume_1day_usd;
}

void V1_Symbol::setVolume1dayUsd(double value)
{
    m_Volume_1day_usd = value;
    m_Volume_1day_usdIsSet = true;
}

bool V1_Symbol::volume1dayUsdIsSet() const
{
    return m_Volume_1day_usdIsSet;
}

void V1_Symbol::unsetVolume_1day_usd()
{
    m_Volume_1day_usdIsSet = false;
}
double V1_Symbol::getVolume1mth() const
{
    return m_Volume_1mth;
}

void V1_Symbol::setVolume1mth(double value)
{
    m_Volume_1mth = value;
    m_Volume_1mthIsSet = true;
}

bool V1_Symbol::volume1mthIsSet() const
{
    return m_Volume_1mthIsSet;
}

void V1_Symbol::unsetVolume_1mth()
{
    m_Volume_1mthIsSet = false;
}
double V1_Symbol::getVolume1mthUsd() const
{
    return m_Volume_1mth_usd;
}

void V1_Symbol::setVolume1mthUsd(double value)
{
    m_Volume_1mth_usd = value;
    m_Volume_1mth_usdIsSet = true;
}

bool V1_Symbol::volume1mthUsdIsSet() const
{
    return m_Volume_1mth_usdIsSet;
}

void V1_Symbol::unsetVolume_1mth_usd()
{
    m_Volume_1mth_usdIsSet = false;
}
double V1_Symbol::getPrice() const
{
    return m_Price;
}

void V1_Symbol::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool V1_Symbol::priceIsSet() const
{
    return m_PriceIsSet;
}

void V1_Symbol::unsetPrice()
{
    m_PriceIsSet = false;
}
utility::string_t V1_Symbol::getSymbolIdExchange() const
{
    return m_Symbol_id_exchange;
}


void V1_Symbol::setSymbolIdExchange(const utility::string_t& value)
{
    m_Symbol_id_exchange = value;
    m_Symbol_id_exchangeIsSet = true;
}

bool V1_Symbol::symbolIdExchangeIsSet() const
{
    return m_Symbol_id_exchangeIsSet;
}

void V1_Symbol::unsetSymbol_id_exchange()
{
    m_Symbol_id_exchangeIsSet = false;
}
utility::string_t V1_Symbol::getAssetIdBaseExchange() const
{
    return m_Asset_id_base_exchange;
}


void V1_Symbol::setAssetIdBaseExchange(const utility::string_t& value)
{
    m_Asset_id_base_exchange = value;
    m_Asset_id_base_exchangeIsSet = true;
}

bool V1_Symbol::assetIdBaseExchangeIsSet() const
{
    return m_Asset_id_base_exchangeIsSet;
}

void V1_Symbol::unsetAsset_id_base_exchange()
{
    m_Asset_id_base_exchangeIsSet = false;
}
utility::string_t V1_Symbol::getAssetIdQuoteExchange() const
{
    return m_Asset_id_quote_exchange;
}


void V1_Symbol::setAssetIdQuoteExchange(const utility::string_t& value)
{
    m_Asset_id_quote_exchange = value;
    m_Asset_id_quote_exchangeIsSet = true;
}

bool V1_Symbol::assetIdQuoteExchangeIsSet() const
{
    return m_Asset_id_quote_exchangeIsSet;
}

void V1_Symbol::unsetAsset_id_quote_exchange()
{
    m_Asset_id_quote_exchangeIsSet = false;
}
double V1_Symbol::getPricePrecision() const
{
    return m_Price_precision;
}

void V1_Symbol::setPricePrecision(double value)
{
    m_Price_precision = value;
    m_Price_precisionIsSet = true;
}

bool V1_Symbol::pricePrecisionIsSet() const
{
    return m_Price_precisionIsSet;
}

void V1_Symbol::unsetPrice_precision()
{
    m_Price_precisionIsSet = false;
}
double V1_Symbol::getSizePrecision() const
{
    return m_Size_precision;
}

void V1_Symbol::setSizePrecision(double value)
{
    m_Size_precision = value;
    m_Size_precisionIsSet = true;
}

bool V1_Symbol::sizePrecisionIsSet() const
{
    return m_Size_precisionIsSet;
}

void V1_Symbol::unsetSize_precision()
{
    m_Size_precisionIsSet = false;
}
std::map<utility::string_t, utility::string_t> V1_Symbol::getRawKvp() const
{
    return m_Raw_kvp;
}


void V1_Symbol::setRawKvp(const std::map<utility::string_t, utility::string_t>& value)
{
    m_Raw_kvp = value;
    m_Raw_kvpIsSet = true;
}

bool V1_Symbol::rawKvpIsSet() const
{
    return m_Raw_kvpIsSet;
}

void V1_Symbol::unsetRaw_kvp()
{
    m_Raw_kvpIsSet = false;
}
double V1_Symbol::getVolumeToUsd() const
{
    return m_Volume_to_usd;
}

void V1_Symbol::setVolumeToUsd(double value)
{
    m_Volume_to_usd = value;
    m_Volume_to_usdIsSet = true;
}

bool V1_Symbol::volumeToUsdIsSet() const
{
    return m_Volume_to_usdIsSet;
}

void V1_Symbol::unsetVolume_to_usd()
{
    m_Volume_to_usdIsSet = false;
}

}
}
}
}


