/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_Exchange.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_Exchange::V1_Exchange()
{
    m_Exchange_id = utility::conversions::to_string_t("");
    m_Exchange_idIsSet = false;
    m_Website = utility::conversions::to_string_t("");
    m_WebsiteIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Data_start = utility::conversions::to_string_t("");
    m_Data_startIsSet = false;
    m_Data_end = utility::conversions::to_string_t("");
    m_Data_endIsSet = false;
    m_Data_quote_start = utility::datetime();
    m_Data_quote_startIsSet = false;
    m_Data_quote_end = utility::datetime();
    m_Data_quote_endIsSet = false;
    m_Data_orderbook_start = utility::datetime();
    m_Data_orderbook_startIsSet = false;
    m_Data_orderbook_end = utility::datetime();
    m_Data_orderbook_endIsSet = false;
    m_Data_trade_start = utility::datetime();
    m_Data_trade_startIsSet = false;
    m_Data_trade_end = utility::datetime();
    m_Data_trade_endIsSet = false;
    m_Data_trade_count = 0L;
    m_Data_trade_countIsSet = false;
    m_Data_symbols_count = 0L;
    m_Data_symbols_countIsSet = false;
    m_Volume_1hrs_usd = 0.0;
    m_Volume_1hrs_usdIsSet = false;
    m_Volume_1day_usd = 0.0;
    m_Volume_1day_usdIsSet = false;
    m_Volume_1mth_usd = 0.0;
    m_Volume_1mth_usdIsSet = false;
    m_Metric_idIsSet = false;
    m_IconsIsSet = false;
    m_Rank = 0.0;
    m_RankIsSet = false;
    m_Integration_status = utility::conversions::to_string_t("");
    m_Integration_statusIsSet = false;
}

V1_Exchange::~V1_Exchange()
{
}

void V1_Exchange::validate()
{
    // TODO: implement validation
}

web::json::value V1_Exchange::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Exchange_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("exchange_id"))] = ModelBase::toJson(m_Exchange_id);
    }
    if(m_WebsiteIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("website"))] = ModelBase::toJson(m_Website);
    }
    if(m_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Data_startIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_start"))] = ModelBase::toJson(m_Data_start);
    }
    if(m_Data_endIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_end"))] = ModelBase::toJson(m_Data_end);
    }
    if(m_Data_quote_startIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_quote_start"))] = ModelBase::toJson(m_Data_quote_start);
    }
    if(m_Data_quote_endIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_quote_end"))] = ModelBase::toJson(m_Data_quote_end);
    }
    if(m_Data_orderbook_startIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_orderbook_start"))] = ModelBase::toJson(m_Data_orderbook_start);
    }
    if(m_Data_orderbook_endIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_orderbook_end"))] = ModelBase::toJson(m_Data_orderbook_end);
    }
    if(m_Data_trade_startIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_trade_start"))] = ModelBase::toJson(m_Data_trade_start);
    }
    if(m_Data_trade_endIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_trade_end"))] = ModelBase::toJson(m_Data_trade_end);
    }
    if(m_Data_trade_countIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_trade_count"))] = ModelBase::toJson(m_Data_trade_count);
    }
    if(m_Data_symbols_countIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_symbols_count"))] = ModelBase::toJson(m_Data_symbols_count);
    }
    if(m_Volume_1hrs_usdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("volume_1hrs_usd"))] = ModelBase::toJson(m_Volume_1hrs_usd);
    }
    if(m_Volume_1day_usdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("volume_1day_usd"))] = ModelBase::toJson(m_Volume_1day_usd);
    }
    if(m_Volume_1mth_usdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("volume_1mth_usd"))] = ModelBase::toJson(m_Volume_1mth_usd);
    }
    if(m_Metric_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("metric_id"))] = ModelBase::toJson(m_Metric_id);
    }
    if(m_IconsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("icons"))] = ModelBase::toJson(m_Icons);
    }
    if(m_RankIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("rank"))] = ModelBase::toJson(m_Rank);
    }
    if(m_Integration_statusIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("integration_status"))] = ModelBase::toJson(m_Integration_status);
    }

    return val;
}

bool V1_Exchange::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("exchange_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("exchange_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExchangeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExchangeId);
            setExchangeId(refVal_setExchangeId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("website"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("website")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWebsite;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWebsite);
            setWebsite(refVal_setWebsite);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_start")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDataStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataStart);
            setDataStart(refVal_setDataStart);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_end")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDataEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataEnd);
            setDataEnd(refVal_setDataEnd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_quote_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_quote_start")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDataQuoteStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataQuoteStart);
            setDataQuoteStart(refVal_setDataQuoteStart);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_quote_end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_quote_end")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDataQuoteEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataQuoteEnd);
            setDataQuoteEnd(refVal_setDataQuoteEnd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_start")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDataOrderbookStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataOrderbookStart);
            setDataOrderbookStart(refVal_setDataOrderbookStart);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_end")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDataOrderbookEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataOrderbookEnd);
            setDataOrderbookEnd(refVal_setDataOrderbookEnd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_trade_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_trade_start")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDataTradeStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataTradeStart);
            setDataTradeStart(refVal_setDataTradeStart);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_trade_end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_trade_end")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDataTradeEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataTradeEnd);
            setDataTradeEnd(refVal_setDataTradeEnd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_trade_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_trade_count")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setDataTradeCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataTradeCount);
            setDataTradeCount(refVal_setDataTradeCount);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_symbols_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_symbols_count")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setDataSymbolsCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataSymbolsCount);
            setDataSymbolsCount(refVal_setDataSymbolsCount);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("volume_1hrs_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("volume_1hrs_usd")));
        if(!fieldValue.is_null())
        {
            double refVal_setVolume1hrsUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolume1hrsUsd);
            setVolume1hrsUsd(refVal_setVolume1hrsUsd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("volume_1day_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("volume_1day_usd")));
        if(!fieldValue.is_null())
        {
            double refVal_setVolume1dayUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolume1dayUsd);
            setVolume1dayUsd(refVal_setVolume1dayUsd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("volume_1mth_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("volume_1mth_usd")));
        if(!fieldValue.is_null())
        {
            double refVal_setVolume1mthUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolume1mthUsd);
            setVolume1mthUsd(refVal_setVolume1mthUsd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("metric_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("metric_id")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setMetricId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetricId);
            setMetricId(refVal_setMetricId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("icons"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("icons")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V1_Icon>> refVal_setIcons;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIcons);
            setIcons(refVal_setIcons);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("rank"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("rank")));
        if(!fieldValue.is_null())
        {
            double refVal_setRank;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRank);
            setRank(refVal_setRank);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("integration_status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("integration_status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIntegrationStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIntegrationStatus);
            setIntegrationStatus(refVal_setIntegrationStatus);
            
        }
    }
    return ok;
}

void V1_Exchange::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Exchange_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("exchange_id")), m_Exchange_id));
    }
    if(m_WebsiteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("website")), m_Website));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("name")), m_Name));
    }
    if(m_Data_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_start")), m_Data_start));
    }
    if(m_Data_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_end")), m_Data_end));
    }
    if(m_Data_quote_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_quote_start")), m_Data_quote_start));
    }
    if(m_Data_quote_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_quote_end")), m_Data_quote_end));
    }
    if(m_Data_orderbook_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_orderbook_start")), m_Data_orderbook_start));
    }
    if(m_Data_orderbook_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_orderbook_end")), m_Data_orderbook_end));
    }
    if(m_Data_trade_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_trade_start")), m_Data_trade_start));
    }
    if(m_Data_trade_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_trade_end")), m_Data_trade_end));
    }
    if(m_Data_trade_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_trade_count")), m_Data_trade_count));
    }
    if(m_Data_symbols_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_symbols_count")), m_Data_symbols_count));
    }
    if(m_Volume_1hrs_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("volume_1hrs_usd")), m_Volume_1hrs_usd));
    }
    if(m_Volume_1day_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("volume_1day_usd")), m_Volume_1day_usd));
    }
    if(m_Volume_1mth_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("volume_1mth_usd")), m_Volume_1mth_usd));
    }
    if(m_Metric_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("metric_id")), m_Metric_id));
    }
    if(m_IconsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("icons")), m_Icons));
    }
    if(m_RankIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("rank")), m_Rank));
    }
    if(m_Integration_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("integration_status")), m_Integration_status));
    }
}

bool V1_Exchange::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("exchange_id"))))
    {
        utility::string_t refVal_setExchangeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("exchange_id"))), refVal_setExchangeId );
        setExchangeId(refVal_setExchangeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("website"))))
    {
        utility::string_t refVal_setWebsite;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("website"))), refVal_setWebsite );
        setWebsite(refVal_setWebsite);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_start"))))
    {
        utility::string_t refVal_setDataStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_start"))), refVal_setDataStart );
        setDataStart(refVal_setDataStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_end"))))
    {
        utility::string_t refVal_setDataEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_end"))), refVal_setDataEnd );
        setDataEnd(refVal_setDataEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_quote_start"))))
    {
        utility::datetime refVal_setDataQuoteStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_quote_start"))), refVal_setDataQuoteStart );
        setDataQuoteStart(refVal_setDataQuoteStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_quote_end"))))
    {
        utility::datetime refVal_setDataQuoteEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_quote_end"))), refVal_setDataQuoteEnd );
        setDataQuoteEnd(refVal_setDataQuoteEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_start"))))
    {
        utility::datetime refVal_setDataOrderbookStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_start"))), refVal_setDataOrderbookStart );
        setDataOrderbookStart(refVal_setDataOrderbookStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_end"))))
    {
        utility::datetime refVal_setDataOrderbookEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_end"))), refVal_setDataOrderbookEnd );
        setDataOrderbookEnd(refVal_setDataOrderbookEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_trade_start"))))
    {
        utility::datetime refVal_setDataTradeStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_trade_start"))), refVal_setDataTradeStart );
        setDataTradeStart(refVal_setDataTradeStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_trade_end"))))
    {
        utility::datetime refVal_setDataTradeEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_trade_end"))), refVal_setDataTradeEnd );
        setDataTradeEnd(refVal_setDataTradeEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_trade_count"))))
    {
        int64_t refVal_setDataTradeCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_trade_count"))), refVal_setDataTradeCount );
        setDataTradeCount(refVal_setDataTradeCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_symbols_count"))))
    {
        int64_t refVal_setDataSymbolsCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_symbols_count"))), refVal_setDataSymbolsCount );
        setDataSymbolsCount(refVal_setDataSymbolsCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("volume_1hrs_usd"))))
    {
        double refVal_setVolume1hrsUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("volume_1hrs_usd"))), refVal_setVolume1hrsUsd );
        setVolume1hrsUsd(refVal_setVolume1hrsUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("volume_1day_usd"))))
    {
        double refVal_setVolume1dayUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("volume_1day_usd"))), refVal_setVolume1dayUsd );
        setVolume1dayUsd(refVal_setVolume1dayUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("volume_1mth_usd"))))
    {
        double refVal_setVolume1mthUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("volume_1mth_usd"))), refVal_setVolume1mthUsd );
        setVolume1mthUsd(refVal_setVolume1mthUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("metric_id"))))
    {
        std::vector<utility::string_t> refVal_setMetricId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("metric_id"))), refVal_setMetricId );
        setMetricId(refVal_setMetricId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("icons"))))
    {
        std::vector<std::shared_ptr<V1_Icon>> refVal_setIcons;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("icons"))), refVal_setIcons );
        setIcons(refVal_setIcons);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("rank"))))
    {
        double refVal_setRank;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("rank"))), refVal_setRank );
        setRank(refVal_setRank);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("integration_status"))))
    {
        utility::string_t refVal_setIntegrationStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("integration_status"))), refVal_setIntegrationStatus );
        setIntegrationStatus(refVal_setIntegrationStatus);
    }
    return ok;
}


utility::string_t V1_Exchange::getExchangeId() const
{
    return m_Exchange_id;
}


void V1_Exchange::setExchangeId(const utility::string_t& value)
{
    m_Exchange_id = value;
    m_Exchange_idIsSet = true;
}

bool V1_Exchange::exchangeIdIsSet() const
{
    return m_Exchange_idIsSet;
}

void V1_Exchange::unsetExchange_id()
{
    m_Exchange_idIsSet = false;
}
utility::string_t V1_Exchange::getWebsite() const
{
    return m_Website;
}


void V1_Exchange::setWebsite(const utility::string_t& value)
{
    m_Website = value;
    m_WebsiteIsSet = true;
}

bool V1_Exchange::websiteIsSet() const
{
    return m_WebsiteIsSet;
}

void V1_Exchange::unsetWebsite()
{
    m_WebsiteIsSet = false;
}
utility::string_t V1_Exchange::getName() const
{
    return m_Name;
}


void V1_Exchange::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool V1_Exchange::nameIsSet() const
{
    return m_NameIsSet;
}

void V1_Exchange::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t V1_Exchange::getDataStart() const
{
    return m_Data_start;
}


void V1_Exchange::setDataStart(const utility::string_t& value)
{
    m_Data_start = value;
    m_Data_startIsSet = true;
}

bool V1_Exchange::dataStartIsSet() const
{
    return m_Data_startIsSet;
}

void V1_Exchange::unsetData_start()
{
    m_Data_startIsSet = false;
}
utility::string_t V1_Exchange::getDataEnd() const
{
    return m_Data_end;
}


void V1_Exchange::setDataEnd(const utility::string_t& value)
{
    m_Data_end = value;
    m_Data_endIsSet = true;
}

bool V1_Exchange::dataEndIsSet() const
{
    return m_Data_endIsSet;
}

void V1_Exchange::unsetData_end()
{
    m_Data_endIsSet = false;
}
utility::datetime V1_Exchange::getDataQuoteStart() const
{
    return m_Data_quote_start;
}


void V1_Exchange::setDataQuoteStart(const utility::datetime& value)
{
    m_Data_quote_start = value;
    m_Data_quote_startIsSet = true;
}

bool V1_Exchange::dataQuoteStartIsSet() const
{
    return m_Data_quote_startIsSet;
}

void V1_Exchange::unsetData_quote_start()
{
    m_Data_quote_startIsSet = false;
}
utility::datetime V1_Exchange::getDataQuoteEnd() const
{
    return m_Data_quote_end;
}


void V1_Exchange::setDataQuoteEnd(const utility::datetime& value)
{
    m_Data_quote_end = value;
    m_Data_quote_endIsSet = true;
}

bool V1_Exchange::dataQuoteEndIsSet() const
{
    return m_Data_quote_endIsSet;
}

void V1_Exchange::unsetData_quote_end()
{
    m_Data_quote_endIsSet = false;
}
utility::datetime V1_Exchange::getDataOrderbookStart() const
{
    return m_Data_orderbook_start;
}


void V1_Exchange::setDataOrderbookStart(const utility::datetime& value)
{
    m_Data_orderbook_start = value;
    m_Data_orderbook_startIsSet = true;
}

bool V1_Exchange::dataOrderbookStartIsSet() const
{
    return m_Data_orderbook_startIsSet;
}

void V1_Exchange::unsetData_orderbook_start()
{
    m_Data_orderbook_startIsSet = false;
}
utility::datetime V1_Exchange::getDataOrderbookEnd() const
{
    return m_Data_orderbook_end;
}


void V1_Exchange::setDataOrderbookEnd(const utility::datetime& value)
{
    m_Data_orderbook_end = value;
    m_Data_orderbook_endIsSet = true;
}

bool V1_Exchange::dataOrderbookEndIsSet() const
{
    return m_Data_orderbook_endIsSet;
}

void V1_Exchange::unsetData_orderbook_end()
{
    m_Data_orderbook_endIsSet = false;
}
utility::datetime V1_Exchange::getDataTradeStart() const
{
    return m_Data_trade_start;
}


void V1_Exchange::setDataTradeStart(const utility::datetime& value)
{
    m_Data_trade_start = value;
    m_Data_trade_startIsSet = true;
}

bool V1_Exchange::dataTradeStartIsSet() const
{
    return m_Data_trade_startIsSet;
}

void V1_Exchange::unsetData_trade_start()
{
    m_Data_trade_startIsSet = false;
}
utility::datetime V1_Exchange::getDataTradeEnd() const
{
    return m_Data_trade_end;
}


void V1_Exchange::setDataTradeEnd(const utility::datetime& value)
{
    m_Data_trade_end = value;
    m_Data_trade_endIsSet = true;
}

bool V1_Exchange::dataTradeEndIsSet() const
{
    return m_Data_trade_endIsSet;
}

void V1_Exchange::unsetData_trade_end()
{
    m_Data_trade_endIsSet = false;
}
int64_t V1_Exchange::getDataTradeCount() const
{
    return m_Data_trade_count;
}

void V1_Exchange::setDataTradeCount(int64_t value)
{
    m_Data_trade_count = value;
    m_Data_trade_countIsSet = true;
}

bool V1_Exchange::dataTradeCountIsSet() const
{
    return m_Data_trade_countIsSet;
}

void V1_Exchange::unsetData_trade_count()
{
    m_Data_trade_countIsSet = false;
}
int64_t V1_Exchange::getDataSymbolsCount() const
{
    return m_Data_symbols_count;
}

void V1_Exchange::setDataSymbolsCount(int64_t value)
{
    m_Data_symbols_count = value;
    m_Data_symbols_countIsSet = true;
}

bool V1_Exchange::dataSymbolsCountIsSet() const
{
    return m_Data_symbols_countIsSet;
}

void V1_Exchange::unsetData_symbols_count()
{
    m_Data_symbols_countIsSet = false;
}
double V1_Exchange::getVolume1hrsUsd() const
{
    return m_Volume_1hrs_usd;
}

void V1_Exchange::setVolume1hrsUsd(double value)
{
    m_Volume_1hrs_usd = value;
    m_Volume_1hrs_usdIsSet = true;
}

bool V1_Exchange::volume1hrsUsdIsSet() const
{
    return m_Volume_1hrs_usdIsSet;
}

void V1_Exchange::unsetVolume_1hrs_usd()
{
    m_Volume_1hrs_usdIsSet = false;
}
double V1_Exchange::getVolume1dayUsd() const
{
    return m_Volume_1day_usd;
}

void V1_Exchange::setVolume1dayUsd(double value)
{
    m_Volume_1day_usd = value;
    m_Volume_1day_usdIsSet = true;
}

bool V1_Exchange::volume1dayUsdIsSet() const
{
    return m_Volume_1day_usdIsSet;
}

void V1_Exchange::unsetVolume_1day_usd()
{
    m_Volume_1day_usdIsSet = false;
}
double V1_Exchange::getVolume1mthUsd() const
{
    return m_Volume_1mth_usd;
}

void V1_Exchange::setVolume1mthUsd(double value)
{
    m_Volume_1mth_usd = value;
    m_Volume_1mth_usdIsSet = true;
}

bool V1_Exchange::volume1mthUsdIsSet() const
{
    return m_Volume_1mth_usdIsSet;
}

void V1_Exchange::unsetVolume_1mth_usd()
{
    m_Volume_1mth_usdIsSet = false;
}
std::vector<utility::string_t> V1_Exchange::getMetricId() const
{
    return m_Metric_id;
}


void V1_Exchange::setMetricId(const std::vector<utility::string_t>& value)
{
    m_Metric_id = value;
    m_Metric_idIsSet = true;
}

bool V1_Exchange::metricIdIsSet() const
{
    return m_Metric_idIsSet;
}

void V1_Exchange::unsetMetric_id()
{
    m_Metric_idIsSet = false;
}
std::vector<std::shared_ptr<V1_Icon>> V1_Exchange::getIcons() const
{
    return m_Icons;
}


void V1_Exchange::setIcons(const std::vector<std::shared_ptr<V1_Icon>>& value)
{
    m_Icons = value;
    m_IconsIsSet = true;
}

bool V1_Exchange::iconsIsSet() const
{
    return m_IconsIsSet;
}

void V1_Exchange::unsetIcons()
{
    m_IconsIsSet = false;
}
double V1_Exchange::getRank() const
{
    return m_Rank;
}

void V1_Exchange::setRank(double value)
{
    m_Rank = value;
    m_RankIsSet = true;
}

bool V1_Exchange::rankIsSet() const
{
    return m_RankIsSet;
}

void V1_Exchange::unsetRank()
{
    m_RankIsSet = false;
}
utility::string_t V1_Exchange::getIntegrationStatus() const
{
    return m_Integration_status;
}


void V1_Exchange::setIntegrationStatus(const utility::string_t& value)
{
    m_Integration_status = value;
    m_Integration_statusIsSet = true;
}

bool V1_Exchange::integrationStatusIsSet() const
{
    return m_Integration_statusIsSet;
}

void V1_Exchange::unsetIntegration_status()
{
    m_Integration_statusIsSet = false;
}

}
}
}
}


