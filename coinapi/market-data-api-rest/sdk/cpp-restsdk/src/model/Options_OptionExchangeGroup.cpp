/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Options_OptionExchangeGroup.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Options_OptionExchangeGroup::Options_OptionExchangeGroup()
{
    m_Asset_id_base = utility::conversions::to_string_t("");
    m_Asset_id_baseIsSet = false;
    m_Asset_id_quote = utility::conversions::to_string_t("");
    m_Asset_id_quoteIsSet = false;
    m_Underlying_price = 0.0;
    m_Underlying_priceIsSet = false;
    m_Time_expiration = utility::datetime();
    m_Time_expirationIsSet = false;
    m_StrikesIsSet = false;
}

Options_OptionExchangeGroup::~Options_OptionExchangeGroup()
{
}

void Options_OptionExchangeGroup::validate()
{
    // TODO: implement validation
}

web::json::value Options_OptionExchangeGroup::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Asset_id_baseIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("asset_id_base"))] = ModelBase::toJson(m_Asset_id_base);
    }
    if(m_Asset_id_quoteIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("asset_id_quote"))] = ModelBase::toJson(m_Asset_id_quote);
    }
    if(m_Underlying_priceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("underlying_price"))] = ModelBase::toJson(m_Underlying_price);
    }
    if(m_Time_expirationIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("time_expiration"))] = ModelBase::toJson(m_Time_expiration);
    }
    if(m_StrikesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("strikes"))] = ModelBase::toJson(m_Strikes);
    }

    return val;
}

bool Options_OptionExchangeGroup::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("asset_id_base"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("asset_id_base")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetIdBase;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetIdBase);
            setAssetIdBase(refVal_setAssetIdBase);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetIdQuote;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetIdQuote);
            setAssetIdQuote(refVal_setAssetIdQuote);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("underlying_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("underlying_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setUnderlyingPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUnderlyingPrice);
            setUnderlyingPrice(refVal_setUnderlyingPrice);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("time_expiration"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("time_expiration")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimeExpiration;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeExpiration);
            setTimeExpiration(refVal_setTimeExpiration);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("strikes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("strikes")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Options_Strike>> refVal_setStrikes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStrikes);
            setStrikes(refVal_setStrikes);
            
        }
    }
    return ok;
}

void Options_OptionExchangeGroup::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Asset_id_baseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("asset_id_base")), m_Asset_id_base));
    }
    if(m_Asset_id_quoteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("asset_id_quote")), m_Asset_id_quote));
    }
    if(m_Underlying_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("underlying_price")), m_Underlying_price));
    }
    if(m_Time_expirationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("time_expiration")), m_Time_expiration));
    }
    if(m_StrikesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("strikes")), m_Strikes));
    }
}

bool Options_OptionExchangeGroup::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_base"))))
    {
        utility::string_t refVal_setAssetIdBase;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_base"))), refVal_setAssetIdBase );
        setAssetIdBase(refVal_setAssetIdBase);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote"))))
    {
        utility::string_t refVal_setAssetIdQuote;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote"))), refVal_setAssetIdQuote );
        setAssetIdQuote(refVal_setAssetIdQuote);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("underlying_price"))))
    {
        double refVal_setUnderlyingPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("underlying_price"))), refVal_setUnderlyingPrice );
        setUnderlyingPrice(refVal_setUnderlyingPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("time_expiration"))))
    {
        utility::datetime refVal_setTimeExpiration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("time_expiration"))), refVal_setTimeExpiration );
        setTimeExpiration(refVal_setTimeExpiration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("strikes"))))
    {
        std::vector<std::shared_ptr<Options_Strike>> refVal_setStrikes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("strikes"))), refVal_setStrikes );
        setStrikes(refVal_setStrikes);
    }
    return ok;
}


utility::string_t Options_OptionExchangeGroup::getAssetIdBase() const
{
    return m_Asset_id_base;
}


void Options_OptionExchangeGroup::setAssetIdBase(const utility::string_t& value)
{
    m_Asset_id_base = value;
    m_Asset_id_baseIsSet = true;
}

bool Options_OptionExchangeGroup::assetIdBaseIsSet() const
{
    return m_Asset_id_baseIsSet;
}

void Options_OptionExchangeGroup::unsetAsset_id_base()
{
    m_Asset_id_baseIsSet = false;
}
utility::string_t Options_OptionExchangeGroup::getAssetIdQuote() const
{
    return m_Asset_id_quote;
}


void Options_OptionExchangeGroup::setAssetIdQuote(const utility::string_t& value)
{
    m_Asset_id_quote = value;
    m_Asset_id_quoteIsSet = true;
}

bool Options_OptionExchangeGroup::assetIdQuoteIsSet() const
{
    return m_Asset_id_quoteIsSet;
}

void Options_OptionExchangeGroup::unsetAsset_id_quote()
{
    m_Asset_id_quoteIsSet = false;
}
double Options_OptionExchangeGroup::getUnderlyingPrice() const
{
    return m_Underlying_price;
}

void Options_OptionExchangeGroup::setUnderlyingPrice(double value)
{
    m_Underlying_price = value;
    m_Underlying_priceIsSet = true;
}

bool Options_OptionExchangeGroup::underlyingPriceIsSet() const
{
    return m_Underlying_priceIsSet;
}

void Options_OptionExchangeGroup::unsetUnderlying_price()
{
    m_Underlying_priceIsSet = false;
}
utility::datetime Options_OptionExchangeGroup::getTimeExpiration() const
{
    return m_Time_expiration;
}


void Options_OptionExchangeGroup::setTimeExpiration(const utility::datetime& value)
{
    m_Time_expiration = value;
    m_Time_expirationIsSet = true;
}

bool Options_OptionExchangeGroup::timeExpirationIsSet() const
{
    return m_Time_expirationIsSet;
}

void Options_OptionExchangeGroup::unsetTime_expiration()
{
    m_Time_expirationIsSet = false;
}
std::vector<std::shared_ptr<Options_Strike>> Options_OptionExchangeGroup::getStrikes() const
{
    return m_Strikes;
}


void Options_OptionExchangeGroup::setStrikes(const std::vector<std::shared_ptr<Options_Strike>>& value)
{
    m_Strikes = value;
    m_StrikesIsSet = true;
}

bool Options_OptionExchangeGroup::strikesIsSet() const
{
    return m_StrikesIsSet;
}

void Options_OptionExchangeGroup::unsetStrikes()
{
    m_StrikesIsSet = false;
}

}
}
}
}


