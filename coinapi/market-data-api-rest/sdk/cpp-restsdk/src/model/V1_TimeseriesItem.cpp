/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_TimeseriesItem.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_TimeseriesItem::V1_TimeseriesItem()
{
    m_Time_period_start = utility::datetime();
    m_Time_period_startIsSet = false;
    m_Time_period_end = utility::datetime();
    m_Time_period_endIsSet = false;
    m_Time_open = utility::datetime();
    m_Time_openIsSet = false;
    m_Time_close = utility::datetime();
    m_Time_closeIsSet = false;
    m_Price_open = 0.0;
    m_Price_openIsSet = false;
    m_Price_high = 0.0;
    m_Price_highIsSet = false;
    m_Price_low = 0.0;
    m_Price_lowIsSet = false;
    m_Price_close = 0.0;
    m_Price_closeIsSet = false;
    m_Volume_traded = 0.0;
    m_Volume_tradedIsSet = false;
    m_Trades_count = 0L;
    m_Trades_countIsSet = false;
}

V1_TimeseriesItem::~V1_TimeseriesItem()
{
}

void V1_TimeseriesItem::validate()
{
    // TODO: implement validation
}

web::json::value V1_TimeseriesItem::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Time_period_startIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("time_period_start"))] = ModelBase::toJson(m_Time_period_start);
    }
    if(m_Time_period_endIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("time_period_end"))] = ModelBase::toJson(m_Time_period_end);
    }
    if(m_Time_openIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("time_open"))] = ModelBase::toJson(m_Time_open);
    }
    if(m_Time_closeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("time_close"))] = ModelBase::toJson(m_Time_close);
    }
    if(m_Price_openIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("price_open"))] = ModelBase::toJson(m_Price_open);
    }
    if(m_Price_highIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("price_high"))] = ModelBase::toJson(m_Price_high);
    }
    if(m_Price_lowIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("price_low"))] = ModelBase::toJson(m_Price_low);
    }
    if(m_Price_closeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("price_close"))] = ModelBase::toJson(m_Price_close);
    }
    if(m_Volume_tradedIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("volume_traded"))] = ModelBase::toJson(m_Volume_traded);
    }
    if(m_Trades_countIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("trades_count"))] = ModelBase::toJson(m_Trades_count);
    }

    return val;
}

bool V1_TimeseriesItem::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("time_period_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time_period_start")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimePeriodStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimePeriodStart);
            setTimePeriodStart(refVal_setTimePeriodStart);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time_period_end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time_period_end")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimePeriodEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimePeriodEnd);
            setTimePeriodEnd(refVal_setTimePeriodEnd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time_open"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time_open")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimeOpen;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeOpen);
            setTimeOpen(refVal_setTimeOpen);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time_close"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time_close")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimeClose;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeClose);
            setTimeClose(refVal_setTimeClose);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price_open"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price_open")));
        if(!fieldValue.is_null())
        {
            double refVal_setPriceOpen;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriceOpen);
            setPriceOpen(refVal_setPriceOpen);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price_high"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price_high")));
        if(!fieldValue.is_null())
        {
            double refVal_setPriceHigh;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriceHigh);
            setPriceHigh(refVal_setPriceHigh);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price_low"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price_low")));
        if(!fieldValue.is_null())
        {
            double refVal_setPriceLow;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriceLow);
            setPriceLow(refVal_setPriceLow);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price_close"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price_close")));
        if(!fieldValue.is_null())
        {
            double refVal_setPriceClose;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriceClose);
            setPriceClose(refVal_setPriceClose);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("volume_traded"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("volume_traded")));
        if(!fieldValue.is_null())
        {
            double refVal_setVolumeTraded;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolumeTraded);
            setVolumeTraded(refVal_setVolumeTraded);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("trades_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("trades_count")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTradesCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTradesCount);
            setTradesCount(refVal_setTradesCount);
            
        }
    }
    return ok;
}

void V1_TimeseriesItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Time_period_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time_period_start")), m_Time_period_start));
    }
    if(m_Time_period_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time_period_end")), m_Time_period_end));
    }
    if(m_Time_openIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time_open")), m_Time_open));
    }
    if(m_Time_closeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time_close")), m_Time_close));
    }
    if(m_Price_openIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price_open")), m_Price_open));
    }
    if(m_Price_highIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price_high")), m_Price_high));
    }
    if(m_Price_lowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price_low")), m_Price_low));
    }
    if(m_Price_closeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price_close")), m_Price_close));
    }
    if(m_Volume_tradedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("volume_traded")), m_Volume_traded));
    }
    if(m_Trades_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("trades_count")), m_Trades_count));
    }
}

bool V1_TimeseriesItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("time_period_start"))))
    {
        utility::datetime refVal_setTimePeriodStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time_period_start"))), refVal_setTimePeriodStart );
        setTimePeriodStart(refVal_setTimePeriodStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time_period_end"))))
    {
        utility::datetime refVal_setTimePeriodEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time_period_end"))), refVal_setTimePeriodEnd );
        setTimePeriodEnd(refVal_setTimePeriodEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time_open"))))
    {
        utility::datetime refVal_setTimeOpen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time_open"))), refVal_setTimeOpen );
        setTimeOpen(refVal_setTimeOpen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time_close"))))
    {
        utility::datetime refVal_setTimeClose;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time_close"))), refVal_setTimeClose );
        setTimeClose(refVal_setTimeClose);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price_open"))))
    {
        double refVal_setPriceOpen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price_open"))), refVal_setPriceOpen );
        setPriceOpen(refVal_setPriceOpen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price_high"))))
    {
        double refVal_setPriceHigh;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price_high"))), refVal_setPriceHigh );
        setPriceHigh(refVal_setPriceHigh);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price_low"))))
    {
        double refVal_setPriceLow;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price_low"))), refVal_setPriceLow );
        setPriceLow(refVal_setPriceLow);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price_close"))))
    {
        double refVal_setPriceClose;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price_close"))), refVal_setPriceClose );
        setPriceClose(refVal_setPriceClose);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("volume_traded"))))
    {
        double refVal_setVolumeTraded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("volume_traded"))), refVal_setVolumeTraded );
        setVolumeTraded(refVal_setVolumeTraded);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("trades_count"))))
    {
        int64_t refVal_setTradesCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("trades_count"))), refVal_setTradesCount );
        setTradesCount(refVal_setTradesCount);
    }
    return ok;
}


utility::datetime V1_TimeseriesItem::getTimePeriodStart() const
{
    return m_Time_period_start;
}


void V1_TimeseriesItem::setTimePeriodStart(const utility::datetime& value)
{
    m_Time_period_start = value;
    m_Time_period_startIsSet = true;
}

bool V1_TimeseriesItem::timePeriodStartIsSet() const
{
    return m_Time_period_startIsSet;
}

void V1_TimeseriesItem::unsetTime_period_start()
{
    m_Time_period_startIsSet = false;
}
utility::datetime V1_TimeseriesItem::getTimePeriodEnd() const
{
    return m_Time_period_end;
}


void V1_TimeseriesItem::setTimePeriodEnd(const utility::datetime& value)
{
    m_Time_period_end = value;
    m_Time_period_endIsSet = true;
}

bool V1_TimeseriesItem::timePeriodEndIsSet() const
{
    return m_Time_period_endIsSet;
}

void V1_TimeseriesItem::unsetTime_period_end()
{
    m_Time_period_endIsSet = false;
}
utility::datetime V1_TimeseriesItem::getTimeOpen() const
{
    return m_Time_open;
}


void V1_TimeseriesItem::setTimeOpen(const utility::datetime& value)
{
    m_Time_open = value;
    m_Time_openIsSet = true;
}

bool V1_TimeseriesItem::timeOpenIsSet() const
{
    return m_Time_openIsSet;
}

void V1_TimeseriesItem::unsetTime_open()
{
    m_Time_openIsSet = false;
}
utility::datetime V1_TimeseriesItem::getTimeClose() const
{
    return m_Time_close;
}


void V1_TimeseriesItem::setTimeClose(const utility::datetime& value)
{
    m_Time_close = value;
    m_Time_closeIsSet = true;
}

bool V1_TimeseriesItem::timeCloseIsSet() const
{
    return m_Time_closeIsSet;
}

void V1_TimeseriesItem::unsetTime_close()
{
    m_Time_closeIsSet = false;
}
double V1_TimeseriesItem::getPriceOpen() const
{
    return m_Price_open;
}

void V1_TimeseriesItem::setPriceOpen(double value)
{
    m_Price_open = value;
    m_Price_openIsSet = true;
}

bool V1_TimeseriesItem::priceOpenIsSet() const
{
    return m_Price_openIsSet;
}

void V1_TimeseriesItem::unsetPrice_open()
{
    m_Price_openIsSet = false;
}
double V1_TimeseriesItem::getPriceHigh() const
{
    return m_Price_high;
}

void V1_TimeseriesItem::setPriceHigh(double value)
{
    m_Price_high = value;
    m_Price_highIsSet = true;
}

bool V1_TimeseriesItem::priceHighIsSet() const
{
    return m_Price_highIsSet;
}

void V1_TimeseriesItem::unsetPrice_high()
{
    m_Price_highIsSet = false;
}
double V1_TimeseriesItem::getPriceLow() const
{
    return m_Price_low;
}

void V1_TimeseriesItem::setPriceLow(double value)
{
    m_Price_low = value;
    m_Price_lowIsSet = true;
}

bool V1_TimeseriesItem::priceLowIsSet() const
{
    return m_Price_lowIsSet;
}

void V1_TimeseriesItem::unsetPrice_low()
{
    m_Price_lowIsSet = false;
}
double V1_TimeseriesItem::getPriceClose() const
{
    return m_Price_close;
}

void V1_TimeseriesItem::setPriceClose(double value)
{
    m_Price_close = value;
    m_Price_closeIsSet = true;
}

bool V1_TimeseriesItem::priceCloseIsSet() const
{
    return m_Price_closeIsSet;
}

void V1_TimeseriesItem::unsetPrice_close()
{
    m_Price_closeIsSet = false;
}
double V1_TimeseriesItem::getVolumeTraded() const
{
    return m_Volume_traded;
}

void V1_TimeseriesItem::setVolumeTraded(double value)
{
    m_Volume_traded = value;
    m_Volume_tradedIsSet = true;
}

bool V1_TimeseriesItem::volumeTradedIsSet() const
{
    return m_Volume_tradedIsSet;
}

void V1_TimeseriesItem::unsetVolume_traded()
{
    m_Volume_tradedIsSet = false;
}
int64_t V1_TimeseriesItem::getTradesCount() const
{
    return m_Trades_count;
}

void V1_TimeseriesItem::setTradesCount(int64_t value)
{
    m_Trades_count = value;
    m_Trades_countIsSet = true;
}

bool V1_TimeseriesItem::tradesCountIsSet() const
{
    return m_Trades_countIsSet;
}

void V1_TimeseriesItem::unsetTrades_count()
{
    m_Trades_countIsSet = false;
}

}
}
}
}


