/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_MetricData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_MetricData::V1_MetricData()
{
    m_Symbol_id = utility::conversions::to_string_t("");
    m_Symbol_idIsSet = false;
    m_Time = utility::datetime();
    m_TimeIsSet = false;
    m_Value = 0.0;
    m_ValueIsSet = false;
}

V1_MetricData::~V1_MetricData()
{
}

void V1_MetricData::validate()
{
    // TODO: implement validation
}

web::json::value V1_MetricData::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Symbol_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("symbol_id"))] = ModelBase::toJson(m_Symbol_id);
    }
    if(m_TimeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("time"))] = ModelBase::toJson(m_Time);
    }
    if(m_ValueIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("value"))] = ModelBase::toJson(m_Value);
    }

    return val;
}

bool V1_MetricData::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("symbol_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("symbol_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolId);
            setSymbolId(refVal_setSymbolId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTime);
            setTime(refVal_setTime);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("value")));
        if(!fieldValue.is_null())
        {
            double refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
            
        }
    }
    return ok;
}

void V1_MetricData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Symbol_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("symbol_id")), m_Symbol_id));
    }
    if(m_TimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("time")), m_Time));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("value")), m_Value));
    }
}

bool V1_MetricData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("symbol_id"))))
    {
        utility::string_t refVal_setSymbolId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("symbol_id"))), refVal_setSymbolId );
        setSymbolId(refVal_setSymbolId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("time"))))
    {
        utility::datetime refVal_setTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("time"))), refVal_setTime );
        setTime(refVal_setTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("value"))))
    {
        double refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    return ok;
}


utility::string_t V1_MetricData::getSymbolId() const
{
    return m_Symbol_id;
}


void V1_MetricData::setSymbolId(const utility::string_t& value)
{
    m_Symbol_id = value;
    m_Symbol_idIsSet = true;
}

bool V1_MetricData::symbolIdIsSet() const
{
    return m_Symbol_idIsSet;
}

void V1_MetricData::unsetSymbol_id()
{
    m_Symbol_idIsSet = false;
}
utility::datetime V1_MetricData::getTime() const
{
    return m_Time;
}


void V1_MetricData::setTime(const utility::datetime& value)
{
    m_Time = value;
    m_TimeIsSet = true;
}

bool V1_MetricData::timeIsSet() const
{
    return m_TimeIsSet;
}

void V1_MetricData::unsetTime()
{
    m_TimeIsSet = false;
}
double V1_MetricData::getValue() const
{
    return m_Value;
}

void V1_MetricData::setValue(double value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool V1_MetricData::valueIsSet() const
{
    return m_ValueIsSet;
}

void V1_MetricData::unsetValue()
{
    m_ValueIsSet = false;
}

}
}
}
}


