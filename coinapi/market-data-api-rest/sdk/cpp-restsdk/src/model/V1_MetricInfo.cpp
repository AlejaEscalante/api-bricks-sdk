/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_MetricInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_MetricInfo::V1_MetricInfo()
{
    m_Metric_id = utility::conversions::to_string_t("");
    m_Metric_idIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Source_id = utility::conversions::to_string_t("");
    m_Source_idIsSet = false;
}

V1_MetricInfo::~V1_MetricInfo()
{
}

void V1_MetricInfo::validate()
{
    // TODO: implement validation
}

web::json::value V1_MetricInfo::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Metric_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("metric_id"))] = ModelBase::toJson(m_Metric_id);
    }
    if(m_DescriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_Source_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("source_id"))] = ModelBase::toJson(m_Source_id);
    }

    return val;
}

bool V1_MetricInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("metric_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metric_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMetricId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetricId);
            setMetricId(refVal_setMetricId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("source_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("source_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSourceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSourceId);
            setSourceId(refVal_setSourceId);
            
        }
    }
    return ok;
}

void V1_MetricInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Metric_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metric_id")), m_Metric_id));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_Source_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("source_id")), m_Source_id));
    }
}

bool V1_MetricInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("metric_id"))))
    {
        utility::string_t refVal_setMetricId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metric_id"))), refVal_setMetricId );
        setMetricId(refVal_setMetricId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("source_id"))))
    {
        utility::string_t refVal_setSourceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("source_id"))), refVal_setSourceId );
        setSourceId(refVal_setSourceId);
    }
    return ok;
}


utility::string_t V1_MetricInfo::getMetricId() const
{
    return m_Metric_id;
}


void V1_MetricInfo::setMetricId(const utility::string_t& value)
{
    m_Metric_id = value;
    m_Metric_idIsSet = true;
}

bool V1_MetricInfo::metricIdIsSet() const
{
    return m_Metric_idIsSet;
}

void V1_MetricInfo::unsetMetric_id()
{
    m_Metric_idIsSet = false;
}
utility::string_t V1_MetricInfo::getDescription() const
{
    return m_Description;
}


void V1_MetricInfo::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool V1_MetricInfo::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void V1_MetricInfo::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t V1_MetricInfo::getSourceId() const
{
    return m_Source_id;
}


void V1_MetricInfo::setSourceId(const utility::string_t& value)
{
    m_Source_id = value;
    m_Source_idIsSet = true;
}

bool V1_MetricInfo::sourceIdIsSet() const
{
    return m_Source_idIsSet;
}

void V1_MetricInfo::unsetSource_id()
{
    m_Source_idIsSet = false;
}

}
}
}
}


