/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_ListingItem.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_ListingItem::V1_ListingItem()
{
    m_Metric_id = utility::conversions::to_string_t("");
    m_Metric_idIsSet = false;
    m_Symbol_id = utility::conversions::to_string_t("");
    m_Symbol_idIsSet = false;
    m_Symbol_id_external = utility::conversions::to_string_t("");
    m_Symbol_id_externalIsSet = false;
    m_Exchange_id = utility::conversions::to_string_t("");
    m_Exchange_idIsSet = false;
    m_Asset_id = utility::conversions::to_string_t("");
    m_Asset_idIsSet = false;
    m_Asset_id_external = utility::conversions::to_string_t("");
    m_Asset_id_externalIsSet = false;
    m_Chain_id = utility::conversions::to_string_t("");
    m_Chain_idIsSet = false;
    m_Network_id = utility::conversions::to_string_t("");
    m_Network_idIsSet = false;
}

V1_ListingItem::~V1_ListingItem()
{
}

void V1_ListingItem::validate()
{
    // TODO: implement validation
}

web::json::value V1_ListingItem::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Metric_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("metric_id"))] = ModelBase::toJson(m_Metric_id);
    }
    if(m_Symbol_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("symbol_id"))] = ModelBase::toJson(m_Symbol_id);
    }
    if(m_Symbol_id_externalIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("symbol_id_external"))] = ModelBase::toJson(m_Symbol_id_external);
    }
    if(m_Exchange_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("exchange_id"))] = ModelBase::toJson(m_Exchange_id);
    }
    if(m_Asset_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("asset_id"))] = ModelBase::toJson(m_Asset_id);
    }
    if(m_Asset_id_externalIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("asset_id_external"))] = ModelBase::toJson(m_Asset_id_external);
    }
    if(m_Chain_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("chain_id"))] = ModelBase::toJson(m_Chain_id);
    }
    if(m_Network_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("network_id"))] = ModelBase::toJson(m_Network_id);
    }

    return val;
}

bool V1_ListingItem::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("metric_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("metric_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMetricId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetricId);
            setMetricId(refVal_setMetricId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("symbol_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("symbol_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolId);
            setSymbolId(refVal_setSymbolId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("symbol_id_external"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("symbol_id_external")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolIdExternal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolIdExternal);
            setSymbolIdExternal(refVal_setSymbolIdExternal);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("exchange_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("exchange_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExchangeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExchangeId);
            setExchangeId(refVal_setExchangeId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("asset_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("asset_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetId);
            setAssetId(refVal_setAssetId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("asset_id_external"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("asset_id_external")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetIdExternal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetIdExternal);
            setAssetIdExternal(refVal_setAssetIdExternal);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("chain_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("chain_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setChainId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChainId);
            setChainId(refVal_setChainId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("network_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("network_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNetworkId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNetworkId);
            setNetworkId(refVal_setNetworkId);
            
        }
    }
    return ok;
}

void V1_ListingItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Metric_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("metric_id")), m_Metric_id));
    }
    if(m_Symbol_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("symbol_id")), m_Symbol_id));
    }
    if(m_Symbol_id_externalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("symbol_id_external")), m_Symbol_id_external));
    }
    if(m_Exchange_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("exchange_id")), m_Exchange_id));
    }
    if(m_Asset_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("asset_id")), m_Asset_id));
    }
    if(m_Asset_id_externalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("asset_id_external")), m_Asset_id_external));
    }
    if(m_Chain_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("chain_id")), m_Chain_id));
    }
    if(m_Network_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("network_id")), m_Network_id));
    }
}

bool V1_ListingItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("metric_id"))))
    {
        utility::string_t refVal_setMetricId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("metric_id"))), refVal_setMetricId );
        setMetricId(refVal_setMetricId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("symbol_id"))))
    {
        utility::string_t refVal_setSymbolId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("symbol_id"))), refVal_setSymbolId );
        setSymbolId(refVal_setSymbolId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("symbol_id_external"))))
    {
        utility::string_t refVal_setSymbolIdExternal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("symbol_id_external"))), refVal_setSymbolIdExternal );
        setSymbolIdExternal(refVal_setSymbolIdExternal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("exchange_id"))))
    {
        utility::string_t refVal_setExchangeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("exchange_id"))), refVal_setExchangeId );
        setExchangeId(refVal_setExchangeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("asset_id"))))
    {
        utility::string_t refVal_setAssetId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("asset_id"))), refVal_setAssetId );
        setAssetId(refVal_setAssetId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_external"))))
    {
        utility::string_t refVal_setAssetIdExternal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_external"))), refVal_setAssetIdExternal );
        setAssetIdExternal(refVal_setAssetIdExternal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("chain_id"))))
    {
        utility::string_t refVal_setChainId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("chain_id"))), refVal_setChainId );
        setChainId(refVal_setChainId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("network_id"))))
    {
        utility::string_t refVal_setNetworkId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("network_id"))), refVal_setNetworkId );
        setNetworkId(refVal_setNetworkId);
    }
    return ok;
}


utility::string_t V1_ListingItem::getMetricId() const
{
    return m_Metric_id;
}


void V1_ListingItem::setMetricId(const utility::string_t& value)
{
    m_Metric_id = value;
    m_Metric_idIsSet = true;
}

bool V1_ListingItem::metricIdIsSet() const
{
    return m_Metric_idIsSet;
}

void V1_ListingItem::unsetMetric_id()
{
    m_Metric_idIsSet = false;
}
utility::string_t V1_ListingItem::getSymbolId() const
{
    return m_Symbol_id;
}


void V1_ListingItem::setSymbolId(const utility::string_t& value)
{
    m_Symbol_id = value;
    m_Symbol_idIsSet = true;
}

bool V1_ListingItem::symbolIdIsSet() const
{
    return m_Symbol_idIsSet;
}

void V1_ListingItem::unsetSymbol_id()
{
    m_Symbol_idIsSet = false;
}
utility::string_t V1_ListingItem::getSymbolIdExternal() const
{
    return m_Symbol_id_external;
}


void V1_ListingItem::setSymbolIdExternal(const utility::string_t& value)
{
    m_Symbol_id_external = value;
    m_Symbol_id_externalIsSet = true;
}

bool V1_ListingItem::symbolIdExternalIsSet() const
{
    return m_Symbol_id_externalIsSet;
}

void V1_ListingItem::unsetSymbol_id_external()
{
    m_Symbol_id_externalIsSet = false;
}
utility::string_t V1_ListingItem::getExchangeId() const
{
    return m_Exchange_id;
}


void V1_ListingItem::setExchangeId(const utility::string_t& value)
{
    m_Exchange_id = value;
    m_Exchange_idIsSet = true;
}

bool V1_ListingItem::exchangeIdIsSet() const
{
    return m_Exchange_idIsSet;
}

void V1_ListingItem::unsetExchange_id()
{
    m_Exchange_idIsSet = false;
}
utility::string_t V1_ListingItem::getAssetId() const
{
    return m_Asset_id;
}


void V1_ListingItem::setAssetId(const utility::string_t& value)
{
    m_Asset_id = value;
    m_Asset_idIsSet = true;
}

bool V1_ListingItem::assetIdIsSet() const
{
    return m_Asset_idIsSet;
}

void V1_ListingItem::unsetAsset_id()
{
    m_Asset_idIsSet = false;
}
utility::string_t V1_ListingItem::getAssetIdExternal() const
{
    return m_Asset_id_external;
}


void V1_ListingItem::setAssetIdExternal(const utility::string_t& value)
{
    m_Asset_id_external = value;
    m_Asset_id_externalIsSet = true;
}

bool V1_ListingItem::assetIdExternalIsSet() const
{
    return m_Asset_id_externalIsSet;
}

void V1_ListingItem::unsetAsset_id_external()
{
    m_Asset_id_externalIsSet = false;
}
utility::string_t V1_ListingItem::getChainId() const
{
    return m_Chain_id;
}


void V1_ListingItem::setChainId(const utility::string_t& value)
{
    m_Chain_id = value;
    m_Chain_idIsSet = true;
}

bool V1_ListingItem::chainIdIsSet() const
{
    return m_Chain_idIsSet;
}

void V1_ListingItem::unsetChain_id()
{
    m_Chain_idIsSet = false;
}
utility::string_t V1_ListingItem::getNetworkId() const
{
    return m_Network_id;
}


void V1_ListingItem::setNetworkId(const utility::string_t& value)
{
    m_Network_id = value;
    m_Network_idIsSet = true;
}

bool V1_ListingItem::networkIdIsSet() const
{
    return m_Network_idIsSet;
}

void V1_ListingItem::unsetNetwork_id()
{
    m_Network_idIsSet = false;
}

}
}
}
}


