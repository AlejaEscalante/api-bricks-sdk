/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_ExternalAsset.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_ExternalAsset::V1_ExternalAsset()
{
    m_Asset_id = utility::conversions::to_string_t("");
    m_Asset_idIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Asset_type = utility::conversions::to_string_t("");
    m_Asset_typeIsSet = false;
}

V1_ExternalAsset::~V1_ExternalAsset()
{
}

void V1_ExternalAsset::validate()
{
    // TODO: implement validation
}

web::json::value V1_ExternalAsset::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Asset_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("asset_id"))] = ModelBase::toJson(m_Asset_id);
    }
    if(m_DescriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_Asset_typeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("asset_type"))] = ModelBase::toJson(m_Asset_type);
    }

    return val;
}

bool V1_ExternalAsset::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("asset_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("asset_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetId);
            setAssetId(refVal_setAssetId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("asset_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("asset_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetType);
            setAssetType(refVal_setAssetType);
            
        }
    }
    return ok;
}

void V1_ExternalAsset::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Asset_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("asset_id")), m_Asset_id));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_Asset_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("asset_type")), m_Asset_type));
    }
}

bool V1_ExternalAsset::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("asset_id"))))
    {
        utility::string_t refVal_setAssetId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("asset_id"))), refVal_setAssetId );
        setAssetId(refVal_setAssetId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("asset_type"))))
    {
        utility::string_t refVal_setAssetType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("asset_type"))), refVal_setAssetType );
        setAssetType(refVal_setAssetType);
    }
    return ok;
}


utility::string_t V1_ExternalAsset::getAssetId() const
{
    return m_Asset_id;
}


void V1_ExternalAsset::setAssetId(const utility::string_t& value)
{
    m_Asset_id = value;
    m_Asset_idIsSet = true;
}

bool V1_ExternalAsset::assetIdIsSet() const
{
    return m_Asset_idIsSet;
}

void V1_ExternalAsset::unsetAsset_id()
{
    m_Asset_idIsSet = false;
}
utility::string_t V1_ExternalAsset::getDescription() const
{
    return m_Description;
}


void V1_ExternalAsset::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool V1_ExternalAsset::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void V1_ExternalAsset::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t V1_ExternalAsset::getAssetType() const
{
    return m_Asset_type;
}


void V1_ExternalAsset::setAssetType(const utility::string_t& value)
{
    m_Asset_type = value;
    m_Asset_typeIsSet = true;
}

bool V1_ExternalAsset::assetTypeIsSet() const
{
    return m_Asset_typeIsSet;
}

void V1_ExternalAsset::unsetAsset_type()
{
    m_Asset_typeIsSet = false;
}

}
}
}
}


