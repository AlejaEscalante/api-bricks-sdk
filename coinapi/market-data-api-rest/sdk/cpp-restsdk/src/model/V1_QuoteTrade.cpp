/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_QuoteTrade.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_QuoteTrade::V1_QuoteTrade()
{
    m_Symbol_id = utility::conversions::to_string_t("");
    m_Symbol_idIsSet = false;
    m_Time_exchange = utility::datetime();
    m_Time_exchangeIsSet = false;
    m_Time_coinapi = utility::datetime();
    m_Time_coinapiIsSet = false;
    m_Ask_price = 0.0;
    m_Ask_priceIsSet = false;
    m_Ask_size = 0.0;
    m_Ask_sizeIsSet = false;
    m_Bid_price = 0.0;
    m_Bid_priceIsSet = false;
    m_Bid_size = 0.0;
    m_Bid_sizeIsSet = false;
    m_Last_tradeIsSet = false;
}

V1_QuoteTrade::~V1_QuoteTrade()
{
}

void V1_QuoteTrade::validate()
{
    // TODO: implement validation
}

web::json::value V1_QuoteTrade::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Symbol_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("symbol_id"))] = ModelBase::toJson(m_Symbol_id);
    }
    if(m_Time_exchangeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("time_exchange"))] = ModelBase::toJson(m_Time_exchange);
    }
    if(m_Time_coinapiIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("time_coinapi"))] = ModelBase::toJson(m_Time_coinapi);
    }
    if(m_Ask_priceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("ask_price"))] = ModelBase::toJson(m_Ask_price);
    }
    if(m_Ask_sizeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("ask_size"))] = ModelBase::toJson(m_Ask_size);
    }
    if(m_Bid_priceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("bid_price"))] = ModelBase::toJson(m_Bid_price);
    }
    if(m_Bid_sizeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("bid_size"))] = ModelBase::toJson(m_Bid_size);
    }
    if(m_Last_tradeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("last_trade"))] = ModelBase::toJson(m_Last_trade);
    }

    return val;
}

bool V1_QuoteTrade::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("symbol_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("symbol_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolId);
            setSymbolId(refVal_setSymbolId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("time_exchange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("time_exchange")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimeExchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeExchange);
            setTimeExchange(refVal_setTimeExchange);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("time_coinapi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("time_coinapi")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimeCoinapi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeCoinapi);
            setTimeCoinapi(refVal_setTimeCoinapi);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("ask_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("ask_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setAskPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAskPrice);
            setAskPrice(refVal_setAskPrice);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("ask_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("ask_size")));
        if(!fieldValue.is_null())
        {
            double refVal_setAskSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAskSize);
            setAskSize(refVal_setAskSize);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("bid_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("bid_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setBidPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBidPrice);
            setBidPrice(refVal_setBidPrice);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("bid_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("bid_size")));
        if(!fieldValue.is_null())
        {
            double refVal_setBidSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBidSize);
            setBidSize(refVal_setBidSize);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("last_trade"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("last_trade")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V1_LastTrade> refVal_setLastTrade;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastTrade);
            setLastTrade(refVal_setLastTrade);
            
        }
    }
    return ok;
}

void V1_QuoteTrade::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Symbol_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("symbol_id")), m_Symbol_id));
    }
    if(m_Time_exchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("time_exchange")), m_Time_exchange));
    }
    if(m_Time_coinapiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("time_coinapi")), m_Time_coinapi));
    }
    if(m_Ask_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("ask_price")), m_Ask_price));
    }
    if(m_Ask_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("ask_size")), m_Ask_size));
    }
    if(m_Bid_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("bid_price")), m_Bid_price));
    }
    if(m_Bid_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("bid_size")), m_Bid_size));
    }
    if(m_Last_tradeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("last_trade")), m_Last_trade));
    }
}

bool V1_QuoteTrade::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("symbol_id"))))
    {
        utility::string_t refVal_setSymbolId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("symbol_id"))), refVal_setSymbolId );
        setSymbolId(refVal_setSymbolId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("time_exchange"))))
    {
        utility::datetime refVal_setTimeExchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("time_exchange"))), refVal_setTimeExchange );
        setTimeExchange(refVal_setTimeExchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("time_coinapi"))))
    {
        utility::datetime refVal_setTimeCoinapi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("time_coinapi"))), refVal_setTimeCoinapi );
        setTimeCoinapi(refVal_setTimeCoinapi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("ask_price"))))
    {
        double refVal_setAskPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("ask_price"))), refVal_setAskPrice );
        setAskPrice(refVal_setAskPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("ask_size"))))
    {
        double refVal_setAskSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("ask_size"))), refVal_setAskSize );
        setAskSize(refVal_setAskSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("bid_price"))))
    {
        double refVal_setBidPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("bid_price"))), refVal_setBidPrice );
        setBidPrice(refVal_setBidPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("bid_size"))))
    {
        double refVal_setBidSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("bid_size"))), refVal_setBidSize );
        setBidSize(refVal_setBidSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("last_trade"))))
    {
        std::shared_ptr<V1_LastTrade> refVal_setLastTrade;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("last_trade"))), refVal_setLastTrade );
        setLastTrade(refVal_setLastTrade);
    }
    return ok;
}


utility::string_t V1_QuoteTrade::getSymbolId() const
{
    return m_Symbol_id;
}


void V1_QuoteTrade::setSymbolId(const utility::string_t& value)
{
    m_Symbol_id = value;
    m_Symbol_idIsSet = true;
}

bool V1_QuoteTrade::symbolIdIsSet() const
{
    return m_Symbol_idIsSet;
}

void V1_QuoteTrade::unsetSymbol_id()
{
    m_Symbol_idIsSet = false;
}
utility::datetime V1_QuoteTrade::getTimeExchange() const
{
    return m_Time_exchange;
}


void V1_QuoteTrade::setTimeExchange(const utility::datetime& value)
{
    m_Time_exchange = value;
    m_Time_exchangeIsSet = true;
}

bool V1_QuoteTrade::timeExchangeIsSet() const
{
    return m_Time_exchangeIsSet;
}

void V1_QuoteTrade::unsetTime_exchange()
{
    m_Time_exchangeIsSet = false;
}
utility::datetime V1_QuoteTrade::getTimeCoinapi() const
{
    return m_Time_coinapi;
}


void V1_QuoteTrade::setTimeCoinapi(const utility::datetime& value)
{
    m_Time_coinapi = value;
    m_Time_coinapiIsSet = true;
}

bool V1_QuoteTrade::timeCoinapiIsSet() const
{
    return m_Time_coinapiIsSet;
}

void V1_QuoteTrade::unsetTime_coinapi()
{
    m_Time_coinapiIsSet = false;
}
double V1_QuoteTrade::getAskPrice() const
{
    return m_Ask_price;
}

void V1_QuoteTrade::setAskPrice(double value)
{
    m_Ask_price = value;
    m_Ask_priceIsSet = true;
}

bool V1_QuoteTrade::askPriceIsSet() const
{
    return m_Ask_priceIsSet;
}

void V1_QuoteTrade::unsetAsk_price()
{
    m_Ask_priceIsSet = false;
}
double V1_QuoteTrade::getAskSize() const
{
    return m_Ask_size;
}

void V1_QuoteTrade::setAskSize(double value)
{
    m_Ask_size = value;
    m_Ask_sizeIsSet = true;
}

bool V1_QuoteTrade::askSizeIsSet() const
{
    return m_Ask_sizeIsSet;
}

void V1_QuoteTrade::unsetAsk_size()
{
    m_Ask_sizeIsSet = false;
}
double V1_QuoteTrade::getBidPrice() const
{
    return m_Bid_price;
}

void V1_QuoteTrade::setBidPrice(double value)
{
    m_Bid_price = value;
    m_Bid_priceIsSet = true;
}

bool V1_QuoteTrade::bidPriceIsSet() const
{
    return m_Bid_priceIsSet;
}

void V1_QuoteTrade::unsetBid_price()
{
    m_Bid_priceIsSet = false;
}
double V1_QuoteTrade::getBidSize() const
{
    return m_Bid_size;
}

void V1_QuoteTrade::setBidSize(double value)
{
    m_Bid_size = value;
    m_Bid_sizeIsSet = true;
}

bool V1_QuoteTrade::bidSizeIsSet() const
{
    return m_Bid_sizeIsSet;
}

void V1_QuoteTrade::unsetBid_size()
{
    m_Bid_sizeIsSet = false;
}
std::shared_ptr<V1_LastTrade> V1_QuoteTrade::getLastTrade() const
{
    return m_Last_trade;
}


void V1_QuoteTrade::setLastTrade(const std::shared_ptr<V1_LastTrade>& value)
{
    m_Last_trade = value;
    m_Last_tradeIsSet = true;
}

bool V1_QuoteTrade::lastTradeIsSet() const
{
    return m_Last_tradeIsSet;
}

void V1_QuoteTrade::unsetLast_trade()
{
    m_Last_tradeIsSet = false;
}

}
}
}
}


