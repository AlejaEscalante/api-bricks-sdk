/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_SymbolMapping.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_SymbolMapping::V1_SymbolMapping()
{
    m_Symbol_id = utility::conversions::to_string_t("");
    m_Symbol_idIsSet = false;
    m_Symbol_id_exchange = utility::conversions::to_string_t("");
    m_Symbol_id_exchangeIsSet = false;
    m_Coinapi_datainfo_id = 0;
    m_Coinapi_datainfo_idIsSet = false;
    m_Asset_id_base_exchange = utility::conversions::to_string_t("");
    m_Asset_id_base_exchangeIsSet = false;
    m_Asset_id_quote_exchange = utility::conversions::to_string_t("");
    m_Asset_id_quote_exchangeIsSet = false;
    m_Asset_id_base = utility::conversions::to_string_t("");
    m_Asset_id_baseIsSet = false;
    m_Asset_id_quote = utility::conversions::to_string_t("");
    m_Asset_id_quoteIsSet = false;
    m_Price_precision = 0.0;
    m_Price_precisionIsSet = false;
    m_Size_precision = 0.0;
    m_Size_precisionIsSet = false;
}

V1_SymbolMapping::~V1_SymbolMapping()
{
}

void V1_SymbolMapping::validate()
{
    // TODO: implement validation
}

web::json::value V1_SymbolMapping::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Symbol_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("symbol_id"))] = ModelBase::toJson(m_Symbol_id);
    }
    if(m_Symbol_id_exchangeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("symbol_id_exchange"))] = ModelBase::toJson(m_Symbol_id_exchange);
    }
    if(m_Coinapi_datainfo_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("coinapi_datainfo_id"))] = ModelBase::toJson(m_Coinapi_datainfo_id);
    }
    if(m_Asset_id_base_exchangeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("asset_id_base_exchange"))] = ModelBase::toJson(m_Asset_id_base_exchange);
    }
    if(m_Asset_id_quote_exchangeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("asset_id_quote_exchange"))] = ModelBase::toJson(m_Asset_id_quote_exchange);
    }
    if(m_Asset_id_baseIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("asset_id_base"))] = ModelBase::toJson(m_Asset_id_base);
    }
    if(m_Asset_id_quoteIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("asset_id_quote"))] = ModelBase::toJson(m_Asset_id_quote);
    }
    if(m_Price_precisionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("price_precision"))] = ModelBase::toJson(m_Price_precision);
    }
    if(m_Size_precisionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("size_precision"))] = ModelBase::toJson(m_Size_precision);
    }

    return val;
}

bool V1_SymbolMapping::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("symbol_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("symbol_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolId);
            setSymbolId(refVal_setSymbolId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("symbol_id_exchange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("symbol_id_exchange")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolIdExchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolIdExchange);
            setSymbolIdExchange(refVal_setSymbolIdExchange);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("coinapi_datainfo_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("coinapi_datainfo_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCoinapiDatainfoId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCoinapiDatainfoId);
            setCoinapiDatainfoId(refVal_setCoinapiDatainfoId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("asset_id_base_exchange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("asset_id_base_exchange")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetIdBaseExchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetIdBaseExchange);
            setAssetIdBaseExchange(refVal_setAssetIdBaseExchange);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote_exchange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote_exchange")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetIdQuoteExchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetIdQuoteExchange);
            setAssetIdQuoteExchange(refVal_setAssetIdQuoteExchange);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("asset_id_base"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("asset_id_base")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetIdBase;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetIdBase);
            setAssetIdBase(refVal_setAssetIdBase);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetIdQuote;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetIdQuote);
            setAssetIdQuote(refVal_setAssetIdQuote);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("price_precision"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("price_precision")));
        if(!fieldValue.is_null())
        {
            double refVal_setPricePrecision;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPricePrecision);
            setPricePrecision(refVal_setPricePrecision);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("size_precision"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("size_precision")));
        if(!fieldValue.is_null())
        {
            double refVal_setSizePrecision;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSizePrecision);
            setSizePrecision(refVal_setSizePrecision);
            
        }
    }
    return ok;
}

void V1_SymbolMapping::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Symbol_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("symbol_id")), m_Symbol_id));
    }
    if(m_Symbol_id_exchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("symbol_id_exchange")), m_Symbol_id_exchange));
    }
    if(m_Coinapi_datainfo_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("coinapi_datainfo_id")), m_Coinapi_datainfo_id));
    }
    if(m_Asset_id_base_exchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("asset_id_base_exchange")), m_Asset_id_base_exchange));
    }
    if(m_Asset_id_quote_exchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("asset_id_quote_exchange")), m_Asset_id_quote_exchange));
    }
    if(m_Asset_id_baseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("asset_id_base")), m_Asset_id_base));
    }
    if(m_Asset_id_quoteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("asset_id_quote")), m_Asset_id_quote));
    }
    if(m_Price_precisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("price_precision")), m_Price_precision));
    }
    if(m_Size_precisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("size_precision")), m_Size_precision));
    }
}

bool V1_SymbolMapping::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("symbol_id"))))
    {
        utility::string_t refVal_setSymbolId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("symbol_id"))), refVal_setSymbolId );
        setSymbolId(refVal_setSymbolId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("symbol_id_exchange"))))
    {
        utility::string_t refVal_setSymbolIdExchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("symbol_id_exchange"))), refVal_setSymbolIdExchange );
        setSymbolIdExchange(refVal_setSymbolIdExchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("coinapi_datainfo_id"))))
    {
        int32_t refVal_setCoinapiDatainfoId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("coinapi_datainfo_id"))), refVal_setCoinapiDatainfoId );
        setCoinapiDatainfoId(refVal_setCoinapiDatainfoId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_base_exchange"))))
    {
        utility::string_t refVal_setAssetIdBaseExchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_base_exchange"))), refVal_setAssetIdBaseExchange );
        setAssetIdBaseExchange(refVal_setAssetIdBaseExchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote_exchange"))))
    {
        utility::string_t refVal_setAssetIdQuoteExchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote_exchange"))), refVal_setAssetIdQuoteExchange );
        setAssetIdQuoteExchange(refVal_setAssetIdQuoteExchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_base"))))
    {
        utility::string_t refVal_setAssetIdBase;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_base"))), refVal_setAssetIdBase );
        setAssetIdBase(refVal_setAssetIdBase);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote"))))
    {
        utility::string_t refVal_setAssetIdQuote;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("asset_id_quote"))), refVal_setAssetIdQuote );
        setAssetIdQuote(refVal_setAssetIdQuote);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("price_precision"))))
    {
        double refVal_setPricePrecision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("price_precision"))), refVal_setPricePrecision );
        setPricePrecision(refVal_setPricePrecision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("size_precision"))))
    {
        double refVal_setSizePrecision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("size_precision"))), refVal_setSizePrecision );
        setSizePrecision(refVal_setSizePrecision);
    }
    return ok;
}


utility::string_t V1_SymbolMapping::getSymbolId() const
{
    return m_Symbol_id;
}


void V1_SymbolMapping::setSymbolId(const utility::string_t& value)
{
    m_Symbol_id = value;
    m_Symbol_idIsSet = true;
}

bool V1_SymbolMapping::symbolIdIsSet() const
{
    return m_Symbol_idIsSet;
}

void V1_SymbolMapping::unsetSymbol_id()
{
    m_Symbol_idIsSet = false;
}
utility::string_t V1_SymbolMapping::getSymbolIdExchange() const
{
    return m_Symbol_id_exchange;
}


void V1_SymbolMapping::setSymbolIdExchange(const utility::string_t& value)
{
    m_Symbol_id_exchange = value;
    m_Symbol_id_exchangeIsSet = true;
}

bool V1_SymbolMapping::symbolIdExchangeIsSet() const
{
    return m_Symbol_id_exchangeIsSet;
}

void V1_SymbolMapping::unsetSymbol_id_exchange()
{
    m_Symbol_id_exchangeIsSet = false;
}
int32_t V1_SymbolMapping::getCoinapiDatainfoId() const
{
    return m_Coinapi_datainfo_id;
}

void V1_SymbolMapping::setCoinapiDatainfoId(int32_t value)
{
    m_Coinapi_datainfo_id = value;
    m_Coinapi_datainfo_idIsSet = true;
}

bool V1_SymbolMapping::coinapiDatainfoIdIsSet() const
{
    return m_Coinapi_datainfo_idIsSet;
}

void V1_SymbolMapping::unsetCoinapi_datainfo_id()
{
    m_Coinapi_datainfo_idIsSet = false;
}
utility::string_t V1_SymbolMapping::getAssetIdBaseExchange() const
{
    return m_Asset_id_base_exchange;
}


void V1_SymbolMapping::setAssetIdBaseExchange(const utility::string_t& value)
{
    m_Asset_id_base_exchange = value;
    m_Asset_id_base_exchangeIsSet = true;
}

bool V1_SymbolMapping::assetIdBaseExchangeIsSet() const
{
    return m_Asset_id_base_exchangeIsSet;
}

void V1_SymbolMapping::unsetAsset_id_base_exchange()
{
    m_Asset_id_base_exchangeIsSet = false;
}
utility::string_t V1_SymbolMapping::getAssetIdQuoteExchange() const
{
    return m_Asset_id_quote_exchange;
}


void V1_SymbolMapping::setAssetIdQuoteExchange(const utility::string_t& value)
{
    m_Asset_id_quote_exchange = value;
    m_Asset_id_quote_exchangeIsSet = true;
}

bool V1_SymbolMapping::assetIdQuoteExchangeIsSet() const
{
    return m_Asset_id_quote_exchangeIsSet;
}

void V1_SymbolMapping::unsetAsset_id_quote_exchange()
{
    m_Asset_id_quote_exchangeIsSet = false;
}
utility::string_t V1_SymbolMapping::getAssetIdBase() const
{
    return m_Asset_id_base;
}


void V1_SymbolMapping::setAssetIdBase(const utility::string_t& value)
{
    m_Asset_id_base = value;
    m_Asset_id_baseIsSet = true;
}

bool V1_SymbolMapping::assetIdBaseIsSet() const
{
    return m_Asset_id_baseIsSet;
}

void V1_SymbolMapping::unsetAsset_id_base()
{
    m_Asset_id_baseIsSet = false;
}
utility::string_t V1_SymbolMapping::getAssetIdQuote() const
{
    return m_Asset_id_quote;
}


void V1_SymbolMapping::setAssetIdQuote(const utility::string_t& value)
{
    m_Asset_id_quote = value;
    m_Asset_id_quoteIsSet = true;
}

bool V1_SymbolMapping::assetIdQuoteIsSet() const
{
    return m_Asset_id_quoteIsSet;
}

void V1_SymbolMapping::unsetAsset_id_quote()
{
    m_Asset_id_quoteIsSet = false;
}
double V1_SymbolMapping::getPricePrecision() const
{
    return m_Price_precision;
}

void V1_SymbolMapping::setPricePrecision(double value)
{
    m_Price_precision = value;
    m_Price_precisionIsSet = true;
}

bool V1_SymbolMapping::pricePrecisionIsSet() const
{
    return m_Price_precisionIsSet;
}

void V1_SymbolMapping::unsetPrice_precision()
{
    m_Price_precisionIsSet = false;
}
double V1_SymbolMapping::getSizePrecision() const
{
    return m_Size_precision;
}

void V1_SymbolMapping::setSizePrecision(double value)
{
    m_Size_precision = value;
    m_Size_precisionIsSet = true;
}

bool V1_SymbolMapping::sizePrecisionIsSet() const
{
    return m_Size_precisionIsSet;
}

void V1_SymbolMapping::unsetSize_precision()
{
    m_Size_precisionIsSet = false;
}

}
}
}
}


