/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_OrderBookDepth.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_OrderBookDepth::V1_OrderBookDepth()
{
    m_Symbol_id = utility::conversions::to_string_t("");
    m_Symbol_idIsSet = false;
    m_Time_exchange = utility::datetime();
    m_Time_exchangeIsSet = false;
    m_Time_coinapi = utility::datetime();
    m_Time_coinapiIsSet = false;
    m_Ask_levels = 0L;
    m_Ask_levelsIsSet = false;
    m_Bid_levels = 0L;
    m_Bid_levelsIsSet = false;
    m_Ask_depth = 0.0;
    m_Ask_depthIsSet = false;
    m_Bid_depth = 0.0;
    m_Bid_depthIsSet = false;
}

V1_OrderBookDepth::~V1_OrderBookDepth()
{
}

void V1_OrderBookDepth::validate()
{
    // TODO: implement validation
}

web::json::value V1_OrderBookDepth::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Symbol_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("symbol_id"))] = ModelBase::toJson(m_Symbol_id);
    }
    if(m_Time_exchangeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("time_exchange"))] = ModelBase::toJson(m_Time_exchange);
    }
    if(m_Time_coinapiIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("time_coinapi"))] = ModelBase::toJson(m_Time_coinapi);
    }
    if(m_Ask_levelsIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("ask_levels"))] = ModelBase::toJson(m_Ask_levels);
    }
    if(m_Bid_levelsIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("bid_levels"))] = ModelBase::toJson(m_Bid_levels);
    }
    if(m_Ask_depthIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("ask_depth"))] = ModelBase::toJson(m_Ask_depth);
    }
    if(m_Bid_depthIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("bid_depth"))] = ModelBase::toJson(m_Bid_depth);
    }

    return val;
}

bool V1_OrderBookDepth::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("symbol_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolId);
            setSymbolId(refVal_setSymbolId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time_exchange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time_exchange")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimeExchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeExchange);
            setTimeExchange(refVal_setTimeExchange);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time_coinapi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time_coinapi")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimeCoinapi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeCoinapi);
            setTimeCoinapi(refVal_setTimeCoinapi);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ask_levels"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ask_levels")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setAskLevels;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAskLevels);
            setAskLevels(refVal_setAskLevels);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bid_levels"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bid_levels")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBidLevels;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBidLevels);
            setBidLevels(refVal_setBidLevels);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ask_depth"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ask_depth")));
        if(!fieldValue.is_null())
        {
            double refVal_setAskDepth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAskDepth);
            setAskDepth(refVal_setAskDepth);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bid_depth"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bid_depth")));
        if(!fieldValue.is_null())
        {
            double refVal_setBidDepth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBidDepth);
            setBidDepth(refVal_setBidDepth);
            
        }
    }
    return ok;
}

void V1_OrderBookDepth::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Symbol_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol_id")), m_Symbol_id));
    }
    if(m_Time_exchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time_exchange")), m_Time_exchange));
    }
    if(m_Time_coinapiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time_coinapi")), m_Time_coinapi));
    }
    if(m_Ask_levelsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ask_levels")), m_Ask_levels));
    }
    if(m_Bid_levelsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bid_levels")), m_Bid_levels));
    }
    if(m_Ask_depthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ask_depth")), m_Ask_depth));
    }
    if(m_Bid_depthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bid_depth")), m_Bid_depth));
    }
}

bool V1_OrderBookDepth::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol_id"))))
    {
        utility::string_t refVal_setSymbolId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol_id"))), refVal_setSymbolId );
        setSymbolId(refVal_setSymbolId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time_exchange"))))
    {
        utility::datetime refVal_setTimeExchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time_exchange"))), refVal_setTimeExchange );
        setTimeExchange(refVal_setTimeExchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time_coinapi"))))
    {
        utility::datetime refVal_setTimeCoinapi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time_coinapi"))), refVal_setTimeCoinapi );
        setTimeCoinapi(refVal_setTimeCoinapi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ask_levels"))))
    {
        int64_t refVal_setAskLevels;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ask_levels"))), refVal_setAskLevels );
        setAskLevels(refVal_setAskLevels);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bid_levels"))))
    {
        int64_t refVal_setBidLevels;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bid_levels"))), refVal_setBidLevels );
        setBidLevels(refVal_setBidLevels);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ask_depth"))))
    {
        double refVal_setAskDepth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ask_depth"))), refVal_setAskDepth );
        setAskDepth(refVal_setAskDepth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bid_depth"))))
    {
        double refVal_setBidDepth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bid_depth"))), refVal_setBidDepth );
        setBidDepth(refVal_setBidDepth);
    }
    return ok;
}


utility::string_t V1_OrderBookDepth::getSymbolId() const
{
    return m_Symbol_id;
}


void V1_OrderBookDepth::setSymbolId(const utility::string_t& value)
{
    m_Symbol_id = value;
    m_Symbol_idIsSet = true;
}

bool V1_OrderBookDepth::symbolIdIsSet() const
{
    return m_Symbol_idIsSet;
}

void V1_OrderBookDepth::unsetSymbol_id()
{
    m_Symbol_idIsSet = false;
}
utility::datetime V1_OrderBookDepth::getTimeExchange() const
{
    return m_Time_exchange;
}


void V1_OrderBookDepth::setTimeExchange(const utility::datetime& value)
{
    m_Time_exchange = value;
    m_Time_exchangeIsSet = true;
}

bool V1_OrderBookDepth::timeExchangeIsSet() const
{
    return m_Time_exchangeIsSet;
}

void V1_OrderBookDepth::unsetTime_exchange()
{
    m_Time_exchangeIsSet = false;
}
utility::datetime V1_OrderBookDepth::getTimeCoinapi() const
{
    return m_Time_coinapi;
}


void V1_OrderBookDepth::setTimeCoinapi(const utility::datetime& value)
{
    m_Time_coinapi = value;
    m_Time_coinapiIsSet = true;
}

bool V1_OrderBookDepth::timeCoinapiIsSet() const
{
    return m_Time_coinapiIsSet;
}

void V1_OrderBookDepth::unsetTime_coinapi()
{
    m_Time_coinapiIsSet = false;
}
int64_t V1_OrderBookDepth::getAskLevels() const
{
    return m_Ask_levels;
}

void V1_OrderBookDepth::setAskLevels(int64_t value)
{
    m_Ask_levels = value;
    m_Ask_levelsIsSet = true;
}

bool V1_OrderBookDepth::askLevelsIsSet() const
{
    return m_Ask_levelsIsSet;
}

void V1_OrderBookDepth::unsetAsk_levels()
{
    m_Ask_levelsIsSet = false;
}
int64_t V1_OrderBookDepth::getBidLevels() const
{
    return m_Bid_levels;
}

void V1_OrderBookDepth::setBidLevels(int64_t value)
{
    m_Bid_levels = value;
    m_Bid_levelsIsSet = true;
}

bool V1_OrderBookDepth::bidLevelsIsSet() const
{
    return m_Bid_levelsIsSet;
}

void V1_OrderBookDepth::unsetBid_levels()
{
    m_Bid_levelsIsSet = false;
}
double V1_OrderBookDepth::getAskDepth() const
{
    return m_Ask_depth;
}

void V1_OrderBookDepth::setAskDepth(double value)
{
    m_Ask_depth = value;
    m_Ask_depthIsSet = true;
}

bool V1_OrderBookDepth::askDepthIsSet() const
{
    return m_Ask_depthIsSet;
}

void V1_OrderBookDepth::unsetAsk_depth()
{
    m_Ask_depthIsSet = false;
}
double V1_OrderBookDepth::getBidDepth() const
{
    return m_Bid_depth;
}

void V1_OrderBookDepth::setBidDepth(double value)
{
    m_Bid_depth = value;
    m_Bid_depthIsSet = true;
}

bool V1_OrderBookDepth::bidDepthIsSet() const
{
    return m_Bid_depthIsSet;
}

void V1_OrderBookDepth::unsetBid_depth()
{
    m_Bid_depthIsSet = false;
}

}
}
}
}


