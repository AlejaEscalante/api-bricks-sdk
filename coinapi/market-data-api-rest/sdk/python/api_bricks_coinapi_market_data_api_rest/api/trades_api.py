# coding: utf-8

"""
    REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from api_bricks_coinapi_market_data_api_rest.models.v1_trade import V1Trade

from api_bricks_coinapi_market_data_api_rest.api_client import ApiClient, RequestSerialized
from api_bricks_coinapi_market_data_api_rest.api_response import ApiResponse
from api_bricks_coinapi_market_data_api_rest.rest import RESTResponseType


class TradesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def v1_trades_latest_get(
        self,
        filter_symbol_id: Annotated[Optional[StrictStr], Field(description="Comma or semicolon delimited parts of symbol identifier used to filter response. (optional)")] = None,
        include_id: Annotated[Optional[StrictBool], Field(description="Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[V1Trade]:
        """Latest data

        Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.

        :param filter_symbol_id: Comma or semicolon delimited parts of symbol identifier used to filter response. (optional)
        :type filter_symbol_id: str
        :param include_id: Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.
        :type include_id: bool
        :param limit: Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_trades_latest_get_serialize(
            filter_symbol_id=filter_symbol_id,
            include_id=include_id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[V1Trade]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1_trades_latest_get_with_http_info(
        self,
        filter_symbol_id: Annotated[Optional[StrictStr], Field(description="Comma or semicolon delimited parts of symbol identifier used to filter response. (optional)")] = None,
        include_id: Annotated[Optional[StrictBool], Field(description="Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[V1Trade]]:
        """Latest data

        Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.

        :param filter_symbol_id: Comma or semicolon delimited parts of symbol identifier used to filter response. (optional)
        :type filter_symbol_id: str
        :param include_id: Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.
        :type include_id: bool
        :param limit: Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_trades_latest_get_serialize(
            filter_symbol_id=filter_symbol_id,
            include_id=include_id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[V1Trade]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1_trades_latest_get_without_preload_content(
        self,
        filter_symbol_id: Annotated[Optional[StrictStr], Field(description="Comma or semicolon delimited parts of symbol identifier used to filter response. (optional)")] = None,
        include_id: Annotated[Optional[StrictBool], Field(description="Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Latest data

        Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.

        :param filter_symbol_id: Comma or semicolon delimited parts of symbol identifier used to filter response. (optional)
        :type filter_symbol_id: str
        :param include_id: Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.
        :type include_id: bool
        :param limit: Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_trades_latest_get_serialize(
            filter_symbol_id=filter_symbol_id,
            include_id=include_id,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[V1Trade]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1_trades_latest_get_serialize(
        self,
        filter_symbol_id,
        include_id,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if filter_symbol_id is not None:
            
            _query_params.append(('filter_symbol_id', filter_symbol_id))
            
        if include_id is not None:
            
            _query_params.append(('include_id', include_id))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json', 
                    'application/x-msgpack'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/trades/latest',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1_trades_symbol_id_history_get(
        self,
        symbol_id: Annotated[StrictStr, Field(description="Symbol identifier for requested timeseries (from the Metadata -> Symbols)")],
        var_date: Annotated[Optional[StrictStr], Field(description="Date in ISO 8601, returned data is for the whole given day (required if 'time_start' is not provided)")] = None,
        time_start: Annotated[Optional[StrictStr], Field(description="Starting time in ISO 8601")] = None,
        time_end: Annotated[Optional[StrictStr], Field(description="Timeseries ending time in ISO 8601")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)")] = None,
        include_id: Annotated[Optional[StrictBool], Field(description="Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[V1Trade]:
        """Historical data

        Get history transactions from specific symbol, returned in time ascending order.    :::warning  The 'time_start' and 'time_end' parameters must be from the same day as this endpoint provides intraday data only for specific day.  Please use the 'date' parameter instead for querying data for a specific day without filter.  :::

        :param symbol_id: Symbol identifier for requested timeseries (from the Metadata -> Symbols) (required)
        :type symbol_id: str
        :param var_date: Date in ISO 8601, returned data is for the whole given day (required if 'time_start' is not provided)
        :type var_date: str
        :param time_start: Starting time in ISO 8601
        :type time_start: str
        :param time_end: Timeseries ending time in ISO 8601
        :type time_end: str
        :param limit: Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
        :type limit: int
        :param include_id: Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.
        :type include_id: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_trades_symbol_id_history_get_serialize(
            symbol_id=symbol_id,
            var_date=var_date,
            time_start=time_start,
            time_end=time_end,
            limit=limit,
            include_id=include_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[V1Trade]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1_trades_symbol_id_history_get_with_http_info(
        self,
        symbol_id: Annotated[StrictStr, Field(description="Symbol identifier for requested timeseries (from the Metadata -> Symbols)")],
        var_date: Annotated[Optional[StrictStr], Field(description="Date in ISO 8601, returned data is for the whole given day (required if 'time_start' is not provided)")] = None,
        time_start: Annotated[Optional[StrictStr], Field(description="Starting time in ISO 8601")] = None,
        time_end: Annotated[Optional[StrictStr], Field(description="Timeseries ending time in ISO 8601")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)")] = None,
        include_id: Annotated[Optional[StrictBool], Field(description="Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[V1Trade]]:
        """Historical data

        Get history transactions from specific symbol, returned in time ascending order.    :::warning  The 'time_start' and 'time_end' parameters must be from the same day as this endpoint provides intraday data only for specific day.  Please use the 'date' parameter instead for querying data for a specific day without filter.  :::

        :param symbol_id: Symbol identifier for requested timeseries (from the Metadata -> Symbols) (required)
        :type symbol_id: str
        :param var_date: Date in ISO 8601, returned data is for the whole given day (required if 'time_start' is not provided)
        :type var_date: str
        :param time_start: Starting time in ISO 8601
        :type time_start: str
        :param time_end: Timeseries ending time in ISO 8601
        :type time_end: str
        :param limit: Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
        :type limit: int
        :param include_id: Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.
        :type include_id: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_trades_symbol_id_history_get_serialize(
            symbol_id=symbol_id,
            var_date=var_date,
            time_start=time_start,
            time_end=time_end,
            limit=limit,
            include_id=include_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[V1Trade]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1_trades_symbol_id_history_get_without_preload_content(
        self,
        symbol_id: Annotated[StrictStr, Field(description="Symbol identifier for requested timeseries (from the Metadata -> Symbols)")],
        var_date: Annotated[Optional[StrictStr], Field(description="Date in ISO 8601, returned data is for the whole given day (required if 'time_start' is not provided)")] = None,
        time_start: Annotated[Optional[StrictStr], Field(description="Starting time in ISO 8601")] = None,
        time_end: Annotated[Optional[StrictStr], Field(description="Timeseries ending time in ISO 8601")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)")] = None,
        include_id: Annotated[Optional[StrictBool], Field(description="Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Historical data

        Get history transactions from specific symbol, returned in time ascending order.    :::warning  The 'time_start' and 'time_end' parameters must be from the same day as this endpoint provides intraday data only for specific day.  Please use the 'date' parameter instead for querying data for a specific day without filter.  :::

        :param symbol_id: Symbol identifier for requested timeseries (from the Metadata -> Symbols) (required)
        :type symbol_id: str
        :param var_date: Date in ISO 8601, returned data is for the whole given day (required if 'time_start' is not provided)
        :type var_date: str
        :param time_start: Starting time in ISO 8601
        :type time_start: str
        :param time_end: Timeseries ending time in ISO 8601
        :type time_end: str
        :param limit: Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
        :type limit: int
        :param include_id: Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.
        :type include_id: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_trades_symbol_id_history_get_serialize(
            symbol_id=symbol_id,
            var_date=var_date,
            time_start=time_start,
            time_end=time_end,
            limit=limit,
            include_id=include_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[V1Trade]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1_trades_symbol_id_history_get_serialize(
        self,
        symbol_id,
        var_date,
        time_start,
        time_end,
        limit,
        include_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if symbol_id is not None:
            _path_params['symbol_id'] = symbol_id
        # process the query parameters
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        if time_start is not None:
            
            _query_params.append(('time_start', time_start))
            
        if time_end is not None:
            
            _query_params.append(('time_end', time_end))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include_id is not None:
            
            _query_params.append(('include_id', include_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json', 
                    'application/x-msgpack'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/trades/{symbol_id}/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def v1_trades_symbol_id_latest_get(
        self,
        symbol_id: Annotated[StrictStr, Field(description="Symbol identifier for requested timeseries (from the Metadata -> Symbols)")],
        limit: Annotated[Optional[StrictInt], Field(description="Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)")] = None,
        include_id: Annotated[Optional[StrictBool], Field(description="Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[V1Trade]:
        """Latest data by symbol_id

        Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.

        :param symbol_id: Symbol identifier for requested timeseries (from the Metadata -> Symbols) (required)
        :type symbol_id: str
        :param limit: Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
        :type limit: int
        :param include_id: Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.
        :type include_id: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_trades_symbol_id_latest_get_serialize(
            symbol_id=symbol_id,
            limit=limit,
            include_id=include_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[V1Trade]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def v1_trades_symbol_id_latest_get_with_http_info(
        self,
        symbol_id: Annotated[StrictStr, Field(description="Symbol identifier for requested timeseries (from the Metadata -> Symbols)")],
        limit: Annotated[Optional[StrictInt], Field(description="Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)")] = None,
        include_id: Annotated[Optional[StrictBool], Field(description="Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[V1Trade]]:
        """Latest data by symbol_id

        Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.

        :param symbol_id: Symbol identifier for requested timeseries (from the Metadata -> Symbols) (required)
        :type symbol_id: str
        :param limit: Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
        :type limit: int
        :param include_id: Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.
        :type include_id: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_trades_symbol_id_latest_get_serialize(
            symbol_id=symbol_id,
            limit=limit,
            include_id=include_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[V1Trade]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def v1_trades_symbol_id_latest_get_without_preload_content(
        self,
        symbol_id: Annotated[StrictStr, Field(description="Symbol identifier for requested timeseries (from the Metadata -> Symbols)")],
        limit: Annotated[Optional[StrictInt], Field(description="Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)")] = None,
        include_id: Annotated[Optional[StrictBool], Field(description="Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Latest data by symbol_id

        Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.

        :param symbol_id: Symbol identifier for requested timeseries (from the Metadata -> Symbols) (required)
        :type symbol_id: str
        :param limit: Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
        :type limit: int
        :param include_id: Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.
        :type include_id: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._v1_trades_symbol_id_latest_get_serialize(
            symbol_id=symbol_id,
            limit=limit,
            include_id=include_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[V1Trade]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _v1_trades_symbol_id_latest_get_serialize(
        self,
        symbol_id,
        limit,
        include_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if symbol_id is not None:
            _path_params['symbol_id'] = symbol_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include_id is not None:
            
            _query_params.append(('include_id', include_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json', 
                    'text/json', 
                    'application/x-msgpack'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/trades/{symbol_id}/latest',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


