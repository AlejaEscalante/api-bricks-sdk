# coding: utf-8

"""
    CoinAPI Market Data REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class V1Symbol(BaseModel):
    """
    Represents a symbol data model.
    """ # noqa: E501
    symbol_id: Optional[StrictStr] = Field(default=None, description="The symbol identifier.")
    exchange_id: Optional[StrictStr] = Field(default=None, description="The exchange identifier.")
    symbol_type: Optional[StrictStr] = Field(default=None, description="The symbol type.")
    asset_id_base: Optional[StrictStr] = Field(default=None, description="The base asset identifier.")
    asset_id_quote: Optional[StrictStr] = Field(default=None, description="The quote asset identifier.")
    asset_id_unit: Optional[StrictStr] = Field(default=None, description="The unit asset identifier.")
    future_contract_unit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The contract unit for futures.")
    future_contract_unit_asset: Optional[StrictStr] = Field(default=None, description="The asset used as the unit for futures contract.")
    future_delivery_time: Optional[datetime] = Field(default=None, description="The future delivery time for futures contract.")
    option_type_is_call: Optional[StrictBool] = Field(default=None, description="Indicates whether the option type is a call.")
    option_strike_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The strike price for options.")
    option_contract_unit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The contract unit for options.")
    option_exercise_style: Optional[StrictStr] = Field(default=None, description="The exercise style for options.")
    option_expiration_time: Optional[datetime] = Field(default=None, description="The expiration time for options.")
    contract_delivery_time: Optional[datetime] = Field(default=None, description="The delivery time for contracts.")
    contract_unit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The contract unit for contracts.")
    contract_unit_asset: Optional[StrictStr] = Field(default=None, description="The asset used as the unit for contracts.")
    contract_id: Optional[StrictStr] = Field(default=None, description="The contract identifier.")
    contract_display_name: Optional[StrictStr] = Field(default=None, description="The display name of the contract.")
    contract_display_description: Optional[StrictStr] = Field(default=None, description="The display description of the contract.")
    data_start: Optional[StrictStr] = None
    data_end: Optional[StrictStr] = None
    data_quote_start: Optional[datetime] = Field(default=None, description="The start date of quote data.")
    data_quote_end: Optional[datetime] = Field(default=None, description="The end date of quote data.")
    data_orderbook_start: Optional[datetime] = Field(default=None, description="The start date of order book data.")
    data_orderbook_end: Optional[datetime] = Field(default=None, description="The end date of order book data.")
    data_trade_start: Optional[datetime] = Field(default=None, description="The start date of trade data.")
    data_trade_end: Optional[datetime] = Field(default=None, description="The end date of trade data.")
    index_id: Optional[StrictStr] = Field(default=None, description="The index identifier.")
    index_display_name: Optional[StrictStr] = Field(default=None, description="The display name of the index.")
    index_display_description: Optional[StrictStr] = Field(default=None, description="The display description of the index.")
    volume_1hrs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The volume in the last 1 hour.")
    volume_1hrs_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The volume in USD in the last 1 hour.")
    volume_1day: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The volume in the last 1 day.")
    volume_1day_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The volume in USD in the last 1 day.")
    volume_1mth: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The volume in the last 1 month.")
    volume_1mth_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The volume in USD in the last 1 month.")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The price.")
    symbol_id_exchange: Optional[StrictStr] = Field(default=None, description="The symbol identifier in the exchange.")
    asset_id_base_exchange: Optional[StrictStr] = Field(default=None, description="The base asset identifier in the exchange.")
    asset_id_quote_exchange: Optional[StrictStr] = Field(default=None, description="The quote asset identifier in the exchange.")
    price_precision: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The price precision.")
    size_precision: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The size precision.")
    raw_kvp: Optional[Dict[str, StrictStr]] = Field(default=None, description="Not normalized raw kvp data.")
    volume_to_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Volume unit in USD.")
    symbol_id_integer: Optional[StrictInt] = Field(default=None, description="The symbol identifier in integer immutable format, used to correlate data across different APIs.")
    __properties: ClassVar[List[str]] = ["symbol_id", "exchange_id", "symbol_type", "asset_id_base", "asset_id_quote", "asset_id_unit", "future_contract_unit", "future_contract_unit_asset", "future_delivery_time", "option_type_is_call", "option_strike_price", "option_contract_unit", "option_exercise_style", "option_expiration_time", "contract_delivery_time", "contract_unit", "contract_unit_asset", "contract_id", "contract_display_name", "contract_display_description", "data_start", "data_end", "data_quote_start", "data_quote_end", "data_orderbook_start", "data_orderbook_end", "data_trade_start", "data_trade_end", "index_id", "index_display_name", "index_display_description", "volume_1hrs", "volume_1hrs_usd", "volume_1day", "volume_1day_usd", "volume_1mth", "volume_1mth_usd", "price", "symbol_id_exchange", "asset_id_base_exchange", "asset_id_quote_exchange", "price_precision", "size_precision", "raw_kvp", "volume_to_usd", "symbol_id_integer"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1Symbol from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "data_start",
            "data_end",
            "symbol_id_integer",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if symbol_id (nullable) is None
        # and model_fields_set contains the field
        if self.symbol_id is None and "symbol_id" in self.model_fields_set:
            _dict['symbol_id'] = None

        # set to None if exchange_id (nullable) is None
        # and model_fields_set contains the field
        if self.exchange_id is None and "exchange_id" in self.model_fields_set:
            _dict['exchange_id'] = None

        # set to None if symbol_type (nullable) is None
        # and model_fields_set contains the field
        if self.symbol_type is None and "symbol_type" in self.model_fields_set:
            _dict['symbol_type'] = None

        # set to None if asset_id_base (nullable) is None
        # and model_fields_set contains the field
        if self.asset_id_base is None and "asset_id_base" in self.model_fields_set:
            _dict['asset_id_base'] = None

        # set to None if asset_id_quote (nullable) is None
        # and model_fields_set contains the field
        if self.asset_id_quote is None and "asset_id_quote" in self.model_fields_set:
            _dict['asset_id_quote'] = None

        # set to None if asset_id_unit (nullable) is None
        # and model_fields_set contains the field
        if self.asset_id_unit is None and "asset_id_unit" in self.model_fields_set:
            _dict['asset_id_unit'] = None

        # set to None if future_contract_unit (nullable) is None
        # and model_fields_set contains the field
        if self.future_contract_unit is None and "future_contract_unit" in self.model_fields_set:
            _dict['future_contract_unit'] = None

        # set to None if future_contract_unit_asset (nullable) is None
        # and model_fields_set contains the field
        if self.future_contract_unit_asset is None and "future_contract_unit_asset" in self.model_fields_set:
            _dict['future_contract_unit_asset'] = None

        # set to None if future_delivery_time (nullable) is None
        # and model_fields_set contains the field
        if self.future_delivery_time is None and "future_delivery_time" in self.model_fields_set:
            _dict['future_delivery_time'] = None

        # set to None if option_type_is_call (nullable) is None
        # and model_fields_set contains the field
        if self.option_type_is_call is None and "option_type_is_call" in self.model_fields_set:
            _dict['option_type_is_call'] = None

        # set to None if option_strike_price (nullable) is None
        # and model_fields_set contains the field
        if self.option_strike_price is None and "option_strike_price" in self.model_fields_set:
            _dict['option_strike_price'] = None

        # set to None if option_contract_unit (nullable) is None
        # and model_fields_set contains the field
        if self.option_contract_unit is None and "option_contract_unit" in self.model_fields_set:
            _dict['option_contract_unit'] = None

        # set to None if option_exercise_style (nullable) is None
        # and model_fields_set contains the field
        if self.option_exercise_style is None and "option_exercise_style" in self.model_fields_set:
            _dict['option_exercise_style'] = None

        # set to None if option_expiration_time (nullable) is None
        # and model_fields_set contains the field
        if self.option_expiration_time is None and "option_expiration_time" in self.model_fields_set:
            _dict['option_expiration_time'] = None

        # set to None if contract_delivery_time (nullable) is None
        # and model_fields_set contains the field
        if self.contract_delivery_time is None and "contract_delivery_time" in self.model_fields_set:
            _dict['contract_delivery_time'] = None

        # set to None if contract_unit (nullable) is None
        # and model_fields_set contains the field
        if self.contract_unit is None and "contract_unit" in self.model_fields_set:
            _dict['contract_unit'] = None

        # set to None if contract_unit_asset (nullable) is None
        # and model_fields_set contains the field
        if self.contract_unit_asset is None and "contract_unit_asset" in self.model_fields_set:
            _dict['contract_unit_asset'] = None

        # set to None if contract_id (nullable) is None
        # and model_fields_set contains the field
        if self.contract_id is None and "contract_id" in self.model_fields_set:
            _dict['contract_id'] = None

        # set to None if contract_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.contract_display_name is None and "contract_display_name" in self.model_fields_set:
            _dict['contract_display_name'] = None

        # set to None if contract_display_description (nullable) is None
        # and model_fields_set contains the field
        if self.contract_display_description is None and "contract_display_description" in self.model_fields_set:
            _dict['contract_display_description'] = None

        # set to None if data_start (nullable) is None
        # and model_fields_set contains the field
        if self.data_start is None and "data_start" in self.model_fields_set:
            _dict['data_start'] = None

        # set to None if data_end (nullable) is None
        # and model_fields_set contains the field
        if self.data_end is None and "data_end" in self.model_fields_set:
            _dict['data_end'] = None

        # set to None if data_quote_start (nullable) is None
        # and model_fields_set contains the field
        if self.data_quote_start is None and "data_quote_start" in self.model_fields_set:
            _dict['data_quote_start'] = None

        # set to None if data_quote_end (nullable) is None
        # and model_fields_set contains the field
        if self.data_quote_end is None and "data_quote_end" in self.model_fields_set:
            _dict['data_quote_end'] = None

        # set to None if data_orderbook_start (nullable) is None
        # and model_fields_set contains the field
        if self.data_orderbook_start is None and "data_orderbook_start" in self.model_fields_set:
            _dict['data_orderbook_start'] = None

        # set to None if data_orderbook_end (nullable) is None
        # and model_fields_set contains the field
        if self.data_orderbook_end is None and "data_orderbook_end" in self.model_fields_set:
            _dict['data_orderbook_end'] = None

        # set to None if data_trade_start (nullable) is None
        # and model_fields_set contains the field
        if self.data_trade_start is None and "data_trade_start" in self.model_fields_set:
            _dict['data_trade_start'] = None

        # set to None if data_trade_end (nullable) is None
        # and model_fields_set contains the field
        if self.data_trade_end is None and "data_trade_end" in self.model_fields_set:
            _dict['data_trade_end'] = None

        # set to None if index_id (nullable) is None
        # and model_fields_set contains the field
        if self.index_id is None and "index_id" in self.model_fields_set:
            _dict['index_id'] = None

        # set to None if index_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.index_display_name is None and "index_display_name" in self.model_fields_set:
            _dict['index_display_name'] = None

        # set to None if index_display_description (nullable) is None
        # and model_fields_set contains the field
        if self.index_display_description is None and "index_display_description" in self.model_fields_set:
            _dict['index_display_description'] = None

        # set to None if volume_1hrs (nullable) is None
        # and model_fields_set contains the field
        if self.volume_1hrs is None and "volume_1hrs" in self.model_fields_set:
            _dict['volume_1hrs'] = None

        # set to None if volume_1hrs_usd (nullable) is None
        # and model_fields_set contains the field
        if self.volume_1hrs_usd is None and "volume_1hrs_usd" in self.model_fields_set:
            _dict['volume_1hrs_usd'] = None

        # set to None if volume_1day (nullable) is None
        # and model_fields_set contains the field
        if self.volume_1day is None and "volume_1day" in self.model_fields_set:
            _dict['volume_1day'] = None

        # set to None if volume_1day_usd (nullable) is None
        # and model_fields_set contains the field
        if self.volume_1day_usd is None and "volume_1day_usd" in self.model_fields_set:
            _dict['volume_1day_usd'] = None

        # set to None if volume_1mth (nullable) is None
        # and model_fields_set contains the field
        if self.volume_1mth is None and "volume_1mth" in self.model_fields_set:
            _dict['volume_1mth'] = None

        # set to None if volume_1mth_usd (nullable) is None
        # and model_fields_set contains the field
        if self.volume_1mth_usd is None and "volume_1mth_usd" in self.model_fields_set:
            _dict['volume_1mth_usd'] = None

        # set to None if price (nullable) is None
        # and model_fields_set contains the field
        if self.price is None and "price" in self.model_fields_set:
            _dict['price'] = None

        # set to None if symbol_id_exchange (nullable) is None
        # and model_fields_set contains the field
        if self.symbol_id_exchange is None and "symbol_id_exchange" in self.model_fields_set:
            _dict['symbol_id_exchange'] = None

        # set to None if asset_id_base_exchange (nullable) is None
        # and model_fields_set contains the field
        if self.asset_id_base_exchange is None and "asset_id_base_exchange" in self.model_fields_set:
            _dict['asset_id_base_exchange'] = None

        # set to None if asset_id_quote_exchange (nullable) is None
        # and model_fields_set contains the field
        if self.asset_id_quote_exchange is None and "asset_id_quote_exchange" in self.model_fields_set:
            _dict['asset_id_quote_exchange'] = None

        # set to None if price_precision (nullable) is None
        # and model_fields_set contains the field
        if self.price_precision is None and "price_precision" in self.model_fields_set:
            _dict['price_precision'] = None

        # set to None if size_precision (nullable) is None
        # and model_fields_set contains the field
        if self.size_precision is None and "size_precision" in self.model_fields_set:
            _dict['size_precision'] = None

        # set to None if raw_kvp (nullable) is None
        # and model_fields_set contains the field
        if self.raw_kvp is None and "raw_kvp" in self.model_fields_set:
            _dict['raw_kvp'] = None

        # set to None if volume_to_usd (nullable) is None
        # and model_fields_set contains the field
        if self.volume_to_usd is None and "volume_to_usd" in self.model_fields_set:
            _dict['volume_to_usd'] = None

        # set to None if symbol_id_integer (nullable) is None
        # and model_fields_set contains the field
        if self.symbol_id_integer is None and "symbol_id_integer" in self.model_fields_set:
            _dict['symbol_id_integer'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1Symbol from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol_id": obj.get("symbol_id"),
            "exchange_id": obj.get("exchange_id"),
            "symbol_type": obj.get("symbol_type"),
            "asset_id_base": obj.get("asset_id_base"),
            "asset_id_quote": obj.get("asset_id_quote"),
            "asset_id_unit": obj.get("asset_id_unit"),
            "future_contract_unit": obj.get("future_contract_unit"),
            "future_contract_unit_asset": obj.get("future_contract_unit_asset"),
            "future_delivery_time": obj.get("future_delivery_time"),
            "option_type_is_call": obj.get("option_type_is_call"),
            "option_strike_price": obj.get("option_strike_price"),
            "option_contract_unit": obj.get("option_contract_unit"),
            "option_exercise_style": obj.get("option_exercise_style"),
            "option_expiration_time": obj.get("option_expiration_time"),
            "contract_delivery_time": obj.get("contract_delivery_time"),
            "contract_unit": obj.get("contract_unit"),
            "contract_unit_asset": obj.get("contract_unit_asset"),
            "contract_id": obj.get("contract_id"),
            "contract_display_name": obj.get("contract_display_name"),
            "contract_display_description": obj.get("contract_display_description"),
            "data_start": obj.get("data_start"),
            "data_end": obj.get("data_end"),
            "data_quote_start": obj.get("data_quote_start"),
            "data_quote_end": obj.get("data_quote_end"),
            "data_orderbook_start": obj.get("data_orderbook_start"),
            "data_orderbook_end": obj.get("data_orderbook_end"),
            "data_trade_start": obj.get("data_trade_start"),
            "data_trade_end": obj.get("data_trade_end"),
            "index_id": obj.get("index_id"),
            "index_display_name": obj.get("index_display_name"),
            "index_display_description": obj.get("index_display_description"),
            "volume_1hrs": obj.get("volume_1hrs"),
            "volume_1hrs_usd": obj.get("volume_1hrs_usd"),
            "volume_1day": obj.get("volume_1day"),
            "volume_1day_usd": obj.get("volume_1day_usd"),
            "volume_1mth": obj.get("volume_1mth"),
            "volume_1mth_usd": obj.get("volume_1mth_usd"),
            "price": obj.get("price"),
            "symbol_id_exchange": obj.get("symbol_id_exchange"),
            "asset_id_base_exchange": obj.get("asset_id_base_exchange"),
            "asset_id_quote_exchange": obj.get("asset_id_quote_exchange"),
            "price_precision": obj.get("price_precision"),
            "size_precision": obj.get("size_precision"),
            "raw_kvp": obj.get("raw_kvp"),
            "volume_to_usd": obj.get("volume_to_usd"),
            "symbol_id_integer": obj.get("symbol_id_integer")
        })
        return _obj


