# coding: utf-8

"""
    REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from api_bricks_coinapi_market_data_api_rest.models.v1_last_trade import V1LastTrade
from typing import Optional, Set
from typing_extensions import Self

class V1QuoteTrade(BaseModel):
    """
    Represents a quote trade data model.
    """ # noqa: E501
    symbol_id: Optional[StrictStr] = Field(default=None, description="The symbol identifier.")
    time_exchange: Optional[datetime] = Field(default=None, description="The exchange time of the quote trade.")
    time_coinapi: Optional[datetime] = Field(default=None, description="The CoinAPI time when the quote trade was received.")
    ask_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The best asking price.")
    ask_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The volume resting on the best ask. If the value is equal to zero, then the size is unknown.")
    bid_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The best bidding price.")
    bid_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The volume resting on the best bid. If the value is equal to zero, then the size is unknown.")
    last_trade: Optional[V1LastTrade] = None
    __properties: ClassVar[List[str]] = ["symbol_id", "time_exchange", "time_coinapi", "ask_price", "ask_size", "bid_price", "bid_size", "last_trade"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1QuoteTrade from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_trade
        if self.last_trade:
            _dict['last_trade'] = self.last_trade.to_dict()
        # set to None if symbol_id (nullable) is None
        # and model_fields_set contains the field
        if self.symbol_id is None and "symbol_id" in self.model_fields_set:
            _dict['symbol_id'] = None

        # set to None if ask_price (nullable) is None
        # and model_fields_set contains the field
        if self.ask_price is None and "ask_price" in self.model_fields_set:
            _dict['ask_price'] = None

        # set to None if ask_size (nullable) is None
        # and model_fields_set contains the field
        if self.ask_size is None and "ask_size" in self.model_fields_set:
            _dict['ask_size'] = None

        # set to None if bid_price (nullable) is None
        # and model_fields_set contains the field
        if self.bid_price is None and "bid_price" in self.model_fields_set:
            _dict['bid_price'] = None

        # set to None if bid_size (nullable) is None
        # and model_fields_set contains the field
        if self.bid_size is None and "bid_size" in self.model_fields_set:
            _dict['bid_size'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1QuoteTrade from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol_id": obj.get("symbol_id"),
            "time_exchange": obj.get("time_exchange"),
            "time_coinapi": obj.get("time_coinapi"),
            "ask_price": obj.get("ask_price"),
            "ask_size": obj.get("ask_size"),
            "bid_price": obj.get("bid_price"),
            "bid_size": obj.get("bid_size"),
            "last_trade": V1LastTrade.from_dict(obj["last_trade"]) if obj.get("last_trade") is not None else None
        })
        return _obj


