# coding: utf-8

"""
    CoinAPI Market Data REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ModelsExchangeTimeseriesItem(BaseModel):
    """
    Represents a timeseries item with price and volume information.
    """ # noqa: E501
    time_period_start: Optional[datetime] = Field(default=None, description="The start time of the time period.")
    time_period_end: Optional[datetime] = Field(default=None, description="The end time of the time period.")
    time_open: Optional[datetime] = Field(default=None, description="The time when the price opened.")
    time_close: Optional[datetime] = Field(default=None, description="The time when the price closed.")
    price_open: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The opening price.")
    price_high: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The highest price during the time period.")
    price_low: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The lowest price during the time period.")
    price_close: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The closing price.")
    volume_traded: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total volume traded during the time period.")
    trades_count: Optional[StrictInt] = Field(default=None, description="The number of trades executed during the time period.")
    symbol_id_exchange: Optional[StrictStr] = None
    symbol_id_coinapi: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["time_period_start", "time_period_end", "time_open", "time_close", "price_open", "price_high", "price_low", "price_close", "volume_traded", "trades_count", "symbol_id_exchange", "symbol_id_coinapi"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelsExchangeTimeseriesItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if time_open (nullable) is None
        # and model_fields_set contains the field
        if self.time_open is None and "time_open" in self.model_fields_set:
            _dict['time_open'] = None

        # set to None if time_close (nullable) is None
        # and model_fields_set contains the field
        if self.time_close is None and "time_close" in self.model_fields_set:
            _dict['time_close'] = None

        # set to None if price_open (nullable) is None
        # and model_fields_set contains the field
        if self.price_open is None and "price_open" in self.model_fields_set:
            _dict['price_open'] = None

        # set to None if price_high (nullable) is None
        # and model_fields_set contains the field
        if self.price_high is None and "price_high" in self.model_fields_set:
            _dict['price_high'] = None

        # set to None if price_low (nullable) is None
        # and model_fields_set contains the field
        if self.price_low is None and "price_low" in self.model_fields_set:
            _dict['price_low'] = None

        # set to None if price_close (nullable) is None
        # and model_fields_set contains the field
        if self.price_close is None and "price_close" in self.model_fields_set:
            _dict['price_close'] = None

        # set to None if symbol_id_exchange (nullable) is None
        # and model_fields_set contains the field
        if self.symbol_id_exchange is None and "symbol_id_exchange" in self.model_fields_set:
            _dict['symbol_id_exchange'] = None

        # set to None if symbol_id_coinapi (nullable) is None
        # and model_fields_set contains the field
        if self.symbol_id_coinapi is None and "symbol_id_coinapi" in self.model_fields_set:
            _dict['symbol_id_coinapi'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelsExchangeTimeseriesItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "time_period_start": obj.get("time_period_start"),
            "time_period_end": obj.get("time_period_end"),
            "time_open": obj.get("time_open"),
            "time_close": obj.get("time_close"),
            "price_open": obj.get("price_open"),
            "price_high": obj.get("price_high"),
            "price_low": obj.get("price_low"),
            "price_close": obj.get("price_close"),
            "volume_traded": obj.get("volume_traded"),
            "trades_count": obj.get("trades_count"),
            "symbol_id_exchange": obj.get("symbol_id_exchange"),
            "symbol_id_coinapi": obj.get("symbol_id_coinapi")
        })
        return _obj


