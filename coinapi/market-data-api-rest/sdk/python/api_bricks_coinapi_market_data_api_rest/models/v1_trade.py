# coding: utf-8

"""
    REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class V1Trade(BaseModel):
    """
    Represents a trade executed on the exchange.
    """ # noqa: E501
    symbol_id: Optional[StrictStr] = Field(default=None, description="The symbol identifier.")
    time_exchange: Optional[datetime] = Field(default=None, description="The time of trade reported by the exchange.")
    time_coinapi: Optional[datetime] = Field(default=None, description="The time when the trade was received by CoinAPI.")
    uuid: Optional[StrictStr] = Field(default=None, description="The unique identifier for the trade.")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The price of the transaction.")
    size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The base asset amount traded in the transaction.")
    taker_side: Optional[StrictStr] = Field(default=None, description="The aggressor side of the transaction (BUY/SELL/BUY_ESTIMATED/SELL_ESTIMATED/UNKNOWN).")
    id_trade: Optional[StrictStr] = Field(default=None, description="The trade identifier.")
    id_order_maker: Optional[StrictStr] = Field(default=None, description="The order maker identifier.")
    id_order_taker: Optional[StrictStr] = Field(default=None, description="The order taker identifier.")
    __properties: ClassVar[List[str]] = ["symbol_id", "time_exchange", "time_coinapi", "uuid", "price", "size", "taker_side", "id_trade", "id_order_maker", "id_order_taker"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1Trade from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if symbol_id (nullable) is None
        # and model_fields_set contains the field
        if self.symbol_id is None and "symbol_id" in self.model_fields_set:
            _dict['symbol_id'] = None

        # set to None if taker_side (nullable) is None
        # and model_fields_set contains the field
        if self.taker_side is None and "taker_side" in self.model_fields_set:
            _dict['taker_side'] = None

        # set to None if id_trade (nullable) is None
        # and model_fields_set contains the field
        if self.id_trade is None and "id_trade" in self.model_fields_set:
            _dict['id_trade'] = None

        # set to None if id_order_maker (nullable) is None
        # and model_fields_set contains the field
        if self.id_order_maker is None and "id_order_maker" in self.model_fields_set:
            _dict['id_order_maker'] = None

        # set to None if id_order_taker (nullable) is None
        # and model_fields_set contains the field
        if self.id_order_taker is None and "id_order_taker" in self.model_fields_set:
            _dict['id_order_taker'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1Trade from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol_id": obj.get("symbol_id"),
            "time_exchange": obj.get("time_exchange"),
            "time_coinapi": obj.get("time_coinapi"),
            "uuid": obj.get("uuid"),
            "price": obj.get("price"),
            "size": obj.get("size"),
            "taker_side": obj.get("taker_side"),
            "id_trade": obj.get("id_trade"),
            "id_order_maker": obj.get("id_order_maker"),
            "id_order_taker": obj.get("id_order_taker")
        })
        return _obj


