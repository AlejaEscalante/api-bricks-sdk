# coding: utf-8

"""
    CoinAPI Market Data REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class V1SymbolMapping(BaseModel):
    """
    Represents symbol mapping information for exchange symbols.
    """ # noqa: E501
    symbol_id: Optional[StrictStr] = Field(default=None, description="The symbol ID.")
    symbol_id_exchange: Optional[StrictStr] = Field(default=None, description="The exchange-specific symbol ID.")
    coinapi_datainfo_id: Optional[StrictInt] = Field(default=None, description="The CoinAPI DataInfo ID.")
    asset_id_base_exchange: Optional[StrictStr] = Field(default=None, description="The exchange-specific base asset ID.")
    asset_id_quote_exchange: Optional[StrictStr] = Field(default=None, description="The exchange-specific quote asset ID.")
    asset_id_base: Optional[StrictStr] = Field(default=None, description="The base asset ID.")
    asset_id_quote: Optional[StrictStr] = Field(default=None, description="The quote asset ID.")
    price_precision: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The price precision.")
    size_precision: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The size precision.")
    __properties: ClassVar[List[str]] = ["symbol_id", "symbol_id_exchange", "coinapi_datainfo_id", "asset_id_base_exchange", "asset_id_quote_exchange", "asset_id_base", "asset_id_quote", "price_precision", "size_precision"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1SymbolMapping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if symbol_id (nullable) is None
        # and model_fields_set contains the field
        if self.symbol_id is None and "symbol_id" in self.model_fields_set:
            _dict['symbol_id'] = None

        # set to None if symbol_id_exchange (nullable) is None
        # and model_fields_set contains the field
        if self.symbol_id_exchange is None and "symbol_id_exchange" in self.model_fields_set:
            _dict['symbol_id_exchange'] = None

        # set to None if asset_id_base_exchange (nullable) is None
        # and model_fields_set contains the field
        if self.asset_id_base_exchange is None and "asset_id_base_exchange" in self.model_fields_set:
            _dict['asset_id_base_exchange'] = None

        # set to None if asset_id_quote_exchange (nullable) is None
        # and model_fields_set contains the field
        if self.asset_id_quote_exchange is None and "asset_id_quote_exchange" in self.model_fields_set:
            _dict['asset_id_quote_exchange'] = None

        # set to None if asset_id_base (nullable) is None
        # and model_fields_set contains the field
        if self.asset_id_base is None and "asset_id_base" in self.model_fields_set:
            _dict['asset_id_base'] = None

        # set to None if asset_id_quote (nullable) is None
        # and model_fields_set contains the field
        if self.asset_id_quote is None and "asset_id_quote" in self.model_fields_set:
            _dict['asset_id_quote'] = None

        # set to None if price_precision (nullable) is None
        # and model_fields_set contains the field
        if self.price_precision is None and "price_precision" in self.model_fields_set:
            _dict['price_precision'] = None

        # set to None if size_precision (nullable) is None
        # and model_fields_set contains the field
        if self.size_precision is None and "size_precision" in self.model_fields_set:
            _dict['size_precision'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1SymbolMapping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol_id": obj.get("symbol_id"),
            "symbol_id_exchange": obj.get("symbol_id_exchange"),
            "coinapi_datainfo_id": obj.get("coinapi_datainfo_id"),
            "asset_id_base_exchange": obj.get("asset_id_base_exchange"),
            "asset_id_quote_exchange": obj.get("asset_id_quote_exchange"),
            "asset_id_base": obj.get("asset_id_base"),
            "asset_id_quote": obj.get("asset_id_quote"),
            "price_precision": obj.get("price_precision"),
            "size_precision": obj.get("size_precision")
        })
        return _obj


