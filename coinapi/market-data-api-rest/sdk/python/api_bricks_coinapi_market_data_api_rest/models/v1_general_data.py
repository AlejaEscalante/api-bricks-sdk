# coding: utf-8

"""
    REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class V1GeneralData(BaseModel):
    """
    Class representation of general metric data. This class is an XML type with name 'general_data' and inherits from the BaseCsvModel class.
    """ # noqa: E501
    entry_time: Optional[datetime] = Field(default=None, description="Gets or sets the entry time for the data point.")
    recv_time: Optional[datetime] = Field(default=None, description="Gets or sets the received time for the data point.")
    exchange_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the identifier for the exchange.")
    asset_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the identifier for the asset.")
    symbol_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the identifier for the symbol.")
    metric_id: Optional[StrictStr] = Field(default=None, description="Gets or sets the identifier for the metric.")
    value_decimal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets the decimal value for the metric.")
    value_text: Optional[StrictStr] = Field(default=None, description="Gets or sets the textual representation of the value for the metric.")
    value_time: Optional[datetime] = Field(default=None, description="Gets or sets the timestamp value for the metric.")
    __properties: ClassVar[List[str]] = ["entry_time", "recv_time", "exchange_id", "asset_id", "symbol_id", "metric_id", "value_decimal", "value_text", "value_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1GeneralData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if exchange_id (nullable) is None
        # and model_fields_set contains the field
        if self.exchange_id is None and "exchange_id" in self.model_fields_set:
            _dict['exchange_id'] = None

        # set to None if asset_id (nullable) is None
        # and model_fields_set contains the field
        if self.asset_id is None and "asset_id" in self.model_fields_set:
            _dict['asset_id'] = None

        # set to None if symbol_id (nullable) is None
        # and model_fields_set contains the field
        if self.symbol_id is None and "symbol_id" in self.model_fields_set:
            _dict['symbol_id'] = None

        # set to None if metric_id (nullable) is None
        # and model_fields_set contains the field
        if self.metric_id is None and "metric_id" in self.model_fields_set:
            _dict['metric_id'] = None

        # set to None if value_decimal (nullable) is None
        # and model_fields_set contains the field
        if self.value_decimal is None and "value_decimal" in self.model_fields_set:
            _dict['value_decimal'] = None

        # set to None if value_text (nullable) is None
        # and model_fields_set contains the field
        if self.value_text is None and "value_text" in self.model_fields_set:
            _dict['value_text'] = None

        # set to None if value_time (nullable) is None
        # and model_fields_set contains the field
        if self.value_time is None and "value_time" in self.model_fields_set:
            _dict['value_time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1GeneralData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entry_time": obj.get("entry_time"),
            "recv_time": obj.get("recv_time"),
            "exchange_id": obj.get("exchange_id"),
            "asset_id": obj.get("asset_id"),
            "symbol_id": obj.get("symbol_id"),
            "metric_id": obj.get("metric_id"),
            "value_decimal": obj.get("value_decimal"),
            "value_text": obj.get("value_text"),
            "value_time": obj.get("value_time")
        })
        return _obj


