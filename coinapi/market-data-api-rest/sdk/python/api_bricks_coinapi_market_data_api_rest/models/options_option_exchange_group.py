# coding: utf-8

"""
    REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from api_bricks_coinapi_market_data_api_rest.models.options_strike import OptionsStrike
from typing import Optional, Set
from typing_extensions import Self

class OptionsOptionExchangeGroup(BaseModel):
    """
    Represents an option exchange group data model.
    """ # noqa: E501
    asset_id_base: Optional[StrictStr] = Field(default=None, description="The base asset identifier.")
    asset_id_quote: Optional[StrictStr] = Field(default=None, description="The quote asset identifier.")
    underlying_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The underlying price of the option.")
    time_expiration: Optional[datetime] = Field(default=None, description="The expiration time of the option.")
    strikes: Optional[List[OptionsStrike]] = Field(default=None, description="The list of strikes available.")
    __properties: ClassVar[List[str]] = ["asset_id_base", "asset_id_quote", "underlying_price", "time_expiration", "strikes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OptionsOptionExchangeGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in strikes (list)
        _items = []
        if self.strikes:
            for _item_strikes in self.strikes:
                if _item_strikes:
                    _items.append(_item_strikes.to_dict())
            _dict['strikes'] = _items
        # set to None if asset_id_base (nullable) is None
        # and model_fields_set contains the field
        if self.asset_id_base is None and "asset_id_base" in self.model_fields_set:
            _dict['asset_id_base'] = None

        # set to None if asset_id_quote (nullable) is None
        # and model_fields_set contains the field
        if self.asset_id_quote is None and "asset_id_quote" in self.model_fields_set:
            _dict['asset_id_quote'] = None

        # set to None if underlying_price (nullable) is None
        # and model_fields_set contains the field
        if self.underlying_price is None and "underlying_price" in self.model_fields_set:
            _dict['underlying_price'] = None

        # set to None if strikes (nullable) is None
        # and model_fields_set contains the field
        if self.strikes is None and "strikes" in self.model_fields_set:
            _dict['strikes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OptionsOptionExchangeGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asset_id_base": obj.get("asset_id_base"),
            "asset_id_quote": obj.get("asset_id_quote"),
            "underlying_price": obj.get("underlying_price"),
            "time_expiration": obj.get("time_expiration"),
            "strikes": [OptionsStrike.from_dict(_item) for _item in obj["strikes"]] if obj.get("strikes") is not None else None
        })
        return _obj


