# coding: utf-8

"""
    CoinAPI Market Data REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from api_bricks_coinapi_market_data_api_rest.models.v1_symbol import V1Symbol

class TestV1Symbol(unittest.TestCase):
    """V1Symbol unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1Symbol:
        """Test V1Symbol
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1Symbol`
        """
        model = V1Symbol()
        if include_optional:
            return V1Symbol(
                symbol_id = '',
                exchange_id = '',
                symbol_type = '',
                asset_id_base = '',
                asset_id_quote = '',
                asset_id_unit = '',
                future_contract_unit = 1.337,
                future_contract_unit_asset = '',
                future_delivery_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                option_type_is_call = True,
                option_strike_price = 1.337,
                option_contract_unit = 1.337,
                option_exercise_style = '',
                option_expiration_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                contract_delivery_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                contract_unit = 1.337,
                contract_unit_asset = '',
                contract_id = '',
                contract_display_name = '',
                contract_display_description = '',
                data_start = '',
                data_end = '',
                data_quote_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                data_quote_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                data_orderbook_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                data_orderbook_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                data_trade_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                data_trade_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                index_id = '',
                index_display_name = '',
                index_display_description = '',
                volume_1hrs = 1.337,
                volume_1hrs_usd = 1.337,
                volume_1day = 1.337,
                volume_1day_usd = 1.337,
                volume_1mth = 1.337,
                volume_1mth_usd = 1.337,
                price = 1.337,
                symbol_id_exchange = '',
                asset_id_base_exchange = '',
                asset_id_quote_exchange = '',
                price_precision = 1.337,
                size_precision = 1.337,
                raw_kvp = {
                    'key' : ''
                    },
                volume_to_usd = 1.337,
                symbol_id_integer = 56
            )
        else:
            return V1Symbol(
        )
        """

    def testV1Symbol(self):
        """Test V1Symbol"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
