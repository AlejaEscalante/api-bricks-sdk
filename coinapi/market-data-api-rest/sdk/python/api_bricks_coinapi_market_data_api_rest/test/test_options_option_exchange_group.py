# coding: utf-8

"""
    REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from api_bricks_coinapi_market_data_api_rest.models.options_option_exchange_group import OptionsOptionExchangeGroup

class TestOptionsOptionExchangeGroup(unittest.TestCase):
    """OptionsOptionExchangeGroup unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OptionsOptionExchangeGroup:
        """Test OptionsOptionExchangeGroup
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OptionsOptionExchangeGroup`
        """
        model = OptionsOptionExchangeGroup()
        if include_optional:
            return OptionsOptionExchangeGroup(
                asset_id_base = '',
                asset_id_quote = '',
                underlying_price = 1.337,
                time_expiration = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                strikes = [
                    api_bricks_coinapi_market_data_api_rest.models.options/strike.Options.Strike(
                        strike_price = 1.337, 
                        call = api_bricks_coinapi_market_data_api_rest.models.v1/quote_trade.v1.QuoteTrade(
                            symbol_id = '', 
                            time_exchange = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            time_coinapi = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            ask_price = 1.337, 
                            ask_size = 1.337, 
                            bid_price = 1.337, 
                            bid_size = 1.337, 
                            last_trade = api_bricks_coinapi_market_data_api_rest.models.v1/last_trade.v1.LastTrade(
                                time_exchange = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                time_coinapi = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                uuid = '', 
                                price = 1.337, 
                                size = 1.337, 
                                taker_side = '', ), ), 
                        put = api_bricks_coinapi_market_data_api_rest.models.v1/quote_trade.v1.QuoteTrade(
                            symbol_id = '', 
                            time_exchange = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            time_coinapi = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            ask_price = 1.337, 
                            ask_size = 1.337, 
                            bid_price = 1.337, 
                            bid_size = 1.337, ), )
                    ]
            )
        else:
            return OptionsOptionExchangeGroup(
        )
        """

    def testOptionsOptionExchangeGroup(self):
        """Test OptionsOptionExchangeGroup"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
