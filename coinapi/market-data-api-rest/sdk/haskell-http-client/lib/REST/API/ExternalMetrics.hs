{-
   REST API

   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   OpenAPI Version: 3.0.1
   REST API API version: v1
   Contact: support@apibricks.io
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : REST.API.ExternalMetrics
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module REST.API.ExternalMetrics where

import REST.Core
import REST.MimeTypes
import REST.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** ExternalMetrics

-- *** v1ExternalmetricsAssetHistoryGet

-- | @GET \/v1\/externalmetrics\/asset\/history@
-- 
-- Historical metrics for the asset from external sources
-- 
-- Get asset metrics history from external data providers. Data is typically aggregated daily.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1ExternalmetricsAssetHistoryGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> MetricId -- ^ "metricId" -  Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD` - internal metric key)
  -> AssetId -- ^ "assetId" -  Asset identifier (e.g., `USDC`, `USDT` - from supported assets list)
  -> RESTRequest V1ExternalmetricsAssetHistoryGet MimeNoContent [A.Value] accept
v1ExternalmetricsAssetHistoryGet  _ (MetricId metricId) (AssetId assetId) =
  _mkRequest "GET" ["/v1/externalmetrics/asset/history"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `addQuery` toQuery ("metric_id", Just metricId)
    `addQuery` toQuery ("asset_id", Just assetId)

data V1ExternalmetricsAssetHistoryGet  

-- | /Optional Param/ "time_start" - Starting time in ISO 8601
instance HasOptionalParam V1ExternalmetricsAssetHistoryGet TimeStartDateTime where
  applyOptionalParam req (TimeStartDateTime xs) =
    req `addQuery` toQuery ("time_start", Just xs)

-- | /Optional Param/ "time_end" - Ending time in ISO 8601
instance HasOptionalParam V1ExternalmetricsAssetHistoryGet TimeEndDateTime where
  applyOptionalParam req (TimeEndDateTime xs) =
    req `addQuery` toQuery ("time_end", Just xs)

-- | /Optional Param/ "time_format" - If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
instance HasOptionalParam V1ExternalmetricsAssetHistoryGet TimeFormat where
  applyOptionalParam req (TimeFormat xs) =
    req `addQuery` toQuery ("time_format", Just xs)

-- | /Optional Param/ "period_id" - Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
instance HasOptionalParam V1ExternalmetricsAssetHistoryGet PeriodId where
  applyOptionalParam req (PeriodId xs) =
    req `addQuery` toQuery ("period_id", Just xs)

-- | /Optional Param/ "limit" - Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
instance HasOptionalParam V1ExternalmetricsAssetHistoryGet Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces V1ExternalmetricsAssetHistoryGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExternalmetricsAssetHistoryGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExternalmetricsAssetHistoryGet MimeTextJson
-- | @text/plain@
instance Produces V1ExternalmetricsAssetHistoryGet MimePlainText


-- *** v1ExternalmetricsAssetListingGet

-- | @GET \/v1\/externalmetrics\/asset\/listing@
-- 
-- Listing of metrics available for specific asset
-- 
-- Get all metrics that are actually available for the specified asset from external providers.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1ExternalmetricsAssetListingGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> AssetId -- ^ "assetId" -  Asset identifier (e.g., USDC, USDT)
  -> RESTRequest V1ExternalmetricsAssetListingGet MimeNoContent [V1MetricInfo] accept
v1ExternalmetricsAssetListingGet  _ (AssetId assetId) =
  _mkRequest "GET" ["/v1/externalmetrics/asset/listing"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `addQuery` toQuery ("asset_id", Just assetId)

data V1ExternalmetricsAssetListingGet  
-- | @application/json@
instance Produces V1ExternalmetricsAssetListingGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExternalmetricsAssetListingGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExternalmetricsAssetListingGet MimeTextJson
-- | @text/plain@
instance Produces V1ExternalmetricsAssetListingGet MimePlainText


-- *** v1ExternalmetricsAssetsGet

-- | @GET \/v1\/externalmetrics\/assets@
-- 
-- Listing of all supported external assets
-- 
-- Get all assets (primarily stablecoins) supported by external data providers.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1ExternalmetricsAssetsGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> RESTRequest V1ExternalmetricsAssetsGet MimeNoContent [V1ExternalAsset] accept
v1ExternalmetricsAssetsGet  _ =
  _mkRequest "GET" ["/v1/externalmetrics/assets"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data V1ExternalmetricsAssetsGet  
-- | @application/json@
instance Produces V1ExternalmetricsAssetsGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExternalmetricsAssetsGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExternalmetricsAssetsGet MimeTextJson
-- | @text/plain@
instance Produces V1ExternalmetricsAssetsGet MimePlainText


-- *** v1ExternalmetricsChainHistoryGet

-- | @GET \/v1\/externalmetrics\/chain\/history@
-- 
-- Historical metrics for the chain from external sources
-- 
-- Get chain metrics history from external data providers. Data is typically aggregated daily.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1ExternalmetricsChainHistoryGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> MetricId -- ^ "metricId" -  Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD` - internal metric key)
  -> ChainId -- ^ "chainId" -  Chain identifier (e.g., `Ethereum`, `Arbitrum` - from supported chains list)
  -> RESTRequest V1ExternalmetricsChainHistoryGet MimeNoContent [A.Value] accept
v1ExternalmetricsChainHistoryGet  _ (MetricId metricId) (ChainId chainId) =
  _mkRequest "GET" ["/v1/externalmetrics/chain/history"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `addQuery` toQuery ("metric_id", Just metricId)
    `addQuery` toQuery ("chain_id", Just chainId)

data V1ExternalmetricsChainHistoryGet  

-- | /Optional Param/ "time_start" - Starting time in ISO 8601
instance HasOptionalParam V1ExternalmetricsChainHistoryGet TimeStartDateTime where
  applyOptionalParam req (TimeStartDateTime xs) =
    req `addQuery` toQuery ("time_start", Just xs)

-- | /Optional Param/ "time_end" - Ending time in ISO 8601
instance HasOptionalParam V1ExternalmetricsChainHistoryGet TimeEndDateTime where
  applyOptionalParam req (TimeEndDateTime xs) =
    req `addQuery` toQuery ("time_end", Just xs)

-- | /Optional Param/ "time_format" - If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
instance HasOptionalParam V1ExternalmetricsChainHistoryGet TimeFormat where
  applyOptionalParam req (TimeFormat xs) =
    req `addQuery` toQuery ("time_format", Just xs)

-- | /Optional Param/ "period_id" - Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
instance HasOptionalParam V1ExternalmetricsChainHistoryGet PeriodId where
  applyOptionalParam req (PeriodId xs) =
    req `addQuery` toQuery ("period_id", Just xs)

-- | /Optional Param/ "limit" - Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
instance HasOptionalParam V1ExternalmetricsChainHistoryGet Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces V1ExternalmetricsChainHistoryGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExternalmetricsChainHistoryGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExternalmetricsChainHistoryGet MimeTextJson
-- | @text/plain@
instance Produces V1ExternalmetricsChainHistoryGet MimePlainText


-- *** v1ExternalmetricsChainListingGet

-- | @GET \/v1\/externalmetrics\/chain\/listing@
-- 
-- Listing of metrics available for specific chain
-- 
-- Get all metrics that are actually available for the specified blockchain chain from external providers.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1ExternalmetricsChainListingGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChainId -- ^ "chainId" -  Chain identifier (e.g., ETHEREUM, ARBITRUM)
  -> RESTRequest V1ExternalmetricsChainListingGet MimeNoContent [V1MetricInfo] accept
v1ExternalmetricsChainListingGet  _ (ChainId chainId) =
  _mkRequest "GET" ["/v1/externalmetrics/chain/listing"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `addQuery` toQuery ("chain_id", Just chainId)

data V1ExternalmetricsChainListingGet  
-- | @application/json@
instance Produces V1ExternalmetricsChainListingGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExternalmetricsChainListingGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExternalmetricsChainListingGet MimeTextJson
-- | @text/plain@
instance Produces V1ExternalmetricsChainListingGet MimePlainText


-- *** v1ExternalmetricsChainsGet

-- | @GET \/v1\/externalmetrics\/chains@
-- 
-- Listing of all supported external chains
-- 
-- Get all blockchain chains supported by external data providers.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1ExternalmetricsChainsGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> RESTRequest V1ExternalmetricsChainsGet MimeNoContent [V1Chain] accept
v1ExternalmetricsChainsGet  _ =
  _mkRequest "GET" ["/v1/externalmetrics/chains"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data V1ExternalmetricsChainsGet  
-- | @application/json@
instance Produces V1ExternalmetricsChainsGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExternalmetricsChainsGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExternalmetricsChainsGet MimeTextJson
-- | @text/plain@
instance Produces V1ExternalmetricsChainsGet MimePlainText


-- *** v1ExternalmetricsExchangeHistoryGet

-- | @GET \/v1\/externalmetrics\/exchange\/history@
-- 
-- Historical metrics for the exchange from both external and internal sources
-- 
-- Get exchange metrics history from external data providers or internal sources based on metric type.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1ExternalmetricsExchangeHistoryGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> MetricId -- ^ "metricId" -  Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD` for external, or generic metric IDs)
  -> ExchangeId -- ^ "exchangeId" -  Exchange identifier (e.g., `BINANCE`, `UNISWAP-V3-ETHEREUM`)
  -> RESTRequest V1ExternalmetricsExchangeHistoryGet MimeNoContent [A.Value] accept
v1ExternalmetricsExchangeHistoryGet  _ (MetricId metricId) (ExchangeId exchangeId) =
  _mkRequest "GET" ["/v1/externalmetrics/exchange/history"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `addQuery` toQuery ("metric_id", Just metricId)
    `addQuery` toQuery ("exchange_id", Just exchangeId)

data V1ExternalmetricsExchangeHistoryGet  

-- | /Optional Param/ "time_start" - Starting time in ISO 8601
instance HasOptionalParam V1ExternalmetricsExchangeHistoryGet TimeStartDateTime where
  applyOptionalParam req (TimeStartDateTime xs) =
    req `addQuery` toQuery ("time_start", Just xs)

-- | /Optional Param/ "time_end" - Ending time in ISO 8601
instance HasOptionalParam V1ExternalmetricsExchangeHistoryGet TimeEndDateTime where
  applyOptionalParam req (TimeEndDateTime xs) =
    req `addQuery` toQuery ("time_end", Just xs)

-- | /Optional Param/ "time_format" - If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
instance HasOptionalParam V1ExternalmetricsExchangeHistoryGet TimeFormat where
  applyOptionalParam req (TimeFormat xs) =
    req `addQuery` toQuery ("time_format", Just xs)

-- | /Optional Param/ "period_id" - Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
instance HasOptionalParam V1ExternalmetricsExchangeHistoryGet PeriodId where
  applyOptionalParam req (PeriodId xs) =
    req `addQuery` toQuery ("period_id", Just xs)

-- | /Optional Param/ "limit" - Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
instance HasOptionalParam V1ExternalmetricsExchangeHistoryGet Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces V1ExternalmetricsExchangeHistoryGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExternalmetricsExchangeHistoryGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExternalmetricsExchangeHistoryGet MimeTextJson
-- | @text/plain@
instance Produces V1ExternalmetricsExchangeHistoryGet MimePlainText


-- *** v1ExternalmetricsExchangeListingGet

-- | @GET \/v1\/externalmetrics\/exchange\/listing@
-- 
-- Listing of metrics available for specific exchange (both external and generic)
-- 
-- Get all metrics that are actually available for the specified exchange from both external providers and internal sources.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1ExternalmetricsExchangeListingGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExchangeId -- ^ "exchangeId" -  Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM)
  -> RESTRequest V1ExternalmetricsExchangeListingGet MimeNoContent [V1MetricInfo] accept
v1ExternalmetricsExchangeListingGet  _ (ExchangeId exchangeId) =
  _mkRequest "GET" ["/v1/externalmetrics/exchange/listing"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `addQuery` toQuery ("exchange_id", Just exchangeId)

data V1ExternalmetricsExchangeListingGet  
-- | @application/json@
instance Produces V1ExternalmetricsExchangeListingGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExternalmetricsExchangeListingGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExternalmetricsExchangeListingGet MimeTextJson
-- | @text/plain@
instance Produces V1ExternalmetricsExchangeListingGet MimePlainText


-- *** v1ExternalmetricsExchangesGet

-- | @GET \/v1\/externalmetrics\/exchanges@
-- 
-- Listing of all supported external exchanges
-- 
-- Get all exchanges that have mapping to external data providers for metrics that actually have sources.  Only returns exchanges that are properly mapped to external protocols for metrics with defined sources.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1ExternalmetricsExchangesGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> RESTRequest V1ExternalmetricsExchangesGet MimeNoContent [V1ExternalExchange] accept
v1ExternalmetricsExchangesGet  _ =
  _mkRequest "GET" ["/v1/externalmetrics/exchanges"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data V1ExternalmetricsExchangesGet  
-- | @application/json@
instance Produces V1ExternalmetricsExchangesGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExternalmetricsExchangesGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExternalmetricsExchangesGet MimeTextJson
-- | @text/plain@
instance Produces V1ExternalmetricsExchangesGet MimePlainText


-- *** v1ExternalmetricsListingGet

-- | @GET \/v1\/externalmetrics\/listing@
-- 
-- Listing of all supported metrics (both external and generic)
-- 
-- Get all metrics available from external data providers and internal generic metrics.  External metrics have detailed descriptions, while generic metrics are marked as such.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1ExternalmetricsListingGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> RESTRequest V1ExternalmetricsListingGet MimeNoContent [V1MetricInfo] accept
v1ExternalmetricsListingGet  _ =
  _mkRequest "GET" ["/v1/externalmetrics/listing"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data V1ExternalmetricsListingGet  
-- | @application/json@
instance Produces V1ExternalmetricsListingGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExternalmetricsListingGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExternalmetricsListingGet MimeTextJson
-- | @text/plain@
instance Produces V1ExternalmetricsListingGet MimePlainText

