{-
   REST API

   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   OpenAPI Version: 3.0.1
   REST API API version: v1
   Contact: support@apibricks.io
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : REST.API.Metadata
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module REST.API.Metadata where

import REST.Core
import REST.MimeTypes
import REST.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Metadata

-- *** v1AssetsAssetIdGet

-- | @GET \/v1\/assets\/{asset_id}@
-- 
-- List all assets by asset ID
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1AssetsAssetIdGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> AssetId -- ^ "assetId" -  The asset ID.
  -> RESTRequest V1AssetsAssetIdGet MimeNoContent [V1Asset] accept
v1AssetsAssetIdGet  _ (AssetId assetId) =
  _mkRequest "GET" ["/v1/assets/",toPath assetId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data V1AssetsAssetIdGet  
-- | @application/json@
instance Produces V1AssetsAssetIdGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1AssetsAssetIdGet MimeXMsgpack
-- | @text/json@
instance Produces V1AssetsAssetIdGet MimeTextJson
-- | @text/plain@
instance Produces V1AssetsAssetIdGet MimePlainText


-- *** v1AssetsGet

-- | @GET \/v1\/assets@
-- 
-- List all assets
-- 
-- Retrieves all assets.                :::info  Our asset identifiers are aligned with the ISO 4217 currency codes standard only for fiat money (government or law regulated currency).  :::                :::info  Properties of the output are providing aggregated information from across all symbols related to the specific asset. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source.  :::
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1AssetsGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> RESTRequest V1AssetsGet MimeNoContent [V1Asset] accept
v1AssetsGet  _ =
  _mkRequest "GET" ["/v1/assets"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data V1AssetsGet  

-- | /Optional Param/ "filter_asset_id" - Comma or semicolon delimited asset identifiers used to filter response. (optional, eg. `BTC;ETH`).
instance HasOptionalParam V1AssetsGet FilterAssetId where
  applyOptionalParam req (FilterAssetId xs) =
    req `addQuery` toQuery ("filter_asset_id", Just xs)
-- | @application/json@
instance Produces V1AssetsGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1AssetsGet MimeXMsgpack
-- | @text/json@
instance Produces V1AssetsGet MimeTextJson
-- | @text/plain@
instance Produces V1AssetsGet MimePlainText


-- *** v1AssetsIconsSizeGet

-- | @GET \/v1\/assets\/icons\/{size}@
-- 
-- List all asset icons
-- 
-- Gets the list of icons (of the given size) for all the assets.
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1AssetsIconsSizeGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> Size -- ^ "size" -  The size of the icons.
  -> RESTRequest V1AssetsIconsSizeGet MimeNoContent [V1Icon] accept
v1AssetsIconsSizeGet  _ (Size size) =
  _mkRequest "GET" ["/v1/assets/icons/",toPath size]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data V1AssetsIconsSizeGet  
-- | @application/json@
instance Produces V1AssetsIconsSizeGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1AssetsIconsSizeGet MimeXMsgpack
-- | @text/json@
instance Produces V1AssetsIconsSizeGet MimeTextJson
-- | @text/plain@
instance Produces V1AssetsIconsSizeGet MimePlainText


-- *** v1ExchangesExchangeIdGet

-- | @GET \/v1\/exchanges\/{exchange_id}@
-- 
-- List all exchanges by exchange_id
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1ExchangesExchangeIdGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExchangeId -- ^ "exchangeId" -  The ID of the exchange.
  -> RESTRequest V1ExchangesExchangeIdGet MimeNoContent [V1Exchange] accept
v1ExchangesExchangeIdGet  _ (ExchangeId exchangeId) =
  _mkRequest "GET" ["/v1/exchanges/",toPath exchangeId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data V1ExchangesExchangeIdGet  
-- | @application/json@
instance Produces V1ExchangesExchangeIdGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExchangesExchangeIdGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExchangesExchangeIdGet MimeTextJson
-- | @text/plain@
instance Produces V1ExchangesExchangeIdGet MimePlainText


-- *** v1ExchangesGet

-- | @GET \/v1\/exchanges@
-- 
-- List all exchanges
-- 
-- Get a detailed list of exchanges provided by the system.                :::info  Properties of the output are providing aggregated information from across all symbols related to the specific exchange. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source.  :::
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1ExchangesGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> RESTRequest V1ExchangesGet MimeNoContent [V1Exchange] accept
v1ExchangesGet  _ =
  _mkRequest "GET" ["/v1/exchanges"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data V1ExchangesGet  

-- | /Optional Param/ "filter_exchange_id" - Comma or semicolon delimited exchange identifiers used to filter response. (optional, eg. `BITSTAMP;GEMINI`)
instance HasOptionalParam V1ExchangesGet FilterExchangeId where
  applyOptionalParam req (FilterExchangeId xs) =
    req `addQuery` toQuery ("filter_exchange_id", Just xs)
-- | @application/json@
instance Produces V1ExchangesGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExchangesGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExchangesGet MimeTextJson
-- | @text/plain@
instance Produces V1ExchangesGet MimePlainText


-- *** v1ExchangesIconsSizeGet

-- | @GET \/v1\/exchanges\/icons\/{size}@
-- 
-- List of icons for the exchanges
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1ExchangesIconsSizeGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> Size -- ^ "size" -  The size of the icons.
  -> RESTRequest V1ExchangesIconsSizeGet MimeNoContent [V1Icon] accept
v1ExchangesIconsSizeGet  _ (Size size) =
  _mkRequest "GET" ["/v1/exchanges/icons/",toPath size]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data V1ExchangesIconsSizeGet  
-- | @application/json@
instance Produces V1ExchangesIconsSizeGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExchangesIconsSizeGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExchangesIconsSizeGet MimeTextJson
-- | @text/plain@
instance Produces V1ExchangesIconsSizeGet MimePlainText


-- *** v1SymbolsExchangeIdGet

-- | @GET \/v1\/symbols\/{exchange_id}@
-- 
-- List of symbols for the exchange
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1SymbolsExchangeIdGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExchangeId -- ^ "exchangeId" -  The ID of the exchange (from the Metadata -> Exchanges)
  -> RESTRequest V1SymbolsExchangeIdGet MimeNoContent [V1Symbol] accept
v1SymbolsExchangeIdGet  _ (ExchangeId exchangeId) =
  _mkRequest "GET" ["/v1/symbols/",toPath exchangeId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data V1SymbolsExchangeIdGet  

-- | /Optional Param/ "filter_symbol_id" - The filter for symbol ID.
instance HasOptionalParam V1SymbolsExchangeIdGet FilterSymbolId where
  applyOptionalParam req (FilterSymbolId xs) =
    req `addQuery` toQuery ("filter_symbol_id", Just xs)

-- | /Optional Param/ "filter_asset_id" - The filter for asset ID.
instance HasOptionalParam V1SymbolsExchangeIdGet FilterAssetId where
  applyOptionalParam req (FilterAssetId xs) =
    req `addQuery` toQuery ("filter_asset_id", Just xs)
-- | @application/json@
instance Produces V1SymbolsExchangeIdGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1SymbolsExchangeIdGet MimeXMsgpack
-- | @text/json@
instance Produces V1SymbolsExchangeIdGet MimeTextJson
-- | @text/plain@
instance Produces V1SymbolsExchangeIdGet MimePlainText


-- *** v1SymbolsGet

-- | @GET \/v1\/symbols@
-- 
-- List all symbols
-- 
-- Retrieves all symbols with optional filtering.                :::info  \"price_precision\" and \"size_precision\" are data precisions and are not always the same precisions used for trading eg. for the \"BINANCE\" exchanges.  :::                :::info  You should not assume that the market data will be always within the resolution provided by the \"price_precision\" and \"size_precision\". The fact that the precision values can be derived from a posterior implies the fact that this data could be delayed, also it can be changed by the data source without notice and we will immediately deliver data with the new precision while could not update the precision values in this endpoint immediately.  :::                ### Symbol identifier                Our symbol identifier is created using a pattern that depends on symbol type.                Type | `symbol_id` pattern  --------- | ---------  SPOT | `{exchange_id}_SPOT_{asset_id_base}_{asset_id_quote}`  FUTURES | `{exchange_id}_FTS_{asset_id_base}_{asset_id_quote}_{YYMMDD of future_delivery_time}`  OPTION | `{exchange_id}_OPT_{asset_id_base}_{asset_id_quote}_{YYMMDD of option_expiration_time}_{option_strike_price}_{option_type_is_call as C/P}`  PERPETUAL | `{exchange_id}_PERP_{asset_id_base}_{asset_id_quote}`  INDEX | `{exchange_id}_IDX_{index_id}`  CREDIT | `{exchange_id}_CRE_{asset_id_base}`  CONTACT  | `{exchange_id}_COT_{contract_id}`                :::info  In the unlikely event when the \"symbol_id\" for more than one market is the same. We will append the additional term (prefixed with the \"_\") at the end of the duplicated identifiers to differentiate them.  :::info                ### Symbol types list (enumeration of `symbol_type` output variable)                Type | Name | Description  -------- | - | -----------  SPOT | FX Spot | Agreement to exchange one asset for another one *(e.g. Buy BTC for USD)*  FUTURES | Futures contract | FX Spot derivative contract where traders agree to trade fx spot at predetermined future time  OPTION | Option contract | FX Spot derivative contract where traders agree to trade right to require buy or sell of fx spot at agreed price on exercise date  PERPETUAL | Perpetual contract | FX Spot derivative contract where traders agree to trade fx spot continously without predetermined future delivery time  INDEX | Index | Statistical composite that measures changes in the economy or markets.  CREDIT | Credit/Funding | Margin funding contract. Order book displays lending offers and borrow bids. Price represents the daily rate.  CONTRACT | Contract | Represents other types of financial instruments *(e.g. spreads, interest rate swap)*                ### Additional output variables for `symbol_type = INDEX`                Variable | Description  --------- | -----------  index_id | Index identifier  index_display_name | Human readable name of the index *(optional)*  index_display_description | Description of the index *(optional)*                ### Additional output variables for `symbol_type = FUTURES`                Variable | Description  --------- | -----------  future_delivery_time | Predetermined time of futures contract delivery date in ISO 8601  future_contract_unit | Contact size *(eg. 10 BTC if `future_contract_unit` = `10` and `future_contract_unit_asset` = `BTC`)*  future_contract_unit_asset | Identifier of the asset used to denominate the contract unit                ### Additional output variables for `symbol_type = PERPETUAL`                Variable | Description  --------- | -----------  future_contract_unit | Contact size *(eg. 10 BTC if `future_contract_unit` = `10` and `future_contract_unit_asset` = `BTC`)*  future_contract_unit_asset | Identifier of the asset used to denominate the contract unit                ### Additional output variables for `symbol_type = OPTION`                Variable | Description  --------- | -----------  option_type_is_call | Boolean value representing option type. `true` for Call options, `false` for Put options  option_strike_price | Price at which option contract can be exercised  option_contract_unit | Base asset amount of underlying spot which single option represents  option_exercise_style | Option exercise style. Can be `EUROPEAN` or `AMERICAN`  option_expiration_time | Option contract expiration time in ISO 8601                ### Additional output variables for `symbol_type = CONTRACT`                Variable | Description  --------- | -----------  contract_delivery_time | Predetermined time of contract delivery date in ISO 8601  contract_unit | Contact size *(eg. 10 BTC if `contract_unit` = `10` and `contract_unit_asset` = `BTC`)*  contract_unit_asset | Identifier of the asset used to denominate the contract unit  contract_id | Identifier of contract by the exchange
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1SymbolsGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> RESTRequest V1SymbolsGet MimeNoContent [V1Symbol] accept
v1SymbolsGet  _ =
  _mkRequest "GET" ["/v1/symbols"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data V1SymbolsGet  

-- | /Optional Param/ "filter_symbol_id" - Comma or semicolon delimited parts of symbol identifier used to filter response. (optional, eg. `BITSTAMP`_ or `BINANCE_SPOT_`)
instance HasOptionalParam V1SymbolsGet FilterSymbolId where
  applyOptionalParam req (FilterSymbolId xs) =
    req `addQuery` toQuery ("filter_symbol_id", Just xs)

-- | /Optional Param/ "filter_exchange_id" - The filter for exchange ID.
instance HasOptionalParam V1SymbolsGet FilterExchangeId where
  applyOptionalParam req (FilterExchangeId xs) =
    req `addQuery` toQuery ("filter_exchange_id", Just xs)

-- | /Optional Param/ "filter_asset_id" - The filter for asset ID.
instance HasOptionalParam V1SymbolsGet FilterAssetId where
  applyOptionalParam req (FilterAssetId xs) =
    req `addQuery` toQuery ("filter_asset_id", Just xs)
-- | @application/json@
instance Produces V1SymbolsGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1SymbolsGet MimeXMsgpack
-- | @text/json@
instance Produces V1SymbolsGet MimeTextJson
-- | @text/plain@
instance Produces V1SymbolsGet MimePlainText


-- *** v1SymbolsMapExchangeIdGet

-- | @GET \/v1\/symbols\/map\/{exchange_id}@
-- 
-- List symbol mapping for the exchange
-- 
-- AuthMethod: 'AuthApiKeyApiKey'
-- 
v1SymbolsMapExchangeIdGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExchangeId -- ^ "exchangeId" -  The ID of the exchange (from the Metadata -> Exchanges)
  -> RESTRequest V1SymbolsMapExchangeIdGet MimeNoContent [V1SymbolMapping] accept
v1SymbolsMapExchangeIdGet  _ (ExchangeId exchangeId) =
  _mkRequest "GET" ["/v1/symbols/map/",toPath exchangeId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)

data V1SymbolsMapExchangeIdGet  
-- | @application/json@
instance Produces V1SymbolsMapExchangeIdGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1SymbolsMapExchangeIdGet MimeXMsgpack
-- | @text/json@
instance Produces V1SymbolsMapExchangeIdGet MimeTextJson
-- | @text/plain@
instance Produces V1SymbolsMapExchangeIdGet MimePlainText

