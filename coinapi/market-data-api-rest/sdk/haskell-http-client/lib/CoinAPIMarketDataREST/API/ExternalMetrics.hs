{-
   CoinAPI Market Data REST API

   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   OpenAPI Version: 3.0.4
   CoinAPI Market Data REST API API version: v1
   Contact: support@apibricks.io
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : CoinAPIMarketDataREST.API.ExternalMetrics
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module CoinAPIMarketDataREST.API.ExternalMetrics where

import CoinAPIMarketDataREST.Core
import CoinAPIMarketDataREST.MimeTypes
import CoinAPIMarketDataREST.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** ExternalMetrics

-- *** v1ExternalmetricsAssetHistoryGet

-- | @GET \/v1\/externalmetrics\/asset\/history@
-- 
-- Historical metrics for the asset
-- 
-- Get asset metrics history.
-- 
-- AuthMethod: 'AuthApiKeyAPIKey', 'AuthBasicJWT'
-- 
v1ExternalmetricsAssetHistoryGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> MetricId -- ^ "metricId" -  Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD`)
  -> AssetId -- ^ "assetId" -  Asset identifier (e.g., `USDC`, `USDT`)
  -> CoinAPIMarketDataRESTRequest V1ExternalmetricsAssetHistoryGet MimeNoContent [A.Value] accept
v1ExternalmetricsAssetHistoryGet  _ (MetricId metricId) (AssetId assetId) =
  _mkRequest "GET" ["/v1/externalmetrics/asset/history"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyAPIKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicJWT)
    `addQuery` toQuery ("metric_id", Just metricId)
    `addQuery` toQuery ("asset_id", Just assetId)

data V1ExternalmetricsAssetHistoryGet  

-- | /Optional Param/ "time_start" - Starting time in ISO 8601
instance HasOptionalParam V1ExternalmetricsAssetHistoryGet TimeStartDateTime where
  applyOptionalParam req (TimeStartDateTime xs) =
    req `addQuery` toQuery ("time_start", Just xs)

-- | /Optional Param/ "time_end" - Ending time in ISO 8601
instance HasOptionalParam V1ExternalmetricsAssetHistoryGet TimeEndDateTime where
  applyOptionalParam req (TimeEndDateTime xs) =
    req `addQuery` toQuery ("time_end", Just xs)

-- | /Optional Param/ "time_format" - If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
instance HasOptionalParam V1ExternalmetricsAssetHistoryGet TimeFormat where
  applyOptionalParam req (TimeFormat xs) =
    req `addQuery` toQuery ("time_format", Just xs)

-- | /Optional Param/ "period_id" - Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
instance HasOptionalParam V1ExternalmetricsAssetHistoryGet PeriodId where
  applyOptionalParam req (PeriodId xs) =
    req `addQuery` toQuery ("period_id", Just xs)

-- | /Optional Param/ "limit" - Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
instance HasOptionalParam V1ExternalmetricsAssetHistoryGet Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces V1ExternalmetricsAssetHistoryGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExternalmetricsAssetHistoryGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExternalmetricsAssetHistoryGet MimeTextJson
-- | @text/plain@
instance Produces V1ExternalmetricsAssetHistoryGet MimePlainText


-- *** v1ExternalmetricsAssetListingGet

-- | @GET \/v1\/externalmetrics\/asset\/listing@
-- 
-- Listing of metrics available for specific asset
-- 
-- Get all metrics that are actually available for the specified asset.
-- 
-- AuthMethod: 'AuthApiKeyAPIKey', 'AuthBasicJWT'
-- 
v1ExternalmetricsAssetListingGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> AssetId -- ^ "assetId" -  Asset identifier (e.g., USDC, USDT)
  -> CoinAPIMarketDataRESTRequest V1ExternalmetricsAssetListingGet MimeNoContent [V1MetricInfo] accept
v1ExternalmetricsAssetListingGet  _ (AssetId assetId) =
  _mkRequest "GET" ["/v1/externalmetrics/asset/listing"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyAPIKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicJWT)
    `addQuery` toQuery ("asset_id", Just assetId)

data V1ExternalmetricsAssetListingGet  
-- | @application/json@
instance Produces V1ExternalmetricsAssetListingGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExternalmetricsAssetListingGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExternalmetricsAssetListingGet MimeTextJson
-- | @text/plain@
instance Produces V1ExternalmetricsAssetListingGet MimePlainText


-- *** v1ExternalmetricsChainHistoryGet

-- | @GET \/v1\/externalmetrics\/chain\/history@
-- 
-- Historical metrics for the chain
-- 
-- Get chain metrics history.
-- 
-- AuthMethod: 'AuthApiKeyAPIKey', 'AuthBasicJWT'
-- 
v1ExternalmetricsChainHistoryGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> MetricId -- ^ "metricId" -  Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD`)
  -> ChainId -- ^ "chainId" -  Chain identifier (e.g., `Ethereum`, `Arbitrum`)
  -> CoinAPIMarketDataRESTRequest V1ExternalmetricsChainHistoryGet MimeNoContent [A.Value] accept
v1ExternalmetricsChainHistoryGet  _ (MetricId metricId) (ChainId chainId) =
  _mkRequest "GET" ["/v1/externalmetrics/chain/history"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyAPIKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicJWT)
    `addQuery` toQuery ("metric_id", Just metricId)
    `addQuery` toQuery ("chain_id", Just chainId)

data V1ExternalmetricsChainHistoryGet  

-- | /Optional Param/ "time_start" - Starting time in ISO 8601
instance HasOptionalParam V1ExternalmetricsChainHistoryGet TimeStartDateTime where
  applyOptionalParam req (TimeStartDateTime xs) =
    req `addQuery` toQuery ("time_start", Just xs)

-- | /Optional Param/ "time_end" - Ending time in ISO 8601
instance HasOptionalParam V1ExternalmetricsChainHistoryGet TimeEndDateTime where
  applyOptionalParam req (TimeEndDateTime xs) =
    req `addQuery` toQuery ("time_end", Just xs)

-- | /Optional Param/ "time_format" - If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
instance HasOptionalParam V1ExternalmetricsChainHistoryGet TimeFormat where
  applyOptionalParam req (TimeFormat xs) =
    req `addQuery` toQuery ("time_format", Just xs)

-- | /Optional Param/ "period_id" - Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
instance HasOptionalParam V1ExternalmetricsChainHistoryGet PeriodId where
  applyOptionalParam req (PeriodId xs) =
    req `addQuery` toQuery ("period_id", Just xs)

-- | /Optional Param/ "limit" - Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
instance HasOptionalParam V1ExternalmetricsChainHistoryGet Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces V1ExternalmetricsChainHistoryGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExternalmetricsChainHistoryGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExternalmetricsChainHistoryGet MimeTextJson
-- | @text/plain@
instance Produces V1ExternalmetricsChainHistoryGet MimePlainText


-- *** v1ExternalmetricsChainListingGet

-- | @GET \/v1\/externalmetrics\/chain\/listing@
-- 
-- Listing of metrics available for specific chain
-- 
-- Get all metrics that are actually available for the specified blockchain chain.
-- 
-- AuthMethod: 'AuthApiKeyAPIKey', 'AuthBasicJWT'
-- 
v1ExternalmetricsChainListingGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChainId -- ^ "chainId" -  Chain identifier (e.g., ETHEREUM, ARBITRUM)
  -> CoinAPIMarketDataRESTRequest V1ExternalmetricsChainListingGet MimeNoContent [V1MetricInfo] accept
v1ExternalmetricsChainListingGet  _ (ChainId chainId) =
  _mkRequest "GET" ["/v1/externalmetrics/chain/listing"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyAPIKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicJWT)
    `addQuery` toQuery ("chain_id", Just chainId)

data V1ExternalmetricsChainListingGet  
-- | @application/json@
instance Produces V1ExternalmetricsChainListingGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExternalmetricsChainListingGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExternalmetricsChainListingGet MimeTextJson
-- | @text/plain@
instance Produces V1ExternalmetricsChainListingGet MimePlainText


-- *** v1ExternalmetricsExchangeHistoryGet

-- | @GET \/v1\/externalmetrics\/exchange\/history@
-- 
-- Historical metrics for the exchange
-- 
-- Get exchange metrics history.
-- 
-- AuthMethod: 'AuthApiKeyAPIKey', 'AuthBasicJWT'
-- 
v1ExternalmetricsExchangeHistoryGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> MetricId -- ^ "metricId" -  Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD`)
  -> ExchangeId -- ^ "exchangeId" -  Exchange identifier (e.g., `BINANCE`, `UNISWAP-V3-ETHEREUM`)
  -> CoinAPIMarketDataRESTRequest V1ExternalmetricsExchangeHistoryGet MimeNoContent [A.Value] accept
v1ExternalmetricsExchangeHistoryGet  _ (MetricId metricId) (ExchangeId exchangeId) =
  _mkRequest "GET" ["/v1/externalmetrics/exchange/history"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyAPIKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicJWT)
    `addQuery` toQuery ("metric_id", Just metricId)
    `addQuery` toQuery ("exchange_id", Just exchangeId)

data V1ExternalmetricsExchangeHistoryGet  

-- | /Optional Param/ "time_start" - Starting time in ISO 8601
instance HasOptionalParam V1ExternalmetricsExchangeHistoryGet TimeStartDateTime where
  applyOptionalParam req (TimeStartDateTime xs) =
    req `addQuery` toQuery ("time_start", Just xs)

-- | /Optional Param/ "time_end" - Ending time in ISO 8601
instance HasOptionalParam V1ExternalmetricsExchangeHistoryGet TimeEndDateTime where
  applyOptionalParam req (TimeEndDateTime xs) =
    req `addQuery` toQuery ("time_end", Just xs)

-- | /Optional Param/ "time_format" - If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
instance HasOptionalParam V1ExternalmetricsExchangeHistoryGet TimeFormat where
  applyOptionalParam req (TimeFormat xs) =
    req `addQuery` toQuery ("time_format", Just xs)

-- | /Optional Param/ "period_id" - Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
instance HasOptionalParam V1ExternalmetricsExchangeHistoryGet PeriodId where
  applyOptionalParam req (PeriodId xs) =
    req `addQuery` toQuery ("period_id", Just xs)

-- | /Optional Param/ "limit" - Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
instance HasOptionalParam V1ExternalmetricsExchangeHistoryGet Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces V1ExternalmetricsExchangeHistoryGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExternalmetricsExchangeHistoryGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExternalmetricsExchangeHistoryGet MimeTextJson
-- | @text/plain@
instance Produces V1ExternalmetricsExchangeHistoryGet MimePlainText


-- *** v1ExternalmetricsExchangeListingGet

-- | @GET \/v1\/externalmetrics\/exchange\/listing@
-- 
-- Listing of metrics available for specific exchange
-- 
-- Get all metrics that are actually available for the specified exchange.
-- 
-- AuthMethod: 'AuthApiKeyAPIKey', 'AuthBasicJWT'
-- 
v1ExternalmetricsExchangeListingGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExchangeId -- ^ "exchangeId" -  Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM)
  -> CoinAPIMarketDataRESTRequest V1ExternalmetricsExchangeListingGet MimeNoContent [V1MetricInfo] accept
v1ExternalmetricsExchangeListingGet  _ (ExchangeId exchangeId) =
  _mkRequest "GET" ["/v1/externalmetrics/exchange/listing"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyAPIKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicJWT)
    `addQuery` toQuery ("exchange_id", Just exchangeId)

data V1ExternalmetricsExchangeListingGet  
-- | @application/json@
instance Produces V1ExternalmetricsExchangeListingGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExternalmetricsExchangeListingGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExternalmetricsExchangeListingGet MimeTextJson
-- | @text/plain@
instance Produces V1ExternalmetricsExchangeListingGet MimePlainText


-- *** v1ExternalmetricsListingGet

-- | @GET \/v1\/externalmetrics\/listing@
-- 
-- Listing of all supported metrics
-- 
-- Get all metrics available in the system.
-- 
-- AuthMethod: 'AuthApiKeyAPIKey', 'AuthBasicJWT'
-- 
v1ExternalmetricsListingGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> CoinAPIMarketDataRESTRequest V1ExternalmetricsListingGet MimeNoContent [V1MetricInfo] accept
v1ExternalmetricsListingGet  _ =
  _mkRequest "GET" ["/v1/externalmetrics/listing"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyAPIKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicJWT)

data V1ExternalmetricsListingGet  
-- | @application/json@
instance Produces V1ExternalmetricsListingGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExternalmetricsListingGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExternalmetricsListingGet MimeTextJson
-- | @text/plain@
instance Produces V1ExternalmetricsListingGet MimePlainText

