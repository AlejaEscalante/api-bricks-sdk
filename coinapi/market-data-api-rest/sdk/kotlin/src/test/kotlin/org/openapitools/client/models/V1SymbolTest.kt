/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.V1Symbol

class V1SymbolTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of V1Symbol
        //val modelInstance = V1Symbol()

        // to test the property `symbolId` - The symbol identifier.
        should("test symbolId") {
            // uncomment below to test the property
            //modelInstance.symbolId shouldBe ("TODO")
        }

        // to test the property `exchangeId` - The exchange identifier.
        should("test exchangeId") {
            // uncomment below to test the property
            //modelInstance.exchangeId shouldBe ("TODO")
        }

        // to test the property `symbolType` - The symbol type.
        should("test symbolType") {
            // uncomment below to test the property
            //modelInstance.symbolType shouldBe ("TODO")
        }

        // to test the property `assetIdBase` - The base asset identifier.
        should("test assetIdBase") {
            // uncomment below to test the property
            //modelInstance.assetIdBase shouldBe ("TODO")
        }

        // to test the property `assetIdQuote` - The quote asset identifier.
        should("test assetIdQuote") {
            // uncomment below to test the property
            //modelInstance.assetIdQuote shouldBe ("TODO")
        }

        // to test the property `assetIdUnit` - The unit asset identifier.
        should("test assetIdUnit") {
            // uncomment below to test the property
            //modelInstance.assetIdUnit shouldBe ("TODO")
        }

        // to test the property `futureContractUnit` - The contract unit for futures.
        should("test futureContractUnit") {
            // uncomment below to test the property
            //modelInstance.futureContractUnit shouldBe ("TODO")
        }

        // to test the property `futureContractUnitAsset` - The asset used as the unit for futures contract.
        should("test futureContractUnitAsset") {
            // uncomment below to test the property
            //modelInstance.futureContractUnitAsset shouldBe ("TODO")
        }

        // to test the property `futureDeliveryTime` - The future delivery time for futures contract.
        should("test futureDeliveryTime") {
            // uncomment below to test the property
            //modelInstance.futureDeliveryTime shouldBe ("TODO")
        }

        // to test the property `optionTypeIsCall` - Indicates whether the option type is a call.
        should("test optionTypeIsCall") {
            // uncomment below to test the property
            //modelInstance.optionTypeIsCall shouldBe ("TODO")
        }

        // to test the property `optionStrikePrice` - The strike price for options.
        should("test optionStrikePrice") {
            // uncomment below to test the property
            //modelInstance.optionStrikePrice shouldBe ("TODO")
        }

        // to test the property `optionContractUnit` - The contract unit for options.
        should("test optionContractUnit") {
            // uncomment below to test the property
            //modelInstance.optionContractUnit shouldBe ("TODO")
        }

        // to test the property `optionExerciseStyle` - The exercise style for options.
        should("test optionExerciseStyle") {
            // uncomment below to test the property
            //modelInstance.optionExerciseStyle shouldBe ("TODO")
        }

        // to test the property `optionExpirationTime` - The expiration time for options.
        should("test optionExpirationTime") {
            // uncomment below to test the property
            //modelInstance.optionExpirationTime shouldBe ("TODO")
        }

        // to test the property `contractDeliveryTime` - The delivery time for contracts.
        should("test contractDeliveryTime") {
            // uncomment below to test the property
            //modelInstance.contractDeliveryTime shouldBe ("TODO")
        }

        // to test the property `contractUnit` - The contract unit for contracts.
        should("test contractUnit") {
            // uncomment below to test the property
            //modelInstance.contractUnit shouldBe ("TODO")
        }

        // to test the property `contractUnitAsset` - The asset used as the unit for contracts.
        should("test contractUnitAsset") {
            // uncomment below to test the property
            //modelInstance.contractUnitAsset shouldBe ("TODO")
        }

        // to test the property `contractId` - The contract identifier.
        should("test contractId") {
            // uncomment below to test the property
            //modelInstance.contractId shouldBe ("TODO")
        }

        // to test the property `contractDisplayName` - The display name of the contract.
        should("test contractDisplayName") {
            // uncomment below to test the property
            //modelInstance.contractDisplayName shouldBe ("TODO")
        }

        // to test the property `contractDisplayDescription` - The display description of the contract.
        should("test contractDisplayDescription") {
            // uncomment below to test the property
            //modelInstance.contractDisplayDescription shouldBe ("TODO")
        }

        // to test the property `dataStart`
        should("test dataStart") {
            // uncomment below to test the property
            //modelInstance.dataStart shouldBe ("TODO")
        }

        // to test the property `dataEnd`
        should("test dataEnd") {
            // uncomment below to test the property
            //modelInstance.dataEnd shouldBe ("TODO")
        }

        // to test the property `dataQuoteStart` - The start date of quote data.
        should("test dataQuoteStart") {
            // uncomment below to test the property
            //modelInstance.dataQuoteStart shouldBe ("TODO")
        }

        // to test the property `dataQuoteEnd` - The end date of quote data.
        should("test dataQuoteEnd") {
            // uncomment below to test the property
            //modelInstance.dataQuoteEnd shouldBe ("TODO")
        }

        // to test the property `dataOrderbookStart` - The start date of order book data.
        should("test dataOrderbookStart") {
            // uncomment below to test the property
            //modelInstance.dataOrderbookStart shouldBe ("TODO")
        }

        // to test the property `dataOrderbookEnd` - The end date of order book data.
        should("test dataOrderbookEnd") {
            // uncomment below to test the property
            //modelInstance.dataOrderbookEnd shouldBe ("TODO")
        }

        // to test the property `dataTradeStart` - The start date of trade data.
        should("test dataTradeStart") {
            // uncomment below to test the property
            //modelInstance.dataTradeStart shouldBe ("TODO")
        }

        // to test the property `dataTradeEnd` - The end date of trade data.
        should("test dataTradeEnd") {
            // uncomment below to test the property
            //modelInstance.dataTradeEnd shouldBe ("TODO")
        }

        // to test the property `indexId` - The index identifier.
        should("test indexId") {
            // uncomment below to test the property
            //modelInstance.indexId shouldBe ("TODO")
        }

        // to test the property `indexDisplayName` - The display name of the index.
        should("test indexDisplayName") {
            // uncomment below to test the property
            //modelInstance.indexDisplayName shouldBe ("TODO")
        }

        // to test the property `indexDisplayDescription` - The display description of the index.
        should("test indexDisplayDescription") {
            // uncomment below to test the property
            //modelInstance.indexDisplayDescription shouldBe ("TODO")
        }

        // to test the property `volume1hrs` - The volume in the last 1 hour.
        should("test volume1hrs") {
            // uncomment below to test the property
            //modelInstance.volume1hrs shouldBe ("TODO")
        }

        // to test the property `volume1hrsUsd` - The volume in USD in the last 1 hour.
        should("test volume1hrsUsd") {
            // uncomment below to test the property
            //modelInstance.volume1hrsUsd shouldBe ("TODO")
        }

        // to test the property `volume1day` - The volume in the last 1 day.
        should("test volume1day") {
            // uncomment below to test the property
            //modelInstance.volume1day shouldBe ("TODO")
        }

        // to test the property `volume1dayUsd` - The volume in USD in the last 1 day.
        should("test volume1dayUsd") {
            // uncomment below to test the property
            //modelInstance.volume1dayUsd shouldBe ("TODO")
        }

        // to test the property `volume1mth` - The volume in the last 1 month.
        should("test volume1mth") {
            // uncomment below to test the property
            //modelInstance.volume1mth shouldBe ("TODO")
        }

        // to test the property `volume1mthUsd` - The volume in USD in the last 1 month.
        should("test volume1mthUsd") {
            // uncomment below to test the property
            //modelInstance.volume1mthUsd shouldBe ("TODO")
        }

        // to test the property `price` - The price.
        should("test price") {
            // uncomment below to test the property
            //modelInstance.price shouldBe ("TODO")
        }

        // to test the property `symbolIdExchange` - The symbol identifier in the exchange.
        should("test symbolIdExchange") {
            // uncomment below to test the property
            //modelInstance.symbolIdExchange shouldBe ("TODO")
        }

        // to test the property `assetIdBaseExchange` - The base asset identifier in the exchange.
        should("test assetIdBaseExchange") {
            // uncomment below to test the property
            //modelInstance.assetIdBaseExchange shouldBe ("TODO")
        }

        // to test the property `assetIdQuoteExchange` - The quote asset identifier in the exchange.
        should("test assetIdQuoteExchange") {
            // uncomment below to test the property
            //modelInstance.assetIdQuoteExchange shouldBe ("TODO")
        }

        // to test the property `pricePrecision` - The price precision.
        should("test pricePrecision") {
            // uncomment below to test the property
            //modelInstance.pricePrecision shouldBe ("TODO")
        }

        // to test the property `sizePrecision` - The size precision.
        should("test sizePrecision") {
            // uncomment below to test the property
            //modelInstance.sizePrecision shouldBe ("TODO")
        }

        // to test the property `rawKvp` - Not normalized raw kvp data.
        should("test rawKvp") {
            // uncomment below to test the property
            //modelInstance.rawKvp shouldBe ("TODO")
        }

        // to test the property `volumeToUsd` - Volume unit in USD.
        should("test volumeToUsd") {
            // uncomment below to test the property
            //modelInstance.volumeToUsd shouldBe ("TODO")
        }

        // to test the property `symbolIdInteger` - The symbol identifier in integer immutable format, used to correlate data across different APIs.
        should("test symbolIdInteger") {
            // uncomment below to test the property
            //modelInstance.symbolIdInteger shouldBe ("TODO")
        }

    }
}
