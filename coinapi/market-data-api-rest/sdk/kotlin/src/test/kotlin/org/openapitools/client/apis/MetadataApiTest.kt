/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.MetadataApi
import org.openapitools.client.models.V1Asset
import org.openapitools.client.models.V1Chain
import org.openapitools.client.models.V1Exchange
import org.openapitools.client.models.V1Icon
import org.openapitools.client.models.V1Symbol
import org.openapitools.client.models.V1SymbolMapping

class MetadataApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of MetadataApi
        //val apiInstance = MetadataApi()

        // to test v1AssetsAssetIdGet
        should("test v1AssetsAssetIdGet") {
            // uncomment below to test v1AssetsAssetIdGet
            //val assetId : kotlin.String = assetId_example // kotlin.String | The asset ID.
            //val result : kotlin.collections.List<V1Asset> = apiInstance.v1AssetsAssetIdGet(assetId)
            //result shouldBe ("TODO")
        }

        // to test v1AssetsGet
        should("test v1AssetsGet") {
            // uncomment below to test v1AssetsGet
            //val filterAssetId : kotlin.String = filterAssetId_example // kotlin.String | Comma or semicolon delimited asset identifiers used to filter response. (optional, eg. `BTC;ETH`).
            //val result : kotlin.collections.List<V1Asset> = apiInstance.v1AssetsGet(filterAssetId)
            //result shouldBe ("TODO")
        }

        // to test v1AssetsIconsSizeGet
        should("test v1AssetsIconsSizeGet") {
            // uncomment below to test v1AssetsIconsSizeGet
            //val size : kotlin.Int = 56 // kotlin.Int | The size of the icons.
            //val result : kotlin.collections.List<V1Icon> = apiInstance.v1AssetsIconsSizeGet(size)
            //result shouldBe ("TODO")
        }

        // to test v1ChainsChainIdGet
        should("test v1ChainsChainIdGet") {
            // uncomment below to test v1ChainsChainIdGet
            //val chainId : kotlin.String = chainId_example // kotlin.String | The chain ID.
            //val result : kotlin.collections.List<V1Chain> = apiInstance.v1ChainsChainIdGet(chainId)
            //result shouldBe ("TODO")
        }

        // to test v1ChainsGet
        should("test v1ChainsGet") {
            // uncomment below to test v1ChainsGet
            //val filterChainId : kotlin.String = filterChainId_example // kotlin.String | Comma or semicolon delimited chain identifiers used to filter response. (optional, eg. `ETHEREUM;ARBITRUM`).
            //val result : kotlin.collections.List<V1Chain> = apiInstance.v1ChainsGet(filterChainId)
            //result shouldBe ("TODO")
        }

        // to test v1ExchangesExchangeIdGet
        should("test v1ExchangesExchangeIdGet") {
            // uncomment below to test v1ExchangesExchangeIdGet
            //val exchangeId : kotlin.String = exchangeId_example // kotlin.String | The ID of the exchange.
            //val result : kotlin.collections.List<V1Exchange> = apiInstance.v1ExchangesExchangeIdGet(exchangeId)
            //result shouldBe ("TODO")
        }

        // to test v1ExchangesGet
        should("test v1ExchangesGet") {
            // uncomment below to test v1ExchangesGet
            //val filterExchangeId : kotlin.String = filterExchangeId_example // kotlin.String | Comma or semicolon delimited exchange identifiers used to filter response. (optional, eg. `BITSTAMP;GEMINI`)
            //val result : kotlin.collections.List<V1Exchange> = apiInstance.v1ExchangesGet(filterExchangeId)
            //result shouldBe ("TODO")
        }

        // to test v1ExchangesIconsSizeGet
        should("test v1ExchangesIconsSizeGet") {
            // uncomment below to test v1ExchangesIconsSizeGet
            //val size : kotlin.Int = 56 // kotlin.Int | The size of the icons.
            //val result : kotlin.collections.List<V1Icon> = apiInstance.v1ExchangesIconsSizeGet(size)
            //result shouldBe ("TODO")
        }

        // to test v1SymbolsExchangeIdGet
        should("test v1SymbolsExchangeIdGet") {
            // uncomment below to test v1SymbolsExchangeIdGet
            //val exchangeId : kotlin.String = exchangeId_example // kotlin.String | The ID of the exchange (from the Metadata -> Exchanges)
            //val filterSymbolId : kotlin.String = filterSymbolId_example // kotlin.String | The filter for symbol ID.
            //val filterAssetId : kotlin.String = filterAssetId_example // kotlin.String | The filter for asset ID.
            //val result : kotlin.collections.List<V1Symbol> = apiInstance.v1SymbolsExchangeIdGet(exchangeId, filterSymbolId, filterAssetId)
            //result shouldBe ("TODO")
        }

        // to test v1SymbolsGet
        should("test v1SymbolsGet") {
            // uncomment below to test v1SymbolsGet
            //val filterSymbolId : kotlin.String = filterSymbolId_example // kotlin.String | Comma or semicolon delimited parts of symbol identifier used to filter response. (optional, eg. `BITSTAMP`_ or `BINANCE_SPOT_`)
            //val filterExchangeId : kotlin.String = filterExchangeId_example // kotlin.String | The filter for exchange ID.
            //val filterAssetId : kotlin.String = filterAssetId_example // kotlin.String | The filter for asset ID.
            //val result : kotlin.collections.List<V1Symbol> = apiInstance.v1SymbolsGet(filterSymbolId, filterExchangeId, filterAssetId)
            //result shouldBe ("TODO")
        }

        // to test v1SymbolsMapExchangeIdGet
        should("test v1SymbolsMapExchangeIdGet") {
            // uncomment below to test v1SymbolsMapExchangeIdGet
            //val exchangeId : kotlin.String = exchangeId_example // kotlin.String | The ID of the exchange (from the Metadata -> Exchanges)
            //val result : kotlin.collections.List<V1SymbolMapping> = apiInstance.v1SymbolsMapExchangeIdGet(exchangeId)
            //result shouldBe ("TODO")
        }

    }
}
