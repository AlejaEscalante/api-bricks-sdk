/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.MetricsV1Api
import org.openapitools.client.models.V1GeneralData
import org.openapitools.client.models.V1ListingItem
import org.openapitools.client.models.V1Metric
import org.openapitools.client.models.V1MetricData

class MetricsV1ApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of MetricsV1Api
        //val apiInstance = MetricsV1Api()

        // to test v1MetricsAssetCurrentGet
        should("test v1MetricsAssetCurrentGet") {
            // uncomment below to test v1MetricsAssetCurrentGet
            //val metricId : kotlin.String = metricId_example // kotlin.String | Metric identifier (from the Metrics -> Listing)
            //val assetId : kotlin.String = assetId_example // kotlin.String | Asset identifier (from the Metadata -> Assets)
            //val assetIdExternal : kotlin.String = assetIdExternal_example // kotlin.String | Exchange asset identifier
            //val exchangeId : kotlin.String = exchangeId_example // kotlin.String | Exchange identifier (from the Metadata -> Exchanges)
            //val result : kotlin.collections.List<V1GeneralData> = apiInstance.v1MetricsAssetCurrentGet(metricId, assetId, assetIdExternal, exchangeId)
            //result shouldBe ("TODO")
        }

        // to test v1MetricsAssetHistoryGet
        should("test v1MetricsAssetHistoryGet") {
            // uncomment below to test v1MetricsAssetHistoryGet
            //val metricId : kotlin.String = metricId_example // kotlin.String | Metric identifier (from the Metrics -> Listing)
            //val exchangeId : kotlin.String = exchangeId_example // kotlin.String | Exchange identifier (from the Metadata -> Exchanges)
            //val assetId : kotlin.String = assetId_example // kotlin.String | Asset identifier (from the Metadata -> Assets)
            //val assetIdExternal : kotlin.String = assetIdExternal_example // kotlin.String | Exchange asset identifier
            //val timeStart : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Starting time in ISO 8601
            //val timeEnd : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Ending time in ISO 8601
            //val timeFormat : kotlin.String = timeFormat_example // kotlin.String | If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
            //val periodId : kotlin.String = periodId_example // kotlin.String | Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`), default value is `1SEC`
            //val limit : kotlin.Int = 56 // kotlin.Int | Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
            //val result : kotlin.collections.List<V1MetricData> = apiInstance.v1MetricsAssetHistoryGet(metricId, exchangeId, assetId, assetIdExternal, timeStart, timeEnd, timeFormat, periodId, limit)
            //result shouldBe ("TODO")
        }

        // to test v1MetricsAssetListingGet
        should("test v1MetricsAssetListingGet") {
            // uncomment below to test v1MetricsAssetListingGet
            //val metricId : kotlin.String = metricId_example // kotlin.String | Metric identifier (from the Metrics -> Listing)
            //val exchangeId : kotlin.String = exchangeId_example // kotlin.String | Exchange identifier (from the Metadata -> Exchanges)
            //val chainId : kotlin.String = chainId_example // kotlin.String | Chain identifier
            //val networkId : kotlin.String = networkId_example // kotlin.String | Network identifier
            //val assetId : kotlin.String = assetId_example // kotlin.String | Asset identifier (from the Metadata -> Assets)
            //val assetIdExternal : kotlin.String = assetIdExternal_example // kotlin.String | The asset external identifier
            //val result : kotlin.collections.List<V1ListingItem> = apiInstance.v1MetricsAssetListingGet(metricId, exchangeId, chainId, networkId, assetId, assetIdExternal)
            //result shouldBe ("TODO")
        }

        // to test v1MetricsExchangeCurrentGet
        should("test v1MetricsExchangeCurrentGet") {
            // uncomment below to test v1MetricsExchangeCurrentGet
            //val exchangeId : kotlin.String = exchangeId_example // kotlin.String | The exchange identifier (from the Metadata -> Exchanges)
            //val metricId : kotlin.String = metricId_example // kotlin.String | The metric identifier (from the Metrics -> Listing)
            //val result : kotlin.collections.List<V1GeneralData> = apiInstance.v1MetricsExchangeCurrentGet(exchangeId, metricId)
            //result shouldBe ("TODO")
        }

        // to test v1MetricsExchangeHistoryGet
        should("test v1MetricsExchangeHistoryGet") {
            // uncomment below to test v1MetricsExchangeHistoryGet
            //val metricId : kotlin.String = metricId_example // kotlin.String | Metric identifier (from the Metrics -> Listing)
            //val exchangeId : kotlin.String = exchangeId_example // kotlin.String | Exchange identifier (from the Metadata -> Exchanges)
            //val timeStart : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Starting time in ISO 8601
            //val timeEnd : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Ending time in ISO 8601
            //val timeFormat : kotlin.String = timeFormat_example // kotlin.String | If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
            //val periodId : kotlin.String = periodId_example // kotlin.String | Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`), default value is `1SEC`
            //val limit : kotlin.Int = 56 // kotlin.Int | Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
            //val result : kotlin.collections.List<V1MetricData> = apiInstance.v1MetricsExchangeHistoryGet(metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit)
            //result shouldBe ("TODO")
        }

        // to test v1MetricsExchangeListingGet
        should("test v1MetricsExchangeListingGet") {
            // uncomment below to test v1MetricsExchangeListingGet
            //val exchangeId : kotlin.String = exchangeId_example // kotlin.String | The exchange identifier (from the Metadata -> Exchanges)
            //val metricId : kotlin.String = metricId_example // kotlin.String | The metric identifier (from the Metrics -> Listing)
            //val result : kotlin.collections.List<V1ListingItem> = apiInstance.v1MetricsExchangeListingGet(exchangeId, metricId)
            //result shouldBe ("TODO")
        }

        // to test v1MetricsListingGet
        should("test v1MetricsListingGet") {
            // uncomment below to test v1MetricsListingGet
            //val result : kotlin.collections.List<V1Metric> = apiInstance.v1MetricsListingGet()
            //result shouldBe ("TODO")
        }

        // to test v1MetricsSymbolCurrentGet
        should("test v1MetricsSymbolCurrentGet") {
            // uncomment below to test v1MetricsSymbolCurrentGet
            //val metricId : kotlin.String = metricId_example // kotlin.String | Metric identifier (from the Metrics -> Listing)
            //val symbolId : kotlin.String = symbolId_example // kotlin.String | Symbol identifier (from the Metadata -> Symbols)
            //val exchangeId : kotlin.String = exchangeId_example // kotlin.String | Exchange id (from the Metadata -> Exchanges)
            //val result : kotlin.collections.List<V1GeneralData> = apiInstance.v1MetricsSymbolCurrentGet(metricId, symbolId, exchangeId)
            //result shouldBe ("TODO")
        }

        // to test v1MetricsSymbolHistoryGet
        should("test v1MetricsSymbolHistoryGet") {
            // uncomment below to test v1MetricsSymbolHistoryGet
            //val metricId : kotlin.String = metricId_example // kotlin.String | Metric identifier (from the Metrics -> Listing)
            //val symbolId : kotlin.String = symbolId_example // kotlin.String | Symbol identifier (from the Metadata -> Symbols)
            //val timeStart : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Starting time in ISO 8601
            //val timeEnd : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Ending time in ISO 8601
            //val timeFormat : kotlin.String = timeFormat_example // kotlin.String | If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
            //val periodId : kotlin.String = periodId_example // kotlin.String | Identifier of requested timeseries period (e.g. `5SEC` or `2MTH`), default value is `1SEC`
            //val limit : kotlin.Int = 56 // kotlin.Int | Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
            //val result : kotlin.collections.List<V1MetricData> = apiInstance.v1MetricsSymbolHistoryGet(metricId, symbolId, timeStart, timeEnd, timeFormat, periodId, limit)
            //result shouldBe ("TODO")
        }

        // to test v1MetricsSymbolListingGet
        should("test v1MetricsSymbolListingGet") {
            // uncomment below to test v1MetricsSymbolListingGet
            //val metricId : kotlin.String = metricId_example // kotlin.String | Metric identifier (from the Metrics -> Listing)
            //val exchangeId : kotlin.String = exchangeId_example // kotlin.String | Exchange identifier (from the Metadata -> Exchanges)
            //val symbolId : kotlin.String = symbolId_example // kotlin.String | Symbol identifier (from the Metadata -> Symbols)
            //val result : kotlin.collections.List<V1ListingItem> = apiInstance.v1MetricsSymbolListingGet(metricId, exchangeId, symbolId)
            //result shouldBe ("TODO")
        }

    }
}
