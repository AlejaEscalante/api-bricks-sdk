/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.QuotesApi
import org.openapitools.client.models.V1Quote
import org.openapitools.client.models.V1QuoteTrade

class QuotesApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of QuotesApi
        //val apiInstance = QuotesApi()

        // to test v1QuotesCurrentGet
        should("test v1QuotesCurrentGet") {
            // uncomment below to test v1QuotesCurrentGet
            //val filterSymbolId : kotlin.String = filterSymbolId_example // kotlin.String | Comma or semicolon delimited parts of symbol identifier used to filter response. (optional)
            //val result : kotlin.collections.List<V1QuoteTrade> = apiInstance.v1QuotesCurrentGet(filterSymbolId)
            //result shouldBe ("TODO")
        }

        // to test v1QuotesLatestGet
        should("test v1QuotesLatestGet") {
            // uncomment below to test v1QuotesLatestGet
            //val filterSymbolId : kotlin.String = filterSymbolId_example // kotlin.String | Comma or semicolon delimited parts of symbol identifier used to filter response. (optional)
            //val limit : kotlin.Int = 56 // kotlin.Int | Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
            //val result : kotlin.collections.List<V1Quote> = apiInstance.v1QuotesLatestGet(filterSymbolId, limit)
            //result shouldBe ("TODO")
        }

        // to test v1QuotesSymbolIdCurrentGet
        should("test v1QuotesSymbolIdCurrentGet") {
            // uncomment below to test v1QuotesSymbolIdCurrentGet
            //val symbolId : kotlin.String = symbolId_example // kotlin.String | The symbol identifier (from the Metadata -> Symbols)
            //val result : V1QuoteTrade = apiInstance.v1QuotesSymbolIdCurrentGet(symbolId)
            //result shouldBe ("TODO")
        }

        // to test v1QuotesSymbolIdHistoryGet
        should("test v1QuotesSymbolIdHistoryGet") {
            // uncomment below to test v1QuotesSymbolIdHistoryGet
            //val symbolId : kotlin.String = symbolId_example // kotlin.String | Symbol identifier for requested timeseries (from the Metadata -> Symbols)
            //val date : kotlin.String = date_example // kotlin.String | Date in ISO 8601, returned data is for the whole given day (preferred method, required if 'time_start' is not provided)
            //val timeStart : kotlin.String = timeStart_example // kotlin.String | Starting time in ISO 8601
            //val timeEnd : kotlin.String = timeEnd_example // kotlin.String | Timeseries ending time in ISO 8601
            //val limit : kotlin.Int = 56 // kotlin.Int | Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
            //val result : kotlin.collections.List<V1Quote> = apiInstance.v1QuotesSymbolIdHistoryGet(symbolId, date, timeStart, timeEnd, limit)
            //result shouldBe ("TODO")
        }

        // to test v1QuotesSymbolIdLatestGet
        should("test v1QuotesSymbolIdLatestGet") {
            // uncomment below to test v1QuotesSymbolIdLatestGet
            //val symbolId : kotlin.String = symbolId_example // kotlin.String | Symbol identifier of requested timeseries (from the Metadata -> Symbols)
            //val limit : kotlin.Int = 56 // kotlin.Int | Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
            //val result : kotlin.collections.List<V1Quote> = apiInstance.v1QuotesSymbolIdLatestGet(symbolId, limit)
            //result shouldBe ("TODO")
        }

    }
}
