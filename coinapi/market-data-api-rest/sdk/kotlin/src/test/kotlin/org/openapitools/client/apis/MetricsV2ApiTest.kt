/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.MetricsV2Api
import org.openapitools.client.models.V1MetricInfo

class MetricsV2ApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of MetricsV2Api
        //val apiInstance = MetricsV2Api()

        // to test v2MetricsAssetHistoryGet
        should("test v2MetricsAssetHistoryGet") {
            // uncomment below to test v2MetricsAssetHistoryGet
            //val metricId : kotlin.String = metricId_example // kotlin.String | Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD`)
            //val assetId : kotlin.String = assetId_example // kotlin.String | Asset identifier (e.g., `USDC`, `USDT`)
            //val timeStart : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Starting time in ISO 8601
            //val timeEnd : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Ending time in ISO 8601
            //val timeFormat : kotlin.String = timeFormat_example // kotlin.String | If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
            //val periodId : kotlin.String = periodId_example // kotlin.String | Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
            //val limit : kotlin.Int = 56 // kotlin.Int | Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
            //val result : kotlin.collections.List<kotlin.Any> = apiInstance.v2MetricsAssetHistoryGet(metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit)
            //result shouldBe ("TODO")
        }

        // to test v2MetricsAssetListingGet
        should("test v2MetricsAssetListingGet") {
            // uncomment below to test v2MetricsAssetListingGet
            //val assetId : kotlin.String = assetId_example // kotlin.String | Asset identifier (e.g., USDC, USDT)
            //val result : kotlin.collections.List<V1MetricInfo> = apiInstance.v2MetricsAssetListingGet(assetId)
            //result shouldBe ("TODO")
        }

        // to test v2MetricsChainHistoryGet
        should("test v2MetricsChainHistoryGet") {
            // uncomment below to test v2MetricsChainHistoryGet
            //val metricId : kotlin.String = metricId_example // kotlin.String | Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD`)
            //val chainId : kotlin.String = chainId_example // kotlin.String | Chain identifier (e.g., `Ethereum`, `Arbitrum`)
            //val timeStart : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Starting time in ISO 8601
            //val timeEnd : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Ending time in ISO 8601
            //val timeFormat : kotlin.String = timeFormat_example // kotlin.String | If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
            //val periodId : kotlin.String = periodId_example // kotlin.String | Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
            //val limit : kotlin.Int = 56 // kotlin.Int | Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
            //val result : kotlin.collections.List<kotlin.Any> = apiInstance.v2MetricsChainHistoryGet(metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit)
            //result shouldBe ("TODO")
        }

        // to test v2MetricsChainListingGet
        should("test v2MetricsChainListingGet") {
            // uncomment below to test v2MetricsChainListingGet
            //val chainId : kotlin.String = chainId_example // kotlin.String | Chain identifier (e.g., ETHEREUM, ARBITRUM)
            //val result : kotlin.collections.List<V1MetricInfo> = apiInstance.v2MetricsChainListingGet(chainId)
            //result shouldBe ("TODO")
        }

        // to test v2MetricsExchangeHistoryGet
        should("test v2MetricsExchangeHistoryGet") {
            // uncomment below to test v2MetricsExchangeHistoryGet
            //val metricId : kotlin.String = metricId_example // kotlin.String | Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD`)
            //val exchangeId : kotlin.String = exchangeId_example // kotlin.String | Exchange identifier (e.g., `BINANCE`, `UNISWAP-V3-ETHEREUM`)
            //val timeStart : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Starting time in ISO 8601
            //val timeEnd : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Ending time in ISO 8601
            //val timeFormat : kotlin.String = timeFormat_example // kotlin.String | If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
            //val periodId : kotlin.String = periodId_example // kotlin.String | Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
            //val limit : kotlin.Int = 56 // kotlin.Int | Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
            //val result : kotlin.collections.List<kotlin.Any> = apiInstance.v2MetricsExchangeHistoryGet(metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit)
            //result shouldBe ("TODO")
        }

        // to test v2MetricsExchangeListingGet
        should("test v2MetricsExchangeListingGet") {
            // uncomment below to test v2MetricsExchangeListingGet
            //val exchangeId : kotlin.String = exchangeId_example // kotlin.String | Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM)
            //val result : kotlin.collections.List<V1MetricInfo> = apiInstance.v2MetricsExchangeListingGet(exchangeId)
            //result shouldBe ("TODO")
        }

        // to test v2MetricsListingGet
        should("test v2MetricsListingGet") {
            // uncomment below to test v2MetricsListingGet
            //val result : kotlin.collections.List<V1MetricInfo> = apiInstance.v2MetricsListingGet()
            //result shouldBe ("TODO")
        }

    }
}
