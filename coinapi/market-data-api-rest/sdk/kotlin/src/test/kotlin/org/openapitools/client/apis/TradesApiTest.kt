/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.TradesApi
import org.openapitools.client.models.V1Trade

class TradesApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of TradesApi
        //val apiInstance = TradesApi()

        // to test v1TradesLatestGet
        should("test v1TradesLatestGet") {
            // uncomment below to test v1TradesLatestGet
            //val filterSymbolId : kotlin.String = filterSymbolId_example // kotlin.String | Comma or semicolon delimited parts of symbol identifier used to filter response. (optional)
            //val includeId : kotlin.Boolean = true // kotlin.Boolean | Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.
            //val limit : kotlin.Int = 56 // kotlin.Int | Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
            //val result : kotlin.collections.List<V1Trade> = apiInstance.v1TradesLatestGet(filterSymbolId, includeId, limit)
            //result shouldBe ("TODO")
        }

        // to test v1TradesSymbolIdHistoryGet
        should("test v1TradesSymbolIdHistoryGet") {
            // uncomment below to test v1TradesSymbolIdHistoryGet
            //val symbolId : kotlin.String = symbolId_example // kotlin.String | Symbol identifier for requested timeseries (from the Metadata -> Symbols)
            //val date : kotlin.String = date_example // kotlin.String | Date in ISO 8601, returned data is for the whole given day (required if 'time_start' is not provided)
            //val timeStart : kotlin.String = timeStart_example // kotlin.String | Starting time in ISO 8601
            //val timeEnd : kotlin.String = timeEnd_example // kotlin.String | Timeseries ending time in ISO 8601
            //val limit : kotlin.Int = 56 // kotlin.Int | Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
            //val includeId : kotlin.Boolean = true // kotlin.Boolean | Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.
            //val result : kotlin.collections.List<V1Trade> = apiInstance.v1TradesSymbolIdHistoryGet(symbolId, date, timeStart, timeEnd, limit, includeId)
            //result shouldBe ("TODO")
        }

        // to test v1TradesSymbolIdLatestGet
        should("test v1TradesSymbolIdLatestGet") {
            // uncomment below to test v1TradesSymbolIdLatestGet
            //val symbolId : kotlin.String = symbolId_example // kotlin.String | Symbol identifier for requested timeseries (from the Metadata -> Symbols)
            //val limit : kotlin.Int = 56 // kotlin.Int | Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
            //val includeId : kotlin.Boolean = true // kotlin.Boolean | Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.
            //val result : kotlin.collections.List<V1Trade> = apiInstance.v1TradesSymbolIdLatestGet(symbolId, limit, includeId)
            //result shouldBe ("TODO")
        }

    }
}
