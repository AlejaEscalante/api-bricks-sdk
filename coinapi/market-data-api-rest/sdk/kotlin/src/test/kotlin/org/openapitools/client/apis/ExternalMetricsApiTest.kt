/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.ExternalMetricsApi
import org.openapitools.client.models.V1MetricInfo

class ExternalMetricsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ExternalMetricsApi
        //val apiInstance = ExternalMetricsApi()

        // to test v1ExternalmetricsAssetHistoryGet
        should("test v1ExternalmetricsAssetHistoryGet") {
            // uncomment below to test v1ExternalmetricsAssetHistoryGet
            //val metricId : kotlin.String = metricId_example // kotlin.String | Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD`)
            //val assetId : kotlin.String = assetId_example // kotlin.String | Asset identifier (e.g., `USDC`, `USDT`)
            //val timeStart : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Starting time in ISO 8601
            //val timeEnd : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Ending time in ISO 8601
            //val timeFormat : kotlin.String = timeFormat_example // kotlin.String | If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
            //val periodId : kotlin.String = periodId_example // kotlin.String | Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
            //val limit : kotlin.Int = 56 // kotlin.Int | Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
            //val result : kotlin.collections.List<kotlin.Any> = apiInstance.v1ExternalmetricsAssetHistoryGet(metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit)
            //result shouldBe ("TODO")
        }

        // to test v1ExternalmetricsAssetListingGet
        should("test v1ExternalmetricsAssetListingGet") {
            // uncomment below to test v1ExternalmetricsAssetListingGet
            //val assetId : kotlin.String = assetId_example // kotlin.String | Asset identifier (e.g., USDC, USDT)
            //val result : kotlin.collections.List<V1MetricInfo> = apiInstance.v1ExternalmetricsAssetListingGet(assetId)
            //result shouldBe ("TODO")
        }

        // to test v1ExternalmetricsChainHistoryGet
        should("test v1ExternalmetricsChainHistoryGet") {
            // uncomment below to test v1ExternalmetricsChainHistoryGet
            //val metricId : kotlin.String = metricId_example // kotlin.String | Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD`)
            //val chainId : kotlin.String = chainId_example // kotlin.String | Chain identifier (e.g., `Ethereum`, `Arbitrum`)
            //val timeStart : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Starting time in ISO 8601
            //val timeEnd : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Ending time in ISO 8601
            //val timeFormat : kotlin.String = timeFormat_example // kotlin.String | If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
            //val periodId : kotlin.String = periodId_example // kotlin.String | Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
            //val limit : kotlin.Int = 56 // kotlin.Int | Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
            //val result : kotlin.collections.List<kotlin.Any> = apiInstance.v1ExternalmetricsChainHistoryGet(metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit)
            //result shouldBe ("TODO")
        }

        // to test v1ExternalmetricsChainListingGet
        should("test v1ExternalmetricsChainListingGet") {
            // uncomment below to test v1ExternalmetricsChainListingGet
            //val chainId : kotlin.String = chainId_example // kotlin.String | Chain identifier (e.g., ETHEREUM, ARBITRUM)
            //val result : kotlin.collections.List<V1MetricInfo> = apiInstance.v1ExternalmetricsChainListingGet(chainId)
            //result shouldBe ("TODO")
        }

        // to test v1ExternalmetricsExchangeHistoryGet
        should("test v1ExternalmetricsExchangeHistoryGet") {
            // uncomment below to test v1ExternalmetricsExchangeHistoryGet
            //val metricId : kotlin.String = metricId_example // kotlin.String | Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD`)
            //val exchangeId : kotlin.String = exchangeId_example // kotlin.String | Exchange identifier (e.g., `BINANCE`, `UNISWAP-V3-ETHEREUM`)
            //val timeStart : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Starting time in ISO 8601
            //val timeEnd : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Ending time in ISO 8601
            //val timeFormat : kotlin.String = timeFormat_example // kotlin.String | If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
            //val periodId : kotlin.String = periodId_example // kotlin.String | Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
            //val limit : kotlin.Int = 56 // kotlin.Int | Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
            //val result : kotlin.collections.List<kotlin.Any> = apiInstance.v1ExternalmetricsExchangeHistoryGet(metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit)
            //result shouldBe ("TODO")
        }

        // to test v1ExternalmetricsExchangeListingGet
        should("test v1ExternalmetricsExchangeListingGet") {
            // uncomment below to test v1ExternalmetricsExchangeListingGet
            //val exchangeId : kotlin.String = exchangeId_example // kotlin.String | Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM)
            //val result : kotlin.collections.List<V1MetricInfo> = apiInstance.v1ExternalmetricsExchangeListingGet(exchangeId)
            //result shouldBe ("TODO")
        }

        // to test v1ExternalmetricsListingGet
        should("test v1ExternalmetricsListingGet") {
            // uncomment below to test v1ExternalmetricsListingGet
            //val result : kotlin.collections.List<V1MetricInfo> = apiInstance.v1ExternalmetricsListingGet()
            //result shouldBe ("TODO")
        }

    }
}
