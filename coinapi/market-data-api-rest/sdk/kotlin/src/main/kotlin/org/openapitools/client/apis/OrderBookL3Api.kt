/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.V1OrderBookBase

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class OrderBookL3Api(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://rest.coinapi.io")
        }
    }

    /**
     * GET /v1/orderbooks3/current
     * Current order books
     * 
     * @param filterSymbolId Comma or semicolon delimited parts of symbol identifier used to filter the response. (optional)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @return kotlin.collections.List<V1OrderBookBase>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1Orderbooks3CurrentGet(filterSymbolId: kotlin.String? = null, limitLevels: kotlin.Int? = null) : kotlin.collections.List<V1OrderBookBase> {
        val localVarResponse = v1Orderbooks3CurrentGetWithHttpInfo(filterSymbolId = filterSymbolId, limitLevels = limitLevels)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<V1OrderBookBase>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/orderbooks3/current
     * Current order books
     * 
     * @param filterSymbolId Comma or semicolon delimited parts of symbol identifier used to filter the response. (optional)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @return ApiResponse<kotlin.collections.List<V1OrderBookBase>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1Orderbooks3CurrentGetWithHttpInfo(filterSymbolId: kotlin.String?, limitLevels: kotlin.Int?) : ApiResponse<kotlin.collections.List<V1OrderBookBase>?> {
        val localVariableConfig = v1Orderbooks3CurrentGetRequestConfig(filterSymbolId = filterSymbolId, limitLevels = limitLevels)

        return request<Unit, kotlin.collections.List<V1OrderBookBase>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1Orderbooks3CurrentGet
     *
     * @param filterSymbolId Comma or semicolon delimited parts of symbol identifier used to filter the response. (optional)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @return RequestConfig
     */
    fun v1Orderbooks3CurrentGetRequestConfig(filterSymbolId: kotlin.String?, limitLevels: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filterSymbolId != null) {
                    put("filter_symbol_id", listOf(filterSymbolId.toString()))
                }
                if (limitLevels != null) {
                    put("limit_levels", listOf(limitLevels.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/orderbooks3/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /v1/orderbooks3/{symbol_id}/current
     * Current order book by symbol_id
     * Retrieves the current order book for the specified symbol.
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @return V1OrderBookBase
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1Orderbooks3SymbolIdCurrentGet(symbolId: kotlin.String, limitLevels: kotlin.Int? = null) : V1OrderBookBase {
        val localVarResponse = v1Orderbooks3SymbolIdCurrentGetWithHttpInfo(symbolId = symbolId, limitLevels = limitLevels)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V1OrderBookBase
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/orderbooks3/{symbol_id}/current
     * Current order book by symbol_id
     * Retrieves the current order book for the specified symbol.
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @return ApiResponse<V1OrderBookBase?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1Orderbooks3SymbolIdCurrentGetWithHttpInfo(symbolId: kotlin.String, limitLevels: kotlin.Int?) : ApiResponse<V1OrderBookBase?> {
        val localVariableConfig = v1Orderbooks3SymbolIdCurrentGetRequestConfig(symbolId = symbolId, limitLevels = limitLevels)

        return request<Unit, V1OrderBookBase>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1Orderbooks3SymbolIdCurrentGet
     *
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @return RequestConfig
     */
    fun v1Orderbooks3SymbolIdCurrentGetRequestConfig(symbolId: kotlin.String, limitLevels: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limitLevels != null) {
                    put("limit_levels", listOf(limitLevels.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/orderbooks3/{symbol_id}/current".replace("{"+"symbol_id"+"}", encodeURIComponent(symbolId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
