/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.V1OrderBook
import org.openapitools.client.models.V1OrderBookBase
import org.openapitools.client.models.V1OrderBookDepth

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class OrderBookApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://rest.coinapi.io")
        }
    }

    /**
     * GET /v1/orderbooks/{symbol_id}/current
     * Get current order book
     * Retrieves the current order book for the specified symbol.
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @return V1OrderBookBase
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1OrderbooksSymbolIdCurrentGet(symbolId: kotlin.String, limitLevels: kotlin.Int? = null) : V1OrderBookBase {
        val localVarResponse = v1OrderbooksSymbolIdCurrentGetWithHttpInfo(symbolId = symbolId, limitLevels = limitLevels)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V1OrderBookBase
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/orderbooks/{symbol_id}/current
     * Get current order book
     * Retrieves the current order book for the specified symbol.
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @return ApiResponse<V1OrderBookBase?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1OrderbooksSymbolIdCurrentGetWithHttpInfo(symbolId: kotlin.String, limitLevels: kotlin.Int?) : ApiResponse<V1OrderBookBase?> {
        val localVariableConfig = v1OrderbooksSymbolIdCurrentGetRequestConfig(symbolId = symbolId, limitLevels = limitLevels)

        return request<Unit, V1OrderBookBase>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1OrderbooksSymbolIdCurrentGet
     *
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @return RequestConfig
     */
    fun v1OrderbooksSymbolIdCurrentGetRequestConfig(symbolId: kotlin.String, limitLevels: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limitLevels != null) {
                    put("limit_levels", listOf(limitLevels.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/orderbooks/{symbol_id}/current".replace("{"+"symbol_id"+"}", encodeURIComponent(symbolId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /v1/orderbooks/{symbol_id}/depth/current
     * Current depth of the order book
     * Retrieves the current depth of the order book for the specified symbol.
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @return V1OrderBookDepth
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1OrderbooksSymbolIdDepthCurrentGet(symbolId: kotlin.String, limitLevels: kotlin.Int? = null) : V1OrderBookDepth {
        val localVarResponse = v1OrderbooksSymbolIdDepthCurrentGetWithHttpInfo(symbolId = symbolId, limitLevels = limitLevels)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V1OrderBookDepth
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/orderbooks/{symbol_id}/depth/current
     * Current depth of the order book
     * Retrieves the current depth of the order book for the specified symbol.
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @return ApiResponse<V1OrderBookDepth?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1OrderbooksSymbolIdDepthCurrentGetWithHttpInfo(symbolId: kotlin.String, limitLevels: kotlin.Int?) : ApiResponse<V1OrderBookDepth?> {
        val localVariableConfig = v1OrderbooksSymbolIdDepthCurrentGetRequestConfig(symbolId = symbolId, limitLevels = limitLevels)

        return request<Unit, V1OrderBookDepth>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1OrderbooksSymbolIdDepthCurrentGet
     *
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @return RequestConfig
     */
    fun v1OrderbooksSymbolIdDepthCurrentGetRequestConfig(symbolId: kotlin.String, limitLevels: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limitLevels != null) {
                    put("limit_levels", listOf(limitLevels.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/orderbooks/{symbol_id}/depth/current".replace("{"+"symbol_id"+"}", encodeURIComponent(symbolId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /v1/orderbooks/{symbol_id}/history
     * Historical data
     * Get historical order book snapshots for a specific symbol within time range, returned in time ascending order.                :::info  The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels.  :::    :::warning  The &#39;time_start&#39; and &#39;time_end&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day.  Please use the &#39;date&#39; parameter instead for querying data for a specific day without filter.  :::
     * @param symbolId Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols)
     * @param date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)
     * @param timeStart Starting time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @return kotlin.collections.List<V1OrderBook>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1OrderbooksSymbolIdHistoryGet(symbolId: kotlin.String, date: kotlin.String? = null, timeStart: kotlin.String? = null, timeEnd: kotlin.String? = null, limit: kotlin.Int? = 100, limitLevels: kotlin.Int? = null) : kotlin.collections.List<V1OrderBook> {
        val localVarResponse = v1OrderbooksSymbolIdHistoryGetWithHttpInfo(symbolId = symbolId, date = date, timeStart = timeStart, timeEnd = timeEnd, limit = limit, limitLevels = limitLevels)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<V1OrderBook>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/orderbooks/{symbol_id}/history
     * Historical data
     * Get historical order book snapshots for a specific symbol within time range, returned in time ascending order.                :::info  The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels.  :::    :::warning  The &#39;time_start&#39; and &#39;time_end&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day.  Please use the &#39;date&#39; parameter instead for querying data for a specific day without filter.  :::
     * @param symbolId Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols)
     * @param date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)
     * @param timeStart Starting time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @return ApiResponse<kotlin.collections.List<V1OrderBook>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1OrderbooksSymbolIdHistoryGetWithHttpInfo(symbolId: kotlin.String, date: kotlin.String?, timeStart: kotlin.String?, timeEnd: kotlin.String?, limit: kotlin.Int?, limitLevels: kotlin.Int?) : ApiResponse<kotlin.collections.List<V1OrderBook>?> {
        val localVariableConfig = v1OrderbooksSymbolIdHistoryGetRequestConfig(symbolId = symbolId, date = date, timeStart = timeStart, timeEnd = timeEnd, limit = limit, limitLevels = limitLevels)

        return request<Unit, kotlin.collections.List<V1OrderBook>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1OrderbooksSymbolIdHistoryGet
     *
     * @param symbolId Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols)
     * @param date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)
     * @param timeStart Starting time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @return RequestConfig
     */
    fun v1OrderbooksSymbolIdHistoryGetRequestConfig(symbolId: kotlin.String, date: kotlin.String?, timeStart: kotlin.String?, timeEnd: kotlin.String?, limit: kotlin.Int?, limitLevels: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (date != null) {
                    put("date", listOf(date.toString()))
                }
                if (timeStart != null) {
                    put("time_start", listOf(timeStart.toString()))
                }
                if (timeEnd != null) {
                    put("time_end", listOf(timeEnd.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (limitLevels != null) {
                    put("limit_levels", listOf(limitLevels.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/orderbooks/{symbol_id}/history".replace("{"+"symbol_id"+"}", encodeURIComponent(symbolId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /v1/orderbooks/{symbol_id}/latest
     * Latest data
     * Get latest order book snapshots for a specific symbol, returned in time descending order.                :::info  The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels.  :::
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @return kotlin.collections.List<V1OrderBook>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1OrderbooksSymbolIdLatestGet(symbolId: kotlin.String, limit: kotlin.Int? = 100, limitLevels: kotlin.Int? = null) : kotlin.collections.List<V1OrderBook> {
        val localVarResponse = v1OrderbooksSymbolIdLatestGetWithHttpInfo(symbolId = symbolId, limit = limit, limitLevels = limitLevels)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<V1OrderBook>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/orderbooks/{symbol_id}/latest
     * Latest data
     * Get latest order book snapshots for a specific symbol, returned in time descending order.                :::info  The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels.  :::
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @return ApiResponse<kotlin.collections.List<V1OrderBook>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1OrderbooksSymbolIdLatestGetWithHttpInfo(symbolId: kotlin.String, limit: kotlin.Int?, limitLevels: kotlin.Int?) : ApiResponse<kotlin.collections.List<V1OrderBook>?> {
        val localVariableConfig = v1OrderbooksSymbolIdLatestGetRequestConfig(symbolId = symbolId, limit = limit, limitLevels = limitLevels)

        return request<Unit, kotlin.collections.List<V1OrderBook>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1OrderbooksSymbolIdLatestGet
     *
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @return RequestConfig
     */
    fun v1OrderbooksSymbolIdLatestGetRequestConfig(symbolId: kotlin.String, limit: kotlin.Int?, limitLevels: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (limitLevels != null) {
                    put("limit_levels", listOf(limitLevels.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/orderbooks/{symbol_id}/latest".replace("{"+"symbol_id"+"}", encodeURIComponent(symbolId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
