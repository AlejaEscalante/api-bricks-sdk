/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.ModelsExchangeTimeseriesItem
import org.openapitools.client.models.V1TimeseriesItem
import org.openapitools.client.models.V1TimeseriesPeriod

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class OhlcvApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://rest.coinapi.io")
        }
    }

    /**
     * GET /v1/ohlcv/exchanges/{exchange_id}/history
     * Historical data by exchange
     * Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific exchange eg &#x60;BITSTAMP&#x60;                :::info  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.  The difference between &#x60;time_end&#x60; and &#x60;time_start&#x60; cannot be higher than 1 day.  The &#x60;period_id&#x60; cannot be higher than &#x60;1DAY&#x60;.  :::
     * @param exchangeId Exchange identifier of requested timeseries (from the Metadata -&gt; Exchanges)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;)
     * @param timeStart Timeseries starting time in ISO 8601
     * @param timeEnd Timeseries ending time in ISO 8601
     * @return kotlin.collections.List<ModelsExchangeTimeseriesItem>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1OhlcvExchangesExchangeIdHistoryGet(exchangeId: kotlin.String, periodId: kotlin.String, timeStart: kotlin.String, timeEnd: kotlin.String) : kotlin.collections.List<ModelsExchangeTimeseriesItem> {
        val localVarResponse = v1OhlcvExchangesExchangeIdHistoryGetWithHttpInfo(exchangeId = exchangeId, periodId = periodId, timeStart = timeStart, timeEnd = timeEnd)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<ModelsExchangeTimeseriesItem>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/ohlcv/exchanges/{exchange_id}/history
     * Historical data by exchange
     * Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific exchange eg &#x60;BITSTAMP&#x60;                :::info  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.  The difference between &#x60;time_end&#x60; and &#x60;time_start&#x60; cannot be higher than 1 day.  The &#x60;period_id&#x60; cannot be higher than &#x60;1DAY&#x60;.  :::
     * @param exchangeId Exchange identifier of requested timeseries (from the Metadata -&gt; Exchanges)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;)
     * @param timeStart Timeseries starting time in ISO 8601
     * @param timeEnd Timeseries ending time in ISO 8601
     * @return ApiResponse<kotlin.collections.List<ModelsExchangeTimeseriesItem>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1OhlcvExchangesExchangeIdHistoryGetWithHttpInfo(exchangeId: kotlin.String, periodId: kotlin.String, timeStart: kotlin.String, timeEnd: kotlin.String) : ApiResponse<kotlin.collections.List<ModelsExchangeTimeseriesItem>?> {
        val localVariableConfig = v1OhlcvExchangesExchangeIdHistoryGetRequestConfig(exchangeId = exchangeId, periodId = periodId, timeStart = timeStart, timeEnd = timeEnd)

        return request<Unit, kotlin.collections.List<ModelsExchangeTimeseriesItem>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1OhlcvExchangesExchangeIdHistoryGet
     *
     * @param exchangeId Exchange identifier of requested timeseries (from the Metadata -&gt; Exchanges)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;)
     * @param timeStart Timeseries starting time in ISO 8601
     * @param timeEnd Timeseries ending time in ISO 8601
     * @return RequestConfig
     */
    fun v1OhlcvExchangesExchangeIdHistoryGetRequestConfig(exchangeId: kotlin.String, periodId: kotlin.String, timeStart: kotlin.String, timeEnd: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("period_id", listOf(periodId.toString()))
                put("time_start", listOf(timeStart.toString()))
                put("time_end", listOf(timeEnd.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/ohlcv/exchanges/{exchange_id}/history".replace("{"+"exchange_id"+"}", encodeURIComponent(exchangeId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /v1/ohlcv/periods
     * List all periods
     * Get full list of supported time periods available for requesting OHLCV timeseries data.                ### Available periods                Time unit | Period identifiers  --------- | -----------  Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC  Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN  Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS  Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY  Month | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH  Year | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS                :::tip  You can assume that we will not remove any periods from this response, however, we may add new ones.  :::
     * @return kotlin.collections.List<V1TimeseriesPeriod>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1OhlcvPeriodsGet() : kotlin.collections.List<V1TimeseriesPeriod> {
        val localVarResponse = v1OhlcvPeriodsGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<V1TimeseriesPeriod>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/ohlcv/periods
     * List all periods
     * Get full list of supported time periods available for requesting OHLCV timeseries data.                ### Available periods                Time unit | Period identifiers  --------- | -----------  Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC  Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN  Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS  Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY  Month | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH  Year | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS                :::tip  You can assume that we will not remove any periods from this response, however, we may add new ones.  :::
     * @return ApiResponse<kotlin.collections.List<V1TimeseriesPeriod>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1OhlcvPeriodsGetWithHttpInfo() : ApiResponse<kotlin.collections.List<V1TimeseriesPeriod>?> {
        val localVariableConfig = v1OhlcvPeriodsGetRequestConfig()

        return request<Unit, kotlin.collections.List<V1TimeseriesPeriod>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1OhlcvPeriodsGet
     *
     * @return RequestConfig
     */
    fun v1OhlcvPeriodsGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/ohlcv/periods",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /v1/ohlcv/{symbol_id}/history
     * Historical data
     * Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data                :::info  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.  :::
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)
     * @param timeStart Timeseries starting time in ISO 8601 (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (optional)
     * @param limit Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param includeEmptyItems Include items with no activity? (default value is &#x60;false&#x60;, possible values are &#x60;true&#x60; or &#x60;false&#x60;) (optional, default to false)
     * @return kotlin.collections.List<V1TimeseriesItem>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1OhlcvSymbolIdHistoryGet(symbolId: kotlin.String, periodId: kotlin.String, timeStart: kotlin.String? = null, timeEnd: kotlin.String? = null, limit: kotlin.Int? = 100, includeEmptyItems: kotlin.Boolean? = false) : kotlin.collections.List<V1TimeseriesItem> {
        val localVarResponse = v1OhlcvSymbolIdHistoryGetWithHttpInfo(symbolId = symbolId, periodId = periodId, timeStart = timeStart, timeEnd = timeEnd, limit = limit, includeEmptyItems = includeEmptyItems)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<V1TimeseriesItem>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/ohlcv/{symbol_id}/history
     * Historical data
     * Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data                :::info  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.  :::
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)
     * @param timeStart Timeseries starting time in ISO 8601 (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (optional)
     * @param limit Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param includeEmptyItems Include items with no activity? (default value is &#x60;false&#x60;, possible values are &#x60;true&#x60; or &#x60;false&#x60;) (optional, default to false)
     * @return ApiResponse<kotlin.collections.List<V1TimeseriesItem>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1OhlcvSymbolIdHistoryGetWithHttpInfo(symbolId: kotlin.String, periodId: kotlin.String, timeStart: kotlin.String?, timeEnd: kotlin.String?, limit: kotlin.Int?, includeEmptyItems: kotlin.Boolean?) : ApiResponse<kotlin.collections.List<V1TimeseriesItem>?> {
        val localVariableConfig = v1OhlcvSymbolIdHistoryGetRequestConfig(symbolId = symbolId, periodId = periodId, timeStart = timeStart, timeEnd = timeEnd, limit = limit, includeEmptyItems = includeEmptyItems)

        return request<Unit, kotlin.collections.List<V1TimeseriesItem>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1OhlcvSymbolIdHistoryGet
     *
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)
     * @param timeStart Timeseries starting time in ISO 8601 (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (optional)
     * @param limit Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param includeEmptyItems Include items with no activity? (default value is &#x60;false&#x60;, possible values are &#x60;true&#x60; or &#x60;false&#x60;) (optional, default to false)
     * @return RequestConfig
     */
    fun v1OhlcvSymbolIdHistoryGetRequestConfig(symbolId: kotlin.String, periodId: kotlin.String, timeStart: kotlin.String?, timeEnd: kotlin.String?, limit: kotlin.Int?, includeEmptyItems: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("period_id", listOf(periodId.toString()))
                if (timeStart != null) {
                    put("time_start", listOf(timeStart.toString()))
                }
                if (timeEnd != null) {
                    put("time_end", listOf(timeEnd.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (includeEmptyItems != null) {
                    put("include_empty_items", listOf(includeEmptyItems.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/ohlcv/{symbol_id}/history".replace("{"+"symbol_id"+"}", encodeURIComponent(symbolId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /v1/ohlcv/{symbol_id}/latest
     * Latest data
     * Get OHLCV latest timeseries data returned in time descending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data                :::info  OHLCV Latest endpoint is just the shortcut to the OHLCV Historical endpoint with substituted &#x60;time_start&#x60; and &#x60;time_end&#x60; parameters.   The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.  :::
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)
     * @param limit Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param includeEmptyItems Include items with no activity? (default value is &#x60;false&#x60;, possible values are &#x60;true&#x60; or &#x60;false&#x60;) (optional, default to false)
     * @return kotlin.collections.List<V1TimeseriesItem>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1OhlcvSymbolIdLatestGet(symbolId: kotlin.String, periodId: kotlin.String, limit: kotlin.Int? = 100, includeEmptyItems: kotlin.Boolean? = false) : kotlin.collections.List<V1TimeseriesItem> {
        val localVarResponse = v1OhlcvSymbolIdLatestGetWithHttpInfo(symbolId = symbolId, periodId = periodId, limit = limit, includeEmptyItems = includeEmptyItems)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<V1TimeseriesItem>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/ohlcv/{symbol_id}/latest
     * Latest data
     * Get OHLCV latest timeseries data returned in time descending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data                :::info  OHLCV Latest endpoint is just the shortcut to the OHLCV Historical endpoint with substituted &#x60;time_start&#x60; and &#x60;time_end&#x60; parameters.   The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.  :::
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)
     * @param limit Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param includeEmptyItems Include items with no activity? (default value is &#x60;false&#x60;, possible values are &#x60;true&#x60; or &#x60;false&#x60;) (optional, default to false)
     * @return ApiResponse<kotlin.collections.List<V1TimeseriesItem>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1OhlcvSymbolIdLatestGetWithHttpInfo(symbolId: kotlin.String, periodId: kotlin.String, limit: kotlin.Int?, includeEmptyItems: kotlin.Boolean?) : ApiResponse<kotlin.collections.List<V1TimeseriesItem>?> {
        val localVariableConfig = v1OhlcvSymbolIdLatestGetRequestConfig(symbolId = symbolId, periodId = periodId, limit = limit, includeEmptyItems = includeEmptyItems)

        return request<Unit, kotlin.collections.List<V1TimeseriesItem>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1OhlcvSymbolIdLatestGet
     *
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)
     * @param limit Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param includeEmptyItems Include items with no activity? (default value is &#x60;false&#x60;, possible values are &#x60;true&#x60; or &#x60;false&#x60;) (optional, default to false)
     * @return RequestConfig
     */
    fun v1OhlcvSymbolIdLatestGetRequestConfig(symbolId: kotlin.String, periodId: kotlin.String, limit: kotlin.Int?, includeEmptyItems: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("period_id", listOf(periodId.toString()))
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (includeEmptyItems != null) {
                    put("include_empty_items", listOf(includeEmptyItems.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/ohlcv/{symbol_id}/latest".replace("{"+"symbol_id"+"}", encodeURIComponent(symbolId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
