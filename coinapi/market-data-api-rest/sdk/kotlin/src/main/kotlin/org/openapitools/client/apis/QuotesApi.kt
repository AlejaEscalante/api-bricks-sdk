/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.V1Quote
import org.openapitools.client.models.V1QuoteTrade

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class QuotesApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://rest.coinapi.io")
        }
    }

    /**
     * GET /v1/quotes/current
     * Current data
     * Get current quotes for all symbols or for a specific symbol.              :::info When requesting current data for a specific symbol, output is not encapsulated into JSON array as only one item is returned. :::
     * @param filterSymbolId Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional)
     * @return kotlin.collections.List<V1QuoteTrade>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1QuotesCurrentGet(filterSymbolId: kotlin.String? = null) : kotlin.collections.List<V1QuoteTrade> {
        val localVarResponse = v1QuotesCurrentGetWithHttpInfo(filterSymbolId = filterSymbolId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<V1QuoteTrade>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/quotes/current
     * Current data
     * Get current quotes for all symbols or for a specific symbol.              :::info When requesting current data for a specific symbol, output is not encapsulated into JSON array as only one item is returned. :::
     * @param filterSymbolId Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional)
     * @return ApiResponse<kotlin.collections.List<V1QuoteTrade>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1QuotesCurrentGetWithHttpInfo(filterSymbolId: kotlin.String?) : ApiResponse<kotlin.collections.List<V1QuoteTrade>?> {
        val localVariableConfig = v1QuotesCurrentGetRequestConfig(filterSymbolId = filterSymbolId)

        return request<Unit, kotlin.collections.List<V1QuoteTrade>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1QuotesCurrentGet
     *
     * @param filterSymbolId Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional)
     * @return RequestConfig
     */
    fun v1QuotesCurrentGetRequestConfig(filterSymbolId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filterSymbolId != null) {
                    put("filter_symbol_id", listOf(filterSymbolId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/quotes/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /v1/quotes/latest
     * Latest data
     * Get latest updates of the quotes up to 1 minute ago. Latest data is always returned in time descending order.
     * @param filterSymbolId Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return kotlin.collections.List<V1Quote>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1QuotesLatestGet(filterSymbolId: kotlin.String? = null, limit: kotlin.Int? = 100) : kotlin.collections.List<V1Quote> {
        val localVarResponse = v1QuotesLatestGetWithHttpInfo(filterSymbolId = filterSymbolId, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<V1Quote>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/quotes/latest
     * Latest data
     * Get latest updates of the quotes up to 1 minute ago. Latest data is always returned in time descending order.
     * @param filterSymbolId Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return ApiResponse<kotlin.collections.List<V1Quote>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1QuotesLatestGetWithHttpInfo(filterSymbolId: kotlin.String?, limit: kotlin.Int?) : ApiResponse<kotlin.collections.List<V1Quote>?> {
        val localVariableConfig = v1QuotesLatestGetRequestConfig(filterSymbolId = filterSymbolId, limit = limit)

        return request<Unit, kotlin.collections.List<V1Quote>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1QuotesLatestGet
     *
     * @param filterSymbolId Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return RequestConfig
     */
    fun v1QuotesLatestGetRequestConfig(filterSymbolId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filterSymbolId != null) {
                    put("filter_symbol_id", listOf(filterSymbolId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/quotes/latest",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /v1/quotes/{symbol_id}/current
     * Current quotes for a specific symbol
     * 
     * @param symbolId The symbol identifier (from the Metadata -&gt; Symbols)
     * @return V1QuoteTrade
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1QuotesSymbolIdCurrentGet(symbolId: kotlin.String) : V1QuoteTrade {
        val localVarResponse = v1QuotesSymbolIdCurrentGetWithHttpInfo(symbolId = symbolId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V1QuoteTrade
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/quotes/{symbol_id}/current
     * Current quotes for a specific symbol
     * 
     * @param symbolId The symbol identifier (from the Metadata -&gt; Symbols)
     * @return ApiResponse<V1QuoteTrade?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1QuotesSymbolIdCurrentGetWithHttpInfo(symbolId: kotlin.String) : ApiResponse<V1QuoteTrade?> {
        val localVariableConfig = v1QuotesSymbolIdCurrentGetRequestConfig(symbolId = symbolId)

        return request<Unit, V1QuoteTrade>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1QuotesSymbolIdCurrentGet
     *
     * @param symbolId The symbol identifier (from the Metadata -&gt; Symbols)
     * @return RequestConfig
     */
    fun v1QuotesSymbolIdCurrentGetRequestConfig(symbolId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/quotes/{symbol_id}/current".replace("{"+"symbol_id"+"}", encodeURIComponent(symbolId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /v1/quotes/{symbol_id}/history
     * Historical data
     * Get historical quote updates within requested time range, returned in time ascending order.  :::warning The &#39;time_start&#39; and &#39;time_end&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day. Please use the &#39;date&#39; parameter instead for querying data for a specific day without filter. :::
     * @param symbolId Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols)
     * @param date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (optional)
     * @param limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return kotlin.collections.List<V1Quote>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1QuotesSymbolIdHistoryGet(symbolId: kotlin.String, date: kotlin.String? = null, timeStart: kotlin.String? = null, timeEnd: kotlin.String? = null, limit: kotlin.Int? = 100) : kotlin.collections.List<V1Quote> {
        val localVarResponse = v1QuotesSymbolIdHistoryGetWithHttpInfo(symbolId = symbolId, date = date, timeStart = timeStart, timeEnd = timeEnd, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<V1Quote>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/quotes/{symbol_id}/history
     * Historical data
     * Get historical quote updates within requested time range, returned in time ascending order.  :::warning The &#39;time_start&#39; and &#39;time_end&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day. Please use the &#39;date&#39; parameter instead for querying data for a specific day without filter. :::
     * @param symbolId Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols)
     * @param date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (optional)
     * @param limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return ApiResponse<kotlin.collections.List<V1Quote>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1QuotesSymbolIdHistoryGetWithHttpInfo(symbolId: kotlin.String, date: kotlin.String?, timeStart: kotlin.String?, timeEnd: kotlin.String?, limit: kotlin.Int?) : ApiResponse<kotlin.collections.List<V1Quote>?> {
        val localVariableConfig = v1QuotesSymbolIdHistoryGetRequestConfig(symbolId = symbolId, date = date, timeStart = timeStart, timeEnd = timeEnd, limit = limit)

        return request<Unit, kotlin.collections.List<V1Quote>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1QuotesSymbolIdHistoryGet
     *
     * @param symbolId Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols)
     * @param date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (optional)
     * @param limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return RequestConfig
     */
    fun v1QuotesSymbolIdHistoryGetRequestConfig(symbolId: kotlin.String, date: kotlin.String?, timeStart: kotlin.String?, timeEnd: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (date != null) {
                    put("date", listOf(date.toString()))
                }
                if (timeStart != null) {
                    put("time_start", listOf(timeStart.toString()))
                }
                if (timeEnd != null) {
                    put("time_end", listOf(timeEnd.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/quotes/{symbol_id}/history".replace("{"+"symbol_id"+"}", encodeURIComponent(symbolId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /v1/quotes/{symbol_id}/latest
     * Latest quote updates for a specific symbol
     * 
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return kotlin.collections.List<V1Quote>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1QuotesSymbolIdLatestGet(symbolId: kotlin.String, limit: kotlin.Int? = 100) : kotlin.collections.List<V1Quote> {
        val localVarResponse = v1QuotesSymbolIdLatestGetWithHttpInfo(symbolId = symbolId, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<V1Quote>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /v1/quotes/{symbol_id}/latest
     * Latest quote updates for a specific symbol
     * 
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return ApiResponse<kotlin.collections.List<V1Quote>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun v1QuotesSymbolIdLatestGetWithHttpInfo(symbolId: kotlin.String, limit: kotlin.Int?) : ApiResponse<kotlin.collections.List<V1Quote>?> {
        val localVariableConfig = v1QuotesSymbolIdLatestGetRequestConfig(symbolId = symbolId, limit = limit)

        return request<Unit, kotlin.collections.List<V1Quote>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation v1QuotesSymbolIdLatestGet
     *
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return RequestConfig
     */
    fun v1QuotesSymbolIdLatestGetRequestConfig(symbolId: kotlin.String, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "text/plain, application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/quotes/{symbol_id}/latest".replace("{"+"symbol_id"+"}", encodeURIComponent(symbolId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
