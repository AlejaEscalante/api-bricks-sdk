/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Represents a timeseries item with price and volume information.
 *
 * @param timePeriodStart The start time of the time period.
 * @param timePeriodEnd The end time of the time period.
 * @param timeOpen The time when the price opened.
 * @param timeClose The time when the price closed.
 * @param priceOpen The opening price.
 * @param priceHigh The highest price during the time period.
 * @param priceLow The lowest price during the time period.
 * @param priceClose The closing price.
 * @param volumeTraded The total volume traded during the time period.
 * @param tradesCount The number of trades executed during the time period.
 */


data class V1TimeseriesItem (

    /* The start time of the time period. */
    @Json(name = "time_period_start")
    val timePeriodStart: java.time.OffsetDateTime? = null,

    /* The end time of the time period. */
    @Json(name = "time_period_end")
    val timePeriodEnd: java.time.OffsetDateTime? = null,

    /* The time when the price opened. */
    @Json(name = "time_open")
    val timeOpen: java.time.OffsetDateTime? = null,

    /* The time when the price closed. */
    @Json(name = "time_close")
    val timeClose: java.time.OffsetDateTime? = null,

    /* The opening price. */
    @Json(name = "price_open")
    val priceOpen: kotlin.Double? = null,

    /* The highest price during the time period. */
    @Json(name = "price_high")
    val priceHigh: kotlin.Double? = null,

    /* The lowest price during the time period. */
    @Json(name = "price_low")
    val priceLow: kotlin.Double? = null,

    /* The closing price. */
    @Json(name = "price_close")
    val priceClose: kotlin.Double? = null,

    /* The total volume traded during the time period. */
    @Json(name = "volume_traded")
    val volumeTraded: kotlin.Double? = null,

    /* The number of trades executed during the time period. */
    @Json(name = "trades_count")
    val tradesCount: kotlin.Long? = null

) {


}

