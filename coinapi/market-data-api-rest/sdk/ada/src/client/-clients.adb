--  CoinAPI Market Data REST API
--  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
--
--  The version of the OpenAPI document: v1
--  Contact: support@apibricks.io
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.16.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with Swagger.Streams;
package body .Clients is
   pragma Style_Checks ("-bmrIu");

   Mime_1 : aliased constant String := "application/x-msgpack";
   Mime_2 : aliased constant String := "text/json";
   Media_List_1 : constant Swagger.Mime_List := (
     1 => Swagger.Mime_Json,
   
     2 => Mime_1'Access,
   
     3 => Mime_2'Access,
   
     4 => Swagger.Mime_Text   );


   --  Get specific rate
   --  Retrieves the exchange rate for a specific base and quote asset at a given time or the current rate.
   --              
   --  :::info
   --  If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements.
   --  :::
   procedure Get_Specific_Rate
      (Client : in out Client_Type;
       Asset_Id_Base : in Swagger.UString;
       Asset_Id_Quote : in Swagger.UString;
       Time : in Swagger.Nullable_UString;
       Result : out .Models.V1ExchangeRate_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("time", Time);
      URI.Set_Path ("/v1/exchangerate/{asset_id_base}/{asset_id_quote}");
      URI.Set_Path_Param ("asset_id_base", Asset_Id_Base);
      URI.Set_Path_Param ("asset_id_quote", Asset_Id_Quote);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Specific_Rate;

   --  Timeseries data
   --  Get the historical exchange rates between two assets in the form of the timeseries.
   procedure V_1Exchangerate_Asset_Id_Base_Asset_Id_Quote_History_Get
      (Client : in out Client_Type;
       Asset_Id_Base : in Swagger.UString;
       Asset_Id_Quote : in Swagger.UString;
       Period_Id : in Swagger.Nullable_UString;
       Time_Start : in Swagger.Nullable_UString;
       Time_End : in Swagger.Nullable_UString;
       Limit : in Swagger.Nullable_Integer;
       Result : out .Models.V1ExchangeRatesTimeseriesItem_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("period_id", Period_Id);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("limit", Limit);
      URI.Set_Path ("/v1/exchangerate/{asset_id_base}/{asset_id_quote}/history");
      URI.Set_Path_Param ("asset_id_base", Asset_Id_Base);
      URI.Set_Path_Param ("asset_id_quote", Asset_Id_Quote);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Exchangerate_Asset_Id_Base_Asset_Id_Quote_History_Get;

   --  Get all current rates
   --  Get the current exchange rate between requested asset and all other assets.
   --              
   --  :::info
   --  If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements.
   --  :::
   --              
   --  :::info
   --  You can invert the rates by using Y = 1 / X equation, for example BTC/USD = 1 / (USD/BTC);
   --  :::
   procedure V_1Exchangerate_Asset_Id_Base_Get
      (Client : in out Client_Type;
       Asset_Id_Base : in Swagger.UString;
       Filter_Asset_Id : in Swagger.Nullable_UString;
       Invert : in Swagger.Nullable_Boolean;
       Time : in Swagger.Nullable_UString;
       Result : out .Models.V1ExchangeRates_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("filter_asset_id", Filter_Asset_Id);
      URI.Add_Param ("invert", Invert);
      URI.Add_Param ("time", Time);
      URI.Set_Path ("/v1/exchangerate/{asset_id_base}");
      URI.Set_Path_Param ("asset_id_base", Asset_Id_Base);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Exchangerate_Asset_Id_Base_Get;

   --  Timeseries periods
   --  You can also obtain historical exchange rates of any asset pair, grouped into time periods.
   --  Get full list of supported time periods available for requesting exchange rates historical timeseries data.
   --              
   --  ## Timeseries periods
   --  Time unit |	Period identifiers
   --  --- | ---
   --  Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC
   --  Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN
   --  Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS
   --  Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY
   procedure V_1Exchangerate_History_Periods_Get
      (Client : in out Client_Type;
       Result : out .Models.V1TimeseriesPeriod_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/exchangerate/history/periods");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Exchangerate_History_Periods_Get;

   --  List all assets by asset ID
   procedure V_1Assets_Asset_Id_Get
      (Client : in out Client_Type;
       Asset_Id : in Swagger.UString;
       Result : out .Models.V1Asset_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/assets/{asset_id}");
      URI.Set_Path_Param ("asset_id", Asset_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Assets_Asset_Id_Get;

   --  List all assets
   --  Retrieves all assets.
   --              
   --  :::info
   --  Our asset identifiers are aligned with the ISO 4217 currency codes standard only for fiat money (government or law regulated currency).
   --  :::
   --              
   --  :::info
   --  Properties of the output are providing aggregated information from across all symbols related to the specific asset. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source.
   --  :::
   procedure V_1Assets_Get
      (Client : in out Client_Type;
       Filter_Asset_Id : in Swagger.Nullable_UString;
       Result : out .Models.V1Asset_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("filter_asset_id", Filter_Asset_Id);
      URI.Set_Path ("/v1/assets");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Assets_Get;

   --  List all asset icons
   --  Gets the list of icons (of the given size) for all the assets.
   procedure V_1Assets_Icons_Size_Get
      (Client : in out Client_Type;
       Size : in Integer;
       Result : out .Models.V1Icon_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/assets/icons/{size}");
      URI.Set_Path_Param ("size", .Models.To_String (Size));
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Assets_Icons_Size_Get;

   --  List all chains by chain ID
   procedure V_1Chains_Chain_Id_Get
      (Client : in out Client_Type;
       Chain_Id : in Swagger.UString;
       Result : out .Models.V1Chain_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/chains/{chain_id}");
      URI.Set_Path_Param ("chain_id", Chain_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Chains_Chain_Id_Get;

   --  List all blockchain chains
   --  Retrieves all blockchain chains supported by the system.
   --              
   --  :::info
   --  Properties of the output are providing aggregated information from across all symbols related to the specific chain. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source.
   --  :::
   procedure V_1Chains_Get
      (Client : in out Client_Type;
       Filter_Chain_Id : in Swagger.Nullable_UString;
       Result : out .Models.V1Chain_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("filter_chain_id", Filter_Chain_Id);
      URI.Set_Path ("/v1/chains");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Chains_Get;

   --  List all exchanges by exchange_id
   procedure V_1Exchanges_Exchange_Id_Get
      (Client : in out Client_Type;
       Exchange_Id : in Swagger.UString;
       Result : out .Models.V1Exchange_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/exchanges/{exchange_id}");
      URI.Set_Path_Param ("exchange_id", Exchange_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Exchanges_Exchange_Id_Get;

   --  List all exchanges
   --  Get a detailed list of exchanges provided by the system.
   --              
   --  :::info
   --  Properties of the output are providing aggregated information from across all symbols related to the specific exchange. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source.
   --  :::
   procedure V_1Exchanges_Get
      (Client : in out Client_Type;
       Filter_Exchange_Id : in Swagger.Nullable_UString;
       Result : out .Models.V1Exchange_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("filter_exchange_id", Filter_Exchange_Id);
      URI.Set_Path ("/v1/exchanges");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Exchanges_Get;

   --  List of icons for the exchanges
   procedure V_1Exchanges_Icons_Size_Get
      (Client : in out Client_Type;
       Size : in Integer;
       Result : out .Models.V1Icon_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/exchanges/icons/{size}");
      URI.Set_Path_Param ("size", .Models.To_String (Size));
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Exchanges_Icons_Size_Get;

   --  List all active symbols
   --  Retrieves all currently active (listed) symbols, with optional filtering.
   --              
   --  :::info
   --  "price_precision" and "size_precision" are data precisions and are not always the same precisions used for trading eg. for the "BINANCE" exchanges.
   --  :::
   --              
   --  :::info
   --  You should not assume that the market data will be always within the resolution provided by the "price_precision" and "size_precision". The fact that the precision values can be derived from a posterior implies the fact that this data could be delayed, also it can be changed by the data source without notice and we will immediately deliver data with the new precision while could not update the precision values in this endpoint immediately.
   --  :::
   --              
   --  ### Symbol identifier
   --              
   --  Our symbol identifier is created using a pattern that depends on symbol type.
   --              
   --  Type | `symbol_id` pattern
   --  --------- | ---------
   --  SPOT | `{exchange_id}_SPOT_{asset_id_base}_{asset_id_quote}`
   --  FUTURES | `{exchange_id}_FTS_{asset_id_base}_{asset_id_quote}_{YYMMDD of future_delivery_time}`
   --  OPTION | `{exchange_id}_OPT_{asset_id_base}_{asset_id_quote}_{YYMMDD of option_expiration_time}_{option_strike_price}_{option_type_is_call as C/P}`
   --  PERPETUAL | `{exchange_id}_PERP_{asset_id_base}_{asset_id_quote}`
   --  INDEX | `{exchange_id}_IDX_{index_id}`
   --  CREDIT | `{exchange_id}_CRE_{asset_id_base}`
   --  CONTACT  | `{exchange_id}_COT_{contract_id}`
   --              
   --  :::info
   --  In the unlikely event when the "symbol_id" for more than one market is the same. We will append the additional term (prefixed with the "_") at the end of the duplicated identifiers to differentiate them.
   --  :::info
   --              
   --  ### Symbol types list (enumeration of `symbol_type` output variable)
   --              
   --  Type | Name | Description
   --  -------- | - | -----------
   --  SPOT | FX Spot | Agreement to exchange one asset for another one *(e.g. Buy BTC for USD)*
   --  FUTURES | Futures contract | FX Spot derivative contract where traders agree to trade fx spot at predetermined future time
   --  OPTION | Option contract | FX Spot derivative contract where traders agree to trade right to require buy or sell of fx spot at agreed price on exercise date
   --  PERPETUAL | Perpetual contract | FX Spot derivative contract where traders agree to trade fx spot continously without predetermined future delivery time
   --  INDEX | Index | Statistical composite that measures changes in the economy or markets.
   --  CREDIT | Credit/Funding | Margin funding contract. Order book displays lending offers and borrow bids. Price represents the daily rate.
   --  CONTRACT | Contract | Represents other types of financial instruments *(e.g. spreads, interest rate swap)*
   --              
   --  ### Additional output variables for `symbol_type = INDEX`
   --              
   --  Variable | Description
   --  --------- | -----------
   --  index_id | Index identifier
   --  index_display_name | Human readable name of the index *(optional)*
   --  index_display_description | Description of the index *(optional)*
   --              
   --  ### Additional output variables for `symbol_type = FUTURES`
   --              
   --  Variable | Description
   --  --------- | -----------
   --  future_delivery_time | Predetermined time of futures contract delivery date in ISO 8601
   --  future_contract_unit | Contact size *(eg. 10 BTC if `future_contract_unit` = `10` and `future_contract_unit_asset` = `BTC`)*
   --  future_contract_unit_asset | Identifier of the asset used to denominate the contract unit
   --              
   --  ### Additional output variables for `symbol_type = PERPETUAL`
   --              
   --  Variable | Description
   --  --------- | -----------
   --  future_contract_unit | Contact size *(eg. 10 BTC if `future_contract_unit` = `10` and `future_contract_unit_asset` = `BTC`)*
   --  future_contract_unit_asset | Identifier of the asset used to denominate the contract unit
   --              
   --  ### Additional output variables for `symbol_type = OPTION`
   --              
   --  Variable | Description
   --  --------- | -----------
   --  option_type_is_call | Boolean value representing option type. `true` for Call options, `false` for Put options
   --  option_strike_price | Price at which option contract can be exercised
   --  option_contract_unit | Base asset amount of underlying spot which single option represents
   --  option_exercise_style | Option exercise style. Can be `EUROPEAN` or `AMERICAN`
   --  option_expiration_time | Option contract expiration time in ISO 8601
   --              
   --  ### Additional output variables for `symbol_type = CONTRACT`
   --              
   --  Variable | Description
   --  --------- | -----------
   --  contract_delivery_time | Predetermined time of contract delivery date in ISO 8601
   --  contract_unit | Contact size *(eg. 10 BTC if `contract_unit` = `10` and `contract_unit_asset` = `BTC`)*
   --  contract_unit_asset | Identifier of the asset used to denominate the contract unit
   --  contract_id | Identifier of contract by the exchange
   procedure V_1Symbols_Exchange_Id_Active_Get
      (Client : in out Client_Type;
       Exchange_Id : in Swagger.UString;
       Filter_Symbol_Id : in Swagger.Nullable_UString;
       Filter_Asset_Id : in Swagger.Nullable_UString;
       Result : out .Models.V1Symbol_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("filter_symbol_id", Filter_Symbol_Id);
      URI.Add_Param ("filter_asset_id", Filter_Asset_Id);
      URI.Set_Path ("/v1/symbols/{exchange_id}/active");
      URI.Set_Path_Param ("exchange_id", Exchange_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Symbols_Exchange_Id_Active_Get;

   --  List all historical symbols for an exchange.
   --  This endpoint provides access to symbols that are no longer actively traded or listed on a given exchange.
   --  The data is provided with pagination support.
   procedure V_1Symbols_Exchange_Id_History_Get
      (Client : in out Client_Type;
       Exchange_Id : in Swagger.UString;
       Page : in Swagger.Nullable_Integer;
       Limit : in Swagger.Nullable_Integer;
       Result : out .Models.V1Symbol_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("page", Page);
      URI.Add_Param ("limit", Limit);
      URI.Set_Path ("/v1/symbols/{exchange_id}/history");
      URI.Set_Path_Param ("exchange_id", Exchange_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Symbols_Exchange_Id_History_Get;

   --  List active symbol mapping for the exchange
   procedure V_1Symbols_Map_Exchange_Id_Get
      (Client : in out Client_Type;
       Exchange_Id : in Swagger.UString;
       Result : out .Models.V1SymbolMapping_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/symbols/map/{exchange_id}");
      URI.Set_Path_Param ("exchange_id", Exchange_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Symbols_Map_Exchange_Id_Get;

   --  Current metrics for given asset
   --  Get current asset metrics.
   procedure V_1Metrics_Asset_Current_Get
      (Client : in out Client_Type;
       Metric_Id : in Swagger.Nullable_UString;
       Asset_Id : in Swagger.Nullable_UString;
       Asset_Id_External : in Swagger.Nullable_UString;
       Exchange_Id : in Swagger.Nullable_UString;
       Result : out .Models.V1GeneralData_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("metric_id", Metric_Id);
      URI.Add_Param ("asset_id", Asset_Id);
      URI.Add_Param ("asset_id_external", Asset_Id_External);
      URI.Add_Param ("exchange_id", Exchange_Id);
      URI.Set_Path ("/v1/metrics/asset/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Metrics_Asset_Current_Get;

   --  Historical metrics for asset
   --  Get asset metrics history.
   procedure V_1Metrics_Asset_History_Get
      (Client : in out Client_Type;
       Metric_Id : in Swagger.UString;
       Exchange_Id : in Swagger.UString;
       Asset_Id : in Swagger.Nullable_UString;
       Asset_Id_External : in Swagger.Nullable_UString;
       Time_Start : in Swagger.Nullable_Date;
       Time_End : in Swagger.Nullable_Date;
       Time_Format : in Swagger.Nullable_UString;
       Period_Id : in Swagger.Nullable_UString;
       Limit : in Swagger.Nullable_Integer;
       Result : out .Models.V1MetricData_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("metric_id", Metric_Id);
      URI.Add_Param ("asset_id", Asset_Id);
      URI.Add_Param ("asset_id_external", Asset_Id_External);
      URI.Add_Param ("exchange_id", Exchange_Id);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("time_format", Time_Format);
      URI.Add_Param ("period_id", Period_Id);
      URI.Add_Param ("limit", Limit);
      URI.Set_Path ("/v1/metrics/asset/history");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Metrics_Asset_History_Get;

   --  Listing of all supported metrics for asset
   --  Get data metrics for asset.
   procedure V_1Metrics_Asset_Listing_Get
      (Client : in out Client_Type;
       Metric_Id : in Swagger.Nullable_UString;
       Exchange_Id : in Swagger.Nullable_UString;
       Chain_Id : in Swagger.Nullable_UString;
       Network_Id : in Swagger.Nullable_UString;
       Asset_Id : in Swagger.Nullable_UString;
       Asset_Id_External : in Swagger.Nullable_UString;
       Result : out .Models.V1ListingItem_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("metric_id", Metric_Id);
      URI.Add_Param ("exchange_id", Exchange_Id);
      URI.Add_Param ("chain_id", Chain_Id);
      URI.Add_Param ("network_id", Network_Id);
      URI.Add_Param ("asset_id", Asset_Id);
      URI.Add_Param ("asset_id_external", Asset_Id_External);
      URI.Set_Path ("/v1/metrics/asset/listing");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Metrics_Asset_Listing_Get;

   --  Current metrics for given exchange
   --  Get current exchange metrics values.
   procedure V_1Metrics_Exchange_Current_Get
      (Client : in out Client_Type;
       Exchange_Id : in Swagger.UString;
       Metric_Id : in Swagger.Nullable_UString;
       Result : out .Models.V1GeneralData_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("metric_id", Metric_Id);
      URI.Add_Param ("exchange_id", Exchange_Id);
      URI.Set_Path ("/v1/metrics/exchange/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Metrics_Exchange_Current_Get;

   --  Historical metrics for the exchange
   --  Get exchange metrics history.
   procedure V_1Metrics_Exchange_History_Get
      (Client : in out Client_Type;
       Metric_Id : in Swagger.UString;
       Exchange_Id : in Swagger.UString;
       Time_Start : in Swagger.Nullable_Date;
       Time_End : in Swagger.Nullable_Date;
       Time_Format : in Swagger.Nullable_UString;
       Period_Id : in Swagger.Nullable_UString;
       Limit : in Swagger.Nullable_Integer;
       Result : out .Models.V1MetricData_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("metric_id", Metric_Id);
      URI.Add_Param ("exchange_id", Exchange_Id);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("time_format", Time_Format);
      URI.Add_Param ("period_id", Period_Id);
      URI.Add_Param ("limit", Limit);
      URI.Set_Path ("/v1/metrics/exchange/history");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Metrics_Exchange_History_Get;

   --  Listing of all supported exchange metrics
   --  Get data metrics for exchange.
   procedure V_1Metrics_Exchange_Listing_Get
      (Client : in out Client_Type;
       Exchange_Id : in Swagger.UString;
       Metric_Id : in Swagger.Nullable_UString;
       Result : out .Models.V1ListingItem_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("metric_id", Metric_Id);
      URI.Add_Param ("exchange_id", Exchange_Id);
      URI.Set_Path ("/v1/metrics/exchange/listing");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Metrics_Exchange_Listing_Get;

   --  Listing of all supported metrics by CoinAPI
   --  Get all data metrics.
   procedure V_1Metrics_Listing_Get
      (Client : in out Client_Type;
       Result : out .Models.V1Metric_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/metrics/listing");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Metrics_Listing_Get;

   --  Current metrics for given symbol
   --  Get current symbol metrics.
   procedure V_1Metrics_Symbol_Current_Get
      (Client : in out Client_Type;
       Metric_Id : in Swagger.Nullable_UString;
       Symbol_Id : in Swagger.Nullable_UString;
       Exchange_Id : in Swagger.Nullable_UString;
       Result : out .Models.V1GeneralData_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("metric_id", Metric_Id);
      URI.Add_Param ("symbol_id", Symbol_Id);
      URI.Add_Param ("exchange_id", Exchange_Id);
      URI.Set_Path ("/v1/metrics/symbol/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Metrics_Symbol_Current_Get;

   --  Historical metrics for symbol
   --  Get symbol metrics history.
   procedure V_1Metrics_Symbol_History_Get
      (Client : in out Client_Type;
       Metric_Id : in Swagger.UString;
       Symbol_Id : in Swagger.UString;
       Time_Start : in Swagger.Nullable_Date;
       Time_End : in Swagger.Nullable_Date;
       Time_Format : in Swagger.Nullable_UString;
       Period_Id : in Swagger.Nullable_UString;
       Limit : in Swagger.Nullable_Integer;
       Result : out .Models.V1MetricData_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("metric_id", Metric_Id);
      URI.Add_Param ("symbol_id", Symbol_Id);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("time_format", Time_Format);
      URI.Add_Param ("period_id", Period_Id);
      URI.Add_Param ("limit", Limit);
      URI.Set_Path ("/v1/metrics/symbol/history");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Metrics_Symbol_History_Get;

   --  Listing of all supported metrics for symbol
   --  Get data metrics for symbol.
   procedure V_1Metrics_Symbol_Listing_Get
      (Client : in out Client_Type;
       Metric_Id : in Swagger.Nullable_UString;
       Exchange_Id : in Swagger.Nullable_UString;
       Symbol_Id : in Swagger.Nullable_UString;
       Result : out .Models.V1ListingItem_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("metric_id", Metric_Id);
      URI.Add_Param ("exchange_id", Exchange_Id);
      URI.Add_Param ("symbol_id", Symbol_Id);
      URI.Set_Path ("/v1/metrics/symbol/listing");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Metrics_Symbol_Listing_Get;

   --  Historical metrics for the asset
   --  Get asset metrics history.
   procedure V_2Metrics_Asset_History_Get
      (Client : in out Client_Type;
       Metric_Id : in Swagger.UString;
       Asset_Id : in Swagger.UString;
       Time_Start : in Swagger.Nullable_Date;
       Time_End : in Swagger.Nullable_Date;
       Time_Format : in Swagger.Nullable_UString;
       Period_Id : in Swagger.Nullable_UString;
       Limit : in Swagger.Nullable_Integer;
       Result : out Swagger.Object_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("metric_id", Metric_Id);
      URI.Add_Param ("asset_id", Asset_Id);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("time_format", Time_Format);
      URI.Add_Param ("period_id", Period_Id);
      URI.Add_Param ("limit", Limit);
      URI.Set_Path ("/v2/metrics/asset/history");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_2Metrics_Asset_History_Get;

   --  Listing of metrics available for specific asset
   --  Get all metrics that are actually available for the specified asset.
   procedure V_2Metrics_Asset_Listing_Get
      (Client : in out Client_Type;
       Asset_Id : in Swagger.UString;
       Result : out .Models.V1MetricInfo_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("asset_id", Asset_Id);
      URI.Set_Path ("/v2/metrics/asset/listing");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_2Metrics_Asset_Listing_Get;

   --  Historical metrics for the chain
   --  Get chain metrics history.
   procedure V_2Metrics_Chain_History_Get
      (Client : in out Client_Type;
       Metric_Id : in Swagger.UString;
       Chain_Id : in Swagger.UString;
       Time_Start : in Swagger.Nullable_Date;
       Time_End : in Swagger.Nullable_Date;
       Time_Format : in Swagger.Nullable_UString;
       Period_Id : in Swagger.Nullable_UString;
       Limit : in Swagger.Nullable_Integer;
       Result : out Swagger.Object_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("metric_id", Metric_Id);
      URI.Add_Param ("chain_id", Chain_Id);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("time_format", Time_Format);
      URI.Add_Param ("period_id", Period_Id);
      URI.Add_Param ("limit", Limit);
      URI.Set_Path ("/v2/metrics/chain/history");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_2Metrics_Chain_History_Get;

   --  Listing of metrics available for specific chain
   --  Get all metrics that are actually available for the specified blockchain chain.
   procedure V_2Metrics_Chain_Listing_Get
      (Client : in out Client_Type;
       Chain_Id : in Swagger.UString;
       Result : out .Models.V1MetricInfo_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("chain_id", Chain_Id);
      URI.Set_Path ("/v2/metrics/chain/listing");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_2Metrics_Chain_Listing_Get;

   --  Historical metrics for the exchange
   --  Get exchange metrics history.
   procedure V_2Metrics_Exchange_History_Get
      (Client : in out Client_Type;
       Metric_Id : in Swagger.UString;
       Exchange_Id : in Swagger.UString;
       Time_Start : in Swagger.Nullable_Date;
       Time_End : in Swagger.Nullable_Date;
       Time_Format : in Swagger.Nullable_UString;
       Period_Id : in Swagger.Nullable_UString;
       Limit : in Swagger.Nullable_Integer;
       Result : out Swagger.Object_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("metric_id", Metric_Id);
      URI.Add_Param ("exchange_id", Exchange_Id);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("time_format", Time_Format);
      URI.Add_Param ("period_id", Period_Id);
      URI.Add_Param ("limit", Limit);
      URI.Set_Path ("/v2/metrics/exchange/history");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_2Metrics_Exchange_History_Get;

   --  Listing of metrics available for specific exchange
   --  Get all metrics that are actually available for the specified exchange.
   procedure V_2Metrics_Exchange_Listing_Get
      (Client : in out Client_Type;
       Exchange_Id : in Swagger.UString;
       Result : out .Models.V1MetricInfo_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("exchange_id", Exchange_Id);
      URI.Set_Path ("/v2/metrics/exchange/listing");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_2Metrics_Exchange_Listing_Get;

   --  Listing of all supported metrics
   --  Get all metrics available in the system.
   procedure V_2Metrics_Listing_Get
      (Client : in out Client_Type;
       Result : out .Models.V1MetricInfo_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v2/metrics/listing");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_2Metrics_Listing_Get;

   --  Historical data by exchange
   --  Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific exchange eg `BITSTAMP`
   --              
   --  :::info
   --  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.
   --  The difference between `time_end` and `time_start` cannot be higher than 1 day.
   --  The `period_id` cannot be higher than `1DAY`.
   --  :::
   procedure V_1Ohlcv_Exchanges_Exchange_Id_History_Get
      (Client : in out Client_Type;
       Exchange_Id : in Swagger.UString;
       Period_Id : in Swagger.UString;
       Time_Start : in Swagger.UString;
       Time_End : in Swagger.UString;
       Result : out .Models.ModelsExchangeTimeseriesItem_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("period_id", Period_Id);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_end", Time_End);
      URI.Set_Path ("/v1/ohlcv/exchanges/{exchange_id}/history");
      URI.Set_Path_Param ("exchange_id", Exchange_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Ohlcv_Exchanges_Exchange_Id_History_Get;

   --  List all periods
   --  Get full list of supported time periods available for requesting OHLCV timeseries data.
   --              
   --  ### Available periods
   --              
   --  Time unit | Period identifiers
   --  --------- | -----------
   --  Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC
   --  Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN
   --  Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS
   --  Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY
   --  Month | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH
   --  Year | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS
   --              
   --  :::tip
   --  You can assume that we will not remove any periods from this response, however, we may add new ones.
   --  :::
   procedure V_1Ohlcv_Periods_Get
      (Client : in out Client_Type;
       Result : out .Models.V1TimeseriesPeriod_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/ohlcv/periods");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Ohlcv_Periods_Get;

   --  Historical data
   --  Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific symbol eg `BITSTAMP_SPOT_BTC_USD`, if you need to query timeseries by asset pairs eg. `BTC/USD`, then please reffer to the Exchange Rates Timeseries data
   --              
   --  :::info
   --  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.
   --  :::
   procedure V_1Ohlcv_Symbol_Id_History_Get
      (Client : in out Client_Type;
       Symbol_Id : in Swagger.UString;
       Period_Id : in Swagger.UString;
       Time_Start : in Swagger.Nullable_UString;
       Time_End : in Swagger.Nullable_UString;
       Limit : in Swagger.Nullable_Integer;
       Result : out .Models.V1TimeseriesItem_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("period_id", Period_Id);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("limit", Limit);
      URI.Set_Path ("/v1/ohlcv/{symbol_id}/history");
      URI.Set_Path_Param ("symbol_id", Symbol_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Ohlcv_Symbol_Id_History_Get;

   --  Latest data
   --  Get OHLCV latest timeseries data returned in time descending order. Data can be requested by the period and for the specific symbol eg `BITSTAMP_SPOT_BTC_USD`, if you need to query timeseries by asset pairs eg. `BTC/USD`, then please reffer to the Exchange Rates Timeseries data
   --              
   --  :::info
   --  OHLCV Latest endpoint is just the shortcut to the OHLCV Historical endpoint with substituted `time_start` and `time_end` parameters. 
   --  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.
   --  :::
   procedure V_1Ohlcv_Symbol_Id_Latest_Get
      (Client : in out Client_Type;
       Symbol_Id : in Swagger.UString;
       Period_Id : in Swagger.UString;
       Limit : in Swagger.Nullable_Integer;
       Result : out .Models.V1TimeseriesItem_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("period_id", Period_Id);
      URI.Add_Param ("limit", Limit);
      URI.Set_Path ("/v1/ohlcv/{symbol_id}/latest");
      URI.Set_Path_Param ("symbol_id", Symbol_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Ohlcv_Symbol_Id_Latest_Get;

   --  Current data by Exchange
   --  Get current options data for a specific exchange.
   --  
   --  Returns option data grouped by underlying asset, quote currency, and expiration time,
   --  with quotes for both calls and puts at each strike price.
   procedure V_1Options_Exchange_Id_Current_Get
      (Client : in out Client_Type;
       Exchange_Id : in Swagger.UString;
       Result : out .Models.OptionsOptionExchangeGroup_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/options/{exchange_id}/current");
      URI.Set_Path_Param ("exchange_id", Exchange_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Options_Exchange_Id_Current_Get;

   --  Get current order book
   --  Retrieves the current order book for the specified symbol.
   procedure V_1Orderbooks_Symbol_Id_Current_Get
      (Client : in out Client_Type;
       Symbol_Id : in Swagger.UString;
       Limit_Levels : in Swagger.Nullable_Integer;
       Result : out .Models.V1OrderBookBase_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("limit_levels", Limit_Levels);
      URI.Set_Path ("/v1/orderbooks/{symbol_id}/current");
      URI.Set_Path_Param ("symbol_id", Symbol_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Orderbooks_Symbol_Id_Current_Get;

   --  Current depth of the order book
   --  Retrieves the current depth of the order book for the specified symbol.
   procedure V_1Orderbooks_Symbol_Id_Depth_Current_Get
      (Client : in out Client_Type;
       Symbol_Id : in Swagger.UString;
       Limit_Levels : in Swagger.Nullable_Integer;
       Result : out .Models.V1OrderBookDepth_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("limit_levels", Limit_Levels);
      URI.Set_Path ("/v1/orderbooks/{symbol_id}/depth/current");
      URI.Set_Path_Param ("symbol_id", Symbol_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Orderbooks_Symbol_Id_Depth_Current_Get;

   --  Historical data
   --  Get historical order book snapshots for a specific symbol within time range, returned in time ascending order.
   --              
   --  :::info
   --  The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels.
   --  :::
   --  
   --  :::warning
   --  The 'time_start' and 'time_end' parameters must be from the same day as this endpoint provides intraday data only for specific day.
   --  Please use the 'date' parameter instead for querying data for a specific day without filter.
   --  :::
   procedure V_1Orderbooks_Symbol_Id_History_Get
      (Client : in out Client_Type;
       Symbol_Id : in Swagger.UString;
       Date : in Swagger.Nullable_UString;
       Time_Start : in Swagger.Nullable_UString;
       Time_End : in Swagger.Nullable_UString;
       Limit : in Swagger.Nullable_Integer;
       Limit_Levels : in Swagger.Nullable_Integer;
       Result : out .Models.V1OrderBook_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("date", Date);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("limit", Limit);
      URI.Add_Param ("limit_levels", Limit_Levels);
      URI.Set_Path ("/v1/orderbooks/{symbol_id}/history");
      URI.Set_Path_Param ("symbol_id", Symbol_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Orderbooks_Symbol_Id_History_Get;

   --  Latest data
   --  Get latest order book snapshots for a specific symbol, returned in time descending order.
   --              
   --  :::info
   --  The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels.
   --  :::
   procedure V_1Orderbooks_Symbol_Id_Latest_Get
      (Client : in out Client_Type;
       Symbol_Id : in Swagger.UString;
       Limit : in Swagger.Nullable_Integer;
       Limit_Levels : in Swagger.Nullable_Integer;
       Result : out .Models.V1OrderBook_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("limit", Limit);
      URI.Add_Param ("limit_levels", Limit_Levels);
      URI.Set_Path ("/v1/orderbooks/{symbol_id}/latest");
      URI.Set_Path_Param ("symbol_id", Symbol_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Orderbooks_Symbol_Id_Latest_Get;

   --  Current order books
   procedure V_1Orderbooks_3Current_Get
      (Client : in out Client_Type;
       Filter_Symbol_Id : in Swagger.Nullable_UString;
       Limit_Levels : in Swagger.Nullable_Integer;
       Result : out .Models.V1OrderBookBase_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("filter_symbol_id", Filter_Symbol_Id);
      URI.Add_Param ("limit_levels", Limit_Levels);
      URI.Set_Path ("/v1/orderbooks3/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Orderbooks_3Current_Get;

   --  Current order book by symbol_id
   --  Retrieves the current order book for the specified symbol.
   procedure V_1Orderbooks_3Symbol_Id_Current_Get
      (Client : in out Client_Type;
       Symbol_Id : in Swagger.UString;
       Limit_Levels : in Swagger.Nullable_Integer;
       Result : out .Models.V1OrderBookBase_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("limit_levels", Limit_Levels);
      URI.Set_Path ("/v1/orderbooks3/{symbol_id}/current");
      URI.Set_Path_Param ("symbol_id", Symbol_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Orderbooks_3Symbol_Id_Current_Get;

   --  Current data
   --  Get current quotes for all symbols or for a specific symbol.
   --              
   --  :::info
   --  When requesting current data for a specific symbol, output is not encapsulated into JSON array as only one item is returned.
   --  :::
   procedure V_1Quotes_Current_Get
      (Client : in out Client_Type;
       Filter_Symbol_Id : in Swagger.Nullable_UString;
       Result : out .Models.V1QuoteTrade_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("filter_symbol_id", Filter_Symbol_Id);
      URI.Set_Path ("/v1/quotes/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Quotes_Current_Get;

   --  Latest data
   --  Get latest updates of the quotes up to 1 minute ago. Latest data is always returned in time descending order.
   procedure V_1Quotes_Latest_Get
      (Client : in out Client_Type;
       Filter_Symbol_Id : in Swagger.Nullable_UString;
       Limit : in Swagger.Nullable_Integer;
       Result : out .Models.V1Quote_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("filter_symbol_id", Filter_Symbol_Id);
      URI.Add_Param ("limit", Limit);
      URI.Set_Path ("/v1/quotes/latest");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Quotes_Latest_Get;

   --  Current quotes for a specific symbol
   procedure V_1Quotes_Symbol_Id_Current_Get
      (Client : in out Client_Type;
       Symbol_Id : in Swagger.UString;
       Result : out .Models.V1QuoteTrade_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/quotes/{symbol_id}/current");
      URI.Set_Path_Param ("symbol_id", Symbol_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Quotes_Symbol_Id_Current_Get;

   --  Historical data
   --  Get historical quote updates within requested time range, returned in time ascending order.
   --  
   --  :::warning
   --  The 'time_start' and 'time_end' parameters must be from the same day as this endpoint provides intraday data only for specific day.
   --  Please use the 'date' parameter instead for querying data for a specific day without filter.
   --  :::
   procedure V_1Quotes_Symbol_Id_History_Get
      (Client : in out Client_Type;
       Symbol_Id : in Swagger.UString;
       Date : in Swagger.Nullable_UString;
       Time_Start : in Swagger.Nullable_UString;
       Time_End : in Swagger.Nullable_UString;
       Limit : in Swagger.Nullable_Integer;
       Result : out .Models.V1Quote_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("date", Date);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("limit", Limit);
      URI.Set_Path ("/v1/quotes/{symbol_id}/history");
      URI.Set_Path_Param ("symbol_id", Symbol_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Quotes_Symbol_Id_History_Get;

   --  Latest quote updates for a specific symbol
   procedure V_1Quotes_Symbol_Id_Latest_Get
      (Client : in out Client_Type;
       Symbol_Id : in Swagger.UString;
       Limit : in Swagger.Nullable_Integer;
       Result : out .Models.V1Quote_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("limit", Limit);
      URI.Set_Path ("/v1/quotes/{symbol_id}/latest");
      URI.Set_Path_Param ("symbol_id", Symbol_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Quotes_Symbol_Id_Latest_Get;

   --  Latest data
   --  Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.
   procedure V_1Trades_Latest_Get
      (Client : in out Client_Type;
       Filter_Symbol_Id : in Swagger.Nullable_UString;
       Include_Id : in Swagger.Nullable_Boolean;
       Limit : in Swagger.Nullable_Integer;
       Result : out .Models.V1Trade_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("filter_symbol_id", Filter_Symbol_Id);
      URI.Add_Param ("include_id", Include_Id);
      URI.Add_Param ("limit", Limit);
      URI.Set_Path ("/v1/trades/latest");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Trades_Latest_Get;

   --  Historical data
   --  Get history transactions from specific symbol, returned in time ascending order.
   --  
   --  :::warning
   --  The 'time_start' and 'time_end' parameters must be from the same day as this endpoint provides intraday data only for specific day.
   --  Please use the 'date' parameter instead for querying data for a specific day without filter.
   --  :::
   procedure V_1Trades_Symbol_Id_History_Get
      (Client : in out Client_Type;
       Symbol_Id : in Swagger.UString;
       Date : in Swagger.Nullable_UString;
       Time_Start : in Swagger.Nullable_UString;
       Time_End : in Swagger.Nullable_UString;
       Limit : in Swagger.Nullable_Integer;
       Include_Id : in Swagger.Nullable_Boolean;
       Result : out .Models.V1Trade_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("date", Date);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("limit", Limit);
      URI.Add_Param ("include_id", Include_Id);
      URI.Set_Path ("/v1/trades/{symbol_id}/history");
      URI.Set_Path_Param ("symbol_id", Symbol_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Trades_Symbol_Id_History_Get;

   --  Latest data by symbol_id
   --  Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.
   procedure V_1Trades_Symbol_Id_Latest_Get
      (Client : in out Client_Type;
       Symbol_Id : in Swagger.UString;
       Limit : in Swagger.Nullable_Integer;
       Include_Id : in Swagger.Nullable_Boolean;
       Result : out .Models.V1Trade_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("limit", Limit);
      URI.Add_Param ("include_id", Include_Id);
      URI.Set_Path ("/v1/trades/{symbol_id}/latest");
      URI.Set_Path_Param ("symbol_id", Symbol_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Trades_Symbol_Id_Latest_Get;
end .Clients;
