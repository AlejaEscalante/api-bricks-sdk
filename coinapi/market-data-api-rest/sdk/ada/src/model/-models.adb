--  CoinAPI Market Data REST API
--  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
--
--  The version of the OpenAPI document: v1
--  Contact: support@apibricks.io
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.15.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

package body .Models is
   pragma Style_Checks ("-bmrIu");

   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelsExchangeTimeseriesItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Time_Period_Start.Is_Null then
         Into.Write_Entity ("time_period_start", Value.Time_Period_Start);
      end if;
      if not Value.Time_Period_End.Is_Null then
         Into.Write_Entity ("time_period_end", Value.Time_Period_End);
      end if;
      Into.Write_Entity ("time_open", Value.Time_Open);
      Into.Write_Entity ("time_close", Value.Time_Close);
      Serialize (Into, "price_open", Value.Price_Open);
      Serialize (Into, "price_high", Value.Price_High);
      Serialize (Into, "price_low", Value.Price_Low);
      Serialize (Into, "price_close", Value.Price_Close);
      Serialize (Into, "volume_traded", Value.Volume_Traded);
      if not Value.Trades_Count.Is_Null then
         Into.Write_Entity ("trades_count", Value.Trades_Count);
      end if;
      Into.Write_Entity ("symbol_id_exchange", Value.Symbol_Id_Exchange);
      Into.Write_Entity ("symbol_id_coinapi", Value.Symbol_Id_Coinapi);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelsExchangeTimeseriesItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelsExchangeTimeseriesItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "time_period_start", Value.Time_Period_Start);
      Swagger.Streams.Deserialize (Object, "time_period_end", Value.Time_Period_End);
      Swagger.Streams.Deserialize (Object, "time_open", Value.Time_Open);
      Swagger.Streams.Deserialize (Object, "time_close", Value.Time_Close);
      Swagger.Streams.Deserialize (Object, "price_open", Value.Price_Open);
      Swagger.Streams.Deserialize (Object, "price_high", Value.Price_High);
      Swagger.Streams.Deserialize (Object, "price_low", Value.Price_Low);
      Swagger.Streams.Deserialize (Object, "price_close", Value.Price_Close);
      Swagger.Streams.Deserialize (Object, "volume_traded", Value.Volume_Traded);
      Swagger.Streams.Deserialize (Object, "trades_count", Value.Trades_Count);
      Swagger.Streams.Deserialize (Object, "symbol_id_exchange", Value.Symbol_Id_Exchange);
      Swagger.Streams.Deserialize (Object, "symbol_id_coinapi", Value.Symbol_Id_Coinapi);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelsExchangeTimeseriesItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelsExchangeTimeseriesItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1ChainNetworkAddress_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("chain_id", Value.Chain_Id);
      Into.Write_Entity ("network_id", Value.Network_Id);
      Into.Write_Entity ("address", Value.Address);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1ChainNetworkAddress_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1ChainNetworkAddress_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "chain_id", Value.Chain_Id);
      Swagger.Streams.Deserialize (Object, "network_id", Value.Network_Id);
      Swagger.Streams.Deserialize (Object, "address", Value.Address);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1ChainNetworkAddress_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1ChainNetworkAddress_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1Chain_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("chain_id", Value.Chain_Id);
      Into.Write_Entity ("name", Value.Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1Chain_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1Chain_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "chain_id", Value.Chain_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1Chain_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1Chain_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1ExchangeRate_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Time.Is_Null then
         Into.Write_Entity ("time", Value.Time);
      end if;
      Into.Write_Entity ("asset_id_base", Value.Asset_Id_Base);
      Into.Write_Entity ("asset_id_quote", Value.Asset_Id_Quote);
      Serialize (Into, "rate", Value.Rate);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1ExchangeRate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1ExchangeRate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "time", Value.Time);
      Swagger.Streams.Deserialize (Object, "asset_id_base", Value.Asset_Id_Base);
      Swagger.Streams.Deserialize (Object, "asset_id_quote", Value.Asset_Id_Quote);
      Swagger.Streams.Deserialize (Object, "rate", Value.Rate);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1ExchangeRate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1ExchangeRate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1ExchangeRatesRate_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Time.Is_Null then
         Into.Write_Entity ("time", Value.Time);
      end if;
      Into.Write_Entity ("asset_id_quote", Value.Asset_Id_Quote);
      Serialize (Into, "rate", Value.Rate);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1ExchangeRatesRate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1ExchangeRatesRate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "time", Value.Time);
      Swagger.Streams.Deserialize (Object, "asset_id_quote", Value.Asset_Id_Quote);
      Swagger.Streams.Deserialize (Object, "rate", Value.Rate);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1ExchangeRatesRate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1ExchangeRatesRate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1ExchangeRatesTimeseriesItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Time_Period_Start.Is_Null then
         Into.Write_Entity ("time_period_start", Value.Time_Period_Start);
      end if;
      if not Value.Time_Period_End.Is_Null then
         Into.Write_Entity ("time_period_end", Value.Time_Period_End);
      end if;
      Into.Write_Entity ("time_open", Value.Time_Open);
      Into.Write_Entity ("time_close", Value.Time_Close);
      Serialize (Into, "rate_open", Value.Rate_Open);
      Serialize (Into, "rate_high", Value.Rate_High);
      Serialize (Into, "rate_low", Value.Rate_Low);
      Serialize (Into, "rate_close", Value.Rate_Close);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1ExchangeRatesTimeseriesItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1ExchangeRatesTimeseriesItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "time_period_start", Value.Time_Period_Start);
      Swagger.Streams.Deserialize (Object, "time_period_end", Value.Time_Period_End);
      Swagger.Streams.Deserialize (Object, "time_open", Value.Time_Open);
      Swagger.Streams.Deserialize (Object, "time_close", Value.Time_Close);
      Swagger.Streams.Deserialize (Object, "rate_open", Value.Rate_Open);
      Swagger.Streams.Deserialize (Object, "rate_high", Value.Rate_High);
      Swagger.Streams.Deserialize (Object, "rate_low", Value.Rate_Low);
      Swagger.Streams.Deserialize (Object, "rate_close", Value.Rate_Close);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1ExchangeRatesTimeseriesItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1ExchangeRatesTimeseriesItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1GeneralData_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Entry_Time.Is_Null then
         Into.Write_Entity ("entry_time", Value.Entry_Time);
      end if;
      if not Value.Recv_Time.Is_Null then
         Into.Write_Entity ("recv_time", Value.Recv_Time);
      end if;
      Into.Write_Entity ("exchange_id", Value.Exchange_Id);
      Into.Write_Entity ("asset_id", Value.Asset_Id);
      Into.Write_Entity ("symbol_id", Value.Symbol_Id);
      Into.Write_Entity ("metric_id", Value.Metric_Id);
      Serialize (Into, "value_decimal", Value.Value_Decimal);
      Into.Write_Entity ("value_text", Value.Value_Text);
      Into.Write_Entity ("value_time", Value.Value_Time);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1GeneralData_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1GeneralData_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "exchange_id", Value.Exchange_Id);
      Swagger.Streams.Deserialize (Object, "asset_id", Value.Asset_Id);
      Swagger.Streams.Deserialize (Object, "symbol_id", Value.Symbol_Id);
      Swagger.Streams.Deserialize (Object, "metric_id", Value.Metric_Id);
      Swagger.Streams.Deserialize (Object, "value_decimal", Value.Value_Decimal);
      Swagger.Streams.Deserialize (Object, "value_text", Value.Value_Text);
      Swagger.Streams.Deserialize (Object, "value_time", Value.Value_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1GeneralData_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1GeneralData_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1Icon_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("exchange_id", Value.Exchange_Id);
      Into.Write_Entity ("asset_id", Value.Asset_Id);
      Into.Write_Entity ("url", Value.Url);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1Icon_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1Icon_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "exchange_id", Value.Exchange_Id);
      Swagger.Streams.Deserialize (Object, "asset_id", Value.Asset_Id);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1Icon_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1Icon_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1LastTrade_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Time_Exchange.Is_Null then
         Into.Write_Entity ("time_exchange", Value.Time_Exchange);
      end if;
      if not Value.Time_Coinapi.Is_Null then
         Into.Write_Entity ("time_coinapi", Value.Time_Coinapi);
      end if;
      if not Value.Uuid.Is_Null then
         Into.Write_Entity ("uuid", Value.Uuid);
      end if;
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "size", Value.Size);
      Into.Write_Entity ("taker_side", Value.Taker_Side);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1LastTrade_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1LastTrade_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "time_exchange", Value.Time_Exchange);
      Swagger.Streams.Deserialize (Object, "time_coinapi", Value.Time_Coinapi);
      Swagger.Streams.Deserialize (Object, "uuid", Value.Uuid);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "taker_side", Value.Taker_Side);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1LastTrade_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1LastTrade_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1ListingItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("metric_id", Value.Metric_Id);
      Into.Write_Entity ("symbol_id", Value.Symbol_Id);
      Into.Write_Entity ("symbol_id_external", Value.Symbol_Id_External);
      Into.Write_Entity ("exchange_id", Value.Exchange_Id);
      Into.Write_Entity ("asset_id", Value.Asset_Id);
      Into.Write_Entity ("asset_id_external", Value.Asset_Id_External);
      Into.Write_Entity ("chain_id", Value.Chain_Id);
      Into.Write_Entity ("network_id", Value.Network_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1ListingItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1ListingItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "metric_id", Value.Metric_Id);
      Swagger.Streams.Deserialize (Object, "symbol_id", Value.Symbol_Id);
      Swagger.Streams.Deserialize (Object, "symbol_id_external", Value.Symbol_Id_External);
      Swagger.Streams.Deserialize (Object, "exchange_id", Value.Exchange_Id);
      Swagger.Streams.Deserialize (Object, "asset_id", Value.Asset_Id);
      Swagger.Streams.Deserialize (Object, "asset_id_external", Value.Asset_Id_External);
      Swagger.Streams.Deserialize (Object, "chain_id", Value.Chain_Id);
      Swagger.Streams.Deserialize (Object, "network_id", Value.Network_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1ListingItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1ListingItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1MetricData_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol_id", Value.Symbol_Id);
      if not Value.Time.Is_Null then
         Into.Write_Entity ("time", Value.Time);
      end if;
      Serialize (Into, "value", Value.Value);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1MetricData_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1MetricData_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol_id", Value.Symbol_Id);
      Swagger.Streams.Deserialize (Object, "time", Value.Time);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1MetricData_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1MetricData_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1MetricInfo_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("metric_id", Value.Metric_Id);
      Into.Write_Entity ("description", Value.Description);
      Into.Write_Entity ("source_id", Value.Source_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1MetricInfo_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1MetricInfo_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "metric_id", Value.Metric_Id);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "source_id", Value.Source_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1MetricInfo_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1MetricInfo_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1Metric_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("metric_id", Value.Metric_Id);
      Into.Write_Entity ("description", Value.Description);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1Metric_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1Metric_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "metric_id", Value.Metric_Id);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1Metric_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1Metric_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1OrderBookDepth_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol_id", Value.Symbol_Id);
      if not Value.Time_Exchange.Is_Null then
         Into.Write_Entity ("time_exchange", Value.Time_Exchange);
      end if;
      if not Value.Time_Coinapi.Is_Null then
         Into.Write_Entity ("time_coinapi", Value.Time_Coinapi);
      end if;
      if not Value.Ask_Levels.Is_Null then
         Into.Write_Entity ("ask_levels", Value.Ask_Levels);
      end if;
      if not Value.Bid_Levels.Is_Null then
         Into.Write_Entity ("bid_levels", Value.Bid_Levels);
      end if;
      Serialize (Into, "ask_depth", Value.Ask_Depth);
      Serialize (Into, "bid_depth", Value.Bid_Depth);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1OrderBookDepth_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1OrderBookDepth_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol_id", Value.Symbol_Id);
      Swagger.Streams.Deserialize (Object, "time_exchange", Value.Time_Exchange);
      Swagger.Streams.Deserialize (Object, "time_coinapi", Value.Time_Coinapi);
      Swagger.Streams.Deserialize (Object, "ask_levels", Value.Ask_Levels);
      Swagger.Streams.Deserialize (Object, "bid_levels", Value.Bid_Levels);
      Swagger.Streams.Deserialize (Object, "ask_depth", Value.Ask_Depth);
      Swagger.Streams.Deserialize (Object, "bid_depth", Value.Bid_Depth);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1OrderBookDepth_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1OrderBookDepth_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1Quote_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol_id", Value.Symbol_Id);
      if not Value.Time_Exchange.Is_Null then
         Into.Write_Entity ("time_exchange", Value.Time_Exchange);
      end if;
      if not Value.Time_Coinapi.Is_Null then
         Into.Write_Entity ("time_coinapi", Value.Time_Coinapi);
      end if;
      Serialize (Into, "ask_price", Value.Ask_Price);
      Serialize (Into, "ask_size", Value.Ask_Size);
      Serialize (Into, "bid_price", Value.Bid_Price);
      Serialize (Into, "bid_size", Value.Bid_Size);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1Quote_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1Quote_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol_id", Value.Symbol_Id);
      Swagger.Streams.Deserialize (Object, "time_exchange", Value.Time_Exchange);
      Swagger.Streams.Deserialize (Object, "time_coinapi", Value.Time_Coinapi);
      Swagger.Streams.Deserialize (Object, "ask_price", Value.Ask_Price);
      Swagger.Streams.Deserialize (Object, "ask_size", Value.Ask_Size);
      Swagger.Streams.Deserialize (Object, "bid_price", Value.Bid_Price);
      Swagger.Streams.Deserialize (Object, "bid_size", Value.Bid_Size);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1Quote_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1Quote_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1SymbolMapping_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol_id", Value.Symbol_Id);
      Into.Write_Entity ("symbol_id_exchange", Value.Symbol_Id_Exchange);
      if not Value.Coinapi_Datainfo_Id.Is_Null then
         Into.Write_Entity ("coinapi_datainfo_id", Value.Coinapi_Datainfo_Id);
      end if;
      Into.Write_Entity ("asset_id_base_exchange", Value.Asset_Id_Base_Exchange);
      Into.Write_Entity ("asset_id_quote_exchange", Value.Asset_Id_Quote_Exchange);
      Into.Write_Entity ("asset_id_base", Value.Asset_Id_Base);
      Into.Write_Entity ("asset_id_quote", Value.Asset_Id_Quote);
      Serialize (Into, "price_precision", Value.Price_Precision);
      Serialize (Into, "size_precision", Value.Size_Precision);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1SymbolMapping_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1SymbolMapping_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol_id", Value.Symbol_Id);
      Swagger.Streams.Deserialize (Object, "symbol_id_exchange", Value.Symbol_Id_Exchange);
      Swagger.Streams.Deserialize (Object, "coinapi_datainfo_id", Value.Coinapi_Datainfo_Id);
      Swagger.Streams.Deserialize (Object, "asset_id_base_exchange", Value.Asset_Id_Base_Exchange);
      Swagger.Streams.Deserialize (Object, "asset_id_quote_exchange", Value.Asset_Id_Quote_Exchange);
      Swagger.Streams.Deserialize (Object, "asset_id_base", Value.Asset_Id_Base);
      Swagger.Streams.Deserialize (Object, "asset_id_quote", Value.Asset_Id_Quote);
      Swagger.Streams.Deserialize (Object, "price_precision", Value.Price_Precision);
      Swagger.Streams.Deserialize (Object, "size_precision", Value.Size_Precision);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1SymbolMapping_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1SymbolMapping_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1Symbol_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol_id", Value.Symbol_Id);
      Into.Write_Entity ("exchange_id", Value.Exchange_Id);
      Into.Write_Entity ("symbol_type", Value.Symbol_Type);
      Into.Write_Entity ("asset_id_base", Value.Asset_Id_Base);
      Into.Write_Entity ("asset_id_quote", Value.Asset_Id_Quote);
      Into.Write_Entity ("asset_id_unit", Value.Asset_Id_Unit);
      Serialize (Into, "future_contract_unit", Value.Future_Contract_Unit);
      Into.Write_Entity ("future_contract_unit_asset", Value.Future_Contract_Unit_Asset);
      Into.Write_Entity ("future_delivery_time", Value.Future_Delivery_Time);
      Into.Write_Entity ("option_type_is_call", Value.Option_Type_Is_Call);
      Serialize (Into, "option_strike_price", Value.Option_Strike_Price);
      Serialize (Into, "option_contract_unit", Value.Option_Contract_Unit);
      Into.Write_Entity ("option_exercise_style", Value.Option_Exercise_Style);
      Into.Write_Entity ("option_expiration_time", Value.Option_Expiration_Time);
      Into.Write_Entity ("contract_delivery_time", Value.Contract_Delivery_Time);
      Serialize (Into, "contract_unit", Value.Contract_Unit);
      Into.Write_Entity ("contract_unit_asset", Value.Contract_Unit_Asset);
      Into.Write_Entity ("contract_id", Value.Contract_Id);
      Into.Write_Entity ("contract_display_name", Value.Contract_Display_Name);
      Into.Write_Entity ("contract_display_description", Value.Contract_Display_Description);
      Into.Write_Entity ("data_start", Value.Data_Start);
      Into.Write_Entity ("data_end", Value.Data_End);
      Into.Write_Entity ("data_quote_start", Value.Data_Quote_Start);
      Into.Write_Entity ("data_quote_end", Value.Data_Quote_End);
      Into.Write_Entity ("data_orderbook_start", Value.Data_Orderbook_Start);
      Into.Write_Entity ("data_orderbook_end", Value.Data_Orderbook_End);
      Into.Write_Entity ("data_trade_start", Value.Data_Trade_Start);
      Into.Write_Entity ("data_trade_end", Value.Data_Trade_End);
      Into.Write_Entity ("index_id", Value.Index_Id);
      Into.Write_Entity ("index_display_name", Value.Index_Display_Name);
      Into.Write_Entity ("index_display_description", Value.Index_Display_Description);
      Serialize (Into, "volume_1hrs", Value.Volume_1hrs);
      Serialize (Into, "volume_1hrs_usd", Value.Volume_1hrs_Usd);
      Serialize (Into, "volume_1day", Value.Volume_1day);
      Serialize (Into, "volume_1day_usd", Value.Volume_1day_Usd);
      Serialize (Into, "volume_1mth", Value.Volume_1mth);
      Serialize (Into, "volume_1mth_usd", Value.Volume_1mth_Usd);
      Serialize (Into, "price", Value.Price);
      Into.Write_Entity ("symbol_id_exchange", Value.Symbol_Id_Exchange);
      Into.Write_Entity ("asset_id_base_exchange", Value.Asset_Id_Base_Exchange);
      Into.Write_Entity ("asset_id_quote_exchange", Value.Asset_Id_Quote_Exchange);
      Serialize (Into, "price_precision", Value.Price_Precision);
      Serialize (Into, "size_precision", Value.Size_Precision);
      Serialize (Into, "raw_kvp", Value.Raw_Kvp);
      Serialize (Into, "volume_to_usd", Value.Volume_To_Usd);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1Symbol_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1Symbol_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol_id", Value.Symbol_Id);
      Swagger.Streams.Deserialize (Object, "exchange_id", Value.Exchange_Id);
      Swagger.Streams.Deserialize (Object, "symbol_type", Value.Symbol_Type);
      Swagger.Streams.Deserialize (Object, "asset_id_base", Value.Asset_Id_Base);
      Swagger.Streams.Deserialize (Object, "asset_id_quote", Value.Asset_Id_Quote);
      Swagger.Streams.Deserialize (Object, "asset_id_unit", Value.Asset_Id_Unit);
      Swagger.Streams.Deserialize (Object, "future_contract_unit", Value.Future_Contract_Unit);
      Swagger.Streams.Deserialize (Object, "future_contract_unit_asset", Value.Future_Contract_Unit_Asset);
      Swagger.Streams.Deserialize (Object, "future_delivery_time", Value.Future_Delivery_Time);
      Swagger.Streams.Deserialize (Object, "option_type_is_call", Value.Option_Type_Is_Call);
      Swagger.Streams.Deserialize (Object, "option_strike_price", Value.Option_Strike_Price);
      Swagger.Streams.Deserialize (Object, "option_contract_unit", Value.Option_Contract_Unit);
      Swagger.Streams.Deserialize (Object, "option_exercise_style", Value.Option_Exercise_Style);
      Swagger.Streams.Deserialize (Object, "option_expiration_time", Value.Option_Expiration_Time);
      Swagger.Streams.Deserialize (Object, "contract_delivery_time", Value.Contract_Delivery_Time);
      Swagger.Streams.Deserialize (Object, "contract_unit", Value.Contract_Unit);
      Swagger.Streams.Deserialize (Object, "contract_unit_asset", Value.Contract_Unit_Asset);
      Swagger.Streams.Deserialize (Object, "contract_id", Value.Contract_Id);
      Swagger.Streams.Deserialize (Object, "contract_display_name", Value.Contract_Display_Name);
      Swagger.Streams.Deserialize (Object, "contract_display_description", Value.Contract_Display_Description);
      Swagger.Streams.Deserialize (Object, "data_start", Value.Data_Start);
      Swagger.Streams.Deserialize (Object, "data_end", Value.Data_End);
      Swagger.Streams.Deserialize (Object, "data_quote_start", Value.Data_Quote_Start);
      Swagger.Streams.Deserialize (Object, "data_quote_end", Value.Data_Quote_End);
      Swagger.Streams.Deserialize (Object, "data_orderbook_start", Value.Data_Orderbook_Start);
      Swagger.Streams.Deserialize (Object, "data_orderbook_end", Value.Data_Orderbook_End);
      Swagger.Streams.Deserialize (Object, "data_trade_start", Value.Data_Trade_Start);
      Swagger.Streams.Deserialize (Object, "data_trade_end", Value.Data_Trade_End);
      Swagger.Streams.Deserialize (Object, "index_id", Value.Index_Id);
      Swagger.Streams.Deserialize (Object, "index_display_name", Value.Index_Display_Name);
      Swagger.Streams.Deserialize (Object, "index_display_description", Value.Index_Display_Description);
      Swagger.Streams.Deserialize (Object, "volume_1hrs", Value.Volume_1hrs);
      Swagger.Streams.Deserialize (Object, "volume_1hrs_usd", Value.Volume_1hrs_Usd);
      Swagger.Streams.Deserialize (Object, "volume_1day", Value.Volume_1day);
      Swagger.Streams.Deserialize (Object, "volume_1day_usd", Value.Volume_1day_Usd);
      Swagger.Streams.Deserialize (Object, "volume_1mth", Value.Volume_1mth);
      Swagger.Streams.Deserialize (Object, "volume_1mth_usd", Value.Volume_1mth_Usd);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "symbol_id_exchange", Value.Symbol_Id_Exchange);
      Swagger.Streams.Deserialize (Object, "asset_id_base_exchange", Value.Asset_Id_Base_Exchange);
      Swagger.Streams.Deserialize (Object, "asset_id_quote_exchange", Value.Asset_Id_Quote_Exchange);
      Swagger.Streams.Deserialize (Object, "price_precision", Value.Price_Precision);
      Swagger.Streams.Deserialize (Object, "size_precision", Value.Size_Precision);
      Swagger.Streams.Deserialize (Object, "raw_kvp", Value.Raw_Kvp);
      Swagger.Streams.Deserialize (Object, "volume_to_usd", Value.Volume_To_Usd);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1Symbol_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1Symbol_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1TimeseriesItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Time_Period_Start.Is_Null then
         Into.Write_Entity ("time_period_start", Value.Time_Period_Start);
      end if;
      if not Value.Time_Period_End.Is_Null then
         Into.Write_Entity ("time_period_end", Value.Time_Period_End);
      end if;
      Into.Write_Entity ("time_open", Value.Time_Open);
      Into.Write_Entity ("time_close", Value.Time_Close);
      Serialize (Into, "price_open", Value.Price_Open);
      Serialize (Into, "price_high", Value.Price_High);
      Serialize (Into, "price_low", Value.Price_Low);
      Serialize (Into, "price_close", Value.Price_Close);
      Serialize (Into, "volume_traded", Value.Volume_Traded);
      if not Value.Trades_Count.Is_Null then
         Into.Write_Entity ("trades_count", Value.Trades_Count);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1TimeseriesItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1TimeseriesItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "time_period_start", Value.Time_Period_Start);
      Swagger.Streams.Deserialize (Object, "time_period_end", Value.Time_Period_End);
      Swagger.Streams.Deserialize (Object, "time_open", Value.Time_Open);
      Swagger.Streams.Deserialize (Object, "time_close", Value.Time_Close);
      Swagger.Streams.Deserialize (Object, "price_open", Value.Price_Open);
      Swagger.Streams.Deserialize (Object, "price_high", Value.Price_High);
      Swagger.Streams.Deserialize (Object, "price_low", Value.Price_Low);
      Swagger.Streams.Deserialize (Object, "price_close", Value.Price_Close);
      Swagger.Streams.Deserialize (Object, "volume_traded", Value.Volume_Traded);
      Swagger.Streams.Deserialize (Object, "trades_count", Value.Trades_Count);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1TimeseriesItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1TimeseriesItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1TimeseriesPeriod_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("period_id", Value.Period_Id);
      if not Value.Length_Seconds.Is_Null then
         Into.Write_Entity ("length_seconds", Value.Length_Seconds);
      end if;
      if not Value.Length_Months.Is_Null then
         Into.Write_Entity ("length_months", Value.Length_Months);
      end if;
      Into.Write_Entity ("unit_count", Value.Unit_Count);
      Into.Write_Entity ("unit_name", Value.Unit_Name);
      Into.Write_Entity ("display_name", Value.Display_Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1TimeseriesPeriod_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1TimeseriesPeriod_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "period_id", Value.Period_Id);
      Swagger.Streams.Deserialize (Object, "length_seconds", Value.Length_Seconds);
      Swagger.Streams.Deserialize (Object, "length_months", Value.Length_Months);
      Swagger.Streams.Deserialize (Object, "unit_count", Value.Unit_Count);
      Swagger.Streams.Deserialize (Object, "unit_name", Value.Unit_Name);
      Swagger.Streams.Deserialize (Object, "display_name", Value.Display_Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1TimeseriesPeriod_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1TimeseriesPeriod_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1Trade_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol_id", Value.Symbol_Id);
      if not Value.Time_Exchange.Is_Null then
         Into.Write_Entity ("time_exchange", Value.Time_Exchange);
      end if;
      if not Value.Time_Coinapi.Is_Null then
         Into.Write_Entity ("time_coinapi", Value.Time_Coinapi);
      end if;
      if not Value.Uuid.Is_Null then
         Into.Write_Entity ("uuid", Value.Uuid);
      end if;
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "size", Value.Size);
      Into.Write_Entity ("taker_side", Value.Taker_Side);
      Into.Write_Entity ("id_trade", Value.Id_Trade);
      Into.Write_Entity ("id_order_maker", Value.Id_Order_Maker);
      Into.Write_Entity ("id_order_taker", Value.Id_Order_Taker);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1Trade_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1Trade_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol_id", Value.Symbol_Id);
      Swagger.Streams.Deserialize (Object, "time_exchange", Value.Time_Exchange);
      Swagger.Streams.Deserialize (Object, "time_coinapi", Value.Time_Coinapi);
      Swagger.Streams.Deserialize (Object, "uuid", Value.Uuid);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "taker_side", Value.Taker_Side);
      Swagger.Streams.Deserialize (Object, "id_trade", Value.Id_Trade);
      Swagger.Streams.Deserialize (Object, "id_order_maker", Value.Id_Order_Maker);
      Swagger.Streams.Deserialize (Object, "id_order_taker", Value.Id_Order_Taker);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1Trade_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1Trade_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OptionsStrike_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "strike_price", Value.Strike_Price);
      Serialize (Into, "call", Value.Call);
      Serialize (Into, "put", Value.Put);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OptionsStrike_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OptionsStrike_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "strike_price", Value.Strike_Price);
      Deserialize (Object, "call", Value.Call);
      Deserialize (Object, "put", Value.Put);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OptionsStrike_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OptionsStrike_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OptionsOptionExchangeGroup_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("asset_id_base", Value.Asset_Id_Base);
      Into.Write_Entity ("asset_id_quote", Value.Asset_Id_Quote);
      Serialize (Into, "underlying_price", Value.Underlying_Price);
      if not Value.Time_Expiration.Is_Null then
         Into.Write_Entity ("time_expiration", Value.Time_Expiration);
      end if;
      Serialize (Into, "strikes", Value.Strikes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OptionsOptionExchangeGroup_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OptionsOptionExchangeGroup_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "asset_id_base", Value.Asset_Id_Base);
      Swagger.Streams.Deserialize (Object, "asset_id_quote", Value.Asset_Id_Quote);
      Swagger.Streams.Deserialize (Object, "underlying_price", Value.Underlying_Price);
      Swagger.Streams.Deserialize (Object, "time_expiration", Value.Time_Expiration);
      Deserialize (Object, "strikes", Value.Strikes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OptionsOptionExchangeGroup_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OptionsOptionExchangeGroup_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1Asset_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("asset_id", Value.Asset_Id);
      Into.Write_Entity ("name", Value.Name);
      if not Value.Type_Is_Crypto.Is_Null then
         Into.Write_Entity ("type_is_crypto", Value.Type_Is_Crypto);
      end if;
      Into.Write_Entity ("data_quote_start", Value.Data_Quote_Start);
      Into.Write_Entity ("data_quote_end", Value.Data_Quote_End);
      Into.Write_Entity ("data_orderbook_start", Value.Data_Orderbook_Start);
      Into.Write_Entity ("data_orderbook_end", Value.Data_Orderbook_End);
      Into.Write_Entity ("data_trade_start", Value.Data_Trade_Start);
      Into.Write_Entity ("data_trade_end", Value.Data_Trade_End);
      Into.Write_Entity ("data_symbols_count", Value.Data_Symbols_Count);
      Serialize (Into, "volume_1hrs_usd", Value.Volume_1hrs_Usd);
      Serialize (Into, "volume_1day_usd", Value.Volume_1day_Usd);
      Serialize (Into, "volume_1mth_usd", Value.Volume_1mth_Usd);
      Serialize (Into, "price_usd", Value.Price_Usd);
      Into.Write_Entity ("id_icon", Value.Id_Icon);
      Serialize (Into, "supply_current", Value.Supply_Current);
      Serialize (Into, "supply_total", Value.Supply_Total);
      Serialize (Into, "supply_max", Value.Supply_Max);
      Serialize (Into, "chain_addresses", Value.Chain_Addresses);
      Into.Write_Entity ("data_start", Value.Data_Start);
      Into.Write_Entity ("data_end", Value.Data_End);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1Asset_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1Asset_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "asset_id", Value.Asset_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "type_is_crypto", Value.Type_Is_Crypto);
      Swagger.Streams.Deserialize (Object, "data_quote_start", Value.Data_Quote_Start);
      Swagger.Streams.Deserialize (Object, "data_quote_end", Value.Data_Quote_End);
      Swagger.Streams.Deserialize (Object, "data_orderbook_start", Value.Data_Orderbook_Start);
      Swagger.Streams.Deserialize (Object, "data_orderbook_end", Value.Data_Orderbook_End);
      Swagger.Streams.Deserialize (Object, "data_trade_start", Value.Data_Trade_Start);
      Swagger.Streams.Deserialize (Object, "data_trade_end", Value.Data_Trade_End);
      Swagger.Streams.Deserialize (Object, "data_symbols_count", Value.Data_Symbols_Count);
      Swagger.Streams.Deserialize (Object, "volume_1hrs_usd", Value.Volume_1hrs_Usd);
      Swagger.Streams.Deserialize (Object, "volume_1day_usd", Value.Volume_1day_Usd);
      Swagger.Streams.Deserialize (Object, "volume_1mth_usd", Value.Volume_1mth_Usd);
      Swagger.Streams.Deserialize (Object, "price_usd", Value.Price_Usd);
      Swagger.Streams.Deserialize (Object, "id_icon", Value.Id_Icon);
      Swagger.Streams.Deserialize (Object, "supply_current", Value.Supply_Current);
      Swagger.Streams.Deserialize (Object, "supply_total", Value.Supply_Total);
      Swagger.Streams.Deserialize (Object, "supply_max", Value.Supply_Max);
      Deserialize (Object, "chain_addresses", Value.Chain_Addresses);
      Swagger.Streams.Deserialize (Object, "data_start", Value.Data_Start);
      Swagger.Streams.Deserialize (Object, "data_end", Value.Data_End);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1Asset_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1Asset_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1ExchangeRates_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("asset_id_base", Value.Asset_Id_Base);
      Serialize (Into, "rates", Value.Rates);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1ExchangeRates_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1ExchangeRates_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "asset_id_base", Value.Asset_Id_Base);
      Deserialize (Object, "rates", Value.Rates);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1ExchangeRates_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1ExchangeRates_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1Exchange_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("exchange_id", Value.Exchange_Id);
      Into.Write_Entity ("website", Value.Website);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("data_start", Value.Data_Start);
      Into.Write_Entity ("data_end", Value.Data_End);
      Into.Write_Entity ("data_quote_start", Value.Data_Quote_Start);
      Into.Write_Entity ("data_quote_end", Value.Data_Quote_End);
      Into.Write_Entity ("data_orderbook_start", Value.Data_Orderbook_Start);
      Into.Write_Entity ("data_orderbook_end", Value.Data_Orderbook_End);
      Into.Write_Entity ("data_trade_start", Value.Data_Trade_Start);
      Into.Write_Entity ("data_trade_end", Value.Data_Trade_End);
      Into.Write_Entity ("data_trade_count", Value.Data_Trade_Count);
      Into.Write_Entity ("data_symbols_count", Value.Data_Symbols_Count);
      Serialize (Into, "volume_1hrs_usd", Value.Volume_1hrs_Usd);
      Serialize (Into, "volume_1day_usd", Value.Volume_1day_Usd);
      Serialize (Into, "volume_1mth_usd", Value.Volume_1mth_Usd);
      Serialize (Into, "metric_id", Value.Metric_Id);
      Serialize (Into, "icons", Value.Icons);
      Serialize (Into, "rank", Value.Rank);
      Into.Write_Entity ("integration_status", Value.Integration_Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1Exchange_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1Exchange_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "exchange_id", Value.Exchange_Id);
      Swagger.Streams.Deserialize (Object, "website", Value.Website);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "data_start", Value.Data_Start);
      Swagger.Streams.Deserialize (Object, "data_end", Value.Data_End);
      Swagger.Streams.Deserialize (Object, "data_quote_start", Value.Data_Quote_Start);
      Swagger.Streams.Deserialize (Object, "data_quote_end", Value.Data_Quote_End);
      Swagger.Streams.Deserialize (Object, "data_orderbook_start", Value.Data_Orderbook_Start);
      Swagger.Streams.Deserialize (Object, "data_orderbook_end", Value.Data_Orderbook_End);
      Swagger.Streams.Deserialize (Object, "data_trade_start", Value.Data_Trade_Start);
      Swagger.Streams.Deserialize (Object, "data_trade_end", Value.Data_Trade_End);
      Swagger.Streams.Deserialize (Object, "data_trade_count", Value.Data_Trade_Count);
      Swagger.Streams.Deserialize (Object, "data_symbols_count", Value.Data_Symbols_Count);
      Swagger.Streams.Deserialize (Object, "volume_1hrs_usd", Value.Volume_1hrs_Usd);
      Swagger.Streams.Deserialize (Object, "volume_1day_usd", Value.Volume_1day_Usd);
      Swagger.Streams.Deserialize (Object, "volume_1mth_usd", Value.Volume_1mth_Usd);
      Swagger.Streams.Deserialize (Object, "metric_id", Value.Metric_Id);
      Deserialize (Object, "icons", Value.Icons);
      Swagger.Streams.Deserialize (Object, "rank", Value.Rank);
      Swagger.Streams.Deserialize (Object, "integration_status", Value.Integration_Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1Exchange_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1Exchange_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1OrderBookBase_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol_id", Value.Symbol_Id);
      if not Value.Time_Exchange.Is_Null then
         Into.Write_Entity ("time_exchange", Value.Time_Exchange);
      end if;
      if not Value.Time_Coinapi.Is_Null then
         Into.Write_Entity ("time_coinapi", Value.Time_Coinapi);
      end if;
      Serialize (Into, "asks", Value.Asks);
      Serialize (Into, "bids", Value.Bids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1OrderBookBase_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1OrderBookBase_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol_id", Value.Symbol_Id);
      Swagger.Streams.Deserialize (Object, "time_exchange", Value.Time_Exchange);
      Swagger.Streams.Deserialize (Object, "time_coinapi", Value.Time_Coinapi);
      Deserialize (Object, "asks", Value.Asks);
      Deserialize (Object, "bids", Value.Bids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1OrderBookBase_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1OrderBookBase_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1OrderBook_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol_id", Value.Symbol_Id);
      if not Value.Time_Exchange.Is_Null then
         Into.Write_Entity ("time_exchange", Value.Time_Exchange);
      end if;
      if not Value.Time_Coinapi.Is_Null then
         Into.Write_Entity ("time_coinapi", Value.Time_Coinapi);
      end if;
      Serialize (Into, "asks", Value.Asks);
      Serialize (Into, "bids", Value.Bids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1OrderBook_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1OrderBook_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol_id", Value.Symbol_Id);
      Swagger.Streams.Deserialize (Object, "time_exchange", Value.Time_Exchange);
      Swagger.Streams.Deserialize (Object, "time_coinapi", Value.Time_Coinapi);
      Deserialize (Object, "asks", Value.Asks);
      Deserialize (Object, "bids", Value.Bids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1OrderBook_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1OrderBook_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1QuoteTrade_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("symbol_id", Value.Symbol_Id);
      if not Value.Time_Exchange.Is_Null then
         Into.Write_Entity ("time_exchange", Value.Time_Exchange);
      end if;
      if not Value.Time_Coinapi.Is_Null then
         Into.Write_Entity ("time_coinapi", Value.Time_Coinapi);
      end if;
      Serialize (Into, "ask_price", Value.Ask_Price);
      Serialize (Into, "ask_size", Value.Ask_Size);
      Serialize (Into, "bid_price", Value.Bid_Price);
      Serialize (Into, "bid_size", Value.Bid_Size);
      Serialize (Into, "last_trade", Value.Last_Trade);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1QuoteTrade_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1QuoteTrade_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "symbol_id", Value.Symbol_Id);
      Swagger.Streams.Deserialize (Object, "time_exchange", Value.Time_Exchange);
      Swagger.Streams.Deserialize (Object, "time_coinapi", Value.Time_Coinapi);
      Swagger.Streams.Deserialize (Object, "ask_price", Value.Ask_Price);
      Swagger.Streams.Deserialize (Object, "ask_size", Value.Ask_Size);
      Swagger.Streams.Deserialize (Object, "bid_price", Value.Bid_Price);
      Swagger.Streams.Deserialize (Object, "bid_size", Value.Bid_Size);
      Deserialize (Object, "last_trade", Value.Last_Trade);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1QuoteTrade_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1QuoteTrade_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


end .Models;
