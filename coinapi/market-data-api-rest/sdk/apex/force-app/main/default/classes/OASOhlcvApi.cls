/*
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASOhlcvApi {
    OASClient client;

    public OASOhlcvApi(OASClient client) {
        this.client = client;
    }

    public OASOhlcvApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Historical data by exchange
     * Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific exchange eg &#x60;BITSTAMP&#x60;\r\n            \r\n:::info\r\nThe OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.\r\nThe difference between &#x60;time_end&#x60; and &#x60;time_start&#x60; cannot be higher than 1 day.\r\nThe &#x60;period_id&#x60; cannot be higher than &#x60;1DAY&#x60;.\r\n:::
     * @param exchangeId Exchange identifier of requested timeseries (from the Metadata -&gt; Exchanges) (required)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;) (required)
     * @param timeStart Timeseries starting time in ISO 8601 (required)
     * @param timeEnd Timeseries ending time in ISO 8601 (required)
     * @return List<OASModelsExchangeTimeseriesItem>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASModelsExchangeTimeseriesItem> v1OhlcvExchangesExchangeIdHistoryGet(Map<String, Object> params) {
        client.assertNotNull(params.get('exchangeId'), 'exchangeId');
        client.assertNotNull(params.get('periodId'), 'periodId');
        client.assertNotNull(params.get('timeStart'), 'timeStart');
        client.assertNotNull(params.get('timeEnd'), 'timeEnd');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('period_id', (String) params.get('periodId')));
        query.addAll(client.makeParam('time_start', (String) params.get('timeStart')));
        query.addAll(client.makeParam('time_end', (String) params.get('timeEnd')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASModelsExchangeTimeseriesItem>) client.invoke(
            'GET', '/v1/ohlcv/exchanges/{exchange_id}/history', '',
            query, form,
            new Map<String, Object>{
                'exchange_id' => (String) params.get('exchangeId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<OASModelsExchangeTimeseriesItem>.class
        );
    }
    /**
     * List all periods
     * Get full list of supported time periods available for requesting OHLCV timeseries data.\r\n            \r\n### Available periods\r\n            \r\nTime unit | Period identifiers\r\n--------- | -----------\r\nSecond | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC\r\nMinute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN\r\nHour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS\r\nDay | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY\r\nMonth | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH\r\nYear | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS\r\n            \r\n:::tip\r\nYou can assume that we will not remove any periods from this response, however, we may add new ones.\r\n:::
     * @return List<OASV1TimeseriesPeriod>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1TimeseriesPeriod> v1OhlcvPeriodsGet() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1TimeseriesPeriod>) client.invoke(
            'GET', '/v1/ohlcv/periods', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<OASV1TimeseriesPeriod>.class
        );
    }
    /**
     * Historical data
     * Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data\r\n            \r\n:::info\r\nThe OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.\r\n:::
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;) (required)
     * @param timeStart Timeseries starting time in ISO 8601 (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (optional)
     * @param r_limit Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param includeEmptyItems Include items with no activity? (default value is &#x60;false&#x60;, possible values are &#x60;true&#x60; or &#x60;false&#x60;) (optional, default to false)
     * @return List<OASV1TimeseriesItem>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1TimeseriesItem> v1OhlcvSymbolIdHistoryGet(Map<String, Object> params) {
        client.assertNotNull(params.get('symbolId'), 'symbolId');
        client.assertNotNull(params.get('periodId'), 'periodId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('period_id', (String) params.get('periodId')));
        query.addAll(client.makeParam('time_start', (String) params.get('timeStart')));
        query.addAll(client.makeParam('time_end', (String) params.get('timeEnd')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));
        query.addAll(client.makeParam('include_empty_items', (Boolean) params.get('includeEmptyItems')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1TimeseriesItem>) client.invoke(
            'GET', '/v1/ohlcv/{symbol_id}/history', '',
            query, form,
            new Map<String, Object>{
                'symbol_id' => (String) params.get('symbolId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<OASV1TimeseriesItem>.class
        );
    }
    /**
     * Latest data
     * Get OHLCV latest timeseries data returned in time descending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data\r\n            \r\n:::info\r\nOHLCV Latest endpoint is just the shortcut to the OHLCV Historical endpoint with substituted &#x60;time_start&#x60; and &#x60;time_end&#x60; parameters. \r\nThe OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.\r\n:::
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;) (required)
     * @param r_limit Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param includeEmptyItems Include items with no activity? (default value is &#x60;false&#x60;, possible values are &#x60;true&#x60; or &#x60;false&#x60;) (optional, default to false)
     * @return List<OASV1TimeseriesItem>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1TimeseriesItem> v1OhlcvSymbolIdLatestGet(Map<String, Object> params) {
        client.assertNotNull(params.get('symbolId'), 'symbolId');
        client.assertNotNull(params.get('periodId'), 'periodId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('period_id', (String) params.get('periodId')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));
        query.addAll(client.makeParam('include_empty_items', (Boolean) params.get('includeEmptyItems')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1TimeseriesItem>) client.invoke(
            'GET', '/v1/ohlcv/{symbol_id}/latest', '',
            query, form,
            new Map<String, Object>{
                'symbol_id' => (String) params.get('symbolId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<OASV1TimeseriesItem>.class
        );
    }
}
