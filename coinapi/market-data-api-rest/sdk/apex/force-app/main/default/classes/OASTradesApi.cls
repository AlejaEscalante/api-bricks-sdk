/*
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASTradesApi {
    OASClient client;

    public OASTradesApi(OASClient client) {
        this.client = client;
    }

    public OASTradesApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Latest data
     * Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.
     * @param filterSymbolId Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional)
     * @param includeId Information that additional exchange trade identifier should be included in the &#x60;id_trade&#x60; parameter of the trade if exchange providing identifiers. (optional, default to false)
     * @param r_limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List<OASV1Trade>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1Trade> v1TradesLatestGet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('filter_symbol_id', (String) params.get('filterSymbolId')));
        query.addAll(client.makeParam('include_id', (Boolean) params.get('includeId')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1Trade>) client.invoke(
            'GET', '/v1/trades/latest', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<OASV1Trade>.class
        );
    }
    /**
     * Historical data
     * Get history transactions from specific symbol, returned in time ascending order.\r\n\r\n:::warning\r\nThe \&#39;time_start\&#39; and \&#39;time_end\&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day.\r\nPlease use the \&#39;date\&#39; parameter instead for querying data for a specific day without filter.\r\n:::
     * @param symbolId Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param r_date Date in ISO 8601, returned data is for the whole given day (required if \&#39;time_start\&#39; is not provided) (optional)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (optional)
     * @param r_limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param includeId Information that additional exchange trade identifier should be included in the &#x60;id_trade&#x60; parameter of the trade if exchange providing identifiers. (optional, default to false)
     * @return List<OASV1Trade>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1Trade> v1TradesSymbolIdHistoryGet(Map<String, Object> params) {
        client.assertNotNull(params.get('symbolId'), 'symbolId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('date', (String) params.get('r_date')));
        query.addAll(client.makeParam('time_start', (String) params.get('timeStart')));
        query.addAll(client.makeParam('time_end', (String) params.get('timeEnd')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));
        query.addAll(client.makeParam('include_id', (Boolean) params.get('includeId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1Trade>) client.invoke(
            'GET', '/v1/trades/{symbol_id}/history', '',
            query, form,
            new Map<String, Object>{
                'symbol_id' => (String) params.get('symbolId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<OASV1Trade>.class
        );
    }
    /**
     * Latest data by symbol_id
     * Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.
     * @param symbolId Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param r_limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param includeId Information that additional exchange trade identifier should be included in the &#x60;id_trade&#x60; parameter of the trade if exchange providing identifiers. (optional, default to false)
     * @return List<OASV1Trade>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1Trade> v1TradesSymbolIdLatestGet(Map<String, Object> params) {
        client.assertNotNull(params.get('symbolId'), 'symbolId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));
        query.addAll(client.makeParam('include_id', (Boolean) params.get('includeId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1Trade>) client.invoke(
            'GET', '/v1/trades/{symbol_id}/latest', '',
            query, form,
            new Map<String, Object>{
                'symbol_id' => (String) params.get('symbolId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<OASV1Trade>.class
        );
    }
}
