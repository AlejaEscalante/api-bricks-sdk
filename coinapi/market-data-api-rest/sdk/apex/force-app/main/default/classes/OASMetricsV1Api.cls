/*
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASMetricsV1Api {
    OASClient client;

    public OASMetricsV1Api(OASClient client) {
        this.client = client;
    }

    public OASMetricsV1Api() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Current metrics for given asset
     * Get current asset metrics.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param assetId Asset identifier (from the Metadata -&gt; Assets) (optional)
     * @param assetIdExternal Exchange asset identifier (optional)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (optional)
     * @return List<OASV1GeneralData>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1GeneralData> v1MetricsAssetCurrentGet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('metric_id', (String) params.get('metricId')));
        query.addAll(client.makeParam('asset_id', (String) params.get('assetId')));
        query.addAll(client.makeParam('asset_id_external', (String) params.get('assetIdExternal')));
        query.addAll(client.makeParam('exchange_id', (String) params.get('exchangeId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1GeneralData>) client.invoke(
            'GET', '/v1/metrics/asset/current', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1GeneralData>.class
        );
    }
    /**
     * Historical metrics for asset
     * Get asset metrics history.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (required)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param assetId Asset identifier (from the Metadata -&gt; Assets) (optional)
     * @param assetIdExternal Exchange asset identifier (optional)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional)
     * @param r_limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List<OASV1MetricData>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1MetricData> v1MetricsAssetHistoryGet(Map<String, Object> params) {
        client.assertNotNull(params.get('metricId'), 'metricId');
        client.assertNotNull(params.get('exchangeId'), 'exchangeId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('metric_id', (String) params.get('metricId')));
        query.addAll(client.makeParam('asset_id', (String) params.get('assetId')));
        query.addAll(client.makeParam('asset_id_external', (String) params.get('assetIdExternal')));
        query.addAll(client.makeParam('exchange_id', (String) params.get('exchangeId')));
        query.addAll(client.makeParam('time_start', (Datetime) params.get('timeStart')));
        query.addAll(client.makeParam('time_end', (Datetime) params.get('timeEnd')));
        query.addAll(client.makeParam('time_format', (String) params.get('timeFormat')));
        query.addAll(client.makeParam('period_id', (String) params.get('periodId')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1MetricData>) client.invoke(
            'GET', '/v1/metrics/asset/history', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1MetricData>.class
        );
    }
    /**
     * Listing of all supported metrics for asset
     * Get data metrics for asset.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (optional)
     * @param chainId Chain identifier (optional)
     * @param networkId Network identifier (optional)
     * @param assetId Asset identifier (from the Metadata -&gt; Assets) (optional)
     * @param assetIdExternal The asset external identifier (optional)
     * @return List<OASV1ListingItem>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1ListingItem> v1MetricsAssetListingGet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('metric_id', (String) params.get('metricId')));
        query.addAll(client.makeParam('exchange_id', (String) params.get('exchangeId')));
        query.addAll(client.makeParam('chain_id', (String) params.get('chainId')));
        query.addAll(client.makeParam('network_id', (String) params.get('networkId')));
        query.addAll(client.makeParam('asset_id', (String) params.get('assetId')));
        query.addAll(client.makeParam('asset_id_external', (String) params.get('assetIdExternal')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1ListingItem>) client.invoke(
            'GET', '/v1/metrics/asset/listing', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1ListingItem>.class
        );
    }
    /**
     * Current metrics for given exchange
     * Get current exchange metrics values.
     * @param exchangeId The exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param metricId The metric identifier (from the Metrics -&gt; Listing) (optional)
     * @return List<OASV1GeneralData>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1GeneralData> v1MetricsExchangeCurrentGet(Map<String, Object> params) {
        client.assertNotNull(params.get('exchangeId'), 'exchangeId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('metric_id', (String) params.get('metricId')));
        query.addAll(client.makeParam('exchange_id', (String) params.get('exchangeId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1GeneralData>) client.invoke(
            'GET', '/v1/metrics/exchange/current', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1GeneralData>.class
        );
    }
    /**
     * Historical metrics for the exchange
     * Get exchange metrics history.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (required)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional)
     * @param r_limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List<OASV1MetricData>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1MetricData> v1MetricsExchangeHistoryGet(Map<String, Object> params) {
        client.assertNotNull(params.get('metricId'), 'metricId');
        client.assertNotNull(params.get('exchangeId'), 'exchangeId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('metric_id', (String) params.get('metricId')));
        query.addAll(client.makeParam('exchange_id', (String) params.get('exchangeId')));
        query.addAll(client.makeParam('time_start', (Datetime) params.get('timeStart')));
        query.addAll(client.makeParam('time_end', (Datetime) params.get('timeEnd')));
        query.addAll(client.makeParam('time_format', (String) params.get('timeFormat')));
        query.addAll(client.makeParam('period_id', (String) params.get('periodId')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1MetricData>) client.invoke(
            'GET', '/v1/metrics/exchange/history', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1MetricData>.class
        );
    }
    /**
     * Listing of all supported exchange metrics
     * Get data metrics for exchange.
     * @param exchangeId The exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param metricId The metric identifier (from the Metrics -&gt; Listing) (optional)
     * @return List<OASV1ListingItem>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1ListingItem> v1MetricsExchangeListingGet(Map<String, Object> params) {
        client.assertNotNull(params.get('exchangeId'), 'exchangeId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('metric_id', (String) params.get('metricId')));
        query.addAll(client.makeParam('exchange_id', (String) params.get('exchangeId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1ListingItem>) client.invoke(
            'GET', '/v1/metrics/exchange/listing', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1ListingItem>.class
        );
    }
    /**
     * Listing of all supported metrics by CoinAPI
     * Get all data metrics.
     * @return List<OASV1Metric>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1Metric> v1MetricsListingGet() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1Metric>) client.invoke(
            'GET', '/v1/metrics/listing', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1Metric>.class
        );
    }
    /**
     * Current metrics for given symbol
     * Get current symbol metrics.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols) (optional)
     * @param exchangeId Exchange id (from the Metadata -&gt; Exchanges) (optional)
     * @return List<OASV1GeneralData>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1GeneralData> v1MetricsSymbolCurrentGet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('metric_id', (String) params.get('metricId')));
        query.addAll(client.makeParam('symbol_id', (String) params.get('symbolId')));
        query.addAll(client.makeParam('exchange_id', (String) params.get('exchangeId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1GeneralData>) client.invoke(
            'GET', '/v1/metrics/symbol/current', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1GeneralData>.class
        );
    }
    /**
     * Historical metrics for symbol
     * Get symbol metrics history.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (required)
     * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional)
     * @param r_limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List<OASV1MetricData>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1MetricData> v1MetricsSymbolHistoryGet(Map<String, Object> params) {
        client.assertNotNull(params.get('metricId'), 'metricId');
        client.assertNotNull(params.get('symbolId'), 'symbolId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('metric_id', (String) params.get('metricId')));
        query.addAll(client.makeParam('symbol_id', (String) params.get('symbolId')));
        query.addAll(client.makeParam('time_start', (Datetime) params.get('timeStart')));
        query.addAll(client.makeParam('time_end', (Datetime) params.get('timeEnd')));
        query.addAll(client.makeParam('time_format', (String) params.get('timeFormat')));
        query.addAll(client.makeParam('period_id', (String) params.get('periodId')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1MetricData>) client.invoke(
            'GET', '/v1/metrics/symbol/history', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1MetricData>.class
        );
    }
    /**
     * Listing of all supported metrics for symbol
     * Get data metrics for symbol.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (optional)
     * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols) (optional)
     * @return List<OASV1ListingItem>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1ListingItem> v1MetricsSymbolListingGet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('metric_id', (String) params.get('metricId')));
        query.addAll(client.makeParam('exchange_id', (String) params.get('exchangeId')));
        query.addAll(client.makeParam('symbol_id', (String) params.get('symbolId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1ListingItem>) client.invoke(
            'GET', '/v1/metrics/symbol/listing', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1ListingItem>.class
        );
    }
}
