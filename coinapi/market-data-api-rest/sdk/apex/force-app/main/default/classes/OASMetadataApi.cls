/*
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASMetadataApi {
    OASClient client;

    public OASMetadataApi(OASClient client) {
        this.client = client;
    }

    public OASMetadataApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * List all assets by asset ID
     * 
     * @param assetId The asset ID. (required)
     * @return List<OASV1Asset>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1Asset> v1AssetsAssetIdGet(Map<String, Object> params) {
        client.assertNotNull(params.get('assetId'), 'assetId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1Asset>) client.invoke(
            'GET', '/v1/assets/{asset_id}', '',
            query, form,
            new Map<String, Object>{
                'asset_id' => (String) params.get('assetId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1Asset>.class
        );
    }
    /**
     * List all assets
     * Retrieves all assets.\n            \n:::info\nOur asset identifiers are aligned with the ISO 4217 currency codes standard only for fiat money (government or law regulated currency).\n:::\n            \n:::info\nProperties of the output are providing aggregated information from across all symbols related to the specific asset. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source.\n:::
     * @param filterAssetId Comma or semicolon delimited asset identifiers used to filter response. (optional, eg. &#x60;BTC;ETH&#x60;). (optional)
     * @return List<OASV1Asset>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1Asset> v1AssetsGet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('filter_asset_id', (String) params.get('filterAssetId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1Asset>) client.invoke(
            'GET', '/v1/assets', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1Asset>.class
        );
    }
    /**
     * List all asset icons
     * Gets the list of icons (of the given size) for all the assets.
     * @param size The size of the icons. (required)
     * @return List<OASV1Icon>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1Icon> v1AssetsIconsSizeGet(Map<String, Object> params) {
        client.assertNotNull(params.get('size'), 'size');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1Icon>) client.invoke(
            'GET', '/v1/assets/icons/{size}', '',
            query, form,
            new Map<String, Object>{
                'size' => (Integer) params.get('size')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1Icon>.class
        );
    }
    /**
     * List all chains by chain ID
     * 
     * @param chainId The chain ID. (required)
     * @return List<OASV1Chain>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1Chain> v1ChainsChainIdGet(Map<String, Object> params) {
        client.assertNotNull(params.get('chainId'), 'chainId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1Chain>) client.invoke(
            'GET', '/v1/chains/{chain_id}', '',
            query, form,
            new Map<String, Object>{
                'chain_id' => (String) params.get('chainId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1Chain>.class
        );
    }
    /**
     * List all blockchain chains
     * Retrieves all blockchain chains supported by the system.\n            \n:::info\nProperties of the output are providing aggregated information from across all symbols related to the specific chain. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source.\n:::
     * @param filterChainId Comma or semicolon delimited chain identifiers used to filter response. (optional, eg. &#x60;ETHEREUM;ARBITRUM&#x60;). (optional)
     * @return List<OASV1Chain>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1Chain> v1ChainsGet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('filter_chain_id', (String) params.get('filterChainId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1Chain>) client.invoke(
            'GET', '/v1/chains', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1Chain>.class
        );
    }
    /**
     * List all exchanges by exchange_id
     * 
     * @param exchangeId The ID of the exchange. (required)
     * @return List<OASV1Exchange>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1Exchange> v1ExchangesExchangeIdGet(Map<String, Object> params) {
        client.assertNotNull(params.get('exchangeId'), 'exchangeId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1Exchange>) client.invoke(
            'GET', '/v1/exchanges/{exchange_id}', '',
            query, form,
            new Map<String, Object>{
                'exchange_id' => (String) params.get('exchangeId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1Exchange>.class
        );
    }
    /**
     * List all exchanges
     * Get a detailed list of exchanges provided by the system.\n            \n:::info\nProperties of the output are providing aggregated information from across all symbols related to the specific exchange. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source.\n:::
     * @param filterExchangeId Comma or semicolon delimited exchange identifiers used to filter response. (optional, eg. &#x60;BITSTAMP;GEMINI&#x60;) (optional)
     * @return List<OASV1Exchange>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1Exchange> v1ExchangesGet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('filter_exchange_id', (String) params.get('filterExchangeId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1Exchange>) client.invoke(
            'GET', '/v1/exchanges', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1Exchange>.class
        );
    }
    /**
     * List of icons for the exchanges
     * 
     * @param size The size of the icons. (required)
     * @return List<OASV1Icon>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1Icon> v1ExchangesIconsSizeGet(Map<String, Object> params) {
        client.assertNotNull(params.get('size'), 'size');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1Icon>) client.invoke(
            'GET', '/v1/exchanges/icons/{size}', '',
            query, form,
            new Map<String, Object>{
                'size' => (Integer) params.get('size')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1Icon>.class
        );
    }
    /**
     * List all active symbols
     * Retrieves all currently active (listed) symbols, with optional filtering.\n            \n:::info\n&quot;price_precision&quot; and &quot;size_precision&quot; are data precisions and are not always the same precisions used for trading eg. for the &quot;BINANCE&quot; exchanges.\n:::\n            \n:::info\nYou should not assume that the market data will be always within the resolution provided by the &quot;price_precision&quot; and &quot;size_precision&quot;. The fact that the precision values can be derived from a posterior implies the fact that this data could be delayed, also it can be changed by the data source without notice and we will immediately deliver data with the new precision while could not update the precision values in this endpoint immediately.\n:::\n            \n### Symbol identifier\n            \nOur symbol identifier is created using a pattern that depends on symbol type.\n            \nType | &#x60;symbol_id&#x60; pattern\n--------- | ---------\nSPOT | &#x60;{exchange_id}_SPOT_{asset_id_base}_{asset_id_quote}&#x60;\nFUTURES | &#x60;{exchange_id}_FTS_{asset_id_base}_{asset_id_quote}_{YYMMDD of future_delivery_time}&#x60;\nOPTION | &#x60;{exchange_id}_OPT_{asset_id_base}_{asset_id_quote}_{YYMMDD of option_expiration_time}_{option_strike_price}_{option_type_is_call as C/P}&#x60;\nPERPETUAL | &#x60;{exchange_id}_PERP_{asset_id_base}_{asset_id_quote}&#x60;\nINDEX | &#x60;{exchange_id}_IDX_{index_id}&#x60;\nCREDIT | &#x60;{exchange_id}_CRE_{asset_id_base}&#x60;\nCONTACT  | &#x60;{exchange_id}_COT_{contract_id}&#x60;\n            \n:::info\nIn the unlikely event when the &quot;symbol_id&quot; for more than one market is the same. We will append the additional term (prefixed with the &quot;_&quot;) at the end of the duplicated identifiers to differentiate them.\n:::info\n            \n### Symbol types list (enumeration of &#x60;symbol_type&#x60; output variable)\n            \nType | Name | Description\n-------- | - | -----------\nSPOT | FX Spot | Agreement to exchange one asset for another one *(e.g. Buy BTC for USD)*\nFUTURES | Futures contract | FX Spot derivative contract where traders agree to trade fx spot at predetermined future time\nOPTION | Option contract | FX Spot derivative contract where traders agree to trade right to require buy or sell of fx spot at agreed price on exercise date\nPERPETUAL | Perpetual contract | FX Spot derivative contract where traders agree to trade fx spot continously without predetermined future delivery time\nINDEX | Index | Statistical composite that measures changes in the economy or markets.\nCREDIT | Credit/Funding | Margin funding contract. Order book displays lending offers and borrow bids. Price represents the daily rate.\nCONTRACT | Contract | Represents other types of financial instruments *(e.g. spreads, interest rate swap)*\n            \n### Additional output variables for &#x60;symbol_type &#x3D; INDEX&#x60;\n            \nVariable | Description\n--------- | -----------\nindex_id | Index identifier\nindex_display_name | Human readable name of the index *(optional)*\nindex_display_description | Description of the index *(optional)*\n            \n### Additional output variables for &#x60;symbol_type &#x3D; FUTURES&#x60;\n            \nVariable | Description\n--------- | -----------\nfuture_delivery_time | Predetermined time of futures contract delivery date in ISO 8601\nfuture_contract_unit | Contact size *(eg. 10 BTC if &#x60;future_contract_unit&#x60; &#x3D; &#x60;10&#x60; and &#x60;future_contract_unit_asset&#x60; &#x3D; &#x60;BTC&#x60;)*\nfuture_contract_unit_asset | Identifier of the asset used to denominate the contract unit\n            \n### Additional output variables for &#x60;symbol_type &#x3D; PERPETUAL&#x60;\n            \nVariable | Description\n--------- | -----------\nfuture_contract_unit | Contact size *(eg. 10 BTC if &#x60;future_contract_unit&#x60; &#x3D; &#x60;10&#x60; and &#x60;future_contract_unit_asset&#x60; &#x3D; &#x60;BTC&#x60;)*\nfuture_contract_unit_asset | Identifier of the asset used to denominate the contract unit\n            \n### Additional output variables for &#x60;symbol_type &#x3D; OPTION&#x60;\n            \nVariable | Description\n--------- | -----------\noption_type_is_call | Boolean value representing option type. &#x60;true&#x60; for Call options, &#x60;false&#x60; for Put options\noption_strike_price | Price at which option contract can be exercised\noption_contract_unit | Base asset amount of underlying spot which single option represents\noption_exercise_style | Option exercise style. Can be &#x60;EUROPEAN&#x60; or &#x60;AMERICAN&#x60;\noption_expiration_time | Option contract expiration time in ISO 8601\n            \n### Additional output variables for &#x60;symbol_type &#x3D; CONTRACT&#x60;\n            \nVariable | Description\n--------- | -----------\ncontract_delivery_time | Predetermined time of contract delivery date in ISO 8601\ncontract_unit | Contact size *(eg. 10 BTC if &#x60;contract_unit&#x60; &#x3D; &#x60;10&#x60; and &#x60;contract_unit_asset&#x60; &#x3D; &#x60;BTC&#x60;)*\ncontract_unit_asset | Identifier of the asset used to denominate the contract unit\ncontract_id | Identifier of contract by the exchange
     * @param exchangeId The ID of the exchange. (required)
     * @param filterSymbolId Comma or semicolon delimited parts of symbol identifier used to filter response. (optional, eg. &#x60;BITSTAMP&#x60;_ or &#x60;BINANCE_SPOT_&#x60;) (optional)
     * @param filterAssetId The filter for asset ID. (optional)
     * @return List<OASV1Symbol>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1Symbol> v1SymbolsExchangeIdActiveGet(Map<String, Object> params) {
        client.assertNotNull(params.get('exchangeId'), 'exchangeId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('filter_symbol_id', (String) params.get('filterSymbolId')));
        query.addAll(client.makeParam('filter_asset_id', (String) params.get('filterAssetId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1Symbol>) client.invoke(
            'GET', '/v1/symbols/{exchange_id}/active', '',
            query, form,
            new Map<String, Object>{
                'exchange_id' => (String) params.get('exchangeId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1Symbol>.class
        );
    }
    /**
     * List all historical symbols for an exchange.
     * This endpoint provides access to symbols that are no longer actively traded or listed on a given exchange.\nThe data is provided with pagination support.
     * @param exchangeId The ID of the exchange. (required)
     * @param page The page number for pagination (starts from 1). (optional, default to 1)
     * @param r_limit Number of records to return per page. (optional, default to 100)
     * @return List<OASV1Symbol>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1Symbol> v1SymbolsExchangeIdHistoryGet(Map<String, Object> params) {
        client.assertNotNull(params.get('exchangeId'), 'exchangeId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('page', (Integer) params.get('page')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1Symbol>) client.invoke(
            'GET', '/v1/symbols/{exchange_id}/history', '',
            query, form,
            new Map<String, Object>{
                'exchange_id' => (String) params.get('exchangeId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1Symbol>.class
        );
    }
    /**
     * List active symbol mapping for the exchange
     * 
     * @param exchangeId The ID of the exchange (from the Metadata -&gt; Exchanges) (required)
     * @return List<OASV1SymbolMapping>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1SymbolMapping> v1SymbolsMapExchangeIdGet(Map<String, Object> params) {
        client.assertNotNull(params.get('exchangeId'), 'exchangeId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1SymbolMapping>) client.invoke(
            'GET', '/v1/symbols/map/{exchange_id}', '',
            query, form,
            new Map<String, Object>{
                'exchange_id' => (String) params.get('exchangeId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1SymbolMapping>.class
        );
    }
}
