/*
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Represents a trade executed on the exchange.
 */
public class OASV1Trade implements OAS.MappedProperties {
    /**
     * The symbol identifier.
     * @return symbolId
     */
    public String symbolId { get; set; }

    /**
     * The time of trade reported by the exchange.
     * @return timeExchange
     */
    public Datetime timeExchange { get; set; }

    /**
     * The time when the trade was received by CoinAPI.
     * @return timeCoinapi
     */
    public Datetime timeCoinapi { get; set; }

    /**
     * The unique identifier for the trade.
     * @return uuid
     */
    public String uuid { get; set; }

    /**
     * The price of the transaction.
     * @return price
     */
    public Double price { get; set; }

    /**
     * The base asset amount traded in the transaction.
     * @return size
     */
    public Double size { get; set; }

    /**
     * The aggressor side of the transaction (BUY/SELL/BUY_ESTIMATED/SELL_ESTIMATED/UNKNOWN).
     * @return takerSide
     */
    public String takerSide { get; set; }

    /**
     * The trade identifier.
     * @return idTrade
     */
    public String idTrade { get; set; }

    /**
     * The order maker identifier.
     * @return idOrderMaker
     */
    public String idOrderMaker { get; set; }

    /**
     * The order taker identifier.
     * @return idOrderTaker
     */
    public String idOrderTaker { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'time_exchange' => 'timeExchange',
        'time_coinapi' => 'timeCoinapi',
        'taker_side' => 'takerSide',
        'id_trade' => 'idTrade',
        'id_order_maker' => 'idOrderMaker',
        'id_order_taker' => 'idOrderTaker'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'time_exchange' => 'timeExchange',
        'time_coinapi' => 'timeCoinapi',
        'taker_side' => 'takerSide',
        'id_trade' => 'idTrade',
        'id_order_maker' => 'idOrderMaker',
        'id_order_taker' => 'idOrderTaker'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'time_exchange' => 'timeExchange',
        'time_coinapi' => 'timeCoinapi',
        'taker_side' => 'takerSide',
        'id_trade' => 'idTrade',
        'id_order_maker' => 'idOrderMaker',
        'id_order_taker' => 'idOrderTaker'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'time_exchange' => 'timeExchange',
        'time_coinapi' => 'timeCoinapi',
        'taker_side' => 'takerSide',
        'id_trade' => 'idTrade',
        'id_order_maker' => 'idOrderMaker',
        'id_order_taker' => 'idOrderTaker'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'time_exchange' => 'timeExchange',
        'time_coinapi' => 'timeCoinapi',
        'taker_side' => 'takerSide',
        'id_trade' => 'idTrade',
        'id_order_maker' => 'idOrderMaker',
        'id_order_taker' => 'idOrderTaker'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'time_exchange' => 'timeExchange',
        'time_coinapi' => 'timeCoinapi',
        'taker_side' => 'takerSide',
        'id_trade' => 'idTrade',
        'id_order_maker' => 'idOrderMaker',
        'id_order_taker' => 'idOrderTaker'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'time_exchange' => 'timeExchange',
        'time_coinapi' => 'timeCoinapi',
        'taker_side' => 'takerSide',
        'id_trade' => 'idTrade',
        'id_order_maker' => 'idOrderMaker',
        'id_order_taker' => 'idOrderTaker'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASV1Trade getExample() {
        OASV1Trade v1Trade = new OASV1Trade();
          v1Trade.symbolId = '';
          v1Trade.timeExchange = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          v1Trade.timeCoinapi = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          v1Trade.uuid = '';
          v1Trade.price = 1.3579;
          v1Trade.size = 1.3579;
          v1Trade.takerSide = '';
          v1Trade.idTrade = '';
          v1Trade.idOrderMaker = '';
          v1Trade.idOrderTaker = '';
        return v1Trade;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASV1Trade) {           
            OASV1Trade v1Trade = (OASV1Trade) obj;
            return this.symbolId == v1Trade.symbolId
                && this.timeExchange == v1Trade.timeExchange
                && this.timeCoinapi == v1Trade.timeCoinapi
                && this.uuid == v1Trade.uuid
                && this.price == v1Trade.price
                && this.size == v1Trade.size
                && this.takerSide == v1Trade.takerSide
                && this.idTrade == v1Trade.idTrade
                && this.idOrderMaker == v1Trade.idOrderMaker
                && this.idOrderTaker == v1Trade.idOrderTaker;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (symbolId == null ? 0 : System.hashCode(symbolId));
        hashCode = (17 * hashCode) + (timeExchange == null ? 0 : System.hashCode(timeExchange));
        hashCode = (17 * hashCode) + (timeCoinapi == null ? 0 : System.hashCode(timeCoinapi));
        hashCode = (17 * hashCode) + (uuid == null ? 0 : System.hashCode(uuid));
        hashCode = (17 * hashCode) + (price == null ? 0 : System.hashCode(price));
        hashCode = (17 * hashCode) + (size == null ? 0 : System.hashCode(size));
        hashCode = (17 * hashCode) + (takerSide == null ? 0 : System.hashCode(takerSide));
        hashCode = (17 * hashCode) + (idTrade == null ? 0 : System.hashCode(idTrade));
        hashCode = (17 * hashCode) + (idOrderMaker == null ? 0 : System.hashCode(idOrderMaker));
        hashCode = (17 * hashCode) + (idOrderTaker == null ? 0 : System.hashCode(idOrderTaker));
        return hashCode;
    }
}

