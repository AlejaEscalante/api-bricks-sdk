/*
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Represents a quote trade data model.
 */
public class OASV1QuoteTrade implements OAS.MappedProperties {
    /**
     * The symbol identifier.
     * @return symbolId
     */
    public String symbolId { get; set; }

    /**
     * The exchange time of the quote trade.
     * @return timeExchange
     */
    public Datetime timeExchange { get; set; }

    /**
     * The CoinAPI time when the quote trade was received.
     * @return timeCoinapi
     */
    public Datetime timeCoinapi { get; set; }

    /**
     * The best asking price.
     * @return askPrice
     */
    public Double askPrice { get; set; }

    /**
     * The volume resting on the best ask. If the value is equal to zero, then the size is unknown.
     * @return askSize
     */
    public Double askSize { get; set; }

    /**
     * The best bidding price.
     * @return bidPrice
     */
    public Double bidPrice { get; set; }

    /**
     * The volume resting on the best bid. If the value is equal to zero, then the size is unknown.
     * @return bidSize
     */
    public Double bidSize { get; set; }

    /**
     * Get lastTrade
     * @return lastTrade
     */
    public OASV1LastTrade lastTrade { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'time_exchange' => 'timeExchange',
        'time_coinapi' => 'timeCoinapi',
        'ask_price' => 'askPrice',
        'ask_size' => 'askSize',
        'bid_price' => 'bidPrice',
        'bid_size' => 'bidSize',
        'last_trade' => 'lastTrade'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'time_exchange' => 'timeExchange',
        'time_coinapi' => 'timeCoinapi',
        'ask_price' => 'askPrice',
        'ask_size' => 'askSize',
        'bid_price' => 'bidPrice',
        'bid_size' => 'bidSize',
        'last_trade' => 'lastTrade'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'time_exchange' => 'timeExchange',
        'time_coinapi' => 'timeCoinapi',
        'ask_price' => 'askPrice',
        'ask_size' => 'askSize',
        'bid_price' => 'bidPrice',
        'bid_size' => 'bidSize',
        'last_trade' => 'lastTrade'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'time_exchange' => 'timeExchange',
        'time_coinapi' => 'timeCoinapi',
        'ask_price' => 'askPrice',
        'ask_size' => 'askSize',
        'bid_price' => 'bidPrice',
        'bid_size' => 'bidSize',
        'last_trade' => 'lastTrade'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'time_exchange' => 'timeExchange',
        'time_coinapi' => 'timeCoinapi',
        'ask_price' => 'askPrice',
        'ask_size' => 'askSize',
        'bid_price' => 'bidPrice',
        'bid_size' => 'bidSize',
        'last_trade' => 'lastTrade'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'time_exchange' => 'timeExchange',
        'time_coinapi' => 'timeCoinapi',
        'ask_price' => 'askPrice',
        'ask_size' => 'askSize',
        'bid_price' => 'bidPrice',
        'bid_size' => 'bidSize',
        'last_trade' => 'lastTrade'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'time_exchange' => 'timeExchange',
        'time_coinapi' => 'timeCoinapi',
        'ask_price' => 'askPrice',
        'ask_size' => 'askSize',
        'bid_price' => 'bidPrice',
        'bid_size' => 'bidSize',
        'last_trade' => 'lastTrade'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'time_exchange' => 'timeExchange',
        'time_coinapi' => 'timeCoinapi',
        'ask_price' => 'askPrice',
        'ask_size' => 'askSize',
        'bid_price' => 'bidPrice',
        'bid_size' => 'bidSize',
        'last_trade' => 'lastTrade'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASV1QuoteTrade getExample() {
        OASV1QuoteTrade v1QuoteTrade = new OASV1QuoteTrade();
          v1QuoteTrade.symbolId = '';
          v1QuoteTrade.timeExchange = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          v1QuoteTrade.timeCoinapi = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          v1QuoteTrade.askPrice = 1.3579;
          v1QuoteTrade.askSize = 1.3579;
          v1QuoteTrade.bidPrice = 1.3579;
          v1QuoteTrade.bidSize = 1.3579;
          v1QuoteTrade.lastTrade = OASV1LastTrade.getExample();
        return v1QuoteTrade;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASV1QuoteTrade) {           
            OASV1QuoteTrade v1QuoteTrade = (OASV1QuoteTrade) obj;
            return this.symbolId == v1QuoteTrade.symbolId
                && this.timeExchange == v1QuoteTrade.timeExchange
                && this.timeCoinapi == v1QuoteTrade.timeCoinapi
                && this.askPrice == v1QuoteTrade.askPrice
                && this.askSize == v1QuoteTrade.askSize
                && this.bidPrice == v1QuoteTrade.bidPrice
                && this.bidSize == v1QuoteTrade.bidSize
                && this.lastTrade == v1QuoteTrade.lastTrade;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (symbolId == null ? 0 : System.hashCode(symbolId));
        hashCode = (17 * hashCode) + (timeExchange == null ? 0 : System.hashCode(timeExchange));
        hashCode = (17 * hashCode) + (timeCoinapi == null ? 0 : System.hashCode(timeCoinapi));
        hashCode = (17 * hashCode) + (askPrice == null ? 0 : System.hashCode(askPrice));
        hashCode = (17 * hashCode) + (askSize == null ? 0 : System.hashCode(askSize));
        hashCode = (17 * hashCode) + (bidPrice == null ? 0 : System.hashCode(bidPrice));
        hashCode = (17 * hashCode) + (bidSize == null ? 0 : System.hashCode(bidSize));
        hashCode = (17 * hashCode) + (lastTrade == null ? 0 : System.hashCode(lastTrade));
        return hashCode;
    }
}

