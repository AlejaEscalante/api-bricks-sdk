/*
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASExternalMetricsApi {
    OASClient client;

    public OASExternalMetricsApi(OASClient client) {
        this.client = client;
    }

    public OASExternalMetricsApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Historical metrics for the asset
     * Get asset metrics history.
     * @param metricId Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;) (required)
     * @param assetId Asset identifier (e.g., &#x60;USDC&#x60;, &#x60;USDT&#x60;) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)
     * @param r_limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List<Object>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<Object> v1ExternalmetricsAssetHistoryGet(Map<String, Object> params) {
        client.assertNotNull(params.get('metricId'), 'metricId');
        client.assertNotNull(params.get('assetId'), 'assetId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('metric_id', (String) params.get('metricId')));
        query.addAll(client.makeParam('asset_id', (String) params.get('assetId')));
        query.addAll(client.makeParam('time_start', (Datetime) params.get('timeStart')));
        query.addAll(client.makeParam('time_end', (Datetime) params.get('timeEnd')));
        query.addAll(client.makeParam('time_format', (String) params.get('timeFormat')));
        query.addAll(client.makeParam('period_id', (String) params.get('periodId')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<Object>) client.invoke(
            'GET', '/v1/externalmetrics/asset/history', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<Object>.class
        );
    }
    /**
     * Listing of metrics available for specific asset
     * Get all metrics that are actually available for the specified asset.
     * @param assetId Asset identifier (e.g., USDC, USDT) (required)
     * @return List<OASV1MetricInfo>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1MetricInfo> v1ExternalmetricsAssetListingGet(Map<String, Object> params) {
        client.assertNotNull(params.get('assetId'), 'assetId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('asset_id', (String) params.get('assetId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1MetricInfo>) client.invoke(
            'GET', '/v1/externalmetrics/asset/listing', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1MetricInfo>.class
        );
    }
    /**
     * Historical metrics for the chain
     * Get chain metrics history.
     * @param metricId Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;) (required)
     * @param chainId Chain identifier (e.g., &#x60;Ethereum&#x60;, &#x60;Arbitrum&#x60;) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)
     * @param r_limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List<Object>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<Object> v1ExternalmetricsChainHistoryGet(Map<String, Object> params) {
        client.assertNotNull(params.get('metricId'), 'metricId');
        client.assertNotNull(params.get('chainId'), 'chainId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('metric_id', (String) params.get('metricId')));
        query.addAll(client.makeParam('chain_id', (String) params.get('chainId')));
        query.addAll(client.makeParam('time_start', (Datetime) params.get('timeStart')));
        query.addAll(client.makeParam('time_end', (Datetime) params.get('timeEnd')));
        query.addAll(client.makeParam('time_format', (String) params.get('timeFormat')));
        query.addAll(client.makeParam('period_id', (String) params.get('periodId')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<Object>) client.invoke(
            'GET', '/v1/externalmetrics/chain/history', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<Object>.class
        );
    }
    /**
     * Listing of metrics available for specific chain
     * Get all metrics that are actually available for the specified blockchain chain.
     * @param chainId Chain identifier (e.g., ETHEREUM, ARBITRUM) (required)
     * @return List<OASV1MetricInfo>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1MetricInfo> v1ExternalmetricsChainListingGet(Map<String, Object> params) {
        client.assertNotNull(params.get('chainId'), 'chainId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('chain_id', (String) params.get('chainId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1MetricInfo>) client.invoke(
            'GET', '/v1/externalmetrics/chain/listing', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1MetricInfo>.class
        );
    }
    /**
     * Historical metrics for the exchange
     * Get exchange metrics history.
     * @param metricId Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;) (required)
     * @param exchangeId Exchange identifier (e.g., &#x60;BINANCE&#x60;, &#x60;UNISWAP-V3-ETHEREUM&#x60;) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)
     * @param r_limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List<Object>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<Object> v1ExternalmetricsExchangeHistoryGet(Map<String, Object> params) {
        client.assertNotNull(params.get('metricId'), 'metricId');
        client.assertNotNull(params.get('exchangeId'), 'exchangeId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('metric_id', (String) params.get('metricId')));
        query.addAll(client.makeParam('exchange_id', (String) params.get('exchangeId')));
        query.addAll(client.makeParam('time_start', (Datetime) params.get('timeStart')));
        query.addAll(client.makeParam('time_end', (Datetime) params.get('timeEnd')));
        query.addAll(client.makeParam('time_format', (String) params.get('timeFormat')));
        query.addAll(client.makeParam('period_id', (String) params.get('periodId')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<Object>) client.invoke(
            'GET', '/v1/externalmetrics/exchange/history', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<Object>.class
        );
    }
    /**
     * Listing of metrics available for specific exchange
     * Get all metrics that are actually available for the specified exchange.
     * @param exchangeId Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM) (required)
     * @return List<OASV1MetricInfo>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1MetricInfo> v1ExternalmetricsExchangeListingGet(Map<String, Object> params) {
        client.assertNotNull(params.get('exchangeId'), 'exchangeId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('exchange_id', (String) params.get('exchangeId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1MetricInfo>) client.invoke(
            'GET', '/v1/externalmetrics/exchange/listing', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1MetricInfo>.class
        );
    }
    /**
     * Listing of all supported metrics
     * Get all metrics available in the system.
     * @return List<OASV1MetricInfo>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1MetricInfo> v1ExternalmetricsListingGet() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1MetricInfo>) client.invoke(
            'GET', '/v1/externalmetrics/listing', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1MetricInfo>.class
        );
    }
}
