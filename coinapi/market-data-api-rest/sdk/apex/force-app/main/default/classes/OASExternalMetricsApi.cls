/*
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASExternalMetricsApi {
    OASClient client;

    public OASExternalMetricsApi(OASClient client) {
        this.client = client;
    }

    public OASExternalMetricsApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Historical metrics for the asset from external sources
     * Get asset metrics history from external data providers. Data is typically aggregated daily.
     * @param metricId Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; - internal metric key) (required)
     * @param assetId Asset identifier (e.g., &#x60;USDC&#x60;, &#x60;USDT&#x60; - from supported assets list) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)
     * @param r_limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List<Object>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<Object> v1ExternalmetricsAssetHistoryGet(Map<String, Object> params) {
        client.assertNotNull(params.get('metricId'), 'metricId');
        client.assertNotNull(params.get('assetId'), 'assetId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('metric_id', (String) params.get('metricId')));
        query.addAll(client.makeParam('asset_id', (String) params.get('assetId')));
        query.addAll(client.makeParam('time_start', (Datetime) params.get('timeStart')));
        query.addAll(client.makeParam('time_end', (Datetime) params.get('timeEnd')));
        query.addAll(client.makeParam('time_format', (String) params.get('timeFormat')));
        query.addAll(client.makeParam('period_id', (String) params.get('periodId')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<Object>) client.invoke(
            'GET', '/v1/externalmetrics/asset/history', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<Object>.class
        );
    }
    /**
     * Listing of metrics available for specific asset
     * Get all metrics that are actually available for the specified asset from external providers.
     * @param assetId Asset identifier (e.g., USDC, USDT) (required)
     * @return List<OASV1MetricInfo>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1MetricInfo> v1ExternalmetricsAssetListingGet(Map<String, Object> params) {
        client.assertNotNull(params.get('assetId'), 'assetId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('asset_id', (String) params.get('assetId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1MetricInfo>) client.invoke(
            'GET', '/v1/externalmetrics/asset/listing', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<OASV1MetricInfo>.class
        );
    }
    /**
     * Listing of all supported external assets
     * Get all assets (primarily stablecoins) supported by external data providers.
     * @return List<OASV1ExternalAsset>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1ExternalAsset> v1ExternalmetricsAssetsGet() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1ExternalAsset>) client.invoke(
            'GET', '/v1/externalmetrics/assets', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<OASV1ExternalAsset>.class
        );
    }
    /**
     * Historical metrics for the chain from external sources
     * Get chain metrics history from external data providers. Data is typically aggregated daily.
     * @param metricId Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; - internal metric key) (required)
     * @param chainId Chain identifier (e.g., &#x60;Ethereum&#x60;, &#x60;Arbitrum&#x60; - from supported chains list) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)
     * @param r_limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List<Object>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<Object> v1ExternalmetricsChainHistoryGet(Map<String, Object> params) {
        client.assertNotNull(params.get('metricId'), 'metricId');
        client.assertNotNull(params.get('chainId'), 'chainId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('metric_id', (String) params.get('metricId')));
        query.addAll(client.makeParam('chain_id', (String) params.get('chainId')));
        query.addAll(client.makeParam('time_start', (Datetime) params.get('timeStart')));
        query.addAll(client.makeParam('time_end', (Datetime) params.get('timeEnd')));
        query.addAll(client.makeParam('time_format', (String) params.get('timeFormat')));
        query.addAll(client.makeParam('period_id', (String) params.get('periodId')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<Object>) client.invoke(
            'GET', '/v1/externalmetrics/chain/history', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<Object>.class
        );
    }
    /**
     * Listing of metrics available for specific chain
     * Get all metrics that are actually available for the specified blockchain chain from external providers.
     * @param chainId Chain identifier (e.g., ETHEREUM, ARBITRUM) (required)
     * @return List<OASV1MetricInfo>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1MetricInfo> v1ExternalmetricsChainListingGet(Map<String, Object> params) {
        client.assertNotNull(params.get('chainId'), 'chainId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('chain_id', (String) params.get('chainId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1MetricInfo>) client.invoke(
            'GET', '/v1/externalmetrics/chain/listing', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<OASV1MetricInfo>.class
        );
    }
    /**
     * Listing of all supported external chains
     * Get all blockchain chains supported by external data providers.
     * @return List<OASV1Chain>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1Chain> v1ExternalmetricsChainsGet() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1Chain>) client.invoke(
            'GET', '/v1/externalmetrics/chains', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<OASV1Chain>.class
        );
    }
    /**
     * Historical metrics for the exchange from both external and internal sources
     * Get exchange metrics history from external data providers or internal sources based on metric type.
     * @param metricId Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; for external, or generic metric IDs) (required)
     * @param exchangeId Exchange identifier (e.g., &#x60;BINANCE&#x60;, &#x60;UNISWAP-V3-ETHEREUM&#x60;) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)
     * @param r_limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List<Object>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<Object> v1ExternalmetricsExchangeHistoryGet(Map<String, Object> params) {
        client.assertNotNull(params.get('metricId'), 'metricId');
        client.assertNotNull(params.get('exchangeId'), 'exchangeId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('metric_id', (String) params.get('metricId')));
        query.addAll(client.makeParam('exchange_id', (String) params.get('exchangeId')));
        query.addAll(client.makeParam('time_start', (Datetime) params.get('timeStart')));
        query.addAll(client.makeParam('time_end', (Datetime) params.get('timeEnd')));
        query.addAll(client.makeParam('time_format', (String) params.get('timeFormat')));
        query.addAll(client.makeParam('period_id', (String) params.get('periodId')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<Object>) client.invoke(
            'GET', '/v1/externalmetrics/exchange/history', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<Object>.class
        );
    }
    /**
     * Listing of metrics available for specific exchange (both external and generic)
     * Get all metrics that are actually available for the specified exchange from both external providers and internal sources.
     * @param exchangeId Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM) (required)
     * @return List<OASV1MetricInfo>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1MetricInfo> v1ExternalmetricsExchangeListingGet(Map<String, Object> params) {
        client.assertNotNull(params.get('exchangeId'), 'exchangeId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('exchange_id', (String) params.get('exchangeId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1MetricInfo>) client.invoke(
            'GET', '/v1/externalmetrics/exchange/listing', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<OASV1MetricInfo>.class
        );
    }
    /**
     * Listing of all supported external exchanges
     * Get all exchanges that have mapping to external data providers for metrics that actually have sources.\r\nOnly returns exchanges that are properly mapped to external protocols for metrics with defined sources.
     * @return List<OASV1ExternalExchange>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1ExternalExchange> v1ExternalmetricsExchangesGet() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1ExternalExchange>) client.invoke(
            'GET', '/v1/externalmetrics/exchanges', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<OASV1ExternalExchange>.class
        );
    }
    /**
     * Listing of all supported metrics (both external and generic)
     * Get all metrics available from external data providers and internal generic metrics.\r\nExternal metrics have detailed descriptions, while generic metrics are marked as such.
     * @return List<OASV1MetricInfo>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1MetricInfo> v1ExternalmetricsListingGet() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1MetricInfo>) client.invoke(
            'GET', '/v1/externalmetrics/listing', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<OASV1MetricInfo>.class
        );
    }
}
