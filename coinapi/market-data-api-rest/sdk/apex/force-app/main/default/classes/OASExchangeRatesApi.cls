/*
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASExchangeRatesApi {
    OASClient client;

    public OASExchangeRatesApi(OASClient client) {
        this.client = client;
    }

    public OASExchangeRatesApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Get specific rate
     * Retrieves the exchange rate for a specific base and quote asset at a given time or the current rate.\n            \n:::info\nIf you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements.\n:::
     * @param assetIdBase Requested exchange rate base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param assetIdQuote Requested exchange rate quote asset identifier (from the Metadata -&gt; Assets) (required)
     * @param r_time Time at which exchange rate is calculated (optional, if not supplied then current rate is returned) (optional)
     * @return OASV1ExchangeRate
     * @throws OAS.ApiException if fails to make API call
     */
    public OASV1ExchangeRate getSpecificRate(Map<String, Object> params) {
        client.assertNotNull(params.get('assetIdBase'), 'assetIdBase');
        client.assertNotNull(params.get('assetIdQuote'), 'assetIdQuote');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('time', (String) params.get('r_time')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASV1ExchangeRate) client.invoke(
            'GET', '/v1/exchangerate/{asset_id_base}/{asset_id_quote}', '',
            query, form,
            new Map<String, Object>{
                'asset_id_base' => (String) params.get('assetIdBase'),
                'asset_id_quote' => (String) params.get('assetIdQuote')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            OASV1ExchangeRate.class
        );
    }
    /**
     * Timeseries data
     * Get the historical exchange rates between two assets in the form of the timeseries.
     * @param assetIdBase Requested exchange rates base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param assetIdQuote Requested exchange rates base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param periodId Identifier of requested timeseries period (required, e.g. &#x60;5SEC&#x60; or &#x60;1HRS&#x60;) (optional)
     * @param timeStart Timeseries starting time in ISO 8601 (required) (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (required) (optional)
     * @param r_limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List<OASV1ExchangeRatesTimeseriesItem>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1ExchangeRatesTimeseriesItem> v1ExchangerateAssetIdBaseAssetIdQuoteHistoryGet(Map<String, Object> params) {
        client.assertNotNull(params.get('assetIdBase'), 'assetIdBase');
        client.assertNotNull(params.get('assetIdQuote'), 'assetIdQuote');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('period_id', (String) params.get('periodId')));
        query.addAll(client.makeParam('time_start', (String) params.get('timeStart')));
        query.addAll(client.makeParam('time_end', (String) params.get('timeEnd')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1ExchangeRatesTimeseriesItem>) client.invoke(
            'GET', '/v1/exchangerate/{asset_id_base}/{asset_id_quote}/history', '',
            query, form,
            new Map<String, Object>{
                'asset_id_base' => (String) params.get('assetIdBase'),
                'asset_id_quote' => (String) params.get('assetIdQuote')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1ExchangeRatesTimeseriesItem>.class
        );
    }
    /**
     * Get all current rates
     * Get the current exchange rate between requested asset and all other assets.\n            \n:::info\nIf you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements.\n:::\n            \n:::info\nYou can invert the rates by using Y &#x3D; 1 / X equation, for example BTC/USD &#x3D; 1 / (USD/BTC);\n:::
     * @param assetIdBase Requested exchange rates base asset identifier (from the Metadata -&gt; Assets) (required)
     * @param filterAssetId Comma or semicolon delimited asset identifiers used to filter response (optional) (optional)
     * @param invert True will invert all the rates (optional, if true then rates will be calculated as &#x60;rate &#x3D; 1 / actual_rate&#x60; eg. &#x60;USD/BTC&#x60; as &#x60;BTC/USD&#x60;) (optional, default to false)
     * @param r_time Time for historical rates (optional) (optional)
     * @return OASV1ExchangeRates
     * @throws OAS.ApiException if fails to make API call
     */
    public OASV1ExchangeRates v1ExchangerateAssetIdBaseGet(Map<String, Object> params) {
        client.assertNotNull(params.get('assetIdBase'), 'assetIdBase');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('filter_asset_id', (String) params.get('filterAssetId')));
        query.addAll(client.makeParam('invert', (Boolean) params.get('invert')));
        query.addAll(client.makeParam('time', (String) params.get('r_time')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASV1ExchangeRates) client.invoke(
            'GET', '/v1/exchangerate/{asset_id_base}', '',
            query, form,
            new Map<String, Object>{
                'asset_id_base' => (String) params.get('assetIdBase')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            OASV1ExchangeRates.class
        );
    }
    /**
     * Timeseries periods
     * You can also obtain historical exchange rates of any asset pair, grouped into time periods.\nGet full list of supported time periods available for requesting exchange rates historical timeseries data.\n            \n## Timeseries periods\nTime unit |	Period identifiers\n--- | ---\nSecond | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC\nMinute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN\nHour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS\nDay | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY
     * @return List<OASV1TimeseriesPeriod>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1TimeseriesPeriod> v1ExchangerateHistoryPeriodsGet() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1TimeseriesPeriod>) client.invoke(
            'GET', '/v1/exchangerate/history/periods', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1TimeseriesPeriod>.class
        );
    }
}
