/*
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Represents a symbol data model.
 */
public class OASV1Symbol implements OAS.MappedProperties {
    /**
     * The symbol identifier.
     * @return symbolId
     */
    public String symbolId { get; set; }

    /**
     * The exchange identifier.
     * @return exchangeId
     */
    public String exchangeId { get; set; }

    /**
     * The symbol type.
     * @return symbolType
     */
    public String symbolType { get; set; }

    /**
     * The base asset identifier.
     * @return assetIdBase
     */
    public String assetIdBase { get; set; }

    /**
     * The quote asset identifier.
     * @return assetIdQuote
     */
    public String assetIdQuote { get; set; }

    /**
     * The unit asset identifier.
     * @return assetIdUnit
     */
    public String assetIdUnit { get; set; }

    /**
     * The contract unit for futures.
     * @return futureContractUnit
     */
    public Double futureContractUnit { get; set; }

    /**
     * The asset used as the unit for futures contract.
     * @return futureContractUnitAsset
     */
    public String futureContractUnitAsset { get; set; }

    /**
     * The future delivery time for futures contract.
     * @return futureDeliveryTime
     */
    public Datetime futureDeliveryTime { get; set; }

    /**
     * Indicates whether the option type is a call.
     * @return optionTypeIsCall
     */
    public Boolean optionTypeIsCall { get; set; }

    /**
     * The strike price for options.
     * @return optionStrikePrice
     */
    public Double optionStrikePrice { get; set; }

    /**
     * The contract unit for options.
     * @return optionContractUnit
     */
    public Double optionContractUnit { get; set; }

    /**
     * The exercise style for options.
     * @return optionExerciseStyle
     */
    public String optionExerciseStyle { get; set; }

    /**
     * The expiration time for options.
     * @return optionExpirationTime
     */
    public Datetime optionExpirationTime { get; set; }

    /**
     * The delivery time for contracts.
     * @return contractDeliveryTime
     */
    public Datetime contractDeliveryTime { get; set; }

    /**
     * The contract unit for contracts.
     * @return contractUnit
     */
    public Double contractUnit { get; set; }

    /**
     * The asset used as the unit for contracts.
     * @return contractUnitAsset
     */
    public String contractUnitAsset { get; set; }

    /**
     * The contract identifier.
     * @return contractId
     */
    public String contractId { get; set; }

    /**
     * The display name of the contract.
     * @return contractDisplayName
     */
    public String contractDisplayName { get; set; }

    /**
     * The display description of the contract.
     * @return contractDisplayDescription
     */
    public String contractDisplayDescription { get; set; }

    /**
     * Get dataStart
     * @return dataStart
     */
    public String dataStart { get; private set; }

    /**
     * Get dataEnd
     * @return dataEnd
     */
    public String dataEnd { get; private set; }

    /**
     * The start date of quote data.
     * @return dataQuoteStart
     */
    public Datetime dataQuoteStart { get; set; }

    /**
     * The end date of quote data.
     * @return dataQuoteEnd
     */
    public Datetime dataQuoteEnd { get; set; }

    /**
     * The start date of order book data.
     * @return dataOrderbookStart
     */
    public Datetime dataOrderbookStart { get; set; }

    /**
     * The end date of order book data.
     * @return dataOrderbookEnd
     */
    public Datetime dataOrderbookEnd { get; set; }

    /**
     * The start date of trade data.
     * @return dataTradeStart
     */
    public Datetime dataTradeStart { get; set; }

    /**
     * The end date of trade data.
     * @return dataTradeEnd
     */
    public Datetime dataTradeEnd { get; set; }

    /**
     * The index identifier.
     * @return indexId
     */
    public String indexId { get; set; }

    /**
     * The display name of the index.
     * @return indexDisplayName
     */
    public String indexDisplayName { get; set; }

    /**
     * The display description of the index.
     * @return indexDisplayDescription
     */
    public String indexDisplayDescription { get; set; }

    /**
     * The volume in the last 1 hour.
     * @return volume1hrs
     */
    public Double volume1hrs { get; set; }

    /**
     * The volume in USD in the last 1 hour.
     * @return volume1hrsUsd
     */
    public Double volume1hrsUsd { get; set; }

    /**
     * The volume in the last 1 day.
     * @return volume1day
     */
    public Double volume1day { get; set; }

    /**
     * The volume in USD in the last 1 day.
     * @return volume1dayUsd
     */
    public Double volume1dayUsd { get; set; }

    /**
     * The volume in the last 1 month.
     * @return volume1mth
     */
    public Double volume1mth { get; set; }

    /**
     * The volume in USD in the last 1 month.
     * @return volume1mthUsd
     */
    public Double volume1mthUsd { get; set; }

    /**
     * The price.
     * @return price
     */
    public Double price { get; set; }

    /**
     * The symbol identifier in the exchange.
     * @return symbolIdExchange
     */
    public String symbolIdExchange { get; set; }

    /**
     * The base asset identifier in the exchange.
     * @return assetIdBaseExchange
     */
    public String assetIdBaseExchange { get; set; }

    /**
     * The quote asset identifier in the exchange.
     * @return assetIdQuoteExchange
     */
    public String assetIdQuoteExchange { get; set; }

    /**
     * The price precision.
     * @return pricePrecision
     */
    public Double pricePrecision { get; set; }

    /**
     * The size precision.
     * @return sizePrecision
     */
    public Double sizePrecision { get; set; }

    /**
     * Not normalized raw kvp data.
     * @return rawKvp
     */
    public Map<String, String> rawKvp { get; set; }

    /**
     * Volume unit in USD.
     * @return volumeToUsd
     */
    public Double volumeToUsd { get; set; }

    /**
     * The symbol identifier in integer immutable format, used to correlate data across different APIs.
     * @return symbolIdInteger
     */
    public Integer symbolIdInteger { get; private set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'symbol_id' => 'symbolId',
        'exchange_id' => 'exchangeId',
        'symbol_type' => 'symbolType',
        'asset_id_base' => 'assetIdBase',
        'asset_id_quote' => 'assetIdQuote',
        'asset_id_unit' => 'assetIdUnit',
        'future_contract_unit' => 'futureContractUnit',
        'future_contract_unit_asset' => 'futureContractUnitAsset',
        'future_delivery_time' => 'futureDeliveryTime',
        'option_type_is_call' => 'optionTypeIsCall',
        'option_strike_price' => 'optionStrikePrice',
        'option_contract_unit' => 'optionContractUnit',
        'option_exercise_style' => 'optionExerciseStyle',
        'option_expiration_time' => 'optionExpirationTime',
        'contract_delivery_time' => 'contractDeliveryTime',
        'contract_unit' => 'contractUnit',
        'contract_unit_asset' => 'contractUnitAsset',
        'contract_id' => 'contractId',
        'contract_display_name' => 'contractDisplayName',
        'contract_display_description' => 'contractDisplayDescription',
        'data_start' => 'dataStart',
        'data_end' => 'dataEnd',
        'data_quote_start' => 'dataQuoteStart',
        'data_quote_end' => 'dataQuoteEnd',
        'data_orderbook_start' => 'dataOrderbookStart',
        'data_orderbook_end' => 'dataOrderbookEnd',
        'data_trade_start' => 'dataTradeStart',
        'data_trade_end' => 'dataTradeEnd',
        'index_id' => 'indexId',
        'index_display_name' => 'indexDisplayName',
        'index_display_description' => 'indexDisplayDescription',
        'volume_1hrs' => 'volume1hrs',
        'volume_1hrs_usd' => 'volume1hrsUsd',
        'volume_1day' => 'volume1day',
        'volume_1day_usd' => 'volume1dayUsd',
        'volume_1mth' => 'volume1mth',
        'volume_1mth_usd' => 'volume1mthUsd',
        'symbol_id_exchange' => 'symbolIdExchange',
        'asset_id_base_exchange' => 'assetIdBaseExchange',
        'asset_id_quote_exchange' => 'assetIdQuoteExchange',
        'price_precision' => 'pricePrecision',
        'size_precision' => 'sizePrecision',
        'raw_kvp' => 'rawKvp',
        'volume_to_usd' => 'volumeToUsd',
        'symbol_id_integer' => 'symbolIdInteger'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASV1Symbol() {
        rawKvp = new Map<String, String>();
    }

    public static OASV1Symbol getExample() {
        OASV1Symbol v1Symbol = new OASV1Symbol();
          v1Symbol.symbolId = '';
          v1Symbol.exchangeId = '';
          v1Symbol.symbolType = '';
          v1Symbol.assetIdBase = '';
          v1Symbol.assetIdQuote = '';
          v1Symbol.assetIdUnit = '';
          v1Symbol.futureContractUnit = 1.3579;
          v1Symbol.futureContractUnitAsset = '';
          v1Symbol.futureDeliveryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          v1Symbol.optionTypeIsCall = true;
          v1Symbol.optionStrikePrice = 1.3579;
          v1Symbol.optionContractUnit = 1.3579;
          v1Symbol.optionExerciseStyle = '';
          v1Symbol.optionExpirationTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          v1Symbol.contractDeliveryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          v1Symbol.contractUnit = 1.3579;
          v1Symbol.contractUnitAsset = '';
          v1Symbol.contractId = '';
          v1Symbol.contractDisplayName = '';
          v1Symbol.contractDisplayDescription = '';
          v1Symbol.dataStart = '';
          v1Symbol.dataEnd = '';
          v1Symbol.dataQuoteStart = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          v1Symbol.dataQuoteEnd = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          v1Symbol.dataOrderbookStart = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          v1Symbol.dataOrderbookEnd = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          v1Symbol.dataTradeStart = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          v1Symbol.dataTradeEnd = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          v1Symbol.indexId = '';
          v1Symbol.indexDisplayName = '';
          v1Symbol.indexDisplayDescription = '';
          v1Symbol.volume1hrs = 1.3579;
          v1Symbol.volume1hrsUsd = 1.3579;
          v1Symbol.volume1day = 1.3579;
          v1Symbol.volume1dayUsd = 1.3579;
          v1Symbol.volume1mth = 1.3579;
          v1Symbol.volume1mthUsd = 1.3579;
          v1Symbol.price = 1.3579;
          v1Symbol.symbolIdExchange = '';
          v1Symbol.assetIdBaseExchange = '';
          v1Symbol.assetIdQuoteExchange = '';
          v1Symbol.pricePrecision = 1.3579;
          v1Symbol.sizePrecision = 1.3579;
          v1Symbol.rawKvp = new Map<String, String>{'key'=>''};
          v1Symbol.volumeToUsd = 1.3579;
          v1Symbol.symbolIdInteger = 0;
        return v1Symbol;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASV1Symbol) {           
            OASV1Symbol v1Symbol = (OASV1Symbol) obj;
            return this.symbolId == v1Symbol.symbolId
                && this.exchangeId == v1Symbol.exchangeId
                && this.symbolType == v1Symbol.symbolType
                && this.assetIdBase == v1Symbol.assetIdBase
                && this.assetIdQuote == v1Symbol.assetIdQuote
                && this.assetIdUnit == v1Symbol.assetIdUnit
                && this.futureContractUnit == v1Symbol.futureContractUnit
                && this.futureContractUnitAsset == v1Symbol.futureContractUnitAsset
                && this.futureDeliveryTime == v1Symbol.futureDeliveryTime
                && this.optionTypeIsCall == v1Symbol.optionTypeIsCall
                && this.optionStrikePrice == v1Symbol.optionStrikePrice
                && this.optionContractUnit == v1Symbol.optionContractUnit
                && this.optionExerciseStyle == v1Symbol.optionExerciseStyle
                && this.optionExpirationTime == v1Symbol.optionExpirationTime
                && this.contractDeliveryTime == v1Symbol.contractDeliveryTime
                && this.contractUnit == v1Symbol.contractUnit
                && this.contractUnitAsset == v1Symbol.contractUnitAsset
                && this.contractId == v1Symbol.contractId
                && this.contractDisplayName == v1Symbol.contractDisplayName
                && this.contractDisplayDescription == v1Symbol.contractDisplayDescription
                && this.dataStart == v1Symbol.dataStart
                && this.dataEnd == v1Symbol.dataEnd
                && this.dataQuoteStart == v1Symbol.dataQuoteStart
                && this.dataQuoteEnd == v1Symbol.dataQuoteEnd
                && this.dataOrderbookStart == v1Symbol.dataOrderbookStart
                && this.dataOrderbookEnd == v1Symbol.dataOrderbookEnd
                && this.dataTradeStart == v1Symbol.dataTradeStart
                && this.dataTradeEnd == v1Symbol.dataTradeEnd
                && this.indexId == v1Symbol.indexId
                && this.indexDisplayName == v1Symbol.indexDisplayName
                && this.indexDisplayDescription == v1Symbol.indexDisplayDescription
                && this.volume1hrs == v1Symbol.volume1hrs
                && this.volume1hrsUsd == v1Symbol.volume1hrsUsd
                && this.volume1day == v1Symbol.volume1day
                && this.volume1dayUsd == v1Symbol.volume1dayUsd
                && this.volume1mth == v1Symbol.volume1mth
                && this.volume1mthUsd == v1Symbol.volume1mthUsd
                && this.price == v1Symbol.price
                && this.symbolIdExchange == v1Symbol.symbolIdExchange
                && this.assetIdBaseExchange == v1Symbol.assetIdBaseExchange
                && this.assetIdQuoteExchange == v1Symbol.assetIdQuoteExchange
                && this.pricePrecision == v1Symbol.pricePrecision
                && this.sizePrecision == v1Symbol.sizePrecision
                && this.rawKvp == v1Symbol.rawKvp
                && this.volumeToUsd == v1Symbol.volumeToUsd
                && this.symbolIdInteger == v1Symbol.symbolIdInteger;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (symbolId == null ? 0 : System.hashCode(symbolId));
        hashCode = (17 * hashCode) + (exchangeId == null ? 0 : System.hashCode(exchangeId));
        hashCode = (17 * hashCode) + (symbolType == null ? 0 : System.hashCode(symbolType));
        hashCode = (17 * hashCode) + (assetIdBase == null ? 0 : System.hashCode(assetIdBase));
        hashCode = (17 * hashCode) + (assetIdQuote == null ? 0 : System.hashCode(assetIdQuote));
        hashCode = (17 * hashCode) + (assetIdUnit == null ? 0 : System.hashCode(assetIdUnit));
        hashCode = (17 * hashCode) + (futureContractUnit == null ? 0 : System.hashCode(futureContractUnit));
        hashCode = (17 * hashCode) + (futureContractUnitAsset == null ? 0 : System.hashCode(futureContractUnitAsset));
        hashCode = (17 * hashCode) + (futureDeliveryTime == null ? 0 : System.hashCode(futureDeliveryTime));
        hashCode = (17 * hashCode) + (optionTypeIsCall == null ? 0 : System.hashCode(optionTypeIsCall));
        hashCode = (17 * hashCode) + (optionStrikePrice == null ? 0 : System.hashCode(optionStrikePrice));
        hashCode = (17 * hashCode) + (optionContractUnit == null ? 0 : System.hashCode(optionContractUnit));
        hashCode = (17 * hashCode) + (optionExerciseStyle == null ? 0 : System.hashCode(optionExerciseStyle));
        hashCode = (17 * hashCode) + (optionExpirationTime == null ? 0 : System.hashCode(optionExpirationTime));
        hashCode = (17 * hashCode) + (contractDeliveryTime == null ? 0 : System.hashCode(contractDeliveryTime));
        hashCode = (17 * hashCode) + (contractUnit == null ? 0 : System.hashCode(contractUnit));
        hashCode = (17 * hashCode) + (contractUnitAsset == null ? 0 : System.hashCode(contractUnitAsset));
        hashCode = (17 * hashCode) + (contractId == null ? 0 : System.hashCode(contractId));
        hashCode = (17 * hashCode) + (contractDisplayName == null ? 0 : System.hashCode(contractDisplayName));
        hashCode = (17 * hashCode) + (contractDisplayDescription == null ? 0 : System.hashCode(contractDisplayDescription));
        hashCode = (17 * hashCode) + (dataStart == null ? 0 : System.hashCode(dataStart));
        hashCode = (17 * hashCode) + (dataEnd == null ? 0 : System.hashCode(dataEnd));
        hashCode = (17 * hashCode) + (dataQuoteStart == null ? 0 : System.hashCode(dataQuoteStart));
        hashCode = (17 * hashCode) + (dataQuoteEnd == null ? 0 : System.hashCode(dataQuoteEnd));
        hashCode = (17 * hashCode) + (dataOrderbookStart == null ? 0 : System.hashCode(dataOrderbookStart));
        hashCode = (17 * hashCode) + (dataOrderbookEnd == null ? 0 : System.hashCode(dataOrderbookEnd));
        hashCode = (17 * hashCode) + (dataTradeStart == null ? 0 : System.hashCode(dataTradeStart));
        hashCode = (17 * hashCode) + (dataTradeEnd == null ? 0 : System.hashCode(dataTradeEnd));
        hashCode = (17 * hashCode) + (indexId == null ? 0 : System.hashCode(indexId));
        hashCode = (17 * hashCode) + (indexDisplayName == null ? 0 : System.hashCode(indexDisplayName));
        hashCode = (17 * hashCode) + (indexDisplayDescription == null ? 0 : System.hashCode(indexDisplayDescription));
        hashCode = (17 * hashCode) + (volume1hrs == null ? 0 : System.hashCode(volume1hrs));
        hashCode = (17 * hashCode) + (volume1hrsUsd == null ? 0 : System.hashCode(volume1hrsUsd));
        hashCode = (17 * hashCode) + (volume1day == null ? 0 : System.hashCode(volume1day));
        hashCode = (17 * hashCode) + (volume1dayUsd == null ? 0 : System.hashCode(volume1dayUsd));
        hashCode = (17 * hashCode) + (volume1mth == null ? 0 : System.hashCode(volume1mth));
        hashCode = (17 * hashCode) + (volume1mthUsd == null ? 0 : System.hashCode(volume1mthUsd));
        hashCode = (17 * hashCode) + (price == null ? 0 : System.hashCode(price));
        hashCode = (17 * hashCode) + (symbolIdExchange == null ? 0 : System.hashCode(symbolIdExchange));
        hashCode = (17 * hashCode) + (assetIdBaseExchange == null ? 0 : System.hashCode(assetIdBaseExchange));
        hashCode = (17 * hashCode) + (assetIdQuoteExchange == null ? 0 : System.hashCode(assetIdQuoteExchange));
        hashCode = (17 * hashCode) + (pricePrecision == null ? 0 : System.hashCode(pricePrecision));
        hashCode = (17 * hashCode) + (sizePrecision == null ? 0 : System.hashCode(sizePrecision));
        hashCode = (17 * hashCode) + (rawKvp == null ? 0 : System.hashCode(rawKvp));
        hashCode = (17 * hashCode) + (volumeToUsd == null ? 0 : System.hashCode(volumeToUsd));
        hashCode = (17 * hashCode) + (symbolIdInteger == null ? 0 : System.hashCode(symbolIdInteger));
        return hashCode;
    }
}

