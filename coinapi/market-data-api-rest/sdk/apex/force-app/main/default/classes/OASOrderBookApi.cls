/*
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASOrderBookApi {
    OASClient client;

    public OASOrderBookApi(OASClient client) {
        this.client = client;
    }

    public OASOrderBookApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Get current order book
     * Retrieves the current order book for the specified symbol.
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @return OASV1OrderBookBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASV1OrderBookBase v1OrderbooksSymbolIdCurrentGet(Map<String, Object> params) {
        client.assertNotNull(params.get('symbolId'), 'symbolId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('limit_levels', (Integer) params.get('limitLevels')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASV1OrderBookBase) client.invoke(
            'GET', '/v1/orderbooks/{symbol_id}/current', '',
            query, form,
            new Map<String, Object>{
                'symbol_id' => (String) params.get('symbolId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            OASV1OrderBookBase.class
        );
    }
    /**
     * Current depth of the order book
     * Retrieves the current depth of the order book for the specified symbol.
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @return OASV1OrderBookDepth
     * @throws OAS.ApiException if fails to make API call
     */
    public OASV1OrderBookDepth v1OrderbooksSymbolIdDepthCurrentGet(Map<String, Object> params) {
        client.assertNotNull(params.get('symbolId'), 'symbolId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('limit_levels', (Integer) params.get('limitLevels')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASV1OrderBookDepth) client.invoke(
            'GET', '/v1/orderbooks/{symbol_id}/depth/current', '',
            query, form,
            new Map<String, Object>{
                'symbol_id' => (String) params.get('symbolId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            OASV1OrderBookDepth.class
        );
    }
    /**
     * Historical data
     * Get historical order book snapshots for a specific symbol within time range, returned in time ascending order.\n            \n:::info\nThe historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels.\n:::\n\n:::warning\nThe \&#39;time_start\&#39; and \&#39;time_end\&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day.\nPlease use the \&#39;date\&#39; parameter instead for querying data for a specific day without filter.\n:::
     * @param symbolId Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param r_date Date in ISO 8601, returned data is for the whole given day (preferred method, required if \&#39;time_start\&#39; is not provided) (optional)
     * @param timeStart Starting time in ISO 8601 (deprecated, use \&#39;date\&#39; instead) (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (deprecated, use \&#39;date\&#39; instead) (optional)
     * @param r_limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @return List<OASV1OrderBook>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1OrderBook> v1OrderbooksSymbolIdHistoryGet(Map<String, Object> params) {
        client.assertNotNull(params.get('symbolId'), 'symbolId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('date', (String) params.get('r_date')));
        query.addAll(client.makeParam('time_start', (String) params.get('timeStart')));
        query.addAll(client.makeParam('time_end', (String) params.get('timeEnd')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));
        query.addAll(client.makeParam('limit_levels', (Integer) params.get('limitLevels')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1OrderBook>) client.invoke(
            'GET', '/v1/orderbooks/{symbol_id}/history', '',
            query, form,
            new Map<String, Object>{
                'symbol_id' => (String) params.get('symbolId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1OrderBook>.class
        );
    }
    /**
     * Latest data
     * Get latest order book snapshots for a specific symbol, returned in time descending order.\n            \n:::info\nThe historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels.\n:::
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param r_limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @return List<OASV1OrderBook>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASV1OrderBook> v1OrderbooksSymbolIdLatestGet(Map<String, Object> params) {
        client.assertNotNull(params.get('symbolId'), 'symbolId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));
        query.addAll(client.makeParam('limit_levels', (Integer) params.get('limitLevels')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASV1OrderBook>) client.invoke(
            'GET', '/v1/orderbooks/{symbol_id}/latest', '',
            query, form,
            new Map<String, Object>{
                'symbol_id' => (String) params.get('symbolId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASV1OrderBook>.class
        );
    }
}
