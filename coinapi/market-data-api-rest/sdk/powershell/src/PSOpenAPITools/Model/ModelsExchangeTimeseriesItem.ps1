#
# CoinAPI Market Data REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents a timeseries item with price and volume information.

.PARAMETER TimePeriodStart
The start time of the time period.
.PARAMETER TimePeriodEnd
The end time of the time period.
.PARAMETER TimeOpen
The time when the price opened.
.PARAMETER TimeClose
The time when the price closed.
.PARAMETER PriceOpen
The opening price.
.PARAMETER PriceHigh
The highest price during the time period.
.PARAMETER PriceLow
The lowest price during the time period.
.PARAMETER PriceClose
The closing price.
.PARAMETER VolumeTraded
The total volume traded during the time period.
.PARAMETER TradesCount
The number of trades executed during the time period.
.PARAMETER SymbolIdExchange
No description available.
.PARAMETER SymbolIdCoinapi
No description available.
.OUTPUTS

ModelsExchangeTimeseriesItem<PSCustomObject>
#>

function Initialize-ModelsExchangeTimeseriesItem {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${TimePeriodStart},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${TimePeriodEnd},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${TimeOpen},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${TimeClose},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${PriceOpen},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${PriceHigh},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${PriceLow},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${PriceClose},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${VolumeTraded},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TradesCount},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SymbolIdExchange},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SymbolIdCoinapi}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ModelsExchangeTimeseriesItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "time_period_start" = ${TimePeriodStart}
            "time_period_end" = ${TimePeriodEnd}
            "time_open" = ${TimeOpen}
            "time_close" = ${TimeClose}
            "price_open" = ${PriceOpen}
            "price_high" = ${PriceHigh}
            "price_low" = ${PriceLow}
            "price_close" = ${PriceClose}
            "volume_traded" = ${VolumeTraded}
            "trades_count" = ${TradesCount}
            "symbol_id_exchange" = ${SymbolIdExchange}
            "symbol_id_coinapi" = ${SymbolIdCoinapi}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ModelsExchangeTimeseriesItem<PSCustomObject>

.DESCRIPTION

Convert from JSON to ModelsExchangeTimeseriesItem<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ModelsExchangeTimeseriesItem<PSCustomObject>
#>
function ConvertFrom-JsonToModelsExchangeTimeseriesItem {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ModelsExchangeTimeseriesItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ModelsExchangeTimeseriesItem
        $AllProperties = ("time_period_start", "time_period_end", "time_open", "time_close", "price_open", "price_high", "price_low", "price_close", "volume_traded", "trades_count", "symbol_id_exchange", "symbol_id_coinapi")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time_period_start"))) { #optional property not found
            $TimePeriodStart = $null
        } else {
            $TimePeriodStart = $JsonParameters.PSobject.Properties["time_period_start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time_period_end"))) { #optional property not found
            $TimePeriodEnd = $null
        } else {
            $TimePeriodEnd = $JsonParameters.PSobject.Properties["time_period_end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time_open"))) { #optional property not found
            $TimeOpen = $null
        } else {
            $TimeOpen = $JsonParameters.PSobject.Properties["time_open"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time_close"))) { #optional property not found
            $TimeClose = $null
        } else {
            $TimeClose = $JsonParameters.PSobject.Properties["time_close"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price_open"))) { #optional property not found
            $PriceOpen = $null
        } else {
            $PriceOpen = $JsonParameters.PSobject.Properties["price_open"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price_high"))) { #optional property not found
            $PriceHigh = $null
        } else {
            $PriceHigh = $JsonParameters.PSobject.Properties["price_high"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price_low"))) { #optional property not found
            $PriceLow = $null
        } else {
            $PriceLow = $JsonParameters.PSobject.Properties["price_low"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price_close"))) { #optional property not found
            $PriceClose = $null
        } else {
            $PriceClose = $JsonParameters.PSobject.Properties["price_close"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_traded"))) { #optional property not found
            $VolumeTraded = $null
        } else {
            $VolumeTraded = $JsonParameters.PSobject.Properties["volume_traded"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "trades_count"))) { #optional property not found
            $TradesCount = $null
        } else {
            $TradesCount = $JsonParameters.PSobject.Properties["trades_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol_id_exchange"))) { #optional property not found
            $SymbolIdExchange = $null
        } else {
            $SymbolIdExchange = $JsonParameters.PSobject.Properties["symbol_id_exchange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol_id_coinapi"))) { #optional property not found
            $SymbolIdCoinapi = $null
        } else {
            $SymbolIdCoinapi = $JsonParameters.PSobject.Properties["symbol_id_coinapi"].value
        }

        $PSO = [PSCustomObject]@{
            "time_period_start" = ${TimePeriodStart}
            "time_period_end" = ${TimePeriodEnd}
            "time_open" = ${TimeOpen}
            "time_close" = ${TimeClose}
            "price_open" = ${PriceOpen}
            "price_high" = ${PriceHigh}
            "price_low" = ${PriceLow}
            "price_close" = ${PriceClose}
            "volume_traded" = ${VolumeTraded}
            "trades_count" = ${TradesCount}
            "symbol_id_exchange" = ${SymbolIdExchange}
            "symbol_id_coinapi" = ${SymbolIdCoinapi}
        }

        return $PSO
    }

}

