#
# CoinAPI Market Data REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents an item in the exchange rate timeseries.

.PARAMETER TimePeriodStart
Gets or sets the start time of the period.
.PARAMETER TimePeriodEnd
Gets or sets the end time of the period.
.PARAMETER TimeOpen
Gets or sets the opening time of the period.
.PARAMETER TimeClose
Gets or sets the closing time of the period.
.PARAMETER RateOpen
Gets or sets the opening rate for the period.
.PARAMETER RateHigh
Gets or sets the highest rate for the period.
.PARAMETER RateLow
Gets or sets the lowest rate for the period.
.PARAMETER RateClose
Gets or sets the closing rate for the period.
.OUTPUTS

V1ExchangeRatesTimeseriesItem<PSCustomObject>
#>

function Initialize-V1ExchangeRatesTimeseriesItem {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${TimePeriodStart},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${TimePeriodEnd},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${TimeOpen},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${TimeClose},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${RateOpen},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${RateHigh},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${RateLow},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${RateClose}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => V1ExchangeRatesTimeseriesItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "time_period_start" = ${TimePeriodStart}
            "time_period_end" = ${TimePeriodEnd}
            "time_open" = ${TimeOpen}
            "time_close" = ${TimeClose}
            "rate_open" = ${RateOpen}
            "rate_high" = ${RateHigh}
            "rate_low" = ${RateLow}
            "rate_close" = ${RateClose}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to V1ExchangeRatesTimeseriesItem<PSCustomObject>

.DESCRIPTION

Convert from JSON to V1ExchangeRatesTimeseriesItem<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

V1ExchangeRatesTimeseriesItem<PSCustomObject>
#>
function ConvertFrom-JsonToV1ExchangeRatesTimeseriesItem {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => V1ExchangeRatesTimeseriesItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V1ExchangeRatesTimeseriesItem
        $AllProperties = ("time_period_start", "time_period_end", "time_open", "time_close", "rate_open", "rate_high", "rate_low", "rate_close")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time_period_start"))) { #optional property not found
            $TimePeriodStart = $null
        } else {
            $TimePeriodStart = $JsonParameters.PSobject.Properties["time_period_start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time_period_end"))) { #optional property not found
            $TimePeriodEnd = $null
        } else {
            $TimePeriodEnd = $JsonParameters.PSobject.Properties["time_period_end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time_open"))) { #optional property not found
            $TimeOpen = $null
        } else {
            $TimeOpen = $JsonParameters.PSobject.Properties["time_open"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time_close"))) { #optional property not found
            $TimeClose = $null
        } else {
            $TimeClose = $JsonParameters.PSobject.Properties["time_close"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rate_open"))) { #optional property not found
            $RateOpen = $null
        } else {
            $RateOpen = $JsonParameters.PSobject.Properties["rate_open"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rate_high"))) { #optional property not found
            $RateHigh = $null
        } else {
            $RateHigh = $JsonParameters.PSobject.Properties["rate_high"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rate_low"))) { #optional property not found
            $RateLow = $null
        } else {
            $RateLow = $JsonParameters.PSobject.Properties["rate_low"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rate_close"))) { #optional property not found
            $RateClose = $null
        } else {
            $RateClose = $JsonParameters.PSobject.Properties["rate_close"].value
        }

        $PSO = [PSCustomObject]@{
            "time_period_start" = ${TimePeriodStart}
            "time_period_end" = ${TimePeriodEnd}
            "time_open" = ${TimeOpen}
            "time_close" = ${TimeClose}
            "rate_open" = ${RateOpen}
            "rate_high" = ${RateHigh}
            "rate_low" = ${RateLow}
            "rate_close" = ${RateClose}
        }

        return $PSO
    }

}

