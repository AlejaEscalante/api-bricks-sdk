#
# CoinAPI Market Data REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents a listing item.

.PARAMETER MetricId
Gets or sets the metric ID.
.PARAMETER SymbolId
Gets or sets the symbol ID.
.PARAMETER SymbolIdExternal
Gets or sets the symbol ID from the exchange.
.PARAMETER ExchangeId
Gets or sets the exchange ID.
.PARAMETER AssetId
Gets or sets the asset ID.
.PARAMETER AssetIdExternal
Gets or sets the asset ID from the exchange.
.PARAMETER ChainId
Gets or sets the chain id.
.PARAMETER NetworkId
Gets or sets the network id.
.OUTPUTS

V1ListingItem<PSCustomObject>
#>

function Initialize-V1ListingItem {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MetricId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SymbolId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SymbolIdExternal},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExchangeId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetIdExternal},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ChainId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NetworkId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => V1ListingItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "metric_id" = ${MetricId}
            "symbol_id" = ${SymbolId}
            "symbol_id_external" = ${SymbolIdExternal}
            "exchange_id" = ${ExchangeId}
            "asset_id" = ${AssetId}
            "asset_id_external" = ${AssetIdExternal}
            "chain_id" = ${ChainId}
            "network_id" = ${NetworkId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to V1ListingItem<PSCustomObject>

.DESCRIPTION

Convert from JSON to V1ListingItem<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

V1ListingItem<PSCustomObject>
#>
function ConvertFrom-JsonToV1ListingItem {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => V1ListingItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V1ListingItem
        $AllProperties = ("metric_id", "symbol_id", "symbol_id_external", "exchange_id", "asset_id", "asset_id_external", "chain_id", "network_id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metric_id"))) { #optional property not found
            $MetricId = $null
        } else {
            $MetricId = $JsonParameters.PSobject.Properties["metric_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol_id"))) { #optional property not found
            $SymbolId = $null
        } else {
            $SymbolId = $JsonParameters.PSobject.Properties["symbol_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol_id_external"))) { #optional property not found
            $SymbolIdExternal = $null
        } else {
            $SymbolIdExternal = $JsonParameters.PSobject.Properties["symbol_id_external"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exchange_id"))) { #optional property not found
            $ExchangeId = $null
        } else {
            $ExchangeId = $JsonParameters.PSobject.Properties["exchange_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_id"))) { #optional property not found
            $AssetId = $null
        } else {
            $AssetId = $JsonParameters.PSobject.Properties["asset_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_id_external"))) { #optional property not found
            $AssetIdExternal = $null
        } else {
            $AssetIdExternal = $JsonParameters.PSobject.Properties["asset_id_external"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "chain_id"))) { #optional property not found
            $ChainId = $null
        } else {
            $ChainId = $JsonParameters.PSobject.Properties["chain_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "network_id"))) { #optional property not found
            $NetworkId = $null
        } else {
            $NetworkId = $JsonParameters.PSobject.Properties["network_id"].value
        }

        $PSO = [PSCustomObject]@{
            "metric_id" = ${MetricId}
            "symbol_id" = ${SymbolId}
            "symbol_id_external" = ${SymbolIdExternal}
            "exchange_id" = ${ExchangeId}
            "asset_id" = ${AssetId}
            "asset_id_external" = ${AssetIdExternal}
            "chain_id" = ${ChainId}
            "network_id" = ${NetworkId}
        }

        return $PSO
    }

}

