#
# REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Class representation of general metric data. This class is an XML type with name 'general_data' and inherits from the BaseCsvModel class.

.PARAMETER EntryTime
Gets or sets the entry time for the data point.
.PARAMETER RecvTime
Gets or sets the received time for the data point.
.PARAMETER ExchangeId
Gets or sets the identifier for the exchange.
.PARAMETER AssetId
Gets or sets the identifier for the asset.
.PARAMETER SymbolId
Gets or sets the identifier for the symbol.
.PARAMETER MetricId
Gets or sets the identifier for the metric.
.PARAMETER ValueDecimal
Gets or sets the decimal value for the metric.
.PARAMETER ValueText
Gets or sets the textual representation of the value for the metric.
.PARAMETER ValueTime
Gets or sets the timestamp value for the metric.
.OUTPUTS

V1GeneralData<PSCustomObject>
#>

function Initialize-V1GeneralData {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExchangeId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SymbolId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MetricId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${ValueDecimal},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ValueText},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ValueTime}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => V1GeneralData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "exchange_id" = ${ExchangeId}
            "asset_id" = ${AssetId}
            "symbol_id" = ${SymbolId}
            "metric_id" = ${MetricId}
            "value_decimal" = ${ValueDecimal}
            "value_text" = ${ValueText}
            "value_time" = ${ValueTime}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to V1GeneralData<PSCustomObject>

.DESCRIPTION

Convert from JSON to V1GeneralData<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

V1GeneralData<PSCustomObject>
#>
function ConvertFrom-JsonToV1GeneralData {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => V1GeneralData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V1GeneralData
        $AllProperties = ("entry_time", "recv_time", "exchange_id", "asset_id", "symbol_id", "metric_id", "value_decimal", "value_text", "value_time")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exchange_id"))) { #optional property not found
            $ExchangeId = $null
        } else {
            $ExchangeId = $JsonParameters.PSobject.Properties["exchange_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_id"))) { #optional property not found
            $AssetId = $null
        } else {
            $AssetId = $JsonParameters.PSobject.Properties["asset_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol_id"))) { #optional property not found
            $SymbolId = $null
        } else {
            $SymbolId = $JsonParameters.PSobject.Properties["symbol_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metric_id"))) { #optional property not found
            $MetricId = $null
        } else {
            $MetricId = $JsonParameters.PSobject.Properties["metric_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value_decimal"))) { #optional property not found
            $ValueDecimal = $null
        } else {
            $ValueDecimal = $JsonParameters.PSobject.Properties["value_decimal"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value_text"))) { #optional property not found
            $ValueText = $null
        } else {
            $ValueText = $JsonParameters.PSobject.Properties["value_text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value_time"))) { #optional property not found
            $ValueTime = $null
        } else {
            $ValueTime = $JsonParameters.PSobject.Properties["value_time"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "exchange_id" = ${ExchangeId}
            "asset_id" = ${AssetId}
            "symbol_id" = ${SymbolId}
            "metric_id" = ${MetricId}
            "value_decimal" = ${ValueDecimal}
            "value_text" = ${ValueText}
            "value_time" = ${ValueTime}
        }

        return $PSO
    }

}

