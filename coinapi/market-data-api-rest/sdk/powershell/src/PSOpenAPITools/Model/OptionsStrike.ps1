#
# CoinAPI Market Data REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents a strike within the option exchange group.

.PARAMETER StrikePrice
The strike price.
.PARAMETER Call
No description available.
.PARAMETER Put
No description available.
.OUTPUTS

OptionsStrike<PSCustomObject>
#>

function Initialize-OptionsStrike {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${StrikePrice},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Call},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Put}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => OptionsStrike' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "strike_price" = ${StrikePrice}
            "call" = ${Call}
            "put" = ${Put}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OptionsStrike<PSCustomObject>

.DESCRIPTION

Convert from JSON to OptionsStrike<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OptionsStrike<PSCustomObject>
#>
function ConvertFrom-JsonToOptionsStrike {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => OptionsStrike' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OptionsStrike
        $AllProperties = ("strike_price", "call", "put")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "strike_price"))) { #optional property not found
            $StrikePrice = $null
        } else {
            $StrikePrice = $JsonParameters.PSobject.Properties["strike_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "call"))) { #optional property not found
            $Call = $null
        } else {
            $Call = $JsonParameters.PSobject.Properties["call"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "put"))) { #optional property not found
            $Put = $null
        } else {
            $Put = $JsonParameters.PSobject.Properties["put"].value
        }

        $PSO = [PSCustomObject]@{
            "strike_price" = ${StrikePrice}
            "call" = ${Call}
            "put" = ${Put}
        }

        return $PSO
    }

}

