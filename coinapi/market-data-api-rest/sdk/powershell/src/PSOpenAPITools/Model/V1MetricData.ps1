#
# REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents a data model for metric data.

.PARAMETER SymbolId
Gets or sets the symbol id.
.PARAMETER Time
Gets or sets the time at which the value is recorded.
.PARAMETER Value
Gets or sets the value of the metric.
.OUTPUTS

V1MetricData<PSCustomObject>
#>

function Initialize-V1MetricData {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SymbolId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Time},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Value}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => V1MetricData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "symbol_id" = ${SymbolId}
            "time" = ${Time}
            "value" = ${Value}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to V1MetricData<PSCustomObject>

.DESCRIPTION

Convert from JSON to V1MetricData<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

V1MetricData<PSCustomObject>
#>
function ConvertFrom-JsonToV1MetricData {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => V1MetricData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V1MetricData
        $AllProperties = ("symbol_id", "time", "value")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol_id"))) { #optional property not found
            $SymbolId = $null
        } else {
            $SymbolId = $JsonParameters.PSobject.Properties["symbol_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time"))) { #optional property not found
            $Time = $null
        } else {
            $Time = $JsonParameters.PSobject.Properties["time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        $PSO = [PSCustomObject]@{
            "symbol_id" = ${SymbolId}
            "time" = ${Time}
            "value" = ${Value}
        }

        return $PSO
    }

}

