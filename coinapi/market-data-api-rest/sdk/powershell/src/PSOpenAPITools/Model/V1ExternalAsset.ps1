#
# REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents an external asset with description.

.PARAMETER AssetId
Gets or sets the asset identifier.
.PARAMETER Description
Gets or sets the description of the asset.
.PARAMETER AssetType
Gets or sets the type/category of the asset.
.OUTPUTS

V1ExternalAsset<PSCustomObject>
#>

function Initialize-V1ExternalAsset {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetType}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => V1ExternalAsset' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "asset_id" = ${AssetId}
            "description" = ${Description}
            "asset_type" = ${AssetType}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to V1ExternalAsset<PSCustomObject>

.DESCRIPTION

Convert from JSON to V1ExternalAsset<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

V1ExternalAsset<PSCustomObject>
#>
function ConvertFrom-JsonToV1ExternalAsset {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => V1ExternalAsset' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V1ExternalAsset
        $AllProperties = ("asset_id", "description", "asset_type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_id"))) { #optional property not found
            $AssetId = $null
        } else {
            $AssetId = $JsonParameters.PSobject.Properties["asset_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_type"))) { #optional property not found
            $AssetType = $null
        } else {
            $AssetType = $JsonParameters.PSobject.Properties["asset_type"].value
        }

        $PSO = [PSCustomObject]@{
            "asset_id" = ${AssetId}
            "description" = ${Description}
            "asset_type" = ${AssetType}
        }

        return $PSO
    }

}

