#
# CoinAPI Market Data REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents a symbol data model.

.PARAMETER SymbolId
The symbol identifier.
.PARAMETER ExchangeId
The exchange identifier.
.PARAMETER SymbolType
The symbol type.
.PARAMETER AssetIdBase
The base asset identifier.
.PARAMETER AssetIdQuote
The quote asset identifier.
.PARAMETER AssetIdUnit
The unit asset identifier.
.PARAMETER FutureContractUnit
The contract unit for futures.
.PARAMETER FutureContractUnitAsset
The asset used as the unit for futures contract.
.PARAMETER FutureDeliveryTime
The future delivery time for futures contract.
.PARAMETER OptionTypeIsCall
Indicates whether the option type is a call.
.PARAMETER OptionStrikePrice
The strike price for options.
.PARAMETER OptionContractUnit
The contract unit for options.
.PARAMETER OptionExerciseStyle
The exercise style for options.
.PARAMETER OptionExpirationTime
The expiration time for options.
.PARAMETER ContractDeliveryTime
The delivery time for contracts.
.PARAMETER ContractUnit
The contract unit for contracts.
.PARAMETER ContractUnitAsset
The asset used as the unit for contracts.
.PARAMETER ContractId
The contract identifier.
.PARAMETER ContractDisplayName
The display name of the contract.
.PARAMETER ContractDisplayDescription
The display description of the contract.
.PARAMETER DataStart
No description available.
.PARAMETER DataEnd
No description available.
.PARAMETER DataQuoteStart
The start date of quote data.
.PARAMETER DataQuoteEnd
The end date of quote data.
.PARAMETER DataOrderbookStart
The start date of order book data.
.PARAMETER DataOrderbookEnd
The end date of order book data.
.PARAMETER DataTradeStart
The start date of trade data.
.PARAMETER DataTradeEnd
The end date of trade data.
.PARAMETER IndexId
The index identifier.
.PARAMETER IndexDisplayName
The display name of the index.
.PARAMETER IndexDisplayDescription
The display description of the index.
.PARAMETER Volume1hrs
The volume in the last 1 hour.
.PARAMETER Volume1hrsUsd
The volume in USD in the last 1 hour.
.PARAMETER Volume1day
The volume in the last 1 day.
.PARAMETER Volume1dayUsd
The volume in USD in the last 1 day.
.PARAMETER Volume1mth
The volume in the last 1 month.
.PARAMETER Volume1mthUsd
The volume in USD in the last 1 month.
.PARAMETER Price
The price.
.PARAMETER SymbolIdExchange
The symbol identifier in the exchange.
.PARAMETER AssetIdBaseExchange
The base asset identifier in the exchange.
.PARAMETER AssetIdQuoteExchange
The quote asset identifier in the exchange.
.PARAMETER PricePrecision
The price precision.
.PARAMETER SizePrecision
The size precision.
.PARAMETER RawKvp
Not normalized raw kvp data.
.PARAMETER VolumeToUsd
Volume unit in USD.
.PARAMETER SymbolIdInt
The symbol identifier in integer immutable format, used to correlate data across different APIs.
.OUTPUTS

V1Symbol<PSCustomObject>
#>

function Initialize-V1Symbol {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SymbolId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExchangeId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SymbolType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetIdBase},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetIdQuote},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetIdUnit},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${FutureContractUnit},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FutureContractUnitAsset},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${FutureDeliveryTime},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${OptionTypeIsCall},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${OptionStrikePrice},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${OptionContractUnit},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OptionExerciseStyle},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${OptionExpirationTime},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ContractDeliveryTime},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${ContractUnit},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContractUnitAsset},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContractId},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContractDisplayName},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContractDisplayDescription},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DataStart},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DataEnd},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataQuoteStart},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataQuoteEnd},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataOrderbookStart},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataOrderbookEnd},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataTradeStart},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataTradeEnd},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IndexId},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IndexDisplayName},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IndexDisplayDescription},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Volume1hrs},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Volume1hrsUsd},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Volume1day},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Volume1dayUsd},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Volume1mth},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Volume1mthUsd},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Price},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SymbolIdExchange},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetIdBaseExchange},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetIdQuoteExchange},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${PricePrecision},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${SizePrecision},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${RawKvp},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${VolumeToUsd},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SymbolIdInt}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => V1Symbol' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "symbol_id" = ${SymbolId}
            "exchange_id" = ${ExchangeId}
            "symbol_type" = ${SymbolType}
            "asset_id_base" = ${AssetIdBase}
            "asset_id_quote" = ${AssetIdQuote}
            "asset_id_unit" = ${AssetIdUnit}
            "future_contract_unit" = ${FutureContractUnit}
            "future_contract_unit_asset" = ${FutureContractUnitAsset}
            "future_delivery_time" = ${FutureDeliveryTime}
            "option_type_is_call" = ${OptionTypeIsCall}
            "option_strike_price" = ${OptionStrikePrice}
            "option_contract_unit" = ${OptionContractUnit}
            "option_exercise_style" = ${OptionExerciseStyle}
            "option_expiration_time" = ${OptionExpirationTime}
            "contract_delivery_time" = ${ContractDeliveryTime}
            "contract_unit" = ${ContractUnit}
            "contract_unit_asset" = ${ContractUnitAsset}
            "contract_id" = ${ContractId}
            "contract_display_name" = ${ContractDisplayName}
            "contract_display_description" = ${ContractDisplayDescription}
            "data_start" = ${DataStart}
            "data_end" = ${DataEnd}
            "data_quote_start" = ${DataQuoteStart}
            "data_quote_end" = ${DataQuoteEnd}
            "data_orderbook_start" = ${DataOrderbookStart}
            "data_orderbook_end" = ${DataOrderbookEnd}
            "data_trade_start" = ${DataTradeStart}
            "data_trade_end" = ${DataTradeEnd}
            "index_id" = ${IndexId}
            "index_display_name" = ${IndexDisplayName}
            "index_display_description" = ${IndexDisplayDescription}
            "volume_1hrs" = ${Volume1hrs}
            "volume_1hrs_usd" = ${Volume1hrsUsd}
            "volume_1day" = ${Volume1day}
            "volume_1day_usd" = ${Volume1dayUsd}
            "volume_1mth" = ${Volume1mth}
            "volume_1mth_usd" = ${Volume1mthUsd}
            "price" = ${Price}
            "symbol_id_exchange" = ${SymbolIdExchange}
            "asset_id_base_exchange" = ${AssetIdBaseExchange}
            "asset_id_quote_exchange" = ${AssetIdQuoteExchange}
            "price_precision" = ${PricePrecision}
            "size_precision" = ${SizePrecision}
            "raw_kvp" = ${RawKvp}
            "volume_to_usd" = ${VolumeToUsd}
            "symbol_id_int" = ${SymbolIdInt}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to V1Symbol<PSCustomObject>

.DESCRIPTION

Convert from JSON to V1Symbol<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

V1Symbol<PSCustomObject>
#>
function ConvertFrom-JsonToV1Symbol {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => V1Symbol' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V1Symbol
        $AllProperties = ("symbol_id", "exchange_id", "symbol_type", "asset_id_base", "asset_id_quote", "asset_id_unit", "future_contract_unit", "future_contract_unit_asset", "future_delivery_time", "option_type_is_call", "option_strike_price", "option_contract_unit", "option_exercise_style", "option_expiration_time", "contract_delivery_time", "contract_unit", "contract_unit_asset", "contract_id", "contract_display_name", "contract_display_description", "data_start", "data_end", "data_quote_start", "data_quote_end", "data_orderbook_start", "data_orderbook_end", "data_trade_start", "data_trade_end", "index_id", "index_display_name", "index_display_description", "volume_1hrs", "volume_1hrs_usd", "volume_1day", "volume_1day_usd", "volume_1mth", "volume_1mth_usd", "price", "symbol_id_exchange", "asset_id_base_exchange", "asset_id_quote_exchange", "price_precision", "size_precision", "raw_kvp", "volume_to_usd", "symbol_id_int")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol_id"))) { #optional property not found
            $SymbolId = $null
        } else {
            $SymbolId = $JsonParameters.PSobject.Properties["symbol_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exchange_id"))) { #optional property not found
            $ExchangeId = $null
        } else {
            $ExchangeId = $JsonParameters.PSobject.Properties["exchange_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol_type"))) { #optional property not found
            $SymbolType = $null
        } else {
            $SymbolType = $JsonParameters.PSobject.Properties["symbol_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_id_base"))) { #optional property not found
            $AssetIdBase = $null
        } else {
            $AssetIdBase = $JsonParameters.PSobject.Properties["asset_id_base"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_id_quote"))) { #optional property not found
            $AssetIdQuote = $null
        } else {
            $AssetIdQuote = $JsonParameters.PSobject.Properties["asset_id_quote"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_id_unit"))) { #optional property not found
            $AssetIdUnit = $null
        } else {
            $AssetIdUnit = $JsonParameters.PSobject.Properties["asset_id_unit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "future_contract_unit"))) { #optional property not found
            $FutureContractUnit = $null
        } else {
            $FutureContractUnit = $JsonParameters.PSobject.Properties["future_contract_unit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "future_contract_unit_asset"))) { #optional property not found
            $FutureContractUnitAsset = $null
        } else {
            $FutureContractUnitAsset = $JsonParameters.PSobject.Properties["future_contract_unit_asset"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "future_delivery_time"))) { #optional property not found
            $FutureDeliveryTime = $null
        } else {
            $FutureDeliveryTime = $JsonParameters.PSobject.Properties["future_delivery_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "option_type_is_call"))) { #optional property not found
            $OptionTypeIsCall = $null
        } else {
            $OptionTypeIsCall = $JsonParameters.PSobject.Properties["option_type_is_call"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "option_strike_price"))) { #optional property not found
            $OptionStrikePrice = $null
        } else {
            $OptionStrikePrice = $JsonParameters.PSobject.Properties["option_strike_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "option_contract_unit"))) { #optional property not found
            $OptionContractUnit = $null
        } else {
            $OptionContractUnit = $JsonParameters.PSobject.Properties["option_contract_unit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "option_exercise_style"))) { #optional property not found
            $OptionExerciseStyle = $null
        } else {
            $OptionExerciseStyle = $JsonParameters.PSobject.Properties["option_exercise_style"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "option_expiration_time"))) { #optional property not found
            $OptionExpirationTime = $null
        } else {
            $OptionExpirationTime = $JsonParameters.PSobject.Properties["option_expiration_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contract_delivery_time"))) { #optional property not found
            $ContractDeliveryTime = $null
        } else {
            $ContractDeliveryTime = $JsonParameters.PSobject.Properties["contract_delivery_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contract_unit"))) { #optional property not found
            $ContractUnit = $null
        } else {
            $ContractUnit = $JsonParameters.PSobject.Properties["contract_unit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contract_unit_asset"))) { #optional property not found
            $ContractUnitAsset = $null
        } else {
            $ContractUnitAsset = $JsonParameters.PSobject.Properties["contract_unit_asset"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contract_id"))) { #optional property not found
            $ContractId = $null
        } else {
            $ContractId = $JsonParameters.PSobject.Properties["contract_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contract_display_name"))) { #optional property not found
            $ContractDisplayName = $null
        } else {
            $ContractDisplayName = $JsonParameters.PSobject.Properties["contract_display_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contract_display_description"))) { #optional property not found
            $ContractDisplayDescription = $null
        } else {
            $ContractDisplayDescription = $JsonParameters.PSobject.Properties["contract_display_description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_start"))) { #optional property not found
            $DataStart = $null
        } else {
            $DataStart = $JsonParameters.PSobject.Properties["data_start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_end"))) { #optional property not found
            $DataEnd = $null
        } else {
            $DataEnd = $JsonParameters.PSobject.Properties["data_end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_quote_start"))) { #optional property not found
            $DataQuoteStart = $null
        } else {
            $DataQuoteStart = $JsonParameters.PSobject.Properties["data_quote_start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_quote_end"))) { #optional property not found
            $DataQuoteEnd = $null
        } else {
            $DataQuoteEnd = $JsonParameters.PSobject.Properties["data_quote_end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_orderbook_start"))) { #optional property not found
            $DataOrderbookStart = $null
        } else {
            $DataOrderbookStart = $JsonParameters.PSobject.Properties["data_orderbook_start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_orderbook_end"))) { #optional property not found
            $DataOrderbookEnd = $null
        } else {
            $DataOrderbookEnd = $JsonParameters.PSobject.Properties["data_orderbook_end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_trade_start"))) { #optional property not found
            $DataTradeStart = $null
        } else {
            $DataTradeStart = $JsonParameters.PSobject.Properties["data_trade_start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_trade_end"))) { #optional property not found
            $DataTradeEnd = $null
        } else {
            $DataTradeEnd = $JsonParameters.PSobject.Properties["data_trade_end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "index_id"))) { #optional property not found
            $IndexId = $null
        } else {
            $IndexId = $JsonParameters.PSobject.Properties["index_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "index_display_name"))) { #optional property not found
            $IndexDisplayName = $null
        } else {
            $IndexDisplayName = $JsonParameters.PSobject.Properties["index_display_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "index_display_description"))) { #optional property not found
            $IndexDisplayDescription = $null
        } else {
            $IndexDisplayDescription = $JsonParameters.PSobject.Properties["index_display_description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_1hrs"))) { #optional property not found
            $Volume1hrs = $null
        } else {
            $Volume1hrs = $JsonParameters.PSobject.Properties["volume_1hrs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_1hrs_usd"))) { #optional property not found
            $Volume1hrsUsd = $null
        } else {
            $Volume1hrsUsd = $JsonParameters.PSobject.Properties["volume_1hrs_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_1day"))) { #optional property not found
            $Volume1day = $null
        } else {
            $Volume1day = $JsonParameters.PSobject.Properties["volume_1day"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_1day_usd"))) { #optional property not found
            $Volume1dayUsd = $null
        } else {
            $Volume1dayUsd = $JsonParameters.PSobject.Properties["volume_1day_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_1mth"))) { #optional property not found
            $Volume1mth = $null
        } else {
            $Volume1mth = $JsonParameters.PSobject.Properties["volume_1mth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_1mth_usd"))) { #optional property not found
            $Volume1mthUsd = $null
        } else {
            $Volume1mthUsd = $JsonParameters.PSobject.Properties["volume_1mth_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price"))) { #optional property not found
            $Price = $null
        } else {
            $Price = $JsonParameters.PSobject.Properties["price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol_id_exchange"))) { #optional property not found
            $SymbolIdExchange = $null
        } else {
            $SymbolIdExchange = $JsonParameters.PSobject.Properties["symbol_id_exchange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_id_base_exchange"))) { #optional property not found
            $AssetIdBaseExchange = $null
        } else {
            $AssetIdBaseExchange = $JsonParameters.PSobject.Properties["asset_id_base_exchange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_id_quote_exchange"))) { #optional property not found
            $AssetIdQuoteExchange = $null
        } else {
            $AssetIdQuoteExchange = $JsonParameters.PSobject.Properties["asset_id_quote_exchange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price_precision"))) { #optional property not found
            $PricePrecision = $null
        } else {
            $PricePrecision = $JsonParameters.PSobject.Properties["price_precision"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size_precision"))) { #optional property not found
            $SizePrecision = $null
        } else {
            $SizePrecision = $JsonParameters.PSobject.Properties["size_precision"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "raw_kvp"))) { #optional property not found
            $RawKvp = $null
        } else {
            $RawKvp = $JsonParameters.PSobject.Properties["raw_kvp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_to_usd"))) { #optional property not found
            $VolumeToUsd = $null
        } else {
            $VolumeToUsd = $JsonParameters.PSobject.Properties["volume_to_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol_id_int"))) { #optional property not found
            $SymbolIdInt = $null
        } else {
            $SymbolIdInt = $JsonParameters.PSobject.Properties["symbol_id_int"].value
        }

        $PSO = [PSCustomObject]@{
            "symbol_id" = ${SymbolId}
            "exchange_id" = ${ExchangeId}
            "symbol_type" = ${SymbolType}
            "asset_id_base" = ${AssetIdBase}
            "asset_id_quote" = ${AssetIdQuote}
            "asset_id_unit" = ${AssetIdUnit}
            "future_contract_unit" = ${FutureContractUnit}
            "future_contract_unit_asset" = ${FutureContractUnitAsset}
            "future_delivery_time" = ${FutureDeliveryTime}
            "option_type_is_call" = ${OptionTypeIsCall}
            "option_strike_price" = ${OptionStrikePrice}
            "option_contract_unit" = ${OptionContractUnit}
            "option_exercise_style" = ${OptionExerciseStyle}
            "option_expiration_time" = ${OptionExpirationTime}
            "contract_delivery_time" = ${ContractDeliveryTime}
            "contract_unit" = ${ContractUnit}
            "contract_unit_asset" = ${ContractUnitAsset}
            "contract_id" = ${ContractId}
            "contract_display_name" = ${ContractDisplayName}
            "contract_display_description" = ${ContractDisplayDescription}
            "data_start" = ${DataStart}
            "data_end" = ${DataEnd}
            "data_quote_start" = ${DataQuoteStart}
            "data_quote_end" = ${DataQuoteEnd}
            "data_orderbook_start" = ${DataOrderbookStart}
            "data_orderbook_end" = ${DataOrderbookEnd}
            "data_trade_start" = ${DataTradeStart}
            "data_trade_end" = ${DataTradeEnd}
            "index_id" = ${IndexId}
            "index_display_name" = ${IndexDisplayName}
            "index_display_description" = ${IndexDisplayDescription}
            "volume_1hrs" = ${Volume1hrs}
            "volume_1hrs_usd" = ${Volume1hrsUsd}
            "volume_1day" = ${Volume1day}
            "volume_1day_usd" = ${Volume1dayUsd}
            "volume_1mth" = ${Volume1mth}
            "volume_1mth_usd" = ${Volume1mthUsd}
            "price" = ${Price}
            "symbol_id_exchange" = ${SymbolIdExchange}
            "asset_id_base_exchange" = ${AssetIdBaseExchange}
            "asset_id_quote_exchange" = ${AssetIdQuoteExchange}
            "price_precision" = ${PricePrecision}
            "size_precision" = ${SizePrecision}
            "raw_kvp" = ${RawKvp}
            "volume_to_usd" = ${VolumeToUsd}
            "symbol_id_int" = ${SymbolIdInt}
        }

        return $PSO
    }

}

