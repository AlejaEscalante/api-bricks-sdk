#
# REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents a metric information.

.PARAMETER MetricId
Gets or sets the metric identifier.
.PARAMETER Description
Gets or sets the description of the metric.
.PARAMETER SourceId
Gets or sets the source identifier of the metric.
.OUTPUTS

V1MetricInfo<PSCustomObject>
#>

function Initialize-V1MetricInfo {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MetricId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => V1MetricInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "metric_id" = ${MetricId}
            "description" = ${Description}
            "source_id" = ${SourceId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to V1MetricInfo<PSCustomObject>

.DESCRIPTION

Convert from JSON to V1MetricInfo<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

V1MetricInfo<PSCustomObject>
#>
function ConvertFrom-JsonToV1MetricInfo {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => V1MetricInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V1MetricInfo
        $AllProperties = ("metric_id", "description", "source_id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metric_id"))) { #optional property not found
            $MetricId = $null
        } else {
            $MetricId = $JsonParameters.PSobject.Properties["metric_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source_id"))) { #optional property not found
            $SourceId = $null
        } else {
            $SourceId = $JsonParameters.PSobject.Properties["source_id"].value
        }

        $PSO = [PSCustomObject]@{
            "metric_id" = ${MetricId}
            "description" = ${Description}
            "source_id" = ${SourceId}
        }

        return $PSO
    }

}

