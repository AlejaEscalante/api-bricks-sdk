#
# REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents a trade executed on the exchange.

.PARAMETER SymbolId
The symbol identifier.
.PARAMETER TimeExchange
The time of trade reported by the exchange.
.PARAMETER TimeCoinapi
The time when the trade was received by CoinAPI.
.PARAMETER Uuid
The unique identifier for the trade.
.PARAMETER Price
The price of the transaction.
.PARAMETER Size
The base asset amount traded in the transaction.
.PARAMETER TakerSide
The aggressor side of the transaction (BUY/SELL/BUY_ESTIMATED/SELL_ESTIMATED/UNKNOWN).
.PARAMETER IdTrade
The trade identifier.
.PARAMETER IdOrderMaker
The order maker identifier.
.PARAMETER IdOrderTaker
The order taker identifier.
.OUTPUTS

V1Trade<PSCustomObject>
#>

function Initialize-V1Trade {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SymbolId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${TimeExchange},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${TimeCoinapi},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uuid},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Price},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Size},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TakerSide},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IdTrade},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IdOrderMaker},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IdOrderTaker}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => V1Trade' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "symbol_id" = ${SymbolId}
            "time_exchange" = ${TimeExchange}
            "time_coinapi" = ${TimeCoinapi}
            "uuid" = ${Uuid}
            "price" = ${Price}
            "size" = ${Size}
            "taker_side" = ${TakerSide}
            "id_trade" = ${IdTrade}
            "id_order_maker" = ${IdOrderMaker}
            "id_order_taker" = ${IdOrderTaker}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to V1Trade<PSCustomObject>

.DESCRIPTION

Convert from JSON to V1Trade<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

V1Trade<PSCustomObject>
#>
function ConvertFrom-JsonToV1Trade {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => V1Trade' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V1Trade
        $AllProperties = ("symbol_id", "time_exchange", "time_coinapi", "uuid", "price", "size", "taker_side", "id_trade", "id_order_maker", "id_order_taker")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol_id"))) { #optional property not found
            $SymbolId = $null
        } else {
            $SymbolId = $JsonParameters.PSobject.Properties["symbol_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time_exchange"))) { #optional property not found
            $TimeExchange = $null
        } else {
            $TimeExchange = $JsonParameters.PSobject.Properties["time_exchange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time_coinapi"))) { #optional property not found
            $TimeCoinapi = $null
        } else {
            $TimeCoinapi = $JsonParameters.PSobject.Properties["time_coinapi"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uuid"))) { #optional property not found
            $Uuid = $null
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["uuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price"))) { #optional property not found
            $Price = $null
        } else {
            $Price = $JsonParameters.PSobject.Properties["price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "taker_side"))) { #optional property not found
            $TakerSide = $null
        } else {
            $TakerSide = $JsonParameters.PSobject.Properties["taker_side"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id_trade"))) { #optional property not found
            $IdTrade = $null
        } else {
            $IdTrade = $JsonParameters.PSobject.Properties["id_trade"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id_order_maker"))) { #optional property not found
            $IdOrderMaker = $null
        } else {
            $IdOrderMaker = $JsonParameters.PSobject.Properties["id_order_maker"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id_order_taker"))) { #optional property not found
            $IdOrderTaker = $null
        } else {
            $IdOrderTaker = $JsonParameters.PSobject.Properties["id_order_taker"].value
        }

        $PSO = [PSCustomObject]@{
            "symbol_id" = ${SymbolId}
            "time_exchange" = ${TimeExchange}
            "time_coinapi" = ${TimeCoinapi}
            "uuid" = ${Uuid}
            "price" = ${Price}
            "size" = ${Size}
            "taker_side" = ${TakerSide}
            "id_trade" = ${IdTrade}
            "id_order_maker" = ${IdOrderMaker}
            "id_order_taker" = ${IdOrderTaker}
        }

        return $PSO
    }

}

