#
# CoinAPI Market Data REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents symbol mapping information for exchange symbols.

.PARAMETER SymbolId
The symbol ID.
.PARAMETER SymbolIdExchange
The exchange-specific symbol ID.
.PARAMETER CoinapiDatainfoId
The CoinAPI DataInfo ID.
.PARAMETER AssetIdBaseExchange
The exchange-specific base asset ID.
.PARAMETER AssetIdQuoteExchange
The exchange-specific quote asset ID.
.PARAMETER AssetIdBase
The base asset ID.
.PARAMETER AssetIdQuote
The quote asset ID.
.PARAMETER PricePrecision
The price precision.
.PARAMETER SizePrecision
The size precision.
.OUTPUTS

V1SymbolMapping<PSCustomObject>
#>

function Initialize-V1SymbolMapping {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SymbolId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SymbolIdExchange},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CoinapiDatainfoId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetIdBaseExchange},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetIdQuoteExchange},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetIdBase},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetIdQuote},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${PricePrecision},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${SizePrecision}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => V1SymbolMapping' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "symbol_id" = ${SymbolId}
            "symbol_id_exchange" = ${SymbolIdExchange}
            "coinapi_datainfo_id" = ${CoinapiDatainfoId}
            "asset_id_base_exchange" = ${AssetIdBaseExchange}
            "asset_id_quote_exchange" = ${AssetIdQuoteExchange}
            "asset_id_base" = ${AssetIdBase}
            "asset_id_quote" = ${AssetIdQuote}
            "price_precision" = ${PricePrecision}
            "size_precision" = ${SizePrecision}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to V1SymbolMapping<PSCustomObject>

.DESCRIPTION

Convert from JSON to V1SymbolMapping<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

V1SymbolMapping<PSCustomObject>
#>
function ConvertFrom-JsonToV1SymbolMapping {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => V1SymbolMapping' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V1SymbolMapping
        $AllProperties = ("symbol_id", "symbol_id_exchange", "coinapi_datainfo_id", "asset_id_base_exchange", "asset_id_quote_exchange", "asset_id_base", "asset_id_quote", "price_precision", "size_precision")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol_id"))) { #optional property not found
            $SymbolId = $null
        } else {
            $SymbolId = $JsonParameters.PSobject.Properties["symbol_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol_id_exchange"))) { #optional property not found
            $SymbolIdExchange = $null
        } else {
            $SymbolIdExchange = $JsonParameters.PSobject.Properties["symbol_id_exchange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "coinapi_datainfo_id"))) { #optional property not found
            $CoinapiDatainfoId = $null
        } else {
            $CoinapiDatainfoId = $JsonParameters.PSobject.Properties["coinapi_datainfo_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_id_base_exchange"))) { #optional property not found
            $AssetIdBaseExchange = $null
        } else {
            $AssetIdBaseExchange = $JsonParameters.PSobject.Properties["asset_id_base_exchange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_id_quote_exchange"))) { #optional property not found
            $AssetIdQuoteExchange = $null
        } else {
            $AssetIdQuoteExchange = $JsonParameters.PSobject.Properties["asset_id_quote_exchange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_id_base"))) { #optional property not found
            $AssetIdBase = $null
        } else {
            $AssetIdBase = $JsonParameters.PSobject.Properties["asset_id_base"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_id_quote"))) { #optional property not found
            $AssetIdQuote = $null
        } else {
            $AssetIdQuote = $JsonParameters.PSobject.Properties["asset_id_quote"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price_precision"))) { #optional property not found
            $PricePrecision = $null
        } else {
            $PricePrecision = $JsonParameters.PSobject.Properties["price_precision"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size_precision"))) { #optional property not found
            $SizePrecision = $null
        } else {
            $SizePrecision = $JsonParameters.PSobject.Properties["size_precision"].value
        }

        $PSO = [PSCustomObject]@{
            "symbol_id" = ${SymbolId}
            "symbol_id_exchange" = ${SymbolIdExchange}
            "coinapi_datainfo_id" = ${CoinapiDatainfoId}
            "asset_id_base_exchange" = ${AssetIdBaseExchange}
            "asset_id_quote_exchange" = ${AssetIdQuoteExchange}
            "asset_id_base" = ${AssetIdBase}
            "asset_id_quote" = ${AssetIdQuote}
            "price_precision" = ${PricePrecision}
            "size_precision" = ${SizePrecision}
        }

        return $PSO
    }

}

