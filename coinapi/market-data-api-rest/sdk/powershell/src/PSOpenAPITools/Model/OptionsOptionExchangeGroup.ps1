#
# CoinAPI Market Data REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents an option exchange group data model.

.PARAMETER AssetIdBase
The base asset identifier.
.PARAMETER AssetIdQuote
The quote asset identifier.
.PARAMETER UnderlyingPrice
The underlying price of the option.
.PARAMETER TimeExpiration
The expiration time of the option.
.PARAMETER Strikes
The list of strikes available.
.OUTPUTS

OptionsOptionExchangeGroup<PSCustomObject>
#>

function Initialize-OptionsOptionExchangeGroup {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetIdBase},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetIdQuote},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${UnderlyingPrice},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${TimeExpiration},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Strikes}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => OptionsOptionExchangeGroup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "asset_id_base" = ${AssetIdBase}
            "asset_id_quote" = ${AssetIdQuote}
            "underlying_price" = ${UnderlyingPrice}
            "time_expiration" = ${TimeExpiration}
            "strikes" = ${Strikes}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OptionsOptionExchangeGroup<PSCustomObject>

.DESCRIPTION

Convert from JSON to OptionsOptionExchangeGroup<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OptionsOptionExchangeGroup<PSCustomObject>
#>
function ConvertFrom-JsonToOptionsOptionExchangeGroup {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => OptionsOptionExchangeGroup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OptionsOptionExchangeGroup
        $AllProperties = ("asset_id_base", "asset_id_quote", "underlying_price", "time_expiration", "strikes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_id_base"))) { #optional property not found
            $AssetIdBase = $null
        } else {
            $AssetIdBase = $JsonParameters.PSobject.Properties["asset_id_base"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_id_quote"))) { #optional property not found
            $AssetIdQuote = $null
        } else {
            $AssetIdQuote = $JsonParameters.PSobject.Properties["asset_id_quote"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "underlying_price"))) { #optional property not found
            $UnderlyingPrice = $null
        } else {
            $UnderlyingPrice = $JsonParameters.PSobject.Properties["underlying_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time_expiration"))) { #optional property not found
            $TimeExpiration = $null
        } else {
            $TimeExpiration = $JsonParameters.PSobject.Properties["time_expiration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "strikes"))) { #optional property not found
            $Strikes = $null
        } else {
            $Strikes = $JsonParameters.PSobject.Properties["strikes"].value
        }

        $PSO = [PSCustomObject]@{
            "asset_id_base" = ${AssetIdBase}
            "asset_id_quote" = ${AssetIdQuote}
            "underlying_price" = ${UnderlyingPrice}
            "time_expiration" = ${TimeExpiration}
            "strikes" = ${Strikes}
        }

        return $PSO
    }

}

