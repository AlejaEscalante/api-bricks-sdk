#
# REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents a quote data model.

.PARAMETER SymbolId
The symbol identifier.
.PARAMETER TimeExchange
The exchange time of the quote.
.PARAMETER TimeCoinapi
The CoinAPI time when the quote was received.
.PARAMETER AskPrice
The best asking price.
.PARAMETER AskSize
The volume resting on the best ask. If the value is equal to zero, then the size is unknown.
.PARAMETER BidPrice
The best bidding price.
.PARAMETER BidSize
The volume resting on the best bid. If the value is equal to zero, then the size is unknown.
.OUTPUTS

V1Quote<PSCustomObject>
#>

function Initialize-V1Quote {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SymbolId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${TimeExchange},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${TimeCoinapi},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${AskPrice},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${AskSize},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${BidPrice},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${BidSize}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => V1Quote' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "symbol_id" = ${SymbolId}
            "time_exchange" = ${TimeExchange}
            "time_coinapi" = ${TimeCoinapi}
            "ask_price" = ${AskPrice}
            "ask_size" = ${AskSize}
            "bid_price" = ${BidPrice}
            "bid_size" = ${BidSize}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to V1Quote<PSCustomObject>

.DESCRIPTION

Convert from JSON to V1Quote<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

V1Quote<PSCustomObject>
#>
function ConvertFrom-JsonToV1Quote {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => V1Quote' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V1Quote
        $AllProperties = ("symbol_id", "time_exchange", "time_coinapi", "ask_price", "ask_size", "bid_price", "bid_size")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol_id"))) { #optional property not found
            $SymbolId = $null
        } else {
            $SymbolId = $JsonParameters.PSobject.Properties["symbol_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time_exchange"))) { #optional property not found
            $TimeExchange = $null
        } else {
            $TimeExchange = $JsonParameters.PSobject.Properties["time_exchange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time_coinapi"))) { #optional property not found
            $TimeCoinapi = $null
        } else {
            $TimeCoinapi = $JsonParameters.PSobject.Properties["time_coinapi"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ask_price"))) { #optional property not found
            $AskPrice = $null
        } else {
            $AskPrice = $JsonParameters.PSobject.Properties["ask_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ask_size"))) { #optional property not found
            $AskSize = $null
        } else {
            $AskSize = $JsonParameters.PSobject.Properties["ask_size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bid_price"))) { #optional property not found
            $BidPrice = $null
        } else {
            $BidPrice = $JsonParameters.PSobject.Properties["bid_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bid_size"))) { #optional property not found
            $BidSize = $null
        } else {
            $BidSize = $JsonParameters.PSobject.Properties["bid_size"].value
        }

        $PSO = [PSCustomObject]@{
            "symbol_id" = ${SymbolId}
            "time_exchange" = ${TimeExchange}
            "time_coinapi" = ${TimeCoinapi}
            "ask_price" = ${AskPrice}
            "ask_size" = ${AskSize}
            "bid_price" = ${BidPrice}
            "bid_size" = ${BidSize}
        }

        return $PSO
    }

}

