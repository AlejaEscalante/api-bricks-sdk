#
# CoinAPI Market Data REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents an exchange.

.PARAMETER ExchangeId
Gets or sets the exchange ID.
.PARAMETER Website
Gets or sets the website URL of the exchange.
.PARAMETER Name
Gets or sets the name of the exchange.
.PARAMETER DataStart
No description available.
.PARAMETER DataEnd
No description available.
.PARAMETER DataQuoteStart
Gets or sets the start date of quote data.
.PARAMETER DataQuoteEnd
Gets or sets the end date of quote data.
.PARAMETER DataOrderbookStart
Gets or sets the start date of order book data.
.PARAMETER DataOrderbookEnd
Gets or sets the end date of order book data.
.PARAMETER DataTradeStart
Gets or sets the start date of trade data.
.PARAMETER DataTradeEnd
Gets or sets the end date of trade data.
.PARAMETER DataTradeCount
Gets or sets the number of trades.
.PARAMETER DataSymbolsCount
Gets or sets the number of symbols.
.PARAMETER Volume1hrsUsd
Gets or sets the USD volume in the last 1 hour.
.PARAMETER Volume1dayUsd
Gets or sets the USD volume in the last 1 day.
.PARAMETER Volume1mthUsd
Gets or sets the USD volume in the last 1 month.
.PARAMETER MetricId
Gets or sets the list of metric IDs.
.PARAMETER Icons
Gets or sets the list of icons for the exchange.
.PARAMETER Rank
Rank of the exchange.
.PARAMETER IntegrationStatus
Status of the integration
.OUTPUTS

V1Exchange<PSCustomObject>
#>

function Initialize-V1Exchange {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExchangeId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Website},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DataStart},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DataEnd},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataQuoteStart},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataQuoteEnd},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataOrderbookStart},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataOrderbookEnd},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataTradeStart},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataTradeEnd},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DataTradeCount},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DataSymbolsCount},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Volume1hrsUsd},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Volume1dayUsd},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Volume1mthUsd},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${MetricId},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Icons},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Rank},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IntegrationStatus}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => V1Exchange' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "exchange_id" = ${ExchangeId}
            "website" = ${Website}
            "name" = ${Name}
            "data_start" = ${DataStart}
            "data_end" = ${DataEnd}
            "data_quote_start" = ${DataQuoteStart}
            "data_quote_end" = ${DataQuoteEnd}
            "data_orderbook_start" = ${DataOrderbookStart}
            "data_orderbook_end" = ${DataOrderbookEnd}
            "data_trade_start" = ${DataTradeStart}
            "data_trade_end" = ${DataTradeEnd}
            "data_trade_count" = ${DataTradeCount}
            "data_symbols_count" = ${DataSymbolsCount}
            "volume_1hrs_usd" = ${Volume1hrsUsd}
            "volume_1day_usd" = ${Volume1dayUsd}
            "volume_1mth_usd" = ${Volume1mthUsd}
            "metric_id" = ${MetricId}
            "icons" = ${Icons}
            "rank" = ${Rank}
            "integration_status" = ${IntegrationStatus}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to V1Exchange<PSCustomObject>

.DESCRIPTION

Convert from JSON to V1Exchange<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

V1Exchange<PSCustomObject>
#>
function ConvertFrom-JsonToV1Exchange {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => V1Exchange' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V1Exchange
        $AllProperties = ("exchange_id", "website", "name", "data_start", "data_end", "data_quote_start", "data_quote_end", "data_orderbook_start", "data_orderbook_end", "data_trade_start", "data_trade_end", "data_trade_count", "data_symbols_count", "volume_1hrs_usd", "volume_1day_usd", "volume_1mth_usd", "metric_id", "icons", "rank", "integration_status")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exchange_id"))) { #optional property not found
            $ExchangeId = $null
        } else {
            $ExchangeId = $JsonParameters.PSobject.Properties["exchange_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "website"))) { #optional property not found
            $Website = $null
        } else {
            $Website = $JsonParameters.PSobject.Properties["website"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_start"))) { #optional property not found
            $DataStart = $null
        } else {
            $DataStart = $JsonParameters.PSobject.Properties["data_start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_end"))) { #optional property not found
            $DataEnd = $null
        } else {
            $DataEnd = $JsonParameters.PSobject.Properties["data_end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_quote_start"))) { #optional property not found
            $DataQuoteStart = $null
        } else {
            $DataQuoteStart = $JsonParameters.PSobject.Properties["data_quote_start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_quote_end"))) { #optional property not found
            $DataQuoteEnd = $null
        } else {
            $DataQuoteEnd = $JsonParameters.PSobject.Properties["data_quote_end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_orderbook_start"))) { #optional property not found
            $DataOrderbookStart = $null
        } else {
            $DataOrderbookStart = $JsonParameters.PSobject.Properties["data_orderbook_start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_orderbook_end"))) { #optional property not found
            $DataOrderbookEnd = $null
        } else {
            $DataOrderbookEnd = $JsonParameters.PSobject.Properties["data_orderbook_end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_trade_start"))) { #optional property not found
            $DataTradeStart = $null
        } else {
            $DataTradeStart = $JsonParameters.PSobject.Properties["data_trade_start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_trade_end"))) { #optional property not found
            $DataTradeEnd = $null
        } else {
            $DataTradeEnd = $JsonParameters.PSobject.Properties["data_trade_end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_trade_count"))) { #optional property not found
            $DataTradeCount = $null
        } else {
            $DataTradeCount = $JsonParameters.PSobject.Properties["data_trade_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_symbols_count"))) { #optional property not found
            $DataSymbolsCount = $null
        } else {
            $DataSymbolsCount = $JsonParameters.PSobject.Properties["data_symbols_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_1hrs_usd"))) { #optional property not found
            $Volume1hrsUsd = $null
        } else {
            $Volume1hrsUsd = $JsonParameters.PSobject.Properties["volume_1hrs_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_1day_usd"))) { #optional property not found
            $Volume1dayUsd = $null
        } else {
            $Volume1dayUsd = $JsonParameters.PSobject.Properties["volume_1day_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_1mth_usd"))) { #optional property not found
            $Volume1mthUsd = $null
        } else {
            $Volume1mthUsd = $JsonParameters.PSobject.Properties["volume_1mth_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metric_id"))) { #optional property not found
            $MetricId = $null
        } else {
            $MetricId = $JsonParameters.PSobject.Properties["metric_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "icons"))) { #optional property not found
            $Icons = $null
        } else {
            $Icons = $JsonParameters.PSobject.Properties["icons"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rank"))) { #optional property not found
            $Rank = $null
        } else {
            $Rank = $JsonParameters.PSobject.Properties["rank"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "integration_status"))) { #optional property not found
            $IntegrationStatus = $null
        } else {
            $IntegrationStatus = $JsonParameters.PSobject.Properties["integration_status"].value
        }

        $PSO = [PSCustomObject]@{
            "exchange_id" = ${ExchangeId}
            "website" = ${Website}
            "name" = ${Name}
            "data_start" = ${DataStart}
            "data_end" = ${DataEnd}
            "data_quote_start" = ${DataQuoteStart}
            "data_quote_end" = ${DataQuoteEnd}
            "data_orderbook_start" = ${DataOrderbookStart}
            "data_orderbook_end" = ${DataOrderbookEnd}
            "data_trade_start" = ${DataTradeStart}
            "data_trade_end" = ${DataTradeEnd}
            "data_trade_count" = ${DataTradeCount}
            "data_symbols_count" = ${DataSymbolsCount}
            "volume_1hrs_usd" = ${Volume1hrsUsd}
            "volume_1day_usd" = ${Volume1dayUsd}
            "volume_1mth_usd" = ${Volume1mthUsd}
            "metric_id" = ${MetricId}
            "icons" = ${Icons}
            "rank" = ${Rank}
            "integration_status" = ${IntegrationStatus}
        }

        return $PSO
    }

}

