#
# REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents an exchange with external mapping for metrics.

.PARAMETER ExchangeId
Gets or sets the internal exchange identifier.
.PARAMETER ExternalName
Gets or sets the external protocol name/slug.
.PARAMETER Description
Gets or sets the description of the exchange.
.PARAMETER SourceId
No description available.
.OUTPUTS

V1ExternalExchange<PSCustomObject>
#>

function Initialize-V1ExternalExchange {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExchangeId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => V1ExternalExchange' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "exchange_id" = ${ExchangeId}
            "external_name" = ${ExternalName}
            "description" = ${Description}
            "source_id" = ${SourceId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to V1ExternalExchange<PSCustomObject>

.DESCRIPTION

Convert from JSON to V1ExternalExchange<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

V1ExternalExchange<PSCustomObject>
#>
function ConvertFrom-JsonToV1ExternalExchange {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => V1ExternalExchange' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V1ExternalExchange
        $AllProperties = ("exchange_id", "external_name", "description", "source_id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exchange_id"))) { #optional property not found
            $ExchangeId = $null
        } else {
            $ExchangeId = $JsonParameters.PSobject.Properties["exchange_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "external_name"))) { #optional property not found
            $ExternalName = $null
        } else {
            $ExternalName = $JsonParameters.PSobject.Properties["external_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source_id"))) { #optional property not found
            $SourceId = $null
        } else {
            $SourceId = $JsonParameters.PSobject.Properties["source_id"].value
        }

        $PSO = [PSCustomObject]@{
            "exchange_id" = ${ExchangeId}
            "external_name" = ${ExternalName}
            "description" = ${Description}
            "source_id" = ${SourceId}
        }

        return $PSO
    }

}

