#
# REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

Get current order book

.DESCRIPTION

No description available.

.PARAMETER SymbolId
The symbol ID (from the Metadata -> Symbols)

.PARAMETER LimitLevels
The maximum number of levels to include in the response.

.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json, application/x-msgpack

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

V1OrderBookBase
#>
function Invoke-V1OrderbooksSymbolIdCurrentGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SymbolId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${LimitLevels},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json", "application/x-msgpack")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-V1OrderbooksSymbolIdCurrentGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json', 'application/x-msgpack')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/v1/orderbooks/{symbol_id}/current'
        if (!$SymbolId) {
            throw "Error! The required parameter `SymbolId` missing when calling v1OrderbooksSymbolIdCurrentGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{symbol_id}', [System.Web.HTTPUtility]::UrlEncode($SymbolId))

        if ($LimitLevels) {
            $LocalVarQueryParameters['limit_levels'] = $LimitLevels
        }

        if ($Configuration["ApiKeyPrefix"] -and $Configuration["ApiKeyPrefix"]["X-CoinAPI-Key"]) {
            $apiKeyPrefix = $Configuration["ApiKeyPrefix"]["X-CoinAPI-Key"]
        } else {
            $apiKeyPrefix = ""
        }
        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["X-CoinAPI-Key"]) {
            $LocalVarHeaderParameters['X-CoinAPI-Key'] = $apiKeyPrefix + $Configuration["ApiKey"]["X-CoinAPI-Key"]
            Write-Verbose ("Using API key 'X-CoinAPI-Key' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "V1OrderBookBase" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Current depth of the order book

.DESCRIPTION

No description available.

.PARAMETER SymbolId
The symbol ID (from the Metadata -> Symbols)

.PARAMETER LimitLevels
The maximum number of levels to include in the response.

.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json, application/x-msgpack

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

V1OrderBookDepth
#>
function Invoke-V1OrderbooksSymbolIdDepthCurrentGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SymbolId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${LimitLevels},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json", "application/x-msgpack")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-V1OrderbooksSymbolIdDepthCurrentGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json', 'application/x-msgpack')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/v1/orderbooks/{symbol_id}/depth/current'
        if (!$SymbolId) {
            throw "Error! The required parameter `SymbolId` missing when calling v1OrderbooksSymbolIdDepthCurrentGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{symbol_id}', [System.Web.HTTPUtility]::UrlEncode($SymbolId))

        if ($LimitLevels) {
            $LocalVarQueryParameters['limit_levels'] = $LimitLevels
        }

        if ($Configuration["ApiKeyPrefix"] -and $Configuration["ApiKeyPrefix"]["X-CoinAPI-Key"]) {
            $apiKeyPrefix = $Configuration["ApiKeyPrefix"]["X-CoinAPI-Key"]
        } else {
            $apiKeyPrefix = ""
        }
        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["X-CoinAPI-Key"]) {
            $LocalVarHeaderParameters['X-CoinAPI-Key'] = $apiKeyPrefix + $Configuration["ApiKey"]["X-CoinAPI-Key"]
            Write-Verbose ("Using API key 'X-CoinAPI-Key' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "V1OrderBookDepth" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Historical data

.DESCRIPTION

No description available.

.PARAMETER SymbolId
Symbol identifier for requested timeseries (from the Metadata -> Symbols)

.PARAMETER Date
Date in ISO 8601, returned data is for the whole given day (preferred method, required if 'time_start' is not provided)

.PARAMETER TimeStart
Starting time in ISO 8601 (deprecated, use 'date' instead)

.PARAMETER TimeEnd
Timeseries ending time in ISO 8601 (deprecated, use 'date' instead)

.PARAMETER Limit
Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)

.PARAMETER LimitLevels
Maximum amount of levels from each side of the book to include in response (optional)

.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json, application/x-msgpack

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

V1OrderBook[]
#>
function Invoke-V1OrderbooksSymbolIdHistoryGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SymbolId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Date},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TimeStart},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TimeEnd},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${LimitLevels},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json", "application/x-msgpack")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-V1OrderbooksSymbolIdHistoryGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json', 'application/x-msgpack')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/v1/orderbooks/{symbol_id}/history'
        if (!$SymbolId) {
            throw "Error! The required parameter `SymbolId` missing when calling v1OrderbooksSymbolIdHistoryGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{symbol_id}', [System.Web.HTTPUtility]::UrlEncode($SymbolId))

        if ($Date) {
            $LocalVarQueryParameters['date'] = $Date
        }

        if ($TimeStart) {
            $LocalVarQueryParameters['time_start'] = $TimeStart
        }

        if ($TimeEnd) {
            $LocalVarQueryParameters['time_end'] = $TimeEnd
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($LimitLevels) {
            $LocalVarQueryParameters['limit_levels'] = $LimitLevels
        }

        if ($Configuration["ApiKeyPrefix"] -and $Configuration["ApiKeyPrefix"]["X-CoinAPI-Key"]) {
            $apiKeyPrefix = $Configuration["ApiKeyPrefix"]["X-CoinAPI-Key"]
        } else {
            $apiKeyPrefix = ""
        }
        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["X-CoinAPI-Key"]) {
            $LocalVarHeaderParameters['X-CoinAPI-Key'] = $apiKeyPrefix + $Configuration["ApiKey"]["X-CoinAPI-Key"]
            Write-Verbose ("Using API key 'X-CoinAPI-Key' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "V1OrderBook[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Latest data

.DESCRIPTION

No description available.

.PARAMETER SymbolId
Symbol identifier of requested timeseries (from the Metadata -> Symbols)

.PARAMETER Limit
Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)

.PARAMETER LimitLevels
Maximum amount of levels from each side of the book to include in response (optional)

.PARAMETER ReturnType

Select the return type (optional): text/plain, application/json, text/json, application/x-msgpack

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

V1OrderBook[]
#>
function Invoke-V1OrderbooksSymbolIdLatestGet {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SymbolId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${LimitLevels},
        [String]
        [ValidateSet("text/plain", "application/json", "text/json", "application/x-msgpack")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-V1OrderbooksSymbolIdLatestGet' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('text/plain', 'application/json', 'text/json', 'application/x-msgpack')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        $LocalVarUri = '/v1/orderbooks/{symbol_id}/latest'
        if (!$SymbolId) {
            throw "Error! The required parameter `SymbolId` missing when calling v1OrderbooksSymbolIdLatestGet."
        }
        $LocalVarUri = $LocalVarUri.replace('{symbol_id}', [System.Web.HTTPUtility]::UrlEncode($SymbolId))

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($LimitLevels) {
            $LocalVarQueryParameters['limit_levels'] = $LimitLevels
        }

        if ($Configuration["ApiKeyPrefix"] -and $Configuration["ApiKeyPrefix"]["X-CoinAPI-Key"]) {
            $apiKeyPrefix = $Configuration["ApiKeyPrefix"]["X-CoinAPI-Key"]
        } else {
            $apiKeyPrefix = ""
        }
        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["X-CoinAPI-Key"]) {
            $LocalVarHeaderParameters['X-CoinAPI-Key'] = $apiKeyPrefix + $Configuration["ApiKey"]["X-CoinAPI-Key"]
            Write-Verbose ("Using API key 'X-CoinAPI-Key' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "V1OrderBook[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

