=begin comment

REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Contact: support@apibricks.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::OrderBookApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# v1_orderbooks_symbol_id_current_get
#
# Get current order book
#
# @param string $symbol_id The symbol ID (from the Metadata -&gt; Symbols) (required)
# @param int $limit_levels The maximum number of levels to include in the response. (optional)
{
    my $params = {
    'symbol_id' => {
        data_type => 'string',
        description => 'The symbol ID (from the Metadata -&gt; Symbols)',
        required => '1',
    },
    'limit_levels' => {
        data_type => 'int',
        description => 'The maximum number of levels to include in the response.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1_orderbooks_symbol_id_current_get' } = {
        summary => 'Get current order book',
        params => $params,
        returns => 'V1OrderBookBase',
        };
}
# @return V1OrderBookBase
#
sub v1_orderbooks_symbol_id_current_get {
    my ($self, %args) = @_;

    # verify the required parameter 'symbol_id' is set
    unless (exists $args{'symbol_id'}) {
      croak("Missing the required parameter 'symbol_id' when calling v1_orderbooks_symbol_id_current_get");
    }

    # parse inputs
    my $_resource_path = '/v1/orderbooks/{symbol_id}/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit_levels'}) {
        $query_params->{'limit_levels'} = $self->{api_client}->to_query_value($args{'limit_levels'});
    }

    # path params
    if ( exists $args{'symbol_id'}) {
        my $_base_variable = "{" . "symbol_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'symbol_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1OrderBookBase', $response);
    return $_response_object;
}

#
# v1_orderbooks_symbol_id_depth_current_get
#
# Current depth of the order book
#
# @param string $symbol_id The symbol ID (from the Metadata -&gt; Symbols) (required)
# @param int $limit_levels The maximum number of levels to include in the response. (optional)
{
    my $params = {
    'symbol_id' => {
        data_type => 'string',
        description => 'The symbol ID (from the Metadata -&gt; Symbols)',
        required => '1',
    },
    'limit_levels' => {
        data_type => 'int',
        description => 'The maximum number of levels to include in the response.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1_orderbooks_symbol_id_depth_current_get' } = {
        summary => 'Current depth of the order book',
        params => $params,
        returns => 'V1OrderBookDepth',
        };
}
# @return V1OrderBookDepth
#
sub v1_orderbooks_symbol_id_depth_current_get {
    my ($self, %args) = @_;

    # verify the required parameter 'symbol_id' is set
    unless (exists $args{'symbol_id'}) {
      croak("Missing the required parameter 'symbol_id' when calling v1_orderbooks_symbol_id_depth_current_get");
    }

    # parse inputs
    my $_resource_path = '/v1/orderbooks/{symbol_id}/depth/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit_levels'}) {
        $query_params->{'limit_levels'} = $self->{api_client}->to_query_value($args{'limit_levels'});
    }

    # path params
    if ( exists $args{'symbol_id'}) {
        my $_base_variable = "{" . "symbol_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'symbol_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('V1OrderBookDepth', $response);
    return $_response_object;
}

#
# v1_orderbooks_symbol_id_history_get
#
# Historical data
#
# @param string $symbol_id Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols) (required)
# @param string $date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)
# @param string $time_start Starting time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
# @param string $time_end Timeseries ending time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
# @param int $limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
# @param int $limit_levels Maximum amount of levels from each side of the book to include in response (optional) (optional)
{
    my $params = {
    'symbol_id' => {
        data_type => 'string',
        description => 'Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols)',
        required => '1',
    },
    'date' => {
        data_type => 'string',
        description => 'Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided)',
        required => '0',
    },
    'time_start' => {
        data_type => 'string',
        description => 'Starting time in ISO 8601 (deprecated, use &#39;date&#39; instead)',
        required => '0',
    },
    'time_end' => {
        data_type => 'string',
        description => 'Timeseries ending time in ISO 8601 (deprecated, use &#39;date&#39; instead)',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)',
        required => '0',
    },
    'limit_levels' => {
        data_type => 'int',
        description => 'Maximum amount of levels from each side of the book to include in response (optional)',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1_orderbooks_symbol_id_history_get' } = {
        summary => 'Historical data',
        params => $params,
        returns => 'ARRAY[V1OrderBook]',
        };
}
# @return ARRAY[V1OrderBook]
#
sub v1_orderbooks_symbol_id_history_get {
    my ($self, %args) = @_;

    # verify the required parameter 'symbol_id' is set
    unless (exists $args{'symbol_id'}) {
      croak("Missing the required parameter 'symbol_id' when calling v1_orderbooks_symbol_id_history_get");
    }

    # parse inputs
    my $_resource_path = '/v1/orderbooks/{symbol_id}/history';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    # query params
    if ( exists $args{'time_start'}) {
        $query_params->{'time_start'} = $self->{api_client}->to_query_value($args{'time_start'});
    }

    # query params
    if ( exists $args{'time_end'}) {
        $query_params->{'time_end'} = $self->{api_client}->to_query_value($args{'time_end'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'limit_levels'}) {
        $query_params->{'limit_levels'} = $self->{api_client}->to_query_value($args{'limit_levels'});
    }

    # path params
    if ( exists $args{'symbol_id'}) {
        my $_base_variable = "{" . "symbol_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'symbol_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[V1OrderBook]', $response);
    return $_response_object;
}

#
# v1_orderbooks_symbol_id_latest_get
#
# Latest data
#
# @param string $symbol_id Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols) (required)
# @param int $limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
# @param int $limit_levels Maximum amount of levels from each side of the book to include in response (optional) (optional)
{
    my $params = {
    'symbol_id' => {
        data_type => 'string',
        description => 'Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)',
        required => '0',
    },
    'limit_levels' => {
        data_type => 'int',
        description => 'Maximum amount of levels from each side of the book to include in response (optional)',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1_orderbooks_symbol_id_latest_get' } = {
        summary => 'Latest data',
        params => $params,
        returns => 'ARRAY[V1OrderBook]',
        };
}
# @return ARRAY[V1OrderBook]
#
sub v1_orderbooks_symbol_id_latest_get {
    my ($self, %args) = @_;

    # verify the required parameter 'symbol_id' is set
    unless (exists $args{'symbol_id'}) {
      croak("Missing the required parameter 'symbol_id' when calling v1_orderbooks_symbol_id_latest_get");
    }

    # parse inputs
    my $_resource_path = '/v1/orderbooks/{symbol_id}/latest';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'limit_levels'}) {
        $query_params->{'limit_levels'} = $self->{api_client}->to_query_value($args{'limit_levels'});
    }

    # path params
    if ( exists $args{'symbol_id'}) {
        my $_base_variable = "{" . "symbol_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'symbol_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[V1OrderBook]', $response);
    return $_response_object;
}

1;
