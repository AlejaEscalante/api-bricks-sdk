=begin comment

CoinAPI Market Data REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Contact: support@apibricks.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::OhlcvApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# v1_ohlcv_exchanges_exchange_id_history_get
#
# Historical data by exchange
#
# @param string $exchange_id Exchange identifier of requested timeseries (from the Metadata -&gt; Exchanges) (required)
# @param string $period_id Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;) (required)
# @param string $time_start Timeseries starting time in ISO 8601 (required)
# @param string $time_end Timeseries ending time in ISO 8601 (required)
{
    my $params = {
    'exchange_id' => {
        data_type => 'string',
        description => 'Exchange identifier of requested timeseries (from the Metadata -&gt; Exchanges)',
        required => '1',
    },
    'period_id' => {
        data_type => 'string',
        description => 'Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;)',
        required => '1',
    },
    'time_start' => {
        data_type => 'string',
        description => 'Timeseries starting time in ISO 8601',
        required => '1',
    },
    'time_end' => {
        data_type => 'string',
        description => 'Timeseries ending time in ISO 8601',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1_ohlcv_exchanges_exchange_id_history_get' } = {
        summary => 'Historical data by exchange',
        params => $params,
        returns => 'ARRAY[ModelsExchangeTimeseriesItem]',
        };
}
# @return ARRAY[ModelsExchangeTimeseriesItem]
#
sub v1_ohlcv_exchanges_exchange_id_history_get {
    my ($self, %args) = @_;

    # verify the required parameter 'exchange_id' is set
    unless (exists $args{'exchange_id'}) {
      croak("Missing the required parameter 'exchange_id' when calling v1_ohlcv_exchanges_exchange_id_history_get");
    }

    # verify the required parameter 'period_id' is set
    unless (exists $args{'period_id'}) {
      croak("Missing the required parameter 'period_id' when calling v1_ohlcv_exchanges_exchange_id_history_get");
    }

    # verify the required parameter 'time_start' is set
    unless (exists $args{'time_start'}) {
      croak("Missing the required parameter 'time_start' when calling v1_ohlcv_exchanges_exchange_id_history_get");
    }

    # verify the required parameter 'time_end' is set
    unless (exists $args{'time_end'}) {
      croak("Missing the required parameter 'time_end' when calling v1_ohlcv_exchanges_exchange_id_history_get");
    }

    # parse inputs
    my $_resource_path = '/v1/ohlcv/exchanges/{exchange_id}/history';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'period_id'}) {
        $query_params->{'period_id'} = $self->{api_client}->to_query_value($args{'period_id'});
    }

    # query params
    if ( exists $args{'time_start'}) {
        $query_params->{'time_start'} = $self->{api_client}->to_query_value($args{'time_start'});
    }

    # query params
    if ( exists $args{'time_end'}) {
        $query_params->{'time_end'} = $self->{api_client}->to_query_value($args{'time_end'});
    }

    # path params
    if ( exists $args{'exchange_id'}) {
        my $_base_variable = "{" . "exchange_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'exchange_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(APIKey JWT )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ModelsExchangeTimeseriesItem]', $response);
    return $_response_object;
}

#
# v1_ohlcv_periods_get
#
# List all periods
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'v1_ohlcv_periods_get' } = {
        summary => 'List all periods',
        params => $params,
        returns => 'ARRAY[V1TimeseriesPeriod]',
        };
}
# @return ARRAY[V1TimeseriesPeriod]
#
sub v1_ohlcv_periods_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/ohlcv/periods';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(APIKey JWT )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[V1TimeseriesPeriod]', $response);
    return $_response_object;
}

#
# v1_ohlcv_symbol_id_history_get
#
# Historical data
#
# @param string $symbol_id Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols) (required)
# @param string $period_id Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;) (required)
# @param string $time_start Timeseries starting time in ISO 8601 (optional)
# @param string $time_end Timeseries ending time in ISO 8601 (optional)
# @param int $limit Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
{
    my $params = {
    'symbol_id' => {
        data_type => 'string',
        description => 'Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)',
        required => '1',
    },
    'period_id' => {
        data_type => 'string',
        description => 'Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)',
        required => '1',
    },
    'time_start' => {
        data_type => 'string',
        description => 'Timeseries starting time in ISO 8601',
        required => '0',
    },
    'time_end' => {
        data_type => 'string',
        description => 'Timeseries ending time in ISO 8601',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1_ohlcv_symbol_id_history_get' } = {
        summary => 'Historical data',
        params => $params,
        returns => 'ARRAY[V1TimeseriesItem]',
        };
}
# @return ARRAY[V1TimeseriesItem]
#
sub v1_ohlcv_symbol_id_history_get {
    my ($self, %args) = @_;

    # verify the required parameter 'symbol_id' is set
    unless (exists $args{'symbol_id'}) {
      croak("Missing the required parameter 'symbol_id' when calling v1_ohlcv_symbol_id_history_get");
    }

    # verify the required parameter 'period_id' is set
    unless (exists $args{'period_id'}) {
      croak("Missing the required parameter 'period_id' when calling v1_ohlcv_symbol_id_history_get");
    }

    # parse inputs
    my $_resource_path = '/v1/ohlcv/{symbol_id}/history';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'period_id'}) {
        $query_params->{'period_id'} = $self->{api_client}->to_query_value($args{'period_id'});
    }

    # query params
    if ( exists $args{'time_start'}) {
        $query_params->{'time_start'} = $self->{api_client}->to_query_value($args{'time_start'});
    }

    # query params
    if ( exists $args{'time_end'}) {
        $query_params->{'time_end'} = $self->{api_client}->to_query_value($args{'time_end'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'symbol_id'}) {
        my $_base_variable = "{" . "symbol_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'symbol_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(APIKey JWT )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[V1TimeseriesItem]', $response);
    return $_response_object;
}

#
# v1_ohlcv_symbol_id_latest_get
#
# Latest data
#
# @param string $symbol_id Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols) (required)
# @param string $period_id Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;) (required)
# @param int $limit Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
# @param boolean $include_empty_items  (optional, default to false)
{
    my $params = {
    'symbol_id' => {
        data_type => 'string',
        description => 'Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)',
        required => '1',
    },
    'period_id' => {
        data_type => 'string',
        description => 'Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)',
        required => '0',
    },
    'include_empty_items' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1_ohlcv_symbol_id_latest_get' } = {
        summary => 'Latest data',
        params => $params,
        returns => 'ARRAY[V1TimeseriesItem]',
        };
}
# @return ARRAY[V1TimeseriesItem]
#
sub v1_ohlcv_symbol_id_latest_get {
    my ($self, %args) = @_;

    # verify the required parameter 'symbol_id' is set
    unless (exists $args{'symbol_id'}) {
      croak("Missing the required parameter 'symbol_id' when calling v1_ohlcv_symbol_id_latest_get");
    }

    # verify the required parameter 'period_id' is set
    unless (exists $args{'period_id'}) {
      croak("Missing the required parameter 'period_id' when calling v1_ohlcv_symbol_id_latest_get");
    }

    # parse inputs
    my $_resource_path = '/v1/ohlcv/{symbol_id}/latest';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'period_id'}) {
        $query_params->{'period_id'} = $self->{api_client}->to_query_value($args{'period_id'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'include_empty_items'}) {
        $query_params->{'include_empty_items'} = $self->{api_client}->to_query_value($args{'include_empty_items'});
    }

    # path params
    if ( exists $args{'symbol_id'}) {
        my $_base_variable = "{" . "symbol_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'symbol_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(APIKey JWT )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[V1TimeseriesItem]', $response);
    return $_response_object;
}

1;
