# NOTE: This file is auto generated by OpenAPI Generator 7.13.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule RESTAPI.Api.ExternalMetrics do
  @moduledoc """
  API calls for all endpoints tagged `ExternalMetrics`.
  """

  alias RESTAPI.Connection
  import RESTAPI.RequestBuilder

  @doc """
  Historical metrics for the asset from external sources
  Get asset metrics history from external data providers. Data is typically aggregated daily.

  ### Parameters

  - `connection` (RESTAPI.Connection): Connection to server
  - `metric_id` (String.t): Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD` - internal metric key)
  - `asset_id` (String.t): Asset identifier (e.g., `USDC`, `USDT` - from supported assets list)
  - `opts` (keyword): Optional parameters
    - `:time_start` (DateTime.t): Starting time in ISO 8601
    - `:time_end` (DateTime.t): Ending time in ISO 8601
    - `:time_format` (String.t): If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
    - `:period_id` (String.t): Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
    - `:limit` (integer()): Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)

  ### Returns

  - `{:ok, [%map(){}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec v1_externalmetrics_asset_history_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, [map()]} | {:error, Tesla.Env.t}
  def v1_externalmetrics_asset_history_get(connection, metric_id, asset_id, opts \\ []) do
    optional_params = %{
      :time_start => :query,
      :time_end => :query,
      :time_format => :query,
      :period_id => :query,
      :limit => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/externalmetrics/asset/history")
      |> add_param(:query, :metric_id, metric_id)
      |> add_param(:query, :asset_id, asset_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, []},
      {400, false},
      {500, false}
    ])
  end

  @doc """
  Listing of metrics available for specific asset
  Get all metrics that are actually available for the specified asset from external providers.

  ### Parameters

  - `connection` (RESTAPI.Connection): Connection to server
  - `asset_id` (String.t): Asset identifier (e.g., USDC, USDT)
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%V1MetricInfo{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec v1_externalmetrics_asset_listing_get(Tesla.Env.client, String.t, keyword()) :: {:ok, [RESTAPI.Model.V1MetricInfo.t]} | {:error, Tesla.Env.t}
  def v1_externalmetrics_asset_listing_get(connection, asset_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/externalmetrics/asset/listing")
      |> add_param(:query, :asset_id, asset_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, RESTAPI.Model.V1MetricInfo}
    ])
  end

  @doc """
  Listing of all supported external assets
  Get all assets (primarily stablecoins) supported by external data providers.

  ### Parameters

  - `connection` (RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%V1ExternalAsset{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec v1_externalmetrics_assets_get(Tesla.Env.client, keyword()) :: {:ok, [RESTAPI.Model.V1ExternalAsset.t]} | {:error, Tesla.Env.t}
  def v1_externalmetrics_assets_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/externalmetrics/assets")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, RESTAPI.Model.V1ExternalAsset}
    ])
  end

  @doc """
  Historical metrics for the chain from external sources
  Get chain metrics history from external data providers. Data is typically aggregated daily.

  ### Parameters

  - `connection` (RESTAPI.Connection): Connection to server
  - `metric_id` (String.t): Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD` - internal metric key)
  - `chain_id` (String.t): Chain identifier (e.g., `Ethereum`, `Arbitrum` - from supported chains list)
  - `opts` (keyword): Optional parameters
    - `:time_start` (DateTime.t): Starting time in ISO 8601
    - `:time_end` (DateTime.t): Ending time in ISO 8601
    - `:time_format` (String.t): If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
    - `:period_id` (String.t): Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
    - `:limit` (integer()): Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)

  ### Returns

  - `{:ok, [%map(){}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec v1_externalmetrics_chain_history_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, [map()]} | {:error, Tesla.Env.t}
  def v1_externalmetrics_chain_history_get(connection, metric_id, chain_id, opts \\ []) do
    optional_params = %{
      :time_start => :query,
      :time_end => :query,
      :time_format => :query,
      :period_id => :query,
      :limit => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/externalmetrics/chain/history")
      |> add_param(:query, :metric_id, metric_id)
      |> add_param(:query, :chain_id, chain_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, []},
      {400, false},
      {500, false}
    ])
  end

  @doc """
  Listing of metrics available for specific chain
  Get all metrics that are actually available for the specified blockchain chain from external providers.

  ### Parameters

  - `connection` (RESTAPI.Connection): Connection to server
  - `chain_id` (String.t): Chain identifier (e.g., ETHEREUM, ARBITRUM)
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%V1MetricInfo{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec v1_externalmetrics_chain_listing_get(Tesla.Env.client, String.t, keyword()) :: {:ok, [RESTAPI.Model.V1MetricInfo.t]} | {:error, Tesla.Env.t}
  def v1_externalmetrics_chain_listing_get(connection, chain_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/externalmetrics/chain/listing")
      |> add_param(:query, :chain_id, chain_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, RESTAPI.Model.V1MetricInfo}
    ])
  end

  @doc """
  Listing of all supported external chains
  Get all blockchain chains supported by external data providers.

  ### Parameters

  - `connection` (RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%V1Chain{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec v1_externalmetrics_chains_get(Tesla.Env.client, keyword()) :: {:ok, [RESTAPI.Model.V1Chain.t]} | {:error, Tesla.Env.t}
  def v1_externalmetrics_chains_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/externalmetrics/chains")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, RESTAPI.Model.V1Chain}
    ])
  end

  @doc """
  Historical metrics for the exchange from both external and internal sources
  Get exchange metrics history from external data providers or internal sources based on metric type.

  ### Parameters

  - `connection` (RESTAPI.Connection): Connection to server
  - `metric_id` (String.t): Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD` for external, or generic metric IDs)
  - `exchange_id` (String.t): Exchange identifier (e.g., `BINANCE`, `UNISWAP-V3-ETHEREUM`)
  - `opts` (keyword): Optional parameters
    - `:time_start` (DateTime.t): Starting time in ISO 8601
    - `:time_end` (DateTime.t): Ending time in ISO 8601
    - `:time_format` (String.t): If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
    - `:period_id` (String.t): Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
    - `:limit` (integer()): Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)

  ### Returns

  - `{:ok, [%map(){}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec v1_externalmetrics_exchange_history_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, [map()]} | {:error, Tesla.Env.t}
  def v1_externalmetrics_exchange_history_get(connection, metric_id, exchange_id, opts \\ []) do
    optional_params = %{
      :time_start => :query,
      :time_end => :query,
      :time_format => :query,
      :period_id => :query,
      :limit => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/externalmetrics/exchange/history")
      |> add_param(:query, :metric_id, metric_id)
      |> add_param(:query, :exchange_id, exchange_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, []},
      {400, false},
      {500, false}
    ])
  end

  @doc """
  Listing of metrics available for specific exchange (both external and generic)
  Get all metrics that are actually available for the specified exchange from both external providers and internal sources.

  ### Parameters

  - `connection` (RESTAPI.Connection): Connection to server
  - `exchange_id` (String.t): Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM)
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%V1MetricInfo{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec v1_externalmetrics_exchange_listing_get(Tesla.Env.client, String.t, keyword()) :: {:ok, [RESTAPI.Model.V1MetricInfo.t]} | {:error, Tesla.Env.t}
  def v1_externalmetrics_exchange_listing_get(connection, exchange_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/externalmetrics/exchange/listing")
      |> add_param(:query, :exchange_id, exchange_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, RESTAPI.Model.V1MetricInfo}
    ])
  end

  @doc """
  Listing of all supported external exchanges
  Get all exchanges that have mapping to external data providers for metrics that actually have sources.  Only returns exchanges that are properly mapped to external protocols for metrics with defined sources.

  ### Parameters

  - `connection` (RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%V1ExternalExchange{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec v1_externalmetrics_exchanges_get(Tesla.Env.client, keyword()) :: {:ok, [RESTAPI.Model.V1ExternalExchange.t]} | {:error, Tesla.Env.t}
  def v1_externalmetrics_exchanges_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/externalmetrics/exchanges")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, RESTAPI.Model.V1ExternalExchange}
    ])
  end

  @doc """
  Listing of all supported metrics (both external and generic)
  Get all metrics available from external data providers and internal generic metrics.  External metrics have detailed descriptions, while generic metrics are marked as such.

  ### Parameters

  - `connection` (RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%V1MetricInfo{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec v1_externalmetrics_listing_get(Tesla.Env.client, keyword()) :: {:ok, [RESTAPI.Model.V1MetricInfo.t]} | {:error, Tesla.Env.t}
  def v1_externalmetrics_listing_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/externalmetrics/listing")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, RESTAPI.Model.V1MetricInfo}
    ])
  end
end
