/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ModelsExchangeTimeseriesItem model module.
 * @module model/ModelsExchangeTimeseriesItem
 * @version v1
 */
class ModelsExchangeTimeseriesItem {
    /**
     * Constructs a new <code>ModelsExchangeTimeseriesItem</code>.
     * Represents a timeseries item with price and volume information.
     * @alias module:model/ModelsExchangeTimeseriesItem
     */
    constructor() { 
        
        ModelsExchangeTimeseriesItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ModelsExchangeTimeseriesItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModelsExchangeTimeseriesItem} obj Optional instance to populate.
     * @return {module:model/ModelsExchangeTimeseriesItem} The populated <code>ModelsExchangeTimeseriesItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelsExchangeTimeseriesItem();

            if (data.hasOwnProperty('time_period_start')) {
                obj['time_period_start'] = ApiClient.convertToType(data['time_period_start'], 'Date');
            }
            if (data.hasOwnProperty('time_period_end')) {
                obj['time_period_end'] = ApiClient.convertToType(data['time_period_end'], 'Date');
            }
            if (data.hasOwnProperty('time_open')) {
                obj['time_open'] = ApiClient.convertToType(data['time_open'], 'Date');
            }
            if (data.hasOwnProperty('time_close')) {
                obj['time_close'] = ApiClient.convertToType(data['time_close'], 'Date');
            }
            if (data.hasOwnProperty('price_open')) {
                obj['price_open'] = ApiClient.convertToType(data['price_open'], 'Number');
            }
            if (data.hasOwnProperty('price_high')) {
                obj['price_high'] = ApiClient.convertToType(data['price_high'], 'Number');
            }
            if (data.hasOwnProperty('price_low')) {
                obj['price_low'] = ApiClient.convertToType(data['price_low'], 'Number');
            }
            if (data.hasOwnProperty('price_close')) {
                obj['price_close'] = ApiClient.convertToType(data['price_close'], 'Number');
            }
            if (data.hasOwnProperty('volume_traded')) {
                obj['volume_traded'] = ApiClient.convertToType(data['volume_traded'], 'Number');
            }
            if (data.hasOwnProperty('trades_count')) {
                obj['trades_count'] = ApiClient.convertToType(data['trades_count'], 'Number');
            }
            if (data.hasOwnProperty('symbol_id_exchange')) {
                obj['symbol_id_exchange'] = ApiClient.convertToType(data['symbol_id_exchange'], 'String');
            }
            if (data.hasOwnProperty('symbol_id_coinapi')) {
                obj['symbol_id_coinapi'] = ApiClient.convertToType(data['symbol_id_coinapi'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModelsExchangeTimeseriesItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModelsExchangeTimeseriesItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['symbol_id_exchange'] && !(typeof data['symbol_id_exchange'] === 'string' || data['symbol_id_exchange'] instanceof String)) {
            throw new Error("Expected the field `symbol_id_exchange` to be a primitive type in the JSON string but got " + data['symbol_id_exchange']);
        }
        // ensure the json data is a string
        if (data['symbol_id_coinapi'] && !(typeof data['symbol_id_coinapi'] === 'string' || data['symbol_id_coinapi'] instanceof String)) {
            throw new Error("Expected the field `symbol_id_coinapi` to be a primitive type in the JSON string but got " + data['symbol_id_coinapi']);
        }

        return true;
    }


}



/**
 * The start time of the time period.
 * @member {Date} time_period_start
 */
ModelsExchangeTimeseriesItem.prototype['time_period_start'] = undefined;

/**
 * The end time of the time period.
 * @member {Date} time_period_end
 */
ModelsExchangeTimeseriesItem.prototype['time_period_end'] = undefined;

/**
 * The time when the price opened.
 * @member {Date} time_open
 */
ModelsExchangeTimeseriesItem.prototype['time_open'] = undefined;

/**
 * The time when the price closed.
 * @member {Date} time_close
 */
ModelsExchangeTimeseriesItem.prototype['time_close'] = undefined;

/**
 * The opening price.
 * @member {Number} price_open
 */
ModelsExchangeTimeseriesItem.prototype['price_open'] = undefined;

/**
 * The highest price during the time period.
 * @member {Number} price_high
 */
ModelsExchangeTimeseriesItem.prototype['price_high'] = undefined;

/**
 * The lowest price during the time period.
 * @member {Number} price_low
 */
ModelsExchangeTimeseriesItem.prototype['price_low'] = undefined;

/**
 * The closing price.
 * @member {Number} price_close
 */
ModelsExchangeTimeseriesItem.prototype['price_close'] = undefined;

/**
 * The total volume traded during the time period. This could be zero if there was not transactions and there was only orderbook activity.
 * @member {Number} volume_traded
 */
ModelsExchangeTimeseriesItem.prototype['volume_traded'] = undefined;

/**
 * The number of trades executed during the time period. This could be zero if there was not transactions and there was only orderbook activity.
 * @member {Number} trades_count
 */
ModelsExchangeTimeseriesItem.prototype['trades_count'] = undefined;

/**
 * @member {String} symbol_id_exchange
 */
ModelsExchangeTimeseriesItem.prototype['symbol_id_exchange'] = undefined;

/**
 * @member {String} symbol_id_coinapi
 */
ModelsExchangeTimeseriesItem.prototype['symbol_id_coinapi'] = undefined;






export default ModelsExchangeTimeseriesItem;

