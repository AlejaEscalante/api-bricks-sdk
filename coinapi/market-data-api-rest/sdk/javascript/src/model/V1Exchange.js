/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import V1Icon from './V1Icon';

/**
 * The V1Exchange model module.
 * @module model/V1Exchange
 * @version v1
 */
class V1Exchange {
    /**
     * Constructs a new <code>V1Exchange</code>.
     * Represents an exchange.
     * @alias module:model/V1Exchange
     */
    constructor() { 
        
        V1Exchange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V1Exchange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V1Exchange} obj Optional instance to populate.
     * @return {module:model/V1Exchange} The populated <code>V1Exchange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V1Exchange();

            if (data.hasOwnProperty('exchange_id')) {
                obj['exchange_id'] = ApiClient.convertToType(data['exchange_id'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('data_start')) {
                obj['data_start'] = ApiClient.convertToType(data['data_start'], 'String');
            }
            if (data.hasOwnProperty('data_end')) {
                obj['data_end'] = ApiClient.convertToType(data['data_end'], 'String');
            }
            if (data.hasOwnProperty('data_quote_start')) {
                obj['data_quote_start'] = ApiClient.convertToType(data['data_quote_start'], 'Date');
            }
            if (data.hasOwnProperty('data_quote_end')) {
                obj['data_quote_end'] = ApiClient.convertToType(data['data_quote_end'], 'Date');
            }
            if (data.hasOwnProperty('data_orderbook_start')) {
                obj['data_orderbook_start'] = ApiClient.convertToType(data['data_orderbook_start'], 'Date');
            }
            if (data.hasOwnProperty('data_orderbook_end')) {
                obj['data_orderbook_end'] = ApiClient.convertToType(data['data_orderbook_end'], 'Date');
            }
            if (data.hasOwnProperty('data_trade_start')) {
                obj['data_trade_start'] = ApiClient.convertToType(data['data_trade_start'], 'Date');
            }
            if (data.hasOwnProperty('data_trade_end')) {
                obj['data_trade_end'] = ApiClient.convertToType(data['data_trade_end'], 'Date');
            }
            if (data.hasOwnProperty('data_trade_count')) {
                obj['data_trade_count'] = ApiClient.convertToType(data['data_trade_count'], 'Number');
            }
            if (data.hasOwnProperty('data_symbols_count')) {
                obj['data_symbols_count'] = ApiClient.convertToType(data['data_symbols_count'], 'Number');
            }
            if (data.hasOwnProperty('volume_1hrs_usd')) {
                obj['volume_1hrs_usd'] = ApiClient.convertToType(data['volume_1hrs_usd'], 'Number');
            }
            if (data.hasOwnProperty('volume_1day_usd')) {
                obj['volume_1day_usd'] = ApiClient.convertToType(data['volume_1day_usd'], 'Number');
            }
            if (data.hasOwnProperty('volume_1mth_usd')) {
                obj['volume_1mth_usd'] = ApiClient.convertToType(data['volume_1mth_usd'], 'Number');
            }
            if (data.hasOwnProperty('metric_id')) {
                obj['metric_id'] = ApiClient.convertToType(data['metric_id'], ['String']);
            }
            if (data.hasOwnProperty('icons')) {
                obj['icons'] = ApiClient.convertToType(data['icons'], [V1Icon]);
            }
            if (data.hasOwnProperty('rank')) {
                obj['rank'] = ApiClient.convertToType(data['rank'], 'Number');
            }
            if (data.hasOwnProperty('integration_status')) {
                obj['integration_status'] = ApiClient.convertToType(data['integration_status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V1Exchange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V1Exchange</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['exchange_id'] && !(typeof data['exchange_id'] === 'string' || data['exchange_id'] instanceof String)) {
            throw new Error("Expected the field `exchange_id` to be a primitive type in the JSON string but got " + data['exchange_id']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['data_start'] && !(typeof data['data_start'] === 'string' || data['data_start'] instanceof String)) {
            throw new Error("Expected the field `data_start` to be a primitive type in the JSON string but got " + data['data_start']);
        }
        // ensure the json data is a string
        if (data['data_end'] && !(typeof data['data_end'] === 'string' || data['data_end'] instanceof String)) {
            throw new Error("Expected the field `data_end` to be a primitive type in the JSON string but got " + data['data_end']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metric_id'])) {
            throw new Error("Expected the field `metric_id` to be an array in the JSON data but got " + data['metric_id']);
        }
        if (data['icons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['icons'])) {
                throw new Error("Expected the field `icons` to be an array in the JSON data but got " + data['icons']);
            }
            // validate the optional field `icons` (array)
            for (const item of data['icons']) {
                V1Icon.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['integration_status'] && !(typeof data['integration_status'] === 'string' || data['integration_status'] instanceof String)) {
            throw new Error("Expected the field `integration_status` to be a primitive type in the JSON string but got " + data['integration_status']);
        }

        return true;
    }


}



/**
 * Gets or sets the exchange ID.
 * @member {String} exchange_id
 */
V1Exchange.prototype['exchange_id'] = undefined;

/**
 * Gets or sets the website URL of the exchange.
 * @member {String} website
 */
V1Exchange.prototype['website'] = undefined;

/**
 * Gets or sets the name of the exchange.
 * @member {String} name
 */
V1Exchange.prototype['name'] = undefined;

/**
 * @member {String} data_start
 */
V1Exchange.prototype['data_start'] = undefined;

/**
 * @member {String} data_end
 */
V1Exchange.prototype['data_end'] = undefined;

/**
 * Gets or sets the start date of quote data.
 * @member {Date} data_quote_start
 */
V1Exchange.prototype['data_quote_start'] = undefined;

/**
 * Gets or sets the end date of quote data.
 * @member {Date} data_quote_end
 */
V1Exchange.prototype['data_quote_end'] = undefined;

/**
 * Gets or sets the start date of order book data.
 * @member {Date} data_orderbook_start
 */
V1Exchange.prototype['data_orderbook_start'] = undefined;

/**
 * Gets or sets the end date of order book data.
 * @member {Date} data_orderbook_end
 */
V1Exchange.prototype['data_orderbook_end'] = undefined;

/**
 * Gets or sets the start date of trade data.
 * @member {Date} data_trade_start
 */
V1Exchange.prototype['data_trade_start'] = undefined;

/**
 * Gets or sets the end date of trade data.
 * @member {Date} data_trade_end
 */
V1Exchange.prototype['data_trade_end'] = undefined;

/**
 * Gets or sets the number of trades.
 * @member {Number} data_trade_count
 */
V1Exchange.prototype['data_trade_count'] = undefined;

/**
 * Gets or sets the number of symbols.
 * @member {Number} data_symbols_count
 */
V1Exchange.prototype['data_symbols_count'] = undefined;

/**
 * Gets or sets the USD volume in the last 1 hour.
 * @member {Number} volume_1hrs_usd
 */
V1Exchange.prototype['volume_1hrs_usd'] = undefined;

/**
 * Gets or sets the USD volume in the last 1 day.
 * @member {Number} volume_1day_usd
 */
V1Exchange.prototype['volume_1day_usd'] = undefined;

/**
 * Gets or sets the USD volume in the last 1 month.
 * @member {Number} volume_1mth_usd
 */
V1Exchange.prototype['volume_1mth_usd'] = undefined;

/**
 * Gets or sets the list of metric IDs.
 * @member {Array.<String>} metric_id
 */
V1Exchange.prototype['metric_id'] = undefined;

/**
 * Gets or sets the list of icons for the exchange.
 * @member {Array.<module:model/V1Icon>} icons
 */
V1Exchange.prototype['icons'] = undefined;

/**
 * Rank of the exchange.
 * @member {Number} rank
 */
V1Exchange.prototype['rank'] = undefined;

/**
 * Status of the integration
 * @member {String} integration_status
 */
V1Exchange.prototype['integration_status'] = undefined;






export default V1Exchange;

