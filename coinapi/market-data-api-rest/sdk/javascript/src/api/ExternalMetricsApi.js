/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import V1Chain from '../model/V1Chain';
import V1ExternalAsset from '../model/V1ExternalAsset';
import V1ExternalExchange from '../model/V1ExternalExchange';
import V1MetricInfo from '../model/V1MetricInfo';

/**
* ExternalMetrics service.
* @module api/ExternalMetricsApi
* @version v1
*/
export default class ExternalMetricsApi {

    /**
    * Constructs a new ExternalMetricsApi. 
    * @alias module:api/ExternalMetricsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1ExternalmetricsAssetHistoryGet operation.
     * @callback module:api/ExternalMetricsApi~v1ExternalmetricsAssetHistoryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Historical metrics for the asset from external sources
     * Get asset metrics history from external data providers. Data is typically aggregated daily.
     * @param {String} metricId Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD` - internal metric key)
     * @param {String} assetId Asset identifier (e.g., `USDC`, `USDT` - from supported assets list)
     * @param {Object} opts Optional parameters
     * @param {Date} [timeStart] Starting time in ISO 8601
     * @param {Date} [timeEnd] Ending time in ISO 8601
     * @param {String} [timeFormat] If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
     * @param {String} [periodId] Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
     * @param {Number} [limit = 100)] Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
     * @param {module:api/ExternalMetricsApi~v1ExternalmetricsAssetHistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    v1ExternalmetricsAssetHistoryGet(metricId, assetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'metricId' is set
      if (metricId === undefined || metricId === null) {
        throw new Error("Missing the required parameter 'metricId' when calling v1ExternalmetricsAssetHistoryGet");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling v1ExternalmetricsAssetHistoryGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'metric_id': metricId,
        'asset_id': assetId,
        'time_start': opts['timeStart'],
        'time_end': opts['timeEnd'],
        'time_format': opts['timeFormat'],
        'period_id': opts['periodId'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/v1/externalmetrics/asset/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ExternalmetricsAssetListingGet operation.
     * @callback module:api/ExternalMetricsApi~v1ExternalmetricsAssetListingGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1MetricInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listing of metrics available for specific asset
     * Get all metrics that are actually available for the specified asset from external providers.
     * @param {String} assetId Asset identifier (e.g., USDC, USDT)
     * @param {module:api/ExternalMetricsApi~v1ExternalmetricsAssetListingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1MetricInfo>}
     */
    v1ExternalmetricsAssetListingGet(assetId, callback) {
      let postBody = null;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling v1ExternalmetricsAssetListingGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'asset_id': assetId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1MetricInfo];
      return this.apiClient.callApi(
        '/v1/externalmetrics/asset/listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ExternalmetricsAssetsGet operation.
     * @callback module:api/ExternalMetricsApi~v1ExternalmetricsAssetsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1ExternalAsset>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listing of all supported external assets
     * Get all assets (primarily stablecoins) supported by external data providers.
     * @param {module:api/ExternalMetricsApi~v1ExternalmetricsAssetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1ExternalAsset>}
     */
    v1ExternalmetricsAssetsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1ExternalAsset];
      return this.apiClient.callApi(
        '/v1/externalmetrics/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ExternalmetricsChainHistoryGet operation.
     * @callback module:api/ExternalMetricsApi~v1ExternalmetricsChainHistoryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Historical metrics for the chain from external sources
     * Get chain metrics history from external data providers. Data is typically aggregated daily.
     * @param {String} metricId Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD` - internal metric key)
     * @param {String} chainId Chain identifier (e.g., `Ethereum`, `Arbitrum` - from supported chains list)
     * @param {Object} opts Optional parameters
     * @param {Date} [timeStart] Starting time in ISO 8601
     * @param {Date} [timeEnd] Ending time in ISO 8601
     * @param {String} [timeFormat] If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
     * @param {String} [periodId] Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
     * @param {Number} [limit = 100)] Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
     * @param {module:api/ExternalMetricsApi~v1ExternalmetricsChainHistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    v1ExternalmetricsChainHistoryGet(metricId, chainId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'metricId' is set
      if (metricId === undefined || metricId === null) {
        throw new Error("Missing the required parameter 'metricId' when calling v1ExternalmetricsChainHistoryGet");
      }
      // verify the required parameter 'chainId' is set
      if (chainId === undefined || chainId === null) {
        throw new Error("Missing the required parameter 'chainId' when calling v1ExternalmetricsChainHistoryGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'metric_id': metricId,
        'chain_id': chainId,
        'time_start': opts['timeStart'],
        'time_end': opts['timeEnd'],
        'time_format': opts['timeFormat'],
        'period_id': opts['periodId'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/v1/externalmetrics/chain/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ExternalmetricsChainListingGet operation.
     * @callback module:api/ExternalMetricsApi~v1ExternalmetricsChainListingGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1MetricInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listing of metrics available for specific chain
     * Get all metrics that are actually available for the specified blockchain chain from external providers.
     * @param {String} chainId Chain identifier (e.g., ETHEREUM, ARBITRUM)
     * @param {module:api/ExternalMetricsApi~v1ExternalmetricsChainListingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1MetricInfo>}
     */
    v1ExternalmetricsChainListingGet(chainId, callback) {
      let postBody = null;
      // verify the required parameter 'chainId' is set
      if (chainId === undefined || chainId === null) {
        throw new Error("Missing the required parameter 'chainId' when calling v1ExternalmetricsChainListingGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'chain_id': chainId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1MetricInfo];
      return this.apiClient.callApi(
        '/v1/externalmetrics/chain/listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ExternalmetricsChainsGet operation.
     * @callback module:api/ExternalMetricsApi~v1ExternalmetricsChainsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Chain>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listing of all supported external chains
     * Get all blockchain chains supported by external data providers.
     * @param {module:api/ExternalMetricsApi~v1ExternalmetricsChainsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Chain>}
     */
    v1ExternalmetricsChainsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1Chain];
      return this.apiClient.callApi(
        '/v1/externalmetrics/chains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ExternalmetricsExchangeHistoryGet operation.
     * @callback module:api/ExternalMetricsApi~v1ExternalmetricsExchangeHistoryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Historical metrics for the exchange from both external and internal sources
     * Get exchange metrics history from external data providers or internal sources based on metric type.
     * @param {String} metricId Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD` for external, or generic metric IDs)
     * @param {String} exchangeId Exchange identifier (e.g., `BINANCE`, `UNISWAP-V3-ETHEREUM`)
     * @param {Object} opts Optional parameters
     * @param {Date} [timeStart] Starting time in ISO 8601
     * @param {Date} [timeEnd] Ending time in ISO 8601
     * @param {String} [timeFormat] If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
     * @param {String} [periodId] Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
     * @param {Number} [limit = 100)] Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
     * @param {module:api/ExternalMetricsApi~v1ExternalmetricsExchangeHistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    v1ExternalmetricsExchangeHistoryGet(metricId, exchangeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'metricId' is set
      if (metricId === undefined || metricId === null) {
        throw new Error("Missing the required parameter 'metricId' when calling v1ExternalmetricsExchangeHistoryGet");
      }
      // verify the required parameter 'exchangeId' is set
      if (exchangeId === undefined || exchangeId === null) {
        throw new Error("Missing the required parameter 'exchangeId' when calling v1ExternalmetricsExchangeHistoryGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'metric_id': metricId,
        'exchange_id': exchangeId,
        'time_start': opts['timeStart'],
        'time_end': opts['timeEnd'],
        'time_format': opts['timeFormat'],
        'period_id': opts['periodId'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/v1/externalmetrics/exchange/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ExternalmetricsExchangeListingGet operation.
     * @callback module:api/ExternalMetricsApi~v1ExternalmetricsExchangeListingGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1MetricInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listing of metrics available for specific exchange (both external and generic)
     * Get all metrics that are actually available for the specified exchange from both external providers and internal sources.
     * @param {String} exchangeId Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM)
     * @param {module:api/ExternalMetricsApi~v1ExternalmetricsExchangeListingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1MetricInfo>}
     */
    v1ExternalmetricsExchangeListingGet(exchangeId, callback) {
      let postBody = null;
      // verify the required parameter 'exchangeId' is set
      if (exchangeId === undefined || exchangeId === null) {
        throw new Error("Missing the required parameter 'exchangeId' when calling v1ExternalmetricsExchangeListingGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'exchange_id': exchangeId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1MetricInfo];
      return this.apiClient.callApi(
        '/v1/externalmetrics/exchange/listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ExternalmetricsExchangesGet operation.
     * @callback module:api/ExternalMetricsApi~v1ExternalmetricsExchangesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1ExternalExchange>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listing of all supported external exchanges
     * Get all exchanges that have mapping to external data providers for metrics that actually have sources.  Only returns exchanges that are properly mapped to external protocols for metrics with defined sources.
     * @param {module:api/ExternalMetricsApi~v1ExternalmetricsExchangesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1ExternalExchange>}
     */
    v1ExternalmetricsExchangesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1ExternalExchange];
      return this.apiClient.callApi(
        '/v1/externalmetrics/exchanges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ExternalmetricsListingGet operation.
     * @callback module:api/ExternalMetricsApi~v1ExternalmetricsListingGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1MetricInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listing of all supported metrics (both external and generic)
     * Get all metrics available from external data providers and internal generic metrics.  External metrics have detailed descriptions, while generic metrics are marked as such.
     * @param {module:api/ExternalMetricsApi~v1ExternalmetricsListingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1MetricInfo>}
     */
    v1ExternalmetricsListingGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1MetricInfo];
      return this.apiClient.callApi(
        '/v1/externalmetrics/listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
