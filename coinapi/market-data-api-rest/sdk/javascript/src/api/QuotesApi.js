/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import V1Quote from '../model/V1Quote';
import V1QuoteTrade from '../model/V1QuoteTrade';

/**
* Quotes service.
* @module api/QuotesApi
* @version v1
*/
export default class QuotesApi {

    /**
    * Constructs a new QuotesApi. 
    * @alias module:api/QuotesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1QuotesCurrentGet operation.
     * @callback module:api/QuotesApi~v1QuotesCurrentGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1QuoteTrade>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Current data
     * Get current quotes for all symbols or for a specific symbol.              :::info When requesting current data for a specific symbol, output is not encapsulated into JSON array as only one item is returned. :::
     * @param {Object} opts Optional parameters
     * @param {String} [filterSymbolId] Comma or semicolon delimited parts of symbol identifier used to filter response. (optional)
     * @param {module:api/QuotesApi~v1QuotesCurrentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1QuoteTrade>}
     */
    v1QuotesCurrentGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_symbol_id': opts['filterSymbolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1QuoteTrade];
      return this.apiClient.callApi(
        '/v1/quotes/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1QuotesLatestGet operation.
     * @callback module:api/QuotesApi~v1QuotesLatestGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Quote>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Latest data
     * Get latest updates of the quotes up to 1 minute ago. Latest data is always returned in time descending order.
     * @param {Object} opts Optional parameters
     * @param {String} [filterSymbolId] Comma or semicolon delimited parts of symbol identifier used to filter response. (optional)
     * @param {Number} [limit = 100)] Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
     * @param {module:api/QuotesApi~v1QuotesLatestGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Quote>}
     */
    v1QuotesLatestGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_symbol_id': opts['filterSymbolId'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1Quote];
      return this.apiClient.callApi(
        '/v1/quotes/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1QuotesSymbolIdCurrentGet operation.
     * @callback module:api/QuotesApi~v1QuotesSymbolIdCurrentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1QuoteTrade} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Current quotes for a specific symbol
     * @param {String} symbolId The symbol identifier (from the Metadata -> Symbols)
     * @param {module:api/QuotesApi~v1QuotesSymbolIdCurrentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1QuoteTrade}
     */
    v1QuotesSymbolIdCurrentGet(symbolId, callback) {
      let postBody = null;
      // verify the required parameter 'symbolId' is set
      if (symbolId === undefined || symbolId === null) {
        throw new Error("Missing the required parameter 'symbolId' when calling v1QuotesSymbolIdCurrentGet");
      }

      let pathParams = {
        'symbol_id': symbolId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = V1QuoteTrade;
      return this.apiClient.callApi(
        '/v1/quotes/{symbol_id}/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1QuotesSymbolIdHistoryGet operation.
     * @callback module:api/QuotesApi~v1QuotesSymbolIdHistoryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Quote>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Historical data
     * Get historical quote updates within requested time range, returned in time ascending order.  :::warning The 'time_start' and 'time_end' parameters must be from the same day as this endpoint provides intraday data only for specific day. Please use the 'date' parameter instead for querying data for a specific day without filter. :::
     * @param {String} symbolId Symbol identifier for requested timeseries (from the Metadata -> Symbols)
     * @param {Object} opts Optional parameters
     * @param {String} [date] Date in ISO 8601, returned data is for the whole given day (preferred method, required if 'time_start' is not provided)
     * @param {String} [timeStart] Starting time in ISO 8601
     * @param {String} [timeEnd] Timeseries ending time in ISO 8601
     * @param {Number} [limit = 100)] Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
     * @param {module:api/QuotesApi~v1QuotesSymbolIdHistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Quote>}
     */
    v1QuotesSymbolIdHistoryGet(symbolId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbolId' is set
      if (symbolId === undefined || symbolId === null) {
        throw new Error("Missing the required parameter 'symbolId' when calling v1QuotesSymbolIdHistoryGet");
      }

      let pathParams = {
        'symbol_id': symbolId
      };
      let queryParams = {
        'date': opts['date'],
        'time_start': opts['timeStart'],
        'time_end': opts['timeEnd'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1Quote];
      return this.apiClient.callApi(
        '/v1/quotes/{symbol_id}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1QuotesSymbolIdLatestGet operation.
     * @callback module:api/QuotesApi~v1QuotesSymbolIdLatestGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Quote>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Latest quote updates for a specific symbol
     * @param {String} symbolId Symbol identifier of requested timeseries (from the Metadata -> Symbols)
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
     * @param {module:api/QuotesApi~v1QuotesSymbolIdLatestGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Quote>}
     */
    v1QuotesSymbolIdLatestGet(symbolId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'symbolId' is set
      if (symbolId === undefined || symbolId === null) {
        throw new Error("Missing the required parameter 'symbolId' when calling v1QuotesSymbolIdLatestGet");
      }

      let pathParams = {
        'symbol_id': symbolId
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1Quote];
      return this.apiClient.callApi(
        '/v1/quotes/{symbol_id}/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
