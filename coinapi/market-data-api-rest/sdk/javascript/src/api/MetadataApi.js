/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import V1Asset from '../model/V1Asset';
import V1Chain from '../model/V1Chain';
import V1Exchange from '../model/V1Exchange';
import V1Icon from '../model/V1Icon';
import V1Symbol from '../model/V1Symbol';
import V1SymbolMapping from '../model/V1SymbolMapping';

/**
* Metadata service.
* @module api/MetadataApi
* @version v1
*/
export default class MetadataApi {

    /**
    * Constructs a new MetadataApi. 
    * @alias module:api/MetadataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1AssetsAssetIdGet operation.
     * @callback module:api/MetadataApi~v1AssetsAssetIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Asset>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all assets by asset ID
     * @param {String} assetId The asset ID.
     * @param {module:api/MetadataApi~v1AssetsAssetIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Asset>}
     */
    v1AssetsAssetIdGet(assetId, callback) {
      let postBody = null;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling v1AssetsAssetIdGet");
      }

      let pathParams = {
        'asset_id': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1Asset];
      return this.apiClient.callApi(
        '/v1/assets/{asset_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AssetsGet operation.
     * @callback module:api/MetadataApi~v1AssetsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Asset>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all assets
     * Retrieves all assets.              :::info Our asset identifiers are aligned with the ISO 4217 currency codes standard only for fiat money (government or law regulated currency). :::              :::info Properties of the output are providing aggregated information from across all symbols related to the specific asset. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source. :::
     * @param {Object} opts Optional parameters
     * @param {String} [filterAssetId] Comma or semicolon delimited asset identifiers used to filter response. (optional, eg. `BTC;ETH`).
     * @param {module:api/MetadataApi~v1AssetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Asset>}
     */
    v1AssetsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_asset_id': opts['filterAssetId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1Asset];
      return this.apiClient.callApi(
        '/v1/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1AssetsIconsSizeGet operation.
     * @callback module:api/MetadataApi~v1AssetsIconsSizeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Icon>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all asset icons
     * Gets the list of icons (of the given size) for all the assets.
     * @param {Number} size The size of the icons.
     * @param {module:api/MetadataApi~v1AssetsIconsSizeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Icon>}
     */
    v1AssetsIconsSizeGet(size, callback) {
      let postBody = null;
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling v1AssetsIconsSizeGet");
      }

      let pathParams = {
        'size': size
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1Icon];
      return this.apiClient.callApi(
        '/v1/assets/icons/{size}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ChainsChainIdGet operation.
     * @callback module:api/MetadataApi~v1ChainsChainIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Chain>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all chains by chain ID
     * @param {String} chainId The chain ID.
     * @param {module:api/MetadataApi~v1ChainsChainIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Chain>}
     */
    v1ChainsChainIdGet(chainId, callback) {
      let postBody = null;
      // verify the required parameter 'chainId' is set
      if (chainId === undefined || chainId === null) {
        throw new Error("Missing the required parameter 'chainId' when calling v1ChainsChainIdGet");
      }

      let pathParams = {
        'chain_id': chainId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1Chain];
      return this.apiClient.callApi(
        '/v1/chains/{chain_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ChainsGet operation.
     * @callback module:api/MetadataApi~v1ChainsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Chain>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all blockchain chains
     * Retrieves all blockchain chains supported by the system.              :::info Properties of the output are providing aggregated information from across all symbols related to the specific chain. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source. :::
     * @param {Object} opts Optional parameters
     * @param {String} [filterChainId] Comma or semicolon delimited chain identifiers used to filter response. (optional, eg. `ETHEREUM;ARBITRUM`).
     * @param {module:api/MetadataApi~v1ChainsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Chain>}
     */
    v1ChainsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_chain_id': opts['filterChainId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1Chain];
      return this.apiClient.callApi(
        '/v1/chains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ExchangesExchangeIdGet operation.
     * @callback module:api/MetadataApi~v1ExchangesExchangeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Exchange>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all exchanges by exchange_id
     * @param {String} exchangeId The ID of the exchange.
     * @param {module:api/MetadataApi~v1ExchangesExchangeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Exchange>}
     */
    v1ExchangesExchangeIdGet(exchangeId, callback) {
      let postBody = null;
      // verify the required parameter 'exchangeId' is set
      if (exchangeId === undefined || exchangeId === null) {
        throw new Error("Missing the required parameter 'exchangeId' when calling v1ExchangesExchangeIdGet");
      }

      let pathParams = {
        'exchange_id': exchangeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1Exchange];
      return this.apiClient.callApi(
        '/v1/exchanges/{exchange_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ExchangesGet operation.
     * @callback module:api/MetadataApi~v1ExchangesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Exchange>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all exchanges
     * Get a detailed list of exchanges provided by the system.              :::info Properties of the output are providing aggregated information from across all symbols related to the specific exchange. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source. :::
     * @param {Object} opts Optional parameters
     * @param {String} [filterExchangeId] Comma or semicolon delimited exchange identifiers used to filter response. (optional, eg. `BITSTAMP;GEMINI`)
     * @param {module:api/MetadataApi~v1ExchangesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Exchange>}
     */
    v1ExchangesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_exchange_id': opts['filterExchangeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1Exchange];
      return this.apiClient.callApi(
        '/v1/exchanges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ExchangesIconsSizeGet operation.
     * @callback module:api/MetadataApi~v1ExchangesIconsSizeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Icon>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of icons for the exchanges
     * @param {Number} size The size of the icons.
     * @param {module:api/MetadataApi~v1ExchangesIconsSizeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Icon>}
     */
    v1ExchangesIconsSizeGet(size, callback) {
      let postBody = null;
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling v1ExchangesIconsSizeGet");
      }

      let pathParams = {
        'size': size
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1Icon];
      return this.apiClient.callApi(
        '/v1/exchanges/icons/{size}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SymbolsExchangeIdGet operation.
     * @callback module:api/MetadataApi~v1SymbolsExchangeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Symbol>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of symbols for the exchange
     * @param {String} exchangeId The ID of the exchange (from the Metadata -> Exchanges)
     * @param {Object} opts Optional parameters
     * @param {String} [filterSymbolId] The filter for symbol ID.
     * @param {String} [filterAssetId] The filter for asset ID.
     * @param {module:api/MetadataApi~v1SymbolsExchangeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Symbol>}
     */
    v1SymbolsExchangeIdGet(exchangeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'exchangeId' is set
      if (exchangeId === undefined || exchangeId === null) {
        throw new Error("Missing the required parameter 'exchangeId' when calling v1SymbolsExchangeIdGet");
      }

      let pathParams = {
        'exchange_id': exchangeId
      };
      let queryParams = {
        'filter_symbol_id': opts['filterSymbolId'],
        'filter_asset_id': opts['filterAssetId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1Symbol];
      return this.apiClient.callApi(
        '/v1/symbols/{exchange_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SymbolsExchangeIdHistoryGet operation.
     * @callback module:api/MetadataApi~v1SymbolsExchangeIdHistoryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Symbol>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get symbol history for an exchange with pagination.
     * @param {String} exchangeId The ID of the exchange.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The page number.
     * @param {Number} [limit = 100)] Number of records to return.
     * @param {module:api/MetadataApi~v1SymbolsExchangeIdHistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Symbol>}
     */
    v1SymbolsExchangeIdHistoryGet(exchangeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'exchangeId' is set
      if (exchangeId === undefined || exchangeId === null) {
        throw new Error("Missing the required parameter 'exchangeId' when calling v1SymbolsExchangeIdHistoryGet");
      }

      let pathParams = {
        'exchange_id': exchangeId
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1Symbol];
      return this.apiClient.callApi(
        '/v1/symbols/{exchange_id}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SymbolsGet operation.
     * @callback module:api/MetadataApi~v1SymbolsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1Symbol>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all symbols
     * Retrieves all symbols with optional filtering.              :::info \"price_precision\" and \"size_precision\" are data precisions and are not always the same precisions used for trading eg. for the \"BINANCE\" exchanges. :::              :::info You should not assume that the market data will be always within the resolution provided by the \"price_precision\" and \"size_precision\". The fact that the precision values can be derived from a posterior implies the fact that this data could be delayed, also it can be changed by the data source without notice and we will immediately deliver data with the new precision while could not update the precision values in this endpoint immediately. :::              ### Symbol identifier              Our symbol identifier is created using a pattern that depends on symbol type.              Type | `symbol_id` pattern --------- | --------- SPOT | `{exchange_id}_SPOT_{asset_id_base}_{asset_id_quote}` FUTURES | `{exchange_id}_FTS_{asset_id_base}_{asset_id_quote}_{YYMMDD of future_delivery_time}` OPTION | `{exchange_id}_OPT_{asset_id_base}_{asset_id_quote}_{YYMMDD of option_expiration_time}_{option_strike_price}_{option_type_is_call as C/P}` PERPETUAL | `{exchange_id}_PERP_{asset_id_base}_{asset_id_quote}` INDEX | `{exchange_id}_IDX_{index_id}` CREDIT | `{exchange_id}_CRE_{asset_id_base}` CONTACT  | `{exchange_id}_COT_{contract_id}`              :::info In the unlikely event when the \"symbol_id\" for more than one market is the same. We will append the additional term (prefixed with the \"_\") at the end of the duplicated identifiers to differentiate them. :::info              ### Symbol types list (enumeration of `symbol_type` output variable)              Type | Name | Description -------- | - | ----------- SPOT | FX Spot | Agreement to exchange one asset for another one *(e.g. Buy BTC for USD)* FUTURES | Futures contract | FX Spot derivative contract where traders agree to trade fx spot at predetermined future time OPTION | Option contract | FX Spot derivative contract where traders agree to trade right to require buy or sell of fx spot at agreed price on exercise date PERPETUAL | Perpetual contract | FX Spot derivative contract where traders agree to trade fx spot continously without predetermined future delivery time INDEX | Index | Statistical composite that measures changes in the economy or markets. CREDIT | Credit/Funding | Margin funding contract. Order book displays lending offers and borrow bids. Price represents the daily rate. CONTRACT | Contract | Represents other types of financial instruments *(e.g. spreads, interest rate swap)*              ### Additional output variables for `symbol_type = INDEX`              Variable | Description --------- | ----------- index_id | Index identifier index_display_name | Human readable name of the index *(optional)* index_display_description | Description of the index *(optional)*              ### Additional output variables for `symbol_type = FUTURES`              Variable | Description --------- | ----------- future_delivery_time | Predetermined time of futures contract delivery date in ISO 8601 future_contract_unit | Contact size *(eg. 10 BTC if `future_contract_unit` = `10` and `future_contract_unit_asset` = `BTC`)* future_contract_unit_asset | Identifier of the asset used to denominate the contract unit              ### Additional output variables for `symbol_type = PERPETUAL`              Variable | Description --------- | ----------- future_contract_unit | Contact size *(eg. 10 BTC if `future_contract_unit` = `10` and `future_contract_unit_asset` = `BTC`)* future_contract_unit_asset | Identifier of the asset used to denominate the contract unit              ### Additional output variables for `symbol_type = OPTION`              Variable | Description --------- | ----------- option_type_is_call | Boolean value representing option type. `true` for Call options, `false` for Put options option_strike_price | Price at which option contract can be exercised option_contract_unit | Base asset amount of underlying spot which single option represents option_exercise_style | Option exercise style. Can be `EUROPEAN` or `AMERICAN` option_expiration_time | Option contract expiration time in ISO 8601              ### Additional output variables for `symbol_type = CONTRACT`              Variable | Description --------- | ----------- contract_delivery_time | Predetermined time of contract delivery date in ISO 8601 contract_unit | Contact size *(eg. 10 BTC if `contract_unit` = `10` and `contract_unit_asset` = `BTC`)* contract_unit_asset | Identifier of the asset used to denominate the contract unit contract_id | Identifier of contract by the exchange
     * @param {Object} opts Optional parameters
     * @param {String} [filterSymbolId] Comma or semicolon delimited parts of symbol identifier used to filter response. (optional, eg. `BITSTAMP`_ or `BINANCE_SPOT_`)
     * @param {String} [filterExchangeId] The filter for exchange ID.
     * @param {String} [filterAssetId] The filter for asset ID.
     * @param {module:api/MetadataApi~v1SymbolsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1Symbol>}
     */
    v1SymbolsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_symbol_id': opts['filterSymbolId'],
        'filter_exchange_id': opts['filterExchangeId'],
        'filter_asset_id': opts['filterAssetId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1Symbol];
      return this.apiClient.callApi(
        '/v1/symbols', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SymbolsMapExchangeIdGet operation.
     * @callback module:api/MetadataApi~v1SymbolsMapExchangeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/V1SymbolMapping>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List symbol mapping for the exchange
     * @param {String} exchangeId The ID of the exchange (from the Metadata -> Exchanges)
     * @param {module:api/MetadataApi~v1SymbolsMapExchangeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/V1SymbolMapping>}
     */
    v1SymbolsMapExchangeIdGet(exchangeId, callback) {
      let postBody = null;
      // verify the required parameter 'exchangeId' is set
      if (exchangeId === undefined || exchangeId === null) {
        throw new Error("Missing the required parameter 'exchangeId' when calling v1SymbolsMapExchangeIdGet");
      }

      let pathParams = {
        'exchange_id': exchangeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKey', 'JWT'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json', 'application/x-msgpack'];
      let returnType = [V1SymbolMapping];
      return this.apiClient.callApi(
        '/v1/symbols/map/{exchange_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
