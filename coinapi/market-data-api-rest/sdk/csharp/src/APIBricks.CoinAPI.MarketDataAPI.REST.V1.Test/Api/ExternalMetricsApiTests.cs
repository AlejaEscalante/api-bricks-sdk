/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Api;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace APIBricks.CoinAPI.MarketDataAPI.REST.V1.Test.Api
{
    /// <summary>
    ///  Class for testing ExternalMetricsApi
    /// </summary>
    public sealed class ExternalMetricsApiTests : ApiTestsBase
    {
        private readonly IExternalMetricsApi _instance;

        public ExternalMetricsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IExternalMetricsApi>();
        }

        /// <summary>
        /// Test V1ExternalmetricsAssetHistoryGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1ExternalmetricsAssetHistoryGetAsyncTest()
        {
            string metricId = default!;
            string assetId = default!;
            Client.Option<DateTime> timeStart = default!;
            Client.Option<DateTime> timeEnd = default!;
            Client.Option<string> timeFormat = default!;
            Client.Option<string> periodId = default!;
            Client.Option<int> limit = default!;
            var response = await _instance.V1ExternalmetricsAssetHistoryGetAsync(metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit);
            var model = response.Ok();
            Assert.IsType<List<Object>>(model);
        }

        /// <summary>
        /// Test V1ExternalmetricsAssetListingGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1ExternalmetricsAssetListingGetAsyncTest()
        {
            string assetId = default!;
            var response = await _instance.V1ExternalmetricsAssetListingGetAsync(assetId);
            var model = response.Ok();
            Assert.IsType<List<V1MetricInfo>>(model);
        }

        /// <summary>
        /// Test V1ExternalmetricsAssetsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1ExternalmetricsAssetsGetAsyncTest()
        {
            var response = await _instance.V1ExternalmetricsAssetsGetAsync();
            var model = response.Ok();
            Assert.IsType<List<V1ExternalAsset>>(model);
        }

        /// <summary>
        /// Test V1ExternalmetricsChainHistoryGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1ExternalmetricsChainHistoryGetAsyncTest()
        {
            string metricId = default!;
            string chainId = default!;
            Client.Option<DateTime> timeStart = default!;
            Client.Option<DateTime> timeEnd = default!;
            Client.Option<string> timeFormat = default!;
            Client.Option<string> periodId = default!;
            Client.Option<int> limit = default!;
            var response = await _instance.V1ExternalmetricsChainHistoryGetAsync(metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit);
            var model = response.Ok();
            Assert.IsType<List<Object>>(model);
        }

        /// <summary>
        /// Test V1ExternalmetricsChainListingGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1ExternalmetricsChainListingGetAsyncTest()
        {
            string chainId = default!;
            var response = await _instance.V1ExternalmetricsChainListingGetAsync(chainId);
            var model = response.Ok();
            Assert.IsType<List<V1MetricInfo>>(model);
        }

        /// <summary>
        /// Test V1ExternalmetricsChainsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1ExternalmetricsChainsGetAsyncTest()
        {
            var response = await _instance.V1ExternalmetricsChainsGetAsync();
            var model = response.Ok();
            Assert.IsType<List<V1Chain>>(model);
        }

        /// <summary>
        /// Test V1ExternalmetricsExchangeHistoryGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1ExternalmetricsExchangeHistoryGetAsyncTest()
        {
            string metricId = default!;
            string exchangeId = default!;
            Client.Option<DateTime> timeStart = default!;
            Client.Option<DateTime> timeEnd = default!;
            Client.Option<string> timeFormat = default!;
            Client.Option<string> periodId = default!;
            Client.Option<int> limit = default!;
            var response = await _instance.V1ExternalmetricsExchangeHistoryGetAsync(metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit);
            var model = response.Ok();
            Assert.IsType<List<Object>>(model);
        }

        /// <summary>
        /// Test V1ExternalmetricsExchangeListingGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1ExternalmetricsExchangeListingGetAsyncTest()
        {
            string exchangeId = default!;
            var response = await _instance.V1ExternalmetricsExchangeListingGetAsync(exchangeId);
            var model = response.Ok();
            Assert.IsType<List<V1MetricInfo>>(model);
        }

        /// <summary>
        /// Test V1ExternalmetricsExchangesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1ExternalmetricsExchangesGetAsyncTest()
        {
            var response = await _instance.V1ExternalmetricsExchangesGetAsync();
            var model = response.Ok();
            Assert.IsType<List<V1ExternalExchange>>(model);
        }

        /// <summary>
        /// Test V1ExternalmetricsListingGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1ExternalmetricsListingGetAsyncTest()
        {
            var response = await _instance.V1ExternalmetricsListingGetAsync();
            var model = response.Ok();
            Assert.IsType<List<V1MetricInfo>>(model);
        }
    }
}
