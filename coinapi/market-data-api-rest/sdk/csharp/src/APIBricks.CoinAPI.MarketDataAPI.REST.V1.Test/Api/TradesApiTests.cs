/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Api;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace APIBricks.CoinAPI.MarketDataAPI.REST.V1.Test.Api
{
    /// <summary>
    ///  Class for testing TradesApi
    /// </summary>
    public sealed class TradesApiTests : ApiTestsBase
    {
        private readonly ITradesApi _instance;

        public TradesApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ITradesApi>();
        }

        /// <summary>
        /// Test V1TradesLatestGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1TradesLatestGetAsyncTest()
        {
            Client.Option<string> filterSymbolId = default!;
            Client.Option<bool> includeId = default!;
            Client.Option<int> limit = default!;
            var response = await _instance.V1TradesLatestGetAsync(filterSymbolId, includeId, limit);
            var model = response.Ok();
            Assert.IsType<List<V1Trade>>(model);
        }

        /// <summary>
        /// Test V1TradesSymbolIdHistoryGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1TradesSymbolIdHistoryGetAsyncTest()
        {
            string symbolId = default!;
            Client.Option<string> date = default!;
            Client.Option<string> timeStart = default!;
            Client.Option<string> timeEnd = default!;
            Client.Option<int> limit = default!;
            Client.Option<bool> includeId = default!;
            var response = await _instance.V1TradesSymbolIdHistoryGetAsync(symbolId, date, timeStart, timeEnd, limit, includeId);
            var model = response.Ok();
            Assert.IsType<List<V1Trade>>(model);
        }

        /// <summary>
        /// Test V1TradesSymbolIdLatestGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1TradesSymbolIdLatestGetAsyncTest()
        {
            string symbolId = default!;
            Client.Option<int> limit = default!;
            Client.Option<bool> includeId = default!;
            var response = await _instance.V1TradesSymbolIdLatestGetAsync(symbolId, limit, includeId);
            var model = response.Ok();
            Assert.IsType<List<V1Trade>>(model);
        }
    }
}
