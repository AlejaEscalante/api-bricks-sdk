// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model;
using System.Diagnostics.CodeAnalysis;

namespace APIBricks.CoinAPI.MarketDataAPI.REST.V1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IQuotesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        QuotesApiEvents Events { get; }

        /// <summary>
        /// Current data
        /// </summary>
        /// <remarks>
        /// Get current quotes for all symbols or for a specific symbol.                :::info  When requesting current data for a specific symbol, output is not encapsulated into JSON array as only one item is returned.  :::
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSymbolId">Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesCurrentGetApiResponse"/>&gt;</returns>
        Task<IV1QuotesCurrentGetApiResponse> V1QuotesCurrentGetAsync(Option<string> filterSymbolId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Current data
        /// </summary>
        /// <remarks>
        /// Get current quotes for all symbols or for a specific symbol.                :::info  When requesting current data for a specific symbol, output is not encapsulated into JSON array as only one item is returned.  :::
        /// </remarks>
        /// <param name="filterSymbolId">Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesCurrentGetApiResponse"/>?&gt;</returns>
        Task<IV1QuotesCurrentGetApiResponse?> V1QuotesCurrentGetOrDefaultAsync(Option<string> filterSymbolId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Latest data
        /// </summary>
        /// <remarks>
        /// Get latest updates of the quotes up to 1 minute ago. Latest data is always returned in time descending order.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSymbolId">Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesLatestGetApiResponse"/>&gt;</returns>
        Task<IV1QuotesLatestGetApiResponse> V1QuotesLatestGetAsync(Option<string> filterSymbolId = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Latest data
        /// </summary>
        /// <remarks>
        /// Get latest updates of the quotes up to 1 minute ago. Latest data is always returned in time descending order.
        /// </remarks>
        /// <param name="filterSymbolId">Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesLatestGetApiResponse"/>?&gt;</returns>
        Task<IV1QuotesLatestGetApiResponse?> V1QuotesLatestGetOrDefaultAsync(Option<string> filterSymbolId = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Current quotes for a specific symbol
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The symbol identifier (from the Metadata -&gt; Symbols)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesSymbolIdCurrentGetApiResponse"/>&gt;</returns>
        Task<IV1QuotesSymbolIdCurrentGetApiResponse> V1QuotesSymbolIdCurrentGetAsync(string symbolId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Current quotes for a specific symbol
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="symbolId">The symbol identifier (from the Metadata -&gt; Symbols)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesSymbolIdCurrentGetApiResponse"/>?&gt;</returns>
        Task<IV1QuotesSymbolIdCurrentGetApiResponse?> V1QuotesSymbolIdCurrentGetOrDefaultAsync(string symbolId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Historical data
        /// </summary>
        /// <remarks>
        /// Get historical quote updates within requested time range, returned in time ascending order.    :::warning  The &#39;time_start&#39; and &#39;time_end&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day.  Please use the &#39;date&#39; parameter instead for querying data for a specific day without filter.  :::
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols)</param>
        /// <param name="date">Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)</param>
        /// <param name="timeStart">Starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Timeseries ending time in ISO 8601 (optional)</param>
        /// <param name="limit">Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesSymbolIdHistoryGetApiResponse"/>&gt;</returns>
        Task<IV1QuotesSymbolIdHistoryGetApiResponse> V1QuotesSymbolIdHistoryGetAsync(string symbolId, Option<string> date = default, Option<string> timeStart = default, Option<string> timeEnd = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Historical data
        /// </summary>
        /// <remarks>
        /// Get historical quote updates within requested time range, returned in time ascending order.    :::warning  The &#39;time_start&#39; and &#39;time_end&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day.  Please use the &#39;date&#39; parameter instead for querying data for a specific day without filter.  :::
        /// </remarks>
        /// <param name="symbolId">Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols)</param>
        /// <param name="date">Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)</param>
        /// <param name="timeStart">Starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Timeseries ending time in ISO 8601 (optional)</param>
        /// <param name="limit">Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesSymbolIdHistoryGetApiResponse"/>?&gt;</returns>
        Task<IV1QuotesSymbolIdHistoryGetApiResponse?> V1QuotesSymbolIdHistoryGetOrDefaultAsync(string symbolId, Option<string> date = default, Option<string> timeStart = default, Option<string> timeEnd = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Latest quote updates for a specific symbol
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesSymbolIdLatestGetApiResponse"/>&gt;</returns>
        Task<IV1QuotesSymbolIdLatestGetApiResponse> V1QuotesSymbolIdLatestGetAsync(string symbolId, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Latest quote updates for a specific symbol
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="symbolId">Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesSymbolIdLatestGetApiResponse"/>?&gt;</returns>
        Task<IV1QuotesSymbolIdLatestGetApiResponse?> V1QuotesSymbolIdLatestGetOrDefaultAsync(string symbolId, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IV1QuotesCurrentGetApiResponse"/>
    /// </summary>
    public interface IV1QuotesCurrentGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.IApiResponse, IOk<List<V1QuoteTrade>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1QuotesLatestGetApiResponse"/>
    /// </summary>
    public interface IV1QuotesLatestGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.IApiResponse, IOk<List<V1Quote>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1QuotesSymbolIdCurrentGetApiResponse"/>
    /// </summary>
    public interface IV1QuotesSymbolIdCurrentGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.IApiResponse, IOk<APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model.V1QuoteTrade?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1QuotesSymbolIdHistoryGetApiResponse"/>
    /// </summary>
    public interface IV1QuotesSymbolIdHistoryGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.IApiResponse, IOk<List<V1Quote>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1QuotesSymbolIdLatestGetApiResponse"/>
    /// </summary>
    public interface IV1QuotesSymbolIdLatestGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.IApiResponse, IOk<List<V1Quote>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class QuotesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1QuotesCurrentGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1QuotesCurrentGet;

        internal void ExecuteOnV1QuotesCurrentGet(QuotesApi.V1QuotesCurrentGetApiResponse apiResponse)
        {
            OnV1QuotesCurrentGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1QuotesCurrentGet(Exception exception)
        {
            OnErrorV1QuotesCurrentGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1QuotesLatestGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1QuotesLatestGet;

        internal void ExecuteOnV1QuotesLatestGet(QuotesApi.V1QuotesLatestGetApiResponse apiResponse)
        {
            OnV1QuotesLatestGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1QuotesLatestGet(Exception exception)
        {
            OnErrorV1QuotesLatestGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1QuotesSymbolIdCurrentGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1QuotesSymbolIdCurrentGet;

        internal void ExecuteOnV1QuotesSymbolIdCurrentGet(QuotesApi.V1QuotesSymbolIdCurrentGetApiResponse apiResponse)
        {
            OnV1QuotesSymbolIdCurrentGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1QuotesSymbolIdCurrentGet(Exception exception)
        {
            OnErrorV1QuotesSymbolIdCurrentGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1QuotesSymbolIdHistoryGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1QuotesSymbolIdHistoryGet;

        internal void ExecuteOnV1QuotesSymbolIdHistoryGet(QuotesApi.V1QuotesSymbolIdHistoryGetApiResponse apiResponse)
        {
            OnV1QuotesSymbolIdHistoryGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1QuotesSymbolIdHistoryGet(Exception exception)
        {
            OnErrorV1QuotesSymbolIdHistoryGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1QuotesSymbolIdLatestGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1QuotesSymbolIdLatestGet;

        internal void ExecuteOnV1QuotesSymbolIdLatestGet(QuotesApi.V1QuotesSymbolIdLatestGetApiResponse apiResponse)
        {
            OnV1QuotesSymbolIdLatestGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1QuotesSymbolIdLatestGet(Exception exception)
        {
            OnErrorV1QuotesSymbolIdLatestGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class QuotesApi : IQuotesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<QuotesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public QuotesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuotesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QuotesApi(ILogger<QuotesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, QuotesApiEvents quotesApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<QuotesApi>();
            HttpClient = httpClient;
            Events = quotesApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatV1QuotesCurrentGet(ref Option<string> filterSymbolId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="filterSymbolId"></param>
        /// <returns></returns>
        private void ValidateV1QuotesCurrentGet(Option<string> filterSymbolId)
        {
            if (filterSymbolId.IsSet && filterSymbolId.Value == null)
                throw new ArgumentNullException(nameof(filterSymbolId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filterSymbolId"></param>
        private void AfterV1QuotesCurrentGetDefaultImplementation(IV1QuotesCurrentGetApiResponse apiResponseLocalVar, Option<string> filterSymbolId)
        {
            bool suppressDefaultLog = false;
            AfterV1QuotesCurrentGet(ref suppressDefaultLog, apiResponseLocalVar, filterSymbolId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filterSymbolId"></param>
        partial void AfterV1QuotesCurrentGet(ref bool suppressDefaultLog, IV1QuotesCurrentGetApiResponse apiResponseLocalVar, Option<string> filterSymbolId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="filterSymbolId"></param>
        private void OnErrorV1QuotesCurrentGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> filterSymbolId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1QuotesCurrentGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, filterSymbolId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="filterSymbolId"></param>
        partial void OnErrorV1QuotesCurrentGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> filterSymbolId);

        /// <summary>
        /// Current data Get current quotes for all symbols or for a specific symbol.                :::info  When requesting current data for a specific symbol, output is not encapsulated into JSON array as only one item is returned.  :::
        /// </summary>
        /// <param name="filterSymbolId">Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesCurrentGetApiResponse"/>&gt;</returns>
        public async Task<IV1QuotesCurrentGetApiResponse?> V1QuotesCurrentGetOrDefaultAsync(Option<string> filterSymbolId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1QuotesCurrentGetAsync(filterSymbolId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Current data Get current quotes for all symbols or for a specific symbol.                :::info  When requesting current data for a specific symbol, output is not encapsulated into JSON array as only one item is returned.  :::
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSymbolId">Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesCurrentGetApiResponse"/>&gt;</returns>
        public async Task<IV1QuotesCurrentGetApiResponse> V1QuotesCurrentGetAsync(Option<string> filterSymbolId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1QuotesCurrentGet(filterSymbolId);

                FormatV1QuotesCurrentGet(ref filterSymbolId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/quotes/current"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/quotes/current");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (filterSymbolId.IsSet)
                        parseQueryStringLocalVar["filter_symbol_id"] = ClientUtils.ParameterToString(filterSymbolId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("X-CoinAPI-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1QuotesCurrentGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1QuotesCurrentGetApiResponse>();

                        V1QuotesCurrentGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/quotes/current", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1QuotesCurrentGetDefaultImplementation(apiResponseLocalVar, filterSymbolId);

                        Events.ExecuteOnV1QuotesCurrentGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1QuotesCurrentGetDefaultImplementation(e, "/v1/quotes/current", uriBuilderLocalVar.Path, filterSymbolId);
                Events.ExecuteOnErrorV1QuotesCurrentGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1QuotesCurrentGetApiResponse"/>
        /// </summary>
        public partial class V1QuotesCurrentGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ApiResponse, IV1QuotesCurrentGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1QuotesCurrentGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1QuotesCurrentGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1QuotesCurrentGetApiResponse(ILogger<V1QuotesCurrentGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<V1QuoteTrade>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<V1QuoteTrade>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<V1QuoteTrade>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1QuotesLatestGet(ref Option<string> filterSymbolId, ref Option<int> limit);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="filterSymbolId"></param>
        /// <returns></returns>
        private void ValidateV1QuotesLatestGet(Option<string> filterSymbolId)
        {
            if (filterSymbolId.IsSet && filterSymbolId.Value == null)
                throw new ArgumentNullException(nameof(filterSymbolId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filterSymbolId"></param>
        /// <param name="limit"></param>
        private void AfterV1QuotesLatestGetDefaultImplementation(IV1QuotesLatestGetApiResponse apiResponseLocalVar, Option<string> filterSymbolId, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterV1QuotesLatestGet(ref suppressDefaultLog, apiResponseLocalVar, filterSymbolId, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filterSymbolId"></param>
        /// <param name="limit"></param>
        partial void AfterV1QuotesLatestGet(ref bool suppressDefaultLog, IV1QuotesLatestGetApiResponse apiResponseLocalVar, Option<string> filterSymbolId, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="filterSymbolId"></param>
        /// <param name="limit"></param>
        private void OnErrorV1QuotesLatestGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> filterSymbolId, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1QuotesLatestGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, filterSymbolId, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="filterSymbolId"></param>
        /// <param name="limit"></param>
        partial void OnErrorV1QuotesLatestGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> filterSymbolId, Option<int> limit);

        /// <summary>
        /// Latest data Get latest updates of the quotes up to 1 minute ago. Latest data is always returned in time descending order.
        /// </summary>
        /// <param name="filterSymbolId">Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesLatestGetApiResponse"/>&gt;</returns>
        public async Task<IV1QuotesLatestGetApiResponse?> V1QuotesLatestGetOrDefaultAsync(Option<string> filterSymbolId = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1QuotesLatestGetAsync(filterSymbolId, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Latest data Get latest updates of the quotes up to 1 minute ago. Latest data is always returned in time descending order.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSymbolId">Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesLatestGetApiResponse"/>&gt;</returns>
        public async Task<IV1QuotesLatestGetApiResponse> V1QuotesLatestGetAsync(Option<string> filterSymbolId = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1QuotesLatestGet(filterSymbolId);

                FormatV1QuotesLatestGet(ref filterSymbolId, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/quotes/latest"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/quotes/latest");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (filterSymbolId.IsSet)
                        parseQueryStringLocalVar["filter_symbol_id"] = ClientUtils.ParameterToString(filterSymbolId.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("X-CoinAPI-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1QuotesLatestGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1QuotesLatestGetApiResponse>();

                        V1QuotesLatestGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/quotes/latest", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1QuotesLatestGetDefaultImplementation(apiResponseLocalVar, filterSymbolId, limit);

                        Events.ExecuteOnV1QuotesLatestGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1QuotesLatestGetDefaultImplementation(e, "/v1/quotes/latest", uriBuilderLocalVar.Path, filterSymbolId, limit);
                Events.ExecuteOnErrorV1QuotesLatestGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1QuotesLatestGetApiResponse"/>
        /// </summary>
        public partial class V1QuotesLatestGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ApiResponse, IV1QuotesLatestGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1QuotesLatestGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1QuotesLatestGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1QuotesLatestGetApiResponse(ILogger<V1QuotesLatestGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<V1Quote>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<V1Quote>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<V1Quote>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1QuotesSymbolIdCurrentGet(ref string symbolId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="symbolId"></param>
        /// <returns></returns>
        private void ValidateV1QuotesSymbolIdCurrentGet(string symbolId)
        {
            if (symbolId == null)
                throw new ArgumentNullException(nameof(symbolId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbolId"></param>
        private void AfterV1QuotesSymbolIdCurrentGetDefaultImplementation(IV1QuotesSymbolIdCurrentGetApiResponse apiResponseLocalVar, string symbolId)
        {
            bool suppressDefaultLog = false;
            AfterV1QuotesSymbolIdCurrentGet(ref suppressDefaultLog, apiResponseLocalVar, symbolId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbolId"></param>
        partial void AfterV1QuotesSymbolIdCurrentGet(ref bool suppressDefaultLog, IV1QuotesSymbolIdCurrentGetApiResponse apiResponseLocalVar, string symbolId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbolId"></param>
        private void OnErrorV1QuotesSymbolIdCurrentGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbolId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1QuotesSymbolIdCurrentGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, symbolId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbolId"></param>
        partial void OnErrorV1QuotesSymbolIdCurrentGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbolId);

        /// <summary>
        /// Current quotes for a specific symbol 
        /// </summary>
        /// <param name="symbolId">The symbol identifier (from the Metadata -&gt; Symbols)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesSymbolIdCurrentGetApiResponse"/>&gt;</returns>
        public async Task<IV1QuotesSymbolIdCurrentGetApiResponse?> V1QuotesSymbolIdCurrentGetOrDefaultAsync(string symbolId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1QuotesSymbolIdCurrentGetAsync(symbolId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Current quotes for a specific symbol 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The symbol identifier (from the Metadata -&gt; Symbols)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesSymbolIdCurrentGetApiResponse"/>&gt;</returns>
        public async Task<IV1QuotesSymbolIdCurrentGetApiResponse> V1QuotesSymbolIdCurrentGetAsync(string symbolId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1QuotesSymbolIdCurrentGet(symbolId);

                FormatV1QuotesSymbolIdCurrentGet(ref symbolId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/quotes/{symbol_id}/current"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/quotes/{symbol_id}/current");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsymbol_id%7D", Uri.EscapeDataString(symbolId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("X-CoinAPI-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1QuotesSymbolIdCurrentGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1QuotesSymbolIdCurrentGetApiResponse>();

                        V1QuotesSymbolIdCurrentGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/quotes/{symbol_id}/current", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1QuotesSymbolIdCurrentGetDefaultImplementation(apiResponseLocalVar, symbolId);

                        Events.ExecuteOnV1QuotesSymbolIdCurrentGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1QuotesSymbolIdCurrentGetDefaultImplementation(e, "/v1/quotes/{symbol_id}/current", uriBuilderLocalVar.Path, symbolId);
                Events.ExecuteOnErrorV1QuotesSymbolIdCurrentGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1QuotesSymbolIdCurrentGetApiResponse"/>
        /// </summary>
        public partial class V1QuotesSymbolIdCurrentGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ApiResponse, IV1QuotesSymbolIdCurrentGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1QuotesSymbolIdCurrentGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1QuotesSymbolIdCurrentGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1QuotesSymbolIdCurrentGetApiResponse(ILogger<V1QuotesSymbolIdCurrentGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model.V1QuoteTrade? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model.V1QuoteTrade>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model.V1QuoteTrade? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1QuotesSymbolIdHistoryGet(ref string symbolId, ref Option<string> date, ref Option<string> timeStart, ref Option<string> timeEnd, ref Option<int> limit);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="symbolId"></param>
        /// <param name="date"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <returns></returns>
        private void ValidateV1QuotesSymbolIdHistoryGet(string symbolId, Option<string> date, Option<string> timeStart, Option<string> timeEnd)
        {
            if (symbolId == null)
                throw new ArgumentNullException(nameof(symbolId));

            if (date.IsSet && date.Value == null)
                throw new ArgumentNullException(nameof(date));

            if (timeStart.IsSet && timeStart.Value == null)
                throw new ArgumentNullException(nameof(timeStart));

            if (timeEnd.IsSet && timeEnd.Value == null)
                throw new ArgumentNullException(nameof(timeEnd));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="date"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="limit"></param>
        private void AfterV1QuotesSymbolIdHistoryGetDefaultImplementation(IV1QuotesSymbolIdHistoryGetApiResponse apiResponseLocalVar, string symbolId, Option<string> date, Option<string> timeStart, Option<string> timeEnd, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterV1QuotesSymbolIdHistoryGet(ref suppressDefaultLog, apiResponseLocalVar, symbolId, date, timeStart, timeEnd, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="date"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="limit"></param>
        partial void AfterV1QuotesSymbolIdHistoryGet(ref bool suppressDefaultLog, IV1QuotesSymbolIdHistoryGetApiResponse apiResponseLocalVar, string symbolId, Option<string> date, Option<string> timeStart, Option<string> timeEnd, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="date"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="limit"></param>
        private void OnErrorV1QuotesSymbolIdHistoryGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbolId, Option<string> date, Option<string> timeStart, Option<string> timeEnd, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1QuotesSymbolIdHistoryGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, symbolId, date, timeStart, timeEnd, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="date"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="limit"></param>
        partial void OnErrorV1QuotesSymbolIdHistoryGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbolId, Option<string> date, Option<string> timeStart, Option<string> timeEnd, Option<int> limit);

        /// <summary>
        /// Historical data Get historical quote updates within requested time range, returned in time ascending order.    :::warning  The &#39;time_start&#39; and &#39;time_end&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day.  Please use the &#39;date&#39; parameter instead for querying data for a specific day without filter.  :::
        /// </summary>
        /// <param name="symbolId">Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols)</param>
        /// <param name="date">Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)</param>
        /// <param name="timeStart">Starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Timeseries ending time in ISO 8601 (optional)</param>
        /// <param name="limit">Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesSymbolIdHistoryGetApiResponse"/>&gt;</returns>
        public async Task<IV1QuotesSymbolIdHistoryGetApiResponse?> V1QuotesSymbolIdHistoryGetOrDefaultAsync(string symbolId, Option<string> date = default, Option<string> timeStart = default, Option<string> timeEnd = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1QuotesSymbolIdHistoryGetAsync(symbolId, date, timeStart, timeEnd, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Historical data Get historical quote updates within requested time range, returned in time ascending order.    :::warning  The &#39;time_start&#39; and &#39;time_end&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day.  Please use the &#39;date&#39; parameter instead for querying data for a specific day without filter.  :::
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols)</param>
        /// <param name="date">Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)</param>
        /// <param name="timeStart">Starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Timeseries ending time in ISO 8601 (optional)</param>
        /// <param name="limit">Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesSymbolIdHistoryGetApiResponse"/>&gt;</returns>
        public async Task<IV1QuotesSymbolIdHistoryGetApiResponse> V1QuotesSymbolIdHistoryGetAsync(string symbolId, Option<string> date = default, Option<string> timeStart = default, Option<string> timeEnd = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1QuotesSymbolIdHistoryGet(symbolId, date, timeStart, timeEnd);

                FormatV1QuotesSymbolIdHistoryGet(ref symbolId, ref date, ref timeStart, ref timeEnd, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/quotes/{symbol_id}/history"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/quotes/{symbol_id}/history");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsymbol_id%7D", Uri.EscapeDataString(symbolId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (date.IsSet)
                        parseQueryStringLocalVar["date"] = ClientUtils.ParameterToString(date.Value);

                    if (timeStart.IsSet)
                        parseQueryStringLocalVar["time_start"] = ClientUtils.ParameterToString(timeStart.Value);

                    if (timeEnd.IsSet)
                        parseQueryStringLocalVar["time_end"] = ClientUtils.ParameterToString(timeEnd.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("X-CoinAPI-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1QuotesSymbolIdHistoryGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1QuotesSymbolIdHistoryGetApiResponse>();

                        V1QuotesSymbolIdHistoryGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/quotes/{symbol_id}/history", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1QuotesSymbolIdHistoryGetDefaultImplementation(apiResponseLocalVar, symbolId, date, timeStart, timeEnd, limit);

                        Events.ExecuteOnV1QuotesSymbolIdHistoryGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1QuotesSymbolIdHistoryGetDefaultImplementation(e, "/v1/quotes/{symbol_id}/history", uriBuilderLocalVar.Path, symbolId, date, timeStart, timeEnd, limit);
                Events.ExecuteOnErrorV1QuotesSymbolIdHistoryGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1QuotesSymbolIdHistoryGetApiResponse"/>
        /// </summary>
        public partial class V1QuotesSymbolIdHistoryGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ApiResponse, IV1QuotesSymbolIdHistoryGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1QuotesSymbolIdHistoryGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1QuotesSymbolIdHistoryGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1QuotesSymbolIdHistoryGetApiResponse(ILogger<V1QuotesSymbolIdHistoryGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<V1Quote>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<V1Quote>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<V1Quote>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1QuotesSymbolIdLatestGet(ref string symbolId, ref Option<int> limit);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="symbolId"></param>
        /// <returns></returns>
        private void ValidateV1QuotesSymbolIdLatestGet(string symbolId)
        {
            if (symbolId == null)
                throw new ArgumentNullException(nameof(symbolId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="limit"></param>
        private void AfterV1QuotesSymbolIdLatestGetDefaultImplementation(IV1QuotesSymbolIdLatestGetApiResponse apiResponseLocalVar, string symbolId, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterV1QuotesSymbolIdLatestGet(ref suppressDefaultLog, apiResponseLocalVar, symbolId, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="limit"></param>
        partial void AfterV1QuotesSymbolIdLatestGet(ref bool suppressDefaultLog, IV1QuotesSymbolIdLatestGetApiResponse apiResponseLocalVar, string symbolId, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="limit"></param>
        private void OnErrorV1QuotesSymbolIdLatestGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbolId, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1QuotesSymbolIdLatestGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, symbolId, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="limit"></param>
        partial void OnErrorV1QuotesSymbolIdLatestGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbolId, Option<int> limit);

        /// <summary>
        /// Latest quote updates for a specific symbol 
        /// </summary>
        /// <param name="symbolId">Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesSymbolIdLatestGetApiResponse"/>&gt;</returns>
        public async Task<IV1QuotesSymbolIdLatestGetApiResponse?> V1QuotesSymbolIdLatestGetOrDefaultAsync(string symbolId, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1QuotesSymbolIdLatestGetAsync(symbolId, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Latest quote updates for a specific symbol 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1QuotesSymbolIdLatestGetApiResponse"/>&gt;</returns>
        public async Task<IV1QuotesSymbolIdLatestGetApiResponse> V1QuotesSymbolIdLatestGetAsync(string symbolId, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1QuotesSymbolIdLatestGet(symbolId);

                FormatV1QuotesSymbolIdLatestGet(ref symbolId, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/quotes/{symbol_id}/latest"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/quotes/{symbol_id}/latest");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsymbol_id%7D", Uri.EscapeDataString(symbolId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("X-CoinAPI-Key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1QuotesSymbolIdLatestGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1QuotesSymbolIdLatestGetApiResponse>();

                        V1QuotesSymbolIdLatestGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/quotes/{symbol_id}/latest", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1QuotesSymbolIdLatestGetDefaultImplementation(apiResponseLocalVar, symbolId, limit);

                        Events.ExecuteOnV1QuotesSymbolIdLatestGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1QuotesSymbolIdLatestGetDefaultImplementation(e, "/v1/quotes/{symbol_id}/latest", uriBuilderLocalVar.Path, symbolId, limit);
                Events.ExecuteOnErrorV1QuotesSymbolIdLatestGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1QuotesSymbolIdLatestGetApiResponse"/>
        /// </summary>
        public partial class V1QuotesSymbolIdLatestGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ApiResponse, IV1QuotesSymbolIdLatestGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1QuotesSymbolIdLatestGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1QuotesSymbolIdLatestGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1QuotesSymbolIdLatestGetApiResponse(ILogger<V1QuotesSymbolIdLatestGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<V1Quote>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<V1Quote>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<V1Quote>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
