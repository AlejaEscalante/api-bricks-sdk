// <auto-generated>
/*
 * CoinAPI Market Data REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model;
using System.Diagnostics.CodeAnalysis;

namespace APIBricks.CoinAPI.MarketDataAPI.REST.V1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IMetricsV2Api : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        MetricsV2ApiEvents Events { get; }

        /// <summary>
        /// Historical metrics for the asset
        /// </summary>
        /// <remarks>
        /// Get asset metrics history.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="metricId">Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;)</param>
        /// <param name="assetId">Asset identifier (e.g., &#x60;USDC&#x60;, &#x60;USDT&#x60;)</param>
        /// <param name="timeStart">Starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Ending time in ISO 8601 (optional)</param>
        /// <param name="timeFormat">If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsAssetHistoryGetApiResponse"/>&gt;</returns>
        Task<IV2MetricsAssetHistoryGetApiResponse> V2MetricsAssetHistoryGetAsync(string metricId, string assetId, Option<DateTime> timeStart = default, Option<DateTime> timeEnd = default, Option<string> timeFormat = default, Option<string> periodId = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Historical metrics for the asset
        /// </summary>
        /// <remarks>
        /// Get asset metrics history.
        /// </remarks>
        /// <param name="metricId">Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;)</param>
        /// <param name="assetId">Asset identifier (e.g., &#x60;USDC&#x60;, &#x60;USDT&#x60;)</param>
        /// <param name="timeStart">Starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Ending time in ISO 8601 (optional)</param>
        /// <param name="timeFormat">If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsAssetHistoryGetApiResponse"/>?&gt;</returns>
        Task<IV2MetricsAssetHistoryGetApiResponse?> V2MetricsAssetHistoryGetOrDefaultAsync(string metricId, string assetId, Option<DateTime> timeStart = default, Option<DateTime> timeEnd = default, Option<string> timeFormat = default, Option<string> periodId = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Listing of metrics available for specific asset
        /// </summary>
        /// <remarks>
        /// Get all metrics that are actually available for the specified asset.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset identifier (e.g., USDC, USDT)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsAssetListingGetApiResponse"/>&gt;</returns>
        Task<IV2MetricsAssetListingGetApiResponse> V2MetricsAssetListingGetAsync(string assetId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Listing of metrics available for specific asset
        /// </summary>
        /// <remarks>
        /// Get all metrics that are actually available for the specified asset.
        /// </remarks>
        /// <param name="assetId">Asset identifier (e.g., USDC, USDT)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsAssetListingGetApiResponse"/>?&gt;</returns>
        Task<IV2MetricsAssetListingGetApiResponse?> V2MetricsAssetListingGetOrDefaultAsync(string assetId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Historical metrics for the chain
        /// </summary>
        /// <remarks>
        /// Get chain metrics history.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="metricId">Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;)</param>
        /// <param name="chainId">Chain identifier (e.g., &#x60;Ethereum&#x60;, &#x60;Arbitrum&#x60;)</param>
        /// <param name="timeStart">Starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Ending time in ISO 8601 (optional)</param>
        /// <param name="timeFormat">If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsChainHistoryGetApiResponse"/>&gt;</returns>
        Task<IV2MetricsChainHistoryGetApiResponse> V2MetricsChainHistoryGetAsync(string metricId, string chainId, Option<DateTime> timeStart = default, Option<DateTime> timeEnd = default, Option<string> timeFormat = default, Option<string> periodId = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Historical metrics for the chain
        /// </summary>
        /// <remarks>
        /// Get chain metrics history.
        /// </remarks>
        /// <param name="metricId">Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;)</param>
        /// <param name="chainId">Chain identifier (e.g., &#x60;Ethereum&#x60;, &#x60;Arbitrum&#x60;)</param>
        /// <param name="timeStart">Starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Ending time in ISO 8601 (optional)</param>
        /// <param name="timeFormat">If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsChainHistoryGetApiResponse"/>?&gt;</returns>
        Task<IV2MetricsChainHistoryGetApiResponse?> V2MetricsChainHistoryGetOrDefaultAsync(string metricId, string chainId, Option<DateTime> timeStart = default, Option<DateTime> timeEnd = default, Option<string> timeFormat = default, Option<string> periodId = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Listing of metrics available for specific chain
        /// </summary>
        /// <remarks>
        /// Get all metrics that are actually available for the specified blockchain chain.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier (e.g., ETHEREUM, ARBITRUM)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsChainListingGetApiResponse"/>&gt;</returns>
        Task<IV2MetricsChainListingGetApiResponse> V2MetricsChainListingGetAsync(string chainId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Listing of metrics available for specific chain
        /// </summary>
        /// <remarks>
        /// Get all metrics that are actually available for the specified blockchain chain.
        /// </remarks>
        /// <param name="chainId">Chain identifier (e.g., ETHEREUM, ARBITRUM)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsChainListingGetApiResponse"/>?&gt;</returns>
        Task<IV2MetricsChainListingGetApiResponse?> V2MetricsChainListingGetOrDefaultAsync(string chainId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Historical metrics for the exchange
        /// </summary>
        /// <remarks>
        /// Get exchange metrics history.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="metricId">Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;)</param>
        /// <param name="exchangeId">Exchange identifier (e.g., &#x60;BINANCE&#x60;, &#x60;UNISWAP-V3-ETHEREUM&#x60;)</param>
        /// <param name="timeStart">Starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Ending time in ISO 8601 (optional)</param>
        /// <param name="timeFormat">If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsExchangeHistoryGetApiResponse"/>&gt;</returns>
        Task<IV2MetricsExchangeHistoryGetApiResponse> V2MetricsExchangeHistoryGetAsync(string metricId, string exchangeId, Option<DateTime> timeStart = default, Option<DateTime> timeEnd = default, Option<string> timeFormat = default, Option<string> periodId = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Historical metrics for the exchange
        /// </summary>
        /// <remarks>
        /// Get exchange metrics history.
        /// </remarks>
        /// <param name="metricId">Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;)</param>
        /// <param name="exchangeId">Exchange identifier (e.g., &#x60;BINANCE&#x60;, &#x60;UNISWAP-V3-ETHEREUM&#x60;)</param>
        /// <param name="timeStart">Starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Ending time in ISO 8601 (optional)</param>
        /// <param name="timeFormat">If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsExchangeHistoryGetApiResponse"/>?&gt;</returns>
        Task<IV2MetricsExchangeHistoryGetApiResponse?> V2MetricsExchangeHistoryGetOrDefaultAsync(string metricId, string exchangeId, Option<DateTime> timeStart = default, Option<DateTime> timeEnd = default, Option<string> timeFormat = default, Option<string> periodId = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Listing of metrics available for specific exchange
        /// </summary>
        /// <remarks>
        /// Get all metrics that are actually available for the specified exchange.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsExchangeListingGetApiResponse"/>&gt;</returns>
        Task<IV2MetricsExchangeListingGetApiResponse> V2MetricsExchangeListingGetAsync(string exchangeId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Listing of metrics available for specific exchange
        /// </summary>
        /// <remarks>
        /// Get all metrics that are actually available for the specified exchange.
        /// </remarks>
        /// <param name="exchangeId">Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsExchangeListingGetApiResponse"/>?&gt;</returns>
        Task<IV2MetricsExchangeListingGetApiResponse?> V2MetricsExchangeListingGetOrDefaultAsync(string exchangeId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Listing of all supported metrics
        /// </summary>
        /// <remarks>
        /// Get all metrics available in the system.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsListingGetApiResponse"/>&gt;</returns>
        Task<IV2MetricsListingGetApiResponse> V2MetricsListingGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Listing of all supported metrics
        /// </summary>
        /// <remarks>
        /// Get all metrics available in the system.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsListingGetApiResponse"/>?&gt;</returns>
        Task<IV2MetricsListingGetApiResponse?> V2MetricsListingGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IV2MetricsAssetHistoryGetApiResponse"/>
    /// </summary>
    public interface IV2MetricsAssetHistoryGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.IApiResponse, IOk<List<Object>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IV2MetricsAssetListingGetApiResponse"/>
    /// </summary>
    public interface IV2MetricsAssetListingGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.IApiResponse, IOk<List<V1MetricInfo>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2MetricsChainHistoryGetApiResponse"/>
    /// </summary>
    public interface IV2MetricsChainHistoryGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.IApiResponse, IOk<List<Object>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IV2MetricsChainListingGetApiResponse"/>
    /// </summary>
    public interface IV2MetricsChainListingGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.IApiResponse, IOk<List<V1MetricInfo>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2MetricsExchangeHistoryGetApiResponse"/>
    /// </summary>
    public interface IV2MetricsExchangeHistoryGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.IApiResponse, IOk<List<Object>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IV2MetricsExchangeListingGetApiResponse"/>
    /// </summary>
    public interface IV2MetricsExchangeListingGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.IApiResponse, IOk<List<V1MetricInfo>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2MetricsListingGetApiResponse"/>
    /// </summary>
    public interface IV2MetricsListingGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.IApiResponse, IOk<List<V1MetricInfo>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class MetricsV2ApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2MetricsAssetHistoryGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2MetricsAssetHistoryGet;

        internal void ExecuteOnV2MetricsAssetHistoryGet(MetricsV2Api.V2MetricsAssetHistoryGetApiResponse apiResponse)
        {
            OnV2MetricsAssetHistoryGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2MetricsAssetHistoryGet(Exception exception)
        {
            OnErrorV2MetricsAssetHistoryGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2MetricsAssetListingGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2MetricsAssetListingGet;

        internal void ExecuteOnV2MetricsAssetListingGet(MetricsV2Api.V2MetricsAssetListingGetApiResponse apiResponse)
        {
            OnV2MetricsAssetListingGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2MetricsAssetListingGet(Exception exception)
        {
            OnErrorV2MetricsAssetListingGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2MetricsChainHistoryGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2MetricsChainHistoryGet;

        internal void ExecuteOnV2MetricsChainHistoryGet(MetricsV2Api.V2MetricsChainHistoryGetApiResponse apiResponse)
        {
            OnV2MetricsChainHistoryGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2MetricsChainHistoryGet(Exception exception)
        {
            OnErrorV2MetricsChainHistoryGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2MetricsChainListingGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2MetricsChainListingGet;

        internal void ExecuteOnV2MetricsChainListingGet(MetricsV2Api.V2MetricsChainListingGetApiResponse apiResponse)
        {
            OnV2MetricsChainListingGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2MetricsChainListingGet(Exception exception)
        {
            OnErrorV2MetricsChainListingGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2MetricsExchangeHistoryGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2MetricsExchangeHistoryGet;

        internal void ExecuteOnV2MetricsExchangeHistoryGet(MetricsV2Api.V2MetricsExchangeHistoryGetApiResponse apiResponse)
        {
            OnV2MetricsExchangeHistoryGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2MetricsExchangeHistoryGet(Exception exception)
        {
            OnErrorV2MetricsExchangeHistoryGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2MetricsExchangeListingGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2MetricsExchangeListingGet;

        internal void ExecuteOnV2MetricsExchangeListingGet(MetricsV2Api.V2MetricsExchangeListingGetApiResponse apiResponse)
        {
            OnV2MetricsExchangeListingGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2MetricsExchangeListingGet(Exception exception)
        {
            OnErrorV2MetricsExchangeListingGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2MetricsListingGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2MetricsListingGet;

        internal void ExecuteOnV2MetricsListingGet(MetricsV2Api.V2MetricsListingGetApiResponse apiResponse)
        {
            OnV2MetricsListingGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2MetricsListingGet(Exception exception)
        {
            OnErrorV2MetricsListingGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class MetricsV2Api : IMetricsV2Api
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<MetricsV2Api> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public MetricsV2ApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetricsV2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public MetricsV2Api(ILogger<MetricsV2Api> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, MetricsV2ApiEvents metricsV2ApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<MetricsV2Api>();
            HttpClient = httpClient;
            Events = metricsV2ApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatV2MetricsAssetHistoryGet(ref string metricId, ref string assetId, ref Option<DateTime> timeStart, ref Option<DateTime> timeEnd, ref Option<string> timeFormat, ref Option<string> periodId, ref Option<int> limit);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="metricId"></param>
        /// <param name="assetId"></param>
        /// <param name="timeFormat"></param>
        /// <param name="periodId"></param>
        /// <returns></returns>
        private void ValidateV2MetricsAssetHistoryGet(string metricId, string assetId, Option<string> timeFormat, Option<string> periodId)
        {
            if (metricId == null)
                throw new ArgumentNullException(nameof(metricId));

            if (assetId == null)
                throw new ArgumentNullException(nameof(assetId));

            if (timeFormat.IsSet && timeFormat.Value == null)
                throw new ArgumentNullException(nameof(timeFormat));

            if (periodId.IsSet && periodId.Value == null)
                throw new ArgumentNullException(nameof(periodId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="metricId"></param>
        /// <param name="assetId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="timeFormat"></param>
        /// <param name="periodId"></param>
        /// <param name="limit"></param>
        private void AfterV2MetricsAssetHistoryGetDefaultImplementation(IV2MetricsAssetHistoryGetApiResponse apiResponseLocalVar, string metricId, string assetId, Option<DateTime> timeStart, Option<DateTime> timeEnd, Option<string> timeFormat, Option<string> periodId, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterV2MetricsAssetHistoryGet(ref suppressDefaultLog, apiResponseLocalVar, metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="metricId"></param>
        /// <param name="assetId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="timeFormat"></param>
        /// <param name="periodId"></param>
        /// <param name="limit"></param>
        partial void AfterV2MetricsAssetHistoryGet(ref bool suppressDefaultLog, IV2MetricsAssetHistoryGetApiResponse apiResponseLocalVar, string metricId, string assetId, Option<DateTime> timeStart, Option<DateTime> timeEnd, Option<string> timeFormat, Option<string> periodId, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="metricId"></param>
        /// <param name="assetId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="timeFormat"></param>
        /// <param name="periodId"></param>
        /// <param name="limit"></param>
        private void OnErrorV2MetricsAssetHistoryGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string metricId, string assetId, Option<DateTime> timeStart, Option<DateTime> timeEnd, Option<string> timeFormat, Option<string> periodId, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2MetricsAssetHistoryGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="metricId"></param>
        /// <param name="assetId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="timeFormat"></param>
        /// <param name="periodId"></param>
        /// <param name="limit"></param>
        partial void OnErrorV2MetricsAssetHistoryGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string metricId, string assetId, Option<DateTime> timeStart, Option<DateTime> timeEnd, Option<string> timeFormat, Option<string> periodId, Option<int> limit);

        /// <summary>
        /// Historical metrics for the asset Get asset metrics history.
        /// </summary>
        /// <param name="metricId">Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;)</param>
        /// <param name="assetId">Asset identifier (e.g., &#x60;USDC&#x60;, &#x60;USDT&#x60;)</param>
        /// <param name="timeStart">Starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Ending time in ISO 8601 (optional)</param>
        /// <param name="timeFormat">If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsAssetHistoryGetApiResponse"/>&gt;</returns>
        public async Task<IV2MetricsAssetHistoryGetApiResponse?> V2MetricsAssetHistoryGetOrDefaultAsync(string metricId, string assetId, Option<DateTime> timeStart = default, Option<DateTime> timeEnd = default, Option<string> timeFormat = default, Option<string> periodId = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2MetricsAssetHistoryGetAsync(metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Historical metrics for the asset Get asset metrics history.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="metricId">Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;)</param>
        /// <param name="assetId">Asset identifier (e.g., &#x60;USDC&#x60;, &#x60;USDT&#x60;)</param>
        /// <param name="timeStart">Starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Ending time in ISO 8601 (optional)</param>
        /// <param name="timeFormat">If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsAssetHistoryGetApiResponse"/>&gt;</returns>
        public async Task<IV2MetricsAssetHistoryGetApiResponse> V2MetricsAssetHistoryGetAsync(string metricId, string assetId, Option<DateTime> timeStart = default, Option<DateTime> timeEnd = default, Option<string> timeFormat = default, Option<string> periodId = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2MetricsAssetHistoryGet(metricId, assetId, timeFormat, periodId);

                FormatV2MetricsAssetHistoryGet(ref metricId, ref assetId, ref timeStart, ref timeEnd, ref timeFormat, ref periodId, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/metrics/asset/history"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/metrics/asset/history");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["metric_id"] = ClientUtils.ParameterToString(metricId);
                    parseQueryStringLocalVar["asset_id"] = ClientUtils.ParameterToString(assetId);

                    if (timeStart.IsSet)
                        parseQueryStringLocalVar["time_start"] = ClientUtils.ParameterToString(timeStart.Value);

                    if (timeEnd.IsSet)
                        parseQueryStringLocalVar["time_end"] = ClientUtils.ParameterToString(timeEnd.Value);

                    if (timeFormat.IsSet)
                        parseQueryStringLocalVar["time_format"] = ClientUtils.ParameterToString(timeFormat.Value);

                    if (periodId.IsSet)
                        parseQueryStringLocalVar["period_id"] = ClientUtils.ParameterToString(periodId.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<V2MetricsAssetHistoryGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2MetricsAssetHistoryGetApiResponse>();
                        V2MetricsAssetHistoryGetApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/metrics/asset/history", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterV2MetricsAssetHistoryGetDefaultImplementation(apiResponseLocalVar, metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit);

                        Events.ExecuteOnV2MetricsAssetHistoryGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2MetricsAssetHistoryGetDefaultImplementation(e, "/v2/metrics/asset/history", uriBuilderLocalVar.Path, metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit);
                Events.ExecuteOnErrorV2MetricsAssetHistoryGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2MetricsAssetHistoryGetApiResponse"/>
        /// </summary>
        public partial class V2MetricsAssetHistoryGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ApiResponse, IV2MetricsAssetHistoryGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2MetricsAssetHistoryGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2MetricsAssetHistoryGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2MetricsAssetHistoryGetApiResponse(ILogger<V2MetricsAssetHistoryGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="V2MetricsAssetHistoryGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2MetricsAssetHistoryGetApiResponse(ILogger<V2MetricsAssetHistoryGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Object>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Object>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Object>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2MetricsAssetListingGet(ref string assetId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetId"></param>
        /// <returns></returns>
        private void ValidateV2MetricsAssetListingGet(string assetId)
        {
            if (assetId == null)
                throw new ArgumentNullException(nameof(assetId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetId"></param>
        private void AfterV2MetricsAssetListingGetDefaultImplementation(IV2MetricsAssetListingGetApiResponse apiResponseLocalVar, string assetId)
        {
            bool suppressDefaultLog = false;
            AfterV2MetricsAssetListingGet(ref suppressDefaultLog, apiResponseLocalVar, assetId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetId"></param>
        partial void AfterV2MetricsAssetListingGet(ref bool suppressDefaultLog, IV2MetricsAssetListingGetApiResponse apiResponseLocalVar, string assetId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetId"></param>
        private void OnErrorV2MetricsAssetListingGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string assetId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2MetricsAssetListingGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, assetId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetId"></param>
        partial void OnErrorV2MetricsAssetListingGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string assetId);

        /// <summary>
        /// Listing of metrics available for specific asset Get all metrics that are actually available for the specified asset.
        /// </summary>
        /// <param name="assetId">Asset identifier (e.g., USDC, USDT)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsAssetListingGetApiResponse"/>&gt;</returns>
        public async Task<IV2MetricsAssetListingGetApiResponse?> V2MetricsAssetListingGetOrDefaultAsync(string assetId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2MetricsAssetListingGetAsync(assetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Listing of metrics available for specific asset Get all metrics that are actually available for the specified asset.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset identifier (e.g., USDC, USDT)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsAssetListingGetApiResponse"/>&gt;</returns>
        public async Task<IV2MetricsAssetListingGetApiResponse> V2MetricsAssetListingGetAsync(string assetId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2MetricsAssetListingGet(assetId);

                FormatV2MetricsAssetListingGet(ref assetId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/metrics/asset/listing"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/metrics/asset/listing");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["asset_id"] = ClientUtils.ParameterToString(assetId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<V2MetricsAssetListingGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2MetricsAssetListingGetApiResponse>();
                        V2MetricsAssetListingGetApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/metrics/asset/listing", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterV2MetricsAssetListingGetDefaultImplementation(apiResponseLocalVar, assetId);

                        Events.ExecuteOnV2MetricsAssetListingGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2MetricsAssetListingGetDefaultImplementation(e, "/v2/metrics/asset/listing", uriBuilderLocalVar.Path, assetId);
                Events.ExecuteOnErrorV2MetricsAssetListingGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2MetricsAssetListingGetApiResponse"/>
        /// </summary>
        public partial class V2MetricsAssetListingGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ApiResponse, IV2MetricsAssetListingGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2MetricsAssetListingGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2MetricsAssetListingGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2MetricsAssetListingGetApiResponse(ILogger<V2MetricsAssetListingGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="V2MetricsAssetListingGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2MetricsAssetListingGetApiResponse(ILogger<V2MetricsAssetListingGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<V1MetricInfo>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<V1MetricInfo>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<V1MetricInfo>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2MetricsChainHistoryGet(ref string metricId, ref string chainId, ref Option<DateTime> timeStart, ref Option<DateTime> timeEnd, ref Option<string> timeFormat, ref Option<string> periodId, ref Option<int> limit);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="metricId"></param>
        /// <param name="chainId"></param>
        /// <param name="timeFormat"></param>
        /// <param name="periodId"></param>
        /// <returns></returns>
        private void ValidateV2MetricsChainHistoryGet(string metricId, string chainId, Option<string> timeFormat, Option<string> periodId)
        {
            if (metricId == null)
                throw new ArgumentNullException(nameof(metricId));

            if (chainId == null)
                throw new ArgumentNullException(nameof(chainId));

            if (timeFormat.IsSet && timeFormat.Value == null)
                throw new ArgumentNullException(nameof(timeFormat));

            if (periodId.IsSet && periodId.Value == null)
                throw new ArgumentNullException(nameof(periodId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="metricId"></param>
        /// <param name="chainId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="timeFormat"></param>
        /// <param name="periodId"></param>
        /// <param name="limit"></param>
        private void AfterV2MetricsChainHistoryGetDefaultImplementation(IV2MetricsChainHistoryGetApiResponse apiResponseLocalVar, string metricId, string chainId, Option<DateTime> timeStart, Option<DateTime> timeEnd, Option<string> timeFormat, Option<string> periodId, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterV2MetricsChainHistoryGet(ref suppressDefaultLog, apiResponseLocalVar, metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="metricId"></param>
        /// <param name="chainId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="timeFormat"></param>
        /// <param name="periodId"></param>
        /// <param name="limit"></param>
        partial void AfterV2MetricsChainHistoryGet(ref bool suppressDefaultLog, IV2MetricsChainHistoryGetApiResponse apiResponseLocalVar, string metricId, string chainId, Option<DateTime> timeStart, Option<DateTime> timeEnd, Option<string> timeFormat, Option<string> periodId, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="metricId"></param>
        /// <param name="chainId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="timeFormat"></param>
        /// <param name="periodId"></param>
        /// <param name="limit"></param>
        private void OnErrorV2MetricsChainHistoryGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string metricId, string chainId, Option<DateTime> timeStart, Option<DateTime> timeEnd, Option<string> timeFormat, Option<string> periodId, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2MetricsChainHistoryGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="metricId"></param>
        /// <param name="chainId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="timeFormat"></param>
        /// <param name="periodId"></param>
        /// <param name="limit"></param>
        partial void OnErrorV2MetricsChainHistoryGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string metricId, string chainId, Option<DateTime> timeStart, Option<DateTime> timeEnd, Option<string> timeFormat, Option<string> periodId, Option<int> limit);

        /// <summary>
        /// Historical metrics for the chain Get chain metrics history.
        /// </summary>
        /// <param name="metricId">Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;)</param>
        /// <param name="chainId">Chain identifier (e.g., &#x60;Ethereum&#x60;, &#x60;Arbitrum&#x60;)</param>
        /// <param name="timeStart">Starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Ending time in ISO 8601 (optional)</param>
        /// <param name="timeFormat">If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsChainHistoryGetApiResponse"/>&gt;</returns>
        public async Task<IV2MetricsChainHistoryGetApiResponse?> V2MetricsChainHistoryGetOrDefaultAsync(string metricId, string chainId, Option<DateTime> timeStart = default, Option<DateTime> timeEnd = default, Option<string> timeFormat = default, Option<string> periodId = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2MetricsChainHistoryGetAsync(metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Historical metrics for the chain Get chain metrics history.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="metricId">Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;)</param>
        /// <param name="chainId">Chain identifier (e.g., &#x60;Ethereum&#x60;, &#x60;Arbitrum&#x60;)</param>
        /// <param name="timeStart">Starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Ending time in ISO 8601 (optional)</param>
        /// <param name="timeFormat">If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsChainHistoryGetApiResponse"/>&gt;</returns>
        public async Task<IV2MetricsChainHistoryGetApiResponse> V2MetricsChainHistoryGetAsync(string metricId, string chainId, Option<DateTime> timeStart = default, Option<DateTime> timeEnd = default, Option<string> timeFormat = default, Option<string> periodId = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2MetricsChainHistoryGet(metricId, chainId, timeFormat, periodId);

                FormatV2MetricsChainHistoryGet(ref metricId, ref chainId, ref timeStart, ref timeEnd, ref timeFormat, ref periodId, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/metrics/chain/history"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/metrics/chain/history");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["metric_id"] = ClientUtils.ParameterToString(metricId);
                    parseQueryStringLocalVar["chain_id"] = ClientUtils.ParameterToString(chainId);

                    if (timeStart.IsSet)
                        parseQueryStringLocalVar["time_start"] = ClientUtils.ParameterToString(timeStart.Value);

                    if (timeEnd.IsSet)
                        parseQueryStringLocalVar["time_end"] = ClientUtils.ParameterToString(timeEnd.Value);

                    if (timeFormat.IsSet)
                        parseQueryStringLocalVar["time_format"] = ClientUtils.ParameterToString(timeFormat.Value);

                    if (periodId.IsSet)
                        parseQueryStringLocalVar["period_id"] = ClientUtils.ParameterToString(periodId.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<V2MetricsChainHistoryGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2MetricsChainHistoryGetApiResponse>();
                        V2MetricsChainHistoryGetApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/metrics/chain/history", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterV2MetricsChainHistoryGetDefaultImplementation(apiResponseLocalVar, metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit);

                        Events.ExecuteOnV2MetricsChainHistoryGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2MetricsChainHistoryGetDefaultImplementation(e, "/v2/metrics/chain/history", uriBuilderLocalVar.Path, metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit);
                Events.ExecuteOnErrorV2MetricsChainHistoryGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2MetricsChainHistoryGetApiResponse"/>
        /// </summary>
        public partial class V2MetricsChainHistoryGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ApiResponse, IV2MetricsChainHistoryGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2MetricsChainHistoryGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2MetricsChainHistoryGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2MetricsChainHistoryGetApiResponse(ILogger<V2MetricsChainHistoryGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="V2MetricsChainHistoryGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2MetricsChainHistoryGetApiResponse(ILogger<V2MetricsChainHistoryGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Object>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Object>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Object>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2MetricsChainListingGet(ref string chainId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="chainId"></param>
        /// <returns></returns>
        private void ValidateV2MetricsChainListingGet(string chainId)
        {
            if (chainId == null)
                throw new ArgumentNullException(nameof(chainId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chainId"></param>
        private void AfterV2MetricsChainListingGetDefaultImplementation(IV2MetricsChainListingGetApiResponse apiResponseLocalVar, string chainId)
        {
            bool suppressDefaultLog = false;
            AfterV2MetricsChainListingGet(ref suppressDefaultLog, apiResponseLocalVar, chainId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chainId"></param>
        partial void AfterV2MetricsChainListingGet(ref bool suppressDefaultLog, IV2MetricsChainListingGetApiResponse apiResponseLocalVar, string chainId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="chainId"></param>
        private void OnErrorV2MetricsChainListingGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string chainId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2MetricsChainListingGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, chainId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="chainId"></param>
        partial void OnErrorV2MetricsChainListingGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string chainId);

        /// <summary>
        /// Listing of metrics available for specific chain Get all metrics that are actually available for the specified blockchain chain.
        /// </summary>
        /// <param name="chainId">Chain identifier (e.g., ETHEREUM, ARBITRUM)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsChainListingGetApiResponse"/>&gt;</returns>
        public async Task<IV2MetricsChainListingGetApiResponse?> V2MetricsChainListingGetOrDefaultAsync(string chainId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2MetricsChainListingGetAsync(chainId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Listing of metrics available for specific chain Get all metrics that are actually available for the specified blockchain chain.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier (e.g., ETHEREUM, ARBITRUM)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsChainListingGetApiResponse"/>&gt;</returns>
        public async Task<IV2MetricsChainListingGetApiResponse> V2MetricsChainListingGetAsync(string chainId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2MetricsChainListingGet(chainId);

                FormatV2MetricsChainListingGet(ref chainId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/metrics/chain/listing"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/metrics/chain/listing");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["chain_id"] = ClientUtils.ParameterToString(chainId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<V2MetricsChainListingGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2MetricsChainListingGetApiResponse>();
                        V2MetricsChainListingGetApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/metrics/chain/listing", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterV2MetricsChainListingGetDefaultImplementation(apiResponseLocalVar, chainId);

                        Events.ExecuteOnV2MetricsChainListingGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2MetricsChainListingGetDefaultImplementation(e, "/v2/metrics/chain/listing", uriBuilderLocalVar.Path, chainId);
                Events.ExecuteOnErrorV2MetricsChainListingGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2MetricsChainListingGetApiResponse"/>
        /// </summary>
        public partial class V2MetricsChainListingGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ApiResponse, IV2MetricsChainListingGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2MetricsChainListingGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2MetricsChainListingGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2MetricsChainListingGetApiResponse(ILogger<V2MetricsChainListingGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="V2MetricsChainListingGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2MetricsChainListingGetApiResponse(ILogger<V2MetricsChainListingGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<V1MetricInfo>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<V1MetricInfo>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<V1MetricInfo>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2MetricsExchangeHistoryGet(ref string metricId, ref string exchangeId, ref Option<DateTime> timeStart, ref Option<DateTime> timeEnd, ref Option<string> timeFormat, ref Option<string> periodId, ref Option<int> limit);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="metricId"></param>
        /// <param name="exchangeId"></param>
        /// <param name="timeFormat"></param>
        /// <param name="periodId"></param>
        /// <returns></returns>
        private void ValidateV2MetricsExchangeHistoryGet(string metricId, string exchangeId, Option<string> timeFormat, Option<string> periodId)
        {
            if (metricId == null)
                throw new ArgumentNullException(nameof(metricId));

            if (exchangeId == null)
                throw new ArgumentNullException(nameof(exchangeId));

            if (timeFormat.IsSet && timeFormat.Value == null)
                throw new ArgumentNullException(nameof(timeFormat));

            if (periodId.IsSet && periodId.Value == null)
                throw new ArgumentNullException(nameof(periodId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="metricId"></param>
        /// <param name="exchangeId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="timeFormat"></param>
        /// <param name="periodId"></param>
        /// <param name="limit"></param>
        private void AfterV2MetricsExchangeHistoryGetDefaultImplementation(IV2MetricsExchangeHistoryGetApiResponse apiResponseLocalVar, string metricId, string exchangeId, Option<DateTime> timeStart, Option<DateTime> timeEnd, Option<string> timeFormat, Option<string> periodId, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterV2MetricsExchangeHistoryGet(ref suppressDefaultLog, apiResponseLocalVar, metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="metricId"></param>
        /// <param name="exchangeId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="timeFormat"></param>
        /// <param name="periodId"></param>
        /// <param name="limit"></param>
        partial void AfterV2MetricsExchangeHistoryGet(ref bool suppressDefaultLog, IV2MetricsExchangeHistoryGetApiResponse apiResponseLocalVar, string metricId, string exchangeId, Option<DateTime> timeStart, Option<DateTime> timeEnd, Option<string> timeFormat, Option<string> periodId, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="metricId"></param>
        /// <param name="exchangeId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="timeFormat"></param>
        /// <param name="periodId"></param>
        /// <param name="limit"></param>
        private void OnErrorV2MetricsExchangeHistoryGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string metricId, string exchangeId, Option<DateTime> timeStart, Option<DateTime> timeEnd, Option<string> timeFormat, Option<string> periodId, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2MetricsExchangeHistoryGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="metricId"></param>
        /// <param name="exchangeId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="timeFormat"></param>
        /// <param name="periodId"></param>
        /// <param name="limit"></param>
        partial void OnErrorV2MetricsExchangeHistoryGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string metricId, string exchangeId, Option<DateTime> timeStart, Option<DateTime> timeEnd, Option<string> timeFormat, Option<string> periodId, Option<int> limit);

        /// <summary>
        /// Historical metrics for the exchange Get exchange metrics history.
        /// </summary>
        /// <param name="metricId">Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;)</param>
        /// <param name="exchangeId">Exchange identifier (e.g., &#x60;BINANCE&#x60;, &#x60;UNISWAP-V3-ETHEREUM&#x60;)</param>
        /// <param name="timeStart">Starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Ending time in ISO 8601 (optional)</param>
        /// <param name="timeFormat">If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsExchangeHistoryGetApiResponse"/>&gt;</returns>
        public async Task<IV2MetricsExchangeHistoryGetApiResponse?> V2MetricsExchangeHistoryGetOrDefaultAsync(string metricId, string exchangeId, Option<DateTime> timeStart = default, Option<DateTime> timeEnd = default, Option<string> timeFormat = default, Option<string> periodId = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2MetricsExchangeHistoryGetAsync(metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Historical metrics for the exchange Get exchange metrics history.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="metricId">Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;)</param>
        /// <param name="exchangeId">Exchange identifier (e.g., &#x60;BINANCE&#x60;, &#x60;UNISWAP-V3-ETHEREUM&#x60;)</param>
        /// <param name="timeStart">Starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Ending time in ISO 8601 (optional)</param>
        /// <param name="timeFormat">If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsExchangeHistoryGetApiResponse"/>&gt;</returns>
        public async Task<IV2MetricsExchangeHistoryGetApiResponse> V2MetricsExchangeHistoryGetAsync(string metricId, string exchangeId, Option<DateTime> timeStart = default, Option<DateTime> timeEnd = default, Option<string> timeFormat = default, Option<string> periodId = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2MetricsExchangeHistoryGet(metricId, exchangeId, timeFormat, periodId);

                FormatV2MetricsExchangeHistoryGet(ref metricId, ref exchangeId, ref timeStart, ref timeEnd, ref timeFormat, ref periodId, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/metrics/exchange/history"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/metrics/exchange/history");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["metric_id"] = ClientUtils.ParameterToString(metricId);
                    parseQueryStringLocalVar["exchange_id"] = ClientUtils.ParameterToString(exchangeId);

                    if (timeStart.IsSet)
                        parseQueryStringLocalVar["time_start"] = ClientUtils.ParameterToString(timeStart.Value);

                    if (timeEnd.IsSet)
                        parseQueryStringLocalVar["time_end"] = ClientUtils.ParameterToString(timeEnd.Value);

                    if (timeFormat.IsSet)
                        parseQueryStringLocalVar["time_format"] = ClientUtils.ParameterToString(timeFormat.Value);

                    if (periodId.IsSet)
                        parseQueryStringLocalVar["period_id"] = ClientUtils.ParameterToString(periodId.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<V2MetricsExchangeHistoryGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2MetricsExchangeHistoryGetApiResponse>();
                        V2MetricsExchangeHistoryGetApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/metrics/exchange/history", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterV2MetricsExchangeHistoryGetDefaultImplementation(apiResponseLocalVar, metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit);

                        Events.ExecuteOnV2MetricsExchangeHistoryGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2MetricsExchangeHistoryGetDefaultImplementation(e, "/v2/metrics/exchange/history", uriBuilderLocalVar.Path, metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit);
                Events.ExecuteOnErrorV2MetricsExchangeHistoryGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2MetricsExchangeHistoryGetApiResponse"/>
        /// </summary>
        public partial class V2MetricsExchangeHistoryGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ApiResponse, IV2MetricsExchangeHistoryGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2MetricsExchangeHistoryGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2MetricsExchangeHistoryGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2MetricsExchangeHistoryGetApiResponse(ILogger<V2MetricsExchangeHistoryGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="V2MetricsExchangeHistoryGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2MetricsExchangeHistoryGetApiResponse(ILogger<V2MetricsExchangeHistoryGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Object>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Object>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Object>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2MetricsExchangeListingGet(ref string exchangeId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="exchangeId"></param>
        /// <returns></returns>
        private void ValidateV2MetricsExchangeListingGet(string exchangeId)
        {
            if (exchangeId == null)
                throw new ArgumentNullException(nameof(exchangeId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="exchangeId"></param>
        private void AfterV2MetricsExchangeListingGetDefaultImplementation(IV2MetricsExchangeListingGetApiResponse apiResponseLocalVar, string exchangeId)
        {
            bool suppressDefaultLog = false;
            AfterV2MetricsExchangeListingGet(ref suppressDefaultLog, apiResponseLocalVar, exchangeId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="exchangeId"></param>
        partial void AfterV2MetricsExchangeListingGet(ref bool suppressDefaultLog, IV2MetricsExchangeListingGetApiResponse apiResponseLocalVar, string exchangeId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="exchangeId"></param>
        private void OnErrorV2MetricsExchangeListingGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string exchangeId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2MetricsExchangeListingGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, exchangeId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="exchangeId"></param>
        partial void OnErrorV2MetricsExchangeListingGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string exchangeId);

        /// <summary>
        /// Listing of metrics available for specific exchange Get all metrics that are actually available for the specified exchange.
        /// </summary>
        /// <param name="exchangeId">Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsExchangeListingGetApiResponse"/>&gt;</returns>
        public async Task<IV2MetricsExchangeListingGetApiResponse?> V2MetricsExchangeListingGetOrDefaultAsync(string exchangeId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2MetricsExchangeListingGetAsync(exchangeId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Listing of metrics available for specific exchange Get all metrics that are actually available for the specified exchange.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsExchangeListingGetApiResponse"/>&gt;</returns>
        public async Task<IV2MetricsExchangeListingGetApiResponse> V2MetricsExchangeListingGetAsync(string exchangeId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2MetricsExchangeListingGet(exchangeId);

                FormatV2MetricsExchangeListingGet(ref exchangeId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/metrics/exchange/listing"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/metrics/exchange/listing");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["exchange_id"] = ClientUtils.ParameterToString(exchangeId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<V2MetricsExchangeListingGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2MetricsExchangeListingGetApiResponse>();
                        V2MetricsExchangeListingGetApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/metrics/exchange/listing", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterV2MetricsExchangeListingGetDefaultImplementation(apiResponseLocalVar, exchangeId);

                        Events.ExecuteOnV2MetricsExchangeListingGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2MetricsExchangeListingGetDefaultImplementation(e, "/v2/metrics/exchange/listing", uriBuilderLocalVar.Path, exchangeId);
                Events.ExecuteOnErrorV2MetricsExchangeListingGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2MetricsExchangeListingGetApiResponse"/>
        /// </summary>
        public partial class V2MetricsExchangeListingGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ApiResponse, IV2MetricsExchangeListingGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2MetricsExchangeListingGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2MetricsExchangeListingGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2MetricsExchangeListingGetApiResponse(ILogger<V2MetricsExchangeListingGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="V2MetricsExchangeListingGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2MetricsExchangeListingGetApiResponse(ILogger<V2MetricsExchangeListingGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<V1MetricInfo>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<V1MetricInfo>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<V1MetricInfo>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterV2MetricsListingGetDefaultImplementation(IV2MetricsListingGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterV2MetricsListingGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterV2MetricsListingGet(ref bool suppressDefaultLog, IV2MetricsListingGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorV2MetricsListingGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2MetricsListingGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorV2MetricsListingGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Listing of all supported metrics Get all metrics available in the system.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsListingGetApiResponse"/>&gt;</returns>
        public async Task<IV2MetricsListingGetApiResponse?> V2MetricsListingGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2MetricsListingGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Listing of all supported metrics Get all metrics available in the system.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2MetricsListingGetApiResponse"/>&gt;</returns>
        public async Task<IV2MetricsListingGetApiResponse> V2MetricsListingGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/metrics/listing"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/metrics/listing");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<V2MetricsListingGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2MetricsListingGetApiResponse>();
                        V2MetricsListingGetApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/metrics/listing", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterV2MetricsListingGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnV2MetricsListingGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2MetricsListingGetDefaultImplementation(e, "/v2/metrics/listing", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorV2MetricsListingGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2MetricsListingGetApiResponse"/>
        /// </summary>
        public partial class V2MetricsListingGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ApiResponse, IV2MetricsListingGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2MetricsListingGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2MetricsListingGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2MetricsListingGetApiResponse(ILogger<V2MetricsListingGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="V2MetricsListingGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2MetricsListingGetApiResponse(ILogger<V2MetricsListingGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<V1MetricInfo>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<V1MetricInfo>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<V1MetricInfo>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
