// <auto-generated>
/*
 * CoinAPI Market Data REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model;
using System.Diagnostics.CodeAnalysis;

namespace APIBricks.CoinAPI.MarketDataAPI.REST.V1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IOrderBookL3Api : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        OrderBookL3ApiEvents Events { get; }

        /// <summary>
        /// Current order books
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSymbolId">Comma or semicolon delimited parts of symbol identifier used to filter the response. (optional)</param>
        /// <param name="limitLevels">The maximum number of levels to include in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1Orderbooks3CurrentGetApiResponse"/>&gt;</returns>
        Task<IV1Orderbooks3CurrentGetApiResponse> V1Orderbooks3CurrentGetAsync(Option<string> filterSymbolId = default, Option<int> limitLevels = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Current order books
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="filterSymbolId">Comma or semicolon delimited parts of symbol identifier used to filter the response. (optional)</param>
        /// <param name="limitLevels">The maximum number of levels to include in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1Orderbooks3CurrentGetApiResponse"/>?&gt;</returns>
        Task<IV1Orderbooks3CurrentGetApiResponse?> V1Orderbooks3CurrentGetOrDefaultAsync(Option<string> filterSymbolId = default, Option<int> limitLevels = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Current order book by symbol_id
        /// </summary>
        /// <remarks>
        /// Retrieves the current order book for the specified symbol.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The symbol ID (from the Metadata -&gt; Symbols)</param>
        /// <param name="limitLevels">The maximum number of levels to include in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1Orderbooks3SymbolIdCurrentGetApiResponse"/>&gt;</returns>
        Task<IV1Orderbooks3SymbolIdCurrentGetApiResponse> V1Orderbooks3SymbolIdCurrentGetAsync(string symbolId, Option<int> limitLevels = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Current order book by symbol_id
        /// </summary>
        /// <remarks>
        /// Retrieves the current order book for the specified symbol.
        /// </remarks>
        /// <param name="symbolId">The symbol ID (from the Metadata -&gt; Symbols)</param>
        /// <param name="limitLevels">The maximum number of levels to include in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1Orderbooks3SymbolIdCurrentGetApiResponse"/>?&gt;</returns>
        Task<IV1Orderbooks3SymbolIdCurrentGetApiResponse?> V1Orderbooks3SymbolIdCurrentGetOrDefaultAsync(string symbolId, Option<int> limitLevels = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IV1Orderbooks3CurrentGetApiResponse"/>
    /// </summary>
    public interface IV1Orderbooks3CurrentGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.IApiResponse, IOk<List<V1OrderBookBase>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1Orderbooks3SymbolIdCurrentGetApiResponse"/>
    /// </summary>
    public interface IV1Orderbooks3SymbolIdCurrentGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.IApiResponse, IOk<APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model.V1OrderBookBase?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OrderBookL3ApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1Orderbooks3CurrentGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1Orderbooks3CurrentGet;

        internal void ExecuteOnV1Orderbooks3CurrentGet(OrderBookL3Api.V1Orderbooks3CurrentGetApiResponse apiResponse)
        {
            OnV1Orderbooks3CurrentGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1Orderbooks3CurrentGet(Exception exception)
        {
            OnErrorV1Orderbooks3CurrentGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1Orderbooks3SymbolIdCurrentGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1Orderbooks3SymbolIdCurrentGet;

        internal void ExecuteOnV1Orderbooks3SymbolIdCurrentGet(OrderBookL3Api.V1Orderbooks3SymbolIdCurrentGetApiResponse apiResponse)
        {
            OnV1Orderbooks3SymbolIdCurrentGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1Orderbooks3SymbolIdCurrentGet(Exception exception)
        {
            OnErrorV1Orderbooks3SymbolIdCurrentGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class OrderBookL3Api : IOrderBookL3Api
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<OrderBookL3Api> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public OrderBookL3ApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderBookL3Api"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderBookL3Api(ILogger<OrderBookL3Api> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, OrderBookL3ApiEvents orderBookL3ApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<OrderBookL3Api>();
            HttpClient = httpClient;
            Events = orderBookL3ApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatV1Orderbooks3CurrentGet(ref Option<string> filterSymbolId, ref Option<int> limitLevels);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="filterSymbolId"></param>
        /// <returns></returns>
        private void ValidateV1Orderbooks3CurrentGet(Option<string> filterSymbolId)
        {
            if (filterSymbolId.IsSet && filterSymbolId.Value == null)
                throw new ArgumentNullException(nameof(filterSymbolId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filterSymbolId"></param>
        /// <param name="limitLevels"></param>
        private void AfterV1Orderbooks3CurrentGetDefaultImplementation(IV1Orderbooks3CurrentGetApiResponse apiResponseLocalVar, Option<string> filterSymbolId, Option<int> limitLevels)
        {
            bool suppressDefaultLog = false;
            AfterV1Orderbooks3CurrentGet(ref suppressDefaultLog, apiResponseLocalVar, filterSymbolId, limitLevels);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filterSymbolId"></param>
        /// <param name="limitLevels"></param>
        partial void AfterV1Orderbooks3CurrentGet(ref bool suppressDefaultLog, IV1Orderbooks3CurrentGetApiResponse apiResponseLocalVar, Option<string> filterSymbolId, Option<int> limitLevels);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="filterSymbolId"></param>
        /// <param name="limitLevels"></param>
        private void OnErrorV1Orderbooks3CurrentGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> filterSymbolId, Option<int> limitLevels)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1Orderbooks3CurrentGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, filterSymbolId, limitLevels);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="filterSymbolId"></param>
        /// <param name="limitLevels"></param>
        partial void OnErrorV1Orderbooks3CurrentGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> filterSymbolId, Option<int> limitLevels);

        /// <summary>
        /// Current order books 
        /// </summary>
        /// <param name="filterSymbolId">Comma or semicolon delimited parts of symbol identifier used to filter the response. (optional)</param>
        /// <param name="limitLevels">The maximum number of levels to include in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1Orderbooks3CurrentGetApiResponse"/>&gt;</returns>
        public async Task<IV1Orderbooks3CurrentGetApiResponse?> V1Orderbooks3CurrentGetOrDefaultAsync(Option<string> filterSymbolId = default, Option<int> limitLevels = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1Orderbooks3CurrentGetAsync(filterSymbolId, limitLevels, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Current order books 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSymbolId">Comma or semicolon delimited parts of symbol identifier used to filter the response. (optional)</param>
        /// <param name="limitLevels">The maximum number of levels to include in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1Orderbooks3CurrentGetApiResponse"/>&gt;</returns>
        public async Task<IV1Orderbooks3CurrentGetApiResponse> V1Orderbooks3CurrentGetAsync(Option<string> filterSymbolId = default, Option<int> limitLevels = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1Orderbooks3CurrentGet(filterSymbolId);

                FormatV1Orderbooks3CurrentGet(ref filterSymbolId, ref limitLevels);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/orderbooks3/current"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/orderbooks3/current");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (filterSymbolId.IsSet)
                        parseQueryStringLocalVar["filter_symbol_id"] = ClientUtils.ParameterToString(filterSymbolId.Value);

                    if (limitLevels.IsSet)
                        parseQueryStringLocalVar["limit_levels"] = ClientUtils.ParameterToString(limitLevels.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<V1Orderbooks3CurrentGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1Orderbooks3CurrentGetApiResponse>();
                        V1Orderbooks3CurrentGetApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/orderbooks3/current", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterV1Orderbooks3CurrentGetDefaultImplementation(apiResponseLocalVar, filterSymbolId, limitLevels);

                        Events.ExecuteOnV1Orderbooks3CurrentGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1Orderbooks3CurrentGetDefaultImplementation(e, "/v1/orderbooks3/current", uriBuilderLocalVar.Path, filterSymbolId, limitLevels);
                Events.ExecuteOnErrorV1Orderbooks3CurrentGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1Orderbooks3CurrentGetApiResponse"/>
        /// </summary>
        public partial class V1Orderbooks3CurrentGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ApiResponse, IV1Orderbooks3CurrentGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1Orderbooks3CurrentGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1Orderbooks3CurrentGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1Orderbooks3CurrentGetApiResponse(ILogger<V1Orderbooks3CurrentGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="V1Orderbooks3CurrentGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1Orderbooks3CurrentGetApiResponse(ILogger<V1Orderbooks3CurrentGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<V1OrderBookBase>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<V1OrderBookBase>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<V1OrderBookBase>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1Orderbooks3SymbolIdCurrentGet(ref string symbolId, ref Option<int> limitLevels);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="symbolId"></param>
        /// <returns></returns>
        private void ValidateV1Orderbooks3SymbolIdCurrentGet(string symbolId)
        {
            if (symbolId == null)
                throw new ArgumentNullException(nameof(symbolId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="limitLevels"></param>
        private void AfterV1Orderbooks3SymbolIdCurrentGetDefaultImplementation(IV1Orderbooks3SymbolIdCurrentGetApiResponse apiResponseLocalVar, string symbolId, Option<int> limitLevels)
        {
            bool suppressDefaultLog = false;
            AfterV1Orderbooks3SymbolIdCurrentGet(ref suppressDefaultLog, apiResponseLocalVar, symbolId, limitLevels);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="limitLevels"></param>
        partial void AfterV1Orderbooks3SymbolIdCurrentGet(ref bool suppressDefaultLog, IV1Orderbooks3SymbolIdCurrentGetApiResponse apiResponseLocalVar, string symbolId, Option<int> limitLevels);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="limitLevels"></param>
        private void OnErrorV1Orderbooks3SymbolIdCurrentGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbolId, Option<int> limitLevels)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1Orderbooks3SymbolIdCurrentGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, symbolId, limitLevels);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="limitLevels"></param>
        partial void OnErrorV1Orderbooks3SymbolIdCurrentGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbolId, Option<int> limitLevels);

        /// <summary>
        /// Current order book by symbol_id Retrieves the current order book for the specified symbol.
        /// </summary>
        /// <param name="symbolId">The symbol ID (from the Metadata -&gt; Symbols)</param>
        /// <param name="limitLevels">The maximum number of levels to include in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1Orderbooks3SymbolIdCurrentGetApiResponse"/>&gt;</returns>
        public async Task<IV1Orderbooks3SymbolIdCurrentGetApiResponse?> V1Orderbooks3SymbolIdCurrentGetOrDefaultAsync(string symbolId, Option<int> limitLevels = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1Orderbooks3SymbolIdCurrentGetAsync(symbolId, limitLevels, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Current order book by symbol_id Retrieves the current order book for the specified symbol.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">The symbol ID (from the Metadata -&gt; Symbols)</param>
        /// <param name="limitLevels">The maximum number of levels to include in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1Orderbooks3SymbolIdCurrentGetApiResponse"/>&gt;</returns>
        public async Task<IV1Orderbooks3SymbolIdCurrentGetApiResponse> V1Orderbooks3SymbolIdCurrentGetAsync(string symbolId, Option<int> limitLevels = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1Orderbooks3SymbolIdCurrentGet(symbolId);

                FormatV1Orderbooks3SymbolIdCurrentGet(ref symbolId, ref limitLevels);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/orderbooks3/{symbol_id}/current"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/orderbooks3/{symbol_id}/current");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsymbol_id%7D", Uri.EscapeDataString(symbolId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limitLevels.IsSet)
                        parseQueryStringLocalVar["limit_levels"] = ClientUtils.ParameterToString(limitLevels.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<V1Orderbooks3SymbolIdCurrentGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1Orderbooks3SymbolIdCurrentGetApiResponse>();
                        V1Orderbooks3SymbolIdCurrentGetApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/orderbooks3/{symbol_id}/current", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterV1Orderbooks3SymbolIdCurrentGetDefaultImplementation(apiResponseLocalVar, symbolId, limitLevels);

                        Events.ExecuteOnV1Orderbooks3SymbolIdCurrentGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1Orderbooks3SymbolIdCurrentGetDefaultImplementation(e, "/v1/orderbooks3/{symbol_id}/current", uriBuilderLocalVar.Path, symbolId, limitLevels);
                Events.ExecuteOnErrorV1Orderbooks3SymbolIdCurrentGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1Orderbooks3SymbolIdCurrentGetApiResponse"/>
        /// </summary>
        public partial class V1Orderbooks3SymbolIdCurrentGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ApiResponse, IV1Orderbooks3SymbolIdCurrentGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1Orderbooks3SymbolIdCurrentGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1Orderbooks3SymbolIdCurrentGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1Orderbooks3SymbolIdCurrentGetApiResponse(ILogger<V1Orderbooks3SymbolIdCurrentGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="V1Orderbooks3SymbolIdCurrentGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1Orderbooks3SymbolIdCurrentGetApiResponse(ILogger<V1Orderbooks3SymbolIdCurrentGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model.V1OrderBookBase? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model.V1OrderBookBase>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model.V1OrderBookBase? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
