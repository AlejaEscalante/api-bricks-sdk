// <auto-generated>
/*
 * CoinAPI Market Data REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model;
using System.Diagnostics.CodeAnalysis;

namespace APIBricks.CoinAPI.MarketDataAPI.REST.V1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IOhlcvApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        OhlcvApiEvents Events { get; }

        /// <summary>
        /// Historical data by exchange
        /// </summary>
        /// <remarks>
        /// Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific exchange eg &#x60;BITSTAMP&#x60;              :::info The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. The difference between &#x60;time_end&#x60; and &#x60;time_start&#x60; cannot be higher than 1 day. The &#x60;period_id&#x60; cannot be higher than &#x60;1DAY&#x60;. :::
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange identifier of requested timeseries (from the Metadata -&gt; Exchanges)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;)</param>
        /// <param name="timeStart">Timeseries starting time in ISO 8601</param>
        /// <param name="timeEnd">Timeseries ending time in ISO 8601</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1OhlcvExchangesExchangeIdHistoryGetApiResponse"/>&gt;</returns>
        Task<IV1OhlcvExchangesExchangeIdHistoryGetApiResponse> V1OhlcvExchangesExchangeIdHistoryGetAsync(string exchangeId, string periodId, string timeStart, string timeEnd, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Historical data by exchange
        /// </summary>
        /// <remarks>
        /// Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific exchange eg &#x60;BITSTAMP&#x60;              :::info The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. The difference between &#x60;time_end&#x60; and &#x60;time_start&#x60; cannot be higher than 1 day. The &#x60;period_id&#x60; cannot be higher than &#x60;1DAY&#x60;. :::
        /// </remarks>
        /// <param name="exchangeId">Exchange identifier of requested timeseries (from the Metadata -&gt; Exchanges)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;)</param>
        /// <param name="timeStart">Timeseries starting time in ISO 8601</param>
        /// <param name="timeEnd">Timeseries ending time in ISO 8601</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1OhlcvExchangesExchangeIdHistoryGetApiResponse"/>?&gt;</returns>
        Task<IV1OhlcvExchangesExchangeIdHistoryGetApiResponse?> V1OhlcvExchangesExchangeIdHistoryGetOrDefaultAsync(string exchangeId, string periodId, string timeStart, string timeEnd, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all periods
        /// </summary>
        /// <remarks>
        /// Get full list of supported time periods available for requesting OHLCV timeseries data.              ### Available periods              Time unit | Period identifiers - -- -- -- -- | - -- -- -- -- -- Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY Month | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH Year | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS              :::tip You can assume that we will not remove any periods from this response, however, we may add new ones. :::
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1OhlcvPeriodsGetApiResponse"/>&gt;</returns>
        Task<IV1OhlcvPeriodsGetApiResponse> V1OhlcvPeriodsGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List all periods
        /// </summary>
        /// <remarks>
        /// Get full list of supported time periods available for requesting OHLCV timeseries data.              ### Available periods              Time unit | Period identifiers - -- -- -- -- | - -- -- -- -- -- Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY Month | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH Year | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS              :::tip You can assume that we will not remove any periods from this response, however, we may add new ones. :::
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1OhlcvPeriodsGetApiResponse"/>?&gt;</returns>
        Task<IV1OhlcvPeriodsGetApiResponse?> V1OhlcvPeriodsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Historical data
        /// </summary>
        /// <remarks>
        /// Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data              :::info The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. :::
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)</param>
        /// <param name="timeStart">Timeseries starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Timeseries ending time in ISO 8601 (optional)</param>
        /// <param name="limit">Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1OhlcvSymbolIdHistoryGetApiResponse"/>&gt;</returns>
        Task<IV1OhlcvSymbolIdHistoryGetApiResponse> V1OhlcvSymbolIdHistoryGetAsync(string symbolId, string periodId, Option<string> timeStart = default, Option<string> timeEnd = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Historical data
        /// </summary>
        /// <remarks>
        /// Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data              :::info The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. :::
        /// </remarks>
        /// <param name="symbolId">Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)</param>
        /// <param name="timeStart">Timeseries starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Timeseries ending time in ISO 8601 (optional)</param>
        /// <param name="limit">Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1OhlcvSymbolIdHistoryGetApiResponse"/>?&gt;</returns>
        Task<IV1OhlcvSymbolIdHistoryGetApiResponse?> V1OhlcvSymbolIdHistoryGetOrDefaultAsync(string symbolId, string periodId, Option<string> timeStart = default, Option<string> timeEnd = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Latest data
        /// </summary>
        /// <remarks>
        /// Get OHLCV latest timeseries data returned in time descending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data              :::info OHLCV Latest endpoint is just the shortcut to the OHLCV Historical endpoint with substituted &#x60;time_start&#x60; and &#x60;time_end&#x60; parameters.  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. :::
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)</param>
        /// <param name="limit">Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="includeEmptyItems"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1OhlcvSymbolIdLatestGetApiResponse"/>&gt;</returns>
        Task<IV1OhlcvSymbolIdLatestGetApiResponse> V1OhlcvSymbolIdLatestGetAsync(string symbolId, string periodId, Option<int> limit = default, Option<bool> includeEmptyItems = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Latest data
        /// </summary>
        /// <remarks>
        /// Get OHLCV latest timeseries data returned in time descending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data              :::info OHLCV Latest endpoint is just the shortcut to the OHLCV Historical endpoint with substituted &#x60;time_start&#x60; and &#x60;time_end&#x60; parameters.  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. :::
        /// </remarks>
        /// <param name="symbolId">Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)</param>
        /// <param name="limit">Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="includeEmptyItems"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1OhlcvSymbolIdLatestGetApiResponse"/>?&gt;</returns>
        Task<IV1OhlcvSymbolIdLatestGetApiResponse?> V1OhlcvSymbolIdLatestGetOrDefaultAsync(string symbolId, string periodId, Option<int> limit = default, Option<bool> includeEmptyItems = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IV1OhlcvExchangesExchangeIdHistoryGetApiResponse"/>
    /// </summary>
    public interface IV1OhlcvExchangesExchangeIdHistoryGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.IApiResponse, IOk<List<ModelsExchangeTimeseriesItem>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1OhlcvPeriodsGetApiResponse"/>
    /// </summary>
    public interface IV1OhlcvPeriodsGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.IApiResponse, IOk<List<V1TimeseriesPeriod>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1OhlcvSymbolIdHistoryGetApiResponse"/>
    /// </summary>
    public interface IV1OhlcvSymbolIdHistoryGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.IApiResponse, IOk<List<V1TimeseriesItem>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1OhlcvSymbolIdLatestGetApiResponse"/>
    /// </summary>
    public interface IV1OhlcvSymbolIdLatestGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.IApiResponse, IOk<List<V1TimeseriesItem>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OhlcvApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1OhlcvExchangesExchangeIdHistoryGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1OhlcvExchangesExchangeIdHistoryGet;

        internal void ExecuteOnV1OhlcvExchangesExchangeIdHistoryGet(OhlcvApi.V1OhlcvExchangesExchangeIdHistoryGetApiResponse apiResponse)
        {
            OnV1OhlcvExchangesExchangeIdHistoryGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1OhlcvExchangesExchangeIdHistoryGet(Exception exception)
        {
            OnErrorV1OhlcvExchangesExchangeIdHistoryGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1OhlcvPeriodsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1OhlcvPeriodsGet;

        internal void ExecuteOnV1OhlcvPeriodsGet(OhlcvApi.V1OhlcvPeriodsGetApiResponse apiResponse)
        {
            OnV1OhlcvPeriodsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1OhlcvPeriodsGet(Exception exception)
        {
            OnErrorV1OhlcvPeriodsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1OhlcvSymbolIdHistoryGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1OhlcvSymbolIdHistoryGet;

        internal void ExecuteOnV1OhlcvSymbolIdHistoryGet(OhlcvApi.V1OhlcvSymbolIdHistoryGetApiResponse apiResponse)
        {
            OnV1OhlcvSymbolIdHistoryGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1OhlcvSymbolIdHistoryGet(Exception exception)
        {
            OnErrorV1OhlcvSymbolIdHistoryGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1OhlcvSymbolIdLatestGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1OhlcvSymbolIdLatestGet;

        internal void ExecuteOnV1OhlcvSymbolIdLatestGet(OhlcvApi.V1OhlcvSymbolIdLatestGetApiResponse apiResponse)
        {
            OnV1OhlcvSymbolIdLatestGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1OhlcvSymbolIdLatestGet(Exception exception)
        {
            OnErrorV1OhlcvSymbolIdLatestGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class OhlcvApi : IOhlcvApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<OhlcvApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public OhlcvApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OhlcvApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OhlcvApi(ILogger<OhlcvApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, OhlcvApiEvents ohlcvApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<OhlcvApi>();
            HttpClient = httpClient;
            Events = ohlcvApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatV1OhlcvExchangesExchangeIdHistoryGet(ref string exchangeId, ref string periodId, ref string timeStart, ref string timeEnd);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="exchangeId"></param>
        /// <param name="periodId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <returns></returns>
        private void ValidateV1OhlcvExchangesExchangeIdHistoryGet(string exchangeId, string periodId, string timeStart, string timeEnd)
        {
            if (exchangeId == null)
                throw new ArgumentNullException(nameof(exchangeId));

            if (periodId == null)
                throw new ArgumentNullException(nameof(periodId));

            if (timeStart == null)
                throw new ArgumentNullException(nameof(timeStart));

            if (timeEnd == null)
                throw new ArgumentNullException(nameof(timeEnd));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="exchangeId"></param>
        /// <param name="periodId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        private void AfterV1OhlcvExchangesExchangeIdHistoryGetDefaultImplementation(IV1OhlcvExchangesExchangeIdHistoryGetApiResponse apiResponseLocalVar, string exchangeId, string periodId, string timeStart, string timeEnd)
        {
            bool suppressDefaultLog = false;
            AfterV1OhlcvExchangesExchangeIdHistoryGet(ref suppressDefaultLog, apiResponseLocalVar, exchangeId, periodId, timeStart, timeEnd);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="exchangeId"></param>
        /// <param name="periodId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        partial void AfterV1OhlcvExchangesExchangeIdHistoryGet(ref bool suppressDefaultLog, IV1OhlcvExchangesExchangeIdHistoryGetApiResponse apiResponseLocalVar, string exchangeId, string periodId, string timeStart, string timeEnd);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="exchangeId"></param>
        /// <param name="periodId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        private void OnErrorV1OhlcvExchangesExchangeIdHistoryGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string exchangeId, string periodId, string timeStart, string timeEnd)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1OhlcvExchangesExchangeIdHistoryGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, exchangeId, periodId, timeStart, timeEnd);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="exchangeId"></param>
        /// <param name="periodId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        partial void OnErrorV1OhlcvExchangesExchangeIdHistoryGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string exchangeId, string periodId, string timeStart, string timeEnd);

        /// <summary>
        /// Historical data by exchange Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific exchange eg &#x60;BITSTAMP&#x60;              :::info The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. The difference between &#x60;time_end&#x60; and &#x60;time_start&#x60; cannot be higher than 1 day. The &#x60;period_id&#x60; cannot be higher than &#x60;1DAY&#x60;. :::
        /// </summary>
        /// <param name="exchangeId">Exchange identifier of requested timeseries (from the Metadata -&gt; Exchanges)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;)</param>
        /// <param name="timeStart">Timeseries starting time in ISO 8601</param>
        /// <param name="timeEnd">Timeseries ending time in ISO 8601</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1OhlcvExchangesExchangeIdHistoryGetApiResponse"/>&gt;</returns>
        public async Task<IV1OhlcvExchangesExchangeIdHistoryGetApiResponse?> V1OhlcvExchangesExchangeIdHistoryGetOrDefaultAsync(string exchangeId, string periodId, string timeStart, string timeEnd, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1OhlcvExchangesExchangeIdHistoryGetAsync(exchangeId, periodId, timeStart, timeEnd, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Historical data by exchange Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific exchange eg &#x60;BITSTAMP&#x60;              :::info The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. The difference between &#x60;time_end&#x60; and &#x60;time_start&#x60; cannot be higher than 1 day. The &#x60;period_id&#x60; cannot be higher than &#x60;1DAY&#x60;. :::
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Exchange identifier of requested timeseries (from the Metadata -&gt; Exchanges)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;)</param>
        /// <param name="timeStart">Timeseries starting time in ISO 8601</param>
        /// <param name="timeEnd">Timeseries ending time in ISO 8601</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1OhlcvExchangesExchangeIdHistoryGetApiResponse"/>&gt;</returns>
        public async Task<IV1OhlcvExchangesExchangeIdHistoryGetApiResponse> V1OhlcvExchangesExchangeIdHistoryGetAsync(string exchangeId, string periodId, string timeStart, string timeEnd, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1OhlcvExchangesExchangeIdHistoryGet(exchangeId, periodId, timeStart, timeEnd);

                FormatV1OhlcvExchangesExchangeIdHistoryGet(ref exchangeId, ref periodId, ref timeStart, ref timeEnd);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/ohlcv/exchanges/{exchange_id}/history"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/ohlcv/exchanges/{exchange_id}/history");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bexchange_id%7D", Uri.EscapeDataString(exchangeId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["period_id"] = ClientUtils.ParameterToString(periodId);
                    parseQueryStringLocalVar["time_start"] = ClientUtils.ParameterToString(timeStart);
                    parseQueryStringLocalVar["time_end"] = ClientUtils.ParameterToString(timeEnd);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1OhlcvExchangesExchangeIdHistoryGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1OhlcvExchangesExchangeIdHistoryGetApiResponse>();

                        V1OhlcvExchangesExchangeIdHistoryGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/ohlcv/exchanges/{exchange_id}/history", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1OhlcvExchangesExchangeIdHistoryGetDefaultImplementation(apiResponseLocalVar, exchangeId, periodId, timeStart, timeEnd);

                        Events.ExecuteOnV1OhlcvExchangesExchangeIdHistoryGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1OhlcvExchangesExchangeIdHistoryGetDefaultImplementation(e, "/v1/ohlcv/exchanges/{exchange_id}/history", uriBuilderLocalVar.Path, exchangeId, periodId, timeStart, timeEnd);
                Events.ExecuteOnErrorV1OhlcvExchangesExchangeIdHistoryGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1OhlcvExchangesExchangeIdHistoryGetApiResponse"/>
        /// </summary>
        public partial class V1OhlcvExchangesExchangeIdHistoryGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ApiResponse, IV1OhlcvExchangesExchangeIdHistoryGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1OhlcvExchangesExchangeIdHistoryGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1OhlcvExchangesExchangeIdHistoryGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1OhlcvExchangesExchangeIdHistoryGetApiResponse(ILogger<V1OhlcvExchangesExchangeIdHistoryGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ModelsExchangeTimeseriesItem>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ModelsExchangeTimeseriesItem>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ModelsExchangeTimeseriesItem>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterV1OhlcvPeriodsGetDefaultImplementation(IV1OhlcvPeriodsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterV1OhlcvPeriodsGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterV1OhlcvPeriodsGet(ref bool suppressDefaultLog, IV1OhlcvPeriodsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorV1OhlcvPeriodsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1OhlcvPeriodsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorV1OhlcvPeriodsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// List all periods Get full list of supported time periods available for requesting OHLCV timeseries data.              ### Available periods              Time unit | Period identifiers - -- -- -- -- | - -- -- -- -- -- Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY Month | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH Year | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS              :::tip You can assume that we will not remove any periods from this response, however, we may add new ones. :::
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1OhlcvPeriodsGetApiResponse"/>&gt;</returns>
        public async Task<IV1OhlcvPeriodsGetApiResponse?> V1OhlcvPeriodsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1OhlcvPeriodsGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List all periods Get full list of supported time periods available for requesting OHLCV timeseries data.              ### Available periods              Time unit | Period identifiers - -- -- -- -- | - -- -- -- -- -- Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY Month | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH Year | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS              :::tip You can assume that we will not remove any periods from this response, however, we may add new ones. :::
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1OhlcvPeriodsGetApiResponse"/>&gt;</returns>
        public async Task<IV1OhlcvPeriodsGetApiResponse> V1OhlcvPeriodsGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/ohlcv/periods"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/ohlcv/periods");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1OhlcvPeriodsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1OhlcvPeriodsGetApiResponse>();

                        V1OhlcvPeriodsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/ohlcv/periods", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1OhlcvPeriodsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnV1OhlcvPeriodsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1OhlcvPeriodsGetDefaultImplementation(e, "/v1/ohlcv/periods", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorV1OhlcvPeriodsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1OhlcvPeriodsGetApiResponse"/>
        /// </summary>
        public partial class V1OhlcvPeriodsGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ApiResponse, IV1OhlcvPeriodsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1OhlcvPeriodsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1OhlcvPeriodsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1OhlcvPeriodsGetApiResponse(ILogger<V1OhlcvPeriodsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<V1TimeseriesPeriod>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<V1TimeseriesPeriod>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<V1TimeseriesPeriod>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1OhlcvSymbolIdHistoryGet(ref string symbolId, ref string periodId, ref Option<string> timeStart, ref Option<string> timeEnd, ref Option<int> limit);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="symbolId"></param>
        /// <param name="periodId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <returns></returns>
        private void ValidateV1OhlcvSymbolIdHistoryGet(string symbolId, string periodId, Option<string> timeStart, Option<string> timeEnd)
        {
            if (symbolId == null)
                throw new ArgumentNullException(nameof(symbolId));

            if (periodId == null)
                throw new ArgumentNullException(nameof(periodId));

            if (timeStart.IsSet && timeStart.Value == null)
                throw new ArgumentNullException(nameof(timeStart));

            if (timeEnd.IsSet && timeEnd.Value == null)
                throw new ArgumentNullException(nameof(timeEnd));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="periodId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="limit"></param>
        private void AfterV1OhlcvSymbolIdHistoryGetDefaultImplementation(IV1OhlcvSymbolIdHistoryGetApiResponse apiResponseLocalVar, string symbolId, string periodId, Option<string> timeStart, Option<string> timeEnd, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterV1OhlcvSymbolIdHistoryGet(ref suppressDefaultLog, apiResponseLocalVar, symbolId, periodId, timeStart, timeEnd, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="periodId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="limit"></param>
        partial void AfterV1OhlcvSymbolIdHistoryGet(ref bool suppressDefaultLog, IV1OhlcvSymbolIdHistoryGetApiResponse apiResponseLocalVar, string symbolId, string periodId, Option<string> timeStart, Option<string> timeEnd, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="periodId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="limit"></param>
        private void OnErrorV1OhlcvSymbolIdHistoryGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbolId, string periodId, Option<string> timeStart, Option<string> timeEnd, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1OhlcvSymbolIdHistoryGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, symbolId, periodId, timeStart, timeEnd, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="periodId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="limit"></param>
        partial void OnErrorV1OhlcvSymbolIdHistoryGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbolId, string periodId, Option<string> timeStart, Option<string> timeEnd, Option<int> limit);

        /// <summary>
        /// Historical data Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data              :::info The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. :::
        /// </summary>
        /// <param name="symbolId">Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)</param>
        /// <param name="timeStart">Timeseries starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Timeseries ending time in ISO 8601 (optional)</param>
        /// <param name="limit">Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1OhlcvSymbolIdHistoryGetApiResponse"/>&gt;</returns>
        public async Task<IV1OhlcvSymbolIdHistoryGetApiResponse?> V1OhlcvSymbolIdHistoryGetOrDefaultAsync(string symbolId, string periodId, Option<string> timeStart = default, Option<string> timeEnd = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1OhlcvSymbolIdHistoryGetAsync(symbolId, periodId, timeStart, timeEnd, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Historical data Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data              :::info The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. :::
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)</param>
        /// <param name="timeStart">Timeseries starting time in ISO 8601 (optional)</param>
        /// <param name="timeEnd">Timeseries ending time in ISO 8601 (optional)</param>
        /// <param name="limit">Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1OhlcvSymbolIdHistoryGetApiResponse"/>&gt;</returns>
        public async Task<IV1OhlcvSymbolIdHistoryGetApiResponse> V1OhlcvSymbolIdHistoryGetAsync(string symbolId, string periodId, Option<string> timeStart = default, Option<string> timeEnd = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1OhlcvSymbolIdHistoryGet(symbolId, periodId, timeStart, timeEnd);

                FormatV1OhlcvSymbolIdHistoryGet(ref symbolId, ref periodId, ref timeStart, ref timeEnd, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/ohlcv/{symbol_id}/history"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/ohlcv/{symbol_id}/history");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsymbol_id%7D", Uri.EscapeDataString(symbolId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["period_id"] = ClientUtils.ParameterToString(periodId);

                    if (timeStart.IsSet)
                        parseQueryStringLocalVar["time_start"] = ClientUtils.ParameterToString(timeStart.Value);

                    if (timeEnd.IsSet)
                        parseQueryStringLocalVar["time_end"] = ClientUtils.ParameterToString(timeEnd.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1OhlcvSymbolIdHistoryGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1OhlcvSymbolIdHistoryGetApiResponse>();

                        V1OhlcvSymbolIdHistoryGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/ohlcv/{symbol_id}/history", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1OhlcvSymbolIdHistoryGetDefaultImplementation(apiResponseLocalVar, symbolId, periodId, timeStart, timeEnd, limit);

                        Events.ExecuteOnV1OhlcvSymbolIdHistoryGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1OhlcvSymbolIdHistoryGetDefaultImplementation(e, "/v1/ohlcv/{symbol_id}/history", uriBuilderLocalVar.Path, symbolId, periodId, timeStart, timeEnd, limit);
                Events.ExecuteOnErrorV1OhlcvSymbolIdHistoryGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1OhlcvSymbolIdHistoryGetApiResponse"/>
        /// </summary>
        public partial class V1OhlcvSymbolIdHistoryGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ApiResponse, IV1OhlcvSymbolIdHistoryGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1OhlcvSymbolIdHistoryGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1OhlcvSymbolIdHistoryGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1OhlcvSymbolIdHistoryGetApiResponse(ILogger<V1OhlcvSymbolIdHistoryGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<V1TimeseriesItem>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<V1TimeseriesItem>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<V1TimeseriesItem>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1OhlcvSymbolIdLatestGet(ref string symbolId, ref string periodId, ref Option<int> limit, ref Option<bool> includeEmptyItems);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="symbolId"></param>
        /// <param name="periodId"></param>
        /// <returns></returns>
        private void ValidateV1OhlcvSymbolIdLatestGet(string symbolId, string periodId)
        {
            if (symbolId == null)
                throw new ArgumentNullException(nameof(symbolId));

            if (periodId == null)
                throw new ArgumentNullException(nameof(periodId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="periodId"></param>
        /// <param name="limit"></param>
        /// <param name="includeEmptyItems"></param>
        private void AfterV1OhlcvSymbolIdLatestGetDefaultImplementation(IV1OhlcvSymbolIdLatestGetApiResponse apiResponseLocalVar, string symbolId, string periodId, Option<int> limit, Option<bool> includeEmptyItems)
        {
            bool suppressDefaultLog = false;
            AfterV1OhlcvSymbolIdLatestGet(ref suppressDefaultLog, apiResponseLocalVar, symbolId, periodId, limit, includeEmptyItems);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="periodId"></param>
        /// <param name="limit"></param>
        /// <param name="includeEmptyItems"></param>
        partial void AfterV1OhlcvSymbolIdLatestGet(ref bool suppressDefaultLog, IV1OhlcvSymbolIdLatestGetApiResponse apiResponseLocalVar, string symbolId, string periodId, Option<int> limit, Option<bool> includeEmptyItems);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="periodId"></param>
        /// <param name="limit"></param>
        /// <param name="includeEmptyItems"></param>
        private void OnErrorV1OhlcvSymbolIdLatestGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbolId, string periodId, Option<int> limit, Option<bool> includeEmptyItems)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1OhlcvSymbolIdLatestGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, symbolId, periodId, limit, includeEmptyItems);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="symbolId"></param>
        /// <param name="periodId"></param>
        /// <param name="limit"></param>
        /// <param name="includeEmptyItems"></param>
        partial void OnErrorV1OhlcvSymbolIdLatestGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string symbolId, string periodId, Option<int> limit, Option<bool> includeEmptyItems);

        /// <summary>
        /// Latest data Get OHLCV latest timeseries data returned in time descending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data              :::info OHLCV Latest endpoint is just the shortcut to the OHLCV Historical endpoint with substituted &#x60;time_start&#x60; and &#x60;time_end&#x60; parameters.  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. :::
        /// </summary>
        /// <param name="symbolId">Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)</param>
        /// <param name="limit">Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="includeEmptyItems"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1OhlcvSymbolIdLatestGetApiResponse"/>&gt;</returns>
        public async Task<IV1OhlcvSymbolIdLatestGetApiResponse?> V1OhlcvSymbolIdLatestGetOrDefaultAsync(string symbolId, string periodId, Option<int> limit = default, Option<bool> includeEmptyItems = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1OhlcvSymbolIdLatestGetAsync(symbolId, periodId, limit, includeEmptyItems, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Latest data Get OHLCV latest timeseries data returned in time descending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data              :::info OHLCV Latest endpoint is just the shortcut to the OHLCV Historical endpoint with substituted &#x60;time_start&#x60; and &#x60;time_end&#x60; parameters.  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. :::
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbolId">Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)</param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;)</param>
        /// <param name="limit">Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="includeEmptyItems"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1OhlcvSymbolIdLatestGetApiResponse"/>&gt;</returns>
        public async Task<IV1OhlcvSymbolIdLatestGetApiResponse> V1OhlcvSymbolIdLatestGetAsync(string symbolId, string periodId, Option<int> limit = default, Option<bool> includeEmptyItems = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1OhlcvSymbolIdLatestGet(symbolId, periodId);

                FormatV1OhlcvSymbolIdLatestGet(ref symbolId, ref periodId, ref limit, ref includeEmptyItems);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/ohlcv/{symbol_id}/latest"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/ohlcv/{symbol_id}/latest");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsymbol_id%7D", Uri.EscapeDataString(symbolId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["period_id"] = ClientUtils.ParameterToString(periodId);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (includeEmptyItems.IsSet)
                        parseQueryStringLocalVar["include_empty_items"] = ClientUtils.ParameterToString(includeEmptyItems.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1OhlcvSymbolIdLatestGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1OhlcvSymbolIdLatestGetApiResponse>();

                        V1OhlcvSymbolIdLatestGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/ohlcv/{symbol_id}/latest", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1OhlcvSymbolIdLatestGetDefaultImplementation(apiResponseLocalVar, symbolId, periodId, limit, includeEmptyItems);

                        Events.ExecuteOnV1OhlcvSymbolIdLatestGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1OhlcvSymbolIdLatestGetDefaultImplementation(e, "/v1/ohlcv/{symbol_id}/latest", uriBuilderLocalVar.Path, symbolId, periodId, limit, includeEmptyItems);
                Events.ExecuteOnErrorV1OhlcvSymbolIdLatestGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1OhlcvSymbolIdLatestGetApiResponse"/>
        /// </summary>
        public partial class V1OhlcvSymbolIdLatestGetApiResponse : APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ApiResponse, IV1OhlcvSymbolIdLatestGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1OhlcvSymbolIdLatestGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1OhlcvSymbolIdLatestGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1OhlcvSymbolIdLatestGetApiResponse(ILogger<V1OhlcvSymbolIdLatestGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<V1TimeseriesItem>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<V1TimeseriesItem>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<V1TimeseriesItem>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
