/*
 * CoinAPI Market Data REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Api;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model;

namespace APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client
{
    /// <summary>
    /// Provides hosting configuration for APIBricks.CoinAPI.MarketDataAPI.REST.V1
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyNullableJsonConverter());
            _jsonOptions.Converters.Add(new ModelsExchangeTimeseriesItemJsonConverter());
            _jsonOptions.Converters.Add(new OptionsOptionExchangeGroupJsonConverter());
            _jsonOptions.Converters.Add(new OptionsStrikeJsonConverter());
            _jsonOptions.Converters.Add(new V1AssetJsonConverter());
            _jsonOptions.Converters.Add(new V1ChainJsonConverter());
            _jsonOptions.Converters.Add(new V1ChainNetworkAddressJsonConverter());
            _jsonOptions.Converters.Add(new V1ExchangeJsonConverter());
            _jsonOptions.Converters.Add(new V1ExchangeRateJsonConverter());
            _jsonOptions.Converters.Add(new V1ExchangeRatesJsonConverter());
            _jsonOptions.Converters.Add(new V1ExchangeRatesRateJsonConverter());
            _jsonOptions.Converters.Add(new V1ExchangeRatesTimeseriesItemJsonConverter());
            _jsonOptions.Converters.Add(new V1GeneralDataJsonConverter());
            _jsonOptions.Converters.Add(new V1IconJsonConverter());
            _jsonOptions.Converters.Add(new V1LastTradeJsonConverter());
            _jsonOptions.Converters.Add(new V1ListingItemJsonConverter());
            _jsonOptions.Converters.Add(new V1MetricJsonConverter());
            _jsonOptions.Converters.Add(new V1MetricDataJsonConverter());
            _jsonOptions.Converters.Add(new V1MetricInfoJsonConverter());
            _jsonOptions.Converters.Add(new V1OrderBookJsonConverter());
            _jsonOptions.Converters.Add(new V1OrderBookBaseJsonConverter());
            _jsonOptions.Converters.Add(new V1OrderBookDepthJsonConverter());
            _jsonOptions.Converters.Add(new V1QuoteJsonConverter());
            _jsonOptions.Converters.Add(new V1QuoteTradeJsonConverter());
            _jsonOptions.Converters.Add(new V1SymbolJsonConverter());
            _jsonOptions.Converters.Add(new V1SymbolMappingJsonConverter());
            _jsonOptions.Converters.Add(new V1TimeseriesItemJsonConverter());
            _jsonOptions.Converters.Add(new V1TimeseriesPeriodJsonConverter());
            _jsonOptions.Converters.Add(new V1TradeJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<ExchangeRatesApiEvents>();
            _services.AddTransient<IExchangeRatesApi, ExchangeRatesApi>();
            _services.AddSingleton<ExternalMetricsApiEvents>();
            _services.AddTransient<IExternalMetricsApi, ExternalMetricsApi>();
            _services.AddSingleton<MetadataApiEvents>();
            _services.AddTransient<IMetadataApi, MetadataApi>();
            _services.AddSingleton<MetricsApiEvents>();
            _services.AddTransient<IMetricsApi, MetricsApi>();
            _services.AddSingleton<OhlcvApiEvents>();
            _services.AddTransient<IOhlcvApi, OhlcvApi>();
            _services.AddSingleton<OptionsApiEvents>();
            _services.AddTransient<IOptionsApi, OptionsApi>();
            _services.AddSingleton<OrderBookApiEvents>();
            _services.AddTransient<IOrderBookApi, OrderBookApi>();
            _services.AddSingleton<OrderBookL3ApiEvents>();
            _services.AddTransient<IOrderBookL3Api, OrderBookL3Api>();
            _services.AddSingleton<QuotesApiEvents>();
            _services.AddTransient<IQuotesApi, QuotesApi>();
            _services.AddSingleton<TradesApiEvents>();
            _services.AddTransient<ITradesApi, TradesApi>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IExchangeRatesApi, ExchangeRatesApi>(client));
            builders.Add(_services.AddHttpClient<IExternalMetricsApi, ExternalMetricsApi>(client));
            builders.Add(_services.AddHttpClient<IMetadataApi, MetadataApi>(client));
            builders.Add(_services.AddHttpClient<IMetricsApi, MetricsApi>(client));
            builders.Add(_services.AddHttpClient<IOhlcvApi, OhlcvApi>(client));
            builders.Add(_services.AddHttpClient<IOptionsApi, OptionsApi>(client));
            builders.Add(_services.AddHttpClient<IOrderBookApi, OrderBookApi>(client));
            builders.Add(_services.AddHttpClient<IOrderBookL3Api, OrderBookL3Api>(client));
            builders.Add(_services.AddHttpClient<IQuotesApi, QuotesApi>(client));
            builders.Add(_services.AddHttpClient<ITradesApi, TradesApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
