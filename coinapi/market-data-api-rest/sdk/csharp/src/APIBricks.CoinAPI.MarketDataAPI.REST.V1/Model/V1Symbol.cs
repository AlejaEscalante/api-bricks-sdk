// <auto-generated>
/*
 * CoinAPI Market Data REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ClientUtils;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client;

namespace APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model
{
    /// <summary>
    /// Represents a symbol data model.
    /// </summary>
    public partial class V1Symbol : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1Symbol" /> class.
        /// </summary>
        /// <param name="symbolId">The symbol identifier.</param>
        /// <param name="exchangeId">The exchange identifier.</param>
        /// <param name="symbolType">The symbol type.</param>
        /// <param name="assetIdBase">The base asset identifier.</param>
        /// <param name="assetIdQuote">The quote asset identifier.</param>
        /// <param name="assetIdUnit">The unit asset identifier.</param>
        /// <param name="futureContractUnit">The contract unit for futures.</param>
        /// <param name="futureContractUnitAsset">The asset used as the unit for futures contract.</param>
        /// <param name="futureDeliveryTime">The future delivery time for futures contract.</param>
        /// <param name="optionTypeIsCall">Indicates whether the option type is a call.</param>
        /// <param name="optionStrikePrice">The strike price for options.</param>
        /// <param name="optionContractUnit">The contract unit for options.</param>
        /// <param name="optionExerciseStyle">The exercise style for options.</param>
        /// <param name="optionExpirationTime">The expiration time for options.</param>
        /// <param name="contractDeliveryTime">The delivery time for contracts.</param>
        /// <param name="contractUnit">The contract unit for contracts.</param>
        /// <param name="contractUnitAsset">The asset used as the unit for contracts.</param>
        /// <param name="contractId">The contract identifier.</param>
        /// <param name="contractDisplayName">The display name of the contract.</param>
        /// <param name="contractDisplayDescription">The display description of the contract.</param>
        /// <param name="dataStart">dataStart</param>
        /// <param name="dataEnd">dataEnd</param>
        /// <param name="dataQuoteStart">The start date of quote data.</param>
        /// <param name="dataQuoteEnd">The end date of quote data.</param>
        /// <param name="dataOrderbookStart">The start date of order book data.</param>
        /// <param name="dataOrderbookEnd">The end date of order book data.</param>
        /// <param name="dataTradeStart">The start date of trade data.</param>
        /// <param name="dataTradeEnd">The end date of trade data.</param>
        /// <param name="indexId">The index identifier.</param>
        /// <param name="indexDisplayName">The display name of the index.</param>
        /// <param name="indexDisplayDescription">The display description of the index.</param>
        /// <param name="volume1hrs">The volume in the last 1 hour.</param>
        /// <param name="volume1hrsUsd">The volume in USD in the last 1 hour.</param>
        /// <param name="volume1day">The volume in the last 1 day.</param>
        /// <param name="volume1dayUsd">The volume in USD in the last 1 day.</param>
        /// <param name="volume1mth">The volume in the last 1 month.</param>
        /// <param name="volume1mthUsd">The volume in USD in the last 1 month.</param>
        /// <param name="price">The price.</param>
        /// <param name="symbolIdExchange">The symbol identifier in the exchange.</param>
        /// <param name="assetIdBaseExchange">The base asset identifier in the exchange.</param>
        /// <param name="assetIdQuoteExchange">The quote asset identifier in the exchange.</param>
        /// <param name="pricePrecision">The price precision.</param>
        /// <param name="sizePrecision">The size precision.</param>
        /// <param name="rawKvp">Not normalized raw kvp data.</param>
        /// <param name="volumeToUsd">Volume unit in USD.</param>
        /// <param name="symbolIdInt">The symbol identifier in integer immutable format, used to correlate data across different APIs.</param>
        [JsonConstructor]
        public V1Symbol(Option<string?> symbolId = default, Option<string?> exchangeId = default, Option<string?> symbolType = default, Option<string?> assetIdBase = default, Option<string?> assetIdQuote = default, Option<string?> assetIdUnit = default, Option<double?> futureContractUnit = default, Option<string?> futureContractUnitAsset = default, Option<DateTime?> futureDeliveryTime = default, Option<bool?> optionTypeIsCall = default, Option<double?> optionStrikePrice = default, Option<double?> optionContractUnit = default, Option<string?> optionExerciseStyle = default, Option<DateTime?> optionExpirationTime = default, Option<DateTime?> contractDeliveryTime = default, Option<double?> contractUnit = default, Option<string?> contractUnitAsset = default, Option<string?> contractId = default, Option<string?> contractDisplayName = default, Option<string?> contractDisplayDescription = default, Option<string?> dataStart = default, Option<string?> dataEnd = default, Option<DateTime?> dataQuoteStart = default, Option<DateTime?> dataQuoteEnd = default, Option<DateTime?> dataOrderbookStart = default, Option<DateTime?> dataOrderbookEnd = default, Option<DateTime?> dataTradeStart = default, Option<DateTime?> dataTradeEnd = default, Option<string?> indexId = default, Option<string?> indexDisplayName = default, Option<string?> indexDisplayDescription = default, Option<double?> volume1hrs = default, Option<double?> volume1hrsUsd = default, Option<double?> volume1day = default, Option<double?> volume1dayUsd = default, Option<double?> volume1mth = default, Option<double?> volume1mthUsd = default, Option<double?> price = default, Option<string?> symbolIdExchange = default, Option<string?> assetIdBaseExchange = default, Option<string?> assetIdQuoteExchange = default, Option<double?> pricePrecision = default, Option<double?> sizePrecision = default, Option<Dictionary<string, string>?> rawKvp = default, Option<double?> volumeToUsd = default, Option<int?> symbolIdInt = default)
        {
            SymbolIdOption = symbolId;
            ExchangeIdOption = exchangeId;
            SymbolTypeOption = symbolType;
            AssetIdBaseOption = assetIdBase;
            AssetIdQuoteOption = assetIdQuote;
            AssetIdUnitOption = assetIdUnit;
            FutureContractUnitOption = futureContractUnit;
            FutureContractUnitAssetOption = futureContractUnitAsset;
            FutureDeliveryTimeOption = futureDeliveryTime;
            OptionTypeIsCallOption = optionTypeIsCall;
            OptionStrikePriceOption = optionStrikePrice;
            OptionContractUnitOption = optionContractUnit;
            OptionExerciseStyleOption = optionExerciseStyle;
            OptionExpirationTimeOption = optionExpirationTime;
            ContractDeliveryTimeOption = contractDeliveryTime;
            ContractUnitOption = contractUnit;
            ContractUnitAssetOption = contractUnitAsset;
            ContractIdOption = contractId;
            ContractDisplayNameOption = contractDisplayName;
            ContractDisplayDescriptionOption = contractDisplayDescription;
            DataStartOption = dataStart;
            DataEndOption = dataEnd;
            DataQuoteStartOption = dataQuoteStart;
            DataQuoteEndOption = dataQuoteEnd;
            DataOrderbookStartOption = dataOrderbookStart;
            DataOrderbookEndOption = dataOrderbookEnd;
            DataTradeStartOption = dataTradeStart;
            DataTradeEndOption = dataTradeEnd;
            IndexIdOption = indexId;
            IndexDisplayNameOption = indexDisplayName;
            IndexDisplayDescriptionOption = indexDisplayDescription;
            Volume1hrsOption = volume1hrs;
            Volume1hrsUsdOption = volume1hrsUsd;
            Volume1dayOption = volume1day;
            Volume1dayUsdOption = volume1dayUsd;
            Volume1mthOption = volume1mth;
            Volume1mthUsdOption = volume1mthUsd;
            PriceOption = price;
            SymbolIdExchangeOption = symbolIdExchange;
            AssetIdBaseExchangeOption = assetIdBaseExchange;
            AssetIdQuoteExchangeOption = assetIdQuoteExchange;
            PricePrecisionOption = pricePrecision;
            SizePrecisionOption = sizePrecision;
            RawKvpOption = rawKvp;
            VolumeToUsdOption = volumeToUsd;
            SymbolIdIntOption = symbolIdInt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SymbolId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SymbolIdOption { get; private set; }

        /// <summary>
        /// The symbol identifier.
        /// </summary>
        /// <value>The symbol identifier.</value>
        [JsonPropertyName("symbol_id")]
        public string? SymbolId { get { return this.SymbolIdOption; } set { this.SymbolIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExchangeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExchangeIdOption { get; private set; }

        /// <summary>
        /// The exchange identifier.
        /// </summary>
        /// <value>The exchange identifier.</value>
        [JsonPropertyName("exchange_id")]
        public string? ExchangeId { get { return this.ExchangeIdOption; } set { this.ExchangeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SymbolType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SymbolTypeOption { get; private set; }

        /// <summary>
        /// The symbol type.
        /// </summary>
        /// <value>The symbol type.</value>
        [JsonPropertyName("symbol_type")]
        public string? SymbolType { get { return this.SymbolTypeOption; } set { this.SymbolTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssetIdBase
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssetIdBaseOption { get; private set; }

        /// <summary>
        /// The base asset identifier.
        /// </summary>
        /// <value>The base asset identifier.</value>
        [JsonPropertyName("asset_id_base")]
        public string? AssetIdBase { get { return this.AssetIdBaseOption; } set { this.AssetIdBaseOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssetIdQuote
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssetIdQuoteOption { get; private set; }

        /// <summary>
        /// The quote asset identifier.
        /// </summary>
        /// <value>The quote asset identifier.</value>
        [JsonPropertyName("asset_id_quote")]
        public string? AssetIdQuote { get { return this.AssetIdQuoteOption; } set { this.AssetIdQuoteOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssetIdUnit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssetIdUnitOption { get; private set; }

        /// <summary>
        /// The unit asset identifier.
        /// </summary>
        /// <value>The unit asset identifier.</value>
        [JsonPropertyName("asset_id_unit")]
        public string? AssetIdUnit { get { return this.AssetIdUnitOption; } set { this.AssetIdUnitOption = new(value); } }

        /// <summary>
        /// Used to track the state of FutureContractUnit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> FutureContractUnitOption { get; private set; }

        /// <summary>
        /// The contract unit for futures.
        /// </summary>
        /// <value>The contract unit for futures.</value>
        [JsonPropertyName("future_contract_unit")]
        public double? FutureContractUnit { get { return this.FutureContractUnitOption; } set { this.FutureContractUnitOption = new(value); } }

        /// <summary>
        /// Used to track the state of FutureContractUnitAsset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FutureContractUnitAssetOption { get; private set; }

        /// <summary>
        /// The asset used as the unit for futures contract.
        /// </summary>
        /// <value>The asset used as the unit for futures contract.</value>
        [JsonPropertyName("future_contract_unit_asset")]
        public string? FutureContractUnitAsset { get { return this.FutureContractUnitAssetOption; } set { this.FutureContractUnitAssetOption = new(value); } }

        /// <summary>
        /// Used to track the state of FutureDeliveryTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> FutureDeliveryTimeOption { get; private set; }

        /// <summary>
        /// The future delivery time for futures contract.
        /// </summary>
        /// <value>The future delivery time for futures contract.</value>
        [JsonPropertyName("future_delivery_time")]
        public DateTime? FutureDeliveryTime { get { return this.FutureDeliveryTimeOption; } set { this.FutureDeliveryTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of OptionTypeIsCall
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> OptionTypeIsCallOption { get; private set; }

        /// <summary>
        /// Indicates whether the option type is a call.
        /// </summary>
        /// <value>Indicates whether the option type is a call.</value>
        [JsonPropertyName("option_type_is_call")]
        public bool? OptionTypeIsCall { get { return this.OptionTypeIsCallOption; } set { this.OptionTypeIsCallOption = new(value); } }

        /// <summary>
        /// Used to track the state of OptionStrikePrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> OptionStrikePriceOption { get; private set; }

        /// <summary>
        /// The strike price for options.
        /// </summary>
        /// <value>The strike price for options.</value>
        [JsonPropertyName("option_strike_price")]
        public double? OptionStrikePrice { get { return this.OptionStrikePriceOption; } set { this.OptionStrikePriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of OptionContractUnit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> OptionContractUnitOption { get; private set; }

        /// <summary>
        /// The contract unit for options.
        /// </summary>
        /// <value>The contract unit for options.</value>
        [JsonPropertyName("option_contract_unit")]
        public double? OptionContractUnit { get { return this.OptionContractUnitOption; } set { this.OptionContractUnitOption = new(value); } }

        /// <summary>
        /// Used to track the state of OptionExerciseStyle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OptionExerciseStyleOption { get; private set; }

        /// <summary>
        /// The exercise style for options.
        /// </summary>
        /// <value>The exercise style for options.</value>
        [JsonPropertyName("option_exercise_style")]
        public string? OptionExerciseStyle { get { return this.OptionExerciseStyleOption; } set { this.OptionExerciseStyleOption = new(value); } }

        /// <summary>
        /// Used to track the state of OptionExpirationTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> OptionExpirationTimeOption { get; private set; }

        /// <summary>
        /// The expiration time for options.
        /// </summary>
        /// <value>The expiration time for options.</value>
        [JsonPropertyName("option_expiration_time")]
        public DateTime? OptionExpirationTime { get { return this.OptionExpirationTimeOption; } set { this.OptionExpirationTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContractDeliveryTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ContractDeliveryTimeOption { get; private set; }

        /// <summary>
        /// The delivery time for contracts.
        /// </summary>
        /// <value>The delivery time for contracts.</value>
        [JsonPropertyName("contract_delivery_time")]
        public DateTime? ContractDeliveryTime { get { return this.ContractDeliveryTimeOption; } set { this.ContractDeliveryTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContractUnit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ContractUnitOption { get; private set; }

        /// <summary>
        /// The contract unit for contracts.
        /// </summary>
        /// <value>The contract unit for contracts.</value>
        [JsonPropertyName("contract_unit")]
        public double? ContractUnit { get { return this.ContractUnitOption; } set { this.ContractUnitOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContractUnitAsset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContractUnitAssetOption { get; private set; }

        /// <summary>
        /// The asset used as the unit for contracts.
        /// </summary>
        /// <value>The asset used as the unit for contracts.</value>
        [JsonPropertyName("contract_unit_asset")]
        public string? ContractUnitAsset { get { return this.ContractUnitAssetOption; } set { this.ContractUnitAssetOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContractId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContractIdOption { get; private set; }

        /// <summary>
        /// The contract identifier.
        /// </summary>
        /// <value>The contract identifier.</value>
        [JsonPropertyName("contract_id")]
        public string? ContractId { get { return this.ContractIdOption; } set { this.ContractIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContractDisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContractDisplayNameOption { get; private set; }

        /// <summary>
        /// The display name of the contract.
        /// </summary>
        /// <value>The display name of the contract.</value>
        [JsonPropertyName("contract_display_name")]
        public string? ContractDisplayName { get { return this.ContractDisplayNameOption; } set { this.ContractDisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContractDisplayDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContractDisplayDescriptionOption { get; private set; }

        /// <summary>
        /// The display description of the contract.
        /// </summary>
        /// <value>The display description of the contract.</value>
        [JsonPropertyName("contract_display_description")]
        public string? ContractDisplayDescription { get { return this.ContractDisplayDescriptionOption; } set { this.ContractDisplayDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataStart
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DataStartOption { get; }

        /// <summary>
        /// Gets or Sets DataStart
        /// </summary>
        [JsonPropertyName("data_start")]
        public string? DataStart { get { return this.DataStartOption; } }

        /// <summary>
        /// Used to track the state of DataEnd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DataEndOption { get; }

        /// <summary>
        /// Gets or Sets DataEnd
        /// </summary>
        [JsonPropertyName("data_end")]
        public string? DataEnd { get { return this.DataEndOption; } }

        /// <summary>
        /// Used to track the state of DataQuoteStart
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataQuoteStartOption { get; private set; }

        /// <summary>
        /// The start date of quote data.
        /// </summary>
        /// <value>The start date of quote data.</value>
        [JsonPropertyName("data_quote_start")]
        public DateTime? DataQuoteStart { get { return this.DataQuoteStartOption; } set { this.DataQuoteStartOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataQuoteEnd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataQuoteEndOption { get; private set; }

        /// <summary>
        /// The end date of quote data.
        /// </summary>
        /// <value>The end date of quote data.</value>
        [JsonPropertyName("data_quote_end")]
        public DateTime? DataQuoteEnd { get { return this.DataQuoteEndOption; } set { this.DataQuoteEndOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataOrderbookStart
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataOrderbookStartOption { get; private set; }

        /// <summary>
        /// The start date of order book data.
        /// </summary>
        /// <value>The start date of order book data.</value>
        [JsonPropertyName("data_orderbook_start")]
        public DateTime? DataOrderbookStart { get { return this.DataOrderbookStartOption; } set { this.DataOrderbookStartOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataOrderbookEnd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataOrderbookEndOption { get; private set; }

        /// <summary>
        /// The end date of order book data.
        /// </summary>
        /// <value>The end date of order book data.</value>
        [JsonPropertyName("data_orderbook_end")]
        public DateTime? DataOrderbookEnd { get { return this.DataOrderbookEndOption; } set { this.DataOrderbookEndOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataTradeStart
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataTradeStartOption { get; private set; }

        /// <summary>
        /// The start date of trade data.
        /// </summary>
        /// <value>The start date of trade data.</value>
        [JsonPropertyName("data_trade_start")]
        public DateTime? DataTradeStart { get { return this.DataTradeStartOption; } set { this.DataTradeStartOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataTradeEnd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataTradeEndOption { get; private set; }

        /// <summary>
        /// The end date of trade data.
        /// </summary>
        /// <value>The end date of trade data.</value>
        [JsonPropertyName("data_trade_end")]
        public DateTime? DataTradeEnd { get { return this.DataTradeEndOption; } set { this.DataTradeEndOption = new(value); } }

        /// <summary>
        /// Used to track the state of IndexId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IndexIdOption { get; private set; }

        /// <summary>
        /// The index identifier.
        /// </summary>
        /// <value>The index identifier.</value>
        [JsonPropertyName("index_id")]
        public string? IndexId { get { return this.IndexIdOption; } set { this.IndexIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of IndexDisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IndexDisplayNameOption { get; private set; }

        /// <summary>
        /// The display name of the index.
        /// </summary>
        /// <value>The display name of the index.</value>
        [JsonPropertyName("index_display_name")]
        public string? IndexDisplayName { get { return this.IndexDisplayNameOption; } set { this.IndexDisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of IndexDisplayDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IndexDisplayDescriptionOption { get; private set; }

        /// <summary>
        /// The display description of the index.
        /// </summary>
        /// <value>The display description of the index.</value>
        [JsonPropertyName("index_display_description")]
        public string? IndexDisplayDescription { get { return this.IndexDisplayDescriptionOption; } set { this.IndexDisplayDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Volume1hrs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> Volume1hrsOption { get; private set; }

        /// <summary>
        /// The volume in the last 1 hour.
        /// </summary>
        /// <value>The volume in the last 1 hour.</value>
        [JsonPropertyName("volume_1hrs")]
        public double? Volume1hrs { get { return this.Volume1hrsOption; } set { this.Volume1hrsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Volume1hrsUsd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> Volume1hrsUsdOption { get; private set; }

        /// <summary>
        /// The volume in USD in the last 1 hour.
        /// </summary>
        /// <value>The volume in USD in the last 1 hour.</value>
        [JsonPropertyName("volume_1hrs_usd")]
        public double? Volume1hrsUsd { get { return this.Volume1hrsUsdOption; } set { this.Volume1hrsUsdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Volume1day
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> Volume1dayOption { get; private set; }

        /// <summary>
        /// The volume in the last 1 day.
        /// </summary>
        /// <value>The volume in the last 1 day.</value>
        [JsonPropertyName("volume_1day")]
        public double? Volume1day { get { return this.Volume1dayOption; } set { this.Volume1dayOption = new(value); } }

        /// <summary>
        /// Used to track the state of Volume1dayUsd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> Volume1dayUsdOption { get; private set; }

        /// <summary>
        /// The volume in USD in the last 1 day.
        /// </summary>
        /// <value>The volume in USD in the last 1 day.</value>
        [JsonPropertyName("volume_1day_usd")]
        public double? Volume1dayUsd { get { return this.Volume1dayUsdOption; } set { this.Volume1dayUsdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Volume1mth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> Volume1mthOption { get; private set; }

        /// <summary>
        /// The volume in the last 1 month.
        /// </summary>
        /// <value>The volume in the last 1 month.</value>
        [JsonPropertyName("volume_1mth")]
        public double? Volume1mth { get { return this.Volume1mthOption; } set { this.Volume1mthOption = new(value); } }

        /// <summary>
        /// Used to track the state of Volume1mthUsd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> Volume1mthUsdOption { get; private set; }

        /// <summary>
        /// The volume in USD in the last 1 month.
        /// </summary>
        /// <value>The volume in USD in the last 1 month.</value>
        [JsonPropertyName("volume_1mth_usd")]
        public double? Volume1mthUsd { get { return this.Volume1mthUsdOption; } set { this.Volume1mthUsdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Price
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> PriceOption { get; private set; }

        /// <summary>
        /// The price.
        /// </summary>
        /// <value>The price.</value>
        [JsonPropertyName("price")]
        public double? Price { get { return this.PriceOption; } set { this.PriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of SymbolIdExchange
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SymbolIdExchangeOption { get; private set; }

        /// <summary>
        /// The symbol identifier in the exchange.
        /// </summary>
        /// <value>The symbol identifier in the exchange.</value>
        [JsonPropertyName("symbol_id_exchange")]
        public string? SymbolIdExchange { get { return this.SymbolIdExchangeOption; } set { this.SymbolIdExchangeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssetIdBaseExchange
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssetIdBaseExchangeOption { get; private set; }

        /// <summary>
        /// The base asset identifier in the exchange.
        /// </summary>
        /// <value>The base asset identifier in the exchange.</value>
        [JsonPropertyName("asset_id_base_exchange")]
        public string? AssetIdBaseExchange { get { return this.AssetIdBaseExchangeOption; } set { this.AssetIdBaseExchangeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssetIdQuoteExchange
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssetIdQuoteExchangeOption { get; private set; }

        /// <summary>
        /// The quote asset identifier in the exchange.
        /// </summary>
        /// <value>The quote asset identifier in the exchange.</value>
        [JsonPropertyName("asset_id_quote_exchange")]
        public string? AssetIdQuoteExchange { get { return this.AssetIdQuoteExchangeOption; } set { this.AssetIdQuoteExchangeOption = new(value); } }

        /// <summary>
        /// Used to track the state of PricePrecision
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> PricePrecisionOption { get; private set; }

        /// <summary>
        /// The price precision.
        /// </summary>
        /// <value>The price precision.</value>
        [JsonPropertyName("price_precision")]
        public double? PricePrecision { get { return this.PricePrecisionOption; } set { this.PricePrecisionOption = new(value); } }

        /// <summary>
        /// Used to track the state of SizePrecision
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> SizePrecisionOption { get; private set; }

        /// <summary>
        /// The size precision.
        /// </summary>
        /// <value>The size precision.</value>
        [JsonPropertyName("size_precision")]
        public double? SizePrecision { get { return this.SizePrecisionOption; } set { this.SizePrecisionOption = new(value); } }

        /// <summary>
        /// Used to track the state of RawKvp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> RawKvpOption { get; private set; }

        /// <summary>
        /// Not normalized raw kvp data.
        /// </summary>
        /// <value>Not normalized raw kvp data.</value>
        [JsonPropertyName("raw_kvp")]
        public Dictionary<string, string>? RawKvp { get { return this.RawKvpOption; } set { this.RawKvpOption = new(value); } }

        /// <summary>
        /// Used to track the state of VolumeToUsd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> VolumeToUsdOption { get; private set; }

        /// <summary>
        /// Volume unit in USD.
        /// </summary>
        /// <value>Volume unit in USD.</value>
        [JsonPropertyName("volume_to_usd")]
        public double? VolumeToUsd { get { return this.VolumeToUsdOption; } set { this.VolumeToUsdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SymbolIdInt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SymbolIdIntOption { get; }

        /// <summary>
        /// The symbol identifier in integer immutable format, used to correlate data across different APIs.
        /// </summary>
        /// <value>The symbol identifier in integer immutable format, used to correlate data across different APIs.</value>
        [JsonPropertyName("symbol_id_int")]
        public int? SymbolIdInt { get { return this.SymbolIdIntOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V1Symbol {\n");
            sb.Append("  SymbolId: ").Append(SymbolId).Append("\n");
            sb.Append("  ExchangeId: ").Append(ExchangeId).Append("\n");
            sb.Append("  SymbolType: ").Append(SymbolType).Append("\n");
            sb.Append("  AssetIdBase: ").Append(AssetIdBase).Append("\n");
            sb.Append("  AssetIdQuote: ").Append(AssetIdQuote).Append("\n");
            sb.Append("  AssetIdUnit: ").Append(AssetIdUnit).Append("\n");
            sb.Append("  FutureContractUnit: ").Append(FutureContractUnit).Append("\n");
            sb.Append("  FutureContractUnitAsset: ").Append(FutureContractUnitAsset).Append("\n");
            sb.Append("  FutureDeliveryTime: ").Append(FutureDeliveryTime).Append("\n");
            sb.Append("  OptionTypeIsCall: ").Append(OptionTypeIsCall).Append("\n");
            sb.Append("  OptionStrikePrice: ").Append(OptionStrikePrice).Append("\n");
            sb.Append("  OptionContractUnit: ").Append(OptionContractUnit).Append("\n");
            sb.Append("  OptionExerciseStyle: ").Append(OptionExerciseStyle).Append("\n");
            sb.Append("  OptionExpirationTime: ").Append(OptionExpirationTime).Append("\n");
            sb.Append("  ContractDeliveryTime: ").Append(ContractDeliveryTime).Append("\n");
            sb.Append("  ContractUnit: ").Append(ContractUnit).Append("\n");
            sb.Append("  ContractUnitAsset: ").Append(ContractUnitAsset).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  ContractDisplayName: ").Append(ContractDisplayName).Append("\n");
            sb.Append("  ContractDisplayDescription: ").Append(ContractDisplayDescription).Append("\n");
            sb.Append("  DataStart: ").Append(DataStart).Append("\n");
            sb.Append("  DataEnd: ").Append(DataEnd).Append("\n");
            sb.Append("  DataQuoteStart: ").Append(DataQuoteStart).Append("\n");
            sb.Append("  DataQuoteEnd: ").Append(DataQuoteEnd).Append("\n");
            sb.Append("  DataOrderbookStart: ").Append(DataOrderbookStart).Append("\n");
            sb.Append("  DataOrderbookEnd: ").Append(DataOrderbookEnd).Append("\n");
            sb.Append("  DataTradeStart: ").Append(DataTradeStart).Append("\n");
            sb.Append("  DataTradeEnd: ").Append(DataTradeEnd).Append("\n");
            sb.Append("  IndexId: ").Append(IndexId).Append("\n");
            sb.Append("  IndexDisplayName: ").Append(IndexDisplayName).Append("\n");
            sb.Append("  IndexDisplayDescription: ").Append(IndexDisplayDescription).Append("\n");
            sb.Append("  Volume1hrs: ").Append(Volume1hrs).Append("\n");
            sb.Append("  Volume1hrsUsd: ").Append(Volume1hrsUsd).Append("\n");
            sb.Append("  Volume1day: ").Append(Volume1day).Append("\n");
            sb.Append("  Volume1dayUsd: ").Append(Volume1dayUsd).Append("\n");
            sb.Append("  Volume1mth: ").Append(Volume1mth).Append("\n");
            sb.Append("  Volume1mthUsd: ").Append(Volume1mthUsd).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  SymbolIdExchange: ").Append(SymbolIdExchange).Append("\n");
            sb.Append("  AssetIdBaseExchange: ").Append(AssetIdBaseExchange).Append("\n");
            sb.Append("  AssetIdQuoteExchange: ").Append(AssetIdQuoteExchange).Append("\n");
            sb.Append("  PricePrecision: ").Append(PricePrecision).Append("\n");
            sb.Append("  SizePrecision: ").Append(SizePrecision).Append("\n");
            sb.Append("  RawKvp: ").Append(RawKvp).Append("\n");
            sb.Append("  VolumeToUsd: ").Append(VolumeToUsd).Append("\n");
            sb.Append("  SymbolIdInt: ").Append(SymbolIdInt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="V1Symbol" />
    /// </summary>
    public class V1SymbolJsonConverter : JsonConverter<V1Symbol>
    {
        /// <summary>
        /// The format to use to serialize FutureDeliveryTime
        /// </summary>
        public static string FutureDeliveryTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize OptionExpirationTime
        /// </summary>
        public static string OptionExpirationTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ContractDeliveryTime
        /// </summary>
        public static string ContractDeliveryTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DataQuoteStart
        /// </summary>
        public static string DataQuoteStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DataQuoteEnd
        /// </summary>
        public static string DataQuoteEndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DataOrderbookStart
        /// </summary>
        public static string DataOrderbookStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DataOrderbookEnd
        /// </summary>
        public static string DataOrderbookEndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DataTradeStart
        /// </summary>
        public static string DataTradeStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DataTradeEnd
        /// </summary>
        public static string DataTradeEndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="V1Symbol" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override V1Symbol Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> symbolId = default;
            Option<string?> exchangeId = default;
            Option<string?> symbolType = default;
            Option<string?> assetIdBase = default;
            Option<string?> assetIdQuote = default;
            Option<string?> assetIdUnit = default;
            Option<double?> futureContractUnit = default;
            Option<string?> futureContractUnitAsset = default;
            Option<DateTime?> futureDeliveryTime = default;
            Option<bool?> optionTypeIsCall = default;
            Option<double?> optionStrikePrice = default;
            Option<double?> optionContractUnit = default;
            Option<string?> optionExerciseStyle = default;
            Option<DateTime?> optionExpirationTime = default;
            Option<DateTime?> contractDeliveryTime = default;
            Option<double?> contractUnit = default;
            Option<string?> contractUnitAsset = default;
            Option<string?> contractId = default;
            Option<string?> contractDisplayName = default;
            Option<string?> contractDisplayDescription = default;
            Option<string?> dataStart = default;
            Option<string?> dataEnd = default;
            Option<DateTime?> dataQuoteStart = default;
            Option<DateTime?> dataQuoteEnd = default;
            Option<DateTime?> dataOrderbookStart = default;
            Option<DateTime?> dataOrderbookEnd = default;
            Option<DateTime?> dataTradeStart = default;
            Option<DateTime?> dataTradeEnd = default;
            Option<string?> indexId = default;
            Option<string?> indexDisplayName = default;
            Option<string?> indexDisplayDescription = default;
            Option<double?> volume1hrs = default;
            Option<double?> volume1hrsUsd = default;
            Option<double?> volume1day = default;
            Option<double?> volume1dayUsd = default;
            Option<double?> volume1mth = default;
            Option<double?> volume1mthUsd = default;
            Option<double?> price = default;
            Option<string?> symbolIdExchange = default;
            Option<string?> assetIdBaseExchange = default;
            Option<string?> assetIdQuoteExchange = default;
            Option<double?> pricePrecision = default;
            Option<double?> sizePrecision = default;
            Option<Dictionary<string, string>?> rawKvp = default;
            Option<double?> volumeToUsd = default;
            Option<int?> symbolIdInt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "symbol_id":
                            symbolId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "exchange_id":
                            exchangeId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "symbol_type":
                            symbolType = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "asset_id_base":
                            assetIdBase = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "asset_id_quote":
                            assetIdQuote = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "asset_id_unit":
                            assetIdUnit = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "future_contract_unit":
                            futureContractUnit = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "future_contract_unit_asset":
                            futureContractUnitAsset = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "future_delivery_time":
                            futureDeliveryTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "option_type_is_call":
                            optionTypeIsCall = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "option_strike_price":
                            optionStrikePrice = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "option_contract_unit":
                            optionContractUnit = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "option_exercise_style":
                            optionExerciseStyle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "option_expiration_time":
                            optionExpirationTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "contract_delivery_time":
                            contractDeliveryTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "contract_unit":
                            contractUnit = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "contract_unit_asset":
                            contractUnitAsset = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "contract_id":
                            contractId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "contract_display_name":
                            contractDisplayName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "contract_display_description":
                            contractDisplayDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "data_start":
                            dataStart = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "data_end":
                            dataEnd = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "data_quote_start":
                            dataQuoteStart = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "data_quote_end":
                            dataQuoteEnd = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "data_orderbook_start":
                            dataOrderbookStart = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "data_orderbook_end":
                            dataOrderbookEnd = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "data_trade_start":
                            dataTradeStart = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "data_trade_end":
                            dataTradeEnd = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "index_id":
                            indexId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "index_display_name":
                            indexDisplayName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "index_display_description":
                            indexDisplayDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "volume_1hrs":
                            volume1hrs = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "volume_1hrs_usd":
                            volume1hrsUsd = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "volume_1day":
                            volume1day = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "volume_1day_usd":
                            volume1dayUsd = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "volume_1mth":
                            volume1mth = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "volume_1mth_usd":
                            volume1mthUsd = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "price":
                            price = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "symbol_id_exchange":
                            symbolIdExchange = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "asset_id_base_exchange":
                            assetIdBaseExchange = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "asset_id_quote_exchange":
                            assetIdQuoteExchange = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "price_precision":
                            pricePrecision = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "size_precision":
                            sizePrecision = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "raw_kvp":
                            rawKvp = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "volume_to_usd":
                            volumeToUsd = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "symbol_id_int":
                            symbolIdInt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new V1Symbol(symbolId, exchangeId, symbolType, assetIdBase, assetIdQuote, assetIdUnit, futureContractUnit, futureContractUnitAsset, futureDeliveryTime, optionTypeIsCall, optionStrikePrice, optionContractUnit, optionExerciseStyle, optionExpirationTime, contractDeliveryTime, contractUnit, contractUnitAsset, contractId, contractDisplayName, contractDisplayDescription, dataStart, dataEnd, dataQuoteStart, dataQuoteEnd, dataOrderbookStart, dataOrderbookEnd, dataTradeStart, dataTradeEnd, indexId, indexDisplayName, indexDisplayDescription, volume1hrs, volume1hrsUsd, volume1day, volume1dayUsd, volume1mth, volume1mthUsd, price, symbolIdExchange, assetIdBaseExchange, assetIdQuoteExchange, pricePrecision, sizePrecision, rawKvp, volumeToUsd, symbolIdInt);
        }

        /// <summary>
        /// Serializes a <see cref="V1Symbol" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1Symbol"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, V1Symbol v1Symbol, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, v1Symbol, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="V1Symbol" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1Symbol"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, V1Symbol v1Symbol, JsonSerializerOptions jsonSerializerOptions)
        {
            if (v1Symbol.SymbolIdOption.IsSet)
                if (v1Symbol.SymbolIdOption.Value != null)
                    writer.WriteString("symbol_id", v1Symbol.SymbolId);
                else
                    writer.WriteNull("symbol_id");

            if (v1Symbol.ExchangeIdOption.IsSet)
                if (v1Symbol.ExchangeIdOption.Value != null)
                    writer.WriteString("exchange_id", v1Symbol.ExchangeId);
                else
                    writer.WriteNull("exchange_id");

            if (v1Symbol.SymbolTypeOption.IsSet)
                if (v1Symbol.SymbolTypeOption.Value != null)
                    writer.WriteString("symbol_type", v1Symbol.SymbolType);
                else
                    writer.WriteNull("symbol_type");

            if (v1Symbol.AssetIdBaseOption.IsSet)
                if (v1Symbol.AssetIdBaseOption.Value != null)
                    writer.WriteString("asset_id_base", v1Symbol.AssetIdBase);
                else
                    writer.WriteNull("asset_id_base");

            if (v1Symbol.AssetIdQuoteOption.IsSet)
                if (v1Symbol.AssetIdQuoteOption.Value != null)
                    writer.WriteString("asset_id_quote", v1Symbol.AssetIdQuote);
                else
                    writer.WriteNull("asset_id_quote");

            if (v1Symbol.AssetIdUnitOption.IsSet)
                if (v1Symbol.AssetIdUnitOption.Value != null)
                    writer.WriteString("asset_id_unit", v1Symbol.AssetIdUnit);
                else
                    writer.WriteNull("asset_id_unit");

            if (v1Symbol.FutureContractUnitOption.IsSet)
                if (v1Symbol.FutureContractUnitOption.Value != null)
                    writer.WriteNumber("future_contract_unit", v1Symbol.FutureContractUnitOption.Value!.Value);
                else
                    writer.WriteNull("future_contract_unit");

            if (v1Symbol.FutureContractUnitAssetOption.IsSet)
                if (v1Symbol.FutureContractUnitAssetOption.Value != null)
                    writer.WriteString("future_contract_unit_asset", v1Symbol.FutureContractUnitAsset);
                else
                    writer.WriteNull("future_contract_unit_asset");

            if (v1Symbol.FutureDeliveryTimeOption.IsSet)
                if (v1Symbol.FutureDeliveryTimeOption.Value != null)
                    writer.WriteString("future_delivery_time", v1Symbol.FutureDeliveryTimeOption.Value!.Value.ToString(FutureDeliveryTimeFormat));
                else
                    writer.WriteNull("future_delivery_time");

            if (v1Symbol.OptionTypeIsCallOption.IsSet)
                if (v1Symbol.OptionTypeIsCallOption.Value != null)
                    writer.WriteBoolean("option_type_is_call", v1Symbol.OptionTypeIsCallOption.Value!.Value);
                else
                    writer.WriteNull("option_type_is_call");

            if (v1Symbol.OptionStrikePriceOption.IsSet)
                if (v1Symbol.OptionStrikePriceOption.Value != null)
                    writer.WriteNumber("option_strike_price", v1Symbol.OptionStrikePriceOption.Value!.Value);
                else
                    writer.WriteNull("option_strike_price");

            if (v1Symbol.OptionContractUnitOption.IsSet)
                if (v1Symbol.OptionContractUnitOption.Value != null)
                    writer.WriteNumber("option_contract_unit", v1Symbol.OptionContractUnitOption.Value!.Value);
                else
                    writer.WriteNull("option_contract_unit");

            if (v1Symbol.OptionExerciseStyleOption.IsSet)
                if (v1Symbol.OptionExerciseStyleOption.Value != null)
                    writer.WriteString("option_exercise_style", v1Symbol.OptionExerciseStyle);
                else
                    writer.WriteNull("option_exercise_style");

            if (v1Symbol.OptionExpirationTimeOption.IsSet)
                if (v1Symbol.OptionExpirationTimeOption.Value != null)
                    writer.WriteString("option_expiration_time", v1Symbol.OptionExpirationTimeOption.Value!.Value.ToString(OptionExpirationTimeFormat));
                else
                    writer.WriteNull("option_expiration_time");

            if (v1Symbol.ContractDeliveryTimeOption.IsSet)
                if (v1Symbol.ContractDeliveryTimeOption.Value != null)
                    writer.WriteString("contract_delivery_time", v1Symbol.ContractDeliveryTimeOption.Value!.Value.ToString(ContractDeliveryTimeFormat));
                else
                    writer.WriteNull("contract_delivery_time");

            if (v1Symbol.ContractUnitOption.IsSet)
                if (v1Symbol.ContractUnitOption.Value != null)
                    writer.WriteNumber("contract_unit", v1Symbol.ContractUnitOption.Value!.Value);
                else
                    writer.WriteNull("contract_unit");

            if (v1Symbol.ContractUnitAssetOption.IsSet)
                if (v1Symbol.ContractUnitAssetOption.Value != null)
                    writer.WriteString("contract_unit_asset", v1Symbol.ContractUnitAsset);
                else
                    writer.WriteNull("contract_unit_asset");

            if (v1Symbol.ContractIdOption.IsSet)
                if (v1Symbol.ContractIdOption.Value != null)
                    writer.WriteString("contract_id", v1Symbol.ContractId);
                else
                    writer.WriteNull("contract_id");

            if (v1Symbol.ContractDisplayNameOption.IsSet)
                if (v1Symbol.ContractDisplayNameOption.Value != null)
                    writer.WriteString("contract_display_name", v1Symbol.ContractDisplayName);
                else
                    writer.WriteNull("contract_display_name");

            if (v1Symbol.ContractDisplayDescriptionOption.IsSet)
                if (v1Symbol.ContractDisplayDescriptionOption.Value != null)
                    writer.WriteString("contract_display_description", v1Symbol.ContractDisplayDescription);
                else
                    writer.WriteNull("contract_display_description");

            if (v1Symbol.DataStartOption.IsSet)
                if (v1Symbol.DataStartOption.Value != null)
                    writer.WriteString("data_start", v1Symbol.DataStart);
                else
                    writer.WriteNull("data_start");

            if (v1Symbol.DataEndOption.IsSet)
                if (v1Symbol.DataEndOption.Value != null)
                    writer.WriteString("data_end", v1Symbol.DataEnd);
                else
                    writer.WriteNull("data_end");

            if (v1Symbol.DataQuoteStartOption.IsSet)
                if (v1Symbol.DataQuoteStartOption.Value != null)
                    writer.WriteString("data_quote_start", v1Symbol.DataQuoteStartOption.Value!.Value.ToString(DataQuoteStartFormat));
                else
                    writer.WriteNull("data_quote_start");

            if (v1Symbol.DataQuoteEndOption.IsSet)
                if (v1Symbol.DataQuoteEndOption.Value != null)
                    writer.WriteString("data_quote_end", v1Symbol.DataQuoteEndOption.Value!.Value.ToString(DataQuoteEndFormat));
                else
                    writer.WriteNull("data_quote_end");

            if (v1Symbol.DataOrderbookStartOption.IsSet)
                if (v1Symbol.DataOrderbookStartOption.Value != null)
                    writer.WriteString("data_orderbook_start", v1Symbol.DataOrderbookStartOption.Value!.Value.ToString(DataOrderbookStartFormat));
                else
                    writer.WriteNull("data_orderbook_start");

            if (v1Symbol.DataOrderbookEndOption.IsSet)
                if (v1Symbol.DataOrderbookEndOption.Value != null)
                    writer.WriteString("data_orderbook_end", v1Symbol.DataOrderbookEndOption.Value!.Value.ToString(DataOrderbookEndFormat));
                else
                    writer.WriteNull("data_orderbook_end");

            if (v1Symbol.DataTradeStartOption.IsSet)
                if (v1Symbol.DataTradeStartOption.Value != null)
                    writer.WriteString("data_trade_start", v1Symbol.DataTradeStartOption.Value!.Value.ToString(DataTradeStartFormat));
                else
                    writer.WriteNull("data_trade_start");

            if (v1Symbol.DataTradeEndOption.IsSet)
                if (v1Symbol.DataTradeEndOption.Value != null)
                    writer.WriteString("data_trade_end", v1Symbol.DataTradeEndOption.Value!.Value.ToString(DataTradeEndFormat));
                else
                    writer.WriteNull("data_trade_end");

            if (v1Symbol.IndexIdOption.IsSet)
                if (v1Symbol.IndexIdOption.Value != null)
                    writer.WriteString("index_id", v1Symbol.IndexId);
                else
                    writer.WriteNull("index_id");

            if (v1Symbol.IndexDisplayNameOption.IsSet)
                if (v1Symbol.IndexDisplayNameOption.Value != null)
                    writer.WriteString("index_display_name", v1Symbol.IndexDisplayName);
                else
                    writer.WriteNull("index_display_name");

            if (v1Symbol.IndexDisplayDescriptionOption.IsSet)
                if (v1Symbol.IndexDisplayDescriptionOption.Value != null)
                    writer.WriteString("index_display_description", v1Symbol.IndexDisplayDescription);
                else
                    writer.WriteNull("index_display_description");

            if (v1Symbol.Volume1hrsOption.IsSet)
                if (v1Symbol.Volume1hrsOption.Value != null)
                    writer.WriteNumber("volume_1hrs", v1Symbol.Volume1hrsOption.Value!.Value);
                else
                    writer.WriteNull("volume_1hrs");

            if (v1Symbol.Volume1hrsUsdOption.IsSet)
                if (v1Symbol.Volume1hrsUsdOption.Value != null)
                    writer.WriteNumber("volume_1hrs_usd", v1Symbol.Volume1hrsUsdOption.Value!.Value);
                else
                    writer.WriteNull("volume_1hrs_usd");

            if (v1Symbol.Volume1dayOption.IsSet)
                if (v1Symbol.Volume1dayOption.Value != null)
                    writer.WriteNumber("volume_1day", v1Symbol.Volume1dayOption.Value!.Value);
                else
                    writer.WriteNull("volume_1day");

            if (v1Symbol.Volume1dayUsdOption.IsSet)
                if (v1Symbol.Volume1dayUsdOption.Value != null)
                    writer.WriteNumber("volume_1day_usd", v1Symbol.Volume1dayUsdOption.Value!.Value);
                else
                    writer.WriteNull("volume_1day_usd");

            if (v1Symbol.Volume1mthOption.IsSet)
                if (v1Symbol.Volume1mthOption.Value != null)
                    writer.WriteNumber("volume_1mth", v1Symbol.Volume1mthOption.Value!.Value);
                else
                    writer.WriteNull("volume_1mth");

            if (v1Symbol.Volume1mthUsdOption.IsSet)
                if (v1Symbol.Volume1mthUsdOption.Value != null)
                    writer.WriteNumber("volume_1mth_usd", v1Symbol.Volume1mthUsdOption.Value!.Value);
                else
                    writer.WriteNull("volume_1mth_usd");

            if (v1Symbol.PriceOption.IsSet)
                if (v1Symbol.PriceOption.Value != null)
                    writer.WriteNumber("price", v1Symbol.PriceOption.Value!.Value);
                else
                    writer.WriteNull("price");

            if (v1Symbol.SymbolIdExchangeOption.IsSet)
                if (v1Symbol.SymbolIdExchangeOption.Value != null)
                    writer.WriteString("symbol_id_exchange", v1Symbol.SymbolIdExchange);
                else
                    writer.WriteNull("symbol_id_exchange");

            if (v1Symbol.AssetIdBaseExchangeOption.IsSet)
                if (v1Symbol.AssetIdBaseExchangeOption.Value != null)
                    writer.WriteString("asset_id_base_exchange", v1Symbol.AssetIdBaseExchange);
                else
                    writer.WriteNull("asset_id_base_exchange");

            if (v1Symbol.AssetIdQuoteExchangeOption.IsSet)
                if (v1Symbol.AssetIdQuoteExchangeOption.Value != null)
                    writer.WriteString("asset_id_quote_exchange", v1Symbol.AssetIdQuoteExchange);
                else
                    writer.WriteNull("asset_id_quote_exchange");

            if (v1Symbol.PricePrecisionOption.IsSet)
                if (v1Symbol.PricePrecisionOption.Value != null)
                    writer.WriteNumber("price_precision", v1Symbol.PricePrecisionOption.Value!.Value);
                else
                    writer.WriteNull("price_precision");

            if (v1Symbol.SizePrecisionOption.IsSet)
                if (v1Symbol.SizePrecisionOption.Value != null)
                    writer.WriteNumber("size_precision", v1Symbol.SizePrecisionOption.Value!.Value);
                else
                    writer.WriteNull("size_precision");

            if (v1Symbol.RawKvpOption.IsSet)
                if (v1Symbol.RawKvpOption.Value != null)
                {
                    writer.WritePropertyName("raw_kvp");
                    JsonSerializer.Serialize(writer, v1Symbol.RawKvp, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("raw_kvp");
            if (v1Symbol.VolumeToUsdOption.IsSet)
                if (v1Symbol.VolumeToUsdOption.Value != null)
                    writer.WriteNumber("volume_to_usd", v1Symbol.VolumeToUsdOption.Value!.Value);
                else
                    writer.WriteNull("volume_to_usd");

            if (v1Symbol.SymbolIdIntOption.IsSet)
                if (v1Symbol.SymbolIdIntOption.Value != null)
                    writer.WriteNumber("symbol_id_int", v1Symbol.SymbolIdIntOption.Value!.Value);
                else
                    writer.WriteNull("symbol_id_int");
        }
    }
}
