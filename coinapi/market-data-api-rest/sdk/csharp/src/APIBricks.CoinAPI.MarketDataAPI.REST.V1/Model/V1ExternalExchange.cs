// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ClientUtils;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client;

namespace APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model
{
    /// <summary>
    /// Represents an exchange with external mapping for metrics.
    /// </summary>
    public partial class V1ExternalExchange : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1ExternalExchange" /> class.
        /// </summary>
        /// <param name="exchangeId">Gets or sets the internal exchange identifier.</param>
        /// <param name="externalName">Gets or sets the external protocol name/slug.</param>
        /// <param name="description">Gets or sets the description of the exchange.</param>
        /// <param name="sourceId">sourceId</param>
        [JsonConstructor]
        public V1ExternalExchange(Option<string?> exchangeId = default, Option<string?> externalName = default, Option<string?> description = default, Option<string?> sourceId = default)
        {
            ExchangeIdOption = exchangeId;
            ExternalNameOption = externalName;
            DescriptionOption = description;
            SourceIdOption = sourceId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ExchangeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExchangeIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the internal exchange identifier.
        /// </summary>
        /// <value>Gets or sets the internal exchange identifier.</value>
        [JsonPropertyName("exchange_id")]
        public string? ExchangeId { get { return this.ExchangeIdOption; } set { this.ExchangeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalNameOption { get; private set; }

        /// <summary>
        /// Gets or sets the external protocol name/slug.
        /// </summary>
        /// <value>Gets or sets the external protocol name/slug.</value>
        [JsonPropertyName("external_name")]
        public string? ExternalName { get { return this.ExternalNameOption; } set { this.ExternalNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or sets the description of the exchange.
        /// </summary>
        /// <value>Gets or sets the description of the exchange.</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SourceId
        /// </summary>
        [JsonPropertyName("source_id")]
        public string? SourceId { get { return this.SourceIdOption; } set { this.SourceIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V1ExternalExchange {\n");
            sb.Append("  ExchangeId: ").Append(ExchangeId).Append("\n");
            sb.Append("  ExternalName: ").Append(ExternalName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="V1ExternalExchange" />
    /// </summary>
    public class V1ExternalExchangeJsonConverter : JsonConverter<V1ExternalExchange>
    {
        /// <summary>
        /// Deserializes json to <see cref="V1ExternalExchange" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override V1ExternalExchange Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> exchangeId = default;
            Option<string?> externalName = default;
            Option<string?> description = default;
            Option<string?> sourceId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "exchange_id":
                            exchangeId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "external_name":
                            externalName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "source_id":
                            sourceId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new V1ExternalExchange(exchangeId, externalName, description, sourceId);
        }

        /// <summary>
        /// Serializes a <see cref="V1ExternalExchange" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1ExternalExchange"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, V1ExternalExchange v1ExternalExchange, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, v1ExternalExchange, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="V1ExternalExchange" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1ExternalExchange"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, V1ExternalExchange v1ExternalExchange, JsonSerializerOptions jsonSerializerOptions)
        {
            if (v1ExternalExchange.ExchangeIdOption.IsSet)
                if (v1ExternalExchange.ExchangeIdOption.Value != null)
                    writer.WriteString("exchange_id", v1ExternalExchange.ExchangeId);
                else
                    writer.WriteNull("exchange_id");

            if (v1ExternalExchange.ExternalNameOption.IsSet)
                if (v1ExternalExchange.ExternalNameOption.Value != null)
                    writer.WriteString("external_name", v1ExternalExchange.ExternalName);
                else
                    writer.WriteNull("external_name");

            if (v1ExternalExchange.DescriptionOption.IsSet)
                if (v1ExternalExchange.DescriptionOption.Value != null)
                    writer.WriteString("description", v1ExternalExchange.Description);
                else
                    writer.WriteNull("description");

            if (v1ExternalExchange.SourceIdOption.IsSet)
                if (v1ExternalExchange.SourceIdOption.Value != null)
                    writer.WriteString("source_id", v1ExternalExchange.SourceId);
                else
                    writer.WriteNull("source_id");
        }
    }
}
