// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ClientUtils;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client;

namespace APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model
{
    /// <summary>
    /// Represents a quote data model.
    /// </summary>
    public partial class V1Quote : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1Quote" /> class.
        /// </summary>
        /// <param name="symbolId">The symbol identifier.</param>
        /// <param name="timeExchange">The exchange time of the quote.</param>
        /// <param name="timeCoinapi">The CoinAPI time when the quote was received.</param>
        /// <param name="askPrice">The best asking price.</param>
        /// <param name="askSize">The volume resting on the best ask. If the value is equal to zero, then the size is unknown.</param>
        /// <param name="bidPrice">The best bidding price.</param>
        /// <param name="bidSize">The volume resting on the best bid. If the value is equal to zero, then the size is unknown.</param>
        [JsonConstructor]
        public V1Quote(Option<string?> symbolId = default, Option<DateTime?> timeExchange = default, Option<DateTime?> timeCoinapi = default, Option<double?> askPrice = default, Option<double?> askSize = default, Option<double?> bidPrice = default, Option<double?> bidSize = default)
        {
            SymbolIdOption = symbolId;
            TimeExchangeOption = timeExchange;
            TimeCoinapiOption = timeCoinapi;
            AskPriceOption = askPrice;
            AskSizeOption = askSize;
            BidPriceOption = bidPrice;
            BidSizeOption = bidSize;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SymbolId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SymbolIdOption { get; private set; }

        /// <summary>
        /// The symbol identifier.
        /// </summary>
        /// <value>The symbol identifier.</value>
        [JsonPropertyName("symbol_id")]
        public string? SymbolId { get { return this.SymbolIdOption; } set { this.SymbolIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeExchange
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimeExchangeOption { get; private set; }

        /// <summary>
        /// The exchange time of the quote.
        /// </summary>
        /// <value>The exchange time of the quote.</value>
        [JsonPropertyName("time_exchange")]
        public DateTime? TimeExchange { get { return this.TimeExchangeOption; } set { this.TimeExchangeOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeCoinapi
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimeCoinapiOption { get; private set; }

        /// <summary>
        /// The CoinAPI time when the quote was received.
        /// </summary>
        /// <value>The CoinAPI time when the quote was received.</value>
        [JsonPropertyName("time_coinapi")]
        public DateTime? TimeCoinapi { get { return this.TimeCoinapiOption; } set { this.TimeCoinapiOption = new(value); } }

        /// <summary>
        /// Used to track the state of AskPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AskPriceOption { get; private set; }

        /// <summary>
        /// The best asking price.
        /// </summary>
        /// <value>The best asking price.</value>
        [JsonPropertyName("ask_price")]
        public double? AskPrice { get { return this.AskPriceOption; } set { this.AskPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of AskSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AskSizeOption { get; private set; }

        /// <summary>
        /// The volume resting on the best ask. If the value is equal to zero, then the size is unknown.
        /// </summary>
        /// <value>The volume resting on the best ask. If the value is equal to zero, then the size is unknown.</value>
        [JsonPropertyName("ask_size")]
        public double? AskSize { get { return this.AskSizeOption; } set { this.AskSizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of BidPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BidPriceOption { get; private set; }

        /// <summary>
        /// The best bidding price.
        /// </summary>
        /// <value>The best bidding price.</value>
        [JsonPropertyName("bid_price")]
        public double? BidPrice { get { return this.BidPriceOption; } set { this.BidPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of BidSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BidSizeOption { get; private set; }

        /// <summary>
        /// The volume resting on the best bid. If the value is equal to zero, then the size is unknown.
        /// </summary>
        /// <value>The volume resting on the best bid. If the value is equal to zero, then the size is unknown.</value>
        [JsonPropertyName("bid_size")]
        public double? BidSize { get { return this.BidSizeOption; } set { this.BidSizeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V1Quote {\n");
            sb.Append("  SymbolId: ").Append(SymbolId).Append("\n");
            sb.Append("  TimeExchange: ").Append(TimeExchange).Append("\n");
            sb.Append("  TimeCoinapi: ").Append(TimeCoinapi).Append("\n");
            sb.Append("  AskPrice: ").Append(AskPrice).Append("\n");
            sb.Append("  AskSize: ").Append(AskSize).Append("\n");
            sb.Append("  BidPrice: ").Append(BidPrice).Append("\n");
            sb.Append("  BidSize: ").Append(BidSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="V1Quote" />
    /// </summary>
    public class V1QuoteJsonConverter : JsonConverter<V1Quote>
    {
        /// <summary>
        /// The format to use to serialize TimeExchange
        /// </summary>
        public static string TimeExchangeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize TimeCoinapi
        /// </summary>
        public static string TimeCoinapiFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="V1Quote" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override V1Quote Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> symbolId = default;
            Option<DateTime?> timeExchange = default;
            Option<DateTime?> timeCoinapi = default;
            Option<double?> askPrice = default;
            Option<double?> askSize = default;
            Option<double?> bidPrice = default;
            Option<double?> bidSize = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "symbol_id":
                            symbolId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "time_exchange":
                            timeExchange = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "time_coinapi":
                            timeCoinapi = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ask_price":
                            askPrice = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "ask_size":
                            askSize = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "bid_price":
                            bidPrice = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "bid_size":
                            bidSize = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (timeExchange.IsSet && timeExchange.Value == null)
                throw new ArgumentNullException(nameof(timeExchange), "Property is not nullable for class V1Quote.");

            if (timeCoinapi.IsSet && timeCoinapi.Value == null)
                throw new ArgumentNullException(nameof(timeCoinapi), "Property is not nullable for class V1Quote.");

            return new V1Quote(symbolId, timeExchange, timeCoinapi, askPrice, askSize, bidPrice, bidSize);
        }

        /// <summary>
        /// Serializes a <see cref="V1Quote" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1Quote"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, V1Quote v1Quote, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, v1Quote, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="V1Quote" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1Quote"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, V1Quote v1Quote, JsonSerializerOptions jsonSerializerOptions)
        {
            if (v1Quote.SymbolIdOption.IsSet)
                if (v1Quote.SymbolIdOption.Value != null)
                    writer.WriteString("symbol_id", v1Quote.SymbolId);
                else
                    writer.WriteNull("symbol_id");

            if (v1Quote.TimeExchangeOption.IsSet)
                writer.WriteString("time_exchange", v1Quote.TimeExchangeOption.Value!.Value.ToString(TimeExchangeFormat));

            if (v1Quote.TimeCoinapiOption.IsSet)
                writer.WriteString("time_coinapi", v1Quote.TimeCoinapiOption.Value!.Value.ToString(TimeCoinapiFormat));

            if (v1Quote.AskPriceOption.IsSet)
                if (v1Quote.AskPriceOption.Value != null)
                    writer.WriteNumber("ask_price", v1Quote.AskPriceOption.Value!.Value);
                else
                    writer.WriteNull("ask_price");

            if (v1Quote.AskSizeOption.IsSet)
                if (v1Quote.AskSizeOption.Value != null)
                    writer.WriteNumber("ask_size", v1Quote.AskSizeOption.Value!.Value);
                else
                    writer.WriteNull("ask_size");

            if (v1Quote.BidPriceOption.IsSet)
                if (v1Quote.BidPriceOption.Value != null)
                    writer.WriteNumber("bid_price", v1Quote.BidPriceOption.Value!.Value);
                else
                    writer.WriteNull("bid_price");

            if (v1Quote.BidSizeOption.IsSet)
                if (v1Quote.BidSizeOption.Value != null)
                    writer.WriteNumber("bid_size", v1Quote.BidSizeOption.Value!.Value);
                else
                    writer.WriteNull("bid_size");
        }
    }
}
