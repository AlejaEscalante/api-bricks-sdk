// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ClientUtils;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client;

namespace APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model
{
    /// <summary>
    /// Represents the depth of an order book.
    /// </summary>
    public partial class V1OrderBookDepth : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1OrderBookDepth" /> class.
        /// </summary>
        /// <param name="symbolId">The symbol identifier.</param>
        /// <param name="timeExchange">The exchange time of the order book.</param>
        /// <param name="timeCoinapi">The CoinAPI time when the order book was received.</param>
        /// <param name="askLevels">The number of ask levels in the order book.</param>
        /// <param name="bidLevels">The number of bid levels in the order book.</param>
        /// <param name="askDepth">The depth of the ask side of the order book.</param>
        /// <param name="bidDepth">The depth of the bid side of the order book.</param>
        [JsonConstructor]
        public V1OrderBookDepth(Option<string?> symbolId = default, Option<DateTime?> timeExchange = default, Option<DateTime?> timeCoinapi = default, Option<long?> askLevels = default, Option<long?> bidLevels = default, Option<double?> askDepth = default, Option<double?> bidDepth = default)
        {
            SymbolIdOption = symbolId;
            TimeExchangeOption = timeExchange;
            TimeCoinapiOption = timeCoinapi;
            AskLevelsOption = askLevels;
            BidLevelsOption = bidLevels;
            AskDepthOption = askDepth;
            BidDepthOption = bidDepth;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SymbolId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SymbolIdOption { get; private set; }

        /// <summary>
        /// The symbol identifier.
        /// </summary>
        /// <value>The symbol identifier.</value>
        [JsonPropertyName("symbol_id")]
        public string? SymbolId { get { return this.SymbolIdOption; } set { this.SymbolIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeExchange
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimeExchangeOption { get; private set; }

        /// <summary>
        /// The exchange time of the order book.
        /// </summary>
        /// <value>The exchange time of the order book.</value>
        [JsonPropertyName("time_exchange")]
        public DateTime? TimeExchange { get { return this.TimeExchangeOption; } set { this.TimeExchangeOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeCoinapi
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimeCoinapiOption { get; private set; }

        /// <summary>
        /// The CoinAPI time when the order book was received.
        /// </summary>
        /// <value>The CoinAPI time when the order book was received.</value>
        [JsonPropertyName("time_coinapi")]
        public DateTime? TimeCoinapi { get { return this.TimeCoinapiOption; } set { this.TimeCoinapiOption = new(value); } }

        /// <summary>
        /// Used to track the state of AskLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AskLevelsOption { get; private set; }

        /// <summary>
        /// The number of ask levels in the order book.
        /// </summary>
        /// <value>The number of ask levels in the order book.</value>
        [JsonPropertyName("ask_levels")]
        public long? AskLevels { get { return this.AskLevelsOption; } set { this.AskLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of BidLevels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> BidLevelsOption { get; private set; }

        /// <summary>
        /// The number of bid levels in the order book.
        /// </summary>
        /// <value>The number of bid levels in the order book.</value>
        [JsonPropertyName("bid_levels")]
        public long? BidLevels { get { return this.BidLevelsOption; } set { this.BidLevelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of AskDepth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AskDepthOption { get; private set; }

        /// <summary>
        /// The depth of the ask side of the order book.
        /// </summary>
        /// <value>The depth of the ask side of the order book.</value>
        [JsonPropertyName("ask_depth")]
        public double? AskDepth { get { return this.AskDepthOption; } set { this.AskDepthOption = new(value); } }

        /// <summary>
        /// Used to track the state of BidDepth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BidDepthOption { get; private set; }

        /// <summary>
        /// The depth of the bid side of the order book.
        /// </summary>
        /// <value>The depth of the bid side of the order book.</value>
        [JsonPropertyName("bid_depth")]
        public double? BidDepth { get { return this.BidDepthOption; } set { this.BidDepthOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V1OrderBookDepth {\n");
            sb.Append("  SymbolId: ").Append(SymbolId).Append("\n");
            sb.Append("  TimeExchange: ").Append(TimeExchange).Append("\n");
            sb.Append("  TimeCoinapi: ").Append(TimeCoinapi).Append("\n");
            sb.Append("  AskLevels: ").Append(AskLevels).Append("\n");
            sb.Append("  BidLevels: ").Append(BidLevels).Append("\n");
            sb.Append("  AskDepth: ").Append(AskDepth).Append("\n");
            sb.Append("  BidDepth: ").Append(BidDepth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="V1OrderBookDepth" />
    /// </summary>
    public class V1OrderBookDepthJsonConverter : JsonConverter<V1OrderBookDepth>
    {
        /// <summary>
        /// The format to use to serialize TimeExchange
        /// </summary>
        public static string TimeExchangeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize TimeCoinapi
        /// </summary>
        public static string TimeCoinapiFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="V1OrderBookDepth" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override V1OrderBookDepth Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> symbolId = default;
            Option<DateTime?> timeExchange = default;
            Option<DateTime?> timeCoinapi = default;
            Option<long?> askLevels = default;
            Option<long?> bidLevels = default;
            Option<double?> askDepth = default;
            Option<double?> bidDepth = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "symbol_id":
                            symbolId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "time_exchange":
                            timeExchange = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "time_coinapi":
                            timeCoinapi = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ask_levels":
                            askLevels = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "bid_levels":
                            bidLevels = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "ask_depth":
                            askDepth = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "bid_depth":
                            bidDepth = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (timeExchange.IsSet && timeExchange.Value == null)
                throw new ArgumentNullException(nameof(timeExchange), "Property is not nullable for class V1OrderBookDepth.");

            if (timeCoinapi.IsSet && timeCoinapi.Value == null)
                throw new ArgumentNullException(nameof(timeCoinapi), "Property is not nullable for class V1OrderBookDepth.");

            if (askLevels.IsSet && askLevels.Value == null)
                throw new ArgumentNullException(nameof(askLevels), "Property is not nullable for class V1OrderBookDepth.");

            if (bidLevels.IsSet && bidLevels.Value == null)
                throw new ArgumentNullException(nameof(bidLevels), "Property is not nullable for class V1OrderBookDepth.");

            if (askDepth.IsSet && askDepth.Value == null)
                throw new ArgumentNullException(nameof(askDepth), "Property is not nullable for class V1OrderBookDepth.");

            if (bidDepth.IsSet && bidDepth.Value == null)
                throw new ArgumentNullException(nameof(bidDepth), "Property is not nullable for class V1OrderBookDepth.");

            return new V1OrderBookDepth(symbolId, timeExchange, timeCoinapi, askLevels, bidLevels, askDepth, bidDepth);
        }

        /// <summary>
        /// Serializes a <see cref="V1OrderBookDepth" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1OrderBookDepth"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, V1OrderBookDepth v1OrderBookDepth, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, v1OrderBookDepth, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="V1OrderBookDepth" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1OrderBookDepth"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, V1OrderBookDepth v1OrderBookDepth, JsonSerializerOptions jsonSerializerOptions)
        {
            if (v1OrderBookDepth.SymbolIdOption.IsSet)
                if (v1OrderBookDepth.SymbolIdOption.Value != null)
                    writer.WriteString("symbol_id", v1OrderBookDepth.SymbolId);
                else
                    writer.WriteNull("symbol_id");

            if (v1OrderBookDepth.TimeExchangeOption.IsSet)
                writer.WriteString("time_exchange", v1OrderBookDepth.TimeExchangeOption.Value!.Value.ToString(TimeExchangeFormat));

            if (v1OrderBookDepth.TimeCoinapiOption.IsSet)
                writer.WriteString("time_coinapi", v1OrderBookDepth.TimeCoinapiOption.Value!.Value.ToString(TimeCoinapiFormat));

            if (v1OrderBookDepth.AskLevelsOption.IsSet)
                writer.WriteNumber("ask_levels", v1OrderBookDepth.AskLevelsOption.Value!.Value);

            if (v1OrderBookDepth.BidLevelsOption.IsSet)
                writer.WriteNumber("bid_levels", v1OrderBookDepth.BidLevelsOption.Value!.Value);

            if (v1OrderBookDepth.AskDepthOption.IsSet)
                writer.WriteNumber("ask_depth", v1OrderBookDepth.AskDepthOption.Value!.Value);

            if (v1OrderBookDepth.BidDepthOption.IsSet)
                writer.WriteNumber("bid_depth", v1OrderBookDepth.BidDepthOption.Value!.Value);
        }
    }
}
