// <auto-generated>
/*
 * CoinAPI Market Data REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ClientUtils;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client;

namespace APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model
{
    /// <summary>
    /// Represents a strike within the option exchange group.
    /// </summary>
    public partial class OptionsStrike : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionsStrike" /> class.
        /// </summary>
        /// <param name="strikePrice">The strike price.</param>
        /// <param name="call">call</param>
        /// <param name="put">put</param>
        [JsonConstructor]
        public OptionsStrike(Option<double?> strikePrice = default, Option<V1QuoteTrade?> call = default, Option<V1QuoteTrade?> put = default)
        {
            StrikePriceOption = strikePrice;
            CallOption = call;
            PutOption = put;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of StrikePrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> StrikePriceOption { get; private set; }

        /// <summary>
        /// The strike price.
        /// </summary>
        /// <value>The strike price.</value>
        [JsonPropertyName("strike_price")]
        public double? StrikePrice { get { return this.StrikePriceOption; } set { this.StrikePriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Call
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<V1QuoteTrade?> CallOption { get; private set; }

        /// <summary>
        /// Gets or Sets Call
        /// </summary>
        [JsonPropertyName("call")]
        public V1QuoteTrade? Call { get { return this.CallOption; } set { this.CallOption = new(value); } }

        /// <summary>
        /// Used to track the state of Put
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<V1QuoteTrade?> PutOption { get; private set; }

        /// <summary>
        /// Gets or Sets Put
        /// </summary>
        [JsonPropertyName("put")]
        public V1QuoteTrade? Put { get { return this.PutOption; } set { this.PutOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptionsStrike {\n");
            sb.Append("  StrikePrice: ").Append(StrikePrice).Append("\n");
            sb.Append("  Call: ").Append(Call).Append("\n");
            sb.Append("  Put: ").Append(Put).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OptionsStrike" />
    /// </summary>
    public class OptionsStrikeJsonConverter : JsonConverter<OptionsStrike>
    {
        /// <summary>
        /// Deserializes json to <see cref="OptionsStrike" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OptionsStrike Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> strikePrice = default;
            Option<V1QuoteTrade?> call = default;
            Option<V1QuoteTrade?> put = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "strike_price":
                            strikePrice = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "call":
                            call = new Option<V1QuoteTrade?>(JsonSerializer.Deserialize<V1QuoteTrade>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "put":
                            put = new Option<V1QuoteTrade?>(JsonSerializer.Deserialize<V1QuoteTrade>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (strikePrice.IsSet && strikePrice.Value == null)
                throw new ArgumentNullException(nameof(strikePrice), "Property is not nullable for class OptionsStrike.");

            if (call.IsSet && call.Value == null)
                throw new ArgumentNullException(nameof(call), "Property is not nullable for class OptionsStrike.");

            if (put.IsSet && put.Value == null)
                throw new ArgumentNullException(nameof(put), "Property is not nullable for class OptionsStrike.");

            return new OptionsStrike(strikePrice, call, put);
        }

        /// <summary>
        /// Serializes a <see cref="OptionsStrike" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="optionsStrike"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OptionsStrike optionsStrike, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, optionsStrike, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OptionsStrike" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="optionsStrike"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OptionsStrike optionsStrike, JsonSerializerOptions jsonSerializerOptions)
        {
            if (optionsStrike.CallOption.IsSet && optionsStrike.Call == null)
                throw new ArgumentNullException(nameof(optionsStrike.Call), "Property is required for class OptionsStrike.");

            if (optionsStrike.PutOption.IsSet && optionsStrike.Put == null)
                throw new ArgumentNullException(nameof(optionsStrike.Put), "Property is required for class OptionsStrike.");

            if (optionsStrike.StrikePriceOption.IsSet)
                writer.WriteNumber("strike_price", optionsStrike.StrikePriceOption.Value!.Value);

            if (optionsStrike.CallOption.IsSet)
            {
                writer.WritePropertyName("call");
                JsonSerializer.Serialize(writer, optionsStrike.Call, jsonSerializerOptions);
            }
            if (optionsStrike.PutOption.IsSet)
            {
                writer.WritePropertyName("put");
                JsonSerializer.Serialize(writer, optionsStrike.Put, jsonSerializerOptions);
            }
        }
    }
}
