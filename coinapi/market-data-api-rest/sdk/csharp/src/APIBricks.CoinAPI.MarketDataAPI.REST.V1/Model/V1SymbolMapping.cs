// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ClientUtils;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client;

namespace APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model
{
    /// <summary>
    /// Represents symbol mapping information for exchange symbols.
    /// </summary>
    public partial class V1SymbolMapping : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1SymbolMapping" /> class.
        /// </summary>
        /// <param name="symbolId">The symbol ID.</param>
        /// <param name="symbolIdExchange">The exchange-specific symbol ID.</param>
        /// <param name="coinapiDatainfoId">The CoinAPI DataInfo ID.</param>
        /// <param name="assetIdBaseExchange">The exchange-specific base asset ID.</param>
        /// <param name="assetIdQuoteExchange">The exchange-specific quote asset ID.</param>
        /// <param name="assetIdBase">The base asset ID.</param>
        /// <param name="assetIdQuote">The quote asset ID.</param>
        /// <param name="pricePrecision">The price precision.</param>
        /// <param name="sizePrecision">The size precision.</param>
        [JsonConstructor]
        public V1SymbolMapping(Option<string?> symbolId = default, Option<string?> symbolIdExchange = default, Option<int?> coinapiDatainfoId = default, Option<string?> assetIdBaseExchange = default, Option<string?> assetIdQuoteExchange = default, Option<string?> assetIdBase = default, Option<string?> assetIdQuote = default, Option<double?> pricePrecision = default, Option<double?> sizePrecision = default)
        {
            SymbolIdOption = symbolId;
            SymbolIdExchangeOption = symbolIdExchange;
            CoinapiDatainfoIdOption = coinapiDatainfoId;
            AssetIdBaseExchangeOption = assetIdBaseExchange;
            AssetIdQuoteExchangeOption = assetIdQuoteExchange;
            AssetIdBaseOption = assetIdBase;
            AssetIdQuoteOption = assetIdQuote;
            PricePrecisionOption = pricePrecision;
            SizePrecisionOption = sizePrecision;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SymbolId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SymbolIdOption { get; private set; }

        /// <summary>
        /// The symbol ID.
        /// </summary>
        /// <value>The symbol ID.</value>
        [JsonPropertyName("symbol_id")]
        public string? SymbolId { get { return this.SymbolIdOption; } set { this.SymbolIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SymbolIdExchange
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SymbolIdExchangeOption { get; private set; }

        /// <summary>
        /// The exchange-specific symbol ID.
        /// </summary>
        /// <value>The exchange-specific symbol ID.</value>
        [JsonPropertyName("symbol_id_exchange")]
        public string? SymbolIdExchange { get { return this.SymbolIdExchangeOption; } set { this.SymbolIdExchangeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CoinapiDatainfoId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CoinapiDatainfoIdOption { get; private set; }

        /// <summary>
        /// The CoinAPI DataInfo ID.
        /// </summary>
        /// <value>The CoinAPI DataInfo ID.</value>
        [JsonPropertyName("coinapi_datainfo_id")]
        public int? CoinapiDatainfoId { get { return this.CoinapiDatainfoIdOption; } set { this.CoinapiDatainfoIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssetIdBaseExchange
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssetIdBaseExchangeOption { get; private set; }

        /// <summary>
        /// The exchange-specific base asset ID.
        /// </summary>
        /// <value>The exchange-specific base asset ID.</value>
        [JsonPropertyName("asset_id_base_exchange")]
        public string? AssetIdBaseExchange { get { return this.AssetIdBaseExchangeOption; } set { this.AssetIdBaseExchangeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssetIdQuoteExchange
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssetIdQuoteExchangeOption { get; private set; }

        /// <summary>
        /// The exchange-specific quote asset ID.
        /// </summary>
        /// <value>The exchange-specific quote asset ID.</value>
        [JsonPropertyName("asset_id_quote_exchange")]
        public string? AssetIdQuoteExchange { get { return this.AssetIdQuoteExchangeOption; } set { this.AssetIdQuoteExchangeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssetIdBase
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssetIdBaseOption { get; private set; }

        /// <summary>
        /// The base asset ID.
        /// </summary>
        /// <value>The base asset ID.</value>
        [JsonPropertyName("asset_id_base")]
        public string? AssetIdBase { get { return this.AssetIdBaseOption; } set { this.AssetIdBaseOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssetIdQuote
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssetIdQuoteOption { get; private set; }

        /// <summary>
        /// The quote asset ID.
        /// </summary>
        /// <value>The quote asset ID.</value>
        [JsonPropertyName("asset_id_quote")]
        public string? AssetIdQuote { get { return this.AssetIdQuoteOption; } set { this.AssetIdQuoteOption = new(value); } }

        /// <summary>
        /// Used to track the state of PricePrecision
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> PricePrecisionOption { get; private set; }

        /// <summary>
        /// The price precision.
        /// </summary>
        /// <value>The price precision.</value>
        [JsonPropertyName("price_precision")]
        public double? PricePrecision { get { return this.PricePrecisionOption; } set { this.PricePrecisionOption = new(value); } }

        /// <summary>
        /// Used to track the state of SizePrecision
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> SizePrecisionOption { get; private set; }

        /// <summary>
        /// The size precision.
        /// </summary>
        /// <value>The size precision.</value>
        [JsonPropertyName("size_precision")]
        public double? SizePrecision { get { return this.SizePrecisionOption; } set { this.SizePrecisionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V1SymbolMapping {\n");
            sb.Append("  SymbolId: ").Append(SymbolId).Append("\n");
            sb.Append("  SymbolIdExchange: ").Append(SymbolIdExchange).Append("\n");
            sb.Append("  CoinapiDatainfoId: ").Append(CoinapiDatainfoId).Append("\n");
            sb.Append("  AssetIdBaseExchange: ").Append(AssetIdBaseExchange).Append("\n");
            sb.Append("  AssetIdQuoteExchange: ").Append(AssetIdQuoteExchange).Append("\n");
            sb.Append("  AssetIdBase: ").Append(AssetIdBase).Append("\n");
            sb.Append("  AssetIdQuote: ").Append(AssetIdQuote).Append("\n");
            sb.Append("  PricePrecision: ").Append(PricePrecision).Append("\n");
            sb.Append("  SizePrecision: ").Append(SizePrecision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="V1SymbolMapping" />
    /// </summary>
    public class V1SymbolMappingJsonConverter : JsonConverter<V1SymbolMapping>
    {
        /// <summary>
        /// Deserializes json to <see cref="V1SymbolMapping" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override V1SymbolMapping Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> symbolId = default;
            Option<string?> symbolIdExchange = default;
            Option<int?> coinapiDatainfoId = default;
            Option<string?> assetIdBaseExchange = default;
            Option<string?> assetIdQuoteExchange = default;
            Option<string?> assetIdBase = default;
            Option<string?> assetIdQuote = default;
            Option<double?> pricePrecision = default;
            Option<double?> sizePrecision = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "symbol_id":
                            symbolId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "symbol_id_exchange":
                            symbolIdExchange = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "coinapi_datainfo_id":
                            coinapiDatainfoId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "asset_id_base_exchange":
                            assetIdBaseExchange = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "asset_id_quote_exchange":
                            assetIdQuoteExchange = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "asset_id_base":
                            assetIdBase = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "asset_id_quote":
                            assetIdQuote = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "price_precision":
                            pricePrecision = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "size_precision":
                            sizePrecision = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (coinapiDatainfoId.IsSet && coinapiDatainfoId.Value == null)
                throw new ArgumentNullException(nameof(coinapiDatainfoId), "Property is not nullable for class V1SymbolMapping.");

            return new V1SymbolMapping(symbolId, symbolIdExchange, coinapiDatainfoId, assetIdBaseExchange, assetIdQuoteExchange, assetIdBase, assetIdQuote, pricePrecision, sizePrecision);
        }

        /// <summary>
        /// Serializes a <see cref="V1SymbolMapping" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1SymbolMapping"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, V1SymbolMapping v1SymbolMapping, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, v1SymbolMapping, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="V1SymbolMapping" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1SymbolMapping"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, V1SymbolMapping v1SymbolMapping, JsonSerializerOptions jsonSerializerOptions)
        {
            if (v1SymbolMapping.SymbolIdOption.IsSet)
                if (v1SymbolMapping.SymbolIdOption.Value != null)
                    writer.WriteString("symbol_id", v1SymbolMapping.SymbolId);
                else
                    writer.WriteNull("symbol_id");

            if (v1SymbolMapping.SymbolIdExchangeOption.IsSet)
                if (v1SymbolMapping.SymbolIdExchangeOption.Value != null)
                    writer.WriteString("symbol_id_exchange", v1SymbolMapping.SymbolIdExchange);
                else
                    writer.WriteNull("symbol_id_exchange");

            if (v1SymbolMapping.CoinapiDatainfoIdOption.IsSet)
                writer.WriteNumber("coinapi_datainfo_id", v1SymbolMapping.CoinapiDatainfoIdOption.Value!.Value);

            if (v1SymbolMapping.AssetIdBaseExchangeOption.IsSet)
                if (v1SymbolMapping.AssetIdBaseExchangeOption.Value != null)
                    writer.WriteString("asset_id_base_exchange", v1SymbolMapping.AssetIdBaseExchange);
                else
                    writer.WriteNull("asset_id_base_exchange");

            if (v1SymbolMapping.AssetIdQuoteExchangeOption.IsSet)
                if (v1SymbolMapping.AssetIdQuoteExchangeOption.Value != null)
                    writer.WriteString("asset_id_quote_exchange", v1SymbolMapping.AssetIdQuoteExchange);
                else
                    writer.WriteNull("asset_id_quote_exchange");

            if (v1SymbolMapping.AssetIdBaseOption.IsSet)
                if (v1SymbolMapping.AssetIdBaseOption.Value != null)
                    writer.WriteString("asset_id_base", v1SymbolMapping.AssetIdBase);
                else
                    writer.WriteNull("asset_id_base");

            if (v1SymbolMapping.AssetIdQuoteOption.IsSet)
                if (v1SymbolMapping.AssetIdQuoteOption.Value != null)
                    writer.WriteString("asset_id_quote", v1SymbolMapping.AssetIdQuote);
                else
                    writer.WriteNull("asset_id_quote");

            if (v1SymbolMapping.PricePrecisionOption.IsSet)
                if (v1SymbolMapping.PricePrecisionOption.Value != null)
                    writer.WriteNumber("price_precision", v1SymbolMapping.PricePrecisionOption.Value!.Value);
                else
                    writer.WriteNull("price_precision");

            if (v1SymbolMapping.SizePrecisionOption.IsSet)
                if (v1SymbolMapping.SizePrecisionOption.Value != null)
                    writer.WriteNumber("size_precision", v1SymbolMapping.SizePrecisionOption.Value!.Value);
                else
                    writer.WriteNull("size_precision");
        }
    }
}
