// <auto-generated>
/*
 * CoinAPI Market Data REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ClientUtils;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client;

namespace APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model
{
    /// <summary>
    /// Represents an option exchange group data model.
    /// </summary>
    public partial class OptionsOptionExchangeGroup : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionsOptionExchangeGroup" /> class.
        /// </summary>
        /// <param name="assetIdBase">The base asset identifier.</param>
        /// <param name="assetIdQuote">The quote asset identifier.</param>
        /// <param name="underlyingPrice">The underlying price of the option.</param>
        /// <param name="timeExpiration">The expiration time of the option.</param>
        /// <param name="strikes">The list of strikes available.</param>
        [JsonConstructor]
        public OptionsOptionExchangeGroup(Option<string?> assetIdBase = default, Option<string?> assetIdQuote = default, Option<double?> underlyingPrice = default, Option<DateTime?> timeExpiration = default, Option<List<OptionsStrike>?> strikes = default)
        {
            AssetIdBaseOption = assetIdBase;
            AssetIdQuoteOption = assetIdQuote;
            UnderlyingPriceOption = underlyingPrice;
            TimeExpirationOption = timeExpiration;
            StrikesOption = strikes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AssetIdBase
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssetIdBaseOption { get; private set; }

        /// <summary>
        /// The base asset identifier.
        /// </summary>
        /// <value>The base asset identifier.</value>
        [JsonPropertyName("asset_id_base")]
        public string? AssetIdBase { get { return this.AssetIdBaseOption; } set { this.AssetIdBaseOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssetIdQuote
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssetIdQuoteOption { get; private set; }

        /// <summary>
        /// The quote asset identifier.
        /// </summary>
        /// <value>The quote asset identifier.</value>
        [JsonPropertyName("asset_id_quote")]
        public string? AssetIdQuote { get { return this.AssetIdQuoteOption; } set { this.AssetIdQuoteOption = new(value); } }

        /// <summary>
        /// Used to track the state of UnderlyingPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> UnderlyingPriceOption { get; private set; }

        /// <summary>
        /// The underlying price of the option.
        /// </summary>
        /// <value>The underlying price of the option.</value>
        [JsonPropertyName("underlying_price")]
        public double? UnderlyingPrice { get { return this.UnderlyingPriceOption; } set { this.UnderlyingPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeExpiration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimeExpirationOption { get; private set; }

        /// <summary>
        /// The expiration time of the option.
        /// </summary>
        /// <value>The expiration time of the option.</value>
        [JsonPropertyName("time_expiration")]
        public DateTime? TimeExpiration { get { return this.TimeExpirationOption; } set { this.TimeExpirationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Strikes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<OptionsStrike>?> StrikesOption { get; private set; }

        /// <summary>
        /// The list of strikes available.
        /// </summary>
        /// <value>The list of strikes available.</value>
        [JsonPropertyName("strikes")]
        public List<OptionsStrike>? Strikes { get { return this.StrikesOption; } set { this.StrikesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptionsOptionExchangeGroup {\n");
            sb.Append("  AssetIdBase: ").Append(AssetIdBase).Append("\n");
            sb.Append("  AssetIdQuote: ").Append(AssetIdQuote).Append("\n");
            sb.Append("  UnderlyingPrice: ").Append(UnderlyingPrice).Append("\n");
            sb.Append("  TimeExpiration: ").Append(TimeExpiration).Append("\n");
            sb.Append("  Strikes: ").Append(Strikes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OptionsOptionExchangeGroup" />
    /// </summary>
    public class OptionsOptionExchangeGroupJsonConverter : JsonConverter<OptionsOptionExchangeGroup>
    {
        /// <summary>
        /// The format to use to serialize TimeExpiration
        /// </summary>
        public static string TimeExpirationFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="OptionsOptionExchangeGroup" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OptionsOptionExchangeGroup Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> assetIdBase = default;
            Option<string?> assetIdQuote = default;
            Option<double?> underlyingPrice = default;
            Option<DateTime?> timeExpiration = default;
            Option<List<OptionsStrike>?> strikes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "asset_id_base":
                            assetIdBase = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "asset_id_quote":
                            assetIdQuote = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "underlying_price":
                            underlyingPrice = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "time_expiration":
                            timeExpiration = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "strikes":
                            strikes = new Option<List<OptionsStrike>?>(JsonSerializer.Deserialize<List<OptionsStrike>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (timeExpiration.IsSet && timeExpiration.Value == null)
                throw new ArgumentNullException(nameof(timeExpiration), "Property is not nullable for class OptionsOptionExchangeGroup.");

            return new OptionsOptionExchangeGroup(assetIdBase, assetIdQuote, underlyingPrice, timeExpiration, strikes);
        }

        /// <summary>
        /// Serializes a <see cref="OptionsOptionExchangeGroup" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="optionsOptionExchangeGroup"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OptionsOptionExchangeGroup optionsOptionExchangeGroup, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, optionsOptionExchangeGroup, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OptionsOptionExchangeGroup" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="optionsOptionExchangeGroup"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OptionsOptionExchangeGroup optionsOptionExchangeGroup, JsonSerializerOptions jsonSerializerOptions)
        {
            if (optionsOptionExchangeGroup.AssetIdBaseOption.IsSet)
                if (optionsOptionExchangeGroup.AssetIdBaseOption.Value != null)
                    writer.WriteString("asset_id_base", optionsOptionExchangeGroup.AssetIdBase);
                else
                    writer.WriteNull("asset_id_base");

            if (optionsOptionExchangeGroup.AssetIdQuoteOption.IsSet)
                if (optionsOptionExchangeGroup.AssetIdQuoteOption.Value != null)
                    writer.WriteString("asset_id_quote", optionsOptionExchangeGroup.AssetIdQuote);
                else
                    writer.WriteNull("asset_id_quote");

            if (optionsOptionExchangeGroup.UnderlyingPriceOption.IsSet)
                if (optionsOptionExchangeGroup.UnderlyingPriceOption.Value != null)
                    writer.WriteNumber("underlying_price", optionsOptionExchangeGroup.UnderlyingPriceOption.Value!.Value);
                else
                    writer.WriteNull("underlying_price");

            if (optionsOptionExchangeGroup.TimeExpirationOption.IsSet)
                writer.WriteString("time_expiration", optionsOptionExchangeGroup.TimeExpirationOption.Value!.Value.ToString(TimeExpirationFormat));

            if (optionsOptionExchangeGroup.StrikesOption.IsSet)
                if (optionsOptionExchangeGroup.StrikesOption.Value != null)
                {
                    writer.WritePropertyName("strikes");
                    JsonSerializer.Serialize(writer, optionsOptionExchangeGroup.Strikes, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("strikes");
        }
    }
}
