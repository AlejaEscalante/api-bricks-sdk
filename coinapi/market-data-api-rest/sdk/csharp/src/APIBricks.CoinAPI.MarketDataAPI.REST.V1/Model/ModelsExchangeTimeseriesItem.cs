// <auto-generated>
/*
 * CoinAPI Market Data REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ClientUtils;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client;

namespace APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model
{
    /// <summary>
    /// Represents a timeseries item with price and volume information.
    /// </summary>
    public partial class ModelsExchangeTimeseriesItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsExchangeTimeseriesItem" /> class.
        /// </summary>
        /// <param name="timePeriodStart">The start time of the time period.</param>
        /// <param name="timePeriodEnd">The end time of the time period.</param>
        /// <param name="timeOpen">The time when the price opened.</param>
        /// <param name="timeClose">The time when the price closed.</param>
        /// <param name="priceOpen">The opening price.</param>
        /// <param name="priceHigh">The highest price during the time period.</param>
        /// <param name="priceLow">The lowest price during the time period.</param>
        /// <param name="priceClose">The closing price.</param>
        /// <param name="volumeTraded">The total volume traded during the time period.</param>
        /// <param name="tradesCount">The number of trades executed during the time period.</param>
        /// <param name="symbolIdExchange">symbolIdExchange</param>
        /// <param name="symbolIdCoinapi">symbolIdCoinapi</param>
        [JsonConstructor]
        public ModelsExchangeTimeseriesItem(Option<DateTime?> timePeriodStart = default, Option<DateTime?> timePeriodEnd = default, Option<DateTime?> timeOpen = default, Option<DateTime?> timeClose = default, Option<double?> priceOpen = default, Option<double?> priceHigh = default, Option<double?> priceLow = default, Option<double?> priceClose = default, Option<double?> volumeTraded = default, Option<long?> tradesCount = default, Option<string?> symbolIdExchange = default, Option<string?> symbolIdCoinapi = default)
        {
            TimePeriodStartOption = timePeriodStart;
            TimePeriodEndOption = timePeriodEnd;
            TimeOpenOption = timeOpen;
            TimeCloseOption = timeClose;
            PriceOpenOption = priceOpen;
            PriceHighOption = priceHigh;
            PriceLowOption = priceLow;
            PriceCloseOption = priceClose;
            VolumeTradedOption = volumeTraded;
            TradesCountOption = tradesCount;
            SymbolIdExchangeOption = symbolIdExchange;
            SymbolIdCoinapiOption = symbolIdCoinapi;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of TimePeriodStart
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimePeriodStartOption { get; private set; }

        /// <summary>
        /// The start time of the time period.
        /// </summary>
        /// <value>The start time of the time period.</value>
        [JsonPropertyName("time_period_start")]
        public DateTime? TimePeriodStart { get { return this.TimePeriodStartOption; } set { this.TimePeriodStartOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimePeriodEnd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimePeriodEndOption { get; private set; }

        /// <summary>
        /// The end time of the time period.
        /// </summary>
        /// <value>The end time of the time period.</value>
        [JsonPropertyName("time_period_end")]
        public DateTime? TimePeriodEnd { get { return this.TimePeriodEndOption; } set { this.TimePeriodEndOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeOpen
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimeOpenOption { get; private set; }

        /// <summary>
        /// The time when the price opened.
        /// </summary>
        /// <value>The time when the price opened.</value>
        [JsonPropertyName("time_open")]
        public DateTime? TimeOpen { get { return this.TimeOpenOption; } set { this.TimeOpenOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeClose
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimeCloseOption { get; private set; }

        /// <summary>
        /// The time when the price closed.
        /// </summary>
        /// <value>The time when the price closed.</value>
        [JsonPropertyName("time_close")]
        public DateTime? TimeClose { get { return this.TimeCloseOption; } set { this.TimeCloseOption = new(value); } }

        /// <summary>
        /// Used to track the state of PriceOpen
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> PriceOpenOption { get; private set; }

        /// <summary>
        /// The opening price.
        /// </summary>
        /// <value>The opening price.</value>
        [JsonPropertyName("price_open")]
        public double? PriceOpen { get { return this.PriceOpenOption; } set { this.PriceOpenOption = new(value); } }

        /// <summary>
        /// Used to track the state of PriceHigh
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> PriceHighOption { get; private set; }

        /// <summary>
        /// The highest price during the time period.
        /// </summary>
        /// <value>The highest price during the time period.</value>
        [JsonPropertyName("price_high")]
        public double? PriceHigh { get { return this.PriceHighOption; } set { this.PriceHighOption = new(value); } }

        /// <summary>
        /// Used to track the state of PriceLow
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> PriceLowOption { get; private set; }

        /// <summary>
        /// The lowest price during the time period.
        /// </summary>
        /// <value>The lowest price during the time period.</value>
        [JsonPropertyName("price_low")]
        public double? PriceLow { get { return this.PriceLowOption; } set { this.PriceLowOption = new(value); } }

        /// <summary>
        /// Used to track the state of PriceClose
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> PriceCloseOption { get; private set; }

        /// <summary>
        /// The closing price.
        /// </summary>
        /// <value>The closing price.</value>
        [JsonPropertyName("price_close")]
        public double? PriceClose { get { return this.PriceCloseOption; } set { this.PriceCloseOption = new(value); } }

        /// <summary>
        /// Used to track the state of VolumeTraded
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> VolumeTradedOption { get; private set; }

        /// <summary>
        /// The total volume traded during the time period.
        /// </summary>
        /// <value>The total volume traded during the time period.</value>
        [JsonPropertyName("volume_traded")]
        public double? VolumeTraded { get { return this.VolumeTradedOption; } set { this.VolumeTradedOption = new(value); } }

        /// <summary>
        /// Used to track the state of TradesCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TradesCountOption { get; private set; }

        /// <summary>
        /// The number of trades executed during the time period.
        /// </summary>
        /// <value>The number of trades executed during the time period.</value>
        [JsonPropertyName("trades_count")]
        public long? TradesCount { get { return this.TradesCountOption; } set { this.TradesCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of SymbolIdExchange
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SymbolIdExchangeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SymbolIdExchange
        /// </summary>
        [JsonPropertyName("symbol_id_exchange")]
        public string? SymbolIdExchange { get { return this.SymbolIdExchangeOption; } set { this.SymbolIdExchangeOption = new(value); } }

        /// <summary>
        /// Used to track the state of SymbolIdCoinapi
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SymbolIdCoinapiOption { get; private set; }

        /// <summary>
        /// Gets or Sets SymbolIdCoinapi
        /// </summary>
        [JsonPropertyName("symbol_id_coinapi")]
        public string? SymbolIdCoinapi { get { return this.SymbolIdCoinapiOption; } set { this.SymbolIdCoinapiOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelsExchangeTimeseriesItem {\n");
            sb.Append("  TimePeriodStart: ").Append(TimePeriodStart).Append("\n");
            sb.Append("  TimePeriodEnd: ").Append(TimePeriodEnd).Append("\n");
            sb.Append("  TimeOpen: ").Append(TimeOpen).Append("\n");
            sb.Append("  TimeClose: ").Append(TimeClose).Append("\n");
            sb.Append("  PriceOpen: ").Append(PriceOpen).Append("\n");
            sb.Append("  PriceHigh: ").Append(PriceHigh).Append("\n");
            sb.Append("  PriceLow: ").Append(PriceLow).Append("\n");
            sb.Append("  PriceClose: ").Append(PriceClose).Append("\n");
            sb.Append("  VolumeTraded: ").Append(VolumeTraded).Append("\n");
            sb.Append("  TradesCount: ").Append(TradesCount).Append("\n");
            sb.Append("  SymbolIdExchange: ").Append(SymbolIdExchange).Append("\n");
            sb.Append("  SymbolIdCoinapi: ").Append(SymbolIdCoinapi).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ModelsExchangeTimeseriesItem" />
    /// </summary>
    public class ModelsExchangeTimeseriesItemJsonConverter : JsonConverter<ModelsExchangeTimeseriesItem>
    {
        /// <summary>
        /// The format to use to serialize TimePeriodStart
        /// </summary>
        public static string TimePeriodStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize TimePeriodEnd
        /// </summary>
        public static string TimePeriodEndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize TimeOpen
        /// </summary>
        public static string TimeOpenFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize TimeClose
        /// </summary>
        public static string TimeCloseFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ModelsExchangeTimeseriesItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ModelsExchangeTimeseriesItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> timePeriodStart = default;
            Option<DateTime?> timePeriodEnd = default;
            Option<DateTime?> timeOpen = default;
            Option<DateTime?> timeClose = default;
            Option<double?> priceOpen = default;
            Option<double?> priceHigh = default;
            Option<double?> priceLow = default;
            Option<double?> priceClose = default;
            Option<double?> volumeTraded = default;
            Option<long?> tradesCount = default;
            Option<string?> symbolIdExchange = default;
            Option<string?> symbolIdCoinapi = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "time_period_start":
                            timePeriodStart = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "time_period_end":
                            timePeriodEnd = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "time_open":
                            timeOpen = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "time_close":
                            timeClose = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "price_open":
                            priceOpen = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "price_high":
                            priceHigh = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "price_low":
                            priceLow = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "price_close":
                            priceClose = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "volume_traded":
                            volumeTraded = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "trades_count":
                            tradesCount = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "symbol_id_exchange":
                            symbolIdExchange = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "symbol_id_coinapi":
                            symbolIdCoinapi = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (timePeriodStart.IsSet && timePeriodStart.Value == null)
                throw new ArgumentNullException(nameof(timePeriodStart), "Property is not nullable for class ModelsExchangeTimeseriesItem.");

            if (timePeriodEnd.IsSet && timePeriodEnd.Value == null)
                throw new ArgumentNullException(nameof(timePeriodEnd), "Property is not nullable for class ModelsExchangeTimeseriesItem.");

            if (volumeTraded.IsSet && volumeTraded.Value == null)
                throw new ArgumentNullException(nameof(volumeTraded), "Property is not nullable for class ModelsExchangeTimeseriesItem.");

            if (tradesCount.IsSet && tradesCount.Value == null)
                throw new ArgumentNullException(nameof(tradesCount), "Property is not nullable for class ModelsExchangeTimeseriesItem.");

            return new ModelsExchangeTimeseriesItem(timePeriodStart, timePeriodEnd, timeOpen, timeClose, priceOpen, priceHigh, priceLow, priceClose, volumeTraded, tradesCount, symbolIdExchange, symbolIdCoinapi);
        }

        /// <summary>
        /// Serializes a <see cref="ModelsExchangeTimeseriesItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modelsExchangeTimeseriesItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ModelsExchangeTimeseriesItem modelsExchangeTimeseriesItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, modelsExchangeTimeseriesItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ModelsExchangeTimeseriesItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modelsExchangeTimeseriesItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ModelsExchangeTimeseriesItem modelsExchangeTimeseriesItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (modelsExchangeTimeseriesItem.TimePeriodStartOption.IsSet)
                writer.WriteString("time_period_start", modelsExchangeTimeseriesItem.TimePeriodStartOption.Value!.Value.ToString(TimePeriodStartFormat));

            if (modelsExchangeTimeseriesItem.TimePeriodEndOption.IsSet)
                writer.WriteString("time_period_end", modelsExchangeTimeseriesItem.TimePeriodEndOption.Value!.Value.ToString(TimePeriodEndFormat));

            if (modelsExchangeTimeseriesItem.TimeOpenOption.IsSet)
                if (modelsExchangeTimeseriesItem.TimeOpenOption.Value != null)
                    writer.WriteString("time_open", modelsExchangeTimeseriesItem.TimeOpenOption.Value!.Value.ToString(TimeOpenFormat));
                else
                    writer.WriteNull("time_open");

            if (modelsExchangeTimeseriesItem.TimeCloseOption.IsSet)
                if (modelsExchangeTimeseriesItem.TimeCloseOption.Value != null)
                    writer.WriteString("time_close", modelsExchangeTimeseriesItem.TimeCloseOption.Value!.Value.ToString(TimeCloseFormat));
                else
                    writer.WriteNull("time_close");

            if (modelsExchangeTimeseriesItem.PriceOpenOption.IsSet)
                if (modelsExchangeTimeseriesItem.PriceOpenOption.Value != null)
                    writer.WriteNumber("price_open", modelsExchangeTimeseriesItem.PriceOpenOption.Value!.Value);
                else
                    writer.WriteNull("price_open");

            if (modelsExchangeTimeseriesItem.PriceHighOption.IsSet)
                if (modelsExchangeTimeseriesItem.PriceHighOption.Value != null)
                    writer.WriteNumber("price_high", modelsExchangeTimeseriesItem.PriceHighOption.Value!.Value);
                else
                    writer.WriteNull("price_high");

            if (modelsExchangeTimeseriesItem.PriceLowOption.IsSet)
                if (modelsExchangeTimeseriesItem.PriceLowOption.Value != null)
                    writer.WriteNumber("price_low", modelsExchangeTimeseriesItem.PriceLowOption.Value!.Value);
                else
                    writer.WriteNull("price_low");

            if (modelsExchangeTimeseriesItem.PriceCloseOption.IsSet)
                if (modelsExchangeTimeseriesItem.PriceCloseOption.Value != null)
                    writer.WriteNumber("price_close", modelsExchangeTimeseriesItem.PriceCloseOption.Value!.Value);
                else
                    writer.WriteNull("price_close");

            if (modelsExchangeTimeseriesItem.VolumeTradedOption.IsSet)
                writer.WriteNumber("volume_traded", modelsExchangeTimeseriesItem.VolumeTradedOption.Value!.Value);

            if (modelsExchangeTimeseriesItem.TradesCountOption.IsSet)
                writer.WriteNumber("trades_count", modelsExchangeTimeseriesItem.TradesCountOption.Value!.Value);

            if (modelsExchangeTimeseriesItem.SymbolIdExchangeOption.IsSet)
                if (modelsExchangeTimeseriesItem.SymbolIdExchangeOption.Value != null)
                    writer.WriteString("symbol_id_exchange", modelsExchangeTimeseriesItem.SymbolIdExchange);
                else
                    writer.WriteNull("symbol_id_exchange");

            if (modelsExchangeTimeseriesItem.SymbolIdCoinapiOption.IsSet)
                if (modelsExchangeTimeseriesItem.SymbolIdCoinapiOption.Value != null)
                    writer.WriteString("symbol_id_coinapi", modelsExchangeTimeseriesItem.SymbolIdCoinapi);
                else
                    writer.WriteNull("symbol_id_coinapi");
        }
    }
}
