// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ClientUtils;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client;

namespace APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model
{
    /// <summary>
    /// Represents an exchange.
    /// </summary>
    public partial class V1Exchange : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1Exchange" /> class.
        /// </summary>
        /// <param name="exchangeId">Gets or sets the exchange ID.</param>
        /// <param name="website">Gets or sets the website URL of the exchange.</param>
        /// <param name="name">Gets or sets the name of the exchange.</param>
        /// <param name="dataStart">dataStart</param>
        /// <param name="dataEnd">dataEnd</param>
        /// <param name="dataQuoteStart">Gets or sets the start date of quote data.</param>
        /// <param name="dataQuoteEnd">Gets or sets the end date of quote data.</param>
        /// <param name="dataOrderbookStart">Gets or sets the start date of order book data.</param>
        /// <param name="dataOrderbookEnd">Gets or sets the end date of order book data.</param>
        /// <param name="dataTradeStart">Gets or sets the start date of trade data.</param>
        /// <param name="dataTradeEnd">Gets or sets the end date of trade data.</param>
        /// <param name="dataTradeCount">Gets or sets the number of trades.</param>
        /// <param name="dataSymbolsCount">Gets or sets the number of symbols.</param>
        /// <param name="volume1hrsUsd">Gets or sets the USD volume in the last 1 hour.</param>
        /// <param name="volume1dayUsd">Gets or sets the USD volume in the last 1 day.</param>
        /// <param name="volume1mthUsd">Gets or sets the USD volume in the last 1 month.</param>
        /// <param name="metricId">Gets or sets the list of metric IDs.</param>
        /// <param name="icons">Gets or sets the list of icons for the exchange.</param>
        /// <param name="rank">Rank of the exchange.</param>
        /// <param name="integrationStatus">Status of the integration</param>
        [JsonConstructor]
        public V1Exchange(Option<string?> exchangeId = default, Option<string?> website = default, Option<string?> name = default, Option<string?> dataStart = default, Option<string?> dataEnd = default, Option<DateTime?> dataQuoteStart = default, Option<DateTime?> dataQuoteEnd = default, Option<DateTime?> dataOrderbookStart = default, Option<DateTime?> dataOrderbookEnd = default, Option<DateTime?> dataTradeStart = default, Option<DateTime?> dataTradeEnd = default, Option<long?> dataTradeCount = default, Option<long?> dataSymbolsCount = default, Option<double?> volume1hrsUsd = default, Option<double?> volume1dayUsd = default, Option<double?> volume1mthUsd = default, Option<List<string>?> metricId = default, Option<List<V1Icon>?> icons = default, Option<double?> rank = default, Option<string?> integrationStatus = default)
        {
            ExchangeIdOption = exchangeId;
            WebsiteOption = website;
            NameOption = name;
            DataStartOption = dataStart;
            DataEndOption = dataEnd;
            DataQuoteStartOption = dataQuoteStart;
            DataQuoteEndOption = dataQuoteEnd;
            DataOrderbookStartOption = dataOrderbookStart;
            DataOrderbookEndOption = dataOrderbookEnd;
            DataTradeStartOption = dataTradeStart;
            DataTradeEndOption = dataTradeEnd;
            DataTradeCountOption = dataTradeCount;
            DataSymbolsCountOption = dataSymbolsCount;
            Volume1hrsUsdOption = volume1hrsUsd;
            Volume1dayUsdOption = volume1dayUsd;
            Volume1mthUsdOption = volume1mthUsd;
            MetricIdOption = metricId;
            IconsOption = icons;
            RankOption = rank;
            IntegrationStatusOption = integrationStatus;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ExchangeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExchangeIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the exchange ID.
        /// </summary>
        /// <value>Gets or sets the exchange ID.</value>
        [JsonPropertyName("exchange_id")]
        public string? ExchangeId { get { return this.ExchangeIdOption; } set { this.ExchangeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Website
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebsiteOption { get; private set; }

        /// <summary>
        /// Gets or sets the website URL of the exchange.
        /// </summary>
        /// <value>Gets or sets the website URL of the exchange.</value>
        [JsonPropertyName("website")]
        public string? Website { get { return this.WebsiteOption; } set { this.WebsiteOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or sets the name of the exchange.
        /// </summary>
        /// <value>Gets or sets the name of the exchange.</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataStart
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DataStartOption { get; }

        /// <summary>
        /// Gets or Sets DataStart
        /// </summary>
        [JsonPropertyName("data_start")]
        public string? DataStart { get { return this.DataStartOption; } }

        /// <summary>
        /// Used to track the state of DataEnd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DataEndOption { get; }

        /// <summary>
        /// Gets or Sets DataEnd
        /// </summary>
        [JsonPropertyName("data_end")]
        public string? DataEnd { get { return this.DataEndOption; } }

        /// <summary>
        /// Used to track the state of DataQuoteStart
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataQuoteStartOption { get; private set; }

        /// <summary>
        /// Gets or sets the start date of quote data.
        /// </summary>
        /// <value>Gets or sets the start date of quote data.</value>
        [JsonPropertyName("data_quote_start")]
        public DateTime? DataQuoteStart { get { return this.DataQuoteStartOption; } set { this.DataQuoteStartOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataQuoteEnd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataQuoteEndOption { get; private set; }

        /// <summary>
        /// Gets or sets the end date of quote data.
        /// </summary>
        /// <value>Gets or sets the end date of quote data.</value>
        [JsonPropertyName("data_quote_end")]
        public DateTime? DataQuoteEnd { get { return this.DataQuoteEndOption; } set { this.DataQuoteEndOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataOrderbookStart
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataOrderbookStartOption { get; private set; }

        /// <summary>
        /// Gets or sets the start date of order book data.
        /// </summary>
        /// <value>Gets or sets the start date of order book data.</value>
        [JsonPropertyName("data_orderbook_start")]
        public DateTime? DataOrderbookStart { get { return this.DataOrderbookStartOption; } set { this.DataOrderbookStartOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataOrderbookEnd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataOrderbookEndOption { get; private set; }

        /// <summary>
        /// Gets or sets the end date of order book data.
        /// </summary>
        /// <value>Gets or sets the end date of order book data.</value>
        [JsonPropertyName("data_orderbook_end")]
        public DateTime? DataOrderbookEnd { get { return this.DataOrderbookEndOption; } set { this.DataOrderbookEndOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataTradeStart
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataTradeStartOption { get; private set; }

        /// <summary>
        /// Gets or sets the start date of trade data.
        /// </summary>
        /// <value>Gets or sets the start date of trade data.</value>
        [JsonPropertyName("data_trade_start")]
        public DateTime? DataTradeStart { get { return this.DataTradeStartOption; } set { this.DataTradeStartOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataTradeEnd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DataTradeEndOption { get; private set; }

        /// <summary>
        /// Gets or sets the end date of trade data.
        /// </summary>
        /// <value>Gets or sets the end date of trade data.</value>
        [JsonPropertyName("data_trade_end")]
        public DateTime? DataTradeEnd { get { return this.DataTradeEndOption; } set { this.DataTradeEndOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataTradeCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DataTradeCountOption { get; private set; }

        /// <summary>
        /// Gets or sets the number of trades.
        /// </summary>
        /// <value>Gets or sets the number of trades.</value>
        [JsonPropertyName("data_trade_count")]
        public long? DataTradeCount { get { return this.DataTradeCountOption; } set { this.DataTradeCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataSymbolsCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DataSymbolsCountOption { get; private set; }

        /// <summary>
        /// Gets or sets the number of symbols.
        /// </summary>
        /// <value>Gets or sets the number of symbols.</value>
        [JsonPropertyName("data_symbols_count")]
        public long? DataSymbolsCount { get { return this.DataSymbolsCountOption; } set { this.DataSymbolsCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Volume1hrsUsd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> Volume1hrsUsdOption { get; private set; }

        /// <summary>
        /// Gets or sets the USD volume in the last 1 hour.
        /// </summary>
        /// <value>Gets or sets the USD volume in the last 1 hour.</value>
        [JsonPropertyName("volume_1hrs_usd")]
        public double? Volume1hrsUsd { get { return this.Volume1hrsUsdOption; } set { this.Volume1hrsUsdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Volume1dayUsd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> Volume1dayUsdOption { get; private set; }

        /// <summary>
        /// Gets or sets the USD volume in the last 1 day.
        /// </summary>
        /// <value>Gets or sets the USD volume in the last 1 day.</value>
        [JsonPropertyName("volume_1day_usd")]
        public double? Volume1dayUsd { get { return this.Volume1dayUsdOption; } set { this.Volume1dayUsdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Volume1mthUsd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> Volume1mthUsdOption { get; private set; }

        /// <summary>
        /// Gets or sets the USD volume in the last 1 month.
        /// </summary>
        /// <value>Gets or sets the USD volume in the last 1 month.</value>
        [JsonPropertyName("volume_1mth_usd")]
        public double? Volume1mthUsd { get { return this.Volume1mthUsdOption; } set { this.Volume1mthUsdOption = new(value); } }

        /// <summary>
        /// Used to track the state of MetricId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> MetricIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the list of metric IDs.
        /// </summary>
        /// <value>Gets or sets the list of metric IDs.</value>
        [JsonPropertyName("metric_id")]
        public List<string>? MetricId { get { return this.MetricIdOption; } set { this.MetricIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Icons
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<V1Icon>?> IconsOption { get; }

        /// <summary>
        /// Gets or sets the list of icons for the exchange.
        /// </summary>
        /// <value>Gets or sets the list of icons for the exchange.</value>
        [JsonPropertyName("icons")]
        public List<V1Icon>? Icons { get { return this.IconsOption; } }

        /// <summary>
        /// Used to track the state of Rank
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> RankOption { get; private set; }

        /// <summary>
        /// Rank of the exchange.
        /// </summary>
        /// <value>Rank of the exchange.</value>
        [JsonPropertyName("rank")]
        public double? Rank { get { return this.RankOption; } set { this.RankOption = new(value); } }

        /// <summary>
        /// Used to track the state of IntegrationStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IntegrationStatusOption { get; private set; }

        /// <summary>
        /// Status of the integration
        /// </summary>
        /// <value>Status of the integration</value>
        [JsonPropertyName("integration_status")]
        public string? IntegrationStatus { get { return this.IntegrationStatusOption; } set { this.IntegrationStatusOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V1Exchange {\n");
            sb.Append("  ExchangeId: ").Append(ExchangeId).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DataStart: ").Append(DataStart).Append("\n");
            sb.Append("  DataEnd: ").Append(DataEnd).Append("\n");
            sb.Append("  DataQuoteStart: ").Append(DataQuoteStart).Append("\n");
            sb.Append("  DataQuoteEnd: ").Append(DataQuoteEnd).Append("\n");
            sb.Append("  DataOrderbookStart: ").Append(DataOrderbookStart).Append("\n");
            sb.Append("  DataOrderbookEnd: ").Append(DataOrderbookEnd).Append("\n");
            sb.Append("  DataTradeStart: ").Append(DataTradeStart).Append("\n");
            sb.Append("  DataTradeEnd: ").Append(DataTradeEnd).Append("\n");
            sb.Append("  DataTradeCount: ").Append(DataTradeCount).Append("\n");
            sb.Append("  DataSymbolsCount: ").Append(DataSymbolsCount).Append("\n");
            sb.Append("  Volume1hrsUsd: ").Append(Volume1hrsUsd).Append("\n");
            sb.Append("  Volume1dayUsd: ").Append(Volume1dayUsd).Append("\n");
            sb.Append("  Volume1mthUsd: ").Append(Volume1mthUsd).Append("\n");
            sb.Append("  MetricId: ").Append(MetricId).Append("\n");
            sb.Append("  Icons: ").Append(Icons).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  IntegrationStatus: ").Append(IntegrationStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="V1Exchange" />
    /// </summary>
    public class V1ExchangeJsonConverter : JsonConverter<V1Exchange>
    {
        /// <summary>
        /// The format to use to serialize DataQuoteStart
        /// </summary>
        public static string DataQuoteStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DataQuoteEnd
        /// </summary>
        public static string DataQuoteEndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DataOrderbookStart
        /// </summary>
        public static string DataOrderbookStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DataOrderbookEnd
        /// </summary>
        public static string DataOrderbookEndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DataTradeStart
        /// </summary>
        public static string DataTradeStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DataTradeEnd
        /// </summary>
        public static string DataTradeEndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="V1Exchange" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override V1Exchange Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> exchangeId = default;
            Option<string?> website = default;
            Option<string?> name = default;
            Option<string?> dataStart = default;
            Option<string?> dataEnd = default;
            Option<DateTime?> dataQuoteStart = default;
            Option<DateTime?> dataQuoteEnd = default;
            Option<DateTime?> dataOrderbookStart = default;
            Option<DateTime?> dataOrderbookEnd = default;
            Option<DateTime?> dataTradeStart = default;
            Option<DateTime?> dataTradeEnd = default;
            Option<long?> dataTradeCount = default;
            Option<long?> dataSymbolsCount = default;
            Option<double?> volume1hrsUsd = default;
            Option<double?> volume1dayUsd = default;
            Option<double?> volume1mthUsd = default;
            Option<List<string>?> metricId = default;
            Option<List<V1Icon>?> icons = default;
            Option<double?> rank = default;
            Option<string?> integrationStatus = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "exchange_id":
                            exchangeId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "website":
                            website = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "data_start":
                            dataStart = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "data_end":
                            dataEnd = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "data_quote_start":
                            dataQuoteStart = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "data_quote_end":
                            dataQuoteEnd = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "data_orderbook_start":
                            dataOrderbookStart = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "data_orderbook_end":
                            dataOrderbookEnd = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "data_trade_start":
                            dataTradeStart = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "data_trade_end":
                            dataTradeEnd = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "data_trade_count":
                            dataTradeCount = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "data_symbols_count":
                            dataSymbolsCount = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "volume_1hrs_usd":
                            volume1hrsUsd = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "volume_1day_usd":
                            volume1dayUsd = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "volume_1mth_usd":
                            volume1mthUsd = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "metric_id":
                            metricId = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "icons":
                            icons = new Option<List<V1Icon>?>(JsonSerializer.Deserialize<List<V1Icon>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "rank":
                            rank = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "integration_status":
                            integrationStatus = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (rank.IsSet && rank.Value == null)
                throw new ArgumentNullException(nameof(rank), "Property is not nullable for class V1Exchange.");

            return new V1Exchange(exchangeId, website, name, dataStart, dataEnd, dataQuoteStart, dataQuoteEnd, dataOrderbookStart, dataOrderbookEnd, dataTradeStart, dataTradeEnd, dataTradeCount, dataSymbolsCount, volume1hrsUsd, volume1dayUsd, volume1mthUsd, metricId, icons, rank, integrationStatus);
        }

        /// <summary>
        /// Serializes a <see cref="V1Exchange" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1Exchange"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, V1Exchange v1Exchange, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, v1Exchange, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="V1Exchange" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1Exchange"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, V1Exchange v1Exchange, JsonSerializerOptions jsonSerializerOptions)
        {
            if (v1Exchange.ExchangeIdOption.IsSet)
                if (v1Exchange.ExchangeIdOption.Value != null)
                    writer.WriteString("exchange_id", v1Exchange.ExchangeId);
                else
                    writer.WriteNull("exchange_id");

            if (v1Exchange.WebsiteOption.IsSet)
                if (v1Exchange.WebsiteOption.Value != null)
                    writer.WriteString("website", v1Exchange.Website);
                else
                    writer.WriteNull("website");

            if (v1Exchange.NameOption.IsSet)
                if (v1Exchange.NameOption.Value != null)
                    writer.WriteString("name", v1Exchange.Name);
                else
                    writer.WriteNull("name");

            if (v1Exchange.DataStartOption.IsSet)
                if (v1Exchange.DataStartOption.Value != null)
                    writer.WriteString("data_start", v1Exchange.DataStart);
                else
                    writer.WriteNull("data_start");

            if (v1Exchange.DataEndOption.IsSet)
                if (v1Exchange.DataEndOption.Value != null)
                    writer.WriteString("data_end", v1Exchange.DataEnd);
                else
                    writer.WriteNull("data_end");

            if (v1Exchange.DataQuoteStartOption.IsSet)
                if (v1Exchange.DataQuoteStartOption.Value != null)
                    writer.WriteString("data_quote_start", v1Exchange.DataQuoteStartOption.Value!.Value.ToString(DataQuoteStartFormat));
                else
                    writer.WriteNull("data_quote_start");

            if (v1Exchange.DataQuoteEndOption.IsSet)
                if (v1Exchange.DataQuoteEndOption.Value != null)
                    writer.WriteString("data_quote_end", v1Exchange.DataQuoteEndOption.Value!.Value.ToString(DataQuoteEndFormat));
                else
                    writer.WriteNull("data_quote_end");

            if (v1Exchange.DataOrderbookStartOption.IsSet)
                if (v1Exchange.DataOrderbookStartOption.Value != null)
                    writer.WriteString("data_orderbook_start", v1Exchange.DataOrderbookStartOption.Value!.Value.ToString(DataOrderbookStartFormat));
                else
                    writer.WriteNull("data_orderbook_start");

            if (v1Exchange.DataOrderbookEndOption.IsSet)
                if (v1Exchange.DataOrderbookEndOption.Value != null)
                    writer.WriteString("data_orderbook_end", v1Exchange.DataOrderbookEndOption.Value!.Value.ToString(DataOrderbookEndFormat));
                else
                    writer.WriteNull("data_orderbook_end");

            if (v1Exchange.DataTradeStartOption.IsSet)
                if (v1Exchange.DataTradeStartOption.Value != null)
                    writer.WriteString("data_trade_start", v1Exchange.DataTradeStartOption.Value!.Value.ToString(DataTradeStartFormat));
                else
                    writer.WriteNull("data_trade_start");

            if (v1Exchange.DataTradeEndOption.IsSet)
                if (v1Exchange.DataTradeEndOption.Value != null)
                    writer.WriteString("data_trade_end", v1Exchange.DataTradeEndOption.Value!.Value.ToString(DataTradeEndFormat));
                else
                    writer.WriteNull("data_trade_end");

            if (v1Exchange.DataTradeCountOption.IsSet)
                if (v1Exchange.DataTradeCountOption.Value != null)
                    writer.WriteNumber("data_trade_count", v1Exchange.DataTradeCountOption.Value!.Value);
                else
                    writer.WriteNull("data_trade_count");

            if (v1Exchange.DataSymbolsCountOption.IsSet)
                if (v1Exchange.DataSymbolsCountOption.Value != null)
                    writer.WriteNumber("data_symbols_count", v1Exchange.DataSymbolsCountOption.Value!.Value);
                else
                    writer.WriteNull("data_symbols_count");

            if (v1Exchange.Volume1hrsUsdOption.IsSet)
                if (v1Exchange.Volume1hrsUsdOption.Value != null)
                    writer.WriteNumber("volume_1hrs_usd", v1Exchange.Volume1hrsUsdOption.Value!.Value);
                else
                    writer.WriteNull("volume_1hrs_usd");

            if (v1Exchange.Volume1dayUsdOption.IsSet)
                if (v1Exchange.Volume1dayUsdOption.Value != null)
                    writer.WriteNumber("volume_1day_usd", v1Exchange.Volume1dayUsdOption.Value!.Value);
                else
                    writer.WriteNull("volume_1day_usd");

            if (v1Exchange.Volume1mthUsdOption.IsSet)
                if (v1Exchange.Volume1mthUsdOption.Value != null)
                    writer.WriteNumber("volume_1mth_usd", v1Exchange.Volume1mthUsdOption.Value!.Value);
                else
                    writer.WriteNull("volume_1mth_usd");

            if (v1Exchange.MetricIdOption.IsSet)
                if (v1Exchange.MetricIdOption.Value != null)
                {
                    writer.WritePropertyName("metric_id");
                    JsonSerializer.Serialize(writer, v1Exchange.MetricId, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("metric_id");
            if (v1Exchange.IconsOption.IsSet)
                if (v1Exchange.IconsOption.Value != null)
                {
                    writer.WritePropertyName("icons");
                    JsonSerializer.Serialize(writer, v1Exchange.Icons, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("icons");
            if (v1Exchange.RankOption.IsSet)
                writer.WriteNumber("rank", v1Exchange.RankOption.Value!.Value);

            if (v1Exchange.IntegrationStatusOption.IsSet)
                if (v1Exchange.IntegrationStatusOption.Value != null)
                    writer.WriteString("integration_status", v1Exchange.IntegrationStatus);
                else
                    writer.WriteNull("integration_status");
        }
    }
}
