// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client.ClientUtils;
using APIBricks.CoinAPI.MarketDataAPI.REST.V1.Client;

namespace APIBricks.CoinAPI.MarketDataAPI.REST.V1.Model
{
    /// <summary>
    /// Class representation of general metric data. This class is an XML type with name &#39;general_data&#39; and inherits from the BaseCsvModel class.
    /// </summary>
    public partial class V1GeneralData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1GeneralData" /> class.
        /// </summary>
        /// <param name="entryTime">Gets or sets the entry time for the data point.</param>
        /// <param name="recvTime">Gets or sets the received time for the data point.</param>
        /// <param name="exchangeId">Gets or sets the identifier for the exchange.</param>
        /// <param name="assetId">Gets or sets the identifier for the asset.</param>
        /// <param name="symbolId">Gets or sets the identifier for the symbol.</param>
        /// <param name="metricId">Gets or sets the identifier for the metric.</param>
        /// <param name="valueDecimal">Gets or sets the decimal value for the metric.</param>
        /// <param name="valueText">Gets or sets the textual representation of the value for the metric.</param>
        /// <param name="valueTime">Gets or sets the timestamp value for the metric.</param>
        [JsonConstructor]
        public V1GeneralData(Option<DateTime?> entryTime = default, Option<DateTime?> recvTime = default, Option<string?> exchangeId = default, Option<string?> assetId = default, Option<string?> symbolId = default, Option<string?> metricId = default, Option<double?> valueDecimal = default, Option<string?> valueText = default, Option<DateTime?> valueTime = default)
        {
            EntryTimeOption = entryTime;
            RecvTimeOption = recvTime;
            ExchangeIdOption = exchangeId;
            AssetIdOption = assetId;
            SymbolIdOption = symbolId;
            MetricIdOption = metricId;
            ValueDecimalOption = valueDecimal;
            ValueTextOption = valueText;
            ValueTimeOption = valueTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of EntryTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> EntryTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the entry time for the data point.
        /// </summary>
        /// <value>Gets or sets the entry time for the data point.</value>
        [JsonPropertyName("entry_time")]
        public DateTime? EntryTime { get { return this.EntryTimeOption; } set { this.EntryTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecvTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> RecvTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the received time for the data point.
        /// </summary>
        /// <value>Gets or sets the received time for the data point.</value>
        [JsonPropertyName("recv_time")]
        public DateTime? RecvTime { get { return this.RecvTimeOption; } set { this.RecvTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExchangeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExchangeIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the identifier for the exchange.
        /// </summary>
        /// <value>Gets or sets the identifier for the exchange.</value>
        [JsonPropertyName("exchange_id")]
        public string? ExchangeId { get { return this.ExchangeIdOption; } set { this.ExchangeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AssetIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the identifier for the asset.
        /// </summary>
        /// <value>Gets or sets the identifier for the asset.</value>
        [JsonPropertyName("asset_id")]
        public string? AssetId { get { return this.AssetIdOption; } set { this.AssetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SymbolId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SymbolIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the identifier for the symbol.
        /// </summary>
        /// <value>Gets or sets the identifier for the symbol.</value>
        [JsonPropertyName("symbol_id")]
        public string? SymbolId { get { return this.SymbolIdOption; } set { this.SymbolIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of MetricId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MetricIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the identifier for the metric.
        /// </summary>
        /// <value>Gets or sets the identifier for the metric.</value>
        [JsonPropertyName("metric_id")]
        public string? MetricId { get { return this.MetricIdOption; } set { this.MetricIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValueDecimal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ValueDecimalOption { get; private set; }

        /// <summary>
        /// Gets or sets the decimal value for the metric.
        /// </summary>
        /// <value>Gets or sets the decimal value for the metric.</value>
        [JsonPropertyName("value_decimal")]
        public double? ValueDecimal { get { return this.ValueDecimalOption; } set { this.ValueDecimalOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValueText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValueTextOption { get; private set; }

        /// <summary>
        /// Gets or sets the textual representation of the value for the metric.
        /// </summary>
        /// <value>Gets or sets the textual representation of the value for the metric.</value>
        [JsonPropertyName("value_text")]
        public string? ValueText { get { return this.ValueTextOption; } set { this.ValueTextOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValueTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ValueTimeOption { get; private set; }

        /// <summary>
        /// Gets or sets the timestamp value for the metric.
        /// </summary>
        /// <value>Gets or sets the timestamp value for the metric.</value>
        [JsonPropertyName("value_time")]
        public DateTime? ValueTime { get { return this.ValueTimeOption; } set { this.ValueTimeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V1GeneralData {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  ExchangeId: ").Append(ExchangeId).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  SymbolId: ").Append(SymbolId).Append("\n");
            sb.Append("  MetricId: ").Append(MetricId).Append("\n");
            sb.Append("  ValueDecimal: ").Append(ValueDecimal).Append("\n");
            sb.Append("  ValueText: ").Append(ValueText).Append("\n");
            sb.Append("  ValueTime: ").Append(ValueTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="V1GeneralData" />
    /// </summary>
    public class V1GeneralDataJsonConverter : JsonConverter<V1GeneralData>
    {
        /// <summary>
        /// The format to use to serialize EntryTime
        /// </summary>
        public static string EntryTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize RecvTime
        /// </summary>
        public static string RecvTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ValueTime
        /// </summary>
        public static string ValueTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="V1GeneralData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override V1GeneralData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> entryTime = default;
            Option<DateTime?> recvTime = default;
            Option<string?> exchangeId = default;
            Option<string?> assetId = default;
            Option<string?> symbolId = default;
            Option<string?> metricId = default;
            Option<double?> valueDecimal = default;
            Option<string?> valueText = default;
            Option<DateTime?> valueTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "entry_time":
                            entryTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "recv_time":
                            recvTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "exchange_id":
                            exchangeId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "asset_id":
                            assetId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "symbol_id":
                            symbolId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "metric_id":
                            metricId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "value_decimal":
                            valueDecimal = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "value_text":
                            valueText = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "value_time":
                            valueTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (entryTime.IsSet && entryTime.Value == null)
                throw new ArgumentNullException(nameof(entryTime), "Property is not nullable for class V1GeneralData.");

            if (recvTime.IsSet && recvTime.Value == null)
                throw new ArgumentNullException(nameof(recvTime), "Property is not nullable for class V1GeneralData.");

            return new V1GeneralData(entryTime, recvTime, exchangeId, assetId, symbolId, metricId, valueDecimal, valueText, valueTime);
        }

        /// <summary>
        /// Serializes a <see cref="V1GeneralData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1GeneralData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, V1GeneralData v1GeneralData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, v1GeneralData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="V1GeneralData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="v1GeneralData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, V1GeneralData v1GeneralData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (v1GeneralData.EntryTimeOption.IsSet)
                writer.WriteString("entry_time", v1GeneralData.EntryTimeOption.Value!.Value.ToString(EntryTimeFormat));

            if (v1GeneralData.RecvTimeOption.IsSet)
                writer.WriteString("recv_time", v1GeneralData.RecvTimeOption.Value!.Value.ToString(RecvTimeFormat));

            if (v1GeneralData.ExchangeIdOption.IsSet)
                if (v1GeneralData.ExchangeIdOption.Value != null)
                    writer.WriteString("exchange_id", v1GeneralData.ExchangeId);
                else
                    writer.WriteNull("exchange_id");

            if (v1GeneralData.AssetIdOption.IsSet)
                if (v1GeneralData.AssetIdOption.Value != null)
                    writer.WriteString("asset_id", v1GeneralData.AssetId);
                else
                    writer.WriteNull("asset_id");

            if (v1GeneralData.SymbolIdOption.IsSet)
                if (v1GeneralData.SymbolIdOption.Value != null)
                    writer.WriteString("symbol_id", v1GeneralData.SymbolId);
                else
                    writer.WriteNull("symbol_id");

            if (v1GeneralData.MetricIdOption.IsSet)
                if (v1GeneralData.MetricIdOption.Value != null)
                    writer.WriteString("metric_id", v1GeneralData.MetricId);
                else
                    writer.WriteNull("metric_id");

            if (v1GeneralData.ValueDecimalOption.IsSet)
                if (v1GeneralData.ValueDecimalOption.Value != null)
                    writer.WriteNumber("value_decimal", v1GeneralData.ValueDecimalOption.Value!.Value);
                else
                    writer.WriteNull("value_decimal");

            if (v1GeneralData.ValueTextOption.IsSet)
                if (v1GeneralData.ValueTextOption.Value != null)
                    writer.WriteString("value_text", v1GeneralData.ValueText);
                else
                    writer.WriteNull("value_text");

            if (v1GeneralData.ValueTimeOption.IsSet)
                if (v1GeneralData.ValueTimeOption.Value != null)
                    writer.WriteString("value_time", v1GeneralData.ValueTimeOption.Value!.Value.ToString(ValueTimeFormat));
                else
                    writer.WriteNull("value_time");
        }
    }
}
