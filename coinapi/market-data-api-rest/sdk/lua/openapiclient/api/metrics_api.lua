--[[
  CoinAPI Market Data REST API

  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

  The version of the OpenAPI document: v1
  Contact: support@apibricks.io
  Generated by: https://openapi-generator.tech
]]

--package openapiclient

local http_request = require "http.request"
local http_util = require "http.util"
local dkjson = require "dkjson"
local basexx = require "basexx"

-- model import
local openapiclient_v1_general_data = require "openapiclient.model.v1_general_data"
local openapiclient_v1_listing_item = require "openapiclient.model.v1_listing_item"
local openapiclient_v1_metric = require "openapiclient.model.v1_metric"
local openapiclient_v1_metric_data = require "openapiclient.model.v1_metric_data"

local metrics_api = {}
local metrics_api_mt = {
	__name = "metrics_api";
	__index = metrics_api;
}

local function new_metrics_api(authority, basePath, schemes)
	local schemes_map = {}
	for _,v in ipairs(schemes) do
		schemes_map[v] = v
	end
	local default_scheme = schemes_map.https or schemes_map.http
	local host, port = http_util.split_authority(authority, default_scheme)
	return setmetatable({
		host = host;
		port = port;
		basePath = basePath or "https://rest.coinapi.io";
		schemes = schemes_map;
		default_scheme = default_scheme;
		http_username = nil;
		http_password = nil;
		api_key = {};
		access_token = nil;
	}, metrics_api_mt)
end

function metrics_api:v1_metrics_asset_current_get(metric_id, asset_id, asset_id_external, exchange_id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/v1/metrics/asset/current?metric_id=%s&asset_id=%s&asset_id_external=%s&exchange_id=%s",
			self.basePath, http_util.encodeURIComponent(metric_id), http_util.encodeURIComponent(asset_id), http_util.encodeURIComponent(asset_id_external), http_util.encodeURIComponent(exchange_id));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "text/plain", "application/json", "text/json", "application/x-msgpack" }
	req.headers:upsert("content-type", "text/plain")

	-- api key in headers 'Authorization'
	if self.api_key['Authorization'] then
		req.headers:upsert("APIKey", self.api_key['Authorization'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		for _, ob in ipairs(result) do
			openapiclient_v1_general_data.cast(ob)
		end
		return result, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function metrics_api:v1_metrics_asset_history_get(metric_id, exchange_id, asset_id, asset_id_external, time_start, time_end, time_format, period_id, limit)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/v1/metrics/asset/history?metric_id=%s&asset_id=%s&asset_id_external=%s&exchange_id=%s&time_start=%s&time_end=%s&time_format=%s&period_id=%s&limit=%s",
			self.basePath, http_util.encodeURIComponent(metric_id), http_util.encodeURIComponent(asset_id), http_util.encodeURIComponent(asset_id_external), http_util.encodeURIComponent(exchange_id), http_util.encodeURIComponent(time_start), http_util.encodeURIComponent(time_end), http_util.encodeURIComponent(time_format), http_util.encodeURIComponent(period_id), http_util.encodeURIComponent(limit));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "text/plain", "application/json", "text/json", "application/x-msgpack" }
	req.headers:upsert("content-type", "text/plain")

	-- api key in headers 'Authorization'
	if self.api_key['Authorization'] then
		req.headers:upsert("APIKey", self.api_key['Authorization'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		for _, ob in ipairs(result) do
			openapiclient_v1_metric_data.cast(ob)
		end
		return result, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function metrics_api:v1_metrics_asset_listing_get(metric_id, exchange_id, chain_id, network_id, asset_id, asset_id_external)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/v1/metrics/asset/listing?metric_id=%s&exchange_id=%s&chain_id=%s&network_id=%s&asset_id=%s&asset_id_external=%s",
			self.basePath, http_util.encodeURIComponent(metric_id), http_util.encodeURIComponent(exchange_id), http_util.encodeURIComponent(chain_id), http_util.encodeURIComponent(network_id), http_util.encodeURIComponent(asset_id), http_util.encodeURIComponent(asset_id_external));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "text/plain", "application/json", "text/json", "application/x-msgpack" }
	req.headers:upsert("content-type", "text/plain")

	-- api key in headers 'Authorization'
	if self.api_key['Authorization'] then
		req.headers:upsert("APIKey", self.api_key['Authorization'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		for _, ob in ipairs(result) do
			openapiclient_v1_listing_item.cast(ob)
		end
		return result, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function metrics_api:v1_metrics_exchange_current_get(exchange_id, metric_id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/v1/metrics/exchange/current?metric_id=%s&exchange_id=%s",
			self.basePath, http_util.encodeURIComponent(metric_id), http_util.encodeURIComponent(exchange_id));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "text/plain", "application/json", "text/json", "application/x-msgpack" }
	req.headers:upsert("content-type", "text/plain")

	-- api key in headers 'Authorization'
	if self.api_key['Authorization'] then
		req.headers:upsert("APIKey", self.api_key['Authorization'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		for _, ob in ipairs(result) do
			openapiclient_v1_general_data.cast(ob)
		end
		return result, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function metrics_api:v1_metrics_exchange_history_get(metric_id, exchange_id, time_start, time_end, time_format, period_id, limit)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/v1/metrics/exchange/history?metric_id=%s&exchange_id=%s&time_start=%s&time_end=%s&time_format=%s&period_id=%s&limit=%s",
			self.basePath, http_util.encodeURIComponent(metric_id), http_util.encodeURIComponent(exchange_id), http_util.encodeURIComponent(time_start), http_util.encodeURIComponent(time_end), http_util.encodeURIComponent(time_format), http_util.encodeURIComponent(period_id), http_util.encodeURIComponent(limit));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "text/plain", "application/json", "text/json", "application/x-msgpack" }
	req.headers:upsert("content-type", "text/plain")

	-- api key in headers 'Authorization'
	if self.api_key['Authorization'] then
		req.headers:upsert("APIKey", self.api_key['Authorization'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		for _, ob in ipairs(result) do
			openapiclient_v1_metric_data.cast(ob)
		end
		return result, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function metrics_api:v1_metrics_exchange_listing_get(exchange_id, metric_id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/v1/metrics/exchange/listing?metric_id=%s&exchange_id=%s",
			self.basePath, http_util.encodeURIComponent(metric_id), http_util.encodeURIComponent(exchange_id));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "text/plain", "application/json", "text/json", "application/x-msgpack" }
	req.headers:upsert("content-type", "text/plain")

	-- api key in headers 'Authorization'
	if self.api_key['Authorization'] then
		req.headers:upsert("APIKey", self.api_key['Authorization'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		for _, ob in ipairs(result) do
			openapiclient_v1_listing_item.cast(ob)
		end
		return result, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function metrics_api:v1_metrics_listing_get()
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/v1/metrics/listing",
			self.basePath);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "text/plain", "application/json", "text/json", "application/x-msgpack" }
	req.headers:upsert("content-type", "text/plain")

	-- api key in headers 'Authorization'
	if self.api_key['Authorization'] then
		req.headers:upsert("APIKey", self.api_key['Authorization'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		for _, ob in ipairs(result) do
			openapiclient_v1_metric.cast(ob)
		end
		return result, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function metrics_api:v1_metrics_symbol_current_get(metric_id, symbol_id, exchange_id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/v1/metrics/symbol/current?metric_id=%s&symbol_id=%s&exchange_id=%s",
			self.basePath, http_util.encodeURIComponent(metric_id), http_util.encodeURIComponent(symbol_id), http_util.encodeURIComponent(exchange_id));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "text/plain", "application/json", "text/json", "application/x-msgpack" }
	req.headers:upsert("content-type", "text/plain")

	-- api key in headers 'Authorization'
	if self.api_key['Authorization'] then
		req.headers:upsert("APIKey", self.api_key['Authorization'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		for _, ob in ipairs(result) do
			openapiclient_v1_general_data.cast(ob)
		end
		return result, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function metrics_api:v1_metrics_symbol_history_get(metric_id, symbol_id, time_start, time_end, time_format, period_id, limit)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/v1/metrics/symbol/history?metric_id=%s&symbol_id=%s&time_start=%s&time_end=%s&time_format=%s&period_id=%s&limit=%s",
			self.basePath, http_util.encodeURIComponent(metric_id), http_util.encodeURIComponent(symbol_id), http_util.encodeURIComponent(time_start), http_util.encodeURIComponent(time_end), http_util.encodeURIComponent(time_format), http_util.encodeURIComponent(period_id), http_util.encodeURIComponent(limit));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "text/plain", "application/json", "text/json", "application/x-msgpack" }
	req.headers:upsert("content-type", "text/plain")

	-- api key in headers 'Authorization'
	if self.api_key['Authorization'] then
		req.headers:upsert("APIKey", self.api_key['Authorization'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		for _, ob in ipairs(result) do
			openapiclient_v1_metric_data.cast(ob)
		end
		return result, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function metrics_api:v1_metrics_symbol_listing_get(metric_id, exchange_id, symbol_id)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/v1/metrics/symbol/listing?metric_id=%s&exchange_id=%s&symbol_id=%s",
			self.basePath, http_util.encodeURIComponent(metric_id), http_util.encodeURIComponent(exchange_id), http_util.encodeURIComponent(symbol_id));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "text/plain", "application/json", "text/json", "application/x-msgpack" }
	req.headers:upsert("content-type", "text/plain")

	-- api key in headers 'Authorization'
	if self.api_key['Authorization'] then
		req.headers:upsert("APIKey", self.api_key['Authorization'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		for _, ob in ipairs(result) do
			openapiclient_v1_listing_item.cast(ob)
		end
		return result, headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

return {
	new = new_metrics_api;
}
