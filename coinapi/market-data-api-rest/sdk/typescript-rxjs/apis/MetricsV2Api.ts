// tslint:disable
/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    V1MetricInfo,
} from '../models';

export interface V2MetricsAssetHistoryGetRequest {
    metricId: string;
    assetId: string;
    timeStart?: string;
    timeEnd?: string;
    timeFormat?: string;
    periodId?: string;
    limit?: number;
}

export interface V2MetricsAssetListingGetRequest {
    assetId: string;
}

export interface V2MetricsChainHistoryGetRequest {
    metricId: string;
    chainId: string;
    timeStart?: string;
    timeEnd?: string;
    timeFormat?: string;
    periodId?: string;
    limit?: number;
}

export interface V2MetricsChainListingGetRequest {
    chainId: string;
}

export interface V2MetricsExchangeHistoryGetRequest {
    metricId: string;
    exchangeId: string;
    timeStart?: string;
    timeEnd?: string;
    timeFormat?: string;
    periodId?: string;
    limit?: number;
}

export interface V2MetricsExchangeListingGetRequest {
    exchangeId: string;
}

/**
 * no description
 */
export class MetricsV2Api extends BaseAPI {

    /**
     * Get asset metrics history.
     * Historical metrics for the asset
     */
    v2MetricsAssetHistoryGet({ metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit }: V2MetricsAssetHistoryGetRequest): Observable<Array<object>>
    v2MetricsAssetHistoryGet({ metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit }: V2MetricsAssetHistoryGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<object>>>
    v2MetricsAssetHistoryGet({ metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit }: V2MetricsAssetHistoryGetRequest, opts?: OperationOpts): Observable<Array<object> | AjaxResponse<Array<object>>> {
        throwIfNullOrUndefined(metricId, 'metricId', 'v2MetricsAssetHistoryGet');
        throwIfNullOrUndefined(assetId, 'assetId', 'v2MetricsAssetHistoryGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'metric_id': metricId,
            'asset_id': assetId,
        };

        if (timeStart != null) { query['time_start'] = (timeStart as any).toISOString(); }
        if (timeEnd != null) { query['time_end'] = (timeEnd as any).toISOString(); }
        if (timeFormat != null) { query['time_format'] = timeFormat; }
        if (periodId != null) { query['period_id'] = periodId; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<object>>({
            url: '/v2/metrics/asset/history',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get all metrics that are actually available for the specified asset.
     * Listing of metrics available for specific asset
     */
    v2MetricsAssetListingGet({ assetId }: V2MetricsAssetListingGetRequest): Observable<Array<V1MetricInfo>>
    v2MetricsAssetListingGet({ assetId }: V2MetricsAssetListingGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1MetricInfo>>>
    v2MetricsAssetListingGet({ assetId }: V2MetricsAssetListingGetRequest, opts?: OperationOpts): Observable<Array<V1MetricInfo> | AjaxResponse<Array<V1MetricInfo>>> {
        throwIfNullOrUndefined(assetId, 'assetId', 'v2MetricsAssetListingGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'asset_id': assetId,
        };

        return this.request<Array<V1MetricInfo>>({
            url: '/v2/metrics/asset/listing',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get chain metrics history.
     * Historical metrics for the chain
     */
    v2MetricsChainHistoryGet({ metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit }: V2MetricsChainHistoryGetRequest): Observable<Array<object>>
    v2MetricsChainHistoryGet({ metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit }: V2MetricsChainHistoryGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<object>>>
    v2MetricsChainHistoryGet({ metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit }: V2MetricsChainHistoryGetRequest, opts?: OperationOpts): Observable<Array<object> | AjaxResponse<Array<object>>> {
        throwIfNullOrUndefined(metricId, 'metricId', 'v2MetricsChainHistoryGet');
        throwIfNullOrUndefined(chainId, 'chainId', 'v2MetricsChainHistoryGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'metric_id': metricId,
            'chain_id': chainId,
        };

        if (timeStart != null) { query['time_start'] = (timeStart as any).toISOString(); }
        if (timeEnd != null) { query['time_end'] = (timeEnd as any).toISOString(); }
        if (timeFormat != null) { query['time_format'] = timeFormat; }
        if (periodId != null) { query['period_id'] = periodId; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<object>>({
            url: '/v2/metrics/chain/history',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get all metrics that are actually available for the specified blockchain chain.
     * Listing of metrics available for specific chain
     */
    v2MetricsChainListingGet({ chainId }: V2MetricsChainListingGetRequest): Observable<Array<V1MetricInfo>>
    v2MetricsChainListingGet({ chainId }: V2MetricsChainListingGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1MetricInfo>>>
    v2MetricsChainListingGet({ chainId }: V2MetricsChainListingGetRequest, opts?: OperationOpts): Observable<Array<V1MetricInfo> | AjaxResponse<Array<V1MetricInfo>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'v2MetricsChainListingGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'chain_id': chainId,
        };

        return this.request<Array<V1MetricInfo>>({
            url: '/v2/metrics/chain/listing',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get exchange metrics history.
     * Historical metrics for the exchange
     */
    v2MetricsExchangeHistoryGet({ metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit }: V2MetricsExchangeHistoryGetRequest): Observable<Array<object>>
    v2MetricsExchangeHistoryGet({ metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit }: V2MetricsExchangeHistoryGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<object>>>
    v2MetricsExchangeHistoryGet({ metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit }: V2MetricsExchangeHistoryGetRequest, opts?: OperationOpts): Observable<Array<object> | AjaxResponse<Array<object>>> {
        throwIfNullOrUndefined(metricId, 'metricId', 'v2MetricsExchangeHistoryGet');
        throwIfNullOrUndefined(exchangeId, 'exchangeId', 'v2MetricsExchangeHistoryGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'metric_id': metricId,
            'exchange_id': exchangeId,
        };

        if (timeStart != null) { query['time_start'] = (timeStart as any).toISOString(); }
        if (timeEnd != null) { query['time_end'] = (timeEnd as any).toISOString(); }
        if (timeFormat != null) { query['time_format'] = timeFormat; }
        if (periodId != null) { query['period_id'] = periodId; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<object>>({
            url: '/v2/metrics/exchange/history',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get all metrics that are actually available for the specified exchange.
     * Listing of metrics available for specific exchange
     */
    v2MetricsExchangeListingGet({ exchangeId }: V2MetricsExchangeListingGetRequest): Observable<Array<V1MetricInfo>>
    v2MetricsExchangeListingGet({ exchangeId }: V2MetricsExchangeListingGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1MetricInfo>>>
    v2MetricsExchangeListingGet({ exchangeId }: V2MetricsExchangeListingGetRequest, opts?: OperationOpts): Observable<Array<V1MetricInfo> | AjaxResponse<Array<V1MetricInfo>>> {
        throwIfNullOrUndefined(exchangeId, 'exchangeId', 'v2MetricsExchangeListingGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'exchange_id': exchangeId,
        };

        return this.request<Array<V1MetricInfo>>({
            url: '/v2/metrics/exchange/listing',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get all metrics available in the system.
     * Listing of all supported metrics
     */
    v2MetricsListingGet(): Observable<Array<V1MetricInfo>>
    v2MetricsListingGet(opts?: OperationOpts): Observable<AjaxResponse<Array<V1MetricInfo>>>
    v2MetricsListingGet(opts?: OperationOpts): Observable<Array<V1MetricInfo> | AjaxResponse<Array<V1MetricInfo>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
        };

        return this.request<Array<V1MetricInfo>>({
            url: '/v2/metrics/listing',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}
