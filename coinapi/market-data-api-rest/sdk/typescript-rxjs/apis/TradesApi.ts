// tslint:disable
/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    V1Trade,
} from '../models';

export interface V1TradesLatestGetRequest {
    filterSymbolId?: string;
    includeId?: boolean;
    limit?: number;
}

export interface V1TradesSymbolIdHistoryGetRequest {
    symbolId: string;
    date?: string;
    timeStart?: string;
    timeEnd?: string;
    limit?: number;
    includeId?: boolean;
}

export interface V1TradesSymbolIdLatestGetRequest {
    symbolId: string;
    limit?: number;
    includeId?: boolean;
}

/**
 * no description
 */
export class TradesApi extends BaseAPI {

    /**
     * Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.
     * Latest data
     */
    v1TradesLatestGet({ filterSymbolId, includeId, limit }: V1TradesLatestGetRequest): Observable<Array<V1Trade>>
    v1TradesLatestGet({ filterSymbolId, includeId, limit }: V1TradesLatestGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1Trade>>>
    v1TradesLatestGet({ filterSymbolId, includeId, limit }: V1TradesLatestGetRequest, opts?: OperationOpts): Observable<Array<V1Trade> | AjaxResponse<Array<V1Trade>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
        };

        const query: HttpQuery = {};

        if (filterSymbolId != null) { query['filter_symbol_id'] = filterSymbolId; }
        if (includeId != null) { query['include_id'] = includeId; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<V1Trade>>({
            url: '/v1/trades/latest',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get history transactions from specific symbol, returned in time ascending order.  :::warning The \'time_start\' and \'time_end\' parameters must be from the same day as this endpoint provides intraday data only for specific day. Please use the \'date\' parameter instead for querying data for a specific day without filter. :::
     * Historical data
     */
    v1TradesSymbolIdHistoryGet({ symbolId, date, timeStart, timeEnd, limit, includeId }: V1TradesSymbolIdHistoryGetRequest): Observable<Array<V1Trade>>
    v1TradesSymbolIdHistoryGet({ symbolId, date, timeStart, timeEnd, limit, includeId }: V1TradesSymbolIdHistoryGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1Trade>>>
    v1TradesSymbolIdHistoryGet({ symbolId, date, timeStart, timeEnd, limit, includeId }: V1TradesSymbolIdHistoryGetRequest, opts?: OperationOpts): Observable<Array<V1Trade> | AjaxResponse<Array<V1Trade>>> {
        throwIfNullOrUndefined(symbolId, 'symbolId', 'v1TradesSymbolIdHistoryGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
        };

        const query: HttpQuery = {};

        if (date != null) { query['date'] = date; }
        if (timeStart != null) { query['time_start'] = timeStart; }
        if (timeEnd != null) { query['time_end'] = timeEnd; }
        if (limit != null) { query['limit'] = limit; }
        if (includeId != null) { query['include_id'] = includeId; }

        return this.request<Array<V1Trade>>({
            url: '/v1/trades/{symbol_id}/history'.replace('{symbol_id}', encodeURI(symbolId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.
     * Latest data by symbol_id
     */
    v1TradesSymbolIdLatestGet({ symbolId, limit, includeId }: V1TradesSymbolIdLatestGetRequest): Observable<Array<V1Trade>>
    v1TradesSymbolIdLatestGet({ symbolId, limit, includeId }: V1TradesSymbolIdLatestGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1Trade>>>
    v1TradesSymbolIdLatestGet({ symbolId, limit, includeId }: V1TradesSymbolIdLatestGetRequest, opts?: OperationOpts): Observable<Array<V1Trade> | AjaxResponse<Array<V1Trade>>> {
        throwIfNullOrUndefined(symbolId, 'symbolId', 'v1TradesSymbolIdLatestGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
        };

        const query: HttpQuery = {};

        if (limit != null) { query['limit'] = limit; }
        if (includeId != null) { query['include_id'] = includeId; }

        return this.request<Array<V1Trade>>({
            url: '/v1/trades/{symbol_id}/latest'.replace('{symbol_id}', encodeURI(symbolId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
