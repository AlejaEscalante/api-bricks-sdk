// tslint:disable
/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    V1GeneralData,
    V1ListingItem,
    V1Metric,
    V1MetricData,
} from '../models';

export interface V1MetricsAssetCurrentGetRequest {
    metricId?: string;
    assetId?: string;
    assetIdExternal?: string;
    exchangeId?: string;
}

export interface V1MetricsAssetHistoryGetRequest {
    metricId: string;
    exchangeId: string;
    assetId?: string;
    assetIdExternal?: string;
    timeStart?: string;
    timeEnd?: string;
    timeFormat?: string;
    periodId?: string;
    limit?: number;
}

export interface V1MetricsAssetListingGetRequest {
    metricId?: string;
    exchangeId?: string;
    chainId?: string;
    networkId?: string;
    assetId?: string;
    assetIdExternal?: string;
}

export interface V1MetricsExchangeCurrentGetRequest {
    exchangeId: string;
    metricId?: string;
}

export interface V1MetricsExchangeHistoryGetRequest {
    metricId: string;
    exchangeId: string;
    timeStart?: string;
    timeEnd?: string;
    timeFormat?: string;
    periodId?: string;
    limit?: number;
}

export interface V1MetricsExchangeListingGetRequest {
    exchangeId: string;
    metricId?: string;
}

export interface V1MetricsSymbolCurrentGetRequest {
    metricId?: string;
    symbolId?: string;
    exchangeId?: string;
}

export interface V1MetricsSymbolHistoryGetRequest {
    metricId: string;
    symbolId: string;
    timeStart?: string;
    timeEnd?: string;
    timeFormat?: string;
    periodId?: string;
    limit?: number;
}

export interface V1MetricsSymbolListingGetRequest {
    metricId?: string;
    exchangeId?: string;
    symbolId?: string;
}

/**
 * no description
 */
export class MetricsApi extends BaseAPI {

    /**
     * Get current asset metrics.
     * Current metrics for given asset
     */
    v1MetricsAssetCurrentGet({ metricId, assetId, assetIdExternal, exchangeId }: V1MetricsAssetCurrentGetRequest): Observable<Array<V1GeneralData>>
    v1MetricsAssetCurrentGet({ metricId, assetId, assetIdExternal, exchangeId }: V1MetricsAssetCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1GeneralData>>>
    v1MetricsAssetCurrentGet({ metricId, assetId, assetIdExternal, exchangeId }: V1MetricsAssetCurrentGetRequest, opts?: OperationOpts): Observable<Array<V1GeneralData> | AjaxResponse<Array<V1GeneralData>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = {};

        if (metricId != null) { query['metric_id'] = metricId; }
        if (assetId != null) { query['asset_id'] = assetId; }
        if (assetIdExternal != null) { query['asset_id_external'] = assetIdExternal; }
        if (exchangeId != null) { query['exchange_id'] = exchangeId; }

        return this.request<Array<V1GeneralData>>({
            url: '/v1/metrics/asset/current',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get asset metrics history.
     * Historical metrics for asset
     */
    v1MetricsAssetHistoryGet({ metricId, exchangeId, assetId, assetIdExternal, timeStart, timeEnd, timeFormat, periodId, limit }: V1MetricsAssetHistoryGetRequest): Observable<Array<V1MetricData>>
    v1MetricsAssetHistoryGet({ metricId, exchangeId, assetId, assetIdExternal, timeStart, timeEnd, timeFormat, periodId, limit }: V1MetricsAssetHistoryGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1MetricData>>>
    v1MetricsAssetHistoryGet({ metricId, exchangeId, assetId, assetIdExternal, timeStart, timeEnd, timeFormat, periodId, limit }: V1MetricsAssetHistoryGetRequest, opts?: OperationOpts): Observable<Array<V1MetricData> | AjaxResponse<Array<V1MetricData>>> {
        throwIfNullOrUndefined(metricId, 'metricId', 'v1MetricsAssetHistoryGet');
        throwIfNullOrUndefined(exchangeId, 'exchangeId', 'v1MetricsAssetHistoryGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'metric_id': metricId,
            'exchange_id': exchangeId,
        };

        if (assetId != null) { query['asset_id'] = assetId; }
        if (assetIdExternal != null) { query['asset_id_external'] = assetIdExternal; }
        if (timeStart != null) { query['time_start'] = (timeStart as any).toISOString(); }
        if (timeEnd != null) { query['time_end'] = (timeEnd as any).toISOString(); }
        if (timeFormat != null) { query['time_format'] = timeFormat; }
        if (periodId != null) { query['period_id'] = periodId; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<V1MetricData>>({
            url: '/v1/metrics/asset/history',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get data metrics for asset.
     * Listing of all supported metrics for asset
     */
    v1MetricsAssetListingGet({ metricId, exchangeId, chainId, networkId, assetId, assetIdExternal }: V1MetricsAssetListingGetRequest): Observable<Array<V1ListingItem>>
    v1MetricsAssetListingGet({ metricId, exchangeId, chainId, networkId, assetId, assetIdExternal }: V1MetricsAssetListingGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1ListingItem>>>
    v1MetricsAssetListingGet({ metricId, exchangeId, chainId, networkId, assetId, assetIdExternal }: V1MetricsAssetListingGetRequest, opts?: OperationOpts): Observable<Array<V1ListingItem> | AjaxResponse<Array<V1ListingItem>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = {};

        if (metricId != null) { query['metric_id'] = metricId; }
        if (exchangeId != null) { query['exchange_id'] = exchangeId; }
        if (chainId != null) { query['chain_id'] = chainId; }
        if (networkId != null) { query['network_id'] = networkId; }
        if (assetId != null) { query['asset_id'] = assetId; }
        if (assetIdExternal != null) { query['asset_id_external'] = assetIdExternal; }

        return this.request<Array<V1ListingItem>>({
            url: '/v1/metrics/asset/listing',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get current exchange metrics values.
     * Current metrics for given exchange
     */
    v1MetricsExchangeCurrentGet({ exchangeId, metricId }: V1MetricsExchangeCurrentGetRequest): Observable<Array<V1GeneralData>>
    v1MetricsExchangeCurrentGet({ exchangeId, metricId }: V1MetricsExchangeCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1GeneralData>>>
    v1MetricsExchangeCurrentGet({ exchangeId, metricId }: V1MetricsExchangeCurrentGetRequest, opts?: OperationOpts): Observable<Array<V1GeneralData> | AjaxResponse<Array<V1GeneralData>>> {
        throwIfNullOrUndefined(exchangeId, 'exchangeId', 'v1MetricsExchangeCurrentGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'exchange_id': exchangeId,
        };

        if (metricId != null) { query['metric_id'] = metricId; }

        return this.request<Array<V1GeneralData>>({
            url: '/v1/metrics/exchange/current',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get exchange metrics history.
     * Historical metrics for the exchange
     */
    v1MetricsExchangeHistoryGet({ metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit }: V1MetricsExchangeHistoryGetRequest): Observable<Array<V1MetricData>>
    v1MetricsExchangeHistoryGet({ metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit }: V1MetricsExchangeHistoryGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1MetricData>>>
    v1MetricsExchangeHistoryGet({ metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit }: V1MetricsExchangeHistoryGetRequest, opts?: OperationOpts): Observable<Array<V1MetricData> | AjaxResponse<Array<V1MetricData>>> {
        throwIfNullOrUndefined(metricId, 'metricId', 'v1MetricsExchangeHistoryGet');
        throwIfNullOrUndefined(exchangeId, 'exchangeId', 'v1MetricsExchangeHistoryGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'metric_id': metricId,
            'exchange_id': exchangeId,
        };

        if (timeStart != null) { query['time_start'] = (timeStart as any).toISOString(); }
        if (timeEnd != null) { query['time_end'] = (timeEnd as any).toISOString(); }
        if (timeFormat != null) { query['time_format'] = timeFormat; }
        if (periodId != null) { query['period_id'] = periodId; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<V1MetricData>>({
            url: '/v1/metrics/exchange/history',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get data metrics for exchange.
     * Listing of all supported exchange metrics
     */
    v1MetricsExchangeListingGet({ exchangeId, metricId }: V1MetricsExchangeListingGetRequest): Observable<Array<V1ListingItem>>
    v1MetricsExchangeListingGet({ exchangeId, metricId }: V1MetricsExchangeListingGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1ListingItem>>>
    v1MetricsExchangeListingGet({ exchangeId, metricId }: V1MetricsExchangeListingGetRequest, opts?: OperationOpts): Observable<Array<V1ListingItem> | AjaxResponse<Array<V1ListingItem>>> {
        throwIfNullOrUndefined(exchangeId, 'exchangeId', 'v1MetricsExchangeListingGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'exchange_id': exchangeId,
        };

        if (metricId != null) { query['metric_id'] = metricId; }

        return this.request<Array<V1ListingItem>>({
            url: '/v1/metrics/exchange/listing',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get all data metrics.
     * Listing of all supported metrics by CoinAPI
     */
    v1MetricsListingGet(): Observable<Array<V1Metric>>
    v1MetricsListingGet(opts?: OperationOpts): Observable<AjaxResponse<Array<V1Metric>>>
    v1MetricsListingGet(opts?: OperationOpts): Observable<Array<V1Metric> | AjaxResponse<Array<V1Metric>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        return this.request<Array<V1Metric>>({
            url: '/v1/metrics/listing',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get current symbol metrics.
     * Current metrics for given symbol
     */
    v1MetricsSymbolCurrentGet({ metricId, symbolId, exchangeId }: V1MetricsSymbolCurrentGetRequest): Observable<Array<V1GeneralData>>
    v1MetricsSymbolCurrentGet({ metricId, symbolId, exchangeId }: V1MetricsSymbolCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1GeneralData>>>
    v1MetricsSymbolCurrentGet({ metricId, symbolId, exchangeId }: V1MetricsSymbolCurrentGetRequest, opts?: OperationOpts): Observable<Array<V1GeneralData> | AjaxResponse<Array<V1GeneralData>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = {};

        if (metricId != null) { query['metric_id'] = metricId; }
        if (symbolId != null) { query['symbol_id'] = symbolId; }
        if (exchangeId != null) { query['exchange_id'] = exchangeId; }

        return this.request<Array<V1GeneralData>>({
            url: '/v1/metrics/symbol/current',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get symbol metrics history.
     * Historical metrics for symbol
     */
    v1MetricsSymbolHistoryGet({ metricId, symbolId, timeStart, timeEnd, timeFormat, periodId, limit }: V1MetricsSymbolHistoryGetRequest): Observable<Array<V1MetricData>>
    v1MetricsSymbolHistoryGet({ metricId, symbolId, timeStart, timeEnd, timeFormat, periodId, limit }: V1MetricsSymbolHistoryGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1MetricData>>>
    v1MetricsSymbolHistoryGet({ metricId, symbolId, timeStart, timeEnd, timeFormat, periodId, limit }: V1MetricsSymbolHistoryGetRequest, opts?: OperationOpts): Observable<Array<V1MetricData> | AjaxResponse<Array<V1MetricData>>> {
        throwIfNullOrUndefined(metricId, 'metricId', 'v1MetricsSymbolHistoryGet');
        throwIfNullOrUndefined(symbolId, 'symbolId', 'v1MetricsSymbolHistoryGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'metric_id': metricId,
            'symbol_id': symbolId,
        };

        if (timeStart != null) { query['time_start'] = (timeStart as any).toISOString(); }
        if (timeEnd != null) { query['time_end'] = (timeEnd as any).toISOString(); }
        if (timeFormat != null) { query['time_format'] = timeFormat; }
        if (periodId != null) { query['period_id'] = periodId; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<V1MetricData>>({
            url: '/v1/metrics/symbol/history',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get data metrics for symbol.
     * Listing of all supported metrics for symbol
     */
    v1MetricsSymbolListingGet({ metricId, exchangeId, symbolId }: V1MetricsSymbolListingGetRequest): Observable<Array<V1ListingItem>>
    v1MetricsSymbolListingGet({ metricId, exchangeId, symbolId }: V1MetricsSymbolListingGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1ListingItem>>>
    v1MetricsSymbolListingGet({ metricId, exchangeId, symbolId }: V1MetricsSymbolListingGetRequest, opts?: OperationOpts): Observable<Array<V1ListingItem> | AjaxResponse<Array<V1ListingItem>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = {};

        if (metricId != null) { query['metric_id'] = metricId; }
        if (exchangeId != null) { query['exchange_id'] = exchangeId; }
        if (symbolId != null) { query['symbol_id'] = symbolId; }

        return this.request<Array<V1ListingItem>>({
            url: '/v1/metrics/symbol/listing',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
