// tslint:disable
/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    V1OrderBookBase,
} from '../models';

export interface V1Orderbooks3CurrentGetRequest {
    filterSymbolId?: string;
    limitLevels?: number;
}

export interface V1Orderbooks3SymbolIdCurrentGetRequest {
    symbolId: string;
    limitLevels?: number;
}

/**
 * no description
 */
export class OrderBookL3Api extends BaseAPI {

    /**
     * Current order books
     */
    v1Orderbooks3CurrentGet({ filterSymbolId, limitLevels }: V1Orderbooks3CurrentGetRequest): Observable<Array<V1OrderBookBase>>
    v1Orderbooks3CurrentGet({ filterSymbolId, limitLevels }: V1Orderbooks3CurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1OrderBookBase>>>
    v1Orderbooks3CurrentGet({ filterSymbolId, limitLevels }: V1Orderbooks3CurrentGetRequest, opts?: OperationOpts): Observable<Array<V1OrderBookBase> | AjaxResponse<Array<V1OrderBookBase>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = {};

        if (filterSymbolId != null) { query['filter_symbol_id'] = filterSymbolId; }
        if (limitLevels != null) { query['limit_levels'] = limitLevels; }

        return this.request<Array<V1OrderBookBase>>({
            url: '/v1/orderbooks3/current',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieves the current order book for the specified symbol.
     * Current order book by symbol_id
     */
    v1Orderbooks3SymbolIdCurrentGet({ symbolId, limitLevels }: V1Orderbooks3SymbolIdCurrentGetRequest): Observable<V1OrderBookBase>
    v1Orderbooks3SymbolIdCurrentGet({ symbolId, limitLevels }: V1Orderbooks3SymbolIdCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<V1OrderBookBase>>
    v1Orderbooks3SymbolIdCurrentGet({ symbolId, limitLevels }: V1Orderbooks3SymbolIdCurrentGetRequest, opts?: OperationOpts): Observable<V1OrderBookBase | AjaxResponse<V1OrderBookBase>> {
        throwIfNullOrUndefined(symbolId, 'symbolId', 'v1Orderbooks3SymbolIdCurrentGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = {};

        if (limitLevels != null) { query['limit_levels'] = limitLevels; }

        return this.request<V1OrderBookBase>({
            url: '/v1/orderbooks3/{symbol_id}/current'.replace('{symbol_id}', encodeURI(symbolId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
