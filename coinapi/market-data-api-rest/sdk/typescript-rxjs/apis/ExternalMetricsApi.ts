// tslint:disable
/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    V1Chain,
    V1ExternalAsset,
    V1ExternalExchange,
    V1MetricInfo,
} from '../models';

export interface V1ExternalmetricsAssetHistoryGetRequest {
    metricId: string;
    assetId: string;
    timeStart?: string;
    timeEnd?: string;
    timeFormat?: string;
    periodId?: string;
    limit?: number;
}

export interface V1ExternalmetricsAssetListingGetRequest {
    assetId: string;
}

export interface V1ExternalmetricsChainHistoryGetRequest {
    metricId: string;
    chainId: string;
    timeStart?: string;
    timeEnd?: string;
    timeFormat?: string;
    periodId?: string;
    limit?: number;
}

export interface V1ExternalmetricsChainListingGetRequest {
    chainId: string;
}

export interface V1ExternalmetricsExchangeHistoryGetRequest {
    metricId: string;
    exchangeId: string;
    timeStart?: string;
    timeEnd?: string;
    timeFormat?: string;
    periodId?: string;
    limit?: number;
}

export interface V1ExternalmetricsExchangeListingGetRequest {
    exchangeId: string;
}

/**
 * no description
 */
export class ExternalMetricsApi extends BaseAPI {

    /**
     * Get asset metrics history from external data providers. Data is typically aggregated daily.
     * Historical metrics for the asset from external sources
     */
    v1ExternalmetricsAssetHistoryGet({ metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit }: V1ExternalmetricsAssetHistoryGetRequest): Observable<Array<object>>
    v1ExternalmetricsAssetHistoryGet({ metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit }: V1ExternalmetricsAssetHistoryGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<object>>>
    v1ExternalmetricsAssetHistoryGet({ metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit }: V1ExternalmetricsAssetHistoryGetRequest, opts?: OperationOpts): Observable<Array<object> | AjaxResponse<Array<object>>> {
        throwIfNullOrUndefined(metricId, 'metricId', 'v1ExternalmetricsAssetHistoryGet');
        throwIfNullOrUndefined(assetId, 'assetId', 'v1ExternalmetricsAssetHistoryGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'metric_id': metricId,
            'asset_id': assetId,
        };

        if (timeStart != null) { query['time_start'] = (timeStart as any).toISOString(); }
        if (timeEnd != null) { query['time_end'] = (timeEnd as any).toISOString(); }
        if (timeFormat != null) { query['time_format'] = timeFormat; }
        if (periodId != null) { query['period_id'] = periodId; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<object>>({
            url: '/v1/externalmetrics/asset/history',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get all metrics that are actually available for the specified asset from external providers.
     * Listing of metrics available for specific asset
     */
    v1ExternalmetricsAssetListingGet({ assetId }: V1ExternalmetricsAssetListingGetRequest): Observable<Array<V1MetricInfo>>
    v1ExternalmetricsAssetListingGet({ assetId }: V1ExternalmetricsAssetListingGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1MetricInfo>>>
    v1ExternalmetricsAssetListingGet({ assetId }: V1ExternalmetricsAssetListingGetRequest, opts?: OperationOpts): Observable<Array<V1MetricInfo> | AjaxResponse<Array<V1MetricInfo>>> {
        throwIfNullOrUndefined(assetId, 'assetId', 'v1ExternalmetricsAssetListingGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'asset_id': assetId,
        };

        return this.request<Array<V1MetricInfo>>({
            url: '/v1/externalmetrics/asset/listing',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get all assets (primarily stablecoins) supported by external data providers.
     * Listing of all supported external assets
     */
    v1ExternalmetricsAssetsGet(): Observable<Array<V1ExternalAsset>>
    v1ExternalmetricsAssetsGet(opts?: OperationOpts): Observable<AjaxResponse<Array<V1ExternalAsset>>>
    v1ExternalmetricsAssetsGet(opts?: OperationOpts): Observable<Array<V1ExternalAsset> | AjaxResponse<Array<V1ExternalAsset>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        return this.request<Array<V1ExternalAsset>>({
            url: '/v1/externalmetrics/assets',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get chain metrics history from external data providers. Data is typically aggregated daily.
     * Historical metrics for the chain from external sources
     */
    v1ExternalmetricsChainHistoryGet({ metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit }: V1ExternalmetricsChainHistoryGetRequest): Observable<Array<object>>
    v1ExternalmetricsChainHistoryGet({ metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit }: V1ExternalmetricsChainHistoryGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<object>>>
    v1ExternalmetricsChainHistoryGet({ metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit }: V1ExternalmetricsChainHistoryGetRequest, opts?: OperationOpts): Observable<Array<object> | AjaxResponse<Array<object>>> {
        throwIfNullOrUndefined(metricId, 'metricId', 'v1ExternalmetricsChainHistoryGet');
        throwIfNullOrUndefined(chainId, 'chainId', 'v1ExternalmetricsChainHistoryGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'metric_id': metricId,
            'chain_id': chainId,
        };

        if (timeStart != null) { query['time_start'] = (timeStart as any).toISOString(); }
        if (timeEnd != null) { query['time_end'] = (timeEnd as any).toISOString(); }
        if (timeFormat != null) { query['time_format'] = timeFormat; }
        if (periodId != null) { query['period_id'] = periodId; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<object>>({
            url: '/v1/externalmetrics/chain/history',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get all metrics that are actually available for the specified blockchain chain from external providers.
     * Listing of metrics available for specific chain
     */
    v1ExternalmetricsChainListingGet({ chainId }: V1ExternalmetricsChainListingGetRequest): Observable<Array<V1MetricInfo>>
    v1ExternalmetricsChainListingGet({ chainId }: V1ExternalmetricsChainListingGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1MetricInfo>>>
    v1ExternalmetricsChainListingGet({ chainId }: V1ExternalmetricsChainListingGetRequest, opts?: OperationOpts): Observable<Array<V1MetricInfo> | AjaxResponse<Array<V1MetricInfo>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'v1ExternalmetricsChainListingGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'chain_id': chainId,
        };

        return this.request<Array<V1MetricInfo>>({
            url: '/v1/externalmetrics/chain/listing',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get all blockchain chains supported by external data providers.
     * Listing of all supported external chains
     */
    v1ExternalmetricsChainsGet(): Observable<Array<V1Chain>>
    v1ExternalmetricsChainsGet(opts?: OperationOpts): Observable<AjaxResponse<Array<V1Chain>>>
    v1ExternalmetricsChainsGet(opts?: OperationOpts): Observable<Array<V1Chain> | AjaxResponse<Array<V1Chain>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        return this.request<Array<V1Chain>>({
            url: '/v1/externalmetrics/chains',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get exchange metrics history from external data providers or internal sources based on metric type.
     * Historical metrics for the exchange from both external and internal sources
     */
    v1ExternalmetricsExchangeHistoryGet({ metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit }: V1ExternalmetricsExchangeHistoryGetRequest): Observable<Array<object>>
    v1ExternalmetricsExchangeHistoryGet({ metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit }: V1ExternalmetricsExchangeHistoryGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<object>>>
    v1ExternalmetricsExchangeHistoryGet({ metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit }: V1ExternalmetricsExchangeHistoryGetRequest, opts?: OperationOpts): Observable<Array<object> | AjaxResponse<Array<object>>> {
        throwIfNullOrUndefined(metricId, 'metricId', 'v1ExternalmetricsExchangeHistoryGet');
        throwIfNullOrUndefined(exchangeId, 'exchangeId', 'v1ExternalmetricsExchangeHistoryGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'metric_id': metricId,
            'exchange_id': exchangeId,
        };

        if (timeStart != null) { query['time_start'] = (timeStart as any).toISOString(); }
        if (timeEnd != null) { query['time_end'] = (timeEnd as any).toISOString(); }
        if (timeFormat != null) { query['time_format'] = timeFormat; }
        if (periodId != null) { query['period_id'] = periodId; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<object>>({
            url: '/v1/externalmetrics/exchange/history',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get all metrics that are actually available for the specified exchange from both external providers and internal sources.
     * Listing of metrics available for specific exchange (both external and generic)
     */
    v1ExternalmetricsExchangeListingGet({ exchangeId }: V1ExternalmetricsExchangeListingGetRequest): Observable<Array<V1MetricInfo>>
    v1ExternalmetricsExchangeListingGet({ exchangeId }: V1ExternalmetricsExchangeListingGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1MetricInfo>>>
    v1ExternalmetricsExchangeListingGet({ exchangeId }: V1ExternalmetricsExchangeListingGetRequest, opts?: OperationOpts): Observable<Array<V1MetricInfo> | AjaxResponse<Array<V1MetricInfo>>> {
        throwIfNullOrUndefined(exchangeId, 'exchangeId', 'v1ExternalmetricsExchangeListingGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'exchange_id': exchangeId,
        };

        return this.request<Array<V1MetricInfo>>({
            url: '/v1/externalmetrics/exchange/listing',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get all exchanges that have mapping to external data providers for metrics that actually have sources.  Only returns exchanges that are properly mapped to external protocols for metrics with defined sources.
     * Listing of all supported external exchanges
     */
    v1ExternalmetricsExchangesGet(): Observable<Array<V1ExternalExchange>>
    v1ExternalmetricsExchangesGet(opts?: OperationOpts): Observable<AjaxResponse<Array<V1ExternalExchange>>>
    v1ExternalmetricsExchangesGet(opts?: OperationOpts): Observable<Array<V1ExternalExchange> | AjaxResponse<Array<V1ExternalExchange>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        return this.request<Array<V1ExternalExchange>>({
            url: '/v1/externalmetrics/exchanges',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get all metrics available from external data providers and internal generic metrics.  External metrics have detailed descriptions, while generic metrics are marked as such.
     * Listing of all supported metrics (both external and generic)
     */
    v1ExternalmetricsListingGet(): Observable<Array<V1MetricInfo>>
    v1ExternalmetricsListingGet(opts?: OperationOpts): Observable<AjaxResponse<Array<V1MetricInfo>>>
    v1ExternalmetricsListingGet(opts?: OperationOpts): Observable<Array<V1MetricInfo> | AjaxResponse<Array<V1MetricInfo>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        return this.request<Array<V1MetricInfo>>({
            url: '/v1/externalmetrics/listing',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}
