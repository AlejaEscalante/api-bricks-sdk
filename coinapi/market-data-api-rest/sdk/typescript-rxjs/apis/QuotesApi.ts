// tslint:disable
/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    V1Quote,
    V1QuoteTrade,
} from '../models';

export interface V1QuotesCurrentGetRequest {
    filterSymbolId?: string;
}

export interface V1QuotesLatestGetRequest {
    filterSymbolId?: string;
    limit?: number;
}

export interface V1QuotesSymbolIdCurrentGetRequest {
    symbolId: string;
}

export interface V1QuotesSymbolIdHistoryGetRequest {
    symbolId: string;
    date?: string;
    timeStart?: string;
    timeEnd?: string;
    limit?: number;
}

export interface V1QuotesSymbolIdLatestGetRequest {
    symbolId: string;
    limit?: number;
}

/**
 * no description
 */
export class QuotesApi extends BaseAPI {

    /**
     * Get current quotes for all symbols or for a specific symbol.                :::info  When requesting current data for a specific symbol, output is not encapsulated into JSON array as only one item is returned.  :::
     * Current data
     */
    v1QuotesCurrentGet({ filterSymbolId }: V1QuotesCurrentGetRequest): Observable<Array<V1QuoteTrade>>
    v1QuotesCurrentGet({ filterSymbolId }: V1QuotesCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1QuoteTrade>>>
    v1QuotesCurrentGet({ filterSymbolId }: V1QuotesCurrentGetRequest, opts?: OperationOpts): Observable<Array<V1QuoteTrade> | AjaxResponse<Array<V1QuoteTrade>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = {};

        if (filterSymbolId != null) { query['filter_symbol_id'] = filterSymbolId; }

        return this.request<Array<V1QuoteTrade>>({
            url: '/v1/quotes/current',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get latest updates of the quotes up to 1 minute ago. Latest data is always returned in time descending order.
     * Latest data
     */
    v1QuotesLatestGet({ filterSymbolId, limit }: V1QuotesLatestGetRequest): Observable<Array<V1Quote>>
    v1QuotesLatestGet({ filterSymbolId, limit }: V1QuotesLatestGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1Quote>>>
    v1QuotesLatestGet({ filterSymbolId, limit }: V1QuotesLatestGetRequest, opts?: OperationOpts): Observable<Array<V1Quote> | AjaxResponse<Array<V1Quote>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = {};

        if (filterSymbolId != null) { query['filter_symbol_id'] = filterSymbolId; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<V1Quote>>({
            url: '/v1/quotes/latest',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Current quotes for a specific symbol
     */
    v1QuotesSymbolIdCurrentGet({ symbolId }: V1QuotesSymbolIdCurrentGetRequest): Observable<V1QuoteTrade>
    v1QuotesSymbolIdCurrentGet({ symbolId }: V1QuotesSymbolIdCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<V1QuoteTrade>>
    v1QuotesSymbolIdCurrentGet({ symbolId }: V1QuotesSymbolIdCurrentGetRequest, opts?: OperationOpts): Observable<V1QuoteTrade | AjaxResponse<V1QuoteTrade>> {
        throwIfNullOrUndefined(symbolId, 'symbolId', 'v1QuotesSymbolIdCurrentGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        return this.request<V1QuoteTrade>({
            url: '/v1/quotes/{symbol_id}/current'.replace('{symbol_id}', encodeURI(symbolId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get historical quote updates within requested time range, returned in time ascending order.    :::warning  The \'time_start\' and \'time_end\' parameters must be from the same day as this endpoint provides intraday data only for specific day.  Please use the \'date\' parameter instead for querying data for a specific day without filter.  :::
     * Historical data
     */
    v1QuotesSymbolIdHistoryGet({ symbolId, date, timeStart, timeEnd, limit }: V1QuotesSymbolIdHistoryGetRequest): Observable<Array<V1Quote>>
    v1QuotesSymbolIdHistoryGet({ symbolId, date, timeStart, timeEnd, limit }: V1QuotesSymbolIdHistoryGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1Quote>>>
    v1QuotesSymbolIdHistoryGet({ symbolId, date, timeStart, timeEnd, limit }: V1QuotesSymbolIdHistoryGetRequest, opts?: OperationOpts): Observable<Array<V1Quote> | AjaxResponse<Array<V1Quote>>> {
        throwIfNullOrUndefined(symbolId, 'symbolId', 'v1QuotesSymbolIdHistoryGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = {};

        if (date != null) { query['date'] = date; }
        if (timeStart != null) { query['time_start'] = timeStart; }
        if (timeEnd != null) { query['time_end'] = timeEnd; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<V1Quote>>({
            url: '/v1/quotes/{symbol_id}/history'.replace('{symbol_id}', encodeURI(symbolId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Latest quote updates for a specific symbol
     */
    v1QuotesSymbolIdLatestGet({ symbolId, limit }: V1QuotesSymbolIdLatestGetRequest): Observable<Array<V1Quote>>
    v1QuotesSymbolIdLatestGet({ symbolId, limit }: V1QuotesSymbolIdLatestGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1Quote>>>
    v1QuotesSymbolIdLatestGet({ symbolId, limit }: V1QuotesSymbolIdLatestGetRequest, opts?: OperationOpts): Observable<Array<V1Quote> | AjaxResponse<Array<V1Quote>>> {
        throwIfNullOrUndefined(symbolId, 'symbolId', 'v1QuotesSymbolIdLatestGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = {};

        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<V1Quote>>({
            url: '/v1/quotes/{symbol_id}/latest'.replace('{symbol_id}', encodeURI(symbolId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
