// tslint:disable
/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ModelsExchangeTimeseriesItem,
    V1TimeseriesItem,
    V1TimeseriesPeriod,
} from '../models';

export interface V1OhlcvExchangesExchangeIdHistoryGetRequest {
    exchangeId: string;
    periodId: string;
    timeStart: string;
    timeEnd: string;
}

export interface V1OhlcvSymbolIdHistoryGetRequest {
    symbolId: string;
    periodId: string;
    timeStart?: string;
    timeEnd?: string;
    limit?: number;
    includeEmptyItems?: boolean;
}

export interface V1OhlcvSymbolIdLatestGetRequest {
    symbolId: string;
    periodId: string;
    limit?: number;
    includeEmptyItems?: boolean;
}

/**
 * no description
 */
export class OhlcvApi extends BaseAPI {

    /**
     * Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific exchange eg `BITSTAMP`                :::info  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.  The difference between `time_end` and `time_start` cannot be higher than 1 day.  The `period_id` cannot be higher than `1DAY`.  :::
     * Historical data by exchange
     */
    v1OhlcvExchangesExchangeIdHistoryGet({ exchangeId, periodId, timeStart, timeEnd }: V1OhlcvExchangesExchangeIdHistoryGetRequest): Observable<Array<ModelsExchangeTimeseriesItem>>
    v1OhlcvExchangesExchangeIdHistoryGet({ exchangeId, periodId, timeStart, timeEnd }: V1OhlcvExchangesExchangeIdHistoryGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<ModelsExchangeTimeseriesItem>>>
    v1OhlcvExchangesExchangeIdHistoryGet({ exchangeId, periodId, timeStart, timeEnd }: V1OhlcvExchangesExchangeIdHistoryGetRequest, opts?: OperationOpts): Observable<Array<ModelsExchangeTimeseriesItem> | AjaxResponse<Array<ModelsExchangeTimeseriesItem>>> {
        throwIfNullOrUndefined(exchangeId, 'exchangeId', 'v1OhlcvExchangesExchangeIdHistoryGet');
        throwIfNullOrUndefined(periodId, 'periodId', 'v1OhlcvExchangesExchangeIdHistoryGet');
        throwIfNullOrUndefined(timeStart, 'timeStart', 'v1OhlcvExchangesExchangeIdHistoryGet');
        throwIfNullOrUndefined(timeEnd, 'timeEnd', 'v1OhlcvExchangesExchangeIdHistoryGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'period_id': periodId,
            'time_start': timeStart,
            'time_end': timeEnd,
        };

        return this.request<Array<ModelsExchangeTimeseriesItem>>({
            url: '/v1/ohlcv/exchanges/{exchange_id}/history'.replace('{exchange_id}', encodeURI(exchangeId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get full list of supported time periods available for requesting OHLCV timeseries data.                ### Available periods                Time unit | Period identifiers  --------- | -----------  Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC  Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN  Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS  Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY  Month | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH  Year | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS                :::tip  You can assume that we will not remove any periods from this response, however, we may add new ones.  :::
     * List all periods
     */
    v1OhlcvPeriodsGet(): Observable<Array<V1TimeseriesPeriod>>
    v1OhlcvPeriodsGet(opts?: OperationOpts): Observable<AjaxResponse<Array<V1TimeseriesPeriod>>>
    v1OhlcvPeriodsGet(opts?: OperationOpts): Observable<Array<V1TimeseriesPeriod> | AjaxResponse<Array<V1TimeseriesPeriod>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        return this.request<Array<V1TimeseriesPeriod>>({
            url: '/v1/ohlcv/periods',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific symbol eg `BITSTAMP_SPOT_BTC_USD`, if you need to query timeseries by asset pairs eg. `BTC/USD`, then please reffer to the Exchange Rates Timeseries data                :::info  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.  :::
     * Historical data
     */
    v1OhlcvSymbolIdHistoryGet({ symbolId, periodId, timeStart, timeEnd, limit, includeEmptyItems }: V1OhlcvSymbolIdHistoryGetRequest): Observable<Array<V1TimeseriesItem>>
    v1OhlcvSymbolIdHistoryGet({ symbolId, periodId, timeStart, timeEnd, limit, includeEmptyItems }: V1OhlcvSymbolIdHistoryGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1TimeseriesItem>>>
    v1OhlcvSymbolIdHistoryGet({ symbolId, periodId, timeStart, timeEnd, limit, includeEmptyItems }: V1OhlcvSymbolIdHistoryGetRequest, opts?: OperationOpts): Observable<Array<V1TimeseriesItem> | AjaxResponse<Array<V1TimeseriesItem>>> {
        throwIfNullOrUndefined(symbolId, 'symbolId', 'v1OhlcvSymbolIdHistoryGet');
        throwIfNullOrUndefined(periodId, 'periodId', 'v1OhlcvSymbolIdHistoryGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'period_id': periodId,
        };

        if (timeStart != null) { query['time_start'] = timeStart; }
        if (timeEnd != null) { query['time_end'] = timeEnd; }
        if (limit != null) { query['limit'] = limit; }
        if (includeEmptyItems != null) { query['include_empty_items'] = includeEmptyItems; }

        return this.request<Array<V1TimeseriesItem>>({
            url: '/v1/ohlcv/{symbol_id}/history'.replace('{symbol_id}', encodeURI(symbolId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get OHLCV latest timeseries data returned in time descending order. Data can be requested by the period and for the specific symbol eg `BITSTAMP_SPOT_BTC_USD`, if you need to query timeseries by asset pairs eg. `BTC/USD`, then please reffer to the Exchange Rates Timeseries data                :::info  OHLCV Latest endpoint is just the shortcut to the OHLCV Historical endpoint with substituted `time_start` and `time_end` parameters.   The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay.  :::
     * Latest data
     */
    v1OhlcvSymbolIdLatestGet({ symbolId, periodId, limit, includeEmptyItems }: V1OhlcvSymbolIdLatestGetRequest): Observable<Array<V1TimeseriesItem>>
    v1OhlcvSymbolIdLatestGet({ symbolId, periodId, limit, includeEmptyItems }: V1OhlcvSymbolIdLatestGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1TimeseriesItem>>>
    v1OhlcvSymbolIdLatestGet({ symbolId, periodId, limit, includeEmptyItems }: V1OhlcvSymbolIdLatestGetRequest, opts?: OperationOpts): Observable<Array<V1TimeseriesItem> | AjaxResponse<Array<V1TimeseriesItem>>> {
        throwIfNullOrUndefined(symbolId, 'symbolId', 'v1OhlcvSymbolIdLatestGet');
        throwIfNullOrUndefined(periodId, 'periodId', 'v1OhlcvSymbolIdLatestGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'period_id': periodId,
        };

        if (limit != null) { query['limit'] = limit; }
        if (includeEmptyItems != null) { query['include_empty_items'] = includeEmptyItems; }

        return this.request<Array<V1TimeseriesItem>>({
            url: '/v1/ohlcv/{symbol_id}/latest'.replace('{symbol_id}', encodeURI(symbolId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
