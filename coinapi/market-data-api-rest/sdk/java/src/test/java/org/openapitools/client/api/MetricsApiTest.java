/*
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.V1GeneralData;
import org.openapitools.client.model.V1ListingItem;
import org.openapitools.client.model.V1Metric;
import org.openapitools.client.model.V1MetricData;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MetricsApi
 */
@Disabled
public class MetricsApiTest {

    private final MetricsApi api = new MetricsApi();

    /**
     * Current metrics for given asset
     *
     * Get current asset metrics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1MetricsAssetCurrentGetTest() throws ApiException {
        String metricId = null;
        String assetId = null;
        String assetIdExternal = null;
        String exchangeId = null;
        List<V1GeneralData> response = api.v1MetricsAssetCurrentGet(metricId, assetId, assetIdExternal, exchangeId);
        // TODO: test validations
    }

    /**
     * Historical metrics for asset
     *
     * Get asset metrics history.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1MetricsAssetHistoryGetTest() throws ApiException {
        String metricId = null;
        String exchangeId = null;
        String assetId = null;
        String assetIdExternal = null;
        OffsetDateTime timeStart = null;
        OffsetDateTime timeEnd = null;
        String timeFormat = null;
        String periodId = null;
        Integer limit = null;
        List<V1MetricData> response = api.v1MetricsAssetHistoryGet(metricId, exchangeId, assetId, assetIdExternal, timeStart, timeEnd, timeFormat, periodId, limit);
        // TODO: test validations
    }

    /**
     * Listing of all supported metrics for asset
     *
     * Get data metrics for asset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1MetricsAssetListingGetTest() throws ApiException {
        String metricId = null;
        String exchangeId = null;
        String chainId = null;
        String networkId = null;
        String assetId = null;
        String assetIdExternal = null;
        List<V1ListingItem> response = api.v1MetricsAssetListingGet(metricId, exchangeId, chainId, networkId, assetId, assetIdExternal);
        // TODO: test validations
    }

    /**
     * Current metrics for given exchange
     *
     * Get current exchange metrics values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1MetricsExchangeCurrentGetTest() throws ApiException {
        String exchangeId = null;
        String metricId = null;
        List<V1GeneralData> response = api.v1MetricsExchangeCurrentGet(exchangeId, metricId);
        // TODO: test validations
    }

    /**
     * Historical metrics for the exchange
     *
     * Get exchange metrics history.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1MetricsExchangeHistoryGetTest() throws ApiException {
        String metricId = null;
        String exchangeId = null;
        OffsetDateTime timeStart = null;
        OffsetDateTime timeEnd = null;
        String timeFormat = null;
        String periodId = null;
        Integer limit = null;
        List<V1MetricData> response = api.v1MetricsExchangeHistoryGet(metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit);
        // TODO: test validations
    }

    /**
     * Listing of all supported exchange metrics
     *
     * Get data metrics for exchange.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1MetricsExchangeListingGetTest() throws ApiException {
        String exchangeId = null;
        String metricId = null;
        List<V1ListingItem> response = api.v1MetricsExchangeListingGet(exchangeId, metricId);
        // TODO: test validations
    }

    /**
     * Listing of all supported metrics by CoinAPI
     *
     * Get all data metrics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1MetricsListingGetTest() throws ApiException {
        List<V1Metric> response = api.v1MetricsListingGet();
        // TODO: test validations
    }

    /**
     * Current metrics for given symbol
     *
     * Get current symbol metrics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1MetricsSymbolCurrentGetTest() throws ApiException {
        String metricId = null;
        String symbolId = null;
        String exchangeId = null;
        List<V1GeneralData> response = api.v1MetricsSymbolCurrentGet(metricId, symbolId, exchangeId);
        // TODO: test validations
    }

    /**
     * Historical metrics for symbol
     *
     * Get symbol metrics history.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1MetricsSymbolHistoryGetTest() throws ApiException {
        String metricId = null;
        String symbolId = null;
        OffsetDateTime timeStart = null;
        OffsetDateTime timeEnd = null;
        String timeFormat = null;
        String periodId = null;
        Integer limit = null;
        List<V1MetricData> response = api.v1MetricsSymbolHistoryGet(metricId, symbolId, timeStart, timeEnd, timeFormat, periodId, limit);
        // TODO: test validations
    }

    /**
     * Listing of all supported metrics for symbol
     *
     * Get data metrics for symbol.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1MetricsSymbolListingGetTest() throws ApiException {
        String metricId = null;
        String exchangeId = null;
        String symbolId = null;
        List<V1ListingItem> response = api.v1MetricsSymbolListingGet(metricId, exchangeId, symbolId);
        // TODO: test validations
    }

}
