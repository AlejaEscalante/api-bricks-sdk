/*
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.V1MetricInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExternalMetricsApi
 */
@Disabled
public class ExternalMetricsApiTest {

    private final ExternalMetricsApi api = new ExternalMetricsApi();

    /**
     * Historical metrics for the asset
     *
     * Get asset metrics history.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1ExternalmetricsAssetHistoryGetTest() throws ApiException {
        String metricId = null;
        String assetId = null;
        OffsetDateTime timeStart = null;
        OffsetDateTime timeEnd = null;
        String timeFormat = null;
        String periodId = null;
        Integer limit = null;
        List<Object> response = api.v1ExternalmetricsAssetHistoryGet(metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit);
        // TODO: test validations
    }

    /**
     * Listing of metrics available for specific asset
     *
     * Get all metrics that are actually available for the specified asset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1ExternalmetricsAssetListingGetTest() throws ApiException {
        String assetId = null;
        List<V1MetricInfo> response = api.v1ExternalmetricsAssetListingGet(assetId);
        // TODO: test validations
    }

    /**
     * Historical metrics for the chain
     *
     * Get chain metrics history.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1ExternalmetricsChainHistoryGetTest() throws ApiException {
        String metricId = null;
        String chainId = null;
        OffsetDateTime timeStart = null;
        OffsetDateTime timeEnd = null;
        String timeFormat = null;
        String periodId = null;
        Integer limit = null;
        List<Object> response = api.v1ExternalmetricsChainHistoryGet(metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit);
        // TODO: test validations
    }

    /**
     * Listing of metrics available for specific chain
     *
     * Get all metrics that are actually available for the specified blockchain chain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1ExternalmetricsChainListingGetTest() throws ApiException {
        String chainId = null;
        List<V1MetricInfo> response = api.v1ExternalmetricsChainListingGet(chainId);
        // TODO: test validations
    }

    /**
     * Historical metrics for the exchange
     *
     * Get exchange metrics history.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1ExternalmetricsExchangeHistoryGetTest() throws ApiException {
        String metricId = null;
        String exchangeId = null;
        OffsetDateTime timeStart = null;
        OffsetDateTime timeEnd = null;
        String timeFormat = null;
        String periodId = null;
        Integer limit = null;
        List<Object> response = api.v1ExternalmetricsExchangeHistoryGet(metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit);
        // TODO: test validations
    }

    /**
     * Listing of metrics available for specific exchange
     *
     * Get all metrics that are actually available for the specified exchange.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1ExternalmetricsExchangeListingGetTest() throws ApiException {
        String exchangeId = null;
        List<V1MetricInfo> response = api.v1ExternalmetricsExchangeListingGet(exchangeId);
        // TODO: test validations
    }

    /**
     * Listing of all supported metrics
     *
     * Get all metrics available in the system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1ExternalmetricsListingGetTest() throws ApiException {
        List<V1MetricInfo> response = api.v1ExternalmetricsListingGet();
        // TODO: test validations
    }

}
