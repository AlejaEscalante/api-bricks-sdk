/*
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.V1Chain;
import org.openapitools.client.model.V1ExternalAsset;
import org.openapitools.client.model.V1ExternalExchange;
import org.openapitools.client.model.V1MetricInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExternalMetricsApi
 */
@Disabled
public class ExternalMetricsApiTest {

    private final ExternalMetricsApi api = new ExternalMetricsApi();

    /**
     * Historical metrics for the asset from external sources
     *
     * Get asset metrics history from external data providers. Data is typically aggregated daily.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1ExternalmetricsAssetHistoryGetTest() throws ApiException {
        String metricId = null;
        String assetId = null;
        OffsetDateTime timeStart = null;
        OffsetDateTime timeEnd = null;
        String timeFormat = null;
        String periodId = null;
        Integer limit = null;
        List<Object> response = api.v1ExternalmetricsAssetHistoryGet(metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit);
        // TODO: test validations
    }

    /**
     * Listing of metrics available for specific asset
     *
     * Get all metrics that are actually available for the specified asset from external providers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1ExternalmetricsAssetListingGetTest() throws ApiException {
        String assetId = null;
        List<V1MetricInfo> response = api.v1ExternalmetricsAssetListingGet(assetId);
        // TODO: test validations
    }

    /**
     * Listing of all supported external assets
     *
     * Get all assets (primarily stablecoins) supported by external data providers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1ExternalmetricsAssetsGetTest() throws ApiException {
        List<V1ExternalAsset> response = api.v1ExternalmetricsAssetsGet();
        // TODO: test validations
    }

    /**
     * Historical metrics for the chain from external sources
     *
     * Get chain metrics history from external data providers. Data is typically aggregated daily.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1ExternalmetricsChainHistoryGetTest() throws ApiException {
        String metricId = null;
        String chainId = null;
        OffsetDateTime timeStart = null;
        OffsetDateTime timeEnd = null;
        String timeFormat = null;
        String periodId = null;
        Integer limit = null;
        List<Object> response = api.v1ExternalmetricsChainHistoryGet(metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit);
        // TODO: test validations
    }

    /**
     * Listing of metrics available for specific chain
     *
     * Get all metrics that are actually available for the specified blockchain chain from external providers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1ExternalmetricsChainListingGetTest() throws ApiException {
        String chainId = null;
        List<V1MetricInfo> response = api.v1ExternalmetricsChainListingGet(chainId);
        // TODO: test validations
    }

    /**
     * Listing of all supported external chains
     *
     * Get all blockchain chains supported by external data providers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1ExternalmetricsChainsGetTest() throws ApiException {
        List<V1Chain> response = api.v1ExternalmetricsChainsGet();
        // TODO: test validations
    }

    /**
     * Historical metrics for the exchange from both external and internal sources
     *
     * Get exchange metrics history from external data providers or internal sources based on metric type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1ExternalmetricsExchangeHistoryGetTest() throws ApiException {
        String metricId = null;
        String exchangeId = null;
        OffsetDateTime timeStart = null;
        OffsetDateTime timeEnd = null;
        String timeFormat = null;
        String periodId = null;
        Integer limit = null;
        List<Object> response = api.v1ExternalmetricsExchangeHistoryGet(metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit);
        // TODO: test validations
    }

    /**
     * Listing of metrics available for specific exchange (both external and generic)
     *
     * Get all metrics that are actually available for the specified exchange from both external providers and internal sources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1ExternalmetricsExchangeListingGetTest() throws ApiException {
        String exchangeId = null;
        List<V1MetricInfo> response = api.v1ExternalmetricsExchangeListingGet(exchangeId);
        // TODO: test validations
    }

    /**
     * Listing of all supported external exchanges
     *
     * Get all exchanges that have mapping to external data providers for metrics that actually have sources.  Only returns exchanges that are properly mapped to external protocols for metrics with defined sources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1ExternalmetricsExchangesGetTest() throws ApiException {
        List<V1ExternalExchange> response = api.v1ExternalmetricsExchangesGet();
        // TODO: test validations
    }

    /**
     * Listing of all supported metrics (both external and generic)
     *
     * Get all metrics available from external data providers and internal generic metrics.  External metrics have detailed descriptions, while generic metrics are marked as such.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1ExternalmetricsListingGetTest() throws ApiException {
        List<V1MetricInfo> response = api.v1ExternalmetricsListingGet();
        // TODO: test validations
    }

}
