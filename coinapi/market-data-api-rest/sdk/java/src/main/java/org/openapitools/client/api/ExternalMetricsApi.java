/*
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.V1Chain;
import org.openapitools.client.model.V1ExternalAsset;
import org.openapitools.client.model.V1ExternalExchange;
import org.openapitools.client.model.V1MetricInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExternalMetricsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExternalMetricsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExternalMetricsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1ExternalmetricsAssetHistoryGet
     * @param metricId Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; - internal metric key) (required)
     * @param assetId Asset identifier (e.g., &#x60;USDC&#x60;, &#x60;USDT&#x60; - from supported assets list) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, e.g., missing required parameters, invalid asset_id. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsAssetHistoryGetCall(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String assetId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/externalmetrics/asset/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metricId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metric_id", metricId));
        }

        if (assetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_id", assetId));
        }

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_start", timeStart));
        }

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_end", timeEnd));
        }

        if (timeFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_format", timeFormat));
        }

        if (periodId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period_id", periodId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ExternalmetricsAssetHistoryGetValidateBeforeCall(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String assetId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metricId' is set
        if (metricId == null) {
            throw new ApiException("Missing the required parameter 'metricId' when calling v1ExternalmetricsAssetHistoryGet(Async)");
        }

        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling v1ExternalmetricsAssetHistoryGet(Async)");
        }

        return v1ExternalmetricsAssetHistoryGetCall(metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit, _callback);

    }

    /**
     * Historical metrics for the asset from external sources
     * Get asset metrics history from external data providers. Data is typically aggregated daily.
     * @param metricId Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; - internal metric key) (required)
     * @param assetId Asset identifier (e.g., &#x60;USDC&#x60;, &#x60;USDT&#x60; - from supported assets list) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, e.g., missing required parameters, invalid asset_id. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> v1ExternalmetricsAssetHistoryGet(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String assetId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<List<Object>> localVarResp = v1ExternalmetricsAssetHistoryGetWithHttpInfo(metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit);
        return localVarResp.getData();
    }

    /**
     * Historical metrics for the asset from external sources
     * Get asset metrics history from external data providers. Data is typically aggregated daily.
     * @param metricId Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; - internal metric key) (required)
     * @param assetId Asset identifier (e.g., &#x60;USDC&#x60;, &#x60;USDT&#x60; - from supported assets list) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, e.g., missing required parameters, invalid asset_id. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> v1ExternalmetricsAssetHistoryGetWithHttpInfo(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String assetId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = v1ExternalmetricsAssetHistoryGetValidateBeforeCall(metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Historical metrics for the asset from external sources (asynchronously)
     * Get asset metrics history from external data providers. Data is typically aggregated daily.
     * @param metricId Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; - internal metric key) (required)
     * @param assetId Asset identifier (e.g., &#x60;USDC&#x60;, &#x60;USDT&#x60; - from supported assets list) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, e.g., missing required parameters, invalid asset_id. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsAssetHistoryGetAsync(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String assetId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ExternalmetricsAssetHistoryGetValidateBeforeCall(metricId, assetId, timeStart, timeEnd, timeFormat, periodId, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ExternalmetricsAssetListingGet
     * @param assetId Asset identifier (e.g., USDC, USDT) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsAssetListingGetCall(@javax.annotation.Nonnull String assetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/externalmetrics/asset/listing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_id", assetId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ExternalmetricsAssetListingGetValidateBeforeCall(@javax.annotation.Nonnull String assetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling v1ExternalmetricsAssetListingGet(Async)");
        }

        return v1ExternalmetricsAssetListingGetCall(assetId, _callback);

    }

    /**
     * Listing of metrics available for specific asset
     * Get all metrics that are actually available for the specified asset from external providers.
     * @param assetId Asset identifier (e.g., USDC, USDT) (required)
     * @return List&lt;V1MetricInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1MetricInfo> v1ExternalmetricsAssetListingGet(@javax.annotation.Nonnull String assetId) throws ApiException {
        ApiResponse<List<V1MetricInfo>> localVarResp = v1ExternalmetricsAssetListingGetWithHttpInfo(assetId);
        return localVarResp.getData();
    }

    /**
     * Listing of metrics available for specific asset
     * Get all metrics that are actually available for the specified asset from external providers.
     * @param assetId Asset identifier (e.g., USDC, USDT) (required)
     * @return ApiResponse&lt;List&lt;V1MetricInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1MetricInfo>> v1ExternalmetricsAssetListingGetWithHttpInfo(@javax.annotation.Nonnull String assetId) throws ApiException {
        okhttp3.Call localVarCall = v1ExternalmetricsAssetListingGetValidateBeforeCall(assetId, null);
        Type localVarReturnType = new TypeToken<List<V1MetricInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing of metrics available for specific asset (asynchronously)
     * Get all metrics that are actually available for the specified asset from external providers.
     * @param assetId Asset identifier (e.g., USDC, USDT) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsAssetListingGetAsync(@javax.annotation.Nonnull String assetId, final ApiCallback<List<V1MetricInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ExternalmetricsAssetListingGetValidateBeforeCall(assetId, _callback);
        Type localVarReturnType = new TypeToken<List<V1MetricInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ExternalmetricsAssetsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsAssetsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/externalmetrics/assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ExternalmetricsAssetsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v1ExternalmetricsAssetsGetCall(_callback);

    }

    /**
     * Listing of all supported external assets
     * Get all assets (primarily stablecoins) supported by external data providers.
     * @return List&lt;V1ExternalAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1ExternalAsset> v1ExternalmetricsAssetsGet() throws ApiException {
        ApiResponse<List<V1ExternalAsset>> localVarResp = v1ExternalmetricsAssetsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Listing of all supported external assets
     * Get all assets (primarily stablecoins) supported by external data providers.
     * @return ApiResponse&lt;List&lt;V1ExternalAsset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1ExternalAsset>> v1ExternalmetricsAssetsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1ExternalmetricsAssetsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<V1ExternalAsset>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing of all supported external assets (asynchronously)
     * Get all assets (primarily stablecoins) supported by external data providers.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsAssetsGetAsync(final ApiCallback<List<V1ExternalAsset>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ExternalmetricsAssetsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<V1ExternalAsset>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ExternalmetricsChainHistoryGet
     * @param metricId Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; - internal metric key) (required)
     * @param chainId Chain identifier (e.g., &#x60;Ethereum&#x60;, &#x60;Arbitrum&#x60; - from supported chains list) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, e.g., missing required parameters, invalid chain_id. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsChainHistoryGetCall(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String chainId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/externalmetrics/chain/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metricId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metric_id", metricId));
        }

        if (chainId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chain_id", chainId));
        }

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_start", timeStart));
        }

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_end", timeEnd));
        }

        if (timeFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_format", timeFormat));
        }

        if (periodId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period_id", periodId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ExternalmetricsChainHistoryGetValidateBeforeCall(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String chainId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metricId' is set
        if (metricId == null) {
            throw new ApiException("Missing the required parameter 'metricId' when calling v1ExternalmetricsChainHistoryGet(Async)");
        }

        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling v1ExternalmetricsChainHistoryGet(Async)");
        }

        return v1ExternalmetricsChainHistoryGetCall(metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit, _callback);

    }

    /**
     * Historical metrics for the chain from external sources
     * Get chain metrics history from external data providers. Data is typically aggregated daily.
     * @param metricId Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; - internal metric key) (required)
     * @param chainId Chain identifier (e.g., &#x60;Ethereum&#x60;, &#x60;Arbitrum&#x60; - from supported chains list) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, e.g., missing required parameters, invalid chain_id. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> v1ExternalmetricsChainHistoryGet(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String chainId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<List<Object>> localVarResp = v1ExternalmetricsChainHistoryGetWithHttpInfo(metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit);
        return localVarResp.getData();
    }

    /**
     * Historical metrics for the chain from external sources
     * Get chain metrics history from external data providers. Data is typically aggregated daily.
     * @param metricId Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; - internal metric key) (required)
     * @param chainId Chain identifier (e.g., &#x60;Ethereum&#x60;, &#x60;Arbitrum&#x60; - from supported chains list) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, e.g., missing required parameters, invalid chain_id. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> v1ExternalmetricsChainHistoryGetWithHttpInfo(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String chainId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = v1ExternalmetricsChainHistoryGetValidateBeforeCall(metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Historical metrics for the chain from external sources (asynchronously)
     * Get chain metrics history from external data providers. Data is typically aggregated daily.
     * @param metricId Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; - internal metric key) (required)
     * @param chainId Chain identifier (e.g., &#x60;Ethereum&#x60;, &#x60;Arbitrum&#x60; - from supported chains list) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, e.g., missing required parameters, invalid chain_id. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsChainHistoryGetAsync(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String chainId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ExternalmetricsChainHistoryGetValidateBeforeCall(metricId, chainId, timeStart, timeEnd, timeFormat, periodId, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ExternalmetricsChainListingGet
     * @param chainId Chain identifier (e.g., ETHEREUM, ARBITRUM) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsChainListingGetCall(@javax.annotation.Nonnull String chainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/externalmetrics/chain/listing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (chainId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chain_id", chainId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ExternalmetricsChainListingGetValidateBeforeCall(@javax.annotation.Nonnull String chainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling v1ExternalmetricsChainListingGet(Async)");
        }

        return v1ExternalmetricsChainListingGetCall(chainId, _callback);

    }

    /**
     * Listing of metrics available for specific chain
     * Get all metrics that are actually available for the specified blockchain chain from external providers.
     * @param chainId Chain identifier (e.g., ETHEREUM, ARBITRUM) (required)
     * @return List&lt;V1MetricInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1MetricInfo> v1ExternalmetricsChainListingGet(@javax.annotation.Nonnull String chainId) throws ApiException {
        ApiResponse<List<V1MetricInfo>> localVarResp = v1ExternalmetricsChainListingGetWithHttpInfo(chainId);
        return localVarResp.getData();
    }

    /**
     * Listing of metrics available for specific chain
     * Get all metrics that are actually available for the specified blockchain chain from external providers.
     * @param chainId Chain identifier (e.g., ETHEREUM, ARBITRUM) (required)
     * @return ApiResponse&lt;List&lt;V1MetricInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1MetricInfo>> v1ExternalmetricsChainListingGetWithHttpInfo(@javax.annotation.Nonnull String chainId) throws ApiException {
        okhttp3.Call localVarCall = v1ExternalmetricsChainListingGetValidateBeforeCall(chainId, null);
        Type localVarReturnType = new TypeToken<List<V1MetricInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing of metrics available for specific chain (asynchronously)
     * Get all metrics that are actually available for the specified blockchain chain from external providers.
     * @param chainId Chain identifier (e.g., ETHEREUM, ARBITRUM) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsChainListingGetAsync(@javax.annotation.Nonnull String chainId, final ApiCallback<List<V1MetricInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ExternalmetricsChainListingGetValidateBeforeCall(chainId, _callback);
        Type localVarReturnType = new TypeToken<List<V1MetricInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ExternalmetricsChainsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsChainsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/externalmetrics/chains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ExternalmetricsChainsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v1ExternalmetricsChainsGetCall(_callback);

    }

    /**
     * Listing of all supported external chains
     * Get all blockchain chains supported by external data providers.
     * @return List&lt;V1Chain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1Chain> v1ExternalmetricsChainsGet() throws ApiException {
        ApiResponse<List<V1Chain>> localVarResp = v1ExternalmetricsChainsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Listing of all supported external chains
     * Get all blockchain chains supported by external data providers.
     * @return ApiResponse&lt;List&lt;V1Chain&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1Chain>> v1ExternalmetricsChainsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1ExternalmetricsChainsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<V1Chain>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing of all supported external chains (asynchronously)
     * Get all blockchain chains supported by external data providers.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsChainsGetAsync(final ApiCallback<List<V1Chain>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ExternalmetricsChainsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<V1Chain>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ExternalmetricsExchangeHistoryGet
     * @param metricId Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; for external, or generic metric IDs) (required)
     * @param exchangeId Exchange identifier (e.g., &#x60;BINANCE&#x60;, &#x60;UNISWAP-V3-ETHEREUM&#x60;) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, e.g., missing required parameters, invalid exchange_id mapping. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsExchangeHistoryGetCall(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/externalmetrics/exchange/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metricId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metric_id", metricId));
        }

        if (exchangeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exchange_id", exchangeId));
        }

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_start", timeStart));
        }

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_end", timeEnd));
        }

        if (timeFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_format", timeFormat));
        }

        if (periodId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period_id", periodId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ExternalmetricsExchangeHistoryGetValidateBeforeCall(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metricId' is set
        if (metricId == null) {
            throw new ApiException("Missing the required parameter 'metricId' when calling v1ExternalmetricsExchangeHistoryGet(Async)");
        }

        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling v1ExternalmetricsExchangeHistoryGet(Async)");
        }

        return v1ExternalmetricsExchangeHistoryGetCall(metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit, _callback);

    }

    /**
     * Historical metrics for the exchange from both external and internal sources
     * Get exchange metrics history from external data providers or internal sources based on metric type.
     * @param metricId Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; for external, or generic metric IDs) (required)
     * @param exchangeId Exchange identifier (e.g., &#x60;BINANCE&#x60;, &#x60;UNISWAP-V3-ETHEREUM&#x60;) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, e.g., missing required parameters, invalid exchange_id mapping. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> v1ExternalmetricsExchangeHistoryGet(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<List<Object>> localVarResp = v1ExternalmetricsExchangeHistoryGetWithHttpInfo(metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit);
        return localVarResp.getData();
    }

    /**
     * Historical metrics for the exchange from both external and internal sources
     * Get exchange metrics history from external data providers or internal sources based on metric type.
     * @param metricId Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; for external, or generic metric IDs) (required)
     * @param exchangeId Exchange identifier (e.g., &#x60;BINANCE&#x60;, &#x60;UNISWAP-V3-ETHEREUM&#x60;) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, e.g., missing required parameters, invalid exchange_id mapping. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> v1ExternalmetricsExchangeHistoryGetWithHttpInfo(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = v1ExternalmetricsExchangeHistoryGetValidateBeforeCall(metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Historical metrics for the exchange from both external and internal sources (asynchronously)
     * Get exchange metrics history from external data providers or internal sources based on metric type.
     * @param metricId Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; for external, or generic metric IDs) (required)
     * @param exchangeId Exchange identifier (e.g., &#x60;BINANCE&#x60;, &#x60;UNISWAP-V3-ETHEREUM&#x60;) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, e.g., missing required parameters, invalid exchange_id mapping. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsExchangeHistoryGetAsync(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ExternalmetricsExchangeHistoryGetValidateBeforeCall(metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ExternalmetricsExchangeListingGet
     * @param exchangeId Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsExchangeListingGetCall(@javax.annotation.Nonnull String exchangeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/externalmetrics/exchange/listing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (exchangeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exchange_id", exchangeId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ExternalmetricsExchangeListingGetValidateBeforeCall(@javax.annotation.Nonnull String exchangeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling v1ExternalmetricsExchangeListingGet(Async)");
        }

        return v1ExternalmetricsExchangeListingGetCall(exchangeId, _callback);

    }

    /**
     * Listing of metrics available for specific exchange (both external and generic)
     * Get all metrics that are actually available for the specified exchange from both external providers and internal sources.
     * @param exchangeId Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM) (required)
     * @return List&lt;V1MetricInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1MetricInfo> v1ExternalmetricsExchangeListingGet(@javax.annotation.Nonnull String exchangeId) throws ApiException {
        ApiResponse<List<V1MetricInfo>> localVarResp = v1ExternalmetricsExchangeListingGetWithHttpInfo(exchangeId);
        return localVarResp.getData();
    }

    /**
     * Listing of metrics available for specific exchange (both external and generic)
     * Get all metrics that are actually available for the specified exchange from both external providers and internal sources.
     * @param exchangeId Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM) (required)
     * @return ApiResponse&lt;List&lt;V1MetricInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1MetricInfo>> v1ExternalmetricsExchangeListingGetWithHttpInfo(@javax.annotation.Nonnull String exchangeId) throws ApiException {
        okhttp3.Call localVarCall = v1ExternalmetricsExchangeListingGetValidateBeforeCall(exchangeId, null);
        Type localVarReturnType = new TypeToken<List<V1MetricInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing of metrics available for specific exchange (both external and generic) (asynchronously)
     * Get all metrics that are actually available for the specified exchange from both external providers and internal sources.
     * @param exchangeId Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsExchangeListingGetAsync(@javax.annotation.Nonnull String exchangeId, final ApiCallback<List<V1MetricInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ExternalmetricsExchangeListingGetValidateBeforeCall(exchangeId, _callback);
        Type localVarReturnType = new TypeToken<List<V1MetricInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ExternalmetricsExchangesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsExchangesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/externalmetrics/exchanges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ExternalmetricsExchangesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v1ExternalmetricsExchangesGetCall(_callback);

    }

    /**
     * Listing of all supported external exchanges
     * Get all exchanges that have mapping to external data providers for metrics that actually have sources.  Only returns exchanges that are properly mapped to external protocols for metrics with defined sources.
     * @return List&lt;V1ExternalExchange&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1ExternalExchange> v1ExternalmetricsExchangesGet() throws ApiException {
        ApiResponse<List<V1ExternalExchange>> localVarResp = v1ExternalmetricsExchangesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Listing of all supported external exchanges
     * Get all exchanges that have mapping to external data providers for metrics that actually have sources.  Only returns exchanges that are properly mapped to external protocols for metrics with defined sources.
     * @return ApiResponse&lt;List&lt;V1ExternalExchange&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1ExternalExchange>> v1ExternalmetricsExchangesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1ExternalmetricsExchangesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<V1ExternalExchange>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing of all supported external exchanges (asynchronously)
     * Get all exchanges that have mapping to external data providers for metrics that actually have sources.  Only returns exchanges that are properly mapped to external protocols for metrics with defined sources.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsExchangesGetAsync(final ApiCallback<List<V1ExternalExchange>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ExternalmetricsExchangesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<V1ExternalExchange>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ExternalmetricsListingGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsListingGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/externalmetrics/listing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ExternalmetricsListingGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v1ExternalmetricsListingGetCall(_callback);

    }

    /**
     * Listing of all supported metrics (both external and generic)
     * Get all metrics available from external data providers and internal generic metrics.  External metrics have detailed descriptions, while generic metrics are marked as such.
     * @return List&lt;V1MetricInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1MetricInfo> v1ExternalmetricsListingGet() throws ApiException {
        ApiResponse<List<V1MetricInfo>> localVarResp = v1ExternalmetricsListingGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Listing of all supported metrics (both external and generic)
     * Get all metrics available from external data providers and internal generic metrics.  External metrics have detailed descriptions, while generic metrics are marked as such.
     * @return ApiResponse&lt;List&lt;V1MetricInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1MetricInfo>> v1ExternalmetricsListingGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1ExternalmetricsListingGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<V1MetricInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing of all supported metrics (both external and generic) (asynchronously)
     * Get all metrics available from external data providers and internal generic metrics.  External metrics have detailed descriptions, while generic metrics are marked as such.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ExternalmetricsListingGetAsync(final ApiCallback<List<V1MetricInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ExternalmetricsListingGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<V1MetricInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
