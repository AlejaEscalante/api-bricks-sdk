/*
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.V1OrderBook;
import org.openapitools.client.model.V1OrderBookBase;
import org.openapitools.client.model.V1OrderBookDepth;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderBookApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrderBookApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderBookApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1OrderbooksSymbolIdCurrentGet
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrderbooksSymbolIdCurrentGetCall(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable Integer limitLevels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orderbooks/{symbol_id}/current"
            .replace("{" + "symbol_id" + "}", localVarApiClient.escapeString(symbolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitLevels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit_levels", limitLevels));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrderbooksSymbolIdCurrentGetValidateBeforeCall(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable Integer limitLevels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbolId' is set
        if (symbolId == null) {
            throw new ApiException("Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdCurrentGet(Async)");
        }

        return v1OrderbooksSymbolIdCurrentGetCall(symbolId, limitLevels, _callback);

    }

    /**
     * Get current order book
     * Retrieves the current order book for the specified symbol.
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @return V1OrderBookBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public V1OrderBookBase v1OrderbooksSymbolIdCurrentGet(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable Integer limitLevels) throws ApiException {
        ApiResponse<V1OrderBookBase> localVarResp = v1OrderbooksSymbolIdCurrentGetWithHttpInfo(symbolId, limitLevels);
        return localVarResp.getData();
    }

    /**
     * Get current order book
     * Retrieves the current order book for the specified symbol.
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @return ApiResponse&lt;V1OrderBookBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1OrderBookBase> v1OrderbooksSymbolIdCurrentGetWithHttpInfo(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable Integer limitLevels) throws ApiException {
        okhttp3.Call localVarCall = v1OrderbooksSymbolIdCurrentGetValidateBeforeCall(symbolId, limitLevels, null);
        Type localVarReturnType = new TypeToken<V1OrderBookBase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get current order book (asynchronously)
     * Retrieves the current order book for the specified symbol.
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrderbooksSymbolIdCurrentGetAsync(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable Integer limitLevels, final ApiCallback<V1OrderBookBase> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrderbooksSymbolIdCurrentGetValidateBeforeCall(symbolId, limitLevels, _callback);
        Type localVarReturnType = new TypeToken<V1OrderBookBase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrderbooksSymbolIdDepthCurrentGet
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrderbooksSymbolIdDepthCurrentGetCall(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable Integer limitLevels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orderbooks/{symbol_id}/depth/current"
            .replace("{" + "symbol_id" + "}", localVarApiClient.escapeString(symbolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitLevels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit_levels", limitLevels));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrderbooksSymbolIdDepthCurrentGetValidateBeforeCall(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable Integer limitLevels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbolId' is set
        if (symbolId == null) {
            throw new ApiException("Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdDepthCurrentGet(Async)");
        }

        return v1OrderbooksSymbolIdDepthCurrentGetCall(symbolId, limitLevels, _callback);

    }

    /**
     * Current depth of the order book
     * Retrieves the current depth of the order book for the specified symbol.
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @return V1OrderBookDepth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public V1OrderBookDepth v1OrderbooksSymbolIdDepthCurrentGet(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable Integer limitLevels) throws ApiException {
        ApiResponse<V1OrderBookDepth> localVarResp = v1OrderbooksSymbolIdDepthCurrentGetWithHttpInfo(symbolId, limitLevels);
        return localVarResp.getData();
    }

    /**
     * Current depth of the order book
     * Retrieves the current depth of the order book for the specified symbol.
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @return ApiResponse&lt;V1OrderBookDepth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1OrderBookDepth> v1OrderbooksSymbolIdDepthCurrentGetWithHttpInfo(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable Integer limitLevels) throws ApiException {
        okhttp3.Call localVarCall = v1OrderbooksSymbolIdDepthCurrentGetValidateBeforeCall(symbolId, limitLevels, null);
        Type localVarReturnType = new TypeToken<V1OrderBookDepth>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Current depth of the order book (asynchronously)
     * Retrieves the current depth of the order book for the specified symbol.
     * @param symbolId The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param limitLevels The maximum number of levels to include in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrderbooksSymbolIdDepthCurrentGetAsync(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable Integer limitLevels, final ApiCallback<V1OrderBookDepth> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrderbooksSymbolIdDepthCurrentGetValidateBeforeCall(symbolId, limitLevels, _callback);
        Type localVarReturnType = new TypeToken<V1OrderBookDepth>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrderbooksSymbolIdHistoryGet
     * @param symbolId Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)
     * @param timeStart Starting time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrderbooksSymbolIdHistoryGetCall(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable String date, @javax.annotation.Nullable String timeStart, @javax.annotation.Nullable String timeEnd, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer limitLevels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orderbooks/{symbol_id}/history"
            .replace("{" + "symbol_id" + "}", localVarApiClient.escapeString(symbolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_start", timeStart));
        }

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_end", timeEnd));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (limitLevels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit_levels", limitLevels));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrderbooksSymbolIdHistoryGetValidateBeforeCall(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable String date, @javax.annotation.Nullable String timeStart, @javax.annotation.Nullable String timeEnd, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer limitLevels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbolId' is set
        if (symbolId == null) {
            throw new ApiException("Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdHistoryGet(Async)");
        }

        return v1OrderbooksSymbolIdHistoryGetCall(symbolId, date, timeStart, timeEnd, limit, limitLevels, _callback);

    }

    /**
     * Historical data
     * Get historical order book snapshots for a specific symbol within time range, returned in time ascending order.              :::info The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels. :::  :::warning The &#39;time_start&#39; and &#39;time_end&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day. Please use the &#39;date&#39; parameter instead for querying data for a specific day without filter. :::
     * @param symbolId Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)
     * @param timeStart Starting time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @return List&lt;V1OrderBook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1OrderBook> v1OrderbooksSymbolIdHistoryGet(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable String date, @javax.annotation.Nullable String timeStart, @javax.annotation.Nullable String timeEnd, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer limitLevels) throws ApiException {
        ApiResponse<List<V1OrderBook>> localVarResp = v1OrderbooksSymbolIdHistoryGetWithHttpInfo(symbolId, date, timeStart, timeEnd, limit, limitLevels);
        return localVarResp.getData();
    }

    /**
     * Historical data
     * Get historical order book snapshots for a specific symbol within time range, returned in time ascending order.              :::info The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels. :::  :::warning The &#39;time_start&#39; and &#39;time_end&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day. Please use the &#39;date&#39; parameter instead for querying data for a specific day without filter. :::
     * @param symbolId Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)
     * @param timeStart Starting time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @return ApiResponse&lt;List&lt;V1OrderBook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1OrderBook>> v1OrderbooksSymbolIdHistoryGetWithHttpInfo(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable String date, @javax.annotation.Nullable String timeStart, @javax.annotation.Nullable String timeEnd, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer limitLevels) throws ApiException {
        okhttp3.Call localVarCall = v1OrderbooksSymbolIdHistoryGetValidateBeforeCall(symbolId, date, timeStart, timeEnd, limit, limitLevels, null);
        Type localVarReturnType = new TypeToken<List<V1OrderBook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Historical data (asynchronously)
     * Get historical order book snapshots for a specific symbol within time range, returned in time ascending order.              :::info The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels. :::  :::warning The &#39;time_start&#39; and &#39;time_end&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day. Please use the &#39;date&#39; parameter instead for querying data for a specific day without filter. :::
     * @param symbolId Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)
     * @param timeStart Starting time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param timeEnd Timeseries ending time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrderbooksSymbolIdHistoryGetAsync(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable String date, @javax.annotation.Nullable String timeStart, @javax.annotation.Nullable String timeEnd, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer limitLevels, final ApiCallback<List<V1OrderBook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrderbooksSymbolIdHistoryGetValidateBeforeCall(symbolId, date, timeStart, timeEnd, limit, limitLevels, _callback);
        Type localVarReturnType = new TypeToken<List<V1OrderBook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrderbooksSymbolIdLatestGet
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrderbooksSymbolIdLatestGetCall(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer limitLevels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orderbooks/{symbol_id}/latest"
            .replace("{" + "symbol_id" + "}", localVarApiClient.escapeString(symbolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (limitLevels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit_levels", limitLevels));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrderbooksSymbolIdLatestGetValidateBeforeCall(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer limitLevels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbolId' is set
        if (symbolId == null) {
            throw new ApiException("Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdLatestGet(Async)");
        }

        return v1OrderbooksSymbolIdLatestGetCall(symbolId, limit, limitLevels, _callback);

    }

    /**
     * Latest data
     * Get latest order book snapshots for a specific symbol, returned in time descending order.              :::info The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels. :::
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @return List&lt;V1OrderBook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1OrderBook> v1OrderbooksSymbolIdLatestGet(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer limitLevels) throws ApiException {
        ApiResponse<List<V1OrderBook>> localVarResp = v1OrderbooksSymbolIdLatestGetWithHttpInfo(symbolId, limit, limitLevels);
        return localVarResp.getData();
    }

    /**
     * Latest data
     * Get latest order book snapshots for a specific symbol, returned in time descending order.              :::info The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels. :::
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @return ApiResponse&lt;List&lt;V1OrderBook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1OrderBook>> v1OrderbooksSymbolIdLatestGetWithHttpInfo(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer limitLevels) throws ApiException {
        okhttp3.Call localVarCall = v1OrderbooksSymbolIdLatestGetValidateBeforeCall(symbolId, limit, limitLevels, null);
        Type localVarReturnType = new TypeToken<List<V1OrderBook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Latest data (asynchronously)
     * Get latest order book snapshots for a specific symbol, returned in time descending order.              :::info The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels. :::
     * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrderbooksSymbolIdLatestGetAsync(@javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer limitLevels, final ApiCallback<List<V1OrderBook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrderbooksSymbolIdLatestGetValidateBeforeCall(symbolId, limit, limitLevels, _callback);
        Type localVarReturnType = new TypeToken<List<V1OrderBook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
