/*
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.V1GeneralData;
import org.openapitools.client.model.V1ListingItem;
import org.openapitools.client.model.V1Metric;
import org.openapitools.client.model.V1MetricData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetricsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetricsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetricsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1MetricsAssetCurrentGet
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param assetId Asset identifier (from the Metadata -&gt; Assets) (optional)
     * @param assetIdExternal Exchange asset identifier (optional)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsAssetCurrentGetCall(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String assetId, @javax.annotation.Nullable String assetIdExternal, @javax.annotation.Nullable String exchangeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/metrics/asset/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metricId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metric_id", metricId));
        }

        if (assetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_id", assetId));
        }

        if (assetIdExternal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_id_external", assetIdExternal));
        }

        if (exchangeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exchange_id", exchangeId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MetricsAssetCurrentGetValidateBeforeCall(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String assetId, @javax.annotation.Nullable String assetIdExternal, @javax.annotation.Nullable String exchangeId, final ApiCallback _callback) throws ApiException {
        return v1MetricsAssetCurrentGetCall(metricId, assetId, assetIdExternal, exchangeId, _callback);

    }

    /**
     * Current metrics for given asset
     * Get current asset metrics.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param assetId Asset identifier (from the Metadata -&gt; Assets) (optional)
     * @param assetIdExternal Exchange asset identifier (optional)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (optional)
     * @return List&lt;V1GeneralData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1GeneralData> v1MetricsAssetCurrentGet(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String assetId, @javax.annotation.Nullable String assetIdExternal, @javax.annotation.Nullable String exchangeId) throws ApiException {
        ApiResponse<List<V1GeneralData>> localVarResp = v1MetricsAssetCurrentGetWithHttpInfo(metricId, assetId, assetIdExternal, exchangeId);
        return localVarResp.getData();
    }

    /**
     * Current metrics for given asset
     * Get current asset metrics.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param assetId Asset identifier (from the Metadata -&gt; Assets) (optional)
     * @param assetIdExternal Exchange asset identifier (optional)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (optional)
     * @return ApiResponse&lt;List&lt;V1GeneralData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1GeneralData>> v1MetricsAssetCurrentGetWithHttpInfo(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String assetId, @javax.annotation.Nullable String assetIdExternal, @javax.annotation.Nullable String exchangeId) throws ApiException {
        okhttp3.Call localVarCall = v1MetricsAssetCurrentGetValidateBeforeCall(metricId, assetId, assetIdExternal, exchangeId, null);
        Type localVarReturnType = new TypeToken<List<V1GeneralData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Current metrics for given asset (asynchronously)
     * Get current asset metrics.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param assetId Asset identifier (from the Metadata -&gt; Assets) (optional)
     * @param assetIdExternal Exchange asset identifier (optional)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsAssetCurrentGetAsync(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String assetId, @javax.annotation.Nullable String assetIdExternal, @javax.annotation.Nullable String exchangeId, final ApiCallback<List<V1GeneralData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MetricsAssetCurrentGetValidateBeforeCall(metricId, assetId, assetIdExternal, exchangeId, _callback);
        Type localVarReturnType = new TypeToken<List<V1GeneralData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MetricsAssetHistoryGet
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (required)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param assetId Asset identifier (from the Metadata -&gt; Assets) (optional)
     * @param assetIdExternal Exchange asset identifier (optional)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsAssetHistoryGetCall(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable String assetId, @javax.annotation.Nullable String assetIdExternal, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/metrics/asset/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metricId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metric_id", metricId));
        }

        if (assetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_id", assetId));
        }

        if (assetIdExternal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_id_external", assetIdExternal));
        }

        if (exchangeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exchange_id", exchangeId));
        }

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_start", timeStart));
        }

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_end", timeEnd));
        }

        if (timeFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_format", timeFormat));
        }

        if (periodId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period_id", periodId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MetricsAssetHistoryGetValidateBeforeCall(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable String assetId, @javax.annotation.Nullable String assetIdExternal, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metricId' is set
        if (metricId == null) {
            throw new ApiException("Missing the required parameter 'metricId' when calling v1MetricsAssetHistoryGet(Async)");
        }

        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling v1MetricsAssetHistoryGet(Async)");
        }

        return v1MetricsAssetHistoryGetCall(metricId, exchangeId, assetId, assetIdExternal, timeStart, timeEnd, timeFormat, periodId, limit, _callback);

    }

    /**
     * Historical metrics for asset
     * Get asset metrics history.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (required)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param assetId Asset identifier (from the Metadata -&gt; Assets) (optional)
     * @param assetIdExternal Exchange asset identifier (optional)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List&lt;V1MetricData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1MetricData> v1MetricsAssetHistoryGet(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable String assetId, @javax.annotation.Nullable String assetIdExternal, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<List<V1MetricData>> localVarResp = v1MetricsAssetHistoryGetWithHttpInfo(metricId, exchangeId, assetId, assetIdExternal, timeStart, timeEnd, timeFormat, periodId, limit);
        return localVarResp.getData();
    }

    /**
     * Historical metrics for asset
     * Get asset metrics history.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (required)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param assetId Asset identifier (from the Metadata -&gt; Assets) (optional)
     * @param assetIdExternal Exchange asset identifier (optional)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return ApiResponse&lt;List&lt;V1MetricData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1MetricData>> v1MetricsAssetHistoryGetWithHttpInfo(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable String assetId, @javax.annotation.Nullable String assetIdExternal, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = v1MetricsAssetHistoryGetValidateBeforeCall(metricId, exchangeId, assetId, assetIdExternal, timeStart, timeEnd, timeFormat, periodId, limit, null);
        Type localVarReturnType = new TypeToken<List<V1MetricData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Historical metrics for asset (asynchronously)
     * Get asset metrics history.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (required)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param assetId Asset identifier (from the Metadata -&gt; Assets) (optional)
     * @param assetIdExternal Exchange asset identifier (optional)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsAssetHistoryGetAsync(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable String assetId, @javax.annotation.Nullable String assetIdExternal, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit, final ApiCallback<List<V1MetricData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MetricsAssetHistoryGetValidateBeforeCall(metricId, exchangeId, assetId, assetIdExternal, timeStart, timeEnd, timeFormat, periodId, limit, _callback);
        Type localVarReturnType = new TypeToken<List<V1MetricData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MetricsAssetListingGet
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (optional)
     * @param chainId Chain identifier (optional)
     * @param networkId Network identifier (optional)
     * @param assetId Asset identifier (from the Metadata -&gt; Assets) (optional)
     * @param assetIdExternal The asset external identifier (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsAssetListingGetCall(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String exchangeId, @javax.annotation.Nullable String chainId, @javax.annotation.Nullable String networkId, @javax.annotation.Nullable String assetId, @javax.annotation.Nullable String assetIdExternal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/metrics/asset/listing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metricId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metric_id", metricId));
        }

        if (exchangeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exchange_id", exchangeId));
        }

        if (chainId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chain_id", chainId));
        }

        if (networkId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network_id", networkId));
        }

        if (assetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_id", assetId));
        }

        if (assetIdExternal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_id_external", assetIdExternal));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MetricsAssetListingGetValidateBeforeCall(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String exchangeId, @javax.annotation.Nullable String chainId, @javax.annotation.Nullable String networkId, @javax.annotation.Nullable String assetId, @javax.annotation.Nullable String assetIdExternal, final ApiCallback _callback) throws ApiException {
        return v1MetricsAssetListingGetCall(metricId, exchangeId, chainId, networkId, assetId, assetIdExternal, _callback);

    }

    /**
     * Listing of all supported metrics for asset
     * Get data metrics for asset.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (optional)
     * @param chainId Chain identifier (optional)
     * @param networkId Network identifier (optional)
     * @param assetId Asset identifier (from the Metadata -&gt; Assets) (optional)
     * @param assetIdExternal The asset external identifier (optional)
     * @return List&lt;V1ListingItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1ListingItem> v1MetricsAssetListingGet(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String exchangeId, @javax.annotation.Nullable String chainId, @javax.annotation.Nullable String networkId, @javax.annotation.Nullable String assetId, @javax.annotation.Nullable String assetIdExternal) throws ApiException {
        ApiResponse<List<V1ListingItem>> localVarResp = v1MetricsAssetListingGetWithHttpInfo(metricId, exchangeId, chainId, networkId, assetId, assetIdExternal);
        return localVarResp.getData();
    }

    /**
     * Listing of all supported metrics for asset
     * Get data metrics for asset.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (optional)
     * @param chainId Chain identifier (optional)
     * @param networkId Network identifier (optional)
     * @param assetId Asset identifier (from the Metadata -&gt; Assets) (optional)
     * @param assetIdExternal The asset external identifier (optional)
     * @return ApiResponse&lt;List&lt;V1ListingItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1ListingItem>> v1MetricsAssetListingGetWithHttpInfo(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String exchangeId, @javax.annotation.Nullable String chainId, @javax.annotation.Nullable String networkId, @javax.annotation.Nullable String assetId, @javax.annotation.Nullable String assetIdExternal) throws ApiException {
        okhttp3.Call localVarCall = v1MetricsAssetListingGetValidateBeforeCall(metricId, exchangeId, chainId, networkId, assetId, assetIdExternal, null);
        Type localVarReturnType = new TypeToken<List<V1ListingItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing of all supported metrics for asset (asynchronously)
     * Get data metrics for asset.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (optional)
     * @param chainId Chain identifier (optional)
     * @param networkId Network identifier (optional)
     * @param assetId Asset identifier (from the Metadata -&gt; Assets) (optional)
     * @param assetIdExternal The asset external identifier (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsAssetListingGetAsync(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String exchangeId, @javax.annotation.Nullable String chainId, @javax.annotation.Nullable String networkId, @javax.annotation.Nullable String assetId, @javax.annotation.Nullable String assetIdExternal, final ApiCallback<List<V1ListingItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MetricsAssetListingGetValidateBeforeCall(metricId, exchangeId, chainId, networkId, assetId, assetIdExternal, _callback);
        Type localVarReturnType = new TypeToken<List<V1ListingItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MetricsExchangeCurrentGet
     * @param exchangeId The exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param metricId The metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsExchangeCurrentGetCall(@javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable String metricId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/metrics/exchange/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metricId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metric_id", metricId));
        }

        if (exchangeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exchange_id", exchangeId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MetricsExchangeCurrentGetValidateBeforeCall(@javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable String metricId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling v1MetricsExchangeCurrentGet(Async)");
        }

        return v1MetricsExchangeCurrentGetCall(exchangeId, metricId, _callback);

    }

    /**
     * Current metrics for given exchange
     * Get current exchange metrics values.
     * @param exchangeId The exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param metricId The metric identifier (from the Metrics -&gt; Listing) (optional)
     * @return List&lt;V1GeneralData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1GeneralData> v1MetricsExchangeCurrentGet(@javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable String metricId) throws ApiException {
        ApiResponse<List<V1GeneralData>> localVarResp = v1MetricsExchangeCurrentGetWithHttpInfo(exchangeId, metricId);
        return localVarResp.getData();
    }

    /**
     * Current metrics for given exchange
     * Get current exchange metrics values.
     * @param exchangeId The exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param metricId The metric identifier (from the Metrics -&gt; Listing) (optional)
     * @return ApiResponse&lt;List&lt;V1GeneralData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1GeneralData>> v1MetricsExchangeCurrentGetWithHttpInfo(@javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable String metricId) throws ApiException {
        okhttp3.Call localVarCall = v1MetricsExchangeCurrentGetValidateBeforeCall(exchangeId, metricId, null);
        Type localVarReturnType = new TypeToken<List<V1GeneralData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Current metrics for given exchange (asynchronously)
     * Get current exchange metrics values.
     * @param exchangeId The exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param metricId The metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsExchangeCurrentGetAsync(@javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable String metricId, final ApiCallback<List<V1GeneralData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MetricsExchangeCurrentGetValidateBeforeCall(exchangeId, metricId, _callback);
        Type localVarReturnType = new TypeToken<List<V1GeneralData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MetricsExchangeHistoryGet
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (required)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsExchangeHistoryGetCall(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/metrics/exchange/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metricId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metric_id", metricId));
        }

        if (exchangeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exchange_id", exchangeId));
        }

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_start", timeStart));
        }

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_end", timeEnd));
        }

        if (timeFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_format", timeFormat));
        }

        if (periodId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period_id", periodId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MetricsExchangeHistoryGetValidateBeforeCall(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metricId' is set
        if (metricId == null) {
            throw new ApiException("Missing the required parameter 'metricId' when calling v1MetricsExchangeHistoryGet(Async)");
        }

        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling v1MetricsExchangeHistoryGet(Async)");
        }

        return v1MetricsExchangeHistoryGetCall(metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit, _callback);

    }

    /**
     * Historical metrics for the exchange
     * Get exchange metrics history.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (required)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List&lt;V1MetricData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1MetricData> v1MetricsExchangeHistoryGet(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<List<V1MetricData>> localVarResp = v1MetricsExchangeHistoryGetWithHttpInfo(metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit);
        return localVarResp.getData();
    }

    /**
     * Historical metrics for the exchange
     * Get exchange metrics history.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (required)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return ApiResponse&lt;List&lt;V1MetricData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1MetricData>> v1MetricsExchangeHistoryGetWithHttpInfo(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = v1MetricsExchangeHistoryGetValidateBeforeCall(metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit, null);
        Type localVarReturnType = new TypeToken<List<V1MetricData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Historical metrics for the exchange (asynchronously)
     * Get exchange metrics history.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (required)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsExchangeHistoryGetAsync(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit, final ApiCallback<List<V1MetricData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MetricsExchangeHistoryGetValidateBeforeCall(metricId, exchangeId, timeStart, timeEnd, timeFormat, periodId, limit, _callback);
        Type localVarReturnType = new TypeToken<List<V1MetricData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MetricsExchangeListingGet
     * @param exchangeId The exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param metricId The metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsExchangeListingGetCall(@javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable String metricId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/metrics/exchange/listing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metricId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metric_id", metricId));
        }

        if (exchangeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exchange_id", exchangeId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MetricsExchangeListingGetValidateBeforeCall(@javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable String metricId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exchangeId' is set
        if (exchangeId == null) {
            throw new ApiException("Missing the required parameter 'exchangeId' when calling v1MetricsExchangeListingGet(Async)");
        }

        return v1MetricsExchangeListingGetCall(exchangeId, metricId, _callback);

    }

    /**
     * Listing of all supported exchange metrics
     * Get data metrics for exchange.
     * @param exchangeId The exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param metricId The metric identifier (from the Metrics -&gt; Listing) (optional)
     * @return List&lt;V1ListingItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1ListingItem> v1MetricsExchangeListingGet(@javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable String metricId) throws ApiException {
        ApiResponse<List<V1ListingItem>> localVarResp = v1MetricsExchangeListingGetWithHttpInfo(exchangeId, metricId);
        return localVarResp.getData();
    }

    /**
     * Listing of all supported exchange metrics
     * Get data metrics for exchange.
     * @param exchangeId The exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param metricId The metric identifier (from the Metrics -&gt; Listing) (optional)
     * @return ApiResponse&lt;List&lt;V1ListingItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1ListingItem>> v1MetricsExchangeListingGetWithHttpInfo(@javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable String metricId) throws ApiException {
        okhttp3.Call localVarCall = v1MetricsExchangeListingGetValidateBeforeCall(exchangeId, metricId, null);
        Type localVarReturnType = new TypeToken<List<V1ListingItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing of all supported exchange metrics (asynchronously)
     * Get data metrics for exchange.
     * @param exchangeId The exchange identifier (from the Metadata -&gt; Exchanges) (required)
     * @param metricId The metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsExchangeListingGetAsync(@javax.annotation.Nonnull String exchangeId, @javax.annotation.Nullable String metricId, final ApiCallback<List<V1ListingItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MetricsExchangeListingGetValidateBeforeCall(exchangeId, metricId, _callback);
        Type localVarReturnType = new TypeToken<List<V1ListingItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MetricsListingGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsListingGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/metrics/listing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MetricsListingGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v1MetricsListingGetCall(_callback);

    }

    /**
     * Listing of all supported metrics by CoinAPI
     * Get all data metrics.
     * @return List&lt;V1Metric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1Metric> v1MetricsListingGet() throws ApiException {
        ApiResponse<List<V1Metric>> localVarResp = v1MetricsListingGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Listing of all supported metrics by CoinAPI
     * Get all data metrics.
     * @return ApiResponse&lt;List&lt;V1Metric&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1Metric>> v1MetricsListingGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1MetricsListingGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<V1Metric>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing of all supported metrics by CoinAPI (asynchronously)
     * Get all data metrics.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsListingGetAsync(final ApiCallback<List<V1Metric>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MetricsListingGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<V1Metric>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MetricsSymbolCurrentGet
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols) (optional)
     * @param exchangeId Exchange id (from the Metadata -&gt; Exchanges) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsSymbolCurrentGetCall(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String symbolId, @javax.annotation.Nullable String exchangeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/metrics/symbol/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metricId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metric_id", metricId));
        }

        if (symbolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol_id", symbolId));
        }

        if (exchangeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exchange_id", exchangeId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MetricsSymbolCurrentGetValidateBeforeCall(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String symbolId, @javax.annotation.Nullable String exchangeId, final ApiCallback _callback) throws ApiException {
        return v1MetricsSymbolCurrentGetCall(metricId, symbolId, exchangeId, _callback);

    }

    /**
     * Current metrics for given symbol
     * Get current symbol metrics.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols) (optional)
     * @param exchangeId Exchange id (from the Metadata -&gt; Exchanges) (optional)
     * @return List&lt;V1GeneralData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1GeneralData> v1MetricsSymbolCurrentGet(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String symbolId, @javax.annotation.Nullable String exchangeId) throws ApiException {
        ApiResponse<List<V1GeneralData>> localVarResp = v1MetricsSymbolCurrentGetWithHttpInfo(metricId, symbolId, exchangeId);
        return localVarResp.getData();
    }

    /**
     * Current metrics for given symbol
     * Get current symbol metrics.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols) (optional)
     * @param exchangeId Exchange id (from the Metadata -&gt; Exchanges) (optional)
     * @return ApiResponse&lt;List&lt;V1GeneralData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1GeneralData>> v1MetricsSymbolCurrentGetWithHttpInfo(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String symbolId, @javax.annotation.Nullable String exchangeId) throws ApiException {
        okhttp3.Call localVarCall = v1MetricsSymbolCurrentGetValidateBeforeCall(metricId, symbolId, exchangeId, null);
        Type localVarReturnType = new TypeToken<List<V1GeneralData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Current metrics for given symbol (asynchronously)
     * Get current symbol metrics.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols) (optional)
     * @param exchangeId Exchange id (from the Metadata -&gt; Exchanges) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsSymbolCurrentGetAsync(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String symbolId, @javax.annotation.Nullable String exchangeId, final ApiCallback<List<V1GeneralData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MetricsSymbolCurrentGetValidateBeforeCall(metricId, symbolId, exchangeId, _callback);
        Type localVarReturnType = new TypeToken<List<V1GeneralData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MetricsSymbolHistoryGet
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (required)
     * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsSymbolHistoryGetCall(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/metrics/symbol/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metricId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metric_id", metricId));
        }

        if (symbolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol_id", symbolId));
        }

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_start", timeStart));
        }

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_end", timeEnd));
        }

        if (timeFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_format", timeFormat));
        }

        if (periodId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period_id", periodId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MetricsSymbolHistoryGetValidateBeforeCall(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metricId' is set
        if (metricId == null) {
            throw new ApiException("Missing the required parameter 'metricId' when calling v1MetricsSymbolHistoryGet(Async)");
        }

        // verify the required parameter 'symbolId' is set
        if (symbolId == null) {
            throw new ApiException("Missing the required parameter 'symbolId' when calling v1MetricsSymbolHistoryGet(Async)");
        }

        return v1MetricsSymbolHistoryGetCall(metricId, symbolId, timeStart, timeEnd, timeFormat, periodId, limit, _callback);

    }

    /**
     * Historical metrics for symbol
     * Get symbol metrics history.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (required)
     * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List&lt;V1MetricData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1MetricData> v1MetricsSymbolHistoryGet(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<List<V1MetricData>> localVarResp = v1MetricsSymbolHistoryGetWithHttpInfo(metricId, symbolId, timeStart, timeEnd, timeFormat, periodId, limit);
        return localVarResp.getData();
    }

    /**
     * Historical metrics for symbol
     * Get symbol metrics history.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (required)
     * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return ApiResponse&lt;List&lt;V1MetricData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1MetricData>> v1MetricsSymbolHistoryGetWithHttpInfo(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = v1MetricsSymbolHistoryGetValidateBeforeCall(metricId, symbolId, timeStart, timeEnd, timeFormat, periodId, limit, null);
        Type localVarReturnType = new TypeToken<List<V1MetricData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Historical metrics for symbol (asynchronously)
     * Get symbol metrics history.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (required)
     * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols) (required)
     * @param timeStart Starting time in ISO 8601 (optional)
     * @param timeEnd Ending time in ISO 8601 (optional)
     * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsSymbolHistoryGetAsync(@javax.annotation.Nonnull String metricId, @javax.annotation.Nonnull String symbolId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable String timeFormat, @javax.annotation.Nullable String periodId, @javax.annotation.Nullable Integer limit, final ApiCallback<List<V1MetricData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MetricsSymbolHistoryGetValidateBeforeCall(metricId, symbolId, timeStart, timeEnd, timeFormat, periodId, limit, _callback);
        Type localVarReturnType = new TypeToken<List<V1MetricData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MetricsSymbolListingGet
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (optional)
     * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsSymbolListingGetCall(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String exchangeId, @javax.annotation.Nullable String symbolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/metrics/symbol/listing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metricId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metric_id", metricId));
        }

        if (exchangeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exchange_id", exchangeId));
        }

        if (symbolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol_id", symbolId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MetricsSymbolListingGetValidateBeforeCall(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String exchangeId, @javax.annotation.Nullable String symbolId, final ApiCallback _callback) throws ApiException {
        return v1MetricsSymbolListingGetCall(metricId, exchangeId, symbolId, _callback);

    }

    /**
     * Listing of all supported metrics for symbol
     * Get data metrics for symbol.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (optional)
     * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols) (optional)
     * @return List&lt;V1ListingItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<V1ListingItem> v1MetricsSymbolListingGet(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String exchangeId, @javax.annotation.Nullable String symbolId) throws ApiException {
        ApiResponse<List<V1ListingItem>> localVarResp = v1MetricsSymbolListingGetWithHttpInfo(metricId, exchangeId, symbolId);
        return localVarResp.getData();
    }

    /**
     * Listing of all supported metrics for symbol
     * Get data metrics for symbol.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (optional)
     * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols) (optional)
     * @return ApiResponse&lt;List&lt;V1ListingItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V1ListingItem>> v1MetricsSymbolListingGetWithHttpInfo(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String exchangeId, @javax.annotation.Nullable String symbolId) throws ApiException {
        okhttp3.Call localVarCall = v1MetricsSymbolListingGetValidateBeforeCall(metricId, exchangeId, symbolId, null);
        Type localVarReturnType = new TypeToken<List<V1ListingItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing of all supported metrics for symbol (asynchronously)
     * Get data metrics for symbol.
     * @param metricId Metric identifier (from the Metrics -&gt; Listing) (optional)
     * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges) (optional)
     * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MetricsSymbolListingGetAsync(@javax.annotation.Nullable String metricId, @javax.annotation.Nullable String exchangeId, @javax.annotation.Nullable String symbolId, final ApiCallback<List<V1ListingItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MetricsSymbolListingGetValidateBeforeCall(metricId, exchangeId, symbolId, _callback);
        Type localVarReturnType = new TypeToken<List<V1ListingItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
