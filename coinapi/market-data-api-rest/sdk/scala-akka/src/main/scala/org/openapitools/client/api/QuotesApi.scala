/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.Quote
import org.openapitools.client.model.QuoteTrade
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object QuotesApi {

  def apply(baseUrl: String = "https://rest.coinapi.io") = new QuotesApi(baseUrl)
}

class QuotesApi(baseUrl: String) {

  /**
   * Get current quotes for all symbols or for a specific symbol.                :::info  When requesting current data for a specific symbol, output is not encapsulated into JSON array as only one item is returned.  :::
   * 
   * Expected answers:
   *   code 200 : Seq[QuoteTrade] (successful operation)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   * 
   * @param filterSymbolId Comma or semicolon delimited parts of symbol identifier used to filter response. (optional)
   */
  def v1QuotesCurrentGet(filterSymbolId: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[QuoteTrade]] =
    ApiRequest[Seq[QuoteTrade]](ApiMethods.GET, baseUrl, "/v1/quotes/current", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withQueryParam("filter_symbol_id", filterSymbolId)
      .withSuccessResponse[Seq[QuoteTrade]](200)
      

  /**
   * Get latest updates of the quotes up to 1 minute ago. Latest data is always returned in time descending order.
   * 
   * Expected answers:
   *   code 200 : Seq[Quote] (successful operation)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   * 
   * @param filterSymbolId Comma or semicolon delimited parts of symbol identifier used to filter response. (optional)
   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   */
  def v1QuotesLatestGet(filterSymbolId: Option[String] = None, limit: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Quote]] =
    ApiRequest[Seq[Quote]](ApiMethods.GET, baseUrl, "/v1/quotes/latest", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withQueryParam("filter_symbol_id", filterSymbolId)
      .withQueryParam("limit", limit)
      .withSuccessResponse[Seq[Quote]](200)
      

  /**
   * Expected answers:
   *   code 200 : QuoteTrade (successful operation)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   * 
   * @param symbolId The symbol identifier (from the Metadata -> Symbols)
   */
  def v1QuotesSymbolIdCurrentGet(symbolId: String)(implicit apiKey: ApiKeyValue): ApiRequest[QuoteTrade] =
    ApiRequest[QuoteTrade](ApiMethods.GET, baseUrl, "/v1/quotes/{symbol_id}/current", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withPathParam("symbol_id", symbolId)
      .withSuccessResponse[QuoteTrade](200)
      

  /**
   * Get historical quote updates within requested time range, returned in time ascending order.    :::warning  The 'time_start' and 'time_end' parameters must be from the same day as this endpoint provides intraday data only for specific day.  Please use the 'date' parameter instead for querying data for a specific day without filter.  :::
   * 
   * Expected answers:
   *   code 200 : Seq[Quote] (successful operation)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   * 
   * @param symbolId Symbol identifier for requested timeseries (from the Metadata -> Symbols)
   * @param date Date in ISO 8601, returned data is for the whole given day (preferred method, required if 'time_start' is not provided)
   * @param timeStart Starting time in ISO 8601
   * @param timeEnd Timeseries ending time in ISO 8601
   * @param limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   */
  def v1QuotesSymbolIdHistoryGet(symbolId: String, date: Option[String] = None, timeStart: Option[String] = None, timeEnd: Option[String] = None, limit: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Quote]] =
    ApiRequest[Seq[Quote]](ApiMethods.GET, baseUrl, "/v1/quotes/{symbol_id}/history", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withQueryParam("date", date)
      .withQueryParam("time_start", timeStart)
      .withQueryParam("time_end", timeEnd)
      .withQueryParam("limit", limit)
      .withPathParam("symbol_id", symbolId)
      .withSuccessResponse[Seq[Quote]](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[Quote] (successful operation)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   * 
   * @param symbolId Symbol identifier of requested timeseries (from the Metadata -> Symbols)
   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   */
  def v1QuotesSymbolIdLatestGet(symbolId: String, limit: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Quote]] =
    ApiRequest[Seq[Quote]](ApiMethods.GET, baseUrl, "/v1/quotes/{symbol_id}/latest", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withQueryParam("limit", limit)
      .withPathParam("symbol_id", symbolId)
      .withSuccessResponse[Seq[Quote]](200)
      



}

