/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.Trade
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object TradesApi {

  def apply(baseUrl: String = "https://rest.coinapi.io") = new TradesApi(baseUrl)
}

class TradesApi(baseUrl: String) {

  /**
   * Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.
   * 
   * Expected answers:
   *   code 200 : Seq[Trade] (successful operation)
   * 
   * Available security schemes:
   *   APIKey (apiKey)
   *   JWT (http)
   * 
   * @param filterSymbolId Comma or semicolon delimited parts of symbol identifier used to filter response. (optional)
   * @param includeId Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.
   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   */
  def v1TradesLatestGet(filterSymbolId: Option[String] = None, includeId: Option[Boolean] = None, limit: Option[Int] = None)(implicit apiKey: ApiKeyValue, bearerToken: BearerToken): ApiRequest[Seq[Trade]] =
    ApiRequest[Seq[Trade]](ApiMethods.GET, baseUrl, "/v1/trades/latest", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withCredentials(bearerToken).withQueryParam("filter_symbol_id", filterSymbolId)
      .withQueryParam("include_id", includeId)
      .withQueryParam("limit", limit)
      .withSuccessResponse[Seq[Trade]](200)
      

  /**
   * Get history transactions from specific symbol, returned in time ascending order.  :::warning The 'time_start' and 'time_end' parameters must be from the same day as this endpoint provides intraday data only for specific day. Please use the 'date' parameter instead for querying data for a specific day without filter. :::
   * 
   * Expected answers:
   *   code 200 : Seq[Trade] (successful operation)
   * 
   * Available security schemes:
   *   APIKey (apiKey)
   *   JWT (http)
   * 
   * @param symbolId Symbol identifier for requested timeseries (from the Metadata -> Symbols)
   * @param date Date in ISO 8601, returned data is for the whole given day (required if 'time_start' is not provided)
   * @param timeStart Starting time in ISO 8601
   * @param timeEnd Timeseries ending time in ISO 8601
   * @param limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   * @param includeId Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.
   */
  def v1TradesSymbolIdHistoryGet(symbolId: String, date: Option[String] = None, timeStart: Option[String] = None, timeEnd: Option[String] = None, limit: Option[Int] = None, includeId: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, bearerToken: BearerToken): ApiRequest[Seq[Trade]] =
    ApiRequest[Seq[Trade]](ApiMethods.GET, baseUrl, "/v1/trades/{symbol_id}/history", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withCredentials(bearerToken).withQueryParam("date", date)
      .withQueryParam("time_start", timeStart)
      .withQueryParam("time_end", timeEnd)
      .withQueryParam("limit", limit)
      .withQueryParam("include_id", includeId)
      .withPathParam("symbol_id", symbolId)
      .withSuccessResponse[Seq[Trade]](200)
      

  /**
   * Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.
   * 
   * Expected answers:
   *   code 200 : Seq[Trade] (successful operation)
   * 
   * Available security schemes:
   *   APIKey (apiKey)
   *   JWT (http)
   * 
   * @param symbolId Symbol identifier for requested timeseries (from the Metadata -> Symbols)
   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   * @param includeId Information that additional exchange trade identifier should be included in the `id_trade` parameter of the trade if exchange providing identifiers.
   */
  def v1TradesSymbolIdLatestGet(symbolId: String, limit: Option[Int] = None, includeId: Option[Boolean] = None)(implicit apiKey: ApiKeyValue, bearerToken: BearerToken): ApiRequest[Seq[Trade]] =
    ApiRequest[Seq[Trade]](ApiMethods.GET, baseUrl, "/v1/trades/{symbol_id}/latest", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withCredentials(bearerToken).withQueryParam("limit", limit)
      .withQueryParam("include_id", includeId)
      .withPathParam("symbol_id", symbolId)
      .withSuccessResponse[Seq[Trade]](200)
      



}

