/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.OrderBook
import org.openapitools.client.model.OrderBookBase
import org.openapitools.client.model.OrderBookDepth
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object OrderBookApi {

  def apply(baseUrl: String = "https://rest.coinapi.io") = new OrderBookApi(baseUrl)
}

class OrderBookApi(baseUrl: String) {

  /**
   * Retrieves the current order book for the specified symbol.
   * 
   * Expected answers:
   *   code 200 : OrderBookBase (successful operation)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   * 
   * @param symbolId The symbol ID (from the Metadata -> Symbols)
   * @param limitLevels The maximum number of levels to include in the response.
   */
  def v1OrderbooksSymbolIdCurrentGet(symbolId: String, limitLevels: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[OrderBookBase] =
    ApiRequest[OrderBookBase](ApiMethods.GET, baseUrl, "/v1/orderbooks/{symbol_id}/current", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withQueryParam("limit_levels", limitLevels)
      .withPathParam("symbol_id", symbolId)
      .withSuccessResponse[OrderBookBase](200)
      

  /**
   * Retrieves the current depth of the order book for the specified symbol.
   * 
   * Expected answers:
   *   code 200 : OrderBookDepth (successful operation)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   * 
   * @param symbolId The symbol ID (from the Metadata -> Symbols)
   * @param limitLevels The maximum number of levels to include in the response.
   */
  def v1OrderbooksSymbolIdDepthCurrentGet(symbolId: String, limitLevels: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[OrderBookDepth] =
    ApiRequest[OrderBookDepth](ApiMethods.GET, baseUrl, "/v1/orderbooks/{symbol_id}/depth/current", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withQueryParam("limit_levels", limitLevels)
      .withPathParam("symbol_id", symbolId)
      .withSuccessResponse[OrderBookDepth](200)
      

  /**
   * Get historical order book snapshots for a specific symbol within time range, returned in time ascending order.                :::info  The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels.  :::    :::warning  The 'time_start' and 'time_end' parameters must be from the same day as this endpoint provides intraday data only for specific day.  Please use the 'date' parameter instead for querying data for a specific day without filter.  :::
   * 
   * Expected answers:
   *   code 200 : Seq[OrderBook] (successful operation)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   * 
   * @param symbolId Symbol identifier for requested timeseries (from the Metadata -> Symbols)
   * @param date Date in ISO 8601, returned data is for the whole given day (preferred method, required if 'time_start' is not provided)
   * @param timeStart Starting time in ISO 8601 (deprecated, use 'date' instead)
   * @param timeEnd Timeseries ending time in ISO 8601 (deprecated, use 'date' instead)
   * @param limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional)
   */
  def v1OrderbooksSymbolIdHistoryGet(symbolId: String, date: Option[String] = None, timeStart: Option[String] = None, timeEnd: Option[String] = None, limit: Option[Int] = None, limitLevels: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[OrderBook]] =
    ApiRequest[Seq[OrderBook]](ApiMethods.GET, baseUrl, "/v1/orderbooks/{symbol_id}/history", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withQueryParam("date", date)
      .withQueryParam("time_start", timeStart)
      .withQueryParam("time_end", timeEnd)
      .withQueryParam("limit", limit)
      .withQueryParam("limit_levels", limitLevels)
      .withPathParam("symbol_id", symbolId)
      .withSuccessResponse[Seq[OrderBook]](200)
      

  /**
   * Get latest order book snapshots for a specific symbol, returned in time descending order.                :::info  The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels.  :::
   * 
   * Expected answers:
   *   code 200 : Seq[OrderBook] (successful operation)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   * 
   * @param symbolId Symbol identifier of requested timeseries (from the Metadata -> Symbols)
   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional)
   */
  def v1OrderbooksSymbolIdLatestGet(symbolId: String, limit: Option[Int] = None, limitLevels: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[OrderBook]] =
    ApiRequest[Seq[OrderBook]](ApiMethods.GET, baseUrl, "/v1/orderbooks/{symbol_id}/latest", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withQueryParam("limit", limit)
      .withQueryParam("limit_levels", limitLevels)
      .withPathParam("symbol_id", symbolId)
      .withSuccessResponse[Seq[OrderBook]](200)
      



}

