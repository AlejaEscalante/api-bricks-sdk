/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.Chain
import org.openapitools.client.model.ExternalAsset
import org.openapitools.client.model.ExternalExchange
import org.openapitools.client.model.MetricInfo
import java.time.OffsetDateTime
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object ExternalMetricsApi {

  def apply(baseUrl: String = "https://rest.coinapi.io") = new ExternalMetricsApi(baseUrl)
}

class ExternalMetricsApi(baseUrl: String) {

  /**
   * Get asset metrics history from external data providers. Data is typically aggregated daily.
   * 
   * Expected answers:
   *   code 200 : Seq[Any] (successful operation)
   *   code 400 :  (Invalid input, e.g., missing required parameters, invalid asset_id.)
   *   code 500 :  (Internal server error.)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   * 
   * @param metricId Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD` - internal metric key)
   * @param assetId Asset identifier (e.g., `USDC`, `USDT` - from supported assets list)
   * @param timeStart Starting time in ISO 8601
   * @param timeEnd Ending time in ISO 8601
   * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
   * @param periodId Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   */
  def v1ExternalmetricsAssetHistoryGet(metricId: String, assetId: String, timeStart: Option[OffsetDateTime] = None, timeEnd: Option[OffsetDateTime] = None, timeFormat: Option[String] = None, periodId: Option[String] = None, limit: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Any]] =
    ApiRequest[Seq[Any]](ApiMethods.GET, baseUrl, "/v1/externalmetrics/asset/history", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withQueryParam("metric_id", metricId)
      .withQueryParam("asset_id", assetId)
      .withQueryParam("time_start", timeStart)
      .withQueryParam("time_end", timeEnd)
      .withQueryParam("time_format", timeFormat)
      .withQueryParam("period_id", periodId)
      .withQueryParam("limit", limit)
      .withSuccessResponse[Seq[Any]](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](500)
      

  /**
   * Get all metrics that are actually available for the specified asset from external providers.
   * 
   * Expected answers:
   *   code 200 : Seq[MetricInfo] (successful operation)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   * 
   * @param assetId Asset identifier (e.g., USDC, USDT)
   */
  def v1ExternalmetricsAssetListingGet(assetId: String)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[MetricInfo]] =
    ApiRequest[Seq[MetricInfo]](ApiMethods.GET, baseUrl, "/v1/externalmetrics/asset/listing", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withQueryParam("asset_id", assetId)
      .withSuccessResponse[Seq[MetricInfo]](200)
      

  /**
   * Get all assets (primarily stablecoins) supported by external data providers.
   * 
   * Expected answers:
   *   code 200 : Seq[ExternalAsset] (successful operation)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   */
  def v1ExternalmetricsAssetsGet()(implicit apiKey: ApiKeyValue): ApiRequest[Seq[ExternalAsset]] =
    ApiRequest[Seq[ExternalAsset]](ApiMethods.GET, baseUrl, "/v1/externalmetrics/assets", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withSuccessResponse[Seq[ExternalAsset]](200)
      

  /**
   * Get chain metrics history from external data providers. Data is typically aggregated daily.
   * 
   * Expected answers:
   *   code 200 : Seq[Any] (successful operation)
   *   code 400 :  (Invalid input, e.g., missing required parameters, invalid chain_id.)
   *   code 500 :  (Internal server error.)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   * 
   * @param metricId Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD` - internal metric key)
   * @param chainId Chain identifier (e.g., `Ethereum`, `Arbitrum` - from supported chains list)
   * @param timeStart Starting time in ISO 8601
   * @param timeEnd Ending time in ISO 8601
   * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
   * @param periodId Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   */
  def v1ExternalmetricsChainHistoryGet(metricId: String, chainId: String, timeStart: Option[OffsetDateTime] = None, timeEnd: Option[OffsetDateTime] = None, timeFormat: Option[String] = None, periodId: Option[String] = None, limit: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Any]] =
    ApiRequest[Seq[Any]](ApiMethods.GET, baseUrl, "/v1/externalmetrics/chain/history", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withQueryParam("metric_id", metricId)
      .withQueryParam("chain_id", chainId)
      .withQueryParam("time_start", timeStart)
      .withQueryParam("time_end", timeEnd)
      .withQueryParam("time_format", timeFormat)
      .withQueryParam("period_id", periodId)
      .withQueryParam("limit", limit)
      .withSuccessResponse[Seq[Any]](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](500)
      

  /**
   * Get all metrics that are actually available for the specified blockchain chain from external providers.
   * 
   * Expected answers:
   *   code 200 : Seq[MetricInfo] (successful operation)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   * 
   * @param chainId Chain identifier (e.g., ETHEREUM, ARBITRUM)
   */
  def v1ExternalmetricsChainListingGet(chainId: String)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[MetricInfo]] =
    ApiRequest[Seq[MetricInfo]](ApiMethods.GET, baseUrl, "/v1/externalmetrics/chain/listing", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withQueryParam("chain_id", chainId)
      .withSuccessResponse[Seq[MetricInfo]](200)
      

  /**
   * Get all blockchain chains supported by external data providers.
   * 
   * Expected answers:
   *   code 200 : Seq[Chain] (successful operation)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   */
  def v1ExternalmetricsChainsGet()(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Chain]] =
    ApiRequest[Seq[Chain]](ApiMethods.GET, baseUrl, "/v1/externalmetrics/chains", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withSuccessResponse[Seq[Chain]](200)
      

  /**
   * Get exchange metrics history from external data providers or internal sources based on metric type.
   * 
   * Expected answers:
   *   code 200 : Seq[Any] (successful operation)
   *   code 400 :  (Invalid input, e.g., missing required parameters, invalid exchange_id mapping.)
   *   code 500 :  (Internal server error.)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   * 
   * @param metricId Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD` for external, or generic metric IDs)
   * @param exchangeId Exchange identifier (e.g., `BINANCE`, `UNISWAP-V3-ETHEREUM`)
   * @param timeStart Starting time in ISO 8601
   * @param timeEnd Ending time in ISO 8601
   * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
   * @param periodId Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   */
  def v1ExternalmetricsExchangeHistoryGet(metricId: String, exchangeId: String, timeStart: Option[OffsetDateTime] = None, timeEnd: Option[OffsetDateTime] = None, timeFormat: Option[String] = None, periodId: Option[String] = None, limit: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Any]] =
    ApiRequest[Seq[Any]](ApiMethods.GET, baseUrl, "/v1/externalmetrics/exchange/history", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withQueryParam("metric_id", metricId)
      .withQueryParam("exchange_id", exchangeId)
      .withQueryParam("time_start", timeStart)
      .withQueryParam("time_end", timeEnd)
      .withQueryParam("time_format", timeFormat)
      .withQueryParam("period_id", periodId)
      .withQueryParam("limit", limit)
      .withSuccessResponse[Seq[Any]](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](500)
      

  /**
   * Get all metrics that are actually available for the specified exchange from both external providers and internal sources.
   * 
   * Expected answers:
   *   code 200 : Seq[MetricInfo] (successful operation)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   * 
   * @param exchangeId Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM)
   */
  def v1ExternalmetricsExchangeListingGet(exchangeId: String)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[MetricInfo]] =
    ApiRequest[Seq[MetricInfo]](ApiMethods.GET, baseUrl, "/v1/externalmetrics/exchange/listing", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withQueryParam("exchange_id", exchangeId)
      .withSuccessResponse[Seq[MetricInfo]](200)
      

  /**
   * Get all exchanges that have mapping to external data providers for metrics that actually have sources.  Only returns exchanges that are properly mapped to external protocols for metrics with defined sources.
   * 
   * Expected answers:
   *   code 200 : Seq[ExternalExchange] (successful operation)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   */
  def v1ExternalmetricsExchangesGet()(implicit apiKey: ApiKeyValue): ApiRequest[Seq[ExternalExchange]] =
    ApiRequest[Seq[ExternalExchange]](ApiMethods.GET, baseUrl, "/v1/externalmetrics/exchanges", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withSuccessResponse[Seq[ExternalExchange]](200)
      

  /**
   * Get all metrics available from external data providers and internal generic metrics.  External metrics have detailed descriptions, while generic metrics are marked as such.
   * 
   * Expected answers:
   *   code 200 : Seq[MetricInfo] (successful operation)
   * 
   * Available security schemes:
   *   ApiKey (apiKey)
   */
  def v1ExternalmetricsListingGet()(implicit apiKey: ApiKeyValue): ApiRequest[Seq[MetricInfo]] =
    ApiRequest[Seq[MetricInfo]](ApiMethods.GET, baseUrl, "/v1/externalmetrics/listing", "application/json")
      .withApiKey(apiKey, "X-CoinAPI-Key", HEADER)
      .withSuccessResponse[Seq[MetricInfo]](200)
      



}

