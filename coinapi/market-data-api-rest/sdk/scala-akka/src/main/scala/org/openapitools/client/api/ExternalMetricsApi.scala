/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.MetricInfo
import java.time.OffsetDateTime
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object ExternalMetricsApi {

  def apply(baseUrl: String = "https://rest.coinapi.io") = new ExternalMetricsApi(baseUrl)
}

class ExternalMetricsApi(baseUrl: String) {

  /**
   * Get asset metrics history.
   * 
   * Expected answers:
   *   code 200 : Seq[Any] (successful operation)
   *   code 400 :  (Invalid input, e.g., missing required parameters, invalid asset_id.)
   *   code 500 :  (Internal server error.)
   * 
   * Available security schemes:
   *   APIKey (apiKey)
   *   JWT (http)
   * 
   * @param metricId Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD`)
   * @param assetId Asset identifier (e.g., `USDC`, `USDT`)
   * @param timeStart Starting time in ISO 8601
   * @param timeEnd Ending time in ISO 8601
   * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
   * @param periodId Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   */
  def v1ExternalmetricsAssetHistoryGet(metricId: String, assetId: String, timeStart: Option[OffsetDateTime] = None, timeEnd: Option[OffsetDateTime] = None, timeFormat: Option[String] = None, periodId: Option[String] = None, limit: Option[Int] = None)(implicit apiKey: ApiKeyValue, bearerToken: BearerToken): ApiRequest[Seq[Any]] =
    ApiRequest[Seq[Any]](ApiMethods.GET, baseUrl, "/v1/externalmetrics/asset/history", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withCredentials(bearerToken).withQueryParam("metric_id", metricId)
      .withQueryParam("asset_id", assetId)
      .withQueryParam("time_start", timeStart)
      .withQueryParam("time_end", timeEnd)
      .withQueryParam("time_format", timeFormat)
      .withQueryParam("period_id", periodId)
      .withQueryParam("limit", limit)
      .withSuccessResponse[Seq[Any]](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](500)
      

  /**
   * Get all metrics that are actually available for the specified asset.
   * 
   * Expected answers:
   *   code 200 : Seq[MetricInfo] (successful operation)
   * 
   * Available security schemes:
   *   APIKey (apiKey)
   *   JWT (http)
   * 
   * @param assetId Asset identifier (e.g., USDC, USDT)
   */
  def v1ExternalmetricsAssetListingGet(assetId: String)(implicit apiKey: ApiKeyValue, bearerToken: BearerToken): ApiRequest[Seq[MetricInfo]] =
    ApiRequest[Seq[MetricInfo]](ApiMethods.GET, baseUrl, "/v1/externalmetrics/asset/listing", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withCredentials(bearerToken).withQueryParam("asset_id", assetId)
      .withSuccessResponse[Seq[MetricInfo]](200)
      

  /**
   * Get chain metrics history.
   * 
   * Expected answers:
   *   code 200 : Seq[Any] (successful operation)
   *   code 400 :  (Invalid input, e.g., missing required parameters, invalid chain_id.)
   *   code 500 :  (Internal server error.)
   * 
   * Available security schemes:
   *   APIKey (apiKey)
   *   JWT (http)
   * 
   * @param metricId Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD`)
   * @param chainId Chain identifier (e.g., `Ethereum`, `Arbitrum`)
   * @param timeStart Starting time in ISO 8601
   * @param timeEnd Ending time in ISO 8601
   * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
   * @param periodId Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   */
  def v1ExternalmetricsChainHistoryGet(metricId: String, chainId: String, timeStart: Option[OffsetDateTime] = None, timeEnd: Option[OffsetDateTime] = None, timeFormat: Option[String] = None, periodId: Option[String] = None, limit: Option[Int] = None)(implicit apiKey: ApiKeyValue, bearerToken: BearerToken): ApiRequest[Seq[Any]] =
    ApiRequest[Seq[Any]](ApiMethods.GET, baseUrl, "/v1/externalmetrics/chain/history", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withCredentials(bearerToken).withQueryParam("metric_id", metricId)
      .withQueryParam("chain_id", chainId)
      .withQueryParam("time_start", timeStart)
      .withQueryParam("time_end", timeEnd)
      .withQueryParam("time_format", timeFormat)
      .withQueryParam("period_id", periodId)
      .withQueryParam("limit", limit)
      .withSuccessResponse[Seq[Any]](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](500)
      

  /**
   * Get all metrics that are actually available for the specified blockchain chain.
   * 
   * Expected answers:
   *   code 200 : Seq[MetricInfo] (successful operation)
   * 
   * Available security schemes:
   *   APIKey (apiKey)
   *   JWT (http)
   * 
   * @param chainId Chain identifier (e.g., ETHEREUM, ARBITRUM)
   */
  def v1ExternalmetricsChainListingGet(chainId: String)(implicit apiKey: ApiKeyValue, bearerToken: BearerToken): ApiRequest[Seq[MetricInfo]] =
    ApiRequest[Seq[MetricInfo]](ApiMethods.GET, baseUrl, "/v1/externalmetrics/chain/listing", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withCredentials(bearerToken).withQueryParam("chain_id", chainId)
      .withSuccessResponse[Seq[MetricInfo]](200)
      

  /**
   * Get exchange metrics history.
   * 
   * Expected answers:
   *   code 200 : Seq[Any] (successful operation)
   *   code 400 :  (Invalid input, e.g., missing required parameters, invalid exchange_id mapping.)
   *   code 500 :  (Internal server error.)
   * 
   * Available security schemes:
   *   APIKey (apiKey)
   *   JWT (http)
   * 
   * @param metricId Metric identifier (e.g., `TVL`, `STABLES_BRIDGED_USD`)
   * @param exchangeId Exchange identifier (e.g., `BINANCE`, `UNISWAP-V3-ETHEREUM`)
   * @param timeStart Starting time in ISO 8601
   * @param timeEnd Ending time in ISO 8601
   * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
   * @param periodId Identifier of requested timeseries period (e.g. `1MIN` or `2MTH`), default value is `1MIN`
   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   */
  def v1ExternalmetricsExchangeHistoryGet(metricId: String, exchangeId: String, timeStart: Option[OffsetDateTime] = None, timeEnd: Option[OffsetDateTime] = None, timeFormat: Option[String] = None, periodId: Option[String] = None, limit: Option[Int] = None)(implicit apiKey: ApiKeyValue, bearerToken: BearerToken): ApiRequest[Seq[Any]] =
    ApiRequest[Seq[Any]](ApiMethods.GET, baseUrl, "/v1/externalmetrics/exchange/history", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withCredentials(bearerToken).withQueryParam("metric_id", metricId)
      .withQueryParam("exchange_id", exchangeId)
      .withQueryParam("time_start", timeStart)
      .withQueryParam("time_end", timeEnd)
      .withQueryParam("time_format", timeFormat)
      .withQueryParam("period_id", periodId)
      .withQueryParam("limit", limit)
      .withSuccessResponse[Seq[Any]](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](500)
      

  /**
   * Get all metrics that are actually available for the specified exchange.
   * 
   * Expected answers:
   *   code 200 : Seq[MetricInfo] (successful operation)
   * 
   * Available security schemes:
   *   APIKey (apiKey)
   *   JWT (http)
   * 
   * @param exchangeId Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM)
   */
  def v1ExternalmetricsExchangeListingGet(exchangeId: String)(implicit apiKey: ApiKeyValue, bearerToken: BearerToken): ApiRequest[Seq[MetricInfo]] =
    ApiRequest[Seq[MetricInfo]](ApiMethods.GET, baseUrl, "/v1/externalmetrics/exchange/listing", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withCredentials(bearerToken).withQueryParam("exchange_id", exchangeId)
      .withSuccessResponse[Seq[MetricInfo]](200)
      

  /**
   * Get all metrics available in the system.
   * 
   * Expected answers:
   *   code 200 : Seq[MetricInfo] (successful operation)
   * 
   * Available security schemes:
   *   APIKey (apiKey)
   *   JWT (http)
   */
  def v1ExternalmetricsListingGet()(implicit apiKey: ApiKeyValue, bearerToken: BearerToken): ApiRequest[Seq[MetricInfo]] =
    ApiRequest[Seq[MetricInfo]](ApiMethods.GET, baseUrl, "/v1/externalmetrics/listing", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withCredentials(bearerToken).withSuccessResponse[Seq[MetricInfo]](200)
      



}

