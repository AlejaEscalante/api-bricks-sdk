=begin
#REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Contact: support@apibricks.io
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::ExternalMetricsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ExternalMetricsApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::ExternalMetricsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ExternalMetricsApi' do
    it 'should create an instance of ExternalMetricsApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::ExternalMetricsApi)
    end
  end

  # unit tests for v1_externalmetrics_asset_history_get
  # Historical metrics for the asset from external sources
  # Get asset metrics history from external data providers. Data is typically aggregated daily.
  # @param metric_id Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; - internal metric key)
  # @param asset_id Asset identifier (e.g., &#x60;USDC&#x60;, &#x60;USDT&#x60; - from supported assets list)
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :time_start Starting time in ISO 8601
  # @option opts [Time] :time_end Ending time in ISO 8601
  # @option opts [String] :time_format If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
  # @option opts [String] :period_id Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60;
  # @option opts [Integer] :limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
  # @return [Array<Object>]
  describe 'v1_externalmetrics_asset_history_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_externalmetrics_asset_listing_get
  # Listing of metrics available for specific asset
  # Get all metrics that are actually available for the specified asset from external providers.
  # @param asset_id Asset identifier (e.g., USDC, USDT)
  # @param [Hash] opts the optional parameters
  # @return [Array<V1MetricInfo>]
  describe 'v1_externalmetrics_asset_listing_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_externalmetrics_assets_get
  # Listing of all supported external assets
  # Get all assets (primarily stablecoins) supported by external data providers.
  # @param [Hash] opts the optional parameters
  # @return [Array<V1ExternalAsset>]
  describe 'v1_externalmetrics_assets_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_externalmetrics_chain_history_get
  # Historical metrics for the chain from external sources
  # Get chain metrics history from external data providers. Data is typically aggregated daily.
  # @param metric_id Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; - internal metric key)
  # @param chain_id Chain identifier (e.g., &#x60;Ethereum&#x60;, &#x60;Arbitrum&#x60; - from supported chains list)
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :time_start Starting time in ISO 8601
  # @option opts [Time] :time_end Ending time in ISO 8601
  # @option opts [String] :time_format If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
  # @option opts [String] :period_id Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60;
  # @option opts [Integer] :limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
  # @return [Array<Object>]
  describe 'v1_externalmetrics_chain_history_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_externalmetrics_chain_listing_get
  # Listing of metrics available for specific chain
  # Get all metrics that are actually available for the specified blockchain chain from external providers.
  # @param chain_id Chain identifier (e.g., ETHEREUM, ARBITRUM)
  # @param [Hash] opts the optional parameters
  # @return [Array<V1MetricInfo>]
  describe 'v1_externalmetrics_chain_listing_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_externalmetrics_chains_get
  # Listing of all supported external chains
  # Get all blockchain chains supported by external data providers.
  # @param [Hash] opts the optional parameters
  # @return [Array<V1Chain>]
  describe 'v1_externalmetrics_chains_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_externalmetrics_exchange_history_get
  # Historical metrics for the exchange from both external and internal sources
  # Get exchange metrics history from external data providers or internal sources based on metric type.
  # @param metric_id Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60; for external, or generic metric IDs)
  # @param exchange_id Exchange identifier (e.g., &#x60;BINANCE&#x60;, &#x60;UNISWAP-V3-ETHEREUM&#x60;)
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :time_start Starting time in ISO 8601
  # @option opts [Time] :time_end Ending time in ISO 8601
  # @option opts [String] :time_format If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
  # @option opts [String] :period_id Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60;
  # @option opts [Integer] :limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
  # @return [Array<Object>]
  describe 'v1_externalmetrics_exchange_history_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_externalmetrics_exchange_listing_get
  # Listing of metrics available for specific exchange (both external and generic)
  # Get all metrics that are actually available for the specified exchange from both external providers and internal sources.
  # @param exchange_id Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM)
  # @param [Hash] opts the optional parameters
  # @return [Array<V1MetricInfo>]
  describe 'v1_externalmetrics_exchange_listing_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_externalmetrics_exchanges_get
  # Listing of all supported external exchanges
  # Get all exchanges that have mapping to external data providers for metrics that actually have sources.  Only returns exchanges that are properly mapped to external protocols for metrics with defined sources.
  # @param [Hash] opts the optional parameters
  # @return [Array<V1ExternalExchange>]
  describe 'v1_externalmetrics_exchanges_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_externalmetrics_listing_get
  # Listing of all supported metrics (both external and generic)
  # Get all metrics available from external data providers and internal generic metrics.  External metrics have detailed descriptions, while generic metrics are marked as such.
  # @param [Hash] opts the optional parameters
  # @return [Array<V1MetricInfo>]
  describe 'v1_externalmetrics_listing_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
