=begin
#CoinAPI Market Data REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Contact: support@apibricks.io
Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::MetricsV2Api
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'MetricsV2Api' do
  before do
    # run before each test
    @api_instance = OpenapiClient::MetricsV2Api.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MetricsV2Api' do
    it 'should create an instance of MetricsV2Api' do
      expect(@api_instance).to be_instance_of(OpenapiClient::MetricsV2Api)
    end
  end

  # unit tests for v2_metrics_asset_history_get
  # Historical metrics for the asset
  # Get asset metrics history.
  # @param metric_id Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;)
  # @param asset_id Asset identifier (e.g., &#x60;USDC&#x60;, &#x60;USDT&#x60;)
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :time_start Starting time in ISO 8601
  # @option opts [Time] :time_end Ending time in ISO 8601
  # @option opts [String] :time_format If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
  # @option opts [String] :period_id Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60;
  # @option opts [Integer] :limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
  # @return [Array<Object>]
  describe 'v2_metrics_asset_history_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v2_metrics_asset_listing_get
  # Listing of metrics available for specific asset
  # Get all metrics that are actually available for the specified asset.
  # @param asset_id Asset identifier (e.g., USDC, USDT)
  # @param [Hash] opts the optional parameters
  # @return [Array<V1MetricInfo>]
  describe 'v2_metrics_asset_listing_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v2_metrics_chain_history_get
  # Historical metrics for the chain
  # Get chain metrics history.
  # @param metric_id Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;)
  # @param chain_id Chain identifier (e.g., &#x60;Ethereum&#x60;, &#x60;Arbitrum&#x60;)
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :time_start Starting time in ISO 8601
  # @option opts [Time] :time_end Ending time in ISO 8601
  # @option opts [String] :time_format If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
  # @option opts [String] :period_id Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60;
  # @option opts [Integer] :limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
  # @return [Array<Object>]
  describe 'v2_metrics_chain_history_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v2_metrics_chain_listing_get
  # Listing of metrics available for specific chain
  # Get all metrics that are actually available for the specified blockchain chain.
  # @param chain_id Chain identifier (e.g., ETHEREUM, ARBITRUM)
  # @param [Hash] opts the optional parameters
  # @return [Array<V1MetricInfo>]
  describe 'v2_metrics_chain_listing_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v2_metrics_exchange_history_get
  # Historical metrics for the exchange
  # Get exchange metrics history.
  # @param metric_id Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;)
  # @param exchange_id Exchange identifier (e.g., &#x60;BINANCE&#x60;, &#x60;UNISWAP-V3-ETHEREUM&#x60;)
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :time_start Starting time in ISO 8601
  # @option opts [Time] :time_end Ending time in ISO 8601
  # @option opts [String] :time_format If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
  # @option opts [String] :period_id Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60;
  # @option opts [Integer] :limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
  # @return [Array<Object>]
  describe 'v2_metrics_exchange_history_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v2_metrics_exchange_listing_get
  # Listing of metrics available for specific exchange
  # Get all metrics that are actually available for the specified exchange.
  # @param exchange_id Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM)
  # @param [Hash] opts the optional parameters
  # @return [Array<V1MetricInfo>]
  describe 'v2_metrics_exchange_listing_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v2_metrics_listing_get
  # Listing of all supported metrics
  # Get all metrics available in the system.
  # @param [Hash] opts the optional parameters
  # @return [Array<V1MetricInfo>]
  describe 'v2_metrics_listing_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
