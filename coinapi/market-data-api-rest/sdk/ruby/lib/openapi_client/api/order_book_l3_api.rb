=begin
#CoinAPI Market Data REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Contact: support@apibricks.io
Generated by: https://openapi-generator.tech
Generator version: 7.15.0

=end

require 'cgi'

module OpenapiClient
  class OrderBookL3Api
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Current order books
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_symbol_id Comma or semicolon delimited parts of symbol identifier used to filter the response.
    # @option opts [Integer] :limit_levels The maximum number of levels to include in the response.
    # @return [Array<V1OrderBookBase>]
    def v1_orderbooks3_current_get(opts = {})
      data, _status_code, _headers = v1_orderbooks3_current_get_with_http_info(opts)
      data
    end

    # Current order books
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_symbol_id Comma or semicolon delimited parts of symbol identifier used to filter the response.
    # @option opts [Integer] :limit_levels The maximum number of levels to include in the response.
    # @return [Array<(Array<V1OrderBookBase>, Integer, Hash)>] Array<V1OrderBookBase> data, response status code and response headers
    def v1_orderbooks3_current_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderBookL3Api.v1_orderbooks3_current_get ...'
      end
      # resource path
      local_var_path = '/v1/orderbooks3/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_symbol_id'] = opts[:'filter_symbol_id'] if !opts[:'filter_symbol_id'].nil?
      query_params[:'limit_levels'] = opts[:'limit_levels'] if !opts[:'limit_levels'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json', 'application/x-msgpack']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<V1OrderBookBase>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['APIKey', 'JWT']

      new_options = opts.merge(
        :operation => :"OrderBookL3Api.v1_orderbooks3_current_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderBookL3Api#v1_orderbooks3_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Current order book by symbol_id
    # Retrieves the current order book for the specified symbol.
    # @param symbol_id [String] The symbol ID (from the Metadata -&gt; Symbols)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit_levels The maximum number of levels to include in the response.
    # @return [V1OrderBookBase]
    def v1_orderbooks3_symbol_id_current_get(symbol_id, opts = {})
      data, _status_code, _headers = v1_orderbooks3_symbol_id_current_get_with_http_info(symbol_id, opts)
      data
    end

    # Current order book by symbol_id
    # Retrieves the current order book for the specified symbol.
    # @param symbol_id [String] The symbol ID (from the Metadata -&gt; Symbols)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit_levels The maximum number of levels to include in the response.
    # @return [Array<(V1OrderBookBase, Integer, Hash)>] V1OrderBookBase data, response status code and response headers
    def v1_orderbooks3_symbol_id_current_get_with_http_info(symbol_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderBookL3Api.v1_orderbooks3_symbol_id_current_get ...'
      end
      # verify the required parameter 'symbol_id' is set
      if @api_client.config.client_side_validation && symbol_id.nil?
        fail ArgumentError, "Missing the required parameter 'symbol_id' when calling OrderBookL3Api.v1_orderbooks3_symbol_id_current_get"
      end
      # resource path
      local_var_path = '/v1/orderbooks3/{symbol_id}/current'.sub('{' + 'symbol_id' + '}', CGI.escape(symbol_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit_levels'] = opts[:'limit_levels'] if !opts[:'limit_levels'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json', 'application/x-msgpack']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V1OrderBookBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['APIKey', 'JWT']

      new_options = opts.merge(
        :operation => :"OrderBookL3Api.v1_orderbooks3_symbol_id_current_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderBookL3Api#v1_orderbooks3_symbol_id_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
