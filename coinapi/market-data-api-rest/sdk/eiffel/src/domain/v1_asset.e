note
 description:"[
		CoinAPI Market Data REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class V1_ASSET




feature --Access

    asset_id: detachable STRING_32
      -- Gets or sets the asset ID.
    name: detachable STRING_32
      -- Gets or sets the name of the asset.
    type_is_crypto: INTEGER_32
      -- Gets or sets a value indicating whether the asset is a cryptocurrency.
    data_quote_start: detachable DATE_TIME
      -- Gets or sets the start date of quote data.
    data_quote_end: detachable DATE_TIME
      -- Gets or sets the end date of quote data.
    data_orderbook_start: detachable DATE_TIME
      -- Gets or sets the start date of order book data.
    data_orderbook_end: detachable DATE_TIME
      -- Gets or sets the end date of order book data.
    data_trade_start: detachable DATE_TIME
      -- Gets or sets the start date of trade data.
    data_trade_end: detachable DATE_TIME
      -- Gets or sets the end date of trade data.
    data_symbols_count: INTEGER_64
      -- Gets or sets the number of symbols.
    volume_1hrs_usd: REAL_64
      -- Gets or sets the USD volume in the last 1 hour.
    volume_1day_usd: REAL_64
      -- Gets or sets the USD volume in the last 1 day.
    volume_1mth_usd: REAL_64
      -- Gets or sets the USD volume in the last 1 month.
    price_usd: REAL_64
      -- Gets or sets the USD price of the asset.
    id_icon: detachable UUID
      -- Gets or sets the ID of the icon for the asset.
    supply_current: REAL_64
      -- Gets or sets the current supply of the asset.
    supply_total: REAL_64
      -- Gets or sets the total supply of the asset.
    supply_max: REAL_64
      -- Gets or sets the maximum supply of the asset.
    chain_addresses: detachable LIST [V1_CHAIN_NETWORK_ADDRESS]
      -- 
    data_start: detachable STRING_32
      
    data_end: detachable STRING_32
      

feature -- Change Element

    set_asset_id (a_name: like asset_id)
        -- Set 'asset_id' with 'a_name'.
      do
        asset_id := a_name
      ensure
        asset_id_set: asset_id = a_name
      end

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name
      end

    set_type_is_crypto (a_name: like type_is_crypto)
        -- Set 'type_is_crypto' with 'a_name'.
      do
        type_is_crypto := a_name
      ensure
        type_is_crypto_set: type_is_crypto = a_name
      end

    set_data_quote_start (a_name: like data_quote_start)
        -- Set 'data_quote_start' with 'a_name'.
      do
        data_quote_start := a_name
      ensure
        data_quote_start_set: data_quote_start = a_name
      end

    set_data_quote_end (a_name: like data_quote_end)
        -- Set 'data_quote_end' with 'a_name'.
      do
        data_quote_end := a_name
      ensure
        data_quote_end_set: data_quote_end = a_name
      end

    set_data_orderbook_start (a_name: like data_orderbook_start)
        -- Set 'data_orderbook_start' with 'a_name'.
      do
        data_orderbook_start := a_name
      ensure
        data_orderbook_start_set: data_orderbook_start = a_name
      end

    set_data_orderbook_end (a_name: like data_orderbook_end)
        -- Set 'data_orderbook_end' with 'a_name'.
      do
        data_orderbook_end := a_name
      ensure
        data_orderbook_end_set: data_orderbook_end = a_name
      end

    set_data_trade_start (a_name: like data_trade_start)
        -- Set 'data_trade_start' with 'a_name'.
      do
        data_trade_start := a_name
      ensure
        data_trade_start_set: data_trade_start = a_name
      end

    set_data_trade_end (a_name: like data_trade_end)
        -- Set 'data_trade_end' with 'a_name'.
      do
        data_trade_end := a_name
      ensure
        data_trade_end_set: data_trade_end = a_name
      end

    set_data_symbols_count (a_name: like data_symbols_count)
        -- Set 'data_symbols_count' with 'a_name'.
      do
        data_symbols_count := a_name
      ensure
        data_symbols_count_set: data_symbols_count = a_name
      end

    set_volume_1hrs_usd (a_name: like volume_1hrs_usd)
        -- Set 'volume_1hrs_usd' with 'a_name'.
      do
        volume_1hrs_usd := a_name
      ensure
        volume_1hrs_usd_set: volume_1hrs_usd = a_name
      end

    set_volume_1day_usd (a_name: like volume_1day_usd)
        -- Set 'volume_1day_usd' with 'a_name'.
      do
        volume_1day_usd := a_name
      ensure
        volume_1day_usd_set: volume_1day_usd = a_name
      end

    set_volume_1mth_usd (a_name: like volume_1mth_usd)
        -- Set 'volume_1mth_usd' with 'a_name'.
      do
        volume_1mth_usd := a_name
      ensure
        volume_1mth_usd_set: volume_1mth_usd = a_name
      end

    set_price_usd (a_name: like price_usd)
        -- Set 'price_usd' with 'a_name'.
      do
        price_usd := a_name
      ensure
        price_usd_set: price_usd = a_name
      end

    set_id_icon (a_name: like id_icon)
        -- Set 'id_icon' with 'a_name'.
      do
        id_icon := a_name
      ensure
        id_icon_set: id_icon = a_name
      end

    set_supply_current (a_name: like supply_current)
        -- Set 'supply_current' with 'a_name'.
      do
        supply_current := a_name
      ensure
        supply_current_set: supply_current = a_name
      end

    set_supply_total (a_name: like supply_total)
        -- Set 'supply_total' with 'a_name'.
      do
        supply_total := a_name
      ensure
        supply_total_set: supply_total = a_name
      end

    set_supply_max (a_name: like supply_max)
        -- Set 'supply_max' with 'a_name'.
      do
        supply_max := a_name
      ensure
        supply_max_set: supply_max = a_name
      end

    set_chain_addresses (a_name: like chain_addresses)
        -- Set 'chain_addresses' with 'a_name'.
      do
        chain_addresses := a_name
      ensure
        chain_addresses_set: chain_addresses = a_name
      end

    set_data_start (a_name: like data_start)
        -- Set 'data_start' with 'a_name'.
      do
        data_start := a_name
      ensure
        data_start_set: data_start = a_name
      end

    set_data_end (a_name: like data_end)
        -- Set 'data_end' with 'a_name'.
      do
        data_end := a_name
      ensure
        data_end_set: data_end = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass V1_ASSET%N")
        if attached asset_id as l_asset_id then
          Result.append ("%Nasset_id:")
          Result.append (l_asset_id.out)
          Result.append ("%N")
        end
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")
        end
        if attached type_is_crypto as l_type_is_crypto then
          Result.append ("%Ntype_is_crypto:")
          Result.append (l_type_is_crypto.out)
          Result.append ("%N")
        end
        if attached data_quote_start as l_data_quote_start then
          Result.append ("%Ndata_quote_start:")
          Result.append (l_data_quote_start.out)
          Result.append ("%N")
        end
        if attached data_quote_end as l_data_quote_end then
          Result.append ("%Ndata_quote_end:")
          Result.append (l_data_quote_end.out)
          Result.append ("%N")
        end
        if attached data_orderbook_start as l_data_orderbook_start then
          Result.append ("%Ndata_orderbook_start:")
          Result.append (l_data_orderbook_start.out)
          Result.append ("%N")
        end
        if attached data_orderbook_end as l_data_orderbook_end then
          Result.append ("%Ndata_orderbook_end:")
          Result.append (l_data_orderbook_end.out)
          Result.append ("%N")
        end
        if attached data_trade_start as l_data_trade_start then
          Result.append ("%Ndata_trade_start:")
          Result.append (l_data_trade_start.out)
          Result.append ("%N")
        end
        if attached data_trade_end as l_data_trade_end then
          Result.append ("%Ndata_trade_end:")
          Result.append (l_data_trade_end.out)
          Result.append ("%N")
        end
        if attached data_symbols_count as l_data_symbols_count then
          Result.append ("%Ndata_symbols_count:")
          Result.append (l_data_symbols_count.out)
          Result.append ("%N")
        end
        if attached volume_1hrs_usd as l_volume_1hrs_usd then
          Result.append ("%Nvolume_1hrs_usd:")
          Result.append (l_volume_1hrs_usd.out)
          Result.append ("%N")
        end
        if attached volume_1day_usd as l_volume_1day_usd then
          Result.append ("%Nvolume_1day_usd:")
          Result.append (l_volume_1day_usd.out)
          Result.append ("%N")
        end
        if attached volume_1mth_usd as l_volume_1mth_usd then
          Result.append ("%Nvolume_1mth_usd:")
          Result.append (l_volume_1mth_usd.out)
          Result.append ("%N")
        end
        if attached price_usd as l_price_usd then
          Result.append ("%Nprice_usd:")
          Result.append (l_price_usd.out)
          Result.append ("%N")
        end
        if attached id_icon as l_id_icon then
          Result.append ("%Nid_icon:")
          Result.append (l_id_icon.out)
          Result.append ("%N")
        end
        if attached supply_current as l_supply_current then
          Result.append ("%Nsupply_current:")
          Result.append (l_supply_current.out)
          Result.append ("%N")
        end
        if attached supply_total as l_supply_total then
          Result.append ("%Nsupply_total:")
          Result.append (l_supply_total.out)
          Result.append ("%N")
        end
        if attached supply_max as l_supply_max then
          Result.append ("%Nsupply_max:")
          Result.append (l_supply_max.out)
          Result.append ("%N")
        end
        if attached chain_addresses as l_chain_addresses then
          across l_chain_addresses as ic loop
            Result.append ("%N chain_addresses:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached data_start as l_data_start then
          Result.append ("%Ndata_start:")
          Result.append (l_data_start.out)
          Result.append ("%N")
        end
        if attached data_end as l_data_end then
          Result.append ("%Ndata_end:")
          Result.append (l_data_end.out)
          Result.append ("%N")
        end
      end
end

