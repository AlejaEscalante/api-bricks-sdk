note
 description:"[
		CoinAPI Market Data REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	METRICS_API

inherit

    API_I


feature -- API Access


	v1_metrics_asset_current_get (metric_id: STRING_32; asset_id: STRING_32; asset_id_external: STRING_32; exchange_id: STRING_32): detachable LIST [V1_GENERAL_DATA]
			-- Current metrics for given asset
			-- Get current asset metrics.
			-- 
			-- argument: metric_id Metric identifier (from the Metrics -&gt; Listing) (optional, default to null)
			-- 
			-- argument: asset_id Asset identifier (from the Metadata -&gt; Assets) (optional, default to null)
			-- 
			-- argument: asset_id_external Exchange asset identifier (optional, default to null)
			-- 
			-- argument: exchange_id Exchange identifier (from the Metadata -&gt; Exchanges) (optional, default to null)
			-- 
			-- 
			-- Result LIST [V1_GENERAL_DATA]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/metrics/asset/current"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "metric_id", metric_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "asset_id", asset_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "asset_id_external", asset_id_external));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "exchange_id", exchange_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_GENERAL_DATA] } l_response.data ({ LIST [V1_GENERAL_DATA] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_metrics_asset_history_get (metric_id: STRING_32; exchange_id: STRING_32; asset_id: STRING_32; asset_id_external: STRING_32; time_start: DATE_TIME; time_end: DATE_TIME; time_format: STRING_32; period_id: STRING_32; limit: INTEGER_32): detachable LIST [V1_METRIC_DATA]
			-- Historical metrics for asset
			-- Get asset metrics history.
			-- 
			-- argument: metric_id Metric identifier (from the Metrics -&gt; Listing) (required)
			-- 
			-- argument: exchange_id Exchange identifier (from the Metadata -&gt; Exchanges) (required)
			-- 
			-- argument: asset_id Asset identifier (from the Metadata -&gt; Assets) (optional, default to null)
			-- 
			-- argument: asset_id_external Exchange asset identifier (optional, default to null)
			-- 
			-- argument: time_start Starting time in ISO 8601 (optional, default to null)
			-- 
			-- argument: time_end Ending time in ISO 8601 (optional, default to null)
			-- 
			-- argument: time_format If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional, default to null)
			-- 
			-- argument: period_id Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional, default to null)
			-- 
			-- argument: limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
			-- 
			-- 
			-- Result LIST [V1_METRIC_DATA]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/metrics/asset/history"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "metric_id", metric_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "asset_id", asset_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "asset_id_external", asset_id_external));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "exchange_id", exchange_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_start", time_start));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_end", time_end));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_format", time_format));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "period_id", period_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_METRIC_DATA] } l_response.data ({ LIST [V1_METRIC_DATA] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_metrics_asset_listing_get (metric_id: STRING_32; exchange_id: STRING_32; chain_id: STRING_32; network_id: STRING_32; asset_id: STRING_32; asset_id_external: STRING_32): detachable LIST [V1_LISTING_ITEM]
			-- Listing of all supported metrics for asset
			-- Get data metrics for asset.
			-- 
			-- argument: metric_id Metric identifier (from the Metrics -&gt; Listing) (optional, default to null)
			-- 
			-- argument: exchange_id Exchange identifier (from the Metadata -&gt; Exchanges) (optional, default to null)
			-- 
			-- argument: chain_id Chain identifier (optional, default to null)
			-- 
			-- argument: network_id Network identifier (optional, default to null)
			-- 
			-- argument: asset_id Asset identifier (from the Metadata -&gt; Assets) (optional, default to null)
			-- 
			-- argument: asset_id_external The asset external identifier (optional, default to null)
			-- 
			-- 
			-- Result LIST [V1_LISTING_ITEM]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/metrics/asset/listing"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "metric_id", metric_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "exchange_id", exchange_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "chain_id", chain_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "network_id", network_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "asset_id", asset_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "asset_id_external", asset_id_external));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_LISTING_ITEM] } l_response.data ({ LIST [V1_LISTING_ITEM] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_metrics_exchange_current_get (exchange_id: STRING_32; metric_id: STRING_32): detachable LIST [V1_GENERAL_DATA]
			-- Current metrics for given exchange
			-- Get current exchange metrics values.
			-- 
			-- argument: exchange_id The exchange identifier (from the Metadata -&gt; Exchanges) (required)
			-- 
			-- argument: metric_id The metric identifier (from the Metrics -&gt; Listing) (optional, default to null)
			-- 
			-- 
			-- Result LIST [V1_GENERAL_DATA]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/metrics/exchange/current"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "metric_id", metric_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "exchange_id", exchange_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_GENERAL_DATA] } l_response.data ({ LIST [V1_GENERAL_DATA] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_metrics_exchange_history_get (metric_id: STRING_32; exchange_id: STRING_32; time_start: DATE_TIME; time_end: DATE_TIME; time_format: STRING_32; period_id: STRING_32; limit: INTEGER_32): detachable LIST [V1_METRIC_DATA]
			-- Historical metrics for the exchange
			-- Get exchange metrics history.
			-- 
			-- argument: metric_id Metric identifier (from the Metrics -&gt; Listing) (required)
			-- 
			-- argument: exchange_id Exchange identifier (from the Metadata -&gt; Exchanges) (required)
			-- 
			-- argument: time_start Starting time in ISO 8601 (optional, default to null)
			-- 
			-- argument: time_end Ending time in ISO 8601 (optional, default to null)
			-- 
			-- argument: time_format If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional, default to null)
			-- 
			-- argument: period_id Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional, default to null)
			-- 
			-- argument: limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
			-- 
			-- 
			-- Result LIST [V1_METRIC_DATA]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/metrics/exchange/history"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "metric_id", metric_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "exchange_id", exchange_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_start", time_start));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_end", time_end));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_format", time_format));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "period_id", period_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_METRIC_DATA] } l_response.data ({ LIST [V1_METRIC_DATA] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_metrics_exchange_listing_get (exchange_id: STRING_32; metric_id: STRING_32): detachable LIST [V1_LISTING_ITEM]
			-- Listing of all supported exchange metrics
			-- Get data metrics for exchange.
			-- 
			-- argument: exchange_id The exchange identifier (from the Metadata -&gt; Exchanges) (required)
			-- 
			-- argument: metric_id The metric identifier (from the Metrics -&gt; Listing) (optional, default to null)
			-- 
			-- 
			-- Result LIST [V1_LISTING_ITEM]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/metrics/exchange/listing"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "metric_id", metric_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "exchange_id", exchange_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_LISTING_ITEM] } l_response.data ({ LIST [V1_LISTING_ITEM] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_metrics_listing_get : detachable LIST [V1_METRIC]
			-- Listing of all supported metrics by CoinAPI
			-- Get all data metrics.
			-- 
			-- 
			-- Result LIST [V1_METRIC]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/metrics/listing"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_METRIC] } l_response.data ({ LIST [V1_METRIC] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_metrics_symbol_current_get (metric_id: STRING_32; symbol_id: STRING_32; exchange_id: STRING_32): detachable LIST [V1_GENERAL_DATA]
			-- Current metrics for given symbol
			-- Get current symbol metrics.
			-- 
			-- argument: metric_id Metric identifier (from the Metrics -&gt; Listing) (optional, default to null)
			-- 
			-- argument: symbol_id Symbol identifier (from the Metadata -&gt; Symbols) (optional, default to null)
			-- 
			-- argument: exchange_id Exchange id (from the Metadata -&gt; Exchanges) (optional, default to null)
			-- 
			-- 
			-- Result LIST [V1_GENERAL_DATA]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/metrics/symbol/current"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "metric_id", metric_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "symbol_id", symbol_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "exchange_id", exchange_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_GENERAL_DATA] } l_response.data ({ LIST [V1_GENERAL_DATA] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_metrics_symbol_history_get (metric_id: STRING_32; symbol_id: STRING_32; time_start: DATE_TIME; time_end: DATE_TIME; time_format: STRING_32; period_id: STRING_32; limit: INTEGER_32): detachable LIST [V1_METRIC_DATA]
			-- Historical metrics for symbol
			-- Get symbol metrics history.
			-- 
			-- argument: metric_id Metric identifier (from the Metrics -&gt; Listing) (required)
			-- 
			-- argument: symbol_id Symbol identifier (from the Metadata -&gt; Symbols) (required)
			-- 
			-- argument: time_start Starting time in ISO 8601 (optional, default to null)
			-- 
			-- argument: time_end Ending time in ISO 8601 (optional, default to null)
			-- 
			-- argument: time_format If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional, default to null)
			-- 
			-- argument: period_id Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60; (optional, default to null)
			-- 
			-- argument: limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
			-- 
			-- 
			-- Result LIST [V1_METRIC_DATA]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/metrics/symbol/history"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "metric_id", metric_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "symbol_id", symbol_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_start", time_start));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_end", time_end));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_format", time_format));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "period_id", period_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_METRIC_DATA] } l_response.data ({ LIST [V1_METRIC_DATA] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_metrics_symbol_listing_get (metric_id: STRING_32; exchange_id: STRING_32; symbol_id: STRING_32): detachable LIST [V1_LISTING_ITEM]
			-- Listing of all supported metrics for symbol
			-- Get data metrics for symbol.
			-- 
			-- argument: metric_id Metric identifier (from the Metrics -&gt; Listing) (optional, default to null)
			-- 
			-- argument: exchange_id Exchange identifier (from the Metadata -&gt; Exchanges) (optional, default to null)
			-- 
			-- argument: symbol_id Symbol identifier (from the Metadata -&gt; Symbols) (optional, default to null)
			-- 
			-- 
			-- Result LIST [V1_LISTING_ITEM]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/metrics/symbol/listing"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "metric_id", metric_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "exchange_id", exchange_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "symbol_id", symbol_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_LISTING_ITEM] } l_response.data ({ LIST [V1_LISTING_ITEM] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
