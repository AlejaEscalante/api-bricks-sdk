note
 description:"[
		REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	ORDERBOOK_API

inherit

    API_I


feature -- API Access


	v1_orderbooks_symbol_id_current_get (symbol_id: STRING_32; limit_levels: INTEGER_32): detachable V1_ORDER_BOOK_BASE
			-- Get current order book
			-- Retrieves the current order book for the specified symbol.
			-- 
			-- argument: symbol_id The symbol ID (from the Metadata -&gt; Symbols) (required)
			-- 
			-- argument: limit_levels The maximum number of levels to include in the response. (optional, default to null)
			-- 
			-- 
			-- Result V1_ORDER_BOOK_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/orderbooks/{symbol_id}/current"
			l_path.replace_substring_all ("{"+"symbol_id"+"}", api_client.url_encode (symbol_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit_levels", limit_levels));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"ApiKey">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { V1_ORDER_BOOK_BASE } l_response.data ({ V1_ORDER_BOOK_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_orderbooks_symbol_id_depth_current_get (symbol_id: STRING_32; limit_levels: INTEGER_32): detachable V1_ORDER_BOOK_DEPTH
			-- Current depth of the order book
			-- Retrieves the current depth of the order book for the specified symbol.
			-- 
			-- argument: symbol_id The symbol ID (from the Metadata -&gt; Symbols) (required)
			-- 
			-- argument: limit_levels The maximum number of levels to include in the response. (optional, default to null)
			-- 
			-- 
			-- Result V1_ORDER_BOOK_DEPTH
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/orderbooks/{symbol_id}/depth/current"
			l_path.replace_substring_all ("{"+"symbol_id"+"}", api_client.url_encode (symbol_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit_levels", limit_levels));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"ApiKey">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { V1_ORDER_BOOK_DEPTH } l_response.data ({ V1_ORDER_BOOK_DEPTH }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_orderbooks_symbol_id_history_get (symbol_id: STRING_32; date: STRING_32; time_start: STRING_32; time_end: STRING_32; limit: INTEGER_32; limit_levels: INTEGER_32): detachable LIST [V1_ORDER_BOOK]
			-- Historical data
			-- Get historical order book snapshots for a specific symbol within time range, returned in time ascending order.                :::info  The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels.  :::    :::warning  The &#39;time_start&#39; and &#39;time_end&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day.  Please use the &#39;date&#39; parameter instead for querying data for a specific day without filter.  :::
			-- 
			-- argument: symbol_id Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols) (required)
			-- 
			-- argument: date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional, default to null)
			-- 
			-- argument: time_start Starting time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional, default to null)
			-- 
			-- argument: time_end Timeseries ending time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional, default to null)
			-- 
			-- argument: limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
			-- 
			-- argument: limit_levels Maximum amount of levels from each side of the book to include in response (optional) (optional, default to null)
			-- 
			-- 
			-- Result LIST [V1_ORDER_BOOK]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/orderbooks/{symbol_id}/history"
			l_path.replace_substring_all ("{"+"symbol_id"+"}", api_client.url_encode (symbol_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "date", date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_start", time_start));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_end", time_end));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit_levels", limit_levels));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"ApiKey">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_ORDER_BOOK] } l_response.data ({ LIST [V1_ORDER_BOOK] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_orderbooks_symbol_id_latest_get (symbol_id: STRING_32; limit: INTEGER_32; limit_levels: INTEGER_32): detachable LIST [V1_ORDER_BOOK]
			-- Latest data
			-- Get latest order book snapshots for a specific symbol, returned in time descending order.                :::info  The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels.  :::
			-- 
			-- argument: symbol_id Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols) (required)
			-- 
			-- argument: limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
			-- 
			-- argument: limit_levels Maximum amount of levels from each side of the book to include in response (optional) (optional, default to null)
			-- 
			-- 
			-- Result LIST [V1_ORDER_BOOK]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/orderbooks/{symbol_id}/latest"
			l_path.replace_substring_all ("{"+"symbol_id"+"}", api_client.url_encode (symbol_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit_levels", limit_levels));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"ApiKey">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_ORDER_BOOK] } l_response.data ({ LIST [V1_ORDER_BOOK] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
