note
 description:"[
		REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	TRADES_API

inherit

    API_I


feature -- API Access


	v1_trades_latest_get (filter_symbol_id: STRING_32; include_id: BOOLEAN; limit: INTEGER_32): detachable LIST [V1_TRADE]
			-- Latest data
			-- Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.
			-- 
			-- argument: filter_symbol_id Comma or semicolon delimited parts of symbol identifier used to filter response. (optional) (optional, default to null)
			-- 
			-- argument: include_id Information that additional exchange trade identifier should be included in the &#x60;id_trade&#x60; parameter of the trade if exchange providing identifiers. (optional, default to false)
			-- 
			-- argument: limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
			-- 
			-- 
			-- Result LIST [V1_TRADE]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/trades/latest"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "filter_symbol_id", filter_symbol_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "include_id", include_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"ApiKey">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_TRADE] } l_response.data ({ LIST [V1_TRADE] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_trades_symbol_id_history_get (symbol_id: STRING_32; date: STRING_32; time_start: STRING_32; time_end: STRING_32; limit: INTEGER_32; include_id: BOOLEAN): detachable LIST [V1_TRADE]
			-- Historical data
			-- Get history transactions from specific symbol, returned in time ascending order.    :::warning  The &#39;time_start&#39; and &#39;time_end&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day.  Please use the &#39;date&#39; parameter instead for querying data for a specific day without filter.  :::
			-- 
			-- argument: symbol_id Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols) (required)
			-- 
			-- argument: date Date in ISO 8601, returned data is for the whole given day (required if &#39;time_start&#39; is not provided) (optional, default to null)
			-- 
			-- argument: time_start Starting time in ISO 8601 (optional, default to null)
			-- 
			-- argument: time_end Timeseries ending time in ISO 8601 (optional, default to null)
			-- 
			-- argument: limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
			-- 
			-- argument: include_id Information that additional exchange trade identifier should be included in the &#x60;id_trade&#x60; parameter of the trade if exchange providing identifiers. (optional, default to false)
			-- 
			-- 
			-- Result LIST [V1_TRADE]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/trades/{symbol_id}/history"
			l_path.replace_substring_all ("{"+"symbol_id"+"}", api_client.url_encode (symbol_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "date", date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_start", time_start));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_end", time_end));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "include_id", include_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"ApiKey">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_TRADE] } l_response.data ({ LIST [V1_TRADE] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_trades_symbol_id_latest_get (symbol_id: STRING_32; limit: INTEGER_32; include_id: BOOLEAN): detachable LIST [V1_TRADE]
			-- Latest data by symbol_id
			-- Get latest trades executed up to 1 minute ago. Latest data is always returned in time descending order.
			-- 
			-- argument: symbol_id Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols) (required)
			-- 
			-- argument: limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
			-- 
			-- argument: include_id Information that additional exchange trade identifier should be included in the &#x60;id_trade&#x60; parameter of the trade if exchange providing identifiers. (optional, default to false)
			-- 
			-- 
			-- Result LIST [V1_TRADE]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/trades/{symbol_id}/latest"
			l_path.replace_substring_all ("{"+"symbol_id"+"}", api_client.url_encode (symbol_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "include_id", include_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"ApiKey">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_TRADE] } l_response.data ({ LIST [V1_TRADE] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
