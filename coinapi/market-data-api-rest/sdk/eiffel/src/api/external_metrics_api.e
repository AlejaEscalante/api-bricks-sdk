note
 description:"[
		CoinAPI Market Data REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	EXTERNALMETRICS_API

inherit

    API_I


feature -- API Access


	v1_externalmetrics_asset_history_get (metric_id: STRING_32; asset_id: STRING_32; time_start: DATE_TIME; time_end: DATE_TIME; time_format: STRING_32; period_id: STRING_32; limit: INTEGER_32): detachable LIST [ANY]
			-- Historical metrics for the asset
			-- Get asset metrics history.
			-- 
			-- argument: metric_id Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;) (required)
			-- 
			-- argument: asset_id Asset identifier (e.g., &#x60;USDC&#x60;, &#x60;USDT&#x60;) (required)
			-- 
			-- argument: time_start Starting time in ISO 8601 (optional, default to null)
			-- 
			-- argument: time_end Ending time in ISO 8601 (optional, default to null)
			-- 
			-- argument: time_format If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional, default to null)
			-- 
			-- argument: period_id Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional, default to null)
			-- 
			-- argument: limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
			-- 
			-- 
			-- Result LIST [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/externalmetrics/asset/history"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "metric_id", metric_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "asset_id", asset_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_start", time_start));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_end", time_end));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_format", time_format));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "period_id", period_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [ANY] } l_response.data ({ LIST [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_externalmetrics_asset_listing_get (asset_id: STRING_32): detachable LIST [V1_METRIC_INFO]
			-- Listing of metrics available for specific asset
			-- Get all metrics that are actually available for the specified asset.
			-- 
			-- argument: asset_id Asset identifier (e.g., USDC, USDT) (required)
			-- 
			-- 
			-- Result LIST [V1_METRIC_INFO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/externalmetrics/asset/listing"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "asset_id", asset_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_METRIC_INFO] } l_response.data ({ LIST [V1_METRIC_INFO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_externalmetrics_chain_history_get (metric_id: STRING_32; chain_id: STRING_32; time_start: DATE_TIME; time_end: DATE_TIME; time_format: STRING_32; period_id: STRING_32; limit: INTEGER_32): detachable LIST [ANY]
			-- Historical metrics for the chain
			-- Get chain metrics history.
			-- 
			-- argument: metric_id Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;) (required)
			-- 
			-- argument: chain_id Chain identifier (e.g., &#x60;Ethereum&#x60;, &#x60;Arbitrum&#x60;) (required)
			-- 
			-- argument: time_start Starting time in ISO 8601 (optional, default to null)
			-- 
			-- argument: time_end Ending time in ISO 8601 (optional, default to null)
			-- 
			-- argument: time_format If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional, default to null)
			-- 
			-- argument: period_id Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional, default to null)
			-- 
			-- argument: limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
			-- 
			-- 
			-- Result LIST [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/externalmetrics/chain/history"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "metric_id", metric_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "chain_id", chain_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_start", time_start));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_end", time_end));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_format", time_format));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "period_id", period_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [ANY] } l_response.data ({ LIST [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_externalmetrics_chain_listing_get (chain_id: STRING_32): detachable LIST [V1_METRIC_INFO]
			-- Listing of metrics available for specific chain
			-- Get all metrics that are actually available for the specified blockchain chain.
			-- 
			-- argument: chain_id Chain identifier (e.g., ETHEREUM, ARBITRUM) (required)
			-- 
			-- 
			-- Result LIST [V1_METRIC_INFO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/externalmetrics/chain/listing"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "chain_id", chain_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_METRIC_INFO] } l_response.data ({ LIST [V1_METRIC_INFO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_externalmetrics_exchange_history_get (metric_id: STRING_32; exchange_id: STRING_32; time_start: DATE_TIME; time_end: DATE_TIME; time_format: STRING_32; period_id: STRING_32; limit: INTEGER_32): detachable LIST [ANY]
			-- Historical metrics for the exchange
			-- Get exchange metrics history.
			-- 
			-- argument: metric_id Metric identifier (e.g., &#x60;TVL&#x60;, &#x60;STABLES_BRIDGED_USD&#x60;) (required)
			-- 
			-- argument: exchange_id Exchange identifier (e.g., &#x60;BINANCE&#x60;, &#x60;UNISWAP-V3-ETHEREUM&#x60;) (required)
			-- 
			-- argument: time_start Starting time in ISO 8601 (optional, default to null)
			-- 
			-- argument: time_end Ending time in ISO 8601 (optional, default to null)
			-- 
			-- argument: time_format If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec) (optional, default to null)
			-- 
			-- argument: period_id Identifier of requested timeseries period (e.g. &#x60;1MIN&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1MIN&#x60; (optional, default to null)
			-- 
			-- argument: limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
			-- 
			-- 
			-- Result LIST [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/externalmetrics/exchange/history"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "metric_id", metric_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "exchange_id", exchange_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_start", time_start));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_end", time_end));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_format", time_format));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "period_id", period_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [ANY] } l_response.data ({ LIST [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_externalmetrics_exchange_listing_get (exchange_id: STRING_32): detachable LIST [V1_METRIC_INFO]
			-- Listing of metrics available for specific exchange
			-- Get all metrics that are actually available for the specified exchange.
			-- 
			-- argument: exchange_id Exchange identifier (e.g., BINANCE, UNISWAP-V3-ETHEREUM) (required)
			-- 
			-- 
			-- Result LIST [V1_METRIC_INFO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/externalmetrics/exchange/listing"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "exchange_id", exchange_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_METRIC_INFO] } l_response.data ({ LIST [V1_METRIC_INFO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_externalmetrics_listing_get : detachable LIST [V1_METRIC_INFO]
			-- Listing of all supported metrics
			-- Get all metrics available in the system.
			-- 
			-- 
			-- Result LIST [V1_METRIC_INFO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/externalmetrics/listing"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_METRIC_INFO] } l_response.data ({ LIST [V1_METRIC_INFO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
