note
 description:"[
		CoinAPI Market Data REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	OHLCV_API

inherit

    API_I


feature -- API Access


	v1_ohlcv_exchanges_exchange_id_history_get (exchange_id: STRING_32; period_id: STRING_32; time_start: STRING_32; time_end: STRING_32): detachable LIST [MODELS_EXCHANGE_TIMESERIES_ITEM]
			-- Historical data by exchange
			-- Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific exchange eg &#x60;BITSTAMP&#x60;              :::info The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. The difference between &#x60;time_end&#x60; and &#x60;time_start&#x60; cannot be higher than 1 day. The &#x60;period_id&#x60; cannot be higher than &#x60;1DAY&#x60;. :::
			-- 
			-- argument: exchange_id Exchange identifier of requested timeseries (from the Metadata -&gt; Exchanges) (required)
			-- 
			-- argument: period_id Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;) (required)
			-- 
			-- argument: time_start Timeseries starting time in ISO 8601 (required)
			-- 
			-- argument: time_end Timeseries ending time in ISO 8601 (required)
			-- 
			-- 
			-- Result LIST [MODELS_EXCHANGE_TIMESERIES_ITEM]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/ohlcv/exchanges/{exchange_id}/history"
			l_path.replace_substring_all ("{"+"exchange_id"+"}", api_client.url_encode (exchange_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "period_id", period_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_start", time_start));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_end", time_end));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [MODELS_EXCHANGE_TIMESERIES_ITEM] } l_response.data ({ LIST [MODELS_EXCHANGE_TIMESERIES_ITEM] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_ohlcv_periods_get : detachable LIST [V1_TIMESERIES_PERIOD]
			-- List all periods
			-- Get full list of supported time periods available for requesting OHLCV timeseries data.              ### Available periods              Time unit | Period identifiers --------- | ----------- Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY Month | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH Year | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS              :::tip You can assume that we will not remove any periods from this response, however, we may add new ones. :::
			-- 
			-- 
			-- Result LIST [V1_TIMESERIES_PERIOD]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/ohlcv/periods"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_TIMESERIES_PERIOD] } l_response.data ({ LIST [V1_TIMESERIES_PERIOD] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_ohlcv_symbol_id_history_get (symbol_id: STRING_32; period_id: STRING_32; time_start: STRING_32; time_end: STRING_32; limit: INTEGER_32): detachable LIST [V1_TIMESERIES_ITEM]
			-- Historical data
			-- Get OHLCV timeseries data returned in time ascending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data              :::info The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. :::
			-- 
			-- argument: symbol_id Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols) (required)
			-- 
			-- argument: period_id Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;) (required)
			-- 
			-- argument: time_start Timeseries starting time in ISO 8601 (optional, default to null)
			-- 
			-- argument: time_end Timeseries ending time in ISO 8601 (optional, default to null)
			-- 
			-- argument: limit Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
			-- 
			-- 
			-- Result LIST [V1_TIMESERIES_ITEM]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/ohlcv/{symbol_id}/history"
			l_path.replace_substring_all ("{"+"symbol_id"+"}", api_client.url_encode (symbol_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "period_id", period_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_start", time_start));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_end", time_end));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_TIMESERIES_ITEM] } l_response.data ({ LIST [V1_TIMESERIES_ITEM] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_ohlcv_symbol_id_latest_get (symbol_id: STRING_32; period_id: STRING_32; limit: INTEGER_32; include_empty_items: BOOLEAN): detachable LIST [V1_TIMESERIES_ITEM]
			-- Latest data
			-- Get OHLCV latest timeseries data returned in time descending order. Data can be requested by the period and for the specific symbol eg &#x60;BITSTAMP_SPOT_BTC_USD&#x60;, if you need to query timeseries by asset pairs eg. &#x60;BTC/USD&#x60;, then please reffer to the Exchange Rates Timeseries data              :::info OHLCV Latest endpoint is just the shortcut to the OHLCV Historical endpoint with substituted &#x60;time_start&#x60; and &#x60;time_end&#x60; parameters.  The OHLCV Historical endpoint data can be delayed a few seconds. Use OHLCV real-time data stream to get data without delay. :::
			-- 
			-- argument: symbol_id Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols) (required)
			-- 
			-- argument: period_id Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;) (required)
			-- 
			-- argument: limit Amount of items to return (mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
			-- 
			-- argument: include_empty_items  (optional, default to false)
			-- 
			-- 
			-- Result LIST [V1_TIMESERIES_ITEM]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/ohlcv/{symbol_id}/latest"
			l_path.replace_substring_all ("{"+"symbol_id"+"}", api_client.url_encode (symbol_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "period_id", period_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "include_empty_items", include_empty_items));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_TIMESERIES_ITEM] } l_response.data ({ LIST [V1_TIMESERIES_ITEM] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
