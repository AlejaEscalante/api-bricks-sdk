note
 description:"[
		REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	ORDERBOOKL3_API

inherit

    API_I


feature -- API Access


	v1_orderbooks3_current_get (filter_symbol_id: STRING_32; limit_levels: INTEGER_32): detachable LIST [V1_ORDER_BOOK_BASE]
			-- Current order books
			-- 
			-- 
			-- argument: filter_symbol_id Comma or semicolon delimited parts of symbol identifier used to filter the response. (optional, default to null)
			-- 
			-- argument: limit_levels The maximum number of levels to include in the response. (optional, default to null)
			-- 
			-- 
			-- Result LIST [V1_ORDER_BOOK_BASE]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/orderbooks3/current"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "filter_symbol_id", filter_symbol_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit_levels", limit_levels));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"ApiKey">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_ORDER_BOOK_BASE] } l_response.data ({ LIST [V1_ORDER_BOOK_BASE] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_orderbooks3_symbol_id_current_get (symbol_id: STRING_32; limit_levels: INTEGER_32): detachable V1_ORDER_BOOK_BASE
			-- Current order book by symbol_id
			-- Retrieves the current order book for the specified symbol.
			-- 
			-- argument: symbol_id The symbol ID (from the Metadata -&gt; Symbols) (required)
			-- 
			-- argument: limit_levels The maximum number of levels to include in the response. (optional, default to null)
			-- 
			-- 
			-- Result V1_ORDER_BOOK_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/orderbooks3/{symbol_id}/current"
			l_path.replace_substring_all ("{"+"symbol_id"+"}", api_client.url_encode (symbol_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit_levels", limit_levels));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"ApiKey">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { V1_ORDER_BOOK_BASE } l_response.data ({ V1_ORDER_BOOK_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
