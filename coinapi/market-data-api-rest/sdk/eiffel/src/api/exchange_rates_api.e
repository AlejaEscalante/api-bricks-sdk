note
 description:"[
		REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	EXCHANGERATES_API

inherit

    API_I


feature -- API Access


	specific_rate (asset_id_base: STRING_32; asset_id_quote: STRING_32; time: STRING_32): detachable V1_EXCHANGE_RATE
			-- Get specific rate
			-- Retrieves the exchange rate for a specific base and quote asset at a given time or the current rate.                :::info  If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements.  :::
			-- 
			-- argument: asset_id_base Requested exchange rate base asset identifier (from the Metadata -&gt; Assets) (required)
			-- 
			-- argument: asset_id_quote Requested exchange rate quote asset identifier (from the Metadata -&gt; Assets) (required)
			-- 
			-- argument: time Time at which exchange rate is calculated (optional, if not supplied then current rate is returned) (optional, default to null)
			-- 
			-- 
			-- Result V1_EXCHANGE_RATE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/exchangerate/{asset_id_base}/{asset_id_quote}"
			l_path.replace_substring_all ("{"+"asset_id_base"+"}", api_client.url_encode (asset_id_base.out))
			l_path.replace_substring_all ("{"+"asset_id_quote"+"}", api_client.url_encode (asset_id_quote.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time", time));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"ApiKey">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { V1_EXCHANGE_RATE } l_response.data ({ V1_EXCHANGE_RATE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_exchangerate_asset_id_base_asset_id_quote_history_get (asset_id_base: STRING_32; asset_id_quote: STRING_32; period_id: STRING_32; time_start: STRING_32; time_end: STRING_32; limit: INTEGER_32): detachable LIST [V1_EXCHANGE_RATES_TIMESERIES_ITEM]
			-- Timeseries data
			-- Get the historical exchange rates between two assets in the form of the timeseries.
			-- 
			-- argument: asset_id_base Requested exchange rates base asset identifier (from the Metadata -&gt; Assets) (required)
			-- 
			-- argument: asset_id_quote Requested exchange rates base asset identifier (from the Metadata -&gt; Assets) (required)
			-- 
			-- argument: period_id Identifier of requested timeseries period (required, e.g. &#x60;5SEC&#x60; or &#x60;1HRS&#x60;) (optional, default to null)
			-- 
			-- argument: time_start Timeseries starting time in ISO 8601 (required) (optional, default to null)
			-- 
			-- argument: time_end Timeseries ending time in ISO 8601 (required) (optional, default to null)
			-- 
			-- argument: limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
			-- 
			-- 
			-- Result LIST [V1_EXCHANGE_RATES_TIMESERIES_ITEM]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/exchangerate/{asset_id_base}/{asset_id_quote}/history"
			l_path.replace_substring_all ("{"+"asset_id_base"+"}", api_client.url_encode (asset_id_base.out))
			l_path.replace_substring_all ("{"+"asset_id_quote"+"}", api_client.url_encode (asset_id_quote.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "period_id", period_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_start", time_start));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_end", time_end));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"ApiKey">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_EXCHANGE_RATES_TIMESERIES_ITEM] } l_response.data ({ LIST [V1_EXCHANGE_RATES_TIMESERIES_ITEM] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_exchangerate_asset_id_base_get (asset_id_base: STRING_32; filter_asset_id: STRING_32; invert: BOOLEAN; time: STRING_32): detachable V1_EXCHANGE_RATES
			-- Get all current rates
			-- Get the current exchange rate between requested asset and all other assets.                :::info  If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements.  :::                :::info  You can invert the rates by using Y &#x3D; 1 / X equation, for example BTC/USD &#x3D; 1 / (USD/BTC);  :::
			-- 
			-- argument: asset_id_base Requested exchange rates base asset identifier (from the Metadata -&gt; Assets) (required)
			-- 
			-- argument: filter_asset_id Comma or semicolon delimited asset identifiers used to filter response (optional) (optional, default to null)
			-- 
			-- argument: invert True will invert all the rates (optional, if true then rates will be calculated as &#x60;rate &#x3D; 1 / actual_rate&#x60; eg. &#x60;USD/BTC&#x60; as &#x60;BTC/USD&#x60;) (optional, default to false)
			-- 
			-- argument: time Time for historical rates (optional) (optional, default to null)
			-- 
			-- 
			-- Result V1_EXCHANGE_RATES
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/exchangerate/{asset_id_base}"
			l_path.replace_substring_all ("{"+"asset_id_base"+"}", api_client.url_encode (asset_id_base.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "filter_asset_id", filter_asset_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "invert", invert));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time", time));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"ApiKey">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { V1_EXCHANGE_RATES } l_response.data ({ V1_EXCHANGE_RATES }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_exchangerate_history_periods_get : detachable LIST [V1_TIMESERIES_PERIOD]
			-- Timeseries periods
			-- You can also obtain historical exchange rates of any asset pair, grouped into time periods.  Get full list of supported time periods available for requesting exchange rates historical timeseries data.                ## Timeseries periods  Time unit | Period identifiers  --- | ---  Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC  Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN  Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS  Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY
			-- 
			-- 
			-- Result LIST [V1_TIMESERIES_PERIOD]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/exchangerate/history/periods"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"ApiKey">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [V1_TIMESERIES_PERIOD] } l_response.data ({ LIST [V1_TIMESERIES_PERIOD] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
