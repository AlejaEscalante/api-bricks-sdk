/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.util.Date;
import java.util.*;
import org.openapitools.client.model.V1GeneralData;
import org.openapitools.client.model.V1ListingItem;
import org.openapitools.client.model.V1Metric;
import org.openapitools.client.model.V1MetricData;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class MetricsV1Api {
  String basePath = "https://rest.coinapi.io";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Current metrics for given asset
  * Get current asset metrics.
   * @param metricId Metric identifier (from the Metrics -&gt; Listing)
   * @param assetId Asset identifier (from the Metadata -&gt; Assets)
   * @param assetIdExternal Exchange asset identifier
   * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges)
   * @return List<V1GeneralData>
  */
  public List<V1GeneralData> v1MetricsAssetCurrentGet (String metricId, String assetId, String assetIdExternal, String exchangeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/metrics/asset/current";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "metric_id", metricId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_id", assetId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_id_external", assetIdExternal));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exchange_id", exchangeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<V1GeneralData>) ApiInvoker.deserialize(localVarResponse, "array", V1GeneralData.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Current metrics for given asset
   * Get current asset metrics.
   * @param metricId Metric identifier (from the Metrics -&gt; Listing)   * @param assetId Asset identifier (from the Metadata -&gt; Assets)   * @param assetIdExternal Exchange asset identifier   * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges)
  */
  public void v1MetricsAssetCurrentGet (String metricId, String assetId, String assetIdExternal, String exchangeId, final Response.Listener<List<V1GeneralData>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/metrics/asset/current".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "metric_id", metricId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_id", assetId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_id_external", assetIdExternal));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exchange_id", exchangeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<V1GeneralData>) ApiInvoker.deserialize(localVarResponse,  "array", V1GeneralData.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Historical metrics for asset
  * Get asset metrics history.
   * @param metricId Metric identifier (from the Metrics -&gt; Listing)
   * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges)
   * @param assetId Asset identifier (from the Metadata -&gt; Assets)
   * @param assetIdExternal Exchange asset identifier
   * @param timeStart Starting time in ISO 8601
   * @param timeEnd Ending time in ISO 8601
   * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
   * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60;
   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   * @return List<V1MetricData>
  */
  public List<V1MetricData> v1MetricsAssetHistoryGet (String metricId, String exchangeId, String assetId, String assetIdExternal, Date timeStart, Date timeEnd, String timeFormat, String periodId, Integer limit) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'metricId' is set
    if (metricId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metricId' when calling v1MetricsAssetHistoryGet",
        new ApiException(400, "Missing the required parameter 'metricId' when calling v1MetricsAssetHistoryGet"));
    }
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling v1MetricsAssetHistoryGet",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling v1MetricsAssetHistoryGet"));
    }

    // create path and map variables
    String path = "/v1/metrics/asset/history";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "metric_id", metricId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_id", assetId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_id_external", assetIdExternal));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exchange_id", exchangeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_start", timeStart));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_end", timeEnd));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_format", timeFormat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "period_id", periodId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<V1MetricData>) ApiInvoker.deserialize(localVarResponse, "array", V1MetricData.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Historical metrics for asset
   * Get asset metrics history.
   * @param metricId Metric identifier (from the Metrics -&gt; Listing)   * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges)   * @param assetId Asset identifier (from the Metadata -&gt; Assets)   * @param assetIdExternal Exchange asset identifier   * @param timeStart Starting time in ISO 8601   * @param timeEnd Ending time in ISO 8601   * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)   * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60;   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
  */
  public void v1MetricsAssetHistoryGet (String metricId, String exchangeId, String assetId, String assetIdExternal, Date timeStart, Date timeEnd, String timeFormat, String periodId, Integer limit, final Response.Listener<List<V1MetricData>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'metricId' is set
    if (metricId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metricId' when calling v1MetricsAssetHistoryGet",
        new ApiException(400, "Missing the required parameter 'metricId' when calling v1MetricsAssetHistoryGet"));
    }
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling v1MetricsAssetHistoryGet",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling v1MetricsAssetHistoryGet"));
    }

    // create path and map variables
    String path = "/v1/metrics/asset/history".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "metric_id", metricId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_id", assetId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_id_external", assetIdExternal));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exchange_id", exchangeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_start", timeStart));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_end", timeEnd));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_format", timeFormat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "period_id", periodId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<V1MetricData>) ApiInvoker.deserialize(localVarResponse,  "array", V1MetricData.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Listing of all supported metrics for asset
  * Get data metrics for asset.
   * @param metricId Metric identifier (from the Metrics -&gt; Listing)
   * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges)
   * @param chainId Chain identifier
   * @param networkId Network identifier
   * @param assetId Asset identifier (from the Metadata -&gt; Assets)
   * @param assetIdExternal The asset external identifier
   * @return List<V1ListingItem>
  */
  public List<V1ListingItem> v1MetricsAssetListingGet (String metricId, String exchangeId, String chainId, String networkId, String assetId, String assetIdExternal) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/metrics/asset/listing";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "metric_id", metricId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exchange_id", exchangeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "chain_id", chainId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "network_id", networkId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_id", assetId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_id_external", assetIdExternal));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<V1ListingItem>) ApiInvoker.deserialize(localVarResponse, "array", V1ListingItem.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Listing of all supported metrics for asset
   * Get data metrics for asset.
   * @param metricId Metric identifier (from the Metrics -&gt; Listing)   * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges)   * @param chainId Chain identifier   * @param networkId Network identifier   * @param assetId Asset identifier (from the Metadata -&gt; Assets)   * @param assetIdExternal The asset external identifier
  */
  public void v1MetricsAssetListingGet (String metricId, String exchangeId, String chainId, String networkId, String assetId, String assetIdExternal, final Response.Listener<List<V1ListingItem>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/metrics/asset/listing".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "metric_id", metricId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exchange_id", exchangeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "chain_id", chainId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "network_id", networkId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_id", assetId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "asset_id_external", assetIdExternal));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<V1ListingItem>) ApiInvoker.deserialize(localVarResponse,  "array", V1ListingItem.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Current metrics for given exchange
  * Get current exchange metrics values.
   * @param exchangeId The exchange identifier (from the Metadata -&gt; Exchanges)
   * @param metricId The metric identifier (from the Metrics -&gt; Listing)
   * @return List<V1GeneralData>
  */
  public List<V1GeneralData> v1MetricsExchangeCurrentGet (String exchangeId, String metricId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling v1MetricsExchangeCurrentGet",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling v1MetricsExchangeCurrentGet"));
    }

    // create path and map variables
    String path = "/v1/metrics/exchange/current";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "metric_id", metricId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exchange_id", exchangeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<V1GeneralData>) ApiInvoker.deserialize(localVarResponse, "array", V1GeneralData.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Current metrics for given exchange
   * Get current exchange metrics values.
   * @param exchangeId The exchange identifier (from the Metadata -&gt; Exchanges)   * @param metricId The metric identifier (from the Metrics -&gt; Listing)
  */
  public void v1MetricsExchangeCurrentGet (String exchangeId, String metricId, final Response.Listener<List<V1GeneralData>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling v1MetricsExchangeCurrentGet",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling v1MetricsExchangeCurrentGet"));
    }

    // create path and map variables
    String path = "/v1/metrics/exchange/current".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "metric_id", metricId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exchange_id", exchangeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<V1GeneralData>) ApiInvoker.deserialize(localVarResponse,  "array", V1GeneralData.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Historical metrics for the exchange
  * Get exchange metrics history.
   * @param metricId Metric identifier (from the Metrics -&gt; Listing)
   * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges)
   * @param timeStart Starting time in ISO 8601
   * @param timeEnd Ending time in ISO 8601
   * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
   * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60;
   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   * @return List<V1MetricData>
  */
  public List<V1MetricData> v1MetricsExchangeHistoryGet (String metricId, String exchangeId, Date timeStart, Date timeEnd, String timeFormat, String periodId, Integer limit) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'metricId' is set
    if (metricId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metricId' when calling v1MetricsExchangeHistoryGet",
        new ApiException(400, "Missing the required parameter 'metricId' when calling v1MetricsExchangeHistoryGet"));
    }
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling v1MetricsExchangeHistoryGet",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling v1MetricsExchangeHistoryGet"));
    }

    // create path and map variables
    String path = "/v1/metrics/exchange/history";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "metric_id", metricId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exchange_id", exchangeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_start", timeStart));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_end", timeEnd));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_format", timeFormat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "period_id", periodId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<V1MetricData>) ApiInvoker.deserialize(localVarResponse, "array", V1MetricData.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Historical metrics for the exchange
   * Get exchange metrics history.
   * @param metricId Metric identifier (from the Metrics -&gt; Listing)   * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges)   * @param timeStart Starting time in ISO 8601   * @param timeEnd Ending time in ISO 8601   * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)   * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60;   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
  */
  public void v1MetricsExchangeHistoryGet (String metricId, String exchangeId, Date timeStart, Date timeEnd, String timeFormat, String periodId, Integer limit, final Response.Listener<List<V1MetricData>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'metricId' is set
    if (metricId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metricId' when calling v1MetricsExchangeHistoryGet",
        new ApiException(400, "Missing the required parameter 'metricId' when calling v1MetricsExchangeHistoryGet"));
    }
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling v1MetricsExchangeHistoryGet",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling v1MetricsExchangeHistoryGet"));
    }

    // create path and map variables
    String path = "/v1/metrics/exchange/history".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "metric_id", metricId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exchange_id", exchangeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_start", timeStart));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_end", timeEnd));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_format", timeFormat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "period_id", periodId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<V1MetricData>) ApiInvoker.deserialize(localVarResponse,  "array", V1MetricData.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Listing of all supported exchange metrics
  * Get data metrics for exchange.
   * @param exchangeId The exchange identifier (from the Metadata -&gt; Exchanges)
   * @param metricId The metric identifier (from the Metrics -&gt; Listing)
   * @return List<V1ListingItem>
  */
  public List<V1ListingItem> v1MetricsExchangeListingGet (String exchangeId, String metricId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling v1MetricsExchangeListingGet",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling v1MetricsExchangeListingGet"));
    }

    // create path and map variables
    String path = "/v1/metrics/exchange/listing";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "metric_id", metricId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exchange_id", exchangeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<V1ListingItem>) ApiInvoker.deserialize(localVarResponse, "array", V1ListingItem.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Listing of all supported exchange metrics
   * Get data metrics for exchange.
   * @param exchangeId The exchange identifier (from the Metadata -&gt; Exchanges)   * @param metricId The metric identifier (from the Metrics -&gt; Listing)
  */
  public void v1MetricsExchangeListingGet (String exchangeId, String metricId, final Response.Listener<List<V1ListingItem>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'exchangeId' when calling v1MetricsExchangeListingGet",
        new ApiException(400, "Missing the required parameter 'exchangeId' when calling v1MetricsExchangeListingGet"));
    }

    // create path and map variables
    String path = "/v1/metrics/exchange/listing".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "metric_id", metricId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exchange_id", exchangeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<V1ListingItem>) ApiInvoker.deserialize(localVarResponse,  "array", V1ListingItem.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Listing of all supported metrics by CoinAPI
  * Get all data metrics.
   * @return List<V1Metric>
  */
  public List<V1Metric> v1MetricsListingGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/metrics/listing";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<V1Metric>) ApiInvoker.deserialize(localVarResponse, "array", V1Metric.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Listing of all supported metrics by CoinAPI
   * Get all data metrics.

  */
  public void v1MetricsListingGet (final Response.Listener<List<V1Metric>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/metrics/listing".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<V1Metric>) ApiInvoker.deserialize(localVarResponse,  "array", V1Metric.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Current metrics for given symbol
  * Get current symbol metrics.
   * @param metricId Metric identifier (from the Metrics -&gt; Listing)
   * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols)
   * @param exchangeId Exchange id (from the Metadata -&gt; Exchanges)
   * @return List<V1GeneralData>
  */
  public List<V1GeneralData> v1MetricsSymbolCurrentGet (String metricId, String symbolId, String exchangeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/metrics/symbol/current";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "metric_id", metricId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol_id", symbolId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exchange_id", exchangeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<V1GeneralData>) ApiInvoker.deserialize(localVarResponse, "array", V1GeneralData.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Current metrics for given symbol
   * Get current symbol metrics.
   * @param metricId Metric identifier (from the Metrics -&gt; Listing)   * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols)   * @param exchangeId Exchange id (from the Metadata -&gt; Exchanges)
  */
  public void v1MetricsSymbolCurrentGet (String metricId, String symbolId, String exchangeId, final Response.Listener<List<V1GeneralData>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/metrics/symbol/current".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "metric_id", metricId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol_id", symbolId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exchange_id", exchangeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<V1GeneralData>) ApiInvoker.deserialize(localVarResponse,  "array", V1GeneralData.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Historical metrics for symbol
  * Get symbol metrics history.
   * @param metricId Metric identifier (from the Metrics -&gt; Listing)
   * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols)
   * @param timeStart Starting time in ISO 8601
   * @param timeEnd Ending time in ISO 8601
   * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)
   * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60;
   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   * @return List<V1MetricData>
  */
  public List<V1MetricData> v1MetricsSymbolHistoryGet (String metricId, String symbolId, Date timeStart, Date timeEnd, String timeFormat, String periodId, Integer limit) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'metricId' is set
    if (metricId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metricId' when calling v1MetricsSymbolHistoryGet",
        new ApiException(400, "Missing the required parameter 'metricId' when calling v1MetricsSymbolHistoryGet"));
    }
    // verify the required parameter 'symbolId' is set
    if (symbolId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbolId' when calling v1MetricsSymbolHistoryGet",
        new ApiException(400, "Missing the required parameter 'symbolId' when calling v1MetricsSymbolHistoryGet"));
    }

    // create path and map variables
    String path = "/v1/metrics/symbol/history";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "metric_id", metricId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol_id", symbolId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_start", timeStart));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_end", timeEnd));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_format", timeFormat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "period_id", periodId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<V1MetricData>) ApiInvoker.deserialize(localVarResponse, "array", V1MetricData.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Historical metrics for symbol
   * Get symbol metrics history.
   * @param metricId Metric identifier (from the Metrics -&gt; Listing)   * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols)   * @param timeStart Starting time in ISO 8601   * @param timeEnd Ending time in ISO 8601   * @param timeFormat If set, returned values will be in unix timestamp format (valid values: unix_sec, unix_millisec, unix_microsec, unix_nanosec)   * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;2MTH&#x60;), default value is &#x60;1SEC&#x60;   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
  */
  public void v1MetricsSymbolHistoryGet (String metricId, String symbolId, Date timeStart, Date timeEnd, String timeFormat, String periodId, Integer limit, final Response.Listener<List<V1MetricData>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'metricId' is set
    if (metricId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'metricId' when calling v1MetricsSymbolHistoryGet",
        new ApiException(400, "Missing the required parameter 'metricId' when calling v1MetricsSymbolHistoryGet"));
    }
    // verify the required parameter 'symbolId' is set
    if (symbolId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbolId' when calling v1MetricsSymbolHistoryGet",
        new ApiException(400, "Missing the required parameter 'symbolId' when calling v1MetricsSymbolHistoryGet"));
    }

    // create path and map variables
    String path = "/v1/metrics/symbol/history".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "metric_id", metricId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol_id", symbolId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_start", timeStart));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_end", timeEnd));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_format", timeFormat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "period_id", periodId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<V1MetricData>) ApiInvoker.deserialize(localVarResponse,  "array", V1MetricData.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Listing of all supported metrics for symbol
  * Get data metrics for symbol.
   * @param metricId Metric identifier (from the Metrics -&gt; Listing)
   * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges)
   * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols)
   * @return List<V1ListingItem>
  */
  public List<V1ListingItem> v1MetricsSymbolListingGet (String metricId, String exchangeId, String symbolId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/metrics/symbol/listing";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "metric_id", metricId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exchange_id", exchangeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol_id", symbolId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<V1ListingItem>) ApiInvoker.deserialize(localVarResponse, "array", V1ListingItem.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Listing of all supported metrics for symbol
   * Get data metrics for symbol.
   * @param metricId Metric identifier (from the Metrics -&gt; Listing)   * @param exchangeId Exchange identifier (from the Metadata -&gt; Exchanges)   * @param symbolId Symbol identifier (from the Metadata -&gt; Symbols)
  */
  public void v1MetricsSymbolListingGet (String metricId, String exchangeId, String symbolId, final Response.Listener<List<V1ListingItem>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/metrics/symbol/listing".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "metric_id", metricId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exchange_id", exchangeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol_id", symbolId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<V1ListingItem>) ApiInvoker.deserialize(localVarResponse,  "array", V1ListingItem.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
