/**
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.util.*;
import org.openapitools.client.model.V1OrderBook;
import org.openapitools.client.model.V1OrderBookBase;
import org.openapitools.client.model.V1OrderBookDepth;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class OrderBookApi {
  String basePath = "https://rest.coinapi.io";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get current order book
  * Retrieves the current order book for the specified symbol.
   * @param symbolId The symbol ID (from the Metadata -&gt; Symbols)
   * @param limitLevels The maximum number of levels to include in the response.
   * @return V1OrderBookBase
  */
  public V1OrderBookBase v1OrderbooksSymbolIdCurrentGet (String symbolId, Integer limitLevels) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'symbolId' is set
    if (symbolId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdCurrentGet",
        new ApiException(400, "Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdCurrentGet"));
    }

    // create path and map variables
    String path = "/v1/orderbooks/{symbol_id}/current".replaceAll("\\{" + "symbol_id" + "\\}", apiInvoker.escapeString(symbolId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit_levels", limitLevels));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (V1OrderBookBase) ApiInvoker.deserialize(localVarResponse, "", V1OrderBookBase.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get current order book
   * Retrieves the current order book for the specified symbol.
   * @param symbolId The symbol ID (from the Metadata -&gt; Symbols)   * @param limitLevels The maximum number of levels to include in the response.
  */
  public void v1OrderbooksSymbolIdCurrentGet (String symbolId, Integer limitLevels, final Response.Listener<V1OrderBookBase> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'symbolId' is set
    if (symbolId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdCurrentGet",
        new ApiException(400, "Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdCurrentGet"));
    }

    // create path and map variables
    String path = "/v1/orderbooks/{symbol_id}/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "symbol_id" + "\\}", apiInvoker.escapeString(symbolId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit_levels", limitLevels));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((V1OrderBookBase) ApiInvoker.deserialize(localVarResponse,  "", V1OrderBookBase.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Current depth of the order book
  * Retrieves the current depth of the order book for the specified symbol.
   * @param symbolId The symbol ID (from the Metadata -&gt; Symbols)
   * @param limitLevels The maximum number of levels to include in the response.
   * @return V1OrderBookDepth
  */
  public V1OrderBookDepth v1OrderbooksSymbolIdDepthCurrentGet (String symbolId, Integer limitLevels) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'symbolId' is set
    if (symbolId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdDepthCurrentGet",
        new ApiException(400, "Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdDepthCurrentGet"));
    }

    // create path and map variables
    String path = "/v1/orderbooks/{symbol_id}/depth/current".replaceAll("\\{" + "symbol_id" + "\\}", apiInvoker.escapeString(symbolId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit_levels", limitLevels));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (V1OrderBookDepth) ApiInvoker.deserialize(localVarResponse, "", V1OrderBookDepth.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Current depth of the order book
   * Retrieves the current depth of the order book for the specified symbol.
   * @param symbolId The symbol ID (from the Metadata -&gt; Symbols)   * @param limitLevels The maximum number of levels to include in the response.
  */
  public void v1OrderbooksSymbolIdDepthCurrentGet (String symbolId, Integer limitLevels, final Response.Listener<V1OrderBookDepth> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'symbolId' is set
    if (symbolId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdDepthCurrentGet",
        new ApiException(400, "Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdDepthCurrentGet"));
    }

    // create path and map variables
    String path = "/v1/orderbooks/{symbol_id}/depth/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "symbol_id" + "\\}", apiInvoker.escapeString(symbolId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit_levels", limitLevels));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((V1OrderBookDepth) ApiInvoker.deserialize(localVarResponse,  "", V1OrderBookDepth.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Historical data
  * Get historical order book snapshots for a specific symbol within time range, returned in time ascending order.              :::info The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels. :::  :::warning The &#39;time_start&#39; and &#39;time_end&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day. Please use the &#39;date&#39; parameter instead for querying data for a specific day without filter. :::
   * @param symbolId Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols)
   * @param date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided)
   * @param timeStart Starting time in ISO 8601 (deprecated, use &#39;date&#39; instead)
   * @param timeEnd Timeseries ending time in ISO 8601 (deprecated, use &#39;date&#39; instead)
   * @param limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional)
   * @return List<V1OrderBook>
  */
  public List<V1OrderBook> v1OrderbooksSymbolIdHistoryGet (String symbolId, String date, String timeStart, String timeEnd, Integer limit, Integer limitLevels) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'symbolId' is set
    if (symbolId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdHistoryGet",
        new ApiException(400, "Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdHistoryGet"));
    }

    // create path and map variables
    String path = "/v1/orderbooks/{symbol_id}/history".replaceAll("\\{" + "symbol_id" + "\\}", apiInvoker.escapeString(symbolId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_start", timeStart));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_end", timeEnd));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit_levels", limitLevels));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<V1OrderBook>) ApiInvoker.deserialize(localVarResponse, "array", V1OrderBook.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Historical data
   * Get historical order book snapshots for a specific symbol within time range, returned in time ascending order.              :::info The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels. :::  :::warning The &#39;time_start&#39; and &#39;time_end&#39; parameters must be from the same day as this endpoint provides intraday data only for specific day. Please use the &#39;date&#39; parameter instead for querying data for a specific day without filter. :::
   * @param symbolId Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols)   * @param date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided)   * @param timeStart Starting time in ISO 8601 (deprecated, use &#39;date&#39; instead)   * @param timeEnd Timeseries ending time in ISO 8601 (deprecated, use &#39;date&#39; instead)   * @param limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)   * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional)
  */
  public void v1OrderbooksSymbolIdHistoryGet (String symbolId, String date, String timeStart, String timeEnd, Integer limit, Integer limitLevels, final Response.Listener<List<V1OrderBook>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'symbolId' is set
    if (symbolId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdHistoryGet",
        new ApiException(400, "Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdHistoryGet"));
    }

    // create path and map variables
    String path = "/v1/orderbooks/{symbol_id}/history".replaceAll("\\{format\\}","json").replaceAll("\\{" + "symbol_id" + "\\}", apiInvoker.escapeString(symbolId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_start", timeStart));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_end", timeEnd));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit_levels", limitLevels));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<V1OrderBook>) ApiInvoker.deserialize(localVarResponse,  "array", V1OrderBook.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Latest data
  * Get latest order book snapshots for a specific symbol, returned in time descending order.              :::info The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels. :::
   * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)
   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional)
   * @return List<V1OrderBook>
  */
  public List<V1OrderBook> v1OrderbooksSymbolIdLatestGet (String symbolId, Integer limit, Integer limitLevels) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'symbolId' is set
    if (symbolId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdLatestGet",
        new ApiException(400, "Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdLatestGet"));
    }

    // create path and map variables
    String path = "/v1/orderbooks/{symbol_id}/latest".replaceAll("\\{" + "symbol_id" + "\\}", apiInvoker.escapeString(symbolId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit_levels", limitLevels));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<V1OrderBook>) ApiInvoker.deserialize(localVarResponse, "array", V1OrderBook.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Latest data
   * Get latest order book snapshots for a specific symbol, returned in time descending order.              :::info The historical order book data via the REST API is currently limited by a number of updates and to the maximum number of 20 levels. :::
   * @param symbolId Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols)   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)   * @param limitLevels Maximum amount of levels from each side of the book to include in response (optional)
  */
  public void v1OrderbooksSymbolIdLatestGet (String symbolId, Integer limit, Integer limitLevels, final Response.Listener<List<V1OrderBook>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'symbolId' is set
    if (symbolId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdLatestGet",
        new ApiException(400, "Missing the required parameter 'symbolId' when calling v1OrderbooksSymbolIdLatestGet"));
    }

    // create path and map variables
    String path = "/v1/orderbooks/{symbol_id}/latest".replaceAll("\\{format\\}","json").replaceAll("\\{" + "symbol_id" + "\\}", apiInvoker.escapeString(symbolId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit_levels", limitLevels));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<V1OrderBook>) ApiInvoker.deserialize(localVarResponse,  "array", V1OrderBook.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
