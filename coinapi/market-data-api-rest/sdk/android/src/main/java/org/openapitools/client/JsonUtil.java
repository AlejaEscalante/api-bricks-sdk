/*
 * CoinAPI Market Data REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import org.openapitools.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("ModelsExchangeTimeseriesItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<ModelsExchangeTimeseriesItem>>(){}.getType();
    }
    
    if ("OptionsOptionExchangeGroup".equalsIgnoreCase(className)) {
      return new TypeToken<List<OptionsOptionExchangeGroup>>(){}.getType();
    }
    
    if ("OptionsStrike".equalsIgnoreCase(className)) {
      return new TypeToken<List<OptionsStrike>>(){}.getType();
    }
    
    if ("V1Asset".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1Asset>>(){}.getType();
    }
    
    if ("V1Chain".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1Chain>>(){}.getType();
    }
    
    if ("V1ChainNetworkAddress".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1ChainNetworkAddress>>(){}.getType();
    }
    
    if ("V1Exchange".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1Exchange>>(){}.getType();
    }
    
    if ("V1ExchangeRate".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1ExchangeRate>>(){}.getType();
    }
    
    if ("V1ExchangeRates".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1ExchangeRates>>(){}.getType();
    }
    
    if ("V1ExchangeRatesRate".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1ExchangeRatesRate>>(){}.getType();
    }
    
    if ("V1ExchangeRatesTimeseriesItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1ExchangeRatesTimeseriesItem>>(){}.getType();
    }
    
    if ("V1GeneralData".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1GeneralData>>(){}.getType();
    }
    
    if ("V1Icon".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1Icon>>(){}.getType();
    }
    
    if ("V1LastTrade".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1LastTrade>>(){}.getType();
    }
    
    if ("V1ListingItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1ListingItem>>(){}.getType();
    }
    
    if ("V1Metric".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1Metric>>(){}.getType();
    }
    
    if ("V1MetricData".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1MetricData>>(){}.getType();
    }
    
    if ("V1MetricInfo".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1MetricInfo>>(){}.getType();
    }
    
    if ("V1OrderBook".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1OrderBook>>(){}.getType();
    }
    
    if ("V1OrderBookBase".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1OrderBookBase>>(){}.getType();
    }
    
    if ("V1OrderBookDepth".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1OrderBookDepth>>(){}.getType();
    }
    
    if ("V1Quote".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1Quote>>(){}.getType();
    }
    
    if ("V1QuoteTrade".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1QuoteTrade>>(){}.getType();
    }
    
    if ("V1Symbol".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1Symbol>>(){}.getType();
    }
    
    if ("V1SymbolMapping".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1SymbolMapping>>(){}.getType();
    }
    
    if ("V1TimeseriesItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1TimeseriesItem>>(){}.getType();
    }
    
    if ("V1TimeseriesPeriod".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1TimeseriesPeriod>>(){}.getType();
    }
    
    if ("V1Trade".equalsIgnoreCase(className)) {
      return new TypeToken<List<V1Trade>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("ModelsExchangeTimeseriesItem".equalsIgnoreCase(className)) {
      return new TypeToken<ModelsExchangeTimeseriesItem>(){}.getType();
    }
    
    if ("OptionsOptionExchangeGroup".equalsIgnoreCase(className)) {
      return new TypeToken<OptionsOptionExchangeGroup>(){}.getType();
    }
    
    if ("OptionsStrike".equalsIgnoreCase(className)) {
      return new TypeToken<OptionsStrike>(){}.getType();
    }
    
    if ("V1Asset".equalsIgnoreCase(className)) {
      return new TypeToken<V1Asset>(){}.getType();
    }
    
    if ("V1Chain".equalsIgnoreCase(className)) {
      return new TypeToken<V1Chain>(){}.getType();
    }
    
    if ("V1ChainNetworkAddress".equalsIgnoreCase(className)) {
      return new TypeToken<V1ChainNetworkAddress>(){}.getType();
    }
    
    if ("V1Exchange".equalsIgnoreCase(className)) {
      return new TypeToken<V1Exchange>(){}.getType();
    }
    
    if ("V1ExchangeRate".equalsIgnoreCase(className)) {
      return new TypeToken<V1ExchangeRate>(){}.getType();
    }
    
    if ("V1ExchangeRates".equalsIgnoreCase(className)) {
      return new TypeToken<V1ExchangeRates>(){}.getType();
    }
    
    if ("V1ExchangeRatesRate".equalsIgnoreCase(className)) {
      return new TypeToken<V1ExchangeRatesRate>(){}.getType();
    }
    
    if ("V1ExchangeRatesTimeseriesItem".equalsIgnoreCase(className)) {
      return new TypeToken<V1ExchangeRatesTimeseriesItem>(){}.getType();
    }
    
    if ("V1GeneralData".equalsIgnoreCase(className)) {
      return new TypeToken<V1GeneralData>(){}.getType();
    }
    
    if ("V1Icon".equalsIgnoreCase(className)) {
      return new TypeToken<V1Icon>(){}.getType();
    }
    
    if ("V1LastTrade".equalsIgnoreCase(className)) {
      return new TypeToken<V1LastTrade>(){}.getType();
    }
    
    if ("V1ListingItem".equalsIgnoreCase(className)) {
      return new TypeToken<V1ListingItem>(){}.getType();
    }
    
    if ("V1Metric".equalsIgnoreCase(className)) {
      return new TypeToken<V1Metric>(){}.getType();
    }
    
    if ("V1MetricData".equalsIgnoreCase(className)) {
      return new TypeToken<V1MetricData>(){}.getType();
    }
    
    if ("V1MetricInfo".equalsIgnoreCase(className)) {
      return new TypeToken<V1MetricInfo>(){}.getType();
    }
    
    if ("V1OrderBook".equalsIgnoreCase(className)) {
      return new TypeToken<V1OrderBook>(){}.getType();
    }
    
    if ("V1OrderBookBase".equalsIgnoreCase(className)) {
      return new TypeToken<V1OrderBookBase>(){}.getType();
    }
    
    if ("V1OrderBookDepth".equalsIgnoreCase(className)) {
      return new TypeToken<V1OrderBookDepth>(){}.getType();
    }
    
    if ("V1Quote".equalsIgnoreCase(className)) {
      return new TypeToken<V1Quote>(){}.getType();
    }
    
    if ("V1QuoteTrade".equalsIgnoreCase(className)) {
      return new TypeToken<V1QuoteTrade>(){}.getType();
    }
    
    if ("V1Symbol".equalsIgnoreCase(className)) {
      return new TypeToken<V1Symbol>(){}.getType();
    }
    
    if ("V1SymbolMapping".equalsIgnoreCase(className)) {
      return new TypeToken<V1SymbolMapping>(){}.getType();
    }
    
    if ("V1TimeseriesItem".equalsIgnoreCase(className)) {
      return new TypeToken<V1TimeseriesItem>(){}.getType();
    }
    
    if ("V1TimeseriesPeriod".equalsIgnoreCase(className)) {
      return new TypeToken<V1TimeseriesPeriod>(){}.getType();
    }
    
    if ("V1Trade".equalsIgnoreCase(className)) {
      return new TypeToken<V1Trade>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
