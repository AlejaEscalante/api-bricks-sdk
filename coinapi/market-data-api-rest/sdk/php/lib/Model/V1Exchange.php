<?php
/**
 * V1Exchange
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CoinAPI Market Data REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * V1Exchange Class Doc Comment
 *
 * @category Class
 * @description Represents an exchange.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V1Exchange implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'v1.Exchange';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'exchange_id' => 'string',
        'website' => 'string',
        'name' => 'string',
        'data_start' => 'string',
        'data_end' => 'string',
        'data_quote_start' => '\DateTime',
        'data_quote_end' => '\DateTime',
        'data_orderbook_start' => '\DateTime',
        'data_orderbook_end' => '\DateTime',
        'data_trade_start' => '\DateTime',
        'data_trade_end' => '\DateTime',
        'data_trade_count' => 'int',
        'data_symbols_count' => 'int',
        'volume_1hrs_usd' => 'float',
        'volume_1day_usd' => 'float',
        'volume_1mth_usd' => 'float',
        'metric_id' => 'string[]',
        'icons' => '\OpenAPI\Client\Model\V1Icon[]',
        'rank' => 'float',
        'integration_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'exchange_id' => null,
        'website' => null,
        'name' => null,
        'data_start' => null,
        'data_end' => null,
        'data_quote_start' => 'date-time',
        'data_quote_end' => 'date-time',
        'data_orderbook_start' => 'date-time',
        'data_orderbook_end' => 'date-time',
        'data_trade_start' => 'date-time',
        'data_trade_end' => 'date-time',
        'data_trade_count' => 'int64',
        'data_symbols_count' => 'int64',
        'volume_1hrs_usd' => 'double',
        'volume_1day_usd' => 'double',
        'volume_1mth_usd' => 'double',
        'metric_id' => null,
        'icons' => null,
        'rank' => 'double',
        'integration_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'exchange_id' => true,
        'website' => true,
        'name' => true,
        'data_start' => true,
        'data_end' => true,
        'data_quote_start' => true,
        'data_quote_end' => true,
        'data_orderbook_start' => true,
        'data_orderbook_end' => true,
        'data_trade_start' => true,
        'data_trade_end' => true,
        'data_trade_count' => true,
        'data_symbols_count' => true,
        'volume_1hrs_usd' => true,
        'volume_1day_usd' => true,
        'volume_1mth_usd' => true,
        'metric_id' => true,
        'icons' => true,
        'rank' => false,
        'integration_status' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'exchange_id' => 'exchange_id',
        'website' => 'website',
        'name' => 'name',
        'data_start' => 'data_start',
        'data_end' => 'data_end',
        'data_quote_start' => 'data_quote_start',
        'data_quote_end' => 'data_quote_end',
        'data_orderbook_start' => 'data_orderbook_start',
        'data_orderbook_end' => 'data_orderbook_end',
        'data_trade_start' => 'data_trade_start',
        'data_trade_end' => 'data_trade_end',
        'data_trade_count' => 'data_trade_count',
        'data_symbols_count' => 'data_symbols_count',
        'volume_1hrs_usd' => 'volume_1hrs_usd',
        'volume_1day_usd' => 'volume_1day_usd',
        'volume_1mth_usd' => 'volume_1mth_usd',
        'metric_id' => 'metric_id',
        'icons' => 'icons',
        'rank' => 'rank',
        'integration_status' => 'integration_status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'exchange_id' => 'setExchangeId',
        'website' => 'setWebsite',
        'name' => 'setName',
        'data_start' => 'setDataStart',
        'data_end' => 'setDataEnd',
        'data_quote_start' => 'setDataQuoteStart',
        'data_quote_end' => 'setDataQuoteEnd',
        'data_orderbook_start' => 'setDataOrderbookStart',
        'data_orderbook_end' => 'setDataOrderbookEnd',
        'data_trade_start' => 'setDataTradeStart',
        'data_trade_end' => 'setDataTradeEnd',
        'data_trade_count' => 'setDataTradeCount',
        'data_symbols_count' => 'setDataSymbolsCount',
        'volume_1hrs_usd' => 'setVolume1hrsUsd',
        'volume_1day_usd' => 'setVolume1dayUsd',
        'volume_1mth_usd' => 'setVolume1mthUsd',
        'metric_id' => 'setMetricId',
        'icons' => 'setIcons',
        'rank' => 'setRank',
        'integration_status' => 'setIntegrationStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'exchange_id' => 'getExchangeId',
        'website' => 'getWebsite',
        'name' => 'getName',
        'data_start' => 'getDataStart',
        'data_end' => 'getDataEnd',
        'data_quote_start' => 'getDataQuoteStart',
        'data_quote_end' => 'getDataQuoteEnd',
        'data_orderbook_start' => 'getDataOrderbookStart',
        'data_orderbook_end' => 'getDataOrderbookEnd',
        'data_trade_start' => 'getDataTradeStart',
        'data_trade_end' => 'getDataTradeEnd',
        'data_trade_count' => 'getDataTradeCount',
        'data_symbols_count' => 'getDataSymbolsCount',
        'volume_1hrs_usd' => 'getVolume1hrsUsd',
        'volume_1day_usd' => 'getVolume1dayUsd',
        'volume_1mth_usd' => 'getVolume1mthUsd',
        'metric_id' => 'getMetricId',
        'icons' => 'getIcons',
        'rank' => 'getRank',
        'integration_status' => 'getIntegrationStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('exchange_id', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('data_start', $data ?? [], null);
        $this->setIfExists('data_end', $data ?? [], null);
        $this->setIfExists('data_quote_start', $data ?? [], null);
        $this->setIfExists('data_quote_end', $data ?? [], null);
        $this->setIfExists('data_orderbook_start', $data ?? [], null);
        $this->setIfExists('data_orderbook_end', $data ?? [], null);
        $this->setIfExists('data_trade_start', $data ?? [], null);
        $this->setIfExists('data_trade_end', $data ?? [], null);
        $this->setIfExists('data_trade_count', $data ?? [], null);
        $this->setIfExists('data_symbols_count', $data ?? [], null);
        $this->setIfExists('volume_1hrs_usd', $data ?? [], null);
        $this->setIfExists('volume_1day_usd', $data ?? [], null);
        $this->setIfExists('volume_1mth_usd', $data ?? [], null);
        $this->setIfExists('metric_id', $data ?? [], null);
        $this->setIfExists('icons', $data ?? [], null);
        $this->setIfExists('rank', $data ?? [], null);
        $this->setIfExists('integration_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets exchange_id
     *
     * @return string|null
     */
    public function getExchangeId()
    {
        return $this->container['exchange_id'];
    }

    /**
     * Sets exchange_id
     *
     * @param string|null $exchange_id Gets or sets the exchange ID.
     *
     * @return self
     */
    public function setExchangeId($exchange_id)
    {
        if (is_null($exchange_id)) {
            array_push($this->openAPINullablesSetToNull, 'exchange_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exchange_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exchange_id'] = $exchange_id;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website Gets or sets the website URL of the exchange.
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            array_push($this->openAPINullablesSetToNull, 'website');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('website', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Gets or sets the name of the exchange.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets data_start
     *
     * @return string|null
     */
    public function getDataStart()
    {
        return $this->container['data_start'];
    }

    /**
     * Sets data_start
     *
     * @param string|null $data_start data_start
     *
     * @return self
     */
    public function setDataStart($data_start)
    {
        if (is_null($data_start)) {
            array_push($this->openAPINullablesSetToNull, 'data_start');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_start', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_start'] = $data_start;

        return $this;
    }

    /**
     * Gets data_end
     *
     * @return string|null
     */
    public function getDataEnd()
    {
        return $this->container['data_end'];
    }

    /**
     * Sets data_end
     *
     * @param string|null $data_end data_end
     *
     * @return self
     */
    public function setDataEnd($data_end)
    {
        if (is_null($data_end)) {
            array_push($this->openAPINullablesSetToNull, 'data_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_end', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_end'] = $data_end;

        return $this;
    }

    /**
     * Gets data_quote_start
     *
     * @return \DateTime|null
     */
    public function getDataQuoteStart()
    {
        return $this->container['data_quote_start'];
    }

    /**
     * Sets data_quote_start
     *
     * @param \DateTime|null $data_quote_start Gets or sets the start date of quote data.
     *
     * @return self
     */
    public function setDataQuoteStart($data_quote_start)
    {
        if (is_null($data_quote_start)) {
            array_push($this->openAPINullablesSetToNull, 'data_quote_start');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_quote_start', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_quote_start'] = $data_quote_start;

        return $this;
    }

    /**
     * Gets data_quote_end
     *
     * @return \DateTime|null
     */
    public function getDataQuoteEnd()
    {
        return $this->container['data_quote_end'];
    }

    /**
     * Sets data_quote_end
     *
     * @param \DateTime|null $data_quote_end Gets or sets the end date of quote data.
     *
     * @return self
     */
    public function setDataQuoteEnd($data_quote_end)
    {
        if (is_null($data_quote_end)) {
            array_push($this->openAPINullablesSetToNull, 'data_quote_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_quote_end', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_quote_end'] = $data_quote_end;

        return $this;
    }

    /**
     * Gets data_orderbook_start
     *
     * @return \DateTime|null
     */
    public function getDataOrderbookStart()
    {
        return $this->container['data_orderbook_start'];
    }

    /**
     * Sets data_orderbook_start
     *
     * @param \DateTime|null $data_orderbook_start Gets or sets the start date of order book data.
     *
     * @return self
     */
    public function setDataOrderbookStart($data_orderbook_start)
    {
        if (is_null($data_orderbook_start)) {
            array_push($this->openAPINullablesSetToNull, 'data_orderbook_start');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_orderbook_start', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_orderbook_start'] = $data_orderbook_start;

        return $this;
    }

    /**
     * Gets data_orderbook_end
     *
     * @return \DateTime|null
     */
    public function getDataOrderbookEnd()
    {
        return $this->container['data_orderbook_end'];
    }

    /**
     * Sets data_orderbook_end
     *
     * @param \DateTime|null $data_orderbook_end Gets or sets the end date of order book data.
     *
     * @return self
     */
    public function setDataOrderbookEnd($data_orderbook_end)
    {
        if (is_null($data_orderbook_end)) {
            array_push($this->openAPINullablesSetToNull, 'data_orderbook_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_orderbook_end', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_orderbook_end'] = $data_orderbook_end;

        return $this;
    }

    /**
     * Gets data_trade_start
     *
     * @return \DateTime|null
     */
    public function getDataTradeStart()
    {
        return $this->container['data_trade_start'];
    }

    /**
     * Sets data_trade_start
     *
     * @param \DateTime|null $data_trade_start Gets or sets the start date of trade data.
     *
     * @return self
     */
    public function setDataTradeStart($data_trade_start)
    {
        if (is_null($data_trade_start)) {
            array_push($this->openAPINullablesSetToNull, 'data_trade_start');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_trade_start', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_trade_start'] = $data_trade_start;

        return $this;
    }

    /**
     * Gets data_trade_end
     *
     * @return \DateTime|null
     */
    public function getDataTradeEnd()
    {
        return $this->container['data_trade_end'];
    }

    /**
     * Sets data_trade_end
     *
     * @param \DateTime|null $data_trade_end Gets or sets the end date of trade data.
     *
     * @return self
     */
    public function setDataTradeEnd($data_trade_end)
    {
        if (is_null($data_trade_end)) {
            array_push($this->openAPINullablesSetToNull, 'data_trade_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_trade_end', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_trade_end'] = $data_trade_end;

        return $this;
    }

    /**
     * Gets data_trade_count
     *
     * @return int|null
     */
    public function getDataTradeCount()
    {
        return $this->container['data_trade_count'];
    }

    /**
     * Sets data_trade_count
     *
     * @param int|null $data_trade_count Gets or sets the number of trades.
     *
     * @return self
     */
    public function setDataTradeCount($data_trade_count)
    {
        if (is_null($data_trade_count)) {
            array_push($this->openAPINullablesSetToNull, 'data_trade_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_trade_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_trade_count'] = $data_trade_count;

        return $this;
    }

    /**
     * Gets data_symbols_count
     *
     * @return int|null
     */
    public function getDataSymbolsCount()
    {
        return $this->container['data_symbols_count'];
    }

    /**
     * Sets data_symbols_count
     *
     * @param int|null $data_symbols_count Gets or sets the number of symbols.
     *
     * @return self
     */
    public function setDataSymbolsCount($data_symbols_count)
    {
        if (is_null($data_symbols_count)) {
            array_push($this->openAPINullablesSetToNull, 'data_symbols_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_symbols_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_symbols_count'] = $data_symbols_count;

        return $this;
    }

    /**
     * Gets volume_1hrs_usd
     *
     * @return float|null
     */
    public function getVolume1hrsUsd()
    {
        return $this->container['volume_1hrs_usd'];
    }

    /**
     * Sets volume_1hrs_usd
     *
     * @param float|null $volume_1hrs_usd Gets or sets the USD volume in the last 1 hour.
     *
     * @return self
     */
    public function setVolume1hrsUsd($volume_1hrs_usd)
    {
        if (is_null($volume_1hrs_usd)) {
            array_push($this->openAPINullablesSetToNull, 'volume_1hrs_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('volume_1hrs_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['volume_1hrs_usd'] = $volume_1hrs_usd;

        return $this;
    }

    /**
     * Gets volume_1day_usd
     *
     * @return float|null
     */
    public function getVolume1dayUsd()
    {
        return $this->container['volume_1day_usd'];
    }

    /**
     * Sets volume_1day_usd
     *
     * @param float|null $volume_1day_usd Gets or sets the USD volume in the last 1 day.
     *
     * @return self
     */
    public function setVolume1dayUsd($volume_1day_usd)
    {
        if (is_null($volume_1day_usd)) {
            array_push($this->openAPINullablesSetToNull, 'volume_1day_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('volume_1day_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['volume_1day_usd'] = $volume_1day_usd;

        return $this;
    }

    /**
     * Gets volume_1mth_usd
     *
     * @return float|null
     */
    public function getVolume1mthUsd()
    {
        return $this->container['volume_1mth_usd'];
    }

    /**
     * Sets volume_1mth_usd
     *
     * @param float|null $volume_1mth_usd Gets or sets the USD volume in the last 1 month.
     *
     * @return self
     */
    public function setVolume1mthUsd($volume_1mth_usd)
    {
        if (is_null($volume_1mth_usd)) {
            array_push($this->openAPINullablesSetToNull, 'volume_1mth_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('volume_1mth_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['volume_1mth_usd'] = $volume_1mth_usd;

        return $this;
    }

    /**
     * Gets metric_id
     *
     * @return string[]|null
     */
    public function getMetricId()
    {
        return $this->container['metric_id'];
    }

    /**
     * Sets metric_id
     *
     * @param string[]|null $metric_id Gets or sets the list of metric IDs.
     *
     * @return self
     */
    public function setMetricId($metric_id)
    {
        if (is_null($metric_id)) {
            array_push($this->openAPINullablesSetToNull, 'metric_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metric_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metric_id'] = $metric_id;

        return $this;
    }

    /**
     * Gets icons
     *
     * @return \OpenAPI\Client\Model\V1Icon[]|null
     */
    public function getIcons()
    {
        return $this->container['icons'];
    }

    /**
     * Sets icons
     *
     * @param \OpenAPI\Client\Model\V1Icon[]|null $icons Gets or sets the list of icons for the exchange.
     *
     * @return self
     */
    public function setIcons($icons)
    {
        if (is_null($icons)) {
            array_push($this->openAPINullablesSetToNull, 'icons');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('icons', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['icons'] = $icons;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return float|null
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param float|null $rank Rank of the exchange.
     *
     * @return self
     */
    public function setRank($rank)
    {
        if (is_null($rank)) {
            throw new \InvalidArgumentException('non-nullable rank cannot be null');
        }
        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets integration_status
     *
     * @return string|null
     */
    public function getIntegrationStatus()
    {
        return $this->container['integration_status'];
    }

    /**
     * Sets integration_status
     *
     * @param string|null $integration_status Status of the integration
     *
     * @return self
     */
    public function setIntegrationStatus($integration_status)
    {
        if (is_null($integration_status)) {
            array_push($this->openAPINullablesSetToNull, 'integration_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('integration_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['integration_status'] = $integration_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


