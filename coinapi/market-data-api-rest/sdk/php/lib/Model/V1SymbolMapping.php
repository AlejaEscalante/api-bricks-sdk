<?php
/**
 * V1SymbolMapping
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CoinAPI Market Data REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * V1SymbolMapping Class Doc Comment
 *
 * @category Class
 * @description Represents symbol mapping information for exchange symbols.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V1SymbolMapping implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'v1.SymbolMapping';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'symbol_id' => 'string',
        'symbol_id_exchange' => 'string',
        'coinapi_datainfo_id' => 'int',
        'asset_id_base_exchange' => 'string',
        'asset_id_quote_exchange' => 'string',
        'asset_id_base' => 'string',
        'asset_id_quote' => 'string',
        'price_precision' => 'float',
        'size_precision' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'symbol_id' => null,
        'symbol_id_exchange' => null,
        'coinapi_datainfo_id' => 'int32',
        'asset_id_base_exchange' => null,
        'asset_id_quote_exchange' => null,
        'asset_id_base' => null,
        'asset_id_quote' => null,
        'price_precision' => 'double',
        'size_precision' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'symbol_id' => true,
        'symbol_id_exchange' => true,
        'coinapi_datainfo_id' => false,
        'asset_id_base_exchange' => true,
        'asset_id_quote_exchange' => true,
        'asset_id_base' => true,
        'asset_id_quote' => true,
        'price_precision' => true,
        'size_precision' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol_id' => 'symbol_id',
        'symbol_id_exchange' => 'symbol_id_exchange',
        'coinapi_datainfo_id' => 'coinapi_datainfo_id',
        'asset_id_base_exchange' => 'asset_id_base_exchange',
        'asset_id_quote_exchange' => 'asset_id_quote_exchange',
        'asset_id_base' => 'asset_id_base',
        'asset_id_quote' => 'asset_id_quote',
        'price_precision' => 'price_precision',
        'size_precision' => 'size_precision'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol_id' => 'setSymbolId',
        'symbol_id_exchange' => 'setSymbolIdExchange',
        'coinapi_datainfo_id' => 'setCoinapiDatainfoId',
        'asset_id_base_exchange' => 'setAssetIdBaseExchange',
        'asset_id_quote_exchange' => 'setAssetIdQuoteExchange',
        'asset_id_base' => 'setAssetIdBase',
        'asset_id_quote' => 'setAssetIdQuote',
        'price_precision' => 'setPricePrecision',
        'size_precision' => 'setSizePrecision'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol_id' => 'getSymbolId',
        'symbol_id_exchange' => 'getSymbolIdExchange',
        'coinapi_datainfo_id' => 'getCoinapiDatainfoId',
        'asset_id_base_exchange' => 'getAssetIdBaseExchange',
        'asset_id_quote_exchange' => 'getAssetIdQuoteExchange',
        'asset_id_base' => 'getAssetIdBase',
        'asset_id_quote' => 'getAssetIdQuote',
        'price_precision' => 'getPricePrecision',
        'size_precision' => 'getSizePrecision'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('symbol_id', $data ?? [], null);
        $this->setIfExists('symbol_id_exchange', $data ?? [], null);
        $this->setIfExists('coinapi_datainfo_id', $data ?? [], null);
        $this->setIfExists('asset_id_base_exchange', $data ?? [], null);
        $this->setIfExists('asset_id_quote_exchange', $data ?? [], null);
        $this->setIfExists('asset_id_base', $data ?? [], null);
        $this->setIfExists('asset_id_quote', $data ?? [], null);
        $this->setIfExists('price_precision', $data ?? [], null);
        $this->setIfExists('size_precision', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol_id
     *
     * @return string|null
     */
    public function getSymbolId()
    {
        return $this->container['symbol_id'];
    }

    /**
     * Sets symbol_id
     *
     * @param string|null $symbol_id The symbol ID.
     *
     * @return self
     */
    public function setSymbolId($symbol_id)
    {
        if (is_null($symbol_id)) {
            array_push($this->openAPINullablesSetToNull, 'symbol_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('symbol_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['symbol_id'] = $symbol_id;

        return $this;
    }

    /**
     * Gets symbol_id_exchange
     *
     * @return string|null
     */
    public function getSymbolIdExchange()
    {
        return $this->container['symbol_id_exchange'];
    }

    /**
     * Sets symbol_id_exchange
     *
     * @param string|null $symbol_id_exchange The exchange-specific symbol ID.
     *
     * @return self
     */
    public function setSymbolIdExchange($symbol_id_exchange)
    {
        if (is_null($symbol_id_exchange)) {
            array_push($this->openAPINullablesSetToNull, 'symbol_id_exchange');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('symbol_id_exchange', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['symbol_id_exchange'] = $symbol_id_exchange;

        return $this;
    }

    /**
     * Gets coinapi_datainfo_id
     *
     * @return int|null
     */
    public function getCoinapiDatainfoId()
    {
        return $this->container['coinapi_datainfo_id'];
    }

    /**
     * Sets coinapi_datainfo_id
     *
     * @param int|null $coinapi_datainfo_id The CoinAPI DataInfo ID.
     *
     * @return self
     */
    public function setCoinapiDatainfoId($coinapi_datainfo_id)
    {
        if (is_null($coinapi_datainfo_id)) {
            throw new \InvalidArgumentException('non-nullable coinapi_datainfo_id cannot be null');
        }
        $this->container['coinapi_datainfo_id'] = $coinapi_datainfo_id;

        return $this;
    }

    /**
     * Gets asset_id_base_exchange
     *
     * @return string|null
     */
    public function getAssetIdBaseExchange()
    {
        return $this->container['asset_id_base_exchange'];
    }

    /**
     * Sets asset_id_base_exchange
     *
     * @param string|null $asset_id_base_exchange The exchange-specific base asset ID.
     *
     * @return self
     */
    public function setAssetIdBaseExchange($asset_id_base_exchange)
    {
        if (is_null($asset_id_base_exchange)) {
            array_push($this->openAPINullablesSetToNull, 'asset_id_base_exchange');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asset_id_base_exchange', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['asset_id_base_exchange'] = $asset_id_base_exchange;

        return $this;
    }

    /**
     * Gets asset_id_quote_exchange
     *
     * @return string|null
     */
    public function getAssetIdQuoteExchange()
    {
        return $this->container['asset_id_quote_exchange'];
    }

    /**
     * Sets asset_id_quote_exchange
     *
     * @param string|null $asset_id_quote_exchange The exchange-specific quote asset ID.
     *
     * @return self
     */
    public function setAssetIdQuoteExchange($asset_id_quote_exchange)
    {
        if (is_null($asset_id_quote_exchange)) {
            array_push($this->openAPINullablesSetToNull, 'asset_id_quote_exchange');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asset_id_quote_exchange', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['asset_id_quote_exchange'] = $asset_id_quote_exchange;

        return $this;
    }

    /**
     * Gets asset_id_base
     *
     * @return string|null
     */
    public function getAssetIdBase()
    {
        return $this->container['asset_id_base'];
    }

    /**
     * Sets asset_id_base
     *
     * @param string|null $asset_id_base The base asset ID.
     *
     * @return self
     */
    public function setAssetIdBase($asset_id_base)
    {
        if (is_null($asset_id_base)) {
            array_push($this->openAPINullablesSetToNull, 'asset_id_base');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asset_id_base', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['asset_id_base'] = $asset_id_base;

        return $this;
    }

    /**
     * Gets asset_id_quote
     *
     * @return string|null
     */
    public function getAssetIdQuote()
    {
        return $this->container['asset_id_quote'];
    }

    /**
     * Sets asset_id_quote
     *
     * @param string|null $asset_id_quote The quote asset ID.
     *
     * @return self
     */
    public function setAssetIdQuote($asset_id_quote)
    {
        if (is_null($asset_id_quote)) {
            array_push($this->openAPINullablesSetToNull, 'asset_id_quote');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asset_id_quote', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['asset_id_quote'] = $asset_id_quote;

        return $this;
    }

    /**
     * Gets price_precision
     *
     * @return float|null
     */
    public function getPricePrecision()
    {
        return $this->container['price_precision'];
    }

    /**
     * Sets price_precision
     *
     * @param float|null $price_precision The price precision.
     *
     * @return self
     */
    public function setPricePrecision($price_precision)
    {
        if (is_null($price_precision)) {
            array_push($this->openAPINullablesSetToNull, 'price_precision');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_precision', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_precision'] = $price_precision;

        return $this;
    }

    /**
     * Gets size_precision
     *
     * @return float|null
     */
    public function getSizePrecision()
    {
        return $this->container['size_precision'];
    }

    /**
     * Sets size_precision
     *
     * @param float|null $size_precision The size precision.
     *
     * @return self
     */
    public function setSizePrecision($size_precision)
    {
        if (is_null($size_precision)) {
            array_push($this->openAPINullablesSetToNull, 'size_precision');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('size_precision', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['size_precision'] = $size_precision;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


