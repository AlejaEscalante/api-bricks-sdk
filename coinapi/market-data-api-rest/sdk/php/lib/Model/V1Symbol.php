<?php
/**
 * V1Symbol
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CoinAPI Market Data REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * V1Symbol Class Doc Comment
 *
 * @category Class
 * @description Represents a symbol data model.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V1Symbol implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'v1.Symbol';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'symbol_id' => 'string',
        'exchange_id' => 'string',
        'symbol_type' => 'string',
        'asset_id_base' => 'string',
        'asset_id_quote' => 'string',
        'asset_id_unit' => 'string',
        'future_contract_unit' => 'float',
        'future_contract_unit_asset' => 'string',
        'future_delivery_time' => '\DateTime',
        'option_type_is_call' => 'bool',
        'option_strike_price' => 'float',
        'option_contract_unit' => 'float',
        'option_exercise_style' => 'string',
        'option_expiration_time' => '\DateTime',
        'contract_delivery_time' => '\DateTime',
        'contract_unit' => 'float',
        'contract_unit_asset' => 'string',
        'contract_id' => 'string',
        'contract_display_name' => 'string',
        'contract_display_description' => 'string',
        'data_start' => 'string',
        'data_end' => 'string',
        'data_quote_start' => '\DateTime',
        'data_quote_end' => '\DateTime',
        'data_orderbook_start' => '\DateTime',
        'data_orderbook_end' => '\DateTime',
        'data_trade_start' => '\DateTime',
        'data_trade_end' => '\DateTime',
        'index_id' => 'string',
        'index_display_name' => 'string',
        'index_display_description' => 'string',
        'volume_1hrs' => 'float',
        'volume_1hrs_usd' => 'float',
        'volume_1day' => 'float',
        'volume_1day_usd' => 'float',
        'volume_1mth' => 'float',
        'volume_1mth_usd' => 'float',
        'price' => 'float',
        'symbol_id_exchange' => 'string',
        'asset_id_base_exchange' => 'string',
        'asset_id_quote_exchange' => 'string',
        'price_precision' => 'float',
        'size_precision' => 'float',
        'raw_kvp' => 'array<string,string>',
        'volume_to_usd' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'symbol_id' => null,
        'exchange_id' => null,
        'symbol_type' => null,
        'asset_id_base' => null,
        'asset_id_quote' => null,
        'asset_id_unit' => null,
        'future_contract_unit' => 'double',
        'future_contract_unit_asset' => null,
        'future_delivery_time' => 'date-time',
        'option_type_is_call' => null,
        'option_strike_price' => 'double',
        'option_contract_unit' => 'double',
        'option_exercise_style' => null,
        'option_expiration_time' => 'date-time',
        'contract_delivery_time' => 'date-time',
        'contract_unit' => 'double',
        'contract_unit_asset' => null,
        'contract_id' => null,
        'contract_display_name' => null,
        'contract_display_description' => null,
        'data_start' => null,
        'data_end' => null,
        'data_quote_start' => 'date-time',
        'data_quote_end' => 'date-time',
        'data_orderbook_start' => 'date-time',
        'data_orderbook_end' => 'date-time',
        'data_trade_start' => 'date-time',
        'data_trade_end' => 'date-time',
        'index_id' => null,
        'index_display_name' => null,
        'index_display_description' => null,
        'volume_1hrs' => 'double',
        'volume_1hrs_usd' => 'double',
        'volume_1day' => 'double',
        'volume_1day_usd' => 'double',
        'volume_1mth' => 'double',
        'volume_1mth_usd' => 'double',
        'price' => 'double',
        'symbol_id_exchange' => null,
        'asset_id_base_exchange' => null,
        'asset_id_quote_exchange' => null,
        'price_precision' => 'double',
        'size_precision' => 'double',
        'raw_kvp' => null,
        'volume_to_usd' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'symbol_id' => true,
        'exchange_id' => true,
        'symbol_type' => true,
        'asset_id_base' => true,
        'asset_id_quote' => true,
        'asset_id_unit' => true,
        'future_contract_unit' => true,
        'future_contract_unit_asset' => true,
        'future_delivery_time' => true,
        'option_type_is_call' => true,
        'option_strike_price' => true,
        'option_contract_unit' => true,
        'option_exercise_style' => true,
        'option_expiration_time' => true,
        'contract_delivery_time' => true,
        'contract_unit' => true,
        'contract_unit_asset' => true,
        'contract_id' => true,
        'contract_display_name' => true,
        'contract_display_description' => true,
        'data_start' => true,
        'data_end' => true,
        'data_quote_start' => true,
        'data_quote_end' => true,
        'data_orderbook_start' => true,
        'data_orderbook_end' => true,
        'data_trade_start' => true,
        'data_trade_end' => true,
        'index_id' => true,
        'index_display_name' => true,
        'index_display_description' => true,
        'volume_1hrs' => true,
        'volume_1hrs_usd' => true,
        'volume_1day' => true,
        'volume_1day_usd' => true,
        'volume_1mth' => true,
        'volume_1mth_usd' => true,
        'price' => true,
        'symbol_id_exchange' => true,
        'asset_id_base_exchange' => true,
        'asset_id_quote_exchange' => true,
        'price_precision' => true,
        'size_precision' => true,
        'raw_kvp' => true,
        'volume_to_usd' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol_id' => 'symbol_id',
        'exchange_id' => 'exchange_id',
        'symbol_type' => 'symbol_type',
        'asset_id_base' => 'asset_id_base',
        'asset_id_quote' => 'asset_id_quote',
        'asset_id_unit' => 'asset_id_unit',
        'future_contract_unit' => 'future_contract_unit',
        'future_contract_unit_asset' => 'future_contract_unit_asset',
        'future_delivery_time' => 'future_delivery_time',
        'option_type_is_call' => 'option_type_is_call',
        'option_strike_price' => 'option_strike_price',
        'option_contract_unit' => 'option_contract_unit',
        'option_exercise_style' => 'option_exercise_style',
        'option_expiration_time' => 'option_expiration_time',
        'contract_delivery_time' => 'contract_delivery_time',
        'contract_unit' => 'contract_unit',
        'contract_unit_asset' => 'contract_unit_asset',
        'contract_id' => 'contract_id',
        'contract_display_name' => 'contract_display_name',
        'contract_display_description' => 'contract_display_description',
        'data_start' => 'data_start',
        'data_end' => 'data_end',
        'data_quote_start' => 'data_quote_start',
        'data_quote_end' => 'data_quote_end',
        'data_orderbook_start' => 'data_orderbook_start',
        'data_orderbook_end' => 'data_orderbook_end',
        'data_trade_start' => 'data_trade_start',
        'data_trade_end' => 'data_trade_end',
        'index_id' => 'index_id',
        'index_display_name' => 'index_display_name',
        'index_display_description' => 'index_display_description',
        'volume_1hrs' => 'volume_1hrs',
        'volume_1hrs_usd' => 'volume_1hrs_usd',
        'volume_1day' => 'volume_1day',
        'volume_1day_usd' => 'volume_1day_usd',
        'volume_1mth' => 'volume_1mth',
        'volume_1mth_usd' => 'volume_1mth_usd',
        'price' => 'price',
        'symbol_id_exchange' => 'symbol_id_exchange',
        'asset_id_base_exchange' => 'asset_id_base_exchange',
        'asset_id_quote_exchange' => 'asset_id_quote_exchange',
        'price_precision' => 'price_precision',
        'size_precision' => 'size_precision',
        'raw_kvp' => 'raw_kvp',
        'volume_to_usd' => 'volume_to_usd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol_id' => 'setSymbolId',
        'exchange_id' => 'setExchangeId',
        'symbol_type' => 'setSymbolType',
        'asset_id_base' => 'setAssetIdBase',
        'asset_id_quote' => 'setAssetIdQuote',
        'asset_id_unit' => 'setAssetIdUnit',
        'future_contract_unit' => 'setFutureContractUnit',
        'future_contract_unit_asset' => 'setFutureContractUnitAsset',
        'future_delivery_time' => 'setFutureDeliveryTime',
        'option_type_is_call' => 'setOptionTypeIsCall',
        'option_strike_price' => 'setOptionStrikePrice',
        'option_contract_unit' => 'setOptionContractUnit',
        'option_exercise_style' => 'setOptionExerciseStyle',
        'option_expiration_time' => 'setOptionExpirationTime',
        'contract_delivery_time' => 'setContractDeliveryTime',
        'contract_unit' => 'setContractUnit',
        'contract_unit_asset' => 'setContractUnitAsset',
        'contract_id' => 'setContractId',
        'contract_display_name' => 'setContractDisplayName',
        'contract_display_description' => 'setContractDisplayDescription',
        'data_start' => 'setDataStart',
        'data_end' => 'setDataEnd',
        'data_quote_start' => 'setDataQuoteStart',
        'data_quote_end' => 'setDataQuoteEnd',
        'data_orderbook_start' => 'setDataOrderbookStart',
        'data_orderbook_end' => 'setDataOrderbookEnd',
        'data_trade_start' => 'setDataTradeStart',
        'data_trade_end' => 'setDataTradeEnd',
        'index_id' => 'setIndexId',
        'index_display_name' => 'setIndexDisplayName',
        'index_display_description' => 'setIndexDisplayDescription',
        'volume_1hrs' => 'setVolume1hrs',
        'volume_1hrs_usd' => 'setVolume1hrsUsd',
        'volume_1day' => 'setVolume1day',
        'volume_1day_usd' => 'setVolume1dayUsd',
        'volume_1mth' => 'setVolume1mth',
        'volume_1mth_usd' => 'setVolume1mthUsd',
        'price' => 'setPrice',
        'symbol_id_exchange' => 'setSymbolIdExchange',
        'asset_id_base_exchange' => 'setAssetIdBaseExchange',
        'asset_id_quote_exchange' => 'setAssetIdQuoteExchange',
        'price_precision' => 'setPricePrecision',
        'size_precision' => 'setSizePrecision',
        'raw_kvp' => 'setRawKvp',
        'volume_to_usd' => 'setVolumeToUsd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol_id' => 'getSymbolId',
        'exchange_id' => 'getExchangeId',
        'symbol_type' => 'getSymbolType',
        'asset_id_base' => 'getAssetIdBase',
        'asset_id_quote' => 'getAssetIdQuote',
        'asset_id_unit' => 'getAssetIdUnit',
        'future_contract_unit' => 'getFutureContractUnit',
        'future_contract_unit_asset' => 'getFutureContractUnitAsset',
        'future_delivery_time' => 'getFutureDeliveryTime',
        'option_type_is_call' => 'getOptionTypeIsCall',
        'option_strike_price' => 'getOptionStrikePrice',
        'option_contract_unit' => 'getOptionContractUnit',
        'option_exercise_style' => 'getOptionExerciseStyle',
        'option_expiration_time' => 'getOptionExpirationTime',
        'contract_delivery_time' => 'getContractDeliveryTime',
        'contract_unit' => 'getContractUnit',
        'contract_unit_asset' => 'getContractUnitAsset',
        'contract_id' => 'getContractId',
        'contract_display_name' => 'getContractDisplayName',
        'contract_display_description' => 'getContractDisplayDescription',
        'data_start' => 'getDataStart',
        'data_end' => 'getDataEnd',
        'data_quote_start' => 'getDataQuoteStart',
        'data_quote_end' => 'getDataQuoteEnd',
        'data_orderbook_start' => 'getDataOrderbookStart',
        'data_orderbook_end' => 'getDataOrderbookEnd',
        'data_trade_start' => 'getDataTradeStart',
        'data_trade_end' => 'getDataTradeEnd',
        'index_id' => 'getIndexId',
        'index_display_name' => 'getIndexDisplayName',
        'index_display_description' => 'getIndexDisplayDescription',
        'volume_1hrs' => 'getVolume1hrs',
        'volume_1hrs_usd' => 'getVolume1hrsUsd',
        'volume_1day' => 'getVolume1day',
        'volume_1day_usd' => 'getVolume1dayUsd',
        'volume_1mth' => 'getVolume1mth',
        'volume_1mth_usd' => 'getVolume1mthUsd',
        'price' => 'getPrice',
        'symbol_id_exchange' => 'getSymbolIdExchange',
        'asset_id_base_exchange' => 'getAssetIdBaseExchange',
        'asset_id_quote_exchange' => 'getAssetIdQuoteExchange',
        'price_precision' => 'getPricePrecision',
        'size_precision' => 'getSizePrecision',
        'raw_kvp' => 'getRawKvp',
        'volume_to_usd' => 'getVolumeToUsd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('symbol_id', $data ?? [], null);
        $this->setIfExists('exchange_id', $data ?? [], null);
        $this->setIfExists('symbol_type', $data ?? [], null);
        $this->setIfExists('asset_id_base', $data ?? [], null);
        $this->setIfExists('asset_id_quote', $data ?? [], null);
        $this->setIfExists('asset_id_unit', $data ?? [], null);
        $this->setIfExists('future_contract_unit', $data ?? [], null);
        $this->setIfExists('future_contract_unit_asset', $data ?? [], null);
        $this->setIfExists('future_delivery_time', $data ?? [], null);
        $this->setIfExists('option_type_is_call', $data ?? [], null);
        $this->setIfExists('option_strike_price', $data ?? [], null);
        $this->setIfExists('option_contract_unit', $data ?? [], null);
        $this->setIfExists('option_exercise_style', $data ?? [], null);
        $this->setIfExists('option_expiration_time', $data ?? [], null);
        $this->setIfExists('contract_delivery_time', $data ?? [], null);
        $this->setIfExists('contract_unit', $data ?? [], null);
        $this->setIfExists('contract_unit_asset', $data ?? [], null);
        $this->setIfExists('contract_id', $data ?? [], null);
        $this->setIfExists('contract_display_name', $data ?? [], null);
        $this->setIfExists('contract_display_description', $data ?? [], null);
        $this->setIfExists('data_start', $data ?? [], null);
        $this->setIfExists('data_end', $data ?? [], null);
        $this->setIfExists('data_quote_start', $data ?? [], null);
        $this->setIfExists('data_quote_end', $data ?? [], null);
        $this->setIfExists('data_orderbook_start', $data ?? [], null);
        $this->setIfExists('data_orderbook_end', $data ?? [], null);
        $this->setIfExists('data_trade_start', $data ?? [], null);
        $this->setIfExists('data_trade_end', $data ?? [], null);
        $this->setIfExists('index_id', $data ?? [], null);
        $this->setIfExists('index_display_name', $data ?? [], null);
        $this->setIfExists('index_display_description', $data ?? [], null);
        $this->setIfExists('volume_1hrs', $data ?? [], null);
        $this->setIfExists('volume_1hrs_usd', $data ?? [], null);
        $this->setIfExists('volume_1day', $data ?? [], null);
        $this->setIfExists('volume_1day_usd', $data ?? [], null);
        $this->setIfExists('volume_1mth', $data ?? [], null);
        $this->setIfExists('volume_1mth_usd', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('symbol_id_exchange', $data ?? [], null);
        $this->setIfExists('asset_id_base_exchange', $data ?? [], null);
        $this->setIfExists('asset_id_quote_exchange', $data ?? [], null);
        $this->setIfExists('price_precision', $data ?? [], null);
        $this->setIfExists('size_precision', $data ?? [], null);
        $this->setIfExists('raw_kvp', $data ?? [], null);
        $this->setIfExists('volume_to_usd', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol_id
     *
     * @return string|null
     */
    public function getSymbolId()
    {
        return $this->container['symbol_id'];
    }

    /**
     * Sets symbol_id
     *
     * @param string|null $symbol_id The symbol identifier.
     *
     * @return self
     */
    public function setSymbolId($symbol_id)
    {
        if (is_null($symbol_id)) {
            array_push($this->openAPINullablesSetToNull, 'symbol_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('symbol_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['symbol_id'] = $symbol_id;

        return $this;
    }

    /**
     * Gets exchange_id
     *
     * @return string|null
     */
    public function getExchangeId()
    {
        return $this->container['exchange_id'];
    }

    /**
     * Sets exchange_id
     *
     * @param string|null $exchange_id The exchange identifier.
     *
     * @return self
     */
    public function setExchangeId($exchange_id)
    {
        if (is_null($exchange_id)) {
            array_push($this->openAPINullablesSetToNull, 'exchange_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exchange_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exchange_id'] = $exchange_id;

        return $this;
    }

    /**
     * Gets symbol_type
     *
     * @return string|null
     */
    public function getSymbolType()
    {
        return $this->container['symbol_type'];
    }

    /**
     * Sets symbol_type
     *
     * @param string|null $symbol_type The symbol type.
     *
     * @return self
     */
    public function setSymbolType($symbol_type)
    {
        if (is_null($symbol_type)) {
            array_push($this->openAPINullablesSetToNull, 'symbol_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('symbol_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['symbol_type'] = $symbol_type;

        return $this;
    }

    /**
     * Gets asset_id_base
     *
     * @return string|null
     */
    public function getAssetIdBase()
    {
        return $this->container['asset_id_base'];
    }

    /**
     * Sets asset_id_base
     *
     * @param string|null $asset_id_base The base asset identifier.
     *
     * @return self
     */
    public function setAssetIdBase($asset_id_base)
    {
        if (is_null($asset_id_base)) {
            array_push($this->openAPINullablesSetToNull, 'asset_id_base');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asset_id_base', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['asset_id_base'] = $asset_id_base;

        return $this;
    }

    /**
     * Gets asset_id_quote
     *
     * @return string|null
     */
    public function getAssetIdQuote()
    {
        return $this->container['asset_id_quote'];
    }

    /**
     * Sets asset_id_quote
     *
     * @param string|null $asset_id_quote The quote asset identifier.
     *
     * @return self
     */
    public function setAssetIdQuote($asset_id_quote)
    {
        if (is_null($asset_id_quote)) {
            array_push($this->openAPINullablesSetToNull, 'asset_id_quote');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asset_id_quote', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['asset_id_quote'] = $asset_id_quote;

        return $this;
    }

    /**
     * Gets asset_id_unit
     *
     * @return string|null
     */
    public function getAssetIdUnit()
    {
        return $this->container['asset_id_unit'];
    }

    /**
     * Sets asset_id_unit
     *
     * @param string|null $asset_id_unit The unit asset identifier.
     *
     * @return self
     */
    public function setAssetIdUnit($asset_id_unit)
    {
        if (is_null($asset_id_unit)) {
            array_push($this->openAPINullablesSetToNull, 'asset_id_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asset_id_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['asset_id_unit'] = $asset_id_unit;

        return $this;
    }

    /**
     * Gets future_contract_unit
     *
     * @return float|null
     */
    public function getFutureContractUnit()
    {
        return $this->container['future_contract_unit'];
    }

    /**
     * Sets future_contract_unit
     *
     * @param float|null $future_contract_unit The contract unit for futures.
     *
     * @return self
     */
    public function setFutureContractUnit($future_contract_unit)
    {
        if (is_null($future_contract_unit)) {
            array_push($this->openAPINullablesSetToNull, 'future_contract_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('future_contract_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['future_contract_unit'] = $future_contract_unit;

        return $this;
    }

    /**
     * Gets future_contract_unit_asset
     *
     * @return string|null
     */
    public function getFutureContractUnitAsset()
    {
        return $this->container['future_contract_unit_asset'];
    }

    /**
     * Sets future_contract_unit_asset
     *
     * @param string|null $future_contract_unit_asset The asset used as the unit for futures contract.
     *
     * @return self
     */
    public function setFutureContractUnitAsset($future_contract_unit_asset)
    {
        if (is_null($future_contract_unit_asset)) {
            array_push($this->openAPINullablesSetToNull, 'future_contract_unit_asset');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('future_contract_unit_asset', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['future_contract_unit_asset'] = $future_contract_unit_asset;

        return $this;
    }

    /**
     * Gets future_delivery_time
     *
     * @return \DateTime|null
     */
    public function getFutureDeliveryTime()
    {
        return $this->container['future_delivery_time'];
    }

    /**
     * Sets future_delivery_time
     *
     * @param \DateTime|null $future_delivery_time The future delivery time for futures contract.
     *
     * @return self
     */
    public function setFutureDeliveryTime($future_delivery_time)
    {
        if (is_null($future_delivery_time)) {
            array_push($this->openAPINullablesSetToNull, 'future_delivery_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('future_delivery_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['future_delivery_time'] = $future_delivery_time;

        return $this;
    }

    /**
     * Gets option_type_is_call
     *
     * @return bool|null
     */
    public function getOptionTypeIsCall()
    {
        return $this->container['option_type_is_call'];
    }

    /**
     * Sets option_type_is_call
     *
     * @param bool|null $option_type_is_call Indicates whether the option type is a call.
     *
     * @return self
     */
    public function setOptionTypeIsCall($option_type_is_call)
    {
        if (is_null($option_type_is_call)) {
            array_push($this->openAPINullablesSetToNull, 'option_type_is_call');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('option_type_is_call', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['option_type_is_call'] = $option_type_is_call;

        return $this;
    }

    /**
     * Gets option_strike_price
     *
     * @return float|null
     */
    public function getOptionStrikePrice()
    {
        return $this->container['option_strike_price'];
    }

    /**
     * Sets option_strike_price
     *
     * @param float|null $option_strike_price The strike price for options.
     *
     * @return self
     */
    public function setOptionStrikePrice($option_strike_price)
    {
        if (is_null($option_strike_price)) {
            array_push($this->openAPINullablesSetToNull, 'option_strike_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('option_strike_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['option_strike_price'] = $option_strike_price;

        return $this;
    }

    /**
     * Gets option_contract_unit
     *
     * @return float|null
     */
    public function getOptionContractUnit()
    {
        return $this->container['option_contract_unit'];
    }

    /**
     * Sets option_contract_unit
     *
     * @param float|null $option_contract_unit The contract unit for options.
     *
     * @return self
     */
    public function setOptionContractUnit($option_contract_unit)
    {
        if (is_null($option_contract_unit)) {
            array_push($this->openAPINullablesSetToNull, 'option_contract_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('option_contract_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['option_contract_unit'] = $option_contract_unit;

        return $this;
    }

    /**
     * Gets option_exercise_style
     *
     * @return string|null
     */
    public function getOptionExerciseStyle()
    {
        return $this->container['option_exercise_style'];
    }

    /**
     * Sets option_exercise_style
     *
     * @param string|null $option_exercise_style The exercise style for options.
     *
     * @return self
     */
    public function setOptionExerciseStyle($option_exercise_style)
    {
        if (is_null($option_exercise_style)) {
            array_push($this->openAPINullablesSetToNull, 'option_exercise_style');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('option_exercise_style', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['option_exercise_style'] = $option_exercise_style;

        return $this;
    }

    /**
     * Gets option_expiration_time
     *
     * @return \DateTime|null
     */
    public function getOptionExpirationTime()
    {
        return $this->container['option_expiration_time'];
    }

    /**
     * Sets option_expiration_time
     *
     * @param \DateTime|null $option_expiration_time The expiration time for options.
     *
     * @return self
     */
    public function setOptionExpirationTime($option_expiration_time)
    {
        if (is_null($option_expiration_time)) {
            array_push($this->openAPINullablesSetToNull, 'option_expiration_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('option_expiration_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['option_expiration_time'] = $option_expiration_time;

        return $this;
    }

    /**
     * Gets contract_delivery_time
     *
     * @return \DateTime|null
     */
    public function getContractDeliveryTime()
    {
        return $this->container['contract_delivery_time'];
    }

    /**
     * Sets contract_delivery_time
     *
     * @param \DateTime|null $contract_delivery_time The delivery time for contracts.
     *
     * @return self
     */
    public function setContractDeliveryTime($contract_delivery_time)
    {
        if (is_null($contract_delivery_time)) {
            array_push($this->openAPINullablesSetToNull, 'contract_delivery_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contract_delivery_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contract_delivery_time'] = $contract_delivery_time;

        return $this;
    }

    /**
     * Gets contract_unit
     *
     * @return float|null
     */
    public function getContractUnit()
    {
        return $this->container['contract_unit'];
    }

    /**
     * Sets contract_unit
     *
     * @param float|null $contract_unit The contract unit for contracts.
     *
     * @return self
     */
    public function setContractUnit($contract_unit)
    {
        if (is_null($contract_unit)) {
            array_push($this->openAPINullablesSetToNull, 'contract_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contract_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contract_unit'] = $contract_unit;

        return $this;
    }

    /**
     * Gets contract_unit_asset
     *
     * @return string|null
     */
    public function getContractUnitAsset()
    {
        return $this->container['contract_unit_asset'];
    }

    /**
     * Sets contract_unit_asset
     *
     * @param string|null $contract_unit_asset The asset used as the unit for contracts.
     *
     * @return self
     */
    public function setContractUnitAsset($contract_unit_asset)
    {
        if (is_null($contract_unit_asset)) {
            array_push($this->openAPINullablesSetToNull, 'contract_unit_asset');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contract_unit_asset', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contract_unit_asset'] = $contract_unit_asset;

        return $this;
    }

    /**
     * Gets contract_id
     *
     * @return string|null
     */
    public function getContractId()
    {
        return $this->container['contract_id'];
    }

    /**
     * Sets contract_id
     *
     * @param string|null $contract_id The contract identifier.
     *
     * @return self
     */
    public function setContractId($contract_id)
    {
        if (is_null($contract_id)) {
            array_push($this->openAPINullablesSetToNull, 'contract_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contract_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contract_id'] = $contract_id;

        return $this;
    }

    /**
     * Gets contract_display_name
     *
     * @return string|null
     */
    public function getContractDisplayName()
    {
        return $this->container['contract_display_name'];
    }

    /**
     * Sets contract_display_name
     *
     * @param string|null $contract_display_name The display name of the contract.
     *
     * @return self
     */
    public function setContractDisplayName($contract_display_name)
    {
        if (is_null($contract_display_name)) {
            array_push($this->openAPINullablesSetToNull, 'contract_display_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contract_display_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contract_display_name'] = $contract_display_name;

        return $this;
    }

    /**
     * Gets contract_display_description
     *
     * @return string|null
     */
    public function getContractDisplayDescription()
    {
        return $this->container['contract_display_description'];
    }

    /**
     * Sets contract_display_description
     *
     * @param string|null $contract_display_description The display description of the contract.
     *
     * @return self
     */
    public function setContractDisplayDescription($contract_display_description)
    {
        if (is_null($contract_display_description)) {
            array_push($this->openAPINullablesSetToNull, 'contract_display_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contract_display_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contract_display_description'] = $contract_display_description;

        return $this;
    }

    /**
     * Gets data_start
     *
     * @return string|null
     */
    public function getDataStart()
    {
        return $this->container['data_start'];
    }

    /**
     * Sets data_start
     *
     * @param string|null $data_start data_start
     *
     * @return self
     */
    public function setDataStart($data_start)
    {
        if (is_null($data_start)) {
            array_push($this->openAPINullablesSetToNull, 'data_start');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_start', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_start'] = $data_start;

        return $this;
    }

    /**
     * Gets data_end
     *
     * @return string|null
     */
    public function getDataEnd()
    {
        return $this->container['data_end'];
    }

    /**
     * Sets data_end
     *
     * @param string|null $data_end data_end
     *
     * @return self
     */
    public function setDataEnd($data_end)
    {
        if (is_null($data_end)) {
            array_push($this->openAPINullablesSetToNull, 'data_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_end', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_end'] = $data_end;

        return $this;
    }

    /**
     * Gets data_quote_start
     *
     * @return \DateTime|null
     */
    public function getDataQuoteStart()
    {
        return $this->container['data_quote_start'];
    }

    /**
     * Sets data_quote_start
     *
     * @param \DateTime|null $data_quote_start The start date of quote data.
     *
     * @return self
     */
    public function setDataQuoteStart($data_quote_start)
    {
        if (is_null($data_quote_start)) {
            array_push($this->openAPINullablesSetToNull, 'data_quote_start');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_quote_start', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_quote_start'] = $data_quote_start;

        return $this;
    }

    /**
     * Gets data_quote_end
     *
     * @return \DateTime|null
     */
    public function getDataQuoteEnd()
    {
        return $this->container['data_quote_end'];
    }

    /**
     * Sets data_quote_end
     *
     * @param \DateTime|null $data_quote_end The end date of quote data.
     *
     * @return self
     */
    public function setDataQuoteEnd($data_quote_end)
    {
        if (is_null($data_quote_end)) {
            array_push($this->openAPINullablesSetToNull, 'data_quote_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_quote_end', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_quote_end'] = $data_quote_end;

        return $this;
    }

    /**
     * Gets data_orderbook_start
     *
     * @return \DateTime|null
     */
    public function getDataOrderbookStart()
    {
        return $this->container['data_orderbook_start'];
    }

    /**
     * Sets data_orderbook_start
     *
     * @param \DateTime|null $data_orderbook_start The start date of order book data.
     *
     * @return self
     */
    public function setDataOrderbookStart($data_orderbook_start)
    {
        if (is_null($data_orderbook_start)) {
            array_push($this->openAPINullablesSetToNull, 'data_orderbook_start');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_orderbook_start', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_orderbook_start'] = $data_orderbook_start;

        return $this;
    }

    /**
     * Gets data_orderbook_end
     *
     * @return \DateTime|null
     */
    public function getDataOrderbookEnd()
    {
        return $this->container['data_orderbook_end'];
    }

    /**
     * Sets data_orderbook_end
     *
     * @param \DateTime|null $data_orderbook_end The end date of order book data.
     *
     * @return self
     */
    public function setDataOrderbookEnd($data_orderbook_end)
    {
        if (is_null($data_orderbook_end)) {
            array_push($this->openAPINullablesSetToNull, 'data_orderbook_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_orderbook_end', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_orderbook_end'] = $data_orderbook_end;

        return $this;
    }

    /**
     * Gets data_trade_start
     *
     * @return \DateTime|null
     */
    public function getDataTradeStart()
    {
        return $this->container['data_trade_start'];
    }

    /**
     * Sets data_trade_start
     *
     * @param \DateTime|null $data_trade_start The start date of trade data.
     *
     * @return self
     */
    public function setDataTradeStart($data_trade_start)
    {
        if (is_null($data_trade_start)) {
            array_push($this->openAPINullablesSetToNull, 'data_trade_start');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_trade_start', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_trade_start'] = $data_trade_start;

        return $this;
    }

    /**
     * Gets data_trade_end
     *
     * @return \DateTime|null
     */
    public function getDataTradeEnd()
    {
        return $this->container['data_trade_end'];
    }

    /**
     * Sets data_trade_end
     *
     * @param \DateTime|null $data_trade_end The end date of trade data.
     *
     * @return self
     */
    public function setDataTradeEnd($data_trade_end)
    {
        if (is_null($data_trade_end)) {
            array_push($this->openAPINullablesSetToNull, 'data_trade_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_trade_end', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_trade_end'] = $data_trade_end;

        return $this;
    }

    /**
     * Gets index_id
     *
     * @return string|null
     */
    public function getIndexId()
    {
        return $this->container['index_id'];
    }

    /**
     * Sets index_id
     *
     * @param string|null $index_id The index identifier.
     *
     * @return self
     */
    public function setIndexId($index_id)
    {
        if (is_null($index_id)) {
            array_push($this->openAPINullablesSetToNull, 'index_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('index_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['index_id'] = $index_id;

        return $this;
    }

    /**
     * Gets index_display_name
     *
     * @return string|null
     */
    public function getIndexDisplayName()
    {
        return $this->container['index_display_name'];
    }

    /**
     * Sets index_display_name
     *
     * @param string|null $index_display_name The display name of the index.
     *
     * @return self
     */
    public function setIndexDisplayName($index_display_name)
    {
        if (is_null($index_display_name)) {
            array_push($this->openAPINullablesSetToNull, 'index_display_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('index_display_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['index_display_name'] = $index_display_name;

        return $this;
    }

    /**
     * Gets index_display_description
     *
     * @return string|null
     */
    public function getIndexDisplayDescription()
    {
        return $this->container['index_display_description'];
    }

    /**
     * Sets index_display_description
     *
     * @param string|null $index_display_description The display description of the index.
     *
     * @return self
     */
    public function setIndexDisplayDescription($index_display_description)
    {
        if (is_null($index_display_description)) {
            array_push($this->openAPINullablesSetToNull, 'index_display_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('index_display_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['index_display_description'] = $index_display_description;

        return $this;
    }

    /**
     * Gets volume_1hrs
     *
     * @return float|null
     */
    public function getVolume1hrs()
    {
        return $this->container['volume_1hrs'];
    }

    /**
     * Sets volume_1hrs
     *
     * @param float|null $volume_1hrs The volume in the last 1 hour.
     *
     * @return self
     */
    public function setVolume1hrs($volume_1hrs)
    {
        if (is_null($volume_1hrs)) {
            array_push($this->openAPINullablesSetToNull, 'volume_1hrs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('volume_1hrs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['volume_1hrs'] = $volume_1hrs;

        return $this;
    }

    /**
     * Gets volume_1hrs_usd
     *
     * @return float|null
     */
    public function getVolume1hrsUsd()
    {
        return $this->container['volume_1hrs_usd'];
    }

    /**
     * Sets volume_1hrs_usd
     *
     * @param float|null $volume_1hrs_usd The volume in USD in the last 1 hour.
     *
     * @return self
     */
    public function setVolume1hrsUsd($volume_1hrs_usd)
    {
        if (is_null($volume_1hrs_usd)) {
            array_push($this->openAPINullablesSetToNull, 'volume_1hrs_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('volume_1hrs_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['volume_1hrs_usd'] = $volume_1hrs_usd;

        return $this;
    }

    /**
     * Gets volume_1day
     *
     * @return float|null
     */
    public function getVolume1day()
    {
        return $this->container['volume_1day'];
    }

    /**
     * Sets volume_1day
     *
     * @param float|null $volume_1day The volume in the last 1 day.
     *
     * @return self
     */
    public function setVolume1day($volume_1day)
    {
        if (is_null($volume_1day)) {
            array_push($this->openAPINullablesSetToNull, 'volume_1day');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('volume_1day', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['volume_1day'] = $volume_1day;

        return $this;
    }

    /**
     * Gets volume_1day_usd
     *
     * @return float|null
     */
    public function getVolume1dayUsd()
    {
        return $this->container['volume_1day_usd'];
    }

    /**
     * Sets volume_1day_usd
     *
     * @param float|null $volume_1day_usd The volume in USD in the last 1 day.
     *
     * @return self
     */
    public function setVolume1dayUsd($volume_1day_usd)
    {
        if (is_null($volume_1day_usd)) {
            array_push($this->openAPINullablesSetToNull, 'volume_1day_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('volume_1day_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['volume_1day_usd'] = $volume_1day_usd;

        return $this;
    }

    /**
     * Gets volume_1mth
     *
     * @return float|null
     */
    public function getVolume1mth()
    {
        return $this->container['volume_1mth'];
    }

    /**
     * Sets volume_1mth
     *
     * @param float|null $volume_1mth The volume in the last 1 month.
     *
     * @return self
     */
    public function setVolume1mth($volume_1mth)
    {
        if (is_null($volume_1mth)) {
            array_push($this->openAPINullablesSetToNull, 'volume_1mth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('volume_1mth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['volume_1mth'] = $volume_1mth;

        return $this;
    }

    /**
     * Gets volume_1mth_usd
     *
     * @return float|null
     */
    public function getVolume1mthUsd()
    {
        return $this->container['volume_1mth_usd'];
    }

    /**
     * Sets volume_1mth_usd
     *
     * @param float|null $volume_1mth_usd The volume in USD in the last 1 month.
     *
     * @return self
     */
    public function setVolume1mthUsd($volume_1mth_usd)
    {
        if (is_null($volume_1mth_usd)) {
            array_push($this->openAPINullablesSetToNull, 'volume_1mth_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('volume_1mth_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['volume_1mth_usd'] = $volume_1mth_usd;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price The price.
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            array_push($this->openAPINullablesSetToNull, 'price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets symbol_id_exchange
     *
     * @return string|null
     */
    public function getSymbolIdExchange()
    {
        return $this->container['symbol_id_exchange'];
    }

    /**
     * Sets symbol_id_exchange
     *
     * @param string|null $symbol_id_exchange The symbol identifier in the exchange.
     *
     * @return self
     */
    public function setSymbolIdExchange($symbol_id_exchange)
    {
        if (is_null($symbol_id_exchange)) {
            array_push($this->openAPINullablesSetToNull, 'symbol_id_exchange');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('symbol_id_exchange', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['symbol_id_exchange'] = $symbol_id_exchange;

        return $this;
    }

    /**
     * Gets asset_id_base_exchange
     *
     * @return string|null
     */
    public function getAssetIdBaseExchange()
    {
        return $this->container['asset_id_base_exchange'];
    }

    /**
     * Sets asset_id_base_exchange
     *
     * @param string|null $asset_id_base_exchange The base asset identifier in the exchange.
     *
     * @return self
     */
    public function setAssetIdBaseExchange($asset_id_base_exchange)
    {
        if (is_null($asset_id_base_exchange)) {
            array_push($this->openAPINullablesSetToNull, 'asset_id_base_exchange');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asset_id_base_exchange', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['asset_id_base_exchange'] = $asset_id_base_exchange;

        return $this;
    }

    /**
     * Gets asset_id_quote_exchange
     *
     * @return string|null
     */
    public function getAssetIdQuoteExchange()
    {
        return $this->container['asset_id_quote_exchange'];
    }

    /**
     * Sets asset_id_quote_exchange
     *
     * @param string|null $asset_id_quote_exchange The quote asset identifier in the exchange.
     *
     * @return self
     */
    public function setAssetIdQuoteExchange($asset_id_quote_exchange)
    {
        if (is_null($asset_id_quote_exchange)) {
            array_push($this->openAPINullablesSetToNull, 'asset_id_quote_exchange');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asset_id_quote_exchange', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['asset_id_quote_exchange'] = $asset_id_quote_exchange;

        return $this;
    }

    /**
     * Gets price_precision
     *
     * @return float|null
     */
    public function getPricePrecision()
    {
        return $this->container['price_precision'];
    }

    /**
     * Sets price_precision
     *
     * @param float|null $price_precision The price precision.
     *
     * @return self
     */
    public function setPricePrecision($price_precision)
    {
        if (is_null($price_precision)) {
            array_push($this->openAPINullablesSetToNull, 'price_precision');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_precision', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_precision'] = $price_precision;

        return $this;
    }

    /**
     * Gets size_precision
     *
     * @return float|null
     */
    public function getSizePrecision()
    {
        return $this->container['size_precision'];
    }

    /**
     * Sets size_precision
     *
     * @param float|null $size_precision The size precision.
     *
     * @return self
     */
    public function setSizePrecision($size_precision)
    {
        if (is_null($size_precision)) {
            array_push($this->openAPINullablesSetToNull, 'size_precision');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('size_precision', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['size_precision'] = $size_precision;

        return $this;
    }

    /**
     * Gets raw_kvp
     *
     * @return array<string,string>|null
     */
    public function getRawKvp()
    {
        return $this->container['raw_kvp'];
    }

    /**
     * Sets raw_kvp
     *
     * @param array<string,string>|null $raw_kvp Not normalized raw kvp data.
     *
     * @return self
     */
    public function setRawKvp($raw_kvp)
    {
        if (is_null($raw_kvp)) {
            array_push($this->openAPINullablesSetToNull, 'raw_kvp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('raw_kvp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['raw_kvp'] = $raw_kvp;

        return $this;
    }

    /**
     * Gets volume_to_usd
     *
     * @return float|null
     */
    public function getVolumeToUsd()
    {
        return $this->container['volume_to_usd'];
    }

    /**
     * Sets volume_to_usd
     *
     * @param float|null $volume_to_usd Volume unit in USD.
     *
     * @return self
     */
    public function setVolumeToUsd($volume_to_usd)
    {
        if (is_null($volume_to_usd)) {
            array_push($this->openAPINullablesSetToNull, 'volume_to_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('volume_to_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['volume_to_usd'] = $volume_to_usd;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


