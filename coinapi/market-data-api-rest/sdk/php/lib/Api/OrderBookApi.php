<?php
/**
 * OrderBookApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CoinAPI Market Data REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * OrderBookApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderBookApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'v1OrderbooksSymbolIdCurrentGet' => [
            'application/json',
        ],
        'v1OrderbooksSymbolIdDepthCurrentGet' => [
            'application/json',
        ],
        'v1OrderbooksSymbolIdHistoryGet' => [
            'application/json',
        ],
        'v1OrderbooksSymbolIdLatestGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1OrderbooksSymbolIdCurrentGet
     *
     * Get current order book
     *
     * @param  string $symbol_id The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param  int|null $limit_levels The maximum number of levels to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdCurrentGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1OrderBookBase
     */
    public function v1OrderbooksSymbolIdCurrentGet($symbol_id, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdCurrentGet'][0])
    {
        list($response) = $this->v1OrderbooksSymbolIdCurrentGetWithHttpInfo($symbol_id, $limit_levels, $contentType);
        return $response;
    }

    /**
     * Operation v1OrderbooksSymbolIdCurrentGetWithHttpInfo
     *
     * Get current order book
     *
     * @param  string $symbol_id The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param  int|null $limit_levels The maximum number of levels to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdCurrentGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1OrderBookBase, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1OrderbooksSymbolIdCurrentGetWithHttpInfo($symbol_id, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdCurrentGet'][0])
    {
        $request = $this->v1OrderbooksSymbolIdCurrentGetRequest($symbol_id, $limit_levels, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\V1OrderBookBase',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\V1OrderBookBase',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1OrderBookBase',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1OrderbooksSymbolIdCurrentGetAsync
     *
     * Get current order book
     *
     * @param  string $symbol_id The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param  int|null $limit_levels The maximum number of levels to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdCurrentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OrderbooksSymbolIdCurrentGetAsync($symbol_id, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdCurrentGet'][0])
    {
        return $this->v1OrderbooksSymbolIdCurrentGetAsyncWithHttpInfo($symbol_id, $limit_levels, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1OrderbooksSymbolIdCurrentGetAsyncWithHttpInfo
     *
     * Get current order book
     *
     * @param  string $symbol_id The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param  int|null $limit_levels The maximum number of levels to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdCurrentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OrderbooksSymbolIdCurrentGetAsyncWithHttpInfo($symbol_id, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdCurrentGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\V1OrderBookBase';
        $request = $this->v1OrderbooksSymbolIdCurrentGetRequest($symbol_id, $limit_levels, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1OrderbooksSymbolIdCurrentGet'
     *
     * @param  string $symbol_id The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param  int|null $limit_levels The maximum number of levels to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdCurrentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1OrderbooksSymbolIdCurrentGetRequest($symbol_id, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdCurrentGet'][0])
    {

        // verify the required parameter 'symbol_id' is set
        if ($symbol_id === null || (is_array($symbol_id) && count($symbol_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol_id when calling v1OrderbooksSymbolIdCurrentGet'
            );
        }



        $resourcePath = '/v1/orderbooks/{symbol_id}/current';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit_levels,
            'limit_levels', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($symbol_id !== null) {
            $resourcePath = str_replace(
                '{' . 'symbol_id' . '}',
                ObjectSerializer::toPathValue($symbol_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', 'application/x-msgpack', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1OrderbooksSymbolIdDepthCurrentGet
     *
     * Current depth of the order book
     *
     * @param  string $symbol_id The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param  int|null $limit_levels The maximum number of levels to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdDepthCurrentGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1OrderBookDepth
     */
    public function v1OrderbooksSymbolIdDepthCurrentGet($symbol_id, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdDepthCurrentGet'][0])
    {
        list($response) = $this->v1OrderbooksSymbolIdDepthCurrentGetWithHttpInfo($symbol_id, $limit_levels, $contentType);
        return $response;
    }

    /**
     * Operation v1OrderbooksSymbolIdDepthCurrentGetWithHttpInfo
     *
     * Current depth of the order book
     *
     * @param  string $symbol_id The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param  int|null $limit_levels The maximum number of levels to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdDepthCurrentGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1OrderBookDepth, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1OrderbooksSymbolIdDepthCurrentGetWithHttpInfo($symbol_id, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdDepthCurrentGet'][0])
    {
        $request = $this->v1OrderbooksSymbolIdDepthCurrentGetRequest($symbol_id, $limit_levels, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\V1OrderBookDepth',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\V1OrderBookDepth',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1OrderBookDepth',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1OrderbooksSymbolIdDepthCurrentGetAsync
     *
     * Current depth of the order book
     *
     * @param  string $symbol_id The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param  int|null $limit_levels The maximum number of levels to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdDepthCurrentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OrderbooksSymbolIdDepthCurrentGetAsync($symbol_id, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdDepthCurrentGet'][0])
    {
        return $this->v1OrderbooksSymbolIdDepthCurrentGetAsyncWithHttpInfo($symbol_id, $limit_levels, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1OrderbooksSymbolIdDepthCurrentGetAsyncWithHttpInfo
     *
     * Current depth of the order book
     *
     * @param  string $symbol_id The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param  int|null $limit_levels The maximum number of levels to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdDepthCurrentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OrderbooksSymbolIdDepthCurrentGetAsyncWithHttpInfo($symbol_id, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdDepthCurrentGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\V1OrderBookDepth';
        $request = $this->v1OrderbooksSymbolIdDepthCurrentGetRequest($symbol_id, $limit_levels, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1OrderbooksSymbolIdDepthCurrentGet'
     *
     * @param  string $symbol_id The symbol ID (from the Metadata -&gt; Symbols) (required)
     * @param  int|null $limit_levels The maximum number of levels to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdDepthCurrentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1OrderbooksSymbolIdDepthCurrentGetRequest($symbol_id, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdDepthCurrentGet'][0])
    {

        // verify the required parameter 'symbol_id' is set
        if ($symbol_id === null || (is_array($symbol_id) && count($symbol_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol_id when calling v1OrderbooksSymbolIdDepthCurrentGet'
            );
        }



        $resourcePath = '/v1/orderbooks/{symbol_id}/depth/current';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit_levels,
            'limit_levels', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($symbol_id !== null) {
            $resourcePath = str_replace(
                '{' . 'symbol_id' . '}',
                ObjectSerializer::toPathValue($symbol_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', 'application/x-msgpack', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1OrderbooksSymbolIdHistoryGet
     *
     * Historical data
     *
     * @param  string $symbol_id Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param  string|null $date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)
     * @param  string|null $time_start Starting time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param  string|null $time_end Timeseries ending time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param  int|null $limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param  int|null $limit_levels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1OrderBook[]
     */
    public function v1OrderbooksSymbolIdHistoryGet($symbol_id, $date = null, $time_start = null, $time_end = null, $limit = 100, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdHistoryGet'][0])
    {
        list($response) = $this->v1OrderbooksSymbolIdHistoryGetWithHttpInfo($symbol_id, $date, $time_start, $time_end, $limit, $limit_levels, $contentType);
        return $response;
    }

    /**
     * Operation v1OrderbooksSymbolIdHistoryGetWithHttpInfo
     *
     * Historical data
     *
     * @param  string $symbol_id Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param  string|null $date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)
     * @param  string|null $time_start Starting time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param  string|null $time_end Timeseries ending time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param  int|null $limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param  int|null $limit_levels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1OrderBook[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1OrderbooksSymbolIdHistoryGetWithHttpInfo($symbol_id, $date = null, $time_start = null, $time_end = null, $limit = 100, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdHistoryGet'][0])
    {
        $request = $this->v1OrderbooksSymbolIdHistoryGetRequest($symbol_id, $date, $time_start, $time_end, $limit, $limit_levels, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\V1OrderBook[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\V1OrderBook[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1OrderBook[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1OrderbooksSymbolIdHistoryGetAsync
     *
     * Historical data
     *
     * @param  string $symbol_id Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param  string|null $date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)
     * @param  string|null $time_start Starting time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param  string|null $time_end Timeseries ending time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param  int|null $limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param  int|null $limit_levels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OrderbooksSymbolIdHistoryGetAsync($symbol_id, $date = null, $time_start = null, $time_end = null, $limit = 100, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdHistoryGet'][0])
    {
        return $this->v1OrderbooksSymbolIdHistoryGetAsyncWithHttpInfo($symbol_id, $date, $time_start, $time_end, $limit, $limit_levels, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1OrderbooksSymbolIdHistoryGetAsyncWithHttpInfo
     *
     * Historical data
     *
     * @param  string $symbol_id Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param  string|null $date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)
     * @param  string|null $time_start Starting time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param  string|null $time_end Timeseries ending time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param  int|null $limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param  int|null $limit_levels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OrderbooksSymbolIdHistoryGetAsyncWithHttpInfo($symbol_id, $date = null, $time_start = null, $time_end = null, $limit = 100, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdHistoryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\V1OrderBook[]';
        $request = $this->v1OrderbooksSymbolIdHistoryGetRequest($symbol_id, $date, $time_start, $time_end, $limit, $limit_levels, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1OrderbooksSymbolIdHistoryGet'
     *
     * @param  string $symbol_id Symbol identifier for requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param  string|null $date Date in ISO 8601, returned data is for the whole given day (preferred method, required if &#39;time_start&#39; is not provided) (optional)
     * @param  string|null $time_start Starting time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param  string|null $time_end Timeseries ending time in ISO 8601 (deprecated, use &#39;date&#39; instead) (optional)
     * @param  int|null $limit Amount of items to return (optional, minimum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param  int|null $limit_levels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1OrderbooksSymbolIdHistoryGetRequest($symbol_id, $date = null, $time_start = null, $time_end = null, $limit = 100, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdHistoryGet'][0])
    {

        // verify the required parameter 'symbol_id' is set
        if ($symbol_id === null || (is_array($symbol_id) && count($symbol_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol_id when calling v1OrderbooksSymbolIdHistoryGet'
            );
        }







        $resourcePath = '/v1/orderbooks/{symbol_id}/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date,
            'date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $time_start,
            'time_start', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $time_end,
            'time_end', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit_levels,
            'limit_levels', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($symbol_id !== null) {
            $resourcePath = str_replace(
                '{' . 'symbol_id' . '}',
                ObjectSerializer::toPathValue($symbol_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', 'application/x-msgpack', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1OrderbooksSymbolIdLatestGet
     *
     * Latest data
     *
     * @param  string $symbol_id Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param  int|null $limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param  int|null $limit_levels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdLatestGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1OrderBook[]
     */
    public function v1OrderbooksSymbolIdLatestGet($symbol_id, $limit = 100, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdLatestGet'][0])
    {
        list($response) = $this->v1OrderbooksSymbolIdLatestGetWithHttpInfo($symbol_id, $limit, $limit_levels, $contentType);
        return $response;
    }

    /**
     * Operation v1OrderbooksSymbolIdLatestGetWithHttpInfo
     *
     * Latest data
     *
     * @param  string $symbol_id Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param  int|null $limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param  int|null $limit_levels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdLatestGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1OrderBook[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1OrderbooksSymbolIdLatestGetWithHttpInfo($symbol_id, $limit = 100, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdLatestGet'][0])
    {
        $request = $this->v1OrderbooksSymbolIdLatestGetRequest($symbol_id, $limit, $limit_levels, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\V1OrderBook[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\V1OrderBook[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1OrderBook[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1OrderbooksSymbolIdLatestGetAsync
     *
     * Latest data
     *
     * @param  string $symbol_id Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param  int|null $limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param  int|null $limit_levels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdLatestGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OrderbooksSymbolIdLatestGetAsync($symbol_id, $limit = 100, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdLatestGet'][0])
    {
        return $this->v1OrderbooksSymbolIdLatestGetAsyncWithHttpInfo($symbol_id, $limit, $limit_levels, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1OrderbooksSymbolIdLatestGetAsyncWithHttpInfo
     *
     * Latest data
     *
     * @param  string $symbol_id Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param  int|null $limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param  int|null $limit_levels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdLatestGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1OrderbooksSymbolIdLatestGetAsyncWithHttpInfo($symbol_id, $limit = 100, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdLatestGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\V1OrderBook[]';
        $request = $this->v1OrderbooksSymbolIdLatestGetRequest($symbol_id, $limit, $limit_levels, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1OrderbooksSymbolIdLatestGet'
     *
     * @param  string $symbol_id Symbol identifier of requested timeseries (from the Metadata -&gt; Symbols) (required)
     * @param  int|null $limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param  int|null $limit_levels Maximum amount of levels from each side of the book to include in response (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1OrderbooksSymbolIdLatestGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1OrderbooksSymbolIdLatestGetRequest($symbol_id, $limit = 100, $limit_levels = null, string $contentType = self::contentTypes['v1OrderbooksSymbolIdLatestGet'][0])
    {

        // verify the required parameter 'symbol_id' is set
        if ($symbol_id === null || (is_array($symbol_id) && count($symbol_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol_id when calling v1OrderbooksSymbolIdLatestGet'
            );
        }




        $resourcePath = '/v1/orderbooks/{symbol_id}/latest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit_levels,
            'limit_levels', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($symbol_id !== null) {
            $resourcePath = str_replace(
                '{' . 'symbol_id' . '}',
                ObjectSerializer::toPathValue($symbol_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', 'application/x-msgpack', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
