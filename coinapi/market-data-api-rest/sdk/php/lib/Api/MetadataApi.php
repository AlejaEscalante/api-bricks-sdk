<?php
/**
 * MetadataApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CoinAPI Market Data REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * MetadataApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MetadataApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'v1AssetsAssetIdGet' => [
            'application/json',
        ],
        'v1AssetsGet' => [
            'application/json',
        ],
        'v1AssetsIconsSizeGet' => [
            'application/json',
        ],
        'v1ChainsChainIdGet' => [
            'application/json',
        ],
        'v1ChainsGet' => [
            'application/json',
        ],
        'v1ExchangesExchangeIdGet' => [
            'application/json',
        ],
        'v1ExchangesGet' => [
            'application/json',
        ],
        'v1ExchangesIconsSizeGet' => [
            'application/json',
        ],
        'v1SymbolsExchangeIdActiveGet' => [
            'application/json',
        ],
        'v1SymbolsExchangeIdHistoryGet' => [
            'application/json',
        ],
        'v1SymbolsMapExchangeIdGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1AssetsAssetIdGet
     *
     * List all assets by asset ID
     *
     * @param  string $asset_id The asset ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AssetsAssetIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1Asset[]
     */
    public function v1AssetsAssetIdGet($asset_id, string $contentType = self::contentTypes['v1AssetsAssetIdGet'][0])
    {
        list($response) = $this->v1AssetsAssetIdGetWithHttpInfo($asset_id, $contentType);
        return $response;
    }

    /**
     * Operation v1AssetsAssetIdGetWithHttpInfo
     *
     * List all assets by asset ID
     *
     * @param  string $asset_id The asset ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AssetsAssetIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1Asset[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AssetsAssetIdGetWithHttpInfo($asset_id, string $contentType = self::contentTypes['v1AssetsAssetIdGet'][0])
    {
        $request = $this->v1AssetsAssetIdGetRequest($asset_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\V1Asset[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\V1Asset[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1Asset[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1AssetsAssetIdGetAsync
     *
     * List all assets by asset ID
     *
     * @param  string $asset_id The asset ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AssetsAssetIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AssetsAssetIdGetAsync($asset_id, string $contentType = self::contentTypes['v1AssetsAssetIdGet'][0])
    {
        return $this->v1AssetsAssetIdGetAsyncWithHttpInfo($asset_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AssetsAssetIdGetAsyncWithHttpInfo
     *
     * List all assets by asset ID
     *
     * @param  string $asset_id The asset ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AssetsAssetIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AssetsAssetIdGetAsyncWithHttpInfo($asset_id, string $contentType = self::contentTypes['v1AssetsAssetIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\V1Asset[]';
        $request = $this->v1AssetsAssetIdGetRequest($asset_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AssetsAssetIdGet'
     *
     * @param  string $asset_id The asset ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AssetsAssetIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AssetsAssetIdGetRequest($asset_id, string $contentType = self::contentTypes['v1AssetsAssetIdGet'][0])
    {

        // verify the required parameter 'asset_id' is set
        if ($asset_id === null || (is_array($asset_id) && count($asset_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_id when calling v1AssetsAssetIdGet'
            );
        }


        $resourcePath = '/v1/assets/{asset_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($asset_id !== null) {
            $resourcePath = str_replace(
                '{' . 'asset_id' . '}',
                ObjectSerializer::toPathValue($asset_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', 'application/x-msgpack', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AssetsGet
     *
     * List all assets
     *
     * @param  string|null $filter_asset_id Comma or semicolon delimited asset identifiers used to filter response. (optional, eg. &#x60;BTC;ETH&#x60;). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AssetsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1Asset[]
     */
    public function v1AssetsGet($filter_asset_id = null, string $contentType = self::contentTypes['v1AssetsGet'][0])
    {
        list($response) = $this->v1AssetsGetWithHttpInfo($filter_asset_id, $contentType);
        return $response;
    }

    /**
     * Operation v1AssetsGetWithHttpInfo
     *
     * List all assets
     *
     * @param  string|null $filter_asset_id Comma or semicolon delimited asset identifiers used to filter response. (optional, eg. &#x60;BTC;ETH&#x60;). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AssetsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1Asset[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AssetsGetWithHttpInfo($filter_asset_id = null, string $contentType = self::contentTypes['v1AssetsGet'][0])
    {
        $request = $this->v1AssetsGetRequest($filter_asset_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\V1Asset[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\V1Asset[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1Asset[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1AssetsGetAsync
     *
     * List all assets
     *
     * @param  string|null $filter_asset_id Comma or semicolon delimited asset identifiers used to filter response. (optional, eg. &#x60;BTC;ETH&#x60;). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AssetsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AssetsGetAsync($filter_asset_id = null, string $contentType = self::contentTypes['v1AssetsGet'][0])
    {
        return $this->v1AssetsGetAsyncWithHttpInfo($filter_asset_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AssetsGetAsyncWithHttpInfo
     *
     * List all assets
     *
     * @param  string|null $filter_asset_id Comma or semicolon delimited asset identifiers used to filter response. (optional, eg. &#x60;BTC;ETH&#x60;). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AssetsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AssetsGetAsyncWithHttpInfo($filter_asset_id = null, string $contentType = self::contentTypes['v1AssetsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\V1Asset[]';
        $request = $this->v1AssetsGetRequest($filter_asset_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AssetsGet'
     *
     * @param  string|null $filter_asset_id Comma or semicolon delimited asset identifiers used to filter response. (optional, eg. &#x60;BTC;ETH&#x60;). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AssetsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AssetsGetRequest($filter_asset_id = null, string $contentType = self::contentTypes['v1AssetsGet'][0])
    {



        $resourcePath = '/v1/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_asset_id,
            'filter_asset_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', 'application/x-msgpack', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AssetsIconsSizeGet
     *
     * List all asset icons
     *
     * @param  int $size The size of the icons. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AssetsIconsSizeGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1Icon[]
     */
    public function v1AssetsIconsSizeGet($size, string $contentType = self::contentTypes['v1AssetsIconsSizeGet'][0])
    {
        list($response) = $this->v1AssetsIconsSizeGetWithHttpInfo($size, $contentType);
        return $response;
    }

    /**
     * Operation v1AssetsIconsSizeGetWithHttpInfo
     *
     * List all asset icons
     *
     * @param  int $size The size of the icons. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AssetsIconsSizeGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1Icon[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AssetsIconsSizeGetWithHttpInfo($size, string $contentType = self::contentTypes['v1AssetsIconsSizeGet'][0])
    {
        $request = $this->v1AssetsIconsSizeGetRequest($size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\V1Icon[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\V1Icon[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1Icon[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1AssetsIconsSizeGetAsync
     *
     * List all asset icons
     *
     * @param  int $size The size of the icons. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AssetsIconsSizeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AssetsIconsSizeGetAsync($size, string $contentType = self::contentTypes['v1AssetsIconsSizeGet'][0])
    {
        return $this->v1AssetsIconsSizeGetAsyncWithHttpInfo($size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AssetsIconsSizeGetAsyncWithHttpInfo
     *
     * List all asset icons
     *
     * @param  int $size The size of the icons. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AssetsIconsSizeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AssetsIconsSizeGetAsyncWithHttpInfo($size, string $contentType = self::contentTypes['v1AssetsIconsSizeGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\V1Icon[]';
        $request = $this->v1AssetsIconsSizeGetRequest($size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AssetsIconsSizeGet'
     *
     * @param  int $size The size of the icons. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AssetsIconsSizeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AssetsIconsSizeGetRequest($size, string $contentType = self::contentTypes['v1AssetsIconsSizeGet'][0])
    {

        // verify the required parameter 'size' is set
        if ($size === null || (is_array($size) && count($size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $size when calling v1AssetsIconsSizeGet'
            );
        }


        $resourcePath = '/v1/assets/icons/{size}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($size !== null) {
            $resourcePath = str_replace(
                '{' . 'size' . '}',
                ObjectSerializer::toPathValue($size),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', 'application/x-msgpack', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ChainsChainIdGet
     *
     * List all chains by chain ID
     *
     * @param  string $chain_id The chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ChainsChainIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1Chain[]
     */
    public function v1ChainsChainIdGet($chain_id, string $contentType = self::contentTypes['v1ChainsChainIdGet'][0])
    {
        list($response) = $this->v1ChainsChainIdGetWithHttpInfo($chain_id, $contentType);
        return $response;
    }

    /**
     * Operation v1ChainsChainIdGetWithHttpInfo
     *
     * List all chains by chain ID
     *
     * @param  string $chain_id The chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ChainsChainIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1Chain[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ChainsChainIdGetWithHttpInfo($chain_id, string $contentType = self::contentTypes['v1ChainsChainIdGet'][0])
    {
        $request = $this->v1ChainsChainIdGetRequest($chain_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\V1Chain[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\V1Chain[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1Chain[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1ChainsChainIdGetAsync
     *
     * List all chains by chain ID
     *
     * @param  string $chain_id The chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ChainsChainIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ChainsChainIdGetAsync($chain_id, string $contentType = self::contentTypes['v1ChainsChainIdGet'][0])
    {
        return $this->v1ChainsChainIdGetAsyncWithHttpInfo($chain_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ChainsChainIdGetAsyncWithHttpInfo
     *
     * List all chains by chain ID
     *
     * @param  string $chain_id The chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ChainsChainIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ChainsChainIdGetAsyncWithHttpInfo($chain_id, string $contentType = self::contentTypes['v1ChainsChainIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\V1Chain[]';
        $request = $this->v1ChainsChainIdGetRequest($chain_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ChainsChainIdGet'
     *
     * @param  string $chain_id The chain ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ChainsChainIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ChainsChainIdGetRequest($chain_id, string $contentType = self::contentTypes['v1ChainsChainIdGet'][0])
    {

        // verify the required parameter 'chain_id' is set
        if ($chain_id === null || (is_array($chain_id) && count($chain_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chain_id when calling v1ChainsChainIdGet'
            );
        }


        $resourcePath = '/v1/chains/{chain_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($chain_id !== null) {
            $resourcePath = str_replace(
                '{' . 'chain_id' . '}',
                ObjectSerializer::toPathValue($chain_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', 'application/x-msgpack', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ChainsGet
     *
     * List all blockchain chains
     *
     * @param  string|null $filter_chain_id Comma or semicolon delimited chain identifiers used to filter response. (optional, eg. &#x60;ETHEREUM;ARBITRUM&#x60;). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ChainsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1Chain[]
     */
    public function v1ChainsGet($filter_chain_id = null, string $contentType = self::contentTypes['v1ChainsGet'][0])
    {
        list($response) = $this->v1ChainsGetWithHttpInfo($filter_chain_id, $contentType);
        return $response;
    }

    /**
     * Operation v1ChainsGetWithHttpInfo
     *
     * List all blockchain chains
     *
     * @param  string|null $filter_chain_id Comma or semicolon delimited chain identifiers used to filter response. (optional, eg. &#x60;ETHEREUM;ARBITRUM&#x60;). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ChainsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1Chain[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ChainsGetWithHttpInfo($filter_chain_id = null, string $contentType = self::contentTypes['v1ChainsGet'][0])
    {
        $request = $this->v1ChainsGetRequest($filter_chain_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\V1Chain[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\V1Chain[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1Chain[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1ChainsGetAsync
     *
     * List all blockchain chains
     *
     * @param  string|null $filter_chain_id Comma or semicolon delimited chain identifiers used to filter response. (optional, eg. &#x60;ETHEREUM;ARBITRUM&#x60;). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ChainsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ChainsGetAsync($filter_chain_id = null, string $contentType = self::contentTypes['v1ChainsGet'][0])
    {
        return $this->v1ChainsGetAsyncWithHttpInfo($filter_chain_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ChainsGetAsyncWithHttpInfo
     *
     * List all blockchain chains
     *
     * @param  string|null $filter_chain_id Comma or semicolon delimited chain identifiers used to filter response. (optional, eg. &#x60;ETHEREUM;ARBITRUM&#x60;). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ChainsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ChainsGetAsyncWithHttpInfo($filter_chain_id = null, string $contentType = self::contentTypes['v1ChainsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\V1Chain[]';
        $request = $this->v1ChainsGetRequest($filter_chain_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ChainsGet'
     *
     * @param  string|null $filter_chain_id Comma or semicolon delimited chain identifiers used to filter response. (optional, eg. &#x60;ETHEREUM;ARBITRUM&#x60;). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ChainsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ChainsGetRequest($filter_chain_id = null, string $contentType = self::contentTypes['v1ChainsGet'][0])
    {



        $resourcePath = '/v1/chains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_chain_id,
            'filter_chain_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', 'application/x-msgpack', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ExchangesExchangeIdGet
     *
     * List all exchanges by exchange_id
     *
     * @param  string $exchange_id The ID of the exchange. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ExchangesExchangeIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1Exchange[]
     */
    public function v1ExchangesExchangeIdGet($exchange_id, string $contentType = self::contentTypes['v1ExchangesExchangeIdGet'][0])
    {
        list($response) = $this->v1ExchangesExchangeIdGetWithHttpInfo($exchange_id, $contentType);
        return $response;
    }

    /**
     * Operation v1ExchangesExchangeIdGetWithHttpInfo
     *
     * List all exchanges by exchange_id
     *
     * @param  string $exchange_id The ID of the exchange. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ExchangesExchangeIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1Exchange[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ExchangesExchangeIdGetWithHttpInfo($exchange_id, string $contentType = self::contentTypes['v1ExchangesExchangeIdGet'][0])
    {
        $request = $this->v1ExchangesExchangeIdGetRequest($exchange_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\V1Exchange[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\V1Exchange[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1Exchange[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1ExchangesExchangeIdGetAsync
     *
     * List all exchanges by exchange_id
     *
     * @param  string $exchange_id The ID of the exchange. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ExchangesExchangeIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ExchangesExchangeIdGetAsync($exchange_id, string $contentType = self::contentTypes['v1ExchangesExchangeIdGet'][0])
    {
        return $this->v1ExchangesExchangeIdGetAsyncWithHttpInfo($exchange_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ExchangesExchangeIdGetAsyncWithHttpInfo
     *
     * List all exchanges by exchange_id
     *
     * @param  string $exchange_id The ID of the exchange. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ExchangesExchangeIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ExchangesExchangeIdGetAsyncWithHttpInfo($exchange_id, string $contentType = self::contentTypes['v1ExchangesExchangeIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\V1Exchange[]';
        $request = $this->v1ExchangesExchangeIdGetRequest($exchange_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ExchangesExchangeIdGet'
     *
     * @param  string $exchange_id The ID of the exchange. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ExchangesExchangeIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ExchangesExchangeIdGetRequest($exchange_id, string $contentType = self::contentTypes['v1ExchangesExchangeIdGet'][0])
    {

        // verify the required parameter 'exchange_id' is set
        if ($exchange_id === null || (is_array($exchange_id) && count($exchange_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exchange_id when calling v1ExchangesExchangeIdGet'
            );
        }


        $resourcePath = '/v1/exchanges/{exchange_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($exchange_id !== null) {
            $resourcePath = str_replace(
                '{' . 'exchange_id' . '}',
                ObjectSerializer::toPathValue($exchange_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', 'application/x-msgpack', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ExchangesGet
     *
     * List all exchanges
     *
     * @param  string|null $filter_exchange_id Comma or semicolon delimited exchange identifiers used to filter response. (optional, eg. &#x60;BITSTAMP;GEMINI&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ExchangesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1Exchange[]
     */
    public function v1ExchangesGet($filter_exchange_id = null, string $contentType = self::contentTypes['v1ExchangesGet'][0])
    {
        list($response) = $this->v1ExchangesGetWithHttpInfo($filter_exchange_id, $contentType);
        return $response;
    }

    /**
     * Operation v1ExchangesGetWithHttpInfo
     *
     * List all exchanges
     *
     * @param  string|null $filter_exchange_id Comma or semicolon delimited exchange identifiers used to filter response. (optional, eg. &#x60;BITSTAMP;GEMINI&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ExchangesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1Exchange[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ExchangesGetWithHttpInfo($filter_exchange_id = null, string $contentType = self::contentTypes['v1ExchangesGet'][0])
    {
        $request = $this->v1ExchangesGetRequest($filter_exchange_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\V1Exchange[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\V1Exchange[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1Exchange[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1ExchangesGetAsync
     *
     * List all exchanges
     *
     * @param  string|null $filter_exchange_id Comma or semicolon delimited exchange identifiers used to filter response. (optional, eg. &#x60;BITSTAMP;GEMINI&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ExchangesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ExchangesGetAsync($filter_exchange_id = null, string $contentType = self::contentTypes['v1ExchangesGet'][0])
    {
        return $this->v1ExchangesGetAsyncWithHttpInfo($filter_exchange_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ExchangesGetAsyncWithHttpInfo
     *
     * List all exchanges
     *
     * @param  string|null $filter_exchange_id Comma or semicolon delimited exchange identifiers used to filter response. (optional, eg. &#x60;BITSTAMP;GEMINI&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ExchangesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ExchangesGetAsyncWithHttpInfo($filter_exchange_id = null, string $contentType = self::contentTypes['v1ExchangesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\V1Exchange[]';
        $request = $this->v1ExchangesGetRequest($filter_exchange_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ExchangesGet'
     *
     * @param  string|null $filter_exchange_id Comma or semicolon delimited exchange identifiers used to filter response. (optional, eg. &#x60;BITSTAMP;GEMINI&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ExchangesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ExchangesGetRequest($filter_exchange_id = null, string $contentType = self::contentTypes['v1ExchangesGet'][0])
    {



        $resourcePath = '/v1/exchanges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_exchange_id,
            'filter_exchange_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', 'application/x-msgpack', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ExchangesIconsSizeGet
     *
     * List of icons for the exchanges
     *
     * @param  int $size The size of the icons. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ExchangesIconsSizeGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1Icon[]
     */
    public function v1ExchangesIconsSizeGet($size, string $contentType = self::contentTypes['v1ExchangesIconsSizeGet'][0])
    {
        list($response) = $this->v1ExchangesIconsSizeGetWithHttpInfo($size, $contentType);
        return $response;
    }

    /**
     * Operation v1ExchangesIconsSizeGetWithHttpInfo
     *
     * List of icons for the exchanges
     *
     * @param  int $size The size of the icons. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ExchangesIconsSizeGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1Icon[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ExchangesIconsSizeGetWithHttpInfo($size, string $contentType = self::contentTypes['v1ExchangesIconsSizeGet'][0])
    {
        $request = $this->v1ExchangesIconsSizeGetRequest($size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\V1Icon[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\V1Icon[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1Icon[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1ExchangesIconsSizeGetAsync
     *
     * List of icons for the exchanges
     *
     * @param  int $size The size of the icons. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ExchangesIconsSizeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ExchangesIconsSizeGetAsync($size, string $contentType = self::contentTypes['v1ExchangesIconsSizeGet'][0])
    {
        return $this->v1ExchangesIconsSizeGetAsyncWithHttpInfo($size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ExchangesIconsSizeGetAsyncWithHttpInfo
     *
     * List of icons for the exchanges
     *
     * @param  int $size The size of the icons. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ExchangesIconsSizeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ExchangesIconsSizeGetAsyncWithHttpInfo($size, string $contentType = self::contentTypes['v1ExchangesIconsSizeGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\V1Icon[]';
        $request = $this->v1ExchangesIconsSizeGetRequest($size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ExchangesIconsSizeGet'
     *
     * @param  int $size The size of the icons. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1ExchangesIconsSizeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1ExchangesIconsSizeGetRequest($size, string $contentType = self::contentTypes['v1ExchangesIconsSizeGet'][0])
    {

        // verify the required parameter 'size' is set
        if ($size === null || (is_array($size) && count($size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $size when calling v1ExchangesIconsSizeGet'
            );
        }


        $resourcePath = '/v1/exchanges/icons/{size}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($size !== null) {
            $resourcePath = str_replace(
                '{' . 'size' . '}',
                ObjectSerializer::toPathValue($size),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', 'application/x-msgpack', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1SymbolsExchangeIdActiveGet
     *
     * List all active symbols
     *
     * @param  string $exchange_id The ID of the exchange. (required)
     * @param  string|null $filter_symbol_id Comma or semicolon delimited parts of symbol identifier used to filter response. (optional, eg. &#x60;BITSTAMP&#x60;_ or &#x60;BINANCE_SPOT_&#x60;) (optional)
     * @param  string|null $filter_asset_id The filter for asset ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1SymbolsExchangeIdActiveGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1Symbol[]
     */
    public function v1SymbolsExchangeIdActiveGet($exchange_id, $filter_symbol_id = null, $filter_asset_id = null, string $contentType = self::contentTypes['v1SymbolsExchangeIdActiveGet'][0])
    {
        list($response) = $this->v1SymbolsExchangeIdActiveGetWithHttpInfo($exchange_id, $filter_symbol_id, $filter_asset_id, $contentType);
        return $response;
    }

    /**
     * Operation v1SymbolsExchangeIdActiveGetWithHttpInfo
     *
     * List all active symbols
     *
     * @param  string $exchange_id The ID of the exchange. (required)
     * @param  string|null $filter_symbol_id Comma or semicolon delimited parts of symbol identifier used to filter response. (optional, eg. &#x60;BITSTAMP&#x60;_ or &#x60;BINANCE_SPOT_&#x60;) (optional)
     * @param  string|null $filter_asset_id The filter for asset ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1SymbolsExchangeIdActiveGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1Symbol[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1SymbolsExchangeIdActiveGetWithHttpInfo($exchange_id, $filter_symbol_id = null, $filter_asset_id = null, string $contentType = self::contentTypes['v1SymbolsExchangeIdActiveGet'][0])
    {
        $request = $this->v1SymbolsExchangeIdActiveGetRequest($exchange_id, $filter_symbol_id, $filter_asset_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\V1Symbol[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\V1Symbol[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1Symbol[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1SymbolsExchangeIdActiveGetAsync
     *
     * List all active symbols
     *
     * @param  string $exchange_id The ID of the exchange. (required)
     * @param  string|null $filter_symbol_id Comma or semicolon delimited parts of symbol identifier used to filter response. (optional, eg. &#x60;BITSTAMP&#x60;_ or &#x60;BINANCE_SPOT_&#x60;) (optional)
     * @param  string|null $filter_asset_id The filter for asset ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1SymbolsExchangeIdActiveGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1SymbolsExchangeIdActiveGetAsync($exchange_id, $filter_symbol_id = null, $filter_asset_id = null, string $contentType = self::contentTypes['v1SymbolsExchangeIdActiveGet'][0])
    {
        return $this->v1SymbolsExchangeIdActiveGetAsyncWithHttpInfo($exchange_id, $filter_symbol_id, $filter_asset_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1SymbolsExchangeIdActiveGetAsyncWithHttpInfo
     *
     * List all active symbols
     *
     * @param  string $exchange_id The ID of the exchange. (required)
     * @param  string|null $filter_symbol_id Comma or semicolon delimited parts of symbol identifier used to filter response. (optional, eg. &#x60;BITSTAMP&#x60;_ or &#x60;BINANCE_SPOT_&#x60;) (optional)
     * @param  string|null $filter_asset_id The filter for asset ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1SymbolsExchangeIdActiveGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1SymbolsExchangeIdActiveGetAsyncWithHttpInfo($exchange_id, $filter_symbol_id = null, $filter_asset_id = null, string $contentType = self::contentTypes['v1SymbolsExchangeIdActiveGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\V1Symbol[]';
        $request = $this->v1SymbolsExchangeIdActiveGetRequest($exchange_id, $filter_symbol_id, $filter_asset_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1SymbolsExchangeIdActiveGet'
     *
     * @param  string $exchange_id The ID of the exchange. (required)
     * @param  string|null $filter_symbol_id Comma or semicolon delimited parts of symbol identifier used to filter response. (optional, eg. &#x60;BITSTAMP&#x60;_ or &#x60;BINANCE_SPOT_&#x60;) (optional)
     * @param  string|null $filter_asset_id The filter for asset ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1SymbolsExchangeIdActiveGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1SymbolsExchangeIdActiveGetRequest($exchange_id, $filter_symbol_id = null, $filter_asset_id = null, string $contentType = self::contentTypes['v1SymbolsExchangeIdActiveGet'][0])
    {

        // verify the required parameter 'exchange_id' is set
        if ($exchange_id === null || (is_array($exchange_id) && count($exchange_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exchange_id when calling v1SymbolsExchangeIdActiveGet'
            );
        }




        $resourcePath = '/v1/symbols/{exchange_id}/active';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_symbol_id,
            'filter_symbol_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_asset_id,
            'filter_asset_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($exchange_id !== null) {
            $resourcePath = str_replace(
                '{' . 'exchange_id' . '}',
                ObjectSerializer::toPathValue($exchange_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', 'application/x-msgpack', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1SymbolsExchangeIdHistoryGet
     *
     * List all historical symbols for an exchange.
     *
     * @param  string $exchange_id The ID of the exchange. (required)
     * @param  int|null $page The page number for pagination (starts from 1). (optional, default to 1)
     * @param  int|null $limit Number of records to return per page. (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1SymbolsExchangeIdHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1Symbol[]
     */
    public function v1SymbolsExchangeIdHistoryGet($exchange_id, $page = 1, $limit = 100, string $contentType = self::contentTypes['v1SymbolsExchangeIdHistoryGet'][0])
    {
        list($response) = $this->v1SymbolsExchangeIdHistoryGetWithHttpInfo($exchange_id, $page, $limit, $contentType);
        return $response;
    }

    /**
     * Operation v1SymbolsExchangeIdHistoryGetWithHttpInfo
     *
     * List all historical symbols for an exchange.
     *
     * @param  string $exchange_id The ID of the exchange. (required)
     * @param  int|null $page The page number for pagination (starts from 1). (optional, default to 1)
     * @param  int|null $limit Number of records to return per page. (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1SymbolsExchangeIdHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1Symbol[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1SymbolsExchangeIdHistoryGetWithHttpInfo($exchange_id, $page = 1, $limit = 100, string $contentType = self::contentTypes['v1SymbolsExchangeIdHistoryGet'][0])
    {
        $request = $this->v1SymbolsExchangeIdHistoryGetRequest($exchange_id, $page, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\V1Symbol[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\V1Symbol[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1Symbol[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1SymbolsExchangeIdHistoryGetAsync
     *
     * List all historical symbols for an exchange.
     *
     * @param  string $exchange_id The ID of the exchange. (required)
     * @param  int|null $page The page number for pagination (starts from 1). (optional, default to 1)
     * @param  int|null $limit Number of records to return per page. (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1SymbolsExchangeIdHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1SymbolsExchangeIdHistoryGetAsync($exchange_id, $page = 1, $limit = 100, string $contentType = self::contentTypes['v1SymbolsExchangeIdHistoryGet'][0])
    {
        return $this->v1SymbolsExchangeIdHistoryGetAsyncWithHttpInfo($exchange_id, $page, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1SymbolsExchangeIdHistoryGetAsyncWithHttpInfo
     *
     * List all historical symbols for an exchange.
     *
     * @param  string $exchange_id The ID of the exchange. (required)
     * @param  int|null $page The page number for pagination (starts from 1). (optional, default to 1)
     * @param  int|null $limit Number of records to return per page. (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1SymbolsExchangeIdHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1SymbolsExchangeIdHistoryGetAsyncWithHttpInfo($exchange_id, $page = 1, $limit = 100, string $contentType = self::contentTypes['v1SymbolsExchangeIdHistoryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\V1Symbol[]';
        $request = $this->v1SymbolsExchangeIdHistoryGetRequest($exchange_id, $page, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1SymbolsExchangeIdHistoryGet'
     *
     * @param  string $exchange_id The ID of the exchange. (required)
     * @param  int|null $page The page number for pagination (starts from 1). (optional, default to 1)
     * @param  int|null $limit Number of records to return per page. (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1SymbolsExchangeIdHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1SymbolsExchangeIdHistoryGetRequest($exchange_id, $page = 1, $limit = 100, string $contentType = self::contentTypes['v1SymbolsExchangeIdHistoryGet'][0])
    {

        // verify the required parameter 'exchange_id' is set
        if ($exchange_id === null || (is_array($exchange_id) && count($exchange_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exchange_id when calling v1SymbolsExchangeIdHistoryGet'
            );
        }




        $resourcePath = '/v1/symbols/{exchange_id}/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($exchange_id !== null) {
            $resourcePath = str_replace(
                '{' . 'exchange_id' . '}',
                ObjectSerializer::toPathValue($exchange_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', 'application/x-msgpack', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1SymbolsMapExchangeIdGet
     *
     * List active symbol mapping for the exchange
     *
     * @param  string $exchange_id The ID of the exchange (from the Metadata -&gt; Exchanges) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1SymbolsMapExchangeIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\V1SymbolMapping[]
     */
    public function v1SymbolsMapExchangeIdGet($exchange_id, string $contentType = self::contentTypes['v1SymbolsMapExchangeIdGet'][0])
    {
        list($response) = $this->v1SymbolsMapExchangeIdGetWithHttpInfo($exchange_id, $contentType);
        return $response;
    }

    /**
     * Operation v1SymbolsMapExchangeIdGetWithHttpInfo
     *
     * List active symbol mapping for the exchange
     *
     * @param  string $exchange_id The ID of the exchange (from the Metadata -&gt; Exchanges) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1SymbolsMapExchangeIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\V1SymbolMapping[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1SymbolsMapExchangeIdGetWithHttpInfo($exchange_id, string $contentType = self::contentTypes['v1SymbolsMapExchangeIdGet'][0])
    {
        $request = $this->v1SymbolsMapExchangeIdGetRequest($exchange_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\V1SymbolMapping[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\V1SymbolMapping[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\V1SymbolMapping[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation v1SymbolsMapExchangeIdGetAsync
     *
     * List active symbol mapping for the exchange
     *
     * @param  string $exchange_id The ID of the exchange (from the Metadata -&gt; Exchanges) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1SymbolsMapExchangeIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1SymbolsMapExchangeIdGetAsync($exchange_id, string $contentType = self::contentTypes['v1SymbolsMapExchangeIdGet'][0])
    {
        return $this->v1SymbolsMapExchangeIdGetAsyncWithHttpInfo($exchange_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1SymbolsMapExchangeIdGetAsyncWithHttpInfo
     *
     * List active symbol mapping for the exchange
     *
     * @param  string $exchange_id The ID of the exchange (from the Metadata -&gt; Exchanges) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1SymbolsMapExchangeIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1SymbolsMapExchangeIdGetAsyncWithHttpInfo($exchange_id, string $contentType = self::contentTypes['v1SymbolsMapExchangeIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\V1SymbolMapping[]';
        $request = $this->v1SymbolsMapExchangeIdGetRequest($exchange_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1SymbolsMapExchangeIdGet'
     *
     * @param  string $exchange_id The ID of the exchange (from the Metadata -&gt; Exchanges) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1SymbolsMapExchangeIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1SymbolsMapExchangeIdGetRequest($exchange_id, string $contentType = self::contentTypes['v1SymbolsMapExchangeIdGet'][0])
    {

        // verify the required parameter 'exchange_id' is set
        if ($exchange_id === null || (is_array($exchange_id) && count($exchange_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exchange_id when calling v1SymbolsMapExchangeIdGet'
            );
        }


        $resourcePath = '/v1/symbols/map/{exchange_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($exchange_id !== null) {
            $resourcePath = str_replace(
                '{' . 'exchange_id' . '}',
                ObjectSerializer::toPathValue($exchange_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', 'application/x-msgpack', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
