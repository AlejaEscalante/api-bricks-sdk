// tslint:disable
/**
 * Indexes REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    MetadataExchange,
} from '../models';

export interface ApiMetadataExchangesExchangeIdGetRequest {
    exchangeId: string;
}

export interface ApiMetadataExchangesGetRequest {
    filterExchangeId?: string;
}

/**
 * no description
 */
export class MetadataApi extends BaseAPI {

    /**
     * List all exchanges by exchange_id
     */
    apiMetadataExchangesExchangeIdGet({ exchangeId }: ApiMetadataExchangesExchangeIdGetRequest): Observable<Array<MetadataExchange>>
    apiMetadataExchangesExchangeIdGet({ exchangeId }: ApiMetadataExchangesExchangeIdGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<MetadataExchange>>>
    apiMetadataExchangesExchangeIdGet({ exchangeId }: ApiMetadataExchangesExchangeIdGetRequest, opts?: OperationOpts): Observable<Array<MetadataExchange> | AjaxResponse<Array<MetadataExchange>>> {
        throwIfNullOrUndefined(exchangeId, 'exchangeId', 'apiMetadataExchangesExchangeIdGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        return this.request<Array<MetadataExchange>>({
            url: '/api/metadata/exchanges/{exchange_id}'.replace('{exchange_id}', encodeURI(exchangeId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get a detailed list of exchanges provided by the system.                :::info  Properties of the output are providing aggregated information from across all symbols related to the specific exchange. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source.  :::
     * List all exchanges
     */
    apiMetadataExchangesGet({ filterExchangeId }: ApiMetadataExchangesGetRequest): Observable<Array<MetadataExchange>>
    apiMetadataExchangesGet({ filterExchangeId }: ApiMetadataExchangesGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<MetadataExchange>>>
    apiMetadataExchangesGet({ filterExchangeId }: ApiMetadataExchangesGetRequest, opts?: OperationOpts): Observable<Array<MetadataExchange> | AjaxResponse<Array<MetadataExchange>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // ApiKey authentication
        };

        const query: HttpQuery = {};

        if (filterExchangeId != null) { query['filter_exchange_id'] = filterExchangeId; }

        return this.request<Array<MetadataExchange>>({
            url: '/api/metadata/exchanges',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
