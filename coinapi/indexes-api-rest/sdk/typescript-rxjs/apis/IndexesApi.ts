// tslint:disable
/**
 * CoinAPI Indexes REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    IndexesIndexDefinitionInputData,
    IndexesIndexDefinitionSnapshotEntry,
    IndexesIndexIdentifier,
    IndexesIndexMultiAssetWeight,
    IndexesIndexTimeseriesItem,
    IndexesIndexValue,
} from '../models';

export interface V1IndexdefInputDataIndexDefinitionIdAllGetRequest {
    indexDefinitionId: string;
}

export interface V1IndexdefInputDataIndexDefinitionIdGetRequest {
    indexDefinitionId: string;
    time?: string;
    enabledOnly?: boolean;
    pendingOnly?: boolean;
    filterAssetId?: string;
    withStatusInfo?: boolean;
}

export interface V1IndexdefMultiassetIndexIdGetRequest {
    indexId: string;
}

export interface V1IndexesIndexDefinitionIdCurrentSnapshotGetRequest {
    indexDefinitionId: string;
}

export interface V1IndexesIndexDefinitionIdHistorySnapshotGetRequest {
    indexDefinitionId: string;
    time?: string;
}

export interface V1IndexesIndexIdCurrentGetRequest {
    indexId: string;
}

export interface V1IndexesIndexIdHistoryGetRequest {
    indexId: string;
    timeStart?: string;
    timeEnd?: string;
    limit?: number;
}

export interface V1IndexesIndexIdTimeseriesGetRequest {
    indexId: string;
    periodId: string;
    timeStart: string;
    timeEnd: string;
    limit?: number;
}

/**
 * no description
 */
export class IndexesApi extends BaseAPI {

    /**
     * Returns all data inputs for a specific index definition
     */
    v1IndexdefInputDataIndexDefinitionIdAllGet({ indexDefinitionId }: V1IndexdefInputDataIndexDefinitionIdAllGetRequest): Observable<Array<IndexesIndexDefinitionInputData>>
    v1IndexdefInputDataIndexDefinitionIdAllGet({ indexDefinitionId }: V1IndexdefInputDataIndexDefinitionIdAllGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<IndexesIndexDefinitionInputData>>>
    v1IndexdefInputDataIndexDefinitionIdAllGet({ indexDefinitionId }: V1IndexdefInputDataIndexDefinitionIdAllGetRequest, opts?: OperationOpts): Observable<Array<IndexesIndexDefinitionInputData> | AjaxResponse<Array<IndexesIndexDefinitionInputData>>> {
        throwIfNullOrUndefined(indexDefinitionId, 'indexDefinitionId', 'v1IndexdefInputDataIndexDefinitionIdAllGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<IndexesIndexDefinitionInputData>>({
            url: '/v1/indexdef/input-data/{index_definition_id}/all'.replace('{index_definition_id}', encodeURI(indexDefinitionId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Returns data inputs for certain index definition and time
     */
    v1IndexdefInputDataIndexDefinitionIdGet({ indexDefinitionId, time, enabledOnly, pendingOnly, filterAssetId, withStatusInfo }: V1IndexdefInputDataIndexDefinitionIdGetRequest): Observable<Array<IndexesIndexDefinitionSnapshotEntry>>
    v1IndexdefInputDataIndexDefinitionIdGet({ indexDefinitionId, time, enabledOnly, pendingOnly, filterAssetId, withStatusInfo }: V1IndexdefInputDataIndexDefinitionIdGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<IndexesIndexDefinitionSnapshotEntry>>>
    v1IndexdefInputDataIndexDefinitionIdGet({ indexDefinitionId, time, enabledOnly, pendingOnly, filterAssetId, withStatusInfo }: V1IndexdefInputDataIndexDefinitionIdGetRequest, opts?: OperationOpts): Observable<Array<IndexesIndexDefinitionSnapshotEntry> | AjaxResponse<Array<IndexesIndexDefinitionSnapshotEntry>>> {
        throwIfNullOrUndefined(indexDefinitionId, 'indexDefinitionId', 'v1IndexdefInputDataIndexDefinitionIdGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = {};

        if (time != null) { query['time'] = (time as any).toISOString(); }
        if (enabledOnly != null) { query['enabled_only'] = enabledOnly; }
        if (pendingOnly != null) { query['pending_only'] = pendingOnly; }
        if (filterAssetId != null) { query['filter_asset_id'] = filterAssetId; }
        if (withStatusInfo != null) { query['with_status_info'] = withStatusInfo; }

        return this.request<Array<IndexesIndexDefinitionSnapshotEntry>>({
            url: '/v1/indexdef/input-data/{index_definition_id}'.replace('{index_definition_id}', encodeURI(indexDefinitionId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get all multi-asset weights
     */
    v1IndexdefMultiassetGet(): Observable<Array<IndexesIndexMultiAssetWeight>>
    v1IndexdefMultiassetGet(opts?: OperationOpts): Observable<AjaxResponse<Array<IndexesIndexMultiAssetWeight>>>
    v1IndexdefMultiassetGet(opts?: OperationOpts): Observable<Array<IndexesIndexMultiAssetWeight> | AjaxResponse<Array<IndexesIndexMultiAssetWeight>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<IndexesIndexMultiAssetWeight>>({
            url: '/v1/indexdef/multiasset',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get multi-asset weights for specific index
     */
    v1IndexdefMultiassetIndexIdGet({ indexId }: V1IndexdefMultiassetIndexIdGetRequest): Observable<Array<IndexesIndexMultiAssetWeight>>
    v1IndexdefMultiassetIndexIdGet({ indexId }: V1IndexdefMultiassetIndexIdGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<IndexesIndexMultiAssetWeight>>>
    v1IndexdefMultiassetIndexIdGet({ indexId }: V1IndexdefMultiassetIndexIdGetRequest, opts?: OperationOpts): Observable<Array<IndexesIndexMultiAssetWeight> | AjaxResponse<Array<IndexesIndexMultiAssetWeight>>> {
        throwIfNullOrUndefined(indexId, 'indexId', 'v1IndexdefMultiassetIndexIdGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<IndexesIndexMultiAssetWeight>>({
            url: '/v1/indexdef/multiasset/{index_id}'.replace('{index_id}', encodeURI(indexId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * List indexes
     */
    v1IndexesGet(): Observable<Array<IndexesIndexIdentifier>>
    v1IndexesGet(opts?: OperationOpts): Observable<AjaxResponse<Array<IndexesIndexIdentifier>>>
    v1IndexesGet(opts?: OperationOpts): Observable<Array<IndexesIndexIdentifier> | AjaxResponse<Array<IndexesIndexIdentifier>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<IndexesIndexIdentifier>>({
            url: '/v1/indexes',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Current Index Values for index definition
     */
    v1IndexesIndexDefinitionIdCurrentSnapshotGet({ indexDefinitionId }: V1IndexesIndexDefinitionIdCurrentSnapshotGetRequest): Observable<Array<IndexesIndexDefinitionSnapshotEntry>>
    v1IndexesIndexDefinitionIdCurrentSnapshotGet({ indexDefinitionId }: V1IndexesIndexDefinitionIdCurrentSnapshotGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<IndexesIndexDefinitionSnapshotEntry>>>
    v1IndexesIndexDefinitionIdCurrentSnapshotGet({ indexDefinitionId }: V1IndexesIndexDefinitionIdCurrentSnapshotGetRequest, opts?: OperationOpts): Observable<Array<IndexesIndexDefinitionSnapshotEntry> | AjaxResponse<Array<IndexesIndexDefinitionSnapshotEntry>>> {
        throwIfNullOrUndefined(indexDefinitionId, 'indexDefinitionId', 'v1IndexesIndexDefinitionIdCurrentSnapshotGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<IndexesIndexDefinitionSnapshotEntry>>({
            url: '/v1/indexes/{index_definition_id}/currentSnapshot'.replace('{index_definition_id}', encodeURI(indexDefinitionId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Historical Index Values for index definition
     */
    v1IndexesIndexDefinitionIdHistorySnapshotGet({ indexDefinitionId, time }: V1IndexesIndexDefinitionIdHistorySnapshotGetRequest): Observable<Array<IndexesIndexDefinitionSnapshotEntry>>
    v1IndexesIndexDefinitionIdHistorySnapshotGet({ indexDefinitionId, time }: V1IndexesIndexDefinitionIdHistorySnapshotGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<IndexesIndexDefinitionSnapshotEntry>>>
    v1IndexesIndexDefinitionIdHistorySnapshotGet({ indexDefinitionId, time }: V1IndexesIndexDefinitionIdHistorySnapshotGetRequest, opts?: OperationOpts): Observable<Array<IndexesIndexDefinitionSnapshotEntry> | AjaxResponse<Array<IndexesIndexDefinitionSnapshotEntry>>> {
        throwIfNullOrUndefined(indexDefinitionId, 'indexDefinitionId', 'v1IndexesIndexDefinitionIdHistorySnapshotGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = {};

        if (time != null) { query['time'] = (time as any).toISOString(); }

        return this.request<Array<IndexesIndexDefinitionSnapshotEntry>>({
            url: '/v1/indexes/{index_definition_id}/historySnapshot'.replace('{index_definition_id}', encodeURI(indexDefinitionId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Current Index Value
     */
    v1IndexesIndexIdCurrentGet({ indexId }: V1IndexesIndexIdCurrentGetRequest): Observable<IndexesIndexValue>
    v1IndexesIndexIdCurrentGet({ indexId }: V1IndexesIndexIdCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<IndexesIndexValue>>
    v1IndexesIndexIdCurrentGet({ indexId }: V1IndexesIndexIdCurrentGetRequest, opts?: OperationOpts): Observable<IndexesIndexValue | AjaxResponse<IndexesIndexValue>> {
        throwIfNullOrUndefined(indexId, 'indexId', 'v1IndexesIndexIdCurrentGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<IndexesIndexValue>({
            url: '/v1/indexes/{index_id}/current'.replace('{index_id}', encodeURI(indexId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Historical Index Value w/Composition
     */
    v1IndexesIndexIdHistoryGet({ indexId, timeStart, timeEnd, limit }: V1IndexesIndexIdHistoryGetRequest): Observable<Array<IndexesIndexValue>>
    v1IndexesIndexIdHistoryGet({ indexId, timeStart, timeEnd, limit }: V1IndexesIndexIdHistoryGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<IndexesIndexValue>>>
    v1IndexesIndexIdHistoryGet({ indexId, timeStart, timeEnd, limit }: V1IndexesIndexIdHistoryGetRequest, opts?: OperationOpts): Observable<Array<IndexesIndexValue> | AjaxResponse<Array<IndexesIndexValue>>> {
        throwIfNullOrUndefined(indexId, 'indexId', 'v1IndexesIndexIdHistoryGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = {};

        if (timeStart != null) { query['time_start'] = (timeStart as any).toISOString(); }
        if (timeEnd != null) { query['time_end'] = (timeEnd as any).toISOString(); }
        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<IndexesIndexValue>>({
            url: '/v1/indexes/{index_id}/history'.replace('{index_id}', encodeURI(indexId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Timeseries Index Value
     */
    v1IndexesIndexIdTimeseriesGet({ indexId, periodId, timeStart, timeEnd, limit }: V1IndexesIndexIdTimeseriesGetRequest): Observable<Array<IndexesIndexTimeseriesItem>>
    v1IndexesIndexIdTimeseriesGet({ indexId, periodId, timeStart, timeEnd, limit }: V1IndexesIndexIdTimeseriesGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<IndexesIndexTimeseriesItem>>>
    v1IndexesIndexIdTimeseriesGet({ indexId, periodId, timeStart, timeEnd, limit }: V1IndexesIndexIdTimeseriesGetRequest, opts?: OperationOpts): Observable<Array<IndexesIndexTimeseriesItem> | AjaxResponse<Array<IndexesIndexTimeseriesItem>>> {
        throwIfNullOrUndefined(indexId, 'indexId', 'v1IndexesIndexIdTimeseriesGet');
        throwIfNullOrUndefined(periodId, 'periodId', 'v1IndexesIndexIdTimeseriesGet');
        throwIfNullOrUndefined(timeStart, 'timeStart', 'v1IndexesIndexIdTimeseriesGet');
        throwIfNullOrUndefined(timeEnd, 'timeEnd', 'v1IndexesIndexIdTimeseriesGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // APIKey authentication
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'period_id': periodId,
            'time_start': timeStart,
            'time_end': timeEnd,
        };

        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<IndexesIndexTimeseriesItem>>({
            url: '/v1/indexes/{index_id}/timeseries'.replace('{index_id}', encodeURI(indexId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
