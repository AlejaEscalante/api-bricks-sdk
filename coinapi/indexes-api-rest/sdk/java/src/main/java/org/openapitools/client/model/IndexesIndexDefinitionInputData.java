/*
 * Indexes REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IndexesIndexDefinitionInputData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-15T06:07:18.080838816Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class IndexesIndexDefinitionInputData {
  public static final String SERIALIZED_NAME_EXCHANGE_ID = "exchangeId";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_ID)
  @javax.annotation.Nullable
  private String exchangeId;

  public static final String SERIALIZED_NAME_EXCHANGE_SYMBOL_ID = "exchangeSymbolId";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_SYMBOL_ID)
  @javax.annotation.Nullable
  private String exchangeSymbolId;

  public static final String SERIALIZED_NAME_BASE_ASSET_ID = "baseAssetId";
  @SerializedName(SERIALIZED_NAME_BASE_ASSET_ID)
  @javax.annotation.Nullable
  private String baseAssetId;

  public static final String SERIALIZED_NAME_QUOTE_ASSET_ID = "quoteAssetId";
  @SerializedName(SERIALIZED_NAME_QUOTE_ASSET_ID)
  @javax.annotation.Nullable
  private String quoteAssetId;

  public static final String SERIALIZED_NAME_BEGIN_DATE = "beginDate";
  @SerializedName(SERIALIZED_NAME_BEGIN_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime beginDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private String status;

  public static final String SERIALIZED_NAME_STATUS_INFO = "statusInfo";
  @SerializedName(SERIALIZED_NAME_STATUS_INFO)
  @javax.annotation.Nullable
  private String statusInfo;

  public static final String SERIALIZED_NAME_LAST_MODIFICATION_TIME = "lastModificationTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFICATION_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime lastModificationTime;

  public IndexesIndexDefinitionInputData() {
  }

  public IndexesIndexDefinitionInputData exchangeId(@javax.annotation.Nullable String exchangeId) {
    this.exchangeId = exchangeId;
    return this;
  }

  /**
   * Get exchangeId
   * @return exchangeId
   */
  @javax.annotation.Nullable
  public String getExchangeId() {
    return exchangeId;
  }

  public void setExchangeId(@javax.annotation.Nullable String exchangeId) {
    this.exchangeId = exchangeId;
  }


  public IndexesIndexDefinitionInputData exchangeSymbolId(@javax.annotation.Nullable String exchangeSymbolId) {
    this.exchangeSymbolId = exchangeSymbolId;
    return this;
  }

  /**
   * Get exchangeSymbolId
   * @return exchangeSymbolId
   */
  @javax.annotation.Nullable
  public String getExchangeSymbolId() {
    return exchangeSymbolId;
  }

  public void setExchangeSymbolId(@javax.annotation.Nullable String exchangeSymbolId) {
    this.exchangeSymbolId = exchangeSymbolId;
  }


  public IndexesIndexDefinitionInputData baseAssetId(@javax.annotation.Nullable String baseAssetId) {
    this.baseAssetId = baseAssetId;
    return this;
  }

  /**
   * Get baseAssetId
   * @return baseAssetId
   */
  @javax.annotation.Nullable
  public String getBaseAssetId() {
    return baseAssetId;
  }

  public void setBaseAssetId(@javax.annotation.Nullable String baseAssetId) {
    this.baseAssetId = baseAssetId;
  }


  public IndexesIndexDefinitionInputData quoteAssetId(@javax.annotation.Nullable String quoteAssetId) {
    this.quoteAssetId = quoteAssetId;
    return this;
  }

  /**
   * Get quoteAssetId
   * @return quoteAssetId
   */
  @javax.annotation.Nullable
  public String getQuoteAssetId() {
    return quoteAssetId;
  }

  public void setQuoteAssetId(@javax.annotation.Nullable String quoteAssetId) {
    this.quoteAssetId = quoteAssetId;
  }


  public IndexesIndexDefinitionInputData beginDate(@javax.annotation.Nullable OffsetDateTime beginDate) {
    this.beginDate = beginDate;
    return this;
  }

  /**
   * Get beginDate
   * @return beginDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBeginDate() {
    return beginDate;
  }

  public void setBeginDate(@javax.annotation.Nullable OffsetDateTime beginDate) {
    this.beginDate = beginDate;
  }


  public IndexesIndexDefinitionInputData endDate(@javax.annotation.Nullable OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(@javax.annotation.Nullable OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public IndexesIndexDefinitionInputData status(@javax.annotation.Nullable String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable String status) {
    this.status = status;
  }


  public IndexesIndexDefinitionInputData statusInfo(@javax.annotation.Nullable String statusInfo) {
    this.statusInfo = statusInfo;
    return this;
  }

  /**
   * Get statusInfo
   * @return statusInfo
   */
  @javax.annotation.Nullable
  public String getStatusInfo() {
    return statusInfo;
  }

  public void setStatusInfo(@javax.annotation.Nullable String statusInfo) {
    this.statusInfo = statusInfo;
  }


  public IndexesIndexDefinitionInputData lastModificationTime(@javax.annotation.Nullable OffsetDateTime lastModificationTime) {
    this.lastModificationTime = lastModificationTime;
    return this;
  }

  /**
   * Get lastModificationTime
   * @return lastModificationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModificationTime() {
    return lastModificationTime;
  }

  public void setLastModificationTime(@javax.annotation.Nullable OffsetDateTime lastModificationTime) {
    this.lastModificationTime = lastModificationTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndexesIndexDefinitionInputData indexesIndexDefinitionInputData = (IndexesIndexDefinitionInputData) o;
    return Objects.equals(this.exchangeId, indexesIndexDefinitionInputData.exchangeId) &&
        Objects.equals(this.exchangeSymbolId, indexesIndexDefinitionInputData.exchangeSymbolId) &&
        Objects.equals(this.baseAssetId, indexesIndexDefinitionInputData.baseAssetId) &&
        Objects.equals(this.quoteAssetId, indexesIndexDefinitionInputData.quoteAssetId) &&
        Objects.equals(this.beginDate, indexesIndexDefinitionInputData.beginDate) &&
        Objects.equals(this.endDate, indexesIndexDefinitionInputData.endDate) &&
        Objects.equals(this.status, indexesIndexDefinitionInputData.status) &&
        Objects.equals(this.statusInfo, indexesIndexDefinitionInputData.statusInfo) &&
        Objects.equals(this.lastModificationTime, indexesIndexDefinitionInputData.lastModificationTime);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(exchangeId, exchangeSymbolId, baseAssetId, quoteAssetId, beginDate, endDate, status, statusInfo, lastModificationTime);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndexesIndexDefinitionInputData {\n");
    sb.append("    exchangeId: ").append(toIndentedString(exchangeId)).append("\n");
    sb.append("    exchangeSymbolId: ").append(toIndentedString(exchangeSymbolId)).append("\n");
    sb.append("    baseAssetId: ").append(toIndentedString(baseAssetId)).append("\n");
    sb.append("    quoteAssetId: ").append(toIndentedString(quoteAssetId)).append("\n");
    sb.append("    beginDate: ").append(toIndentedString(beginDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusInfo: ").append(toIndentedString(statusInfo)).append("\n");
    sb.append("    lastModificationTime: ").append(toIndentedString(lastModificationTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exchangeId");
    openapiFields.add("exchangeSymbolId");
    openapiFields.add("baseAssetId");
    openapiFields.add("quoteAssetId");
    openapiFields.add("beginDate");
    openapiFields.add("endDate");
    openapiFields.add("status");
    openapiFields.add("statusInfo");
    openapiFields.add("lastModificationTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IndexesIndexDefinitionInputData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IndexesIndexDefinitionInputData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IndexesIndexDefinitionInputData is not found in the empty JSON string", IndexesIndexDefinitionInputData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IndexesIndexDefinitionInputData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IndexesIndexDefinitionInputData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("exchangeId") != null && !jsonObj.get("exchangeId").isJsonNull()) && !jsonObj.get("exchangeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchangeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchangeId").toString()));
      }
      if ((jsonObj.get("exchangeSymbolId") != null && !jsonObj.get("exchangeSymbolId").isJsonNull()) && !jsonObj.get("exchangeSymbolId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchangeSymbolId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchangeSymbolId").toString()));
      }
      if ((jsonObj.get("baseAssetId") != null && !jsonObj.get("baseAssetId").isJsonNull()) && !jsonObj.get("baseAssetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseAssetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseAssetId").toString()));
      }
      if ((jsonObj.get("quoteAssetId") != null && !jsonObj.get("quoteAssetId").isJsonNull()) && !jsonObj.get("quoteAssetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quoteAssetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quoteAssetId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("statusInfo") != null && !jsonObj.get("statusInfo").isJsonNull()) && !jsonObj.get("statusInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusInfo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IndexesIndexDefinitionInputData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IndexesIndexDefinitionInputData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IndexesIndexDefinitionInputData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IndexesIndexDefinitionInputData.class));

       return (TypeAdapter<T>) new TypeAdapter<IndexesIndexDefinitionInputData>() {
           @Override
           public void write(JsonWriter out, IndexesIndexDefinitionInputData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IndexesIndexDefinitionInputData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IndexesIndexDefinitionInputData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IndexesIndexDefinitionInputData
   * @throws IOException if the JSON string is invalid with respect to IndexesIndexDefinitionInputData
   */
  public static IndexesIndexDefinitionInputData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IndexesIndexDefinitionInputData.class);
  }

  /**
   * Convert an instance of IndexesIndexDefinitionInputData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

