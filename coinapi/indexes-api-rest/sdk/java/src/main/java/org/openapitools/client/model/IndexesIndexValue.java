/*
 * CoinAPI Indexes REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IndexesIndexValueComponent;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IndexesIndexValue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-11T06:06:56.411366003Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class IndexesIndexValue {
  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  @javax.annotation.Nullable
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nullable
  private Double value;

  public static final String SERIALIZED_NAME_COMPOSITION = "composition";
  @SerializedName(SERIALIZED_NAME_COMPOSITION)
  @javax.annotation.Nullable
  private List<IndexesIndexValueComponent> composition;

  public IndexesIndexValue() {
  }

  public IndexesIndexValue timestamp(@javax.annotation.Nullable OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(@javax.annotation.Nullable OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public IndexesIndexValue value(@javax.annotation.Nullable Double value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public Double getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nullable Double value) {
    this.value = value;
  }


  public IndexesIndexValue composition(@javax.annotation.Nullable List<IndexesIndexValueComponent> composition) {
    this.composition = composition;
    return this;
  }

  public IndexesIndexValue addCompositionItem(IndexesIndexValueComponent compositionItem) {
    if (this.composition == null) {
      this.composition = new ArrayList<>();
    }
    this.composition.add(compositionItem);
    return this;
  }

  /**
   * Get composition
   * @return composition
   */
  @javax.annotation.Nullable
  public List<IndexesIndexValueComponent> getComposition() {
    return composition;
  }

  public void setComposition(@javax.annotation.Nullable List<IndexesIndexValueComponent> composition) {
    this.composition = composition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndexesIndexValue indexesIndexValue = (IndexesIndexValue) o;
    return Objects.equals(this.timestamp, indexesIndexValue.timestamp) &&
        Objects.equals(this.value, indexesIndexValue.value) &&
        Objects.equals(this.composition, indexesIndexValue.composition);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, value, composition);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndexesIndexValue {\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    composition: ").append(toIndentedString(composition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("timestamp");
    openapiFields.add("value");
    openapiFields.add("composition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IndexesIndexValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IndexesIndexValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IndexesIndexValue is not found in the empty JSON string", IndexesIndexValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IndexesIndexValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IndexesIndexValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("composition") != null && !jsonObj.get("composition").isJsonNull()) {
        JsonArray jsonArraycomposition = jsonObj.getAsJsonArray("composition");
        if (jsonArraycomposition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("composition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `composition` to be an array in the JSON string but got `%s`", jsonObj.get("composition").toString()));
          }

          // validate the optional field `composition` (array)
          for (int i = 0; i < jsonArraycomposition.size(); i++) {
            IndexesIndexValueComponent.validateJsonElement(jsonArraycomposition.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IndexesIndexValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IndexesIndexValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IndexesIndexValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IndexesIndexValue.class));

       return (TypeAdapter<T>) new TypeAdapter<IndexesIndexValue>() {
           @Override
           public void write(JsonWriter out, IndexesIndexValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IndexesIndexValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IndexesIndexValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IndexesIndexValue
   * @throws IOException if the JSON string is invalid with respect to IndexesIndexValue
   */
  public static IndexesIndexValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IndexesIndexValue.class);
  }

  /**
   * Convert an instance of IndexesIndexValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

