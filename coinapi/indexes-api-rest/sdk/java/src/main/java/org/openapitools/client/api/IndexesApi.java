/*
 * Indexes REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.IndexesIndexDefinitionInputData;
import org.openapitools.client.model.IndexesIndexDefinitionSnapshotEntry;
import org.openapitools.client.model.IndexesIndexIdentifier;
import org.openapitools.client.model.IndexesIndexMultiAssetWeight;
import org.openapitools.client.model.IndexesIndexTimeseriesItem;
import org.openapitools.client.model.IndexesIndexValue;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IndexesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IndexesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IndexesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1IndexdefInputDataIndexDefinitionIdAllGet
     * @param indexDefinitionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexdefInputDataIndexDefinitionIdAllGetCall(@javax.annotation.Nonnull String indexDefinitionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/indexdef/input-data/{index_definition_id}/all"
            .replace("{" + "index_definition_id" + "}", localVarApiClient.escapeString(indexDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1IndexdefInputDataIndexDefinitionIdAllGetValidateBeforeCall(@javax.annotation.Nonnull String indexDefinitionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'indexDefinitionId' is set
        if (indexDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'indexDefinitionId' when calling v1IndexdefInputDataIndexDefinitionIdAllGet(Async)");
        }

        return v1IndexdefInputDataIndexDefinitionIdAllGetCall(indexDefinitionId, _callback);

    }

    /**
     * Returns all data inputs for a specific index definition
     * 
     * @param indexDefinitionId  (required)
     * @return List&lt;IndexesIndexDefinitionInputData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<IndexesIndexDefinitionInputData> v1IndexdefInputDataIndexDefinitionIdAllGet(@javax.annotation.Nonnull String indexDefinitionId) throws ApiException {
        ApiResponse<List<IndexesIndexDefinitionInputData>> localVarResp = v1IndexdefInputDataIndexDefinitionIdAllGetWithHttpInfo(indexDefinitionId);
        return localVarResp.getData();
    }

    /**
     * Returns all data inputs for a specific index definition
     * 
     * @param indexDefinitionId  (required)
     * @return ApiResponse&lt;List&lt;IndexesIndexDefinitionInputData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IndexesIndexDefinitionInputData>> v1IndexdefInputDataIndexDefinitionIdAllGetWithHttpInfo(@javax.annotation.Nonnull String indexDefinitionId) throws ApiException {
        okhttp3.Call localVarCall = v1IndexdefInputDataIndexDefinitionIdAllGetValidateBeforeCall(indexDefinitionId, null);
        Type localVarReturnType = new TypeToken<List<IndexesIndexDefinitionInputData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all data inputs for a specific index definition (asynchronously)
     * 
     * @param indexDefinitionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexdefInputDataIndexDefinitionIdAllGetAsync(@javax.annotation.Nonnull String indexDefinitionId, final ApiCallback<List<IndexesIndexDefinitionInputData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1IndexdefInputDataIndexDefinitionIdAllGetValidateBeforeCall(indexDefinitionId, _callback);
        Type localVarReturnType = new TypeToken<List<IndexesIndexDefinitionInputData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1IndexdefInputDataIndexDefinitionIdGet
     * @param indexDefinitionId  (required)
     * @param time  (optional)
     * @param enabledOnly  (optional, default to false)
     * @param pendingOnly  (optional, default to false)
     * @param filterAssetId  (optional)
     * @param withStatusInfo  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexdefInputDataIndexDefinitionIdGetCall(@javax.annotation.Nonnull String indexDefinitionId, @javax.annotation.Nullable OffsetDateTime time, @javax.annotation.Nullable Boolean enabledOnly, @javax.annotation.Nullable Boolean pendingOnly, @javax.annotation.Nullable String filterAssetId, @javax.annotation.Nullable Boolean withStatusInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/indexdef/input-data/{index_definition_id}"
            .replace("{" + "index_definition_id" + "}", localVarApiClient.escapeString(indexDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (enabledOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled_only", enabledOnly));
        }

        if (pendingOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pending_only", pendingOnly));
        }

        if (filterAssetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_asset_id", filterAssetId));
        }

        if (withStatusInfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_status_info", withStatusInfo));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1IndexdefInputDataIndexDefinitionIdGetValidateBeforeCall(@javax.annotation.Nonnull String indexDefinitionId, @javax.annotation.Nullable OffsetDateTime time, @javax.annotation.Nullable Boolean enabledOnly, @javax.annotation.Nullable Boolean pendingOnly, @javax.annotation.Nullable String filterAssetId, @javax.annotation.Nullable Boolean withStatusInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'indexDefinitionId' is set
        if (indexDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'indexDefinitionId' when calling v1IndexdefInputDataIndexDefinitionIdGet(Async)");
        }

        return v1IndexdefInputDataIndexDefinitionIdGetCall(indexDefinitionId, time, enabledOnly, pendingOnly, filterAssetId, withStatusInfo, _callback);

    }

    /**
     * Returns data inputs for certain index definition and time
     * 
     * @param indexDefinitionId  (required)
     * @param time  (optional)
     * @param enabledOnly  (optional, default to false)
     * @param pendingOnly  (optional, default to false)
     * @param filterAssetId  (optional)
     * @param withStatusInfo  (optional, default to false)
     * @return List&lt;IndexesIndexDefinitionSnapshotEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<IndexesIndexDefinitionSnapshotEntry> v1IndexdefInputDataIndexDefinitionIdGet(@javax.annotation.Nonnull String indexDefinitionId, @javax.annotation.Nullable OffsetDateTime time, @javax.annotation.Nullable Boolean enabledOnly, @javax.annotation.Nullable Boolean pendingOnly, @javax.annotation.Nullable String filterAssetId, @javax.annotation.Nullable Boolean withStatusInfo) throws ApiException {
        ApiResponse<List<IndexesIndexDefinitionSnapshotEntry>> localVarResp = v1IndexdefInputDataIndexDefinitionIdGetWithHttpInfo(indexDefinitionId, time, enabledOnly, pendingOnly, filterAssetId, withStatusInfo);
        return localVarResp.getData();
    }

    /**
     * Returns data inputs for certain index definition and time
     * 
     * @param indexDefinitionId  (required)
     * @param time  (optional)
     * @param enabledOnly  (optional, default to false)
     * @param pendingOnly  (optional, default to false)
     * @param filterAssetId  (optional)
     * @param withStatusInfo  (optional, default to false)
     * @return ApiResponse&lt;List&lt;IndexesIndexDefinitionSnapshotEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IndexesIndexDefinitionSnapshotEntry>> v1IndexdefInputDataIndexDefinitionIdGetWithHttpInfo(@javax.annotation.Nonnull String indexDefinitionId, @javax.annotation.Nullable OffsetDateTime time, @javax.annotation.Nullable Boolean enabledOnly, @javax.annotation.Nullable Boolean pendingOnly, @javax.annotation.Nullable String filterAssetId, @javax.annotation.Nullable Boolean withStatusInfo) throws ApiException {
        okhttp3.Call localVarCall = v1IndexdefInputDataIndexDefinitionIdGetValidateBeforeCall(indexDefinitionId, time, enabledOnly, pendingOnly, filterAssetId, withStatusInfo, null);
        Type localVarReturnType = new TypeToken<List<IndexesIndexDefinitionSnapshotEntry>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns data inputs for certain index definition and time (asynchronously)
     * 
     * @param indexDefinitionId  (required)
     * @param time  (optional)
     * @param enabledOnly  (optional, default to false)
     * @param pendingOnly  (optional, default to false)
     * @param filterAssetId  (optional)
     * @param withStatusInfo  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexdefInputDataIndexDefinitionIdGetAsync(@javax.annotation.Nonnull String indexDefinitionId, @javax.annotation.Nullable OffsetDateTime time, @javax.annotation.Nullable Boolean enabledOnly, @javax.annotation.Nullable Boolean pendingOnly, @javax.annotation.Nullable String filterAssetId, @javax.annotation.Nullable Boolean withStatusInfo, final ApiCallback<List<IndexesIndexDefinitionSnapshotEntry>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1IndexdefInputDataIndexDefinitionIdGetValidateBeforeCall(indexDefinitionId, time, enabledOnly, pendingOnly, filterAssetId, withStatusInfo, _callback);
        Type localVarReturnType = new TypeToken<List<IndexesIndexDefinitionSnapshotEntry>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1IndexdefMultiassetGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexdefMultiassetGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/indexdef/multiasset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1IndexdefMultiassetGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v1IndexdefMultiassetGetCall(_callback);

    }

    /**
     * Get all multi-asset weights
     * 
     * @return List&lt;IndexesIndexMultiAssetWeight&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<IndexesIndexMultiAssetWeight> v1IndexdefMultiassetGet() throws ApiException {
        ApiResponse<List<IndexesIndexMultiAssetWeight>> localVarResp = v1IndexdefMultiassetGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all multi-asset weights
     * 
     * @return ApiResponse&lt;List&lt;IndexesIndexMultiAssetWeight&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IndexesIndexMultiAssetWeight>> v1IndexdefMultiassetGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1IndexdefMultiassetGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<IndexesIndexMultiAssetWeight>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all multi-asset weights (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexdefMultiassetGetAsync(final ApiCallback<List<IndexesIndexMultiAssetWeight>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1IndexdefMultiassetGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<IndexesIndexMultiAssetWeight>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1IndexdefMultiassetIndexIdGet
     * @param indexId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexdefMultiassetIndexIdGetCall(@javax.annotation.Nonnull String indexId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/indexdef/multiasset/{index_id}"
            .replace("{" + "index_id" + "}", localVarApiClient.escapeString(indexId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1IndexdefMultiassetIndexIdGetValidateBeforeCall(@javax.annotation.Nonnull String indexId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'indexId' is set
        if (indexId == null) {
            throw new ApiException("Missing the required parameter 'indexId' when calling v1IndexdefMultiassetIndexIdGet(Async)");
        }

        return v1IndexdefMultiassetIndexIdGetCall(indexId, _callback);

    }

    /**
     * Get multi-asset weights for specific index
     * 
     * @param indexId  (required)
     * @return List&lt;IndexesIndexMultiAssetWeight&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<IndexesIndexMultiAssetWeight> v1IndexdefMultiassetIndexIdGet(@javax.annotation.Nonnull String indexId) throws ApiException {
        ApiResponse<List<IndexesIndexMultiAssetWeight>> localVarResp = v1IndexdefMultiassetIndexIdGetWithHttpInfo(indexId);
        return localVarResp.getData();
    }

    /**
     * Get multi-asset weights for specific index
     * 
     * @param indexId  (required)
     * @return ApiResponse&lt;List&lt;IndexesIndexMultiAssetWeight&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IndexesIndexMultiAssetWeight>> v1IndexdefMultiassetIndexIdGetWithHttpInfo(@javax.annotation.Nonnull String indexId) throws ApiException {
        okhttp3.Call localVarCall = v1IndexdefMultiassetIndexIdGetValidateBeforeCall(indexId, null);
        Type localVarReturnType = new TypeToken<List<IndexesIndexMultiAssetWeight>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get multi-asset weights for specific index (asynchronously)
     * 
     * @param indexId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexdefMultiassetIndexIdGetAsync(@javax.annotation.Nonnull String indexId, final ApiCallback<List<IndexesIndexMultiAssetWeight>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1IndexdefMultiassetIndexIdGetValidateBeforeCall(indexId, _callback);
        Type localVarReturnType = new TypeToken<List<IndexesIndexMultiAssetWeight>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1IndexesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/indexes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1IndexesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v1IndexesGetCall(_callback);

    }

    /**
     * List indexes
     * 
     * @return List&lt;IndexesIndexIdentifier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<IndexesIndexIdentifier> v1IndexesGet() throws ApiException {
        ApiResponse<List<IndexesIndexIdentifier>> localVarResp = v1IndexesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List indexes
     * 
     * @return ApiResponse&lt;List&lt;IndexesIndexIdentifier&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IndexesIndexIdentifier>> v1IndexesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1IndexesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<IndexesIndexIdentifier>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List indexes (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexesGetAsync(final ApiCallback<List<IndexesIndexIdentifier>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1IndexesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<IndexesIndexIdentifier>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1IndexesIndexDefinitionIdCurrentSnapshotGet
     * @param indexDefinitionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexesIndexDefinitionIdCurrentSnapshotGetCall(@javax.annotation.Nonnull String indexDefinitionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/indexes/{index_definition_id}/currentSnapshot"
            .replace("{" + "index_definition_id" + "}", localVarApiClient.escapeString(indexDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1IndexesIndexDefinitionIdCurrentSnapshotGetValidateBeforeCall(@javax.annotation.Nonnull String indexDefinitionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'indexDefinitionId' is set
        if (indexDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'indexDefinitionId' when calling v1IndexesIndexDefinitionIdCurrentSnapshotGet(Async)");
        }

        return v1IndexesIndexDefinitionIdCurrentSnapshotGetCall(indexDefinitionId, _callback);

    }

    /**
     * Current Index Values for index definition
     * 
     * @param indexDefinitionId  (required)
     * @return List&lt;IndexesIndexDefinitionSnapshotEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<IndexesIndexDefinitionSnapshotEntry> v1IndexesIndexDefinitionIdCurrentSnapshotGet(@javax.annotation.Nonnull String indexDefinitionId) throws ApiException {
        ApiResponse<List<IndexesIndexDefinitionSnapshotEntry>> localVarResp = v1IndexesIndexDefinitionIdCurrentSnapshotGetWithHttpInfo(indexDefinitionId);
        return localVarResp.getData();
    }

    /**
     * Current Index Values for index definition
     * 
     * @param indexDefinitionId  (required)
     * @return ApiResponse&lt;List&lt;IndexesIndexDefinitionSnapshotEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IndexesIndexDefinitionSnapshotEntry>> v1IndexesIndexDefinitionIdCurrentSnapshotGetWithHttpInfo(@javax.annotation.Nonnull String indexDefinitionId) throws ApiException {
        okhttp3.Call localVarCall = v1IndexesIndexDefinitionIdCurrentSnapshotGetValidateBeforeCall(indexDefinitionId, null);
        Type localVarReturnType = new TypeToken<List<IndexesIndexDefinitionSnapshotEntry>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Current Index Values for index definition (asynchronously)
     * 
     * @param indexDefinitionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexesIndexDefinitionIdCurrentSnapshotGetAsync(@javax.annotation.Nonnull String indexDefinitionId, final ApiCallback<List<IndexesIndexDefinitionSnapshotEntry>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1IndexesIndexDefinitionIdCurrentSnapshotGetValidateBeforeCall(indexDefinitionId, _callback);
        Type localVarReturnType = new TypeToken<List<IndexesIndexDefinitionSnapshotEntry>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1IndexesIndexDefinitionIdHistorySnapshotGet
     * @param indexDefinitionId  (required)
     * @param time  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexesIndexDefinitionIdHistorySnapshotGetCall(@javax.annotation.Nonnull String indexDefinitionId, @javax.annotation.Nullable OffsetDateTime time, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/indexes/{index_definition_id}/historySnapshot"
            .replace("{" + "index_definition_id" + "}", localVarApiClient.escapeString(indexDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1IndexesIndexDefinitionIdHistorySnapshotGetValidateBeforeCall(@javax.annotation.Nonnull String indexDefinitionId, @javax.annotation.Nullable OffsetDateTime time, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'indexDefinitionId' is set
        if (indexDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'indexDefinitionId' when calling v1IndexesIndexDefinitionIdHistorySnapshotGet(Async)");
        }

        return v1IndexesIndexDefinitionIdHistorySnapshotGetCall(indexDefinitionId, time, _callback);

    }

    /**
     * Historical Index Values for index definition
     * 
     * @param indexDefinitionId  (required)
     * @param time  (optional)
     * @return List&lt;IndexesIndexDefinitionSnapshotEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<IndexesIndexDefinitionSnapshotEntry> v1IndexesIndexDefinitionIdHistorySnapshotGet(@javax.annotation.Nonnull String indexDefinitionId, @javax.annotation.Nullable OffsetDateTime time) throws ApiException {
        ApiResponse<List<IndexesIndexDefinitionSnapshotEntry>> localVarResp = v1IndexesIndexDefinitionIdHistorySnapshotGetWithHttpInfo(indexDefinitionId, time);
        return localVarResp.getData();
    }

    /**
     * Historical Index Values for index definition
     * 
     * @param indexDefinitionId  (required)
     * @param time  (optional)
     * @return ApiResponse&lt;List&lt;IndexesIndexDefinitionSnapshotEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IndexesIndexDefinitionSnapshotEntry>> v1IndexesIndexDefinitionIdHistorySnapshotGetWithHttpInfo(@javax.annotation.Nonnull String indexDefinitionId, @javax.annotation.Nullable OffsetDateTime time) throws ApiException {
        okhttp3.Call localVarCall = v1IndexesIndexDefinitionIdHistorySnapshotGetValidateBeforeCall(indexDefinitionId, time, null);
        Type localVarReturnType = new TypeToken<List<IndexesIndexDefinitionSnapshotEntry>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Historical Index Values for index definition (asynchronously)
     * 
     * @param indexDefinitionId  (required)
     * @param time  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexesIndexDefinitionIdHistorySnapshotGetAsync(@javax.annotation.Nonnull String indexDefinitionId, @javax.annotation.Nullable OffsetDateTime time, final ApiCallback<List<IndexesIndexDefinitionSnapshotEntry>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1IndexesIndexDefinitionIdHistorySnapshotGetValidateBeforeCall(indexDefinitionId, time, _callback);
        Type localVarReturnType = new TypeToken<List<IndexesIndexDefinitionSnapshotEntry>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1IndexesIndexIdCurrentGet
     * @param indexId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexesIndexIdCurrentGetCall(@javax.annotation.Nonnull String indexId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/indexes/{index_id}/current"
            .replace("{" + "index_id" + "}", localVarApiClient.escapeString(indexId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1IndexesIndexIdCurrentGetValidateBeforeCall(@javax.annotation.Nonnull String indexId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'indexId' is set
        if (indexId == null) {
            throw new ApiException("Missing the required parameter 'indexId' when calling v1IndexesIndexIdCurrentGet(Async)");
        }

        return v1IndexesIndexIdCurrentGetCall(indexId, _callback);

    }

    /**
     * Current Index Value
     * 
     * @param indexId  (required)
     * @return IndexesIndexValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public IndexesIndexValue v1IndexesIndexIdCurrentGet(@javax.annotation.Nonnull String indexId) throws ApiException {
        ApiResponse<IndexesIndexValue> localVarResp = v1IndexesIndexIdCurrentGetWithHttpInfo(indexId);
        return localVarResp.getData();
    }

    /**
     * Current Index Value
     * 
     * @param indexId  (required)
     * @return ApiResponse&lt;IndexesIndexValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IndexesIndexValue> v1IndexesIndexIdCurrentGetWithHttpInfo(@javax.annotation.Nonnull String indexId) throws ApiException {
        okhttp3.Call localVarCall = v1IndexesIndexIdCurrentGetValidateBeforeCall(indexId, null);
        Type localVarReturnType = new TypeToken<IndexesIndexValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Current Index Value (asynchronously)
     * 
     * @param indexId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexesIndexIdCurrentGetAsync(@javax.annotation.Nonnull String indexId, final ApiCallback<IndexesIndexValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1IndexesIndexIdCurrentGetValidateBeforeCall(indexId, _callback);
        Type localVarReturnType = new TypeToken<IndexesIndexValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1IndexesIndexIdHistoryGet
     * @param indexId  (required)
     * @param timeStart  (optional)
     * @param timeEnd  (optional)
     * @param limit  (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexesIndexIdHistoryGetCall(@javax.annotation.Nonnull String indexId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/indexes/{index_id}/history"
            .replace("{" + "index_id" + "}", localVarApiClient.escapeString(indexId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_start", timeStart));
        }

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_end", timeEnd));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1IndexesIndexIdHistoryGetValidateBeforeCall(@javax.annotation.Nonnull String indexId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'indexId' is set
        if (indexId == null) {
            throw new ApiException("Missing the required parameter 'indexId' when calling v1IndexesIndexIdHistoryGet(Async)");
        }

        return v1IndexesIndexIdHistoryGetCall(indexId, timeStart, timeEnd, limit, _callback);

    }

    /**
     * Historical Index Value w/Composition
     * 
     * @param indexId  (required)
     * @param timeStart  (optional)
     * @param timeEnd  (optional)
     * @param limit  (optional, default to 100)
     * @return List&lt;IndexesIndexValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<IndexesIndexValue> v1IndexesIndexIdHistoryGet(@javax.annotation.Nonnull String indexId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<List<IndexesIndexValue>> localVarResp = v1IndexesIndexIdHistoryGetWithHttpInfo(indexId, timeStart, timeEnd, limit);
        return localVarResp.getData();
    }

    /**
     * Historical Index Value w/Composition
     * 
     * @param indexId  (required)
     * @param timeStart  (optional)
     * @param timeEnd  (optional)
     * @param limit  (optional, default to 100)
     * @return ApiResponse&lt;List&lt;IndexesIndexValue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IndexesIndexValue>> v1IndexesIndexIdHistoryGetWithHttpInfo(@javax.annotation.Nonnull String indexId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = v1IndexesIndexIdHistoryGetValidateBeforeCall(indexId, timeStart, timeEnd, limit, null);
        Type localVarReturnType = new TypeToken<List<IndexesIndexValue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Historical Index Value w/Composition (asynchronously)
     * 
     * @param indexId  (required)
     * @param timeStart  (optional)
     * @param timeEnd  (optional)
     * @param limit  (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexesIndexIdHistoryGetAsync(@javax.annotation.Nonnull String indexId, @javax.annotation.Nullable OffsetDateTime timeStart, @javax.annotation.Nullable OffsetDateTime timeEnd, @javax.annotation.Nullable Integer limit, final ApiCallback<List<IndexesIndexValue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1IndexesIndexIdHistoryGetValidateBeforeCall(indexId, timeStart, timeEnd, limit, _callback);
        Type localVarReturnType = new TypeToken<List<IndexesIndexValue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1IndexesIndexIdTimeseriesGet
     * @param indexId  (required)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;) (required)
     * @param timeStart Timeseries starting time in ISO 8601 (required)
     * @param timeEnd Timeseries ending time in ISO 8601 (required)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexesIndexIdTimeseriesGetCall(@javax.annotation.Nonnull String indexId, @javax.annotation.Nonnull String periodId, @javax.annotation.Nonnull String timeStart, @javax.annotation.Nonnull String timeEnd, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/indexes/{index_id}/timeseries"
            .replace("{" + "index_id" + "}", localVarApiClient.escapeString(indexId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (periodId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period_id", periodId));
        }

        if (timeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_start", timeStart));
        }

        if (timeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_end", timeEnd));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1IndexesIndexIdTimeseriesGetValidateBeforeCall(@javax.annotation.Nonnull String indexId, @javax.annotation.Nonnull String periodId, @javax.annotation.Nonnull String timeStart, @javax.annotation.Nonnull String timeEnd, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'indexId' is set
        if (indexId == null) {
            throw new ApiException("Missing the required parameter 'indexId' when calling v1IndexesIndexIdTimeseriesGet(Async)");
        }

        // verify the required parameter 'periodId' is set
        if (periodId == null) {
            throw new ApiException("Missing the required parameter 'periodId' when calling v1IndexesIndexIdTimeseriesGet(Async)");
        }

        // verify the required parameter 'timeStart' is set
        if (timeStart == null) {
            throw new ApiException("Missing the required parameter 'timeStart' when calling v1IndexesIndexIdTimeseriesGet(Async)");
        }

        // verify the required parameter 'timeEnd' is set
        if (timeEnd == null) {
            throw new ApiException("Missing the required parameter 'timeEnd' when calling v1IndexesIndexIdTimeseriesGet(Async)");
        }

        return v1IndexesIndexIdTimeseriesGetCall(indexId, periodId, timeStart, timeEnd, limit, _callback);

    }

    /**
     * Timeseries Index Value
     * 
     * @param indexId  (required)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;) (required)
     * @param timeStart Timeseries starting time in ISO 8601 (required)
     * @param timeEnd Timeseries ending time in ISO 8601 (required)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List&lt;IndexesIndexTimeseriesItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<IndexesIndexTimeseriesItem> v1IndexesIndexIdTimeseriesGet(@javax.annotation.Nonnull String indexId, @javax.annotation.Nonnull String periodId, @javax.annotation.Nonnull String timeStart, @javax.annotation.Nonnull String timeEnd, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<List<IndexesIndexTimeseriesItem>> localVarResp = v1IndexesIndexIdTimeseriesGetWithHttpInfo(indexId, periodId, timeStart, timeEnd, limit);
        return localVarResp.getData();
    }

    /**
     * Timeseries Index Value
     * 
     * @param indexId  (required)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;) (required)
     * @param timeStart Timeseries starting time in ISO 8601 (required)
     * @param timeEnd Timeseries ending time in ISO 8601 (required)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return ApiResponse&lt;List&lt;IndexesIndexTimeseriesItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IndexesIndexTimeseriesItem>> v1IndexesIndexIdTimeseriesGetWithHttpInfo(@javax.annotation.Nonnull String indexId, @javax.annotation.Nonnull String periodId, @javax.annotation.Nonnull String timeStart, @javax.annotation.Nonnull String timeEnd, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = v1IndexesIndexIdTimeseriesGetValidateBeforeCall(indexId, periodId, timeStart, timeEnd, limit, null);
        Type localVarReturnType = new TypeToken<List<IndexesIndexTimeseriesItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Timeseries Index Value (asynchronously)
     * 
     * @param indexId  (required)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;) (required)
     * @param timeStart Timeseries starting time in ISO 8601 (required)
     * @param timeEnd Timeseries ending time in ISO 8601 (required)
     * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1IndexesIndexIdTimeseriesGetAsync(@javax.annotation.Nonnull String indexId, @javax.annotation.Nonnull String periodId, @javax.annotation.Nonnull String timeStart, @javax.annotation.Nonnull String timeEnd, @javax.annotation.Nullable Integer limit, final ApiCallback<List<IndexesIndexTimeseriesItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1IndexesIndexIdTimeseriesGetValidateBeforeCall(indexId, periodId, timeStart, timeEnd, limit, _callback);
        Type localVarReturnType = new TypeToken<List<IndexesIndexTimeseriesItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
