note
 description:"[
		Indexes REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class INDEXES_INDEX_TIMESERIES_ITEM




feature --Access

    time_period_start: detachable DATE_TIME
      -- Gets or sets the start time of the time period.
    time_period_end: detachable DATE_TIME
      -- Gets or sets the end time of the time period.
    time_open: detachable DATE_TIME
      -- Gets or sets the time when the value opened.
    time_close: detachable DATE_TIME
      -- Gets or sets the time when the value closed.
    value_open: REAL_64
      -- Gets or sets the opening value.
    value_high: REAL_64
      -- Gets or sets the highest value during the time period.
    value_low: REAL_64
      -- Gets or sets the lowest value during the time period.
    value_close: REAL_64
      -- Gets or sets the closing value.
    value_count: INTEGER_64
      -- Gets or sets the number of values during the time period.

feature -- Change Element

    set_time_period_start (a_name: like time_period_start)
        -- Set 'time_period_start' with 'a_name'.
      do
        time_period_start := a_name
      ensure
        time_period_start_set: time_period_start = a_name
      end

    set_time_period_end (a_name: like time_period_end)
        -- Set 'time_period_end' with 'a_name'.
      do
        time_period_end := a_name
      ensure
        time_period_end_set: time_period_end = a_name
      end

    set_time_open (a_name: like time_open)
        -- Set 'time_open' with 'a_name'.
      do
        time_open := a_name
      ensure
        time_open_set: time_open = a_name
      end

    set_time_close (a_name: like time_close)
        -- Set 'time_close' with 'a_name'.
      do
        time_close := a_name
      ensure
        time_close_set: time_close = a_name
      end

    set_value_open (a_name: like value_open)
        -- Set 'value_open' with 'a_name'.
      do
        value_open := a_name
      ensure
        value_open_set: value_open = a_name
      end

    set_value_high (a_name: like value_high)
        -- Set 'value_high' with 'a_name'.
      do
        value_high := a_name
      ensure
        value_high_set: value_high = a_name
      end

    set_value_low (a_name: like value_low)
        -- Set 'value_low' with 'a_name'.
      do
        value_low := a_name
      ensure
        value_low_set: value_low = a_name
      end

    set_value_close (a_name: like value_close)
        -- Set 'value_close' with 'a_name'.
      do
        value_close := a_name
      ensure
        value_close_set: value_close = a_name
      end

    set_value_count (a_name: like value_count)
        -- Set 'value_count' with 'a_name'.
      do
        value_count := a_name
      ensure
        value_count_set: value_count = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass INDEXES_INDEX_TIMESERIES_ITEM%N")
        if attached time_period_start as l_time_period_start then
          Result.append ("%Ntime_period_start:")
          Result.append (l_time_period_start.out)
          Result.append ("%N")
        end
        if attached time_period_end as l_time_period_end then
          Result.append ("%Ntime_period_end:")
          Result.append (l_time_period_end.out)
          Result.append ("%N")
        end
        if attached time_open as l_time_open then
          Result.append ("%Ntime_open:")
          Result.append (l_time_open.out)
          Result.append ("%N")
        end
        if attached time_close as l_time_close then
          Result.append ("%Ntime_close:")
          Result.append (l_time_close.out)
          Result.append ("%N")
        end
        if attached value_open as l_value_open then
          Result.append ("%Nvalue_open:")
          Result.append (l_value_open.out)
          Result.append ("%N")
        end
        if attached value_high as l_value_high then
          Result.append ("%Nvalue_high:")
          Result.append (l_value_high.out)
          Result.append ("%N")
        end
        if attached value_low as l_value_low then
          Result.append ("%Nvalue_low:")
          Result.append (l_value_low.out)
          Result.append ("%N")
        end
        if attached value_close as l_value_close then
          Result.append ("%Nvalue_close:")
          Result.append (l_value_close.out)
          Result.append ("%N")
        end
        if attached value_count as l_value_count then
          Result.append ("%Nvalue_count:")
          Result.append (l_value_count.out)
          Result.append ("%N")
        end
      end
end

