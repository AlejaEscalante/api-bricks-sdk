note
 description:"[
		CoinAPI Indexes REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	INDEXES_API

inherit

    API_I


feature -- API Access


	v1_indexdef_input_data_index_definition_id_all_get (index_definition_id: STRING_32): detachable LIST [INDEXES_INDEX_DEFINITION_INPUT_DATA]
			-- Returns all data inputs for a specific index definition
			-- 
			-- 
			-- argument: index_definition_id  (required)
			-- 
			-- 
			-- Result LIST [INDEXES_INDEX_DEFINITION_INPUT_DATA]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/indexdef/input-data/{index_definition_id}/all"
			l_path.replace_substring_all ("{"+"index_definition_id"+"}", api_client.url_encode (index_definition_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [INDEXES_INDEX_DEFINITION_INPUT_DATA] } l_response.data ({ LIST [INDEXES_INDEX_DEFINITION_INPUT_DATA] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_indexdef_input_data_index_definition_id_get (index_definition_id: STRING_32; time: DATE_TIME; enabled_only: BOOLEAN; pending_only: BOOLEAN; filter_asset_id: STRING_32; with_status_info: BOOLEAN): detachable LIST [INDEXES_INDEX_DEFINITION_SNAPSHOT_ENTRY]
			-- Returns data inputs for certain index definition and time
			-- 
			-- 
			-- argument: index_definition_id  (required)
			-- 
			-- argument: time  (optional, default to null)
			-- 
			-- argument: enabled_only  (optional, default to false)
			-- 
			-- argument: pending_only  (optional, default to false)
			-- 
			-- argument: filter_asset_id  (optional, default to null)
			-- 
			-- argument: with_status_info  (optional, default to false)
			-- 
			-- 
			-- Result LIST [INDEXES_INDEX_DEFINITION_SNAPSHOT_ENTRY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/indexdef/input-data/{index_definition_id}"
			l_path.replace_substring_all ("{"+"index_definition_id"+"}", api_client.url_encode (index_definition_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time", time));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enabled_only", enabled_only));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pending_only", pending_only));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "filter_asset_id", filter_asset_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "with_status_info", with_status_info));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [INDEXES_INDEX_DEFINITION_SNAPSHOT_ENTRY] } l_response.data ({ LIST [INDEXES_INDEX_DEFINITION_SNAPSHOT_ENTRY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_indexdef_multiasset_get : detachable LIST [INDEXES_INDEX_MULTI_ASSET_WEIGHT]
			-- Get all multi-asset weights
			-- 
			-- 
			-- 
			-- Result LIST [INDEXES_INDEX_MULTI_ASSET_WEIGHT]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/indexdef/multiasset"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [INDEXES_INDEX_MULTI_ASSET_WEIGHT] } l_response.data ({ LIST [INDEXES_INDEX_MULTI_ASSET_WEIGHT] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_indexdef_multiasset_index_id_get (index_id: STRING_32): detachable LIST [INDEXES_INDEX_MULTI_ASSET_WEIGHT]
			-- Get multi-asset weights for specific index
			-- 
			-- 
			-- argument: index_id  (required)
			-- 
			-- 
			-- Result LIST [INDEXES_INDEX_MULTI_ASSET_WEIGHT]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/indexdef/multiasset/{index_id}"
			l_path.replace_substring_all ("{"+"index_id"+"}", api_client.url_encode (index_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [INDEXES_INDEX_MULTI_ASSET_WEIGHT] } l_response.data ({ LIST [INDEXES_INDEX_MULTI_ASSET_WEIGHT] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_indexes_get : detachable LIST [INDEXES_INDEX_IDENTIFIER]
			-- List indexes
			-- 
			-- 
			-- 
			-- Result LIST [INDEXES_INDEX_IDENTIFIER]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/indexes"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [INDEXES_INDEX_IDENTIFIER] } l_response.data ({ LIST [INDEXES_INDEX_IDENTIFIER] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_indexes_index_definition_id_current_snapshot_get (index_definition_id: STRING_32): detachable LIST [INDEXES_INDEX_DEFINITION_SNAPSHOT_ENTRY]
			-- Current Index Values for index definition
			-- 
			-- 
			-- argument: index_definition_id  (required)
			-- 
			-- 
			-- Result LIST [INDEXES_INDEX_DEFINITION_SNAPSHOT_ENTRY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/indexes/{index_definition_id}/currentSnapshot"
			l_path.replace_substring_all ("{"+"index_definition_id"+"}", api_client.url_encode (index_definition_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [INDEXES_INDEX_DEFINITION_SNAPSHOT_ENTRY] } l_response.data ({ LIST [INDEXES_INDEX_DEFINITION_SNAPSHOT_ENTRY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_indexes_index_definition_id_history_snapshot_get (index_definition_id: STRING_32; time: DATE_TIME): detachable LIST [INDEXES_INDEX_DEFINITION_SNAPSHOT_ENTRY]
			-- Historical Index Values for index definition
			-- 
			-- 
			-- argument: index_definition_id  (required)
			-- 
			-- argument: time  (optional, default to null)
			-- 
			-- 
			-- Result LIST [INDEXES_INDEX_DEFINITION_SNAPSHOT_ENTRY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/indexes/{index_definition_id}/historySnapshot"
			l_path.replace_substring_all ("{"+"index_definition_id"+"}", api_client.url_encode (index_definition_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time", time));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [INDEXES_INDEX_DEFINITION_SNAPSHOT_ENTRY] } l_response.data ({ LIST [INDEXES_INDEX_DEFINITION_SNAPSHOT_ENTRY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_indexes_index_id_current_get (index_id: STRING_32): detachable INDEXES_INDEX_VALUE
			-- Current Index Value
			-- 
			-- 
			-- argument: index_id  (required)
			-- 
			-- 
			-- Result INDEXES_INDEX_VALUE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/indexes/{index_id}/current"
			l_path.replace_substring_all ("{"+"index_id"+"}", api_client.url_encode (index_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { INDEXES_INDEX_VALUE } l_response.data ({ INDEXES_INDEX_VALUE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_indexes_index_id_history_get (index_id: STRING_32; time_start: DATE_TIME; time_end: DATE_TIME; limit: INTEGER_32): detachable LIST [INDEXES_INDEX_VALUE]
			-- Historical Index Value w/Composition
			-- 
			-- 
			-- argument: index_id  (required)
			-- 
			-- argument: time_start  (optional, default to null)
			-- 
			-- argument: time_end  (optional, default to null)
			-- 
			-- argument: limit  (optional, default to 100)
			-- 
			-- 
			-- Result LIST [INDEXES_INDEX_VALUE]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/indexes/{index_id}/history"
			l_path.replace_substring_all ("{"+"index_id"+"}", api_client.url_encode (index_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_start", time_start));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_end", time_end));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [INDEXES_INDEX_VALUE] } l_response.data ({ LIST [INDEXES_INDEX_VALUE] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	v1_indexes_index_id_timeseries_get (index_id: STRING_32; period_id: STRING_32; time_start: STRING_32; time_end: STRING_32; limit: INTEGER_32): detachable LIST [INDEXES_INDEX_TIMESERIES_ITEM]
			-- Timeseries Index Value
			-- 
			-- 
			-- argument: index_id  (required)
			-- 
			-- argument: period_id Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;) (required)
			-- 
			-- argument: time_start Timeseries starting time in ISO 8601 (required)
			-- 
			-- argument: time_end Timeseries ending time in ISO 8601 (required)
			-- 
			-- argument: limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
			-- 
			-- 
			-- Result LIST [INDEXES_INDEX_TIMESERIES_ITEM]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1/indexes/{index_id}/timeseries"
			l_path.replace_substring_all ("{"+"index_id"+"}", api_client.url_encode (index_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "period_id", period_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_start", time_start));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "time_end", time_end));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [INDEXES_INDEX_TIMESERIES_ITEM] } l_response.data ({ LIST [INDEXES_INDEX_TIMESERIES_ITEM] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
