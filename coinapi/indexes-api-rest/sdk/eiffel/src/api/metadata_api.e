note
 description:"[
		CoinAPI Indexes REST API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		The version of the OpenAPI document: v1
 	    Contact: support@apibricks.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	METADATA_API

inherit

    API_I


feature -- API Access


	api_metadata_exchanges_exchange_id_get (exchange_id: STRING_32): detachable LIST [METADATA_EXCHANGE]
			-- List all exchanges by exchange_id
			-- 
			-- 
			-- argument: exchange_id The ID of the exchange. (required)
			-- 
			-- 
			-- Result LIST [METADATA_EXCHANGE]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/metadata/exchanges/{exchange_id}"
			l_path.replace_substring_all ("{"+"exchange_id"+"}", api_client.url_encode (exchange_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [METADATA_EXCHANGE] } l_response.data ({ LIST [METADATA_EXCHANGE] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	api_metadata_exchanges_get (filter_exchange_id: STRING_32): detachable LIST [METADATA_EXCHANGE]
			-- List all exchanges
			-- Get a detailed list of exchanges provided by the system.              :::info Properties of the output are providing aggregated information from across all symbols related to the specific exchange. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source. :::
			-- 
			-- argument: filter_exchange_id Comma or semicolon delimited exchange identifiers used to filter response. (optional, eg. &#x60;BITSTAMP;GEMINI&#x60;) (optional, default to null)
			-- 
			-- 
			-- Result LIST [METADATA_EXCHANGE]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/metadata/exchanges"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "filter_exchange_id", filter_exchange_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json", "application/x-msgpack">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"APIKey", "JWT">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [METADATA_EXCHANGE] } l_response.data ({ LIST [METADATA_EXCHANGE] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
