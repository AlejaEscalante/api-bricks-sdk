/*
 * CoinAPI Indexes REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASIndexesApi {
    OASClient client;

    public OASIndexesApi(OASClient client) {
        this.client = client;
    }

    public OASIndexesApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Returns all data inputs for a specific index definition
     * 
     * @param indexDefinitionId  (required)
     * @return List<OASIndexesIndexDefinitionInputData>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASIndexesIndexDefinitionInputData> v1IndexdefInputDataIndexDefinitionIdAllGet(Map<String, Object> params) {
        client.assertNotNull(params.get('indexDefinitionId'), 'indexDefinitionId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASIndexesIndexDefinitionInputData>) client.invoke(
            'GET', '/v1/indexdef/input-data/{index_definition_id}/all', '',
            query, form,
            new Map<String, Object>{
                'index_definition_id' => (String) params.get('indexDefinitionId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASIndexesIndexDefinitionInputData>.class
        );
    }
    /**
     * Returns data inputs for certain index definition and time
     * 
     * @param indexDefinitionId  (required)
     * @param r_time  (optional)
     * @param enabledOnly  (optional, default to false)
     * @param pendingOnly  (optional, default to false)
     * @param filterAssetId  (optional)
     * @param withStatusInfo  (optional, default to false)
     * @return List<OASIndexesIndexDefinitionSnapshotEnt>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASIndexesIndexDefinitionSnapshotEnt> v1IndexdefInputDataIndexDefinitionIdGet(Map<String, Object> params) {
        client.assertNotNull(params.get('indexDefinitionId'), 'indexDefinitionId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('time', (Datetime) params.get('r_time')));
        query.addAll(client.makeParam('enabled_only', (Boolean) params.get('enabledOnly')));
        query.addAll(client.makeParam('pending_only', (Boolean) params.get('pendingOnly')));
        query.addAll(client.makeParam('filter_asset_id', (String) params.get('filterAssetId')));
        query.addAll(client.makeParam('with_status_info', (Boolean) params.get('withStatusInfo')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASIndexesIndexDefinitionSnapshotEnt>) client.invoke(
            'GET', '/v1/indexdef/input-data/{index_definition_id}', '',
            query, form,
            new Map<String, Object>{
                'index_definition_id' => (String) params.get('indexDefinitionId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASIndexesIndexDefinitionSnapshotEnt>.class
        );
    }
    /**
     * Get all multi-asset weights
     * 
     * @return List<OASIndexesIndexMultiAssetWeight>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASIndexesIndexMultiAssetWeight> v1IndexdefMultiassetGet() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASIndexesIndexMultiAssetWeight>) client.invoke(
            'GET', '/v1/indexdef/multiasset', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASIndexesIndexMultiAssetWeight>.class
        );
    }
    /**
     * Get multi-asset weights for specific index
     * 
     * @param indexId  (required)
     * @return List<OASIndexesIndexMultiAssetWeight>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASIndexesIndexMultiAssetWeight> v1IndexdefMultiassetIndexIdGet(Map<String, Object> params) {
        client.assertNotNull(params.get('indexId'), 'indexId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASIndexesIndexMultiAssetWeight>) client.invoke(
            'GET', '/v1/indexdef/multiasset/{index_id}', '',
            query, form,
            new Map<String, Object>{
                'index_id' => (String) params.get('indexId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASIndexesIndexMultiAssetWeight>.class
        );
    }
    /**
     * List indexes
     * 
     * @return List<OASIndexesIndexIdentifier>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASIndexesIndexIdentifier> v1IndexesGet() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASIndexesIndexIdentifier>) client.invoke(
            'GET', '/v1/indexes', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASIndexesIndexIdentifier>.class
        );
    }
    /**
     * Current Index Values for index definition
     * 
     * @param indexDefinitionId  (required)
     * @return List<OASIndexesIndexDefinitionSnapshotEnt>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASIndexesIndexDefinitionSnapshotEnt> v1IndexesIndexDefinitionIdCurrentSnapshotGet(Map<String, Object> params) {
        client.assertNotNull(params.get('indexDefinitionId'), 'indexDefinitionId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASIndexesIndexDefinitionSnapshotEnt>) client.invoke(
            'GET', '/v1/indexes/{index_definition_id}/currentSnapshot', '',
            query, form,
            new Map<String, Object>{
                'index_definition_id' => (String) params.get('indexDefinitionId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASIndexesIndexDefinitionSnapshotEnt>.class
        );
    }
    /**
     * Historical Index Values for index definition
     * 
     * @param indexDefinitionId  (required)
     * @param r_time  (optional)
     * @return List<OASIndexesIndexDefinitionSnapshotEnt>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASIndexesIndexDefinitionSnapshotEnt> v1IndexesIndexDefinitionIdHistorySnapshotGet(Map<String, Object> params) {
        client.assertNotNull(params.get('indexDefinitionId'), 'indexDefinitionId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('time', (Datetime) params.get('r_time')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASIndexesIndexDefinitionSnapshotEnt>) client.invoke(
            'GET', '/v1/indexes/{index_definition_id}/historySnapshot', '',
            query, form,
            new Map<String, Object>{
                'index_definition_id' => (String) params.get('indexDefinitionId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASIndexesIndexDefinitionSnapshotEnt>.class
        );
    }
    /**
     * Current Index Value
     * 
     * @param indexId  (required)
     * @return OASIndexesIndexValue
     * @throws OAS.ApiException if fails to make API call
     */
    public OASIndexesIndexValue v1IndexesIndexIdCurrentGet(Map<String, Object> params) {
        client.assertNotNull(params.get('indexId'), 'indexId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASIndexesIndexValue) client.invoke(
            'GET', '/v1/indexes/{index_id}/current', '',
            query, form,
            new Map<String, Object>{
                'index_id' => (String) params.get('indexId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            OASIndexesIndexValue.class
        );
    }
    /**
     * Historical Index Value w/Composition
     * 
     * @param indexId  (required)
     * @param timeStart  (optional)
     * @param timeEnd  (optional)
     * @param r_limit  (optional, default to 100)
     * @return List<OASIndexesIndexValue>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASIndexesIndexValue> v1IndexesIndexIdHistoryGet(Map<String, Object> params) {
        client.assertNotNull(params.get('indexId'), 'indexId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('time_start', (Datetime) params.get('timeStart')));
        query.addAll(client.makeParam('time_end', (Datetime) params.get('timeEnd')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASIndexesIndexValue>) client.invoke(
            'GET', '/v1/indexes/{index_id}/history', '',
            query, form,
            new Map<String, Object>{
                'index_id' => (String) params.get('indexId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASIndexesIndexValue>.class
        );
    }
    /**
     * Timeseries Index Value
     * 
     * @param indexId  (required)
     * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;) (required)
     * @param timeStart Timeseries starting time in ISO 8601 (required)
     * @param timeEnd Timeseries ending time in ISO 8601 (required)
     * @param r_limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)
     * @return List<OASIndexesIndexTimeseriesItem>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASIndexesIndexTimeseriesItem> v1IndexesIndexIdTimeseriesGet(Map<String, Object> params) {
        client.assertNotNull(params.get('indexId'), 'indexId');
        client.assertNotNull(params.get('periodId'), 'periodId');
        client.assertNotNull(params.get('timeStart'), 'timeStart');
        client.assertNotNull(params.get('timeEnd'), 'timeEnd');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('period_id', (String) params.get('periodId')));
        query.addAll(client.makeParam('time_start', (String) params.get('timeStart')));
        query.addAll(client.makeParam('time_end', (String) params.get('timeEnd')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASIndexesIndexTimeseriesItem>) client.invoke(
            'GET', '/v1/indexes/{index_id}/timeseries', '',
            query, form,
            new Map<String, Object>{
                'index_id' => (String) params.get('indexId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'APIKey', 'JWT' },
            List<OASIndexesIndexTimeseriesItem>.class
        );
    }
}
