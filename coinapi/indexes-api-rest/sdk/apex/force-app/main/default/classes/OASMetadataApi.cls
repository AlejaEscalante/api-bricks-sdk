/*
 * Indexes REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASMetadataApi {
    OASClient client;

    public OASMetadataApi(OASClient client) {
        this.client = client;
    }

    public OASMetadataApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * List all exchanges by exchange_id
     * 
     * @param exchangeId The ID of the exchange. (required)
     * @return List<OASMetadataExchange>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASMetadataExchange> apiMetadataExchangesExchangeIdGet(Map<String, Object> params) {
        client.assertNotNull(params.get('exchangeId'), 'exchangeId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASMetadataExchange>) client.invoke(
            'GET', '/api/metadata/exchanges/{exchange_id}', '',
            query, form,
            new Map<String, Object>{
                'exchange_id' => (String) params.get('exchangeId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<OASMetadataExchange>.class
        );
    }
    /**
     * List all exchanges
     * Get a detailed list of exchanges provided by the system.\r\n            \r\n:::info\r\nProperties of the output are providing aggregated information from across all symbols related to the specific exchange. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source.\r\n:::
     * @param filterExchangeId Comma or semicolon delimited exchange identifiers used to filter response. (optional, eg. &#x60;BITSTAMP;GEMINI&#x60;) (optional)
     * @return List<OASMetadataExchange>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASMetadataExchange> apiMetadataExchangesGet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('filter_exchange_id', (String) params.get('filterExchangeId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASMetadataExchange>) client.invoke(
            'GET', '/api/metadata/exchanges', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json', 'application/x-msgpack' },
            new List<String>(),
            new List<String> { 'ApiKey' },
            List<OASMetadataExchange>.class
        );
    }
}
