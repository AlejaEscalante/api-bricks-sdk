/**
 * CoinAPI Indexes REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.util.Date;
import org.openapitools.client.model.IndexesIndexDefinitionInputData;
import org.openapitools.client.model.IndexesIndexDefinitionSnapshotEntry;
import org.openapitools.client.model.IndexesIndexIdentifier;
import org.openapitools.client.model.IndexesIndexMultiAssetWeight;
import org.openapitools.client.model.IndexesIndexTimeseriesItem;
import org.openapitools.client.model.IndexesIndexValue;
import java.util.*;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class IndexesApi {
  String basePath = "https://rest-api.indexes.coinapi.io";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Returns all data inputs for a specific index definition
  * 
   * @param indexDefinitionId 
   * @return List<IndexesIndexDefinitionInputData>
  */
  public List<IndexesIndexDefinitionInputData> v1IndexdefInputDataIndexDefinitionIdAllGet (String indexDefinitionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'indexDefinitionId' is set
    if (indexDefinitionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexDefinitionId' when calling v1IndexdefInputDataIndexDefinitionIdAllGet",
        new ApiException(400, "Missing the required parameter 'indexDefinitionId' when calling v1IndexdefInputDataIndexDefinitionIdAllGet"));
    }

    // create path and map variables
    String path = "/v1/indexdef/input-data/{index_definition_id}/all".replaceAll("\\{" + "index_definition_id" + "\\}", apiInvoker.escapeString(indexDefinitionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<IndexesIndexDefinitionInputData>) ApiInvoker.deserialize(localVarResponse, "array", IndexesIndexDefinitionInputData.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns all data inputs for a specific index definition
   * 
   * @param indexDefinitionId 
  */
  public void v1IndexdefInputDataIndexDefinitionIdAllGet (String indexDefinitionId, final Response.Listener<List<IndexesIndexDefinitionInputData>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'indexDefinitionId' is set
    if (indexDefinitionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexDefinitionId' when calling v1IndexdefInputDataIndexDefinitionIdAllGet",
        new ApiException(400, "Missing the required parameter 'indexDefinitionId' when calling v1IndexdefInputDataIndexDefinitionIdAllGet"));
    }

    // create path and map variables
    String path = "/v1/indexdef/input-data/{index_definition_id}/all".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_definition_id" + "\\}", apiInvoker.escapeString(indexDefinitionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<IndexesIndexDefinitionInputData>) ApiInvoker.deserialize(localVarResponse,  "array", IndexesIndexDefinitionInputData.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns data inputs for certain index definition and time
  * 
   * @param indexDefinitionId 
   * @param time 
   * @param enabledOnly 
   * @param pendingOnly 
   * @param filterAssetId 
   * @param withStatusInfo 
   * @return List<IndexesIndexDefinitionSnapshotEntry>
  */
  public List<IndexesIndexDefinitionSnapshotEntry> v1IndexdefInputDataIndexDefinitionIdGet (String indexDefinitionId, Date time, Boolean enabledOnly, Boolean pendingOnly, String filterAssetId, Boolean withStatusInfo) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'indexDefinitionId' is set
    if (indexDefinitionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexDefinitionId' when calling v1IndexdefInputDataIndexDefinitionIdGet",
        new ApiException(400, "Missing the required parameter 'indexDefinitionId' when calling v1IndexdefInputDataIndexDefinitionIdGet"));
    }

    // create path and map variables
    String path = "/v1/indexdef/input-data/{index_definition_id}".replaceAll("\\{" + "index_definition_id" + "\\}", apiInvoker.escapeString(indexDefinitionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time", time));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "enabled_only", enabledOnly));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pending_only", pendingOnly));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_asset_id", filterAssetId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "with_status_info", withStatusInfo));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<IndexesIndexDefinitionSnapshotEntry>) ApiInvoker.deserialize(localVarResponse, "array", IndexesIndexDefinitionSnapshotEntry.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns data inputs for certain index definition and time
   * 
   * @param indexDefinitionId    * @param time    * @param enabledOnly    * @param pendingOnly    * @param filterAssetId    * @param withStatusInfo 
  */
  public void v1IndexdefInputDataIndexDefinitionIdGet (String indexDefinitionId, Date time, Boolean enabledOnly, Boolean pendingOnly, String filterAssetId, Boolean withStatusInfo, final Response.Listener<List<IndexesIndexDefinitionSnapshotEntry>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'indexDefinitionId' is set
    if (indexDefinitionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexDefinitionId' when calling v1IndexdefInputDataIndexDefinitionIdGet",
        new ApiException(400, "Missing the required parameter 'indexDefinitionId' when calling v1IndexdefInputDataIndexDefinitionIdGet"));
    }

    // create path and map variables
    String path = "/v1/indexdef/input-data/{index_definition_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_definition_id" + "\\}", apiInvoker.escapeString(indexDefinitionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "time", time));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "enabled_only", enabledOnly));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pending_only", pendingOnly));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_asset_id", filterAssetId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "with_status_info", withStatusInfo));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<IndexesIndexDefinitionSnapshotEntry>) ApiInvoker.deserialize(localVarResponse,  "array", IndexesIndexDefinitionSnapshotEntry.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all multi-asset weights
  * 
   * @return List<IndexesIndexMultiAssetWeight>
  */
  public List<IndexesIndexMultiAssetWeight> v1IndexdefMultiassetGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/indexdef/multiasset";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<IndexesIndexMultiAssetWeight>) ApiInvoker.deserialize(localVarResponse, "array", IndexesIndexMultiAssetWeight.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all multi-asset weights
   * 

  */
  public void v1IndexdefMultiassetGet (final Response.Listener<List<IndexesIndexMultiAssetWeight>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/indexdef/multiasset".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<IndexesIndexMultiAssetWeight>) ApiInvoker.deserialize(localVarResponse,  "array", IndexesIndexMultiAssetWeight.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get multi-asset weights for specific index
  * 
   * @param indexId 
   * @return List<IndexesIndexMultiAssetWeight>
  */
  public List<IndexesIndexMultiAssetWeight> v1IndexdefMultiassetIndexIdGet (String indexId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'indexId' is set
    if (indexId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexId' when calling v1IndexdefMultiassetIndexIdGet",
        new ApiException(400, "Missing the required parameter 'indexId' when calling v1IndexdefMultiassetIndexIdGet"));
    }

    // create path and map variables
    String path = "/v1/indexdef/multiasset/{index_id}".replaceAll("\\{" + "index_id" + "\\}", apiInvoker.escapeString(indexId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<IndexesIndexMultiAssetWeight>) ApiInvoker.deserialize(localVarResponse, "array", IndexesIndexMultiAssetWeight.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get multi-asset weights for specific index
   * 
   * @param indexId 
  */
  public void v1IndexdefMultiassetIndexIdGet (String indexId, final Response.Listener<List<IndexesIndexMultiAssetWeight>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'indexId' is set
    if (indexId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexId' when calling v1IndexdefMultiassetIndexIdGet",
        new ApiException(400, "Missing the required parameter 'indexId' when calling v1IndexdefMultiassetIndexIdGet"));
    }

    // create path and map variables
    String path = "/v1/indexdef/multiasset/{index_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_id" + "\\}", apiInvoker.escapeString(indexId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<IndexesIndexMultiAssetWeight>) ApiInvoker.deserialize(localVarResponse,  "array", IndexesIndexMultiAssetWeight.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List indexes
  * 
   * @return List<IndexesIndexIdentifier>
  */
  public List<IndexesIndexIdentifier> v1IndexesGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/indexes";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<IndexesIndexIdentifier>) ApiInvoker.deserialize(localVarResponse, "array", IndexesIndexIdentifier.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List indexes
   * 

  */
  public void v1IndexesGet (final Response.Listener<List<IndexesIndexIdentifier>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/indexes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<IndexesIndexIdentifier>) ApiInvoker.deserialize(localVarResponse,  "array", IndexesIndexIdentifier.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Current Index Values for index definition
  * 
   * @param indexDefinitionId 
   * @return List<IndexesIndexDefinitionSnapshotEntry>
  */
  public List<IndexesIndexDefinitionSnapshotEntry> v1IndexesIndexDefinitionIdCurrentSnapshotGet (String indexDefinitionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'indexDefinitionId' is set
    if (indexDefinitionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexDefinitionId' when calling v1IndexesIndexDefinitionIdCurrentSnapshotGet",
        new ApiException(400, "Missing the required parameter 'indexDefinitionId' when calling v1IndexesIndexDefinitionIdCurrentSnapshotGet"));
    }

    // create path and map variables
    String path = "/v1/indexes/{index_definition_id}/currentSnapshot".replaceAll("\\{" + "index_definition_id" + "\\}", apiInvoker.escapeString(indexDefinitionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<IndexesIndexDefinitionSnapshotEntry>) ApiInvoker.deserialize(localVarResponse, "array", IndexesIndexDefinitionSnapshotEntry.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Current Index Values for index definition
   * 
   * @param indexDefinitionId 
  */
  public void v1IndexesIndexDefinitionIdCurrentSnapshotGet (String indexDefinitionId, final Response.Listener<List<IndexesIndexDefinitionSnapshotEntry>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'indexDefinitionId' is set
    if (indexDefinitionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexDefinitionId' when calling v1IndexesIndexDefinitionIdCurrentSnapshotGet",
        new ApiException(400, "Missing the required parameter 'indexDefinitionId' when calling v1IndexesIndexDefinitionIdCurrentSnapshotGet"));
    }

    // create path and map variables
    String path = "/v1/indexes/{index_definition_id}/currentSnapshot".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_definition_id" + "\\}", apiInvoker.escapeString(indexDefinitionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<IndexesIndexDefinitionSnapshotEntry>) ApiInvoker.deserialize(localVarResponse,  "array", IndexesIndexDefinitionSnapshotEntry.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Historical Index Values for index definition
  * 
   * @param indexDefinitionId 
   * @param time 
   * @return List<IndexesIndexDefinitionSnapshotEntry>
  */
  public List<IndexesIndexDefinitionSnapshotEntry> v1IndexesIndexDefinitionIdHistorySnapshotGet (String indexDefinitionId, Date time) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'indexDefinitionId' is set
    if (indexDefinitionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexDefinitionId' when calling v1IndexesIndexDefinitionIdHistorySnapshotGet",
        new ApiException(400, "Missing the required parameter 'indexDefinitionId' when calling v1IndexesIndexDefinitionIdHistorySnapshotGet"));
    }

    // create path and map variables
    String path = "/v1/indexes/{index_definition_id}/historySnapshot".replaceAll("\\{" + "index_definition_id" + "\\}", apiInvoker.escapeString(indexDefinitionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time", time));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<IndexesIndexDefinitionSnapshotEntry>) ApiInvoker.deserialize(localVarResponse, "array", IndexesIndexDefinitionSnapshotEntry.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Historical Index Values for index definition
   * 
   * @param indexDefinitionId    * @param time 
  */
  public void v1IndexesIndexDefinitionIdHistorySnapshotGet (String indexDefinitionId, Date time, final Response.Listener<List<IndexesIndexDefinitionSnapshotEntry>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'indexDefinitionId' is set
    if (indexDefinitionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexDefinitionId' when calling v1IndexesIndexDefinitionIdHistorySnapshotGet",
        new ApiException(400, "Missing the required parameter 'indexDefinitionId' when calling v1IndexesIndexDefinitionIdHistorySnapshotGet"));
    }

    // create path and map variables
    String path = "/v1/indexes/{index_definition_id}/historySnapshot".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_definition_id" + "\\}", apiInvoker.escapeString(indexDefinitionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "time", time));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<IndexesIndexDefinitionSnapshotEntry>) ApiInvoker.deserialize(localVarResponse,  "array", IndexesIndexDefinitionSnapshotEntry.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Current Index Value
  * 
   * @param indexId 
   * @return IndexesIndexValue
  */
  public IndexesIndexValue v1IndexesIndexIdCurrentGet (String indexId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'indexId' is set
    if (indexId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexId' when calling v1IndexesIndexIdCurrentGet",
        new ApiException(400, "Missing the required parameter 'indexId' when calling v1IndexesIndexIdCurrentGet"));
    }

    // create path and map variables
    String path = "/v1/indexes/{index_id}/current".replaceAll("\\{" + "index_id" + "\\}", apiInvoker.escapeString(indexId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (IndexesIndexValue) ApiInvoker.deserialize(localVarResponse, "", IndexesIndexValue.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Current Index Value
   * 
   * @param indexId 
  */
  public void v1IndexesIndexIdCurrentGet (String indexId, final Response.Listener<IndexesIndexValue> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'indexId' is set
    if (indexId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexId' when calling v1IndexesIndexIdCurrentGet",
        new ApiException(400, "Missing the required parameter 'indexId' when calling v1IndexesIndexIdCurrentGet"));
    }

    // create path and map variables
    String path = "/v1/indexes/{index_id}/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_id" + "\\}", apiInvoker.escapeString(indexId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((IndexesIndexValue) ApiInvoker.deserialize(localVarResponse,  "", IndexesIndexValue.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Historical Index Value w/Composition
  * 
   * @param indexId 
   * @param timeStart 
   * @param timeEnd 
   * @param limit 
   * @return List<IndexesIndexValue>
  */
  public List<IndexesIndexValue> v1IndexesIndexIdHistoryGet (String indexId, Date timeStart, Date timeEnd, Integer limit) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'indexId' is set
    if (indexId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexId' when calling v1IndexesIndexIdHistoryGet",
        new ApiException(400, "Missing the required parameter 'indexId' when calling v1IndexesIndexIdHistoryGet"));
    }

    // create path and map variables
    String path = "/v1/indexes/{index_id}/history".replaceAll("\\{" + "index_id" + "\\}", apiInvoker.escapeString(indexId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_start", timeStart));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_end", timeEnd));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<IndexesIndexValue>) ApiInvoker.deserialize(localVarResponse, "array", IndexesIndexValue.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Historical Index Value w/Composition
   * 
   * @param indexId    * @param timeStart    * @param timeEnd    * @param limit 
  */
  public void v1IndexesIndexIdHistoryGet (String indexId, Date timeStart, Date timeEnd, Integer limit, final Response.Listener<List<IndexesIndexValue>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'indexId' is set
    if (indexId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexId' when calling v1IndexesIndexIdHistoryGet",
        new ApiException(400, "Missing the required parameter 'indexId' when calling v1IndexesIndexIdHistoryGet"));
    }

    // create path and map variables
    String path = "/v1/indexes/{index_id}/history".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_id" + "\\}", apiInvoker.escapeString(indexId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_start", timeStart));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_end", timeEnd));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<IndexesIndexValue>) ApiInvoker.deserialize(localVarResponse,  "array", IndexesIndexValue.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Timeseries Index Value
  * 
   * @param indexId 
   * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;)
   * @param timeStart Timeseries starting time in ISO 8601
   * @param timeEnd Timeseries ending time in ISO 8601
   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
   * @return List<IndexesIndexTimeseriesItem>
  */
  public List<IndexesIndexTimeseriesItem> v1IndexesIndexIdTimeseriesGet (String indexId, String periodId, String timeStart, String timeEnd, Integer limit) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'indexId' is set
    if (indexId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexId' when calling v1IndexesIndexIdTimeseriesGet",
        new ApiException(400, "Missing the required parameter 'indexId' when calling v1IndexesIndexIdTimeseriesGet"));
    }
    // verify the required parameter 'periodId' is set
    if (periodId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'periodId' when calling v1IndexesIndexIdTimeseriesGet",
        new ApiException(400, "Missing the required parameter 'periodId' when calling v1IndexesIndexIdTimeseriesGet"));
    }
    // verify the required parameter 'timeStart' is set
    if (timeStart == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'timeStart' when calling v1IndexesIndexIdTimeseriesGet",
        new ApiException(400, "Missing the required parameter 'timeStart' when calling v1IndexesIndexIdTimeseriesGet"));
    }
    // verify the required parameter 'timeEnd' is set
    if (timeEnd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'timeEnd' when calling v1IndexesIndexIdTimeseriesGet",
        new ApiException(400, "Missing the required parameter 'timeEnd' when calling v1IndexesIndexIdTimeseriesGet"));
    }

    // create path and map variables
    String path = "/v1/indexes/{index_id}/timeseries".replaceAll("\\{" + "index_id" + "\\}", apiInvoker.escapeString(indexId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "period_id", periodId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_start", timeStart));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_end", timeEnd));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<IndexesIndexTimeseriesItem>) ApiInvoker.deserialize(localVarResponse, "array", IndexesIndexTimeseriesItem.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Timeseries Index Value
   * 
   * @param indexId    * @param periodId Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;)   * @param timeStart Timeseries starting time in ISO 8601   * @param timeEnd Timeseries ending time in ISO 8601   * @param limit Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request)
  */
  public void v1IndexesIndexIdTimeseriesGet (String indexId, String periodId, String timeStart, String timeEnd, Integer limit, final Response.Listener<List<IndexesIndexTimeseriesItem>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'indexId' is set
    if (indexId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'indexId' when calling v1IndexesIndexIdTimeseriesGet",
        new ApiException(400, "Missing the required parameter 'indexId' when calling v1IndexesIndexIdTimeseriesGet"));
    }
    // verify the required parameter 'periodId' is set
    if (periodId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'periodId' when calling v1IndexesIndexIdTimeseriesGet",
        new ApiException(400, "Missing the required parameter 'periodId' when calling v1IndexesIndexIdTimeseriesGet"));
    }
    // verify the required parameter 'timeStart' is set
    if (timeStart == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'timeStart' when calling v1IndexesIndexIdTimeseriesGet",
        new ApiException(400, "Missing the required parameter 'timeStart' when calling v1IndexesIndexIdTimeseriesGet"));
    }
    // verify the required parameter 'timeEnd' is set
    if (timeEnd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'timeEnd' when calling v1IndexesIndexIdTimeseriesGet",
        new ApiException(400, "Missing the required parameter 'timeEnd' when calling v1IndexesIndexIdTimeseriesGet"));
    }

    // create path and map variables
    String path = "/v1/indexes/{index_id}/timeseries".replaceAll("\\{format\\}","json").replaceAll("\\{" + "index_id" + "\\}", apiInvoker.escapeString(indexId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "period_id", periodId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_start", timeStart));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "time_end", timeEnd));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "APIKey", "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<IndexesIndexTimeseriesItem>) ApiInvoker.deserialize(localVarResponse,  "array", IndexesIndexTimeseriesItem.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
