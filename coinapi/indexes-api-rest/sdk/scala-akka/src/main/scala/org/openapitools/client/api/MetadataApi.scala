/**
 * CoinAPI Indexes REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.Exchange
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object MetadataApi {

  def apply(baseUrl: String = "https://rest-api.indexes.coinapi.io") = new MetadataApi(baseUrl)
}

class MetadataApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : Seq[Exchange] (successful operation)
   * 
   * Available security schemes:
   *   APIKey (apiKey)
   *   JWT (apiKey)
   * 
   * @param exchangeId The ID of the exchange.
   */
  def apiMetadataExchangesExchangeIdGet(exchangeId: String)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Seq[Exchange]] =
    ApiRequest[Seq[Exchange]](ApiMethods.GET, baseUrl, "/api/metadata/exchanges/{exchange_id}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("exchange_id", exchangeId)
      .withSuccessResponse[Seq[Exchange]](200)
      

  /**
   * Get a detailed list of exchanges provided by the system.              :::info Properties of the output are providing aggregated information from across all symbols related to the specific exchange. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source. :::
   * 
   * Expected answers:
   *   code 200 : Seq[Exchange] (successful operation)
   * 
   * Available security schemes:
   *   APIKey (apiKey)
   *   JWT (apiKey)
   * 
   * @param filterExchangeId Comma or semicolon delimited exchange identifiers used to filter response. (optional, eg. `BITSTAMP;GEMINI`)
   */
  def apiMetadataExchangesGet(filterExchangeId: Option[String] = None)(implicit apiKey: ApiKeyValue, apiKey: ApiKeyValue): ApiRequest[Seq[Exchange]] =
    ApiRequest[Seq[Exchange]](ApiMethods.GET, baseUrl, "/api/metadata/exchanges", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withApiKey(apiKey, "Authorization", HEADER)
      .withQueryParam("filter_exchange_id", filterExchangeId)
      .withSuccessResponse[Seq[Exchange]](200)
      



}

