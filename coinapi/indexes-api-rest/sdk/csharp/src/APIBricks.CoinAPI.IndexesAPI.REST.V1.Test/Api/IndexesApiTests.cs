/*
 * CoinAPI Indexes REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using APIBricks.CoinAPI.IndexesAPI.REST.V1.Api;
using APIBricks.CoinAPI.IndexesAPI.REST.V1.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace APIBricks.CoinAPI.IndexesAPI.REST.V1.Test.Api
{
    /// <summary>
    ///  Class for testing IndexesApi
    /// </summary>
    public sealed class IndexesApiTests : ApiTestsBase
    {
        private readonly IIndexesApi _instance;

        public IndexesApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IIndexesApi>();
        }

        /// <summary>
        /// Test V1IndexdefInputDataIndexDefinitionIdAllGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1IndexdefInputDataIndexDefinitionIdAllGetAsyncTest()
        {
            string indexDefinitionId = default!;
            var response = await _instance.V1IndexdefInputDataIndexDefinitionIdAllGetAsync(indexDefinitionId);
            var model = response.Ok();
            Assert.IsType<List<IndexesIndexDefinitionInputData>>(model);
        }

        /// <summary>
        /// Test V1IndexdefInputDataIndexDefinitionIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1IndexdefInputDataIndexDefinitionIdGetAsyncTest()
        {
            string indexDefinitionId = default!;
            Client.Option<DateTime> time = default!;
            Client.Option<bool> enabledOnly = default!;
            Client.Option<bool> pendingOnly = default!;
            Client.Option<string> filterAssetId = default!;
            Client.Option<bool> withStatusInfo = default!;
            var response = await _instance.V1IndexdefInputDataIndexDefinitionIdGetAsync(indexDefinitionId, time, enabledOnly, pendingOnly, filterAssetId, withStatusInfo);
            var model = response.Ok();
            Assert.IsType<List<IndexesIndexDefinitionSnapshotEntry>>(model);
        }

        /// <summary>
        /// Test V1IndexdefMultiassetGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1IndexdefMultiassetGetAsyncTest()
        {
            var response = await _instance.V1IndexdefMultiassetGetAsync();
            var model = response.Ok();
            Assert.IsType<List<IndexesIndexMultiAssetWeight>>(model);
        }

        /// <summary>
        /// Test V1IndexdefMultiassetIndexIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1IndexdefMultiassetIndexIdGetAsyncTest()
        {
            string indexId = default!;
            var response = await _instance.V1IndexdefMultiassetIndexIdGetAsync(indexId);
            var model = response.Ok();
            Assert.IsType<List<IndexesIndexMultiAssetWeight>>(model);
        }

        /// <summary>
        /// Test V1IndexesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1IndexesGetAsyncTest()
        {
            var response = await _instance.V1IndexesGetAsync();
            var model = response.Ok();
            Assert.IsType<List<IndexesIndexIdentifier>>(model);
        }

        /// <summary>
        /// Test V1IndexesIndexDefinitionIdCurrentSnapshotGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1IndexesIndexDefinitionIdCurrentSnapshotGetAsyncTest()
        {
            string indexDefinitionId = default!;
            var response = await _instance.V1IndexesIndexDefinitionIdCurrentSnapshotGetAsync(indexDefinitionId);
            var model = response.Ok();
            Assert.IsType<List<IndexesIndexDefinitionSnapshotEntry>>(model);
        }

        /// <summary>
        /// Test V1IndexesIndexDefinitionIdHistorySnapshotGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1IndexesIndexDefinitionIdHistorySnapshotGetAsyncTest()
        {
            string indexDefinitionId = default!;
            Client.Option<DateTime> time = default!;
            var response = await _instance.V1IndexesIndexDefinitionIdHistorySnapshotGetAsync(indexDefinitionId, time);
            var model = response.Ok();
            Assert.IsType<List<IndexesIndexDefinitionSnapshotEntry>>(model);
        }

        /// <summary>
        /// Test V1IndexesIndexIdCurrentGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1IndexesIndexIdCurrentGetAsyncTest()
        {
            string indexId = default!;
            var response = await _instance.V1IndexesIndexIdCurrentGetAsync(indexId);
            var model = response.Ok();
            Assert.IsType<IndexesIndexValue>(model);
        }

        /// <summary>
        /// Test V1IndexesIndexIdHistoryGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1IndexesIndexIdHistoryGetAsyncTest()
        {
            string indexId = default!;
            Client.Option<DateTime> timeStart = default!;
            Client.Option<DateTime> timeEnd = default!;
            Client.Option<int> limit = default!;
            var response = await _instance.V1IndexesIndexIdHistoryGetAsync(indexId, timeStart, timeEnd, limit);
            var model = response.Ok();
            Assert.IsType<List<IndexesIndexValue>>(model);
        }

        /// <summary>
        /// Test V1IndexesIndexIdTimeseriesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task V1IndexesIndexIdTimeseriesGetAsyncTest()
        {
            string indexId = default!;
            string periodId = default!;
            string timeStart = default!;
            string timeEnd = default!;
            Client.Option<int> limit = default!;
            var response = await _instance.V1IndexesIndexIdTimeseriesGetAsync(indexId, periodId, timeStart, timeEnd, limit);
            var model = response.Ok();
            Assert.IsType<List<IndexesIndexTimeseriesItem>>(model);
        }
    }
}
