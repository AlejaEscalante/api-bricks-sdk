// <auto-generated>
/*
 * CoinAPI Indexes REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.ClientUtils;
using APIBricks.CoinAPI.IndexesAPI.REST.V1.Client;

namespace APIBricks.CoinAPI.IndexesAPI.REST.V1.Model
{
    /// <summary>
    /// Represents a timeseries item with value information.
    /// </summary>
    public partial class IndexesIndexTimeseriesItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IndexesIndexTimeseriesItem" /> class.
        /// </summary>
        /// <param name="timePeriodStart">Gets or sets the start time of the time period.</param>
        /// <param name="timePeriodEnd">Gets or sets the end time of the time period.</param>
        /// <param name="timeOpen">Gets or sets the time when the value opened.</param>
        /// <param name="timeClose">Gets or sets the time when the value closed.</param>
        /// <param name="valueOpen">Gets or sets the opening value.</param>
        /// <param name="valueHigh">Gets or sets the highest value during the time period.</param>
        /// <param name="valueLow">Gets or sets the lowest value during the time period.</param>
        /// <param name="valueClose">Gets or sets the closing value.</param>
        /// <param name="valueCount">Gets or sets the number of values during the time period.</param>
        [JsonConstructor]
        public IndexesIndexTimeseriesItem(Option<DateTime?> timePeriodStart = default, Option<DateTime?> timePeriodEnd = default, Option<DateTime?> timeOpen = default, Option<DateTime?> timeClose = default, Option<double?> valueOpen = default, Option<double?> valueHigh = default, Option<double?> valueLow = default, Option<double?> valueClose = default, Option<long?> valueCount = default)
        {
            TimePeriodStartOption = timePeriodStart;
            TimePeriodEndOption = timePeriodEnd;
            TimeOpenOption = timeOpen;
            TimeCloseOption = timeClose;
            ValueOpenOption = valueOpen;
            ValueHighOption = valueHigh;
            ValueLowOption = valueLow;
            ValueCloseOption = valueClose;
            ValueCountOption = valueCount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of TimePeriodStart
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimePeriodStartOption { get; private set; }

        /// <summary>
        /// Gets or sets the start time of the time period.
        /// </summary>
        /// <value>Gets or sets the start time of the time period.</value>
        [JsonPropertyName("time_period_start")]
        public DateTime? TimePeriodStart { get { return this.TimePeriodStartOption; } set { this.TimePeriodStartOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimePeriodEnd
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimePeriodEndOption { get; private set; }

        /// <summary>
        /// Gets or sets the end time of the time period.
        /// </summary>
        /// <value>Gets or sets the end time of the time period.</value>
        [JsonPropertyName("time_period_end")]
        public DateTime? TimePeriodEnd { get { return this.TimePeriodEndOption; } set { this.TimePeriodEndOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeOpen
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimeOpenOption { get; private set; }

        /// <summary>
        /// Gets or sets the time when the value opened.
        /// </summary>
        /// <value>Gets or sets the time when the value opened.</value>
        [JsonPropertyName("time_open")]
        public DateTime? TimeOpen { get { return this.TimeOpenOption; } set { this.TimeOpenOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeClose
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimeCloseOption { get; private set; }

        /// <summary>
        /// Gets or sets the time when the value closed.
        /// </summary>
        /// <value>Gets or sets the time when the value closed.</value>
        [JsonPropertyName("time_close")]
        public DateTime? TimeClose { get { return this.TimeCloseOption; } set { this.TimeCloseOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValueOpen
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ValueOpenOption { get; private set; }

        /// <summary>
        /// Gets or sets the opening value.
        /// </summary>
        /// <value>Gets or sets the opening value.</value>
        [JsonPropertyName("value_open")]
        public double? ValueOpen { get { return this.ValueOpenOption; } set { this.ValueOpenOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValueHigh
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ValueHighOption { get; private set; }

        /// <summary>
        /// Gets or sets the highest value during the time period.
        /// </summary>
        /// <value>Gets or sets the highest value during the time period.</value>
        [JsonPropertyName("value_high")]
        public double? ValueHigh { get { return this.ValueHighOption; } set { this.ValueHighOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValueLow
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ValueLowOption { get; private set; }

        /// <summary>
        /// Gets or sets the lowest value during the time period.
        /// </summary>
        /// <value>Gets or sets the lowest value during the time period.</value>
        [JsonPropertyName("value_low")]
        public double? ValueLow { get { return this.ValueLowOption; } set { this.ValueLowOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValueClose
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ValueCloseOption { get; private set; }

        /// <summary>
        /// Gets or sets the closing value.
        /// </summary>
        /// <value>Gets or sets the closing value.</value>
        [JsonPropertyName("value_close")]
        public double? ValueClose { get { return this.ValueCloseOption; } set { this.ValueCloseOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValueCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ValueCountOption { get; private set; }

        /// <summary>
        /// Gets or sets the number of values during the time period.
        /// </summary>
        /// <value>Gets or sets the number of values during the time period.</value>
        [JsonPropertyName("value_count")]
        public long? ValueCount { get { return this.ValueCountOption; } set { this.ValueCountOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IndexesIndexTimeseriesItem {\n");
            sb.Append("  TimePeriodStart: ").Append(TimePeriodStart).Append("\n");
            sb.Append("  TimePeriodEnd: ").Append(TimePeriodEnd).Append("\n");
            sb.Append("  TimeOpen: ").Append(TimeOpen).Append("\n");
            sb.Append("  TimeClose: ").Append(TimeClose).Append("\n");
            sb.Append("  ValueOpen: ").Append(ValueOpen).Append("\n");
            sb.Append("  ValueHigh: ").Append(ValueHigh).Append("\n");
            sb.Append("  ValueLow: ").Append(ValueLow).Append("\n");
            sb.Append("  ValueClose: ").Append(ValueClose).Append("\n");
            sb.Append("  ValueCount: ").Append(ValueCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IndexesIndexTimeseriesItem" />
    /// </summary>
    public class IndexesIndexTimeseriesItemJsonConverter : JsonConverter<IndexesIndexTimeseriesItem>
    {
        /// <summary>
        /// The format to use to serialize TimePeriodStart
        /// </summary>
        public static string TimePeriodStartFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize TimePeriodEnd
        /// </summary>
        public static string TimePeriodEndFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize TimeOpen
        /// </summary>
        public static string TimeOpenFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize TimeClose
        /// </summary>
        public static string TimeCloseFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="IndexesIndexTimeseriesItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IndexesIndexTimeseriesItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> timePeriodStart = default;
            Option<DateTime?> timePeriodEnd = default;
            Option<DateTime?> timeOpen = default;
            Option<DateTime?> timeClose = default;
            Option<double?> valueOpen = default;
            Option<double?> valueHigh = default;
            Option<double?> valueLow = default;
            Option<double?> valueClose = default;
            Option<long?> valueCount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "time_period_start":
                            timePeriodStart = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "time_period_end":
                            timePeriodEnd = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "time_open":
                            timeOpen = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "time_close":
                            timeClose = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "value_open":
                            valueOpen = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "value_high":
                            valueHigh = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "value_low":
                            valueLow = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "value_close":
                            valueClose = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "value_count":
                            valueCount = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (timePeriodStart.IsSet && timePeriodStart.Value == null)
                throw new ArgumentNullException(nameof(timePeriodStart), "Property is not nullable for class IndexesIndexTimeseriesItem.");

            if (timePeriodEnd.IsSet && timePeriodEnd.Value == null)
                throw new ArgumentNullException(nameof(timePeriodEnd), "Property is not nullable for class IndexesIndexTimeseriesItem.");

            if (valueCount.IsSet && valueCount.Value == null)
                throw new ArgumentNullException(nameof(valueCount), "Property is not nullable for class IndexesIndexTimeseriesItem.");

            return new IndexesIndexTimeseriesItem(timePeriodStart, timePeriodEnd, timeOpen, timeClose, valueOpen, valueHigh, valueLow, valueClose, valueCount);
        }

        /// <summary>
        /// Serializes a <see cref="IndexesIndexTimeseriesItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="indexesIndexTimeseriesItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IndexesIndexTimeseriesItem indexesIndexTimeseriesItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, indexesIndexTimeseriesItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IndexesIndexTimeseriesItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="indexesIndexTimeseriesItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IndexesIndexTimeseriesItem indexesIndexTimeseriesItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (indexesIndexTimeseriesItem.TimePeriodStartOption.IsSet)
                writer.WriteString("time_period_start", indexesIndexTimeseriesItem.TimePeriodStartOption.Value!.Value.ToString(TimePeriodStartFormat));

            if (indexesIndexTimeseriesItem.TimePeriodEndOption.IsSet)
                writer.WriteString("time_period_end", indexesIndexTimeseriesItem.TimePeriodEndOption.Value!.Value.ToString(TimePeriodEndFormat));

            if (indexesIndexTimeseriesItem.TimeOpenOption.IsSet)
                if (indexesIndexTimeseriesItem.TimeOpenOption.Value != null)
                    writer.WriteString("time_open", indexesIndexTimeseriesItem.TimeOpenOption.Value!.Value.ToString(TimeOpenFormat));
                else
                    writer.WriteNull("time_open");

            if (indexesIndexTimeseriesItem.TimeCloseOption.IsSet)
                if (indexesIndexTimeseriesItem.TimeCloseOption.Value != null)
                    writer.WriteString("time_close", indexesIndexTimeseriesItem.TimeCloseOption.Value!.Value.ToString(TimeCloseFormat));
                else
                    writer.WriteNull("time_close");

            if (indexesIndexTimeseriesItem.ValueOpenOption.IsSet)
                if (indexesIndexTimeseriesItem.ValueOpenOption.Value != null)
                    writer.WriteNumber("value_open", indexesIndexTimeseriesItem.ValueOpenOption.Value!.Value);
                else
                    writer.WriteNull("value_open");

            if (indexesIndexTimeseriesItem.ValueHighOption.IsSet)
                if (indexesIndexTimeseriesItem.ValueHighOption.Value != null)
                    writer.WriteNumber("value_high", indexesIndexTimeseriesItem.ValueHighOption.Value!.Value);
                else
                    writer.WriteNull("value_high");

            if (indexesIndexTimeseriesItem.ValueLowOption.IsSet)
                if (indexesIndexTimeseriesItem.ValueLowOption.Value != null)
                    writer.WriteNumber("value_low", indexesIndexTimeseriesItem.ValueLowOption.Value!.Value);
                else
                    writer.WriteNull("value_low");

            if (indexesIndexTimeseriesItem.ValueCloseOption.IsSet)
                if (indexesIndexTimeseriesItem.ValueCloseOption.Value != null)
                    writer.WriteNumber("value_close", indexesIndexTimeseriesItem.ValueCloseOption.Value!.Value);
                else
                    writer.WriteNull("value_close");

            if (indexesIndexTimeseriesItem.ValueCountOption.IsSet)
                writer.WriteNumber("value_count", indexesIndexTimeseriesItem.ValueCountOption.Value!.Value);
        }
    }
}
