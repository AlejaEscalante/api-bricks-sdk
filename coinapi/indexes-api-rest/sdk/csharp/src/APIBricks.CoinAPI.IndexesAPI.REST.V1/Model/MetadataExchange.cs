// <auto-generated>
/*
 * Indexes REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.ClientUtils;
using APIBricks.CoinAPI.IndexesAPI.REST.V1.Client;

namespace APIBricks.CoinAPI.IndexesAPI.REST.V1.Model
{
    /// <summary>
    /// Represents an exchange.
    /// </summary>
    public partial class MetadataExchange : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataExchange" /> class.
        /// </summary>
        /// <param name="exchangeId">Gets or sets the exchange ID.</param>
        /// <param name="website">Gets or sets the website URL of the exchange.</param>
        /// <param name="name">Gets or sets the name of the exchange.</param>
        [JsonConstructor]
        public MetadataExchange(Option<string?> exchangeId = default, Option<string?> website = default, Option<string?> name = default)
        {
            ExchangeIdOption = exchangeId;
            WebsiteOption = website;
            NameOption = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ExchangeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExchangeIdOption { get; private set; }

        /// <summary>
        /// Gets or sets the exchange ID.
        /// </summary>
        /// <value>Gets or sets the exchange ID.</value>
        [JsonPropertyName("exchange_id")]
        public string? ExchangeId { get { return this.ExchangeIdOption; } set { this.ExchangeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Website
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebsiteOption { get; private set; }

        /// <summary>
        /// Gets or sets the website URL of the exchange.
        /// </summary>
        /// <value>Gets or sets the website URL of the exchange.</value>
        [JsonPropertyName("website")]
        public string? Website { get { return this.WebsiteOption; } set { this.WebsiteOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or sets the name of the exchange.
        /// </summary>
        /// <value>Gets or sets the name of the exchange.</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MetadataExchange {\n");
            sb.Append("  ExchangeId: ").Append(ExchangeId).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MetadataExchange" />
    /// </summary>
    public class MetadataExchangeJsonConverter : JsonConverter<MetadataExchange>
    {
        /// <summary>
        /// Deserializes json to <see cref="MetadataExchange" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MetadataExchange Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> exchangeId = default;
            Option<string?> website = default;
            Option<string?> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "exchange_id":
                            exchangeId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "website":
                            website = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new MetadataExchange(exchangeId, website, name);
        }

        /// <summary>
        /// Serializes a <see cref="MetadataExchange" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="metadataExchange"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MetadataExchange metadataExchange, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, metadataExchange, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MetadataExchange" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="metadataExchange"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MetadataExchange metadataExchange, JsonSerializerOptions jsonSerializerOptions)
        {
            if (metadataExchange.ExchangeIdOption.IsSet)
                if (metadataExchange.ExchangeIdOption.Value != null)
                    writer.WriteString("exchange_id", metadataExchange.ExchangeId);
                else
                    writer.WriteNull("exchange_id");

            if (metadataExchange.WebsiteOption.IsSet)
                if (metadataExchange.WebsiteOption.Value != null)
                    writer.WriteString("website", metadataExchange.Website);
                else
                    writer.WriteNull("website");

            if (metadataExchange.NameOption.IsSet)
                if (metadataExchange.NameOption.Value != null)
                    writer.WriteString("name", metadataExchange.Name);
                else
                    writer.WriteNull("name");
        }
    }
}
