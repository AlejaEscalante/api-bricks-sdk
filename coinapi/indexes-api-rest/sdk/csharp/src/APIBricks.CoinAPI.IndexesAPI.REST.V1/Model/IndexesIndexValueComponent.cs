// <auto-generated>
/*
 * Indexes REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.ClientUtils;
using APIBricks.CoinAPI.IndexesAPI.REST.V1.Client;

namespace APIBricks.CoinAPI.IndexesAPI.REST.V1.Model
{
    /// <summary>
    /// IndexesIndexValueComponent
    /// </summary>
    public partial class IndexesIndexValueComponent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IndexesIndexValueComponent" /> class.
        /// </summary>
        /// <param name="componentId">componentId</param>
        /// <param name="componentValue">componentValue</param>
        [JsonConstructor]
        public IndexesIndexValueComponent(Option<string?> componentId = default, Option<double?> componentValue = default)
        {
            ComponentIdOption = componentId;
            ComponentValueOption = componentValue;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ComponentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ComponentIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ComponentId
        /// </summary>
        [JsonPropertyName("component_id")]
        public string? ComponentId { get { return this.ComponentIdOption; } set { this.ComponentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ComponentValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ComponentValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets ComponentValue
        /// </summary>
        [JsonPropertyName("component_value")]
        public double? ComponentValue { get { return this.ComponentValueOption; } set { this.ComponentValueOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IndexesIndexValueComponent {\n");
            sb.Append("  ComponentId: ").Append(ComponentId).Append("\n");
            sb.Append("  ComponentValue: ").Append(ComponentValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IndexesIndexValueComponent" />
    /// </summary>
    public class IndexesIndexValueComponentJsonConverter : JsonConverter<IndexesIndexValueComponent>
    {
        /// <summary>
        /// Deserializes json to <see cref="IndexesIndexValueComponent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IndexesIndexValueComponent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> componentId = default;
            Option<double?> componentValue = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "component_id":
                            componentId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "component_value":
                            componentValue = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (componentValue.IsSet && componentValue.Value == null)
                throw new ArgumentNullException(nameof(componentValue), "Property is not nullable for class IndexesIndexValueComponent.");

            return new IndexesIndexValueComponent(componentId, componentValue);
        }

        /// <summary>
        /// Serializes a <see cref="IndexesIndexValueComponent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="indexesIndexValueComponent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IndexesIndexValueComponent indexesIndexValueComponent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, indexesIndexValueComponent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IndexesIndexValueComponent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="indexesIndexValueComponent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IndexesIndexValueComponent indexesIndexValueComponent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (indexesIndexValueComponent.ComponentIdOption.IsSet)
                if (indexesIndexValueComponent.ComponentIdOption.Value != null)
                    writer.WriteString("component_id", indexesIndexValueComponent.ComponentId);
                else
                    writer.WriteNull("component_id");

            if (indexesIndexValueComponent.ComponentValueOption.IsSet)
                writer.WriteNumber("component_value", indexesIndexValueComponent.ComponentValueOption.Value!.Value);
        }
    }
}
