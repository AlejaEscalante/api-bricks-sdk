// <auto-generated>
/*
 * CoinAPI Indexes REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.ClientUtils;
using APIBricks.CoinAPI.IndexesAPI.REST.V1.Client;

namespace APIBricks.CoinAPI.IndexesAPI.REST.V1.Model
{
    /// <summary>
    /// IndexesIndexDefinitionInputData
    /// </summary>
    public partial class IndexesIndexDefinitionInputData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IndexesIndexDefinitionInputData" /> class.
        /// </summary>
        /// <param name="exchangeId">exchangeId</param>
        /// <param name="exchangeSymbolId">exchangeSymbolId</param>
        /// <param name="baseAssetId">baseAssetId</param>
        /// <param name="quoteAssetId">quoteAssetId</param>
        /// <param name="beginDate">beginDate</param>
        /// <param name="endDate">endDate</param>
        /// <param name="status">status</param>
        /// <param name="statusInfo">statusInfo</param>
        /// <param name="lastModificationTime">lastModificationTime</param>
        [JsonConstructor]
        public IndexesIndexDefinitionInputData(Option<string?> exchangeId = default, Option<string?> exchangeSymbolId = default, Option<string?> baseAssetId = default, Option<string?> quoteAssetId = default, Option<DateTime?> beginDate = default, Option<DateTime?> endDate = default, Option<string?> status = default, Option<string?> statusInfo = default, Option<DateTime?> lastModificationTime = default)
        {
            ExchangeIdOption = exchangeId;
            ExchangeSymbolIdOption = exchangeSymbolId;
            BaseAssetIdOption = baseAssetId;
            QuoteAssetIdOption = quoteAssetId;
            BeginDateOption = beginDate;
            EndDateOption = endDate;
            StatusOption = status;
            StatusInfoOption = statusInfo;
            LastModificationTimeOption = lastModificationTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ExchangeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExchangeIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExchangeId
        /// </summary>
        [JsonPropertyName("exchangeId")]
        public string? ExchangeId { get { return this.ExchangeIdOption; } set { this.ExchangeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExchangeSymbolId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExchangeSymbolIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExchangeSymbolId
        /// </summary>
        [JsonPropertyName("exchangeSymbolId")]
        public string? ExchangeSymbolId { get { return this.ExchangeSymbolIdOption; } set { this.ExchangeSymbolIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of BaseAssetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BaseAssetIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets BaseAssetId
        /// </summary>
        [JsonPropertyName("baseAssetId")]
        public string? BaseAssetId { get { return this.BaseAssetIdOption; } set { this.BaseAssetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of QuoteAssetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> QuoteAssetIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets QuoteAssetId
        /// </summary>
        [JsonPropertyName("quoteAssetId")]
        public string? QuoteAssetId { get { return this.QuoteAssetIdOption; } set { this.QuoteAssetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of BeginDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> BeginDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets BeginDate
        /// </summary>
        [JsonPropertyName("beginDate")]
        public DateTime? BeginDate { get { return this.BeginDateOption; } set { this.BeginDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> EndDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [JsonPropertyName("endDate")]
        public DateTime? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public string? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of StatusInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets StatusInfo
        /// </summary>
        [JsonPropertyName("statusInfo")]
        public string? StatusInfo { get { return this.StatusInfoOption; } set { this.StatusInfoOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastModificationTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastModificationTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastModificationTime
        /// </summary>
        [JsonPropertyName("lastModificationTime")]
        public DateTime? LastModificationTime { get { return this.LastModificationTimeOption; } set { this.LastModificationTimeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IndexesIndexDefinitionInputData {\n");
            sb.Append("  ExchangeId: ").Append(ExchangeId).Append("\n");
            sb.Append("  ExchangeSymbolId: ").Append(ExchangeSymbolId).Append("\n");
            sb.Append("  BaseAssetId: ").Append(BaseAssetId).Append("\n");
            sb.Append("  QuoteAssetId: ").Append(QuoteAssetId).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusInfo: ").Append(StatusInfo).Append("\n");
            sb.Append("  LastModificationTime: ").Append(LastModificationTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IndexesIndexDefinitionInputData" />
    /// </summary>
    public class IndexesIndexDefinitionInputDataJsonConverter : JsonConverter<IndexesIndexDefinitionInputData>
    {
        /// <summary>
        /// The format to use to serialize BeginDate
        /// </summary>
        public static string BeginDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastModificationTime
        /// </summary>
        public static string LastModificationTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="IndexesIndexDefinitionInputData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IndexesIndexDefinitionInputData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> exchangeId = default;
            Option<string?> exchangeSymbolId = default;
            Option<string?> baseAssetId = default;
            Option<string?> quoteAssetId = default;
            Option<DateTime?> beginDate = default;
            Option<DateTime?> endDate = default;
            Option<string?> status = default;
            Option<string?> statusInfo = default;
            Option<DateTime?> lastModificationTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "exchangeId":
                            exchangeId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "exchangeSymbolId":
                            exchangeSymbolId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "baseAssetId":
                            baseAssetId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "quoteAssetId":
                            quoteAssetId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "beginDate":
                            beginDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "endDate":
                            endDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "statusInfo":
                            statusInfo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "lastModificationTime":
                            lastModificationTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (lastModificationTime.IsSet && lastModificationTime.Value == null)
                throw new ArgumentNullException(nameof(lastModificationTime), "Property is not nullable for class IndexesIndexDefinitionInputData.");

            return new IndexesIndexDefinitionInputData(exchangeId, exchangeSymbolId, baseAssetId, quoteAssetId, beginDate, endDate, status, statusInfo, lastModificationTime);
        }

        /// <summary>
        /// Serializes a <see cref="IndexesIndexDefinitionInputData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="indexesIndexDefinitionInputData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IndexesIndexDefinitionInputData indexesIndexDefinitionInputData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, indexesIndexDefinitionInputData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IndexesIndexDefinitionInputData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="indexesIndexDefinitionInputData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IndexesIndexDefinitionInputData indexesIndexDefinitionInputData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (indexesIndexDefinitionInputData.ExchangeIdOption.IsSet)
                if (indexesIndexDefinitionInputData.ExchangeIdOption.Value != null)
                    writer.WriteString("exchangeId", indexesIndexDefinitionInputData.ExchangeId);
                else
                    writer.WriteNull("exchangeId");

            if (indexesIndexDefinitionInputData.ExchangeSymbolIdOption.IsSet)
                if (indexesIndexDefinitionInputData.ExchangeSymbolIdOption.Value != null)
                    writer.WriteString("exchangeSymbolId", indexesIndexDefinitionInputData.ExchangeSymbolId);
                else
                    writer.WriteNull("exchangeSymbolId");

            if (indexesIndexDefinitionInputData.BaseAssetIdOption.IsSet)
                if (indexesIndexDefinitionInputData.BaseAssetIdOption.Value != null)
                    writer.WriteString("baseAssetId", indexesIndexDefinitionInputData.BaseAssetId);
                else
                    writer.WriteNull("baseAssetId");

            if (indexesIndexDefinitionInputData.QuoteAssetIdOption.IsSet)
                if (indexesIndexDefinitionInputData.QuoteAssetIdOption.Value != null)
                    writer.WriteString("quoteAssetId", indexesIndexDefinitionInputData.QuoteAssetId);
                else
                    writer.WriteNull("quoteAssetId");

            if (indexesIndexDefinitionInputData.BeginDateOption.IsSet)
                if (indexesIndexDefinitionInputData.BeginDateOption.Value != null)
                    writer.WriteString("beginDate", indexesIndexDefinitionInputData.BeginDateOption.Value!.Value.ToString(BeginDateFormat));
                else
                    writer.WriteNull("beginDate");

            if (indexesIndexDefinitionInputData.EndDateOption.IsSet)
                if (indexesIndexDefinitionInputData.EndDateOption.Value != null)
                    writer.WriteString("endDate", indexesIndexDefinitionInputData.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("endDate");

            if (indexesIndexDefinitionInputData.StatusOption.IsSet)
                if (indexesIndexDefinitionInputData.StatusOption.Value != null)
                    writer.WriteString("status", indexesIndexDefinitionInputData.Status);
                else
                    writer.WriteNull("status");

            if (indexesIndexDefinitionInputData.StatusInfoOption.IsSet)
                if (indexesIndexDefinitionInputData.StatusInfoOption.Value != null)
                    writer.WriteString("statusInfo", indexesIndexDefinitionInputData.StatusInfo);
                else
                    writer.WriteNull("statusInfo");

            if (indexesIndexDefinitionInputData.LastModificationTimeOption.IsSet)
                writer.WriteString("lastModificationTime", indexesIndexDefinitionInputData.LastModificationTimeOption.Value!.Value.ToString(LastModificationTimeFormat));
        }
    }
}
