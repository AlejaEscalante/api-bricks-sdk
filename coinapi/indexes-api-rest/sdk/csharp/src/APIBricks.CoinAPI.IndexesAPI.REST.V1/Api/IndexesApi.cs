// <auto-generated>
/*
 * CoinAPI Indexes REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using APIBricks.CoinAPI.IndexesAPI.REST.V1.Client;
using APIBricks.CoinAPI.IndexesAPI.REST.V1.Model;
using System.Diagnostics.CodeAnalysis;

namespace APIBricks.CoinAPI.IndexesAPI.REST.V1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IIndexesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        IndexesApiEvents Events { get; }

        /// <summary>
        /// Returns all data inputs for a specific index definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexDefinitionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexdefInputDataIndexDefinitionIdAllGetApiResponse"/>&gt;</returns>
        Task<IV1IndexdefInputDataIndexDefinitionIdAllGetApiResponse> V1IndexdefInputDataIndexDefinitionIdAllGetAsync(string indexDefinitionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns all data inputs for a specific index definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexDefinitionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexdefInputDataIndexDefinitionIdAllGetApiResponse"/>?&gt;</returns>
        Task<IV1IndexdefInputDataIndexDefinitionIdAllGetApiResponse?> V1IndexdefInputDataIndexDefinitionIdAllGetOrDefaultAsync(string indexDefinitionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns data inputs for certain index definition and time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexDefinitionId"></param>
        /// <param name="time"> (optional)</param>
        /// <param name="enabledOnly"> (optional, default to false)</param>
        /// <param name="pendingOnly"> (optional, default to false)</param>
        /// <param name="filterAssetId"> (optional)</param>
        /// <param name="withStatusInfo"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexdefInputDataIndexDefinitionIdGetApiResponse"/>&gt;</returns>
        Task<IV1IndexdefInputDataIndexDefinitionIdGetApiResponse> V1IndexdefInputDataIndexDefinitionIdGetAsync(string indexDefinitionId, Option<DateTime> time = default, Option<bool> enabledOnly = default, Option<bool> pendingOnly = default, Option<string> filterAssetId = default, Option<bool> withStatusInfo = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns data inputs for certain index definition and time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexDefinitionId"></param>
        /// <param name="time"> (optional)</param>
        /// <param name="enabledOnly"> (optional, default to false)</param>
        /// <param name="pendingOnly"> (optional, default to false)</param>
        /// <param name="filterAssetId"> (optional)</param>
        /// <param name="withStatusInfo"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexdefInputDataIndexDefinitionIdGetApiResponse"/>?&gt;</returns>
        Task<IV1IndexdefInputDataIndexDefinitionIdGetApiResponse?> V1IndexdefInputDataIndexDefinitionIdGetOrDefaultAsync(string indexDefinitionId, Option<DateTime> time = default, Option<bool> enabledOnly = default, Option<bool> pendingOnly = default, Option<string> filterAssetId = default, Option<bool> withStatusInfo = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all multi-asset weights
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexdefMultiassetGetApiResponse"/>&gt;</returns>
        Task<IV1IndexdefMultiassetGetApiResponse> V1IndexdefMultiassetGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all multi-asset weights
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexdefMultiassetGetApiResponse"/>?&gt;</returns>
        Task<IV1IndexdefMultiassetGetApiResponse?> V1IndexdefMultiassetGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get multi-asset weights for specific index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexdefMultiassetIndexIdGetApiResponse"/>&gt;</returns>
        Task<IV1IndexdefMultiassetIndexIdGetApiResponse> V1IndexdefMultiassetIndexIdGetAsync(string indexId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get multi-asset weights for specific index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexdefMultiassetIndexIdGetApiResponse"/>?&gt;</returns>
        Task<IV1IndexdefMultiassetIndexIdGetApiResponse?> V1IndexdefMultiassetIndexIdGetOrDefaultAsync(string indexId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List indexes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesGetApiResponse"/>&gt;</returns>
        Task<IV1IndexesGetApiResponse> V1IndexesGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List indexes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesGetApiResponse"/>?&gt;</returns>
        Task<IV1IndexesGetApiResponse?> V1IndexesGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Current Index Values for index definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexDefinitionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse"/>&gt;</returns>
        Task<IV1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse> V1IndexesIndexDefinitionIdCurrentSnapshotGetAsync(string indexDefinitionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Current Index Values for index definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexDefinitionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse"/>?&gt;</returns>
        Task<IV1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse?> V1IndexesIndexDefinitionIdCurrentSnapshotGetOrDefaultAsync(string indexDefinitionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Historical Index Values for index definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexDefinitionId"></param>
        /// <param name="time"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse"/>&gt;</returns>
        Task<IV1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse> V1IndexesIndexDefinitionIdHistorySnapshotGetAsync(string indexDefinitionId, Option<DateTime> time = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Historical Index Values for index definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexDefinitionId"></param>
        /// <param name="time"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse"/>?&gt;</returns>
        Task<IV1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse?> V1IndexesIndexDefinitionIdHistorySnapshotGetOrDefaultAsync(string indexDefinitionId, Option<DateTime> time = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Current Index Value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexIdCurrentGetApiResponse"/>&gt;</returns>
        Task<IV1IndexesIndexIdCurrentGetApiResponse> V1IndexesIndexIdCurrentGetAsync(string indexId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Current Index Value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexIdCurrentGetApiResponse"/>?&gt;</returns>
        Task<IV1IndexesIndexIdCurrentGetApiResponse?> V1IndexesIndexIdCurrentGetOrDefaultAsync(string indexId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Historical Index Value w/Composition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexId"></param>
        /// <param name="timeStart"> (optional)</param>
        /// <param name="timeEnd"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexIdHistoryGetApiResponse"/>&gt;</returns>
        Task<IV1IndexesIndexIdHistoryGetApiResponse> V1IndexesIndexIdHistoryGetAsync(string indexId, Option<DateTime> timeStart = default, Option<DateTime> timeEnd = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Historical Index Value w/Composition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexId"></param>
        /// <param name="timeStart"> (optional)</param>
        /// <param name="timeEnd"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexIdHistoryGetApiResponse"/>?&gt;</returns>
        Task<IV1IndexesIndexIdHistoryGetApiResponse?> V1IndexesIndexIdHistoryGetOrDefaultAsync(string indexId, Option<DateTime> timeStart = default, Option<DateTime> timeEnd = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Timeseries Index Value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexId"></param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;)</param>
        /// <param name="timeStart">Timeseries starting time in ISO 8601</param>
        /// <param name="timeEnd">Timeseries ending time in ISO 8601</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexIdTimeseriesGetApiResponse"/>&gt;</returns>
        Task<IV1IndexesIndexIdTimeseriesGetApiResponse> V1IndexesIndexIdTimeseriesGetAsync(string indexId, string periodId, string timeStart, string timeEnd, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Timeseries Index Value
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="indexId"></param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;)</param>
        /// <param name="timeStart">Timeseries starting time in ISO 8601</param>
        /// <param name="timeEnd">Timeseries ending time in ISO 8601</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexIdTimeseriesGetApiResponse"/>?&gt;</returns>
        Task<IV1IndexesIndexIdTimeseriesGetApiResponse?> V1IndexesIndexIdTimeseriesGetOrDefaultAsync(string indexId, string periodId, string timeStart, string timeEnd, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IV1IndexdefInputDataIndexDefinitionIdAllGetApiResponse"/>
    /// </summary>
    public interface IV1IndexdefInputDataIndexDefinitionIdAllGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.IApiResponse, IOk<List<IndexesIndexDefinitionInputData>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1IndexdefInputDataIndexDefinitionIdGetApiResponse"/>
    /// </summary>
    public interface IV1IndexdefInputDataIndexDefinitionIdGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.IApiResponse, IOk<List<IndexesIndexDefinitionSnapshotEntry>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1IndexdefMultiassetGetApiResponse"/>
    /// </summary>
    public interface IV1IndexdefMultiassetGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.IApiResponse, IOk<List<IndexesIndexMultiAssetWeight>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1IndexdefMultiassetIndexIdGetApiResponse"/>
    /// </summary>
    public interface IV1IndexdefMultiassetIndexIdGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.IApiResponse, IOk<List<IndexesIndexMultiAssetWeight>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1IndexesGetApiResponse"/>
    /// </summary>
    public interface IV1IndexesGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.IApiResponse, IOk<List<IndexesIndexIdentifier>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse"/>
    /// </summary>
    public interface IV1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.IApiResponse, IOk<List<IndexesIndexDefinitionSnapshotEntry>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse"/>
    /// </summary>
    public interface IV1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.IApiResponse, IOk<List<IndexesIndexDefinitionSnapshotEntry>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1IndexesIndexIdCurrentGetApiResponse"/>
    /// </summary>
    public interface IV1IndexesIndexIdCurrentGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.IApiResponse, IOk<APIBricks.CoinAPI.IndexesAPI.REST.V1.Model.IndexesIndexValue?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1IndexesIndexIdHistoryGetApiResponse"/>
    /// </summary>
    public interface IV1IndexesIndexIdHistoryGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.IApiResponse, IOk<List<IndexesIndexValue>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV1IndexesIndexIdTimeseriesGetApiResponse"/>
    /// </summary>
    public interface IV1IndexesIndexIdTimeseriesGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.IApiResponse, IOk<List<IndexesIndexTimeseriesItem>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class IndexesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1IndexdefInputDataIndexDefinitionIdAllGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1IndexdefInputDataIndexDefinitionIdAllGet;

        internal void ExecuteOnV1IndexdefInputDataIndexDefinitionIdAllGet(IndexesApi.V1IndexdefInputDataIndexDefinitionIdAllGetApiResponse apiResponse)
        {
            OnV1IndexdefInputDataIndexDefinitionIdAllGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1IndexdefInputDataIndexDefinitionIdAllGet(Exception exception)
        {
            OnErrorV1IndexdefInputDataIndexDefinitionIdAllGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1IndexdefInputDataIndexDefinitionIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1IndexdefInputDataIndexDefinitionIdGet;

        internal void ExecuteOnV1IndexdefInputDataIndexDefinitionIdGet(IndexesApi.V1IndexdefInputDataIndexDefinitionIdGetApiResponse apiResponse)
        {
            OnV1IndexdefInputDataIndexDefinitionIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1IndexdefInputDataIndexDefinitionIdGet(Exception exception)
        {
            OnErrorV1IndexdefInputDataIndexDefinitionIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1IndexdefMultiassetGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1IndexdefMultiassetGet;

        internal void ExecuteOnV1IndexdefMultiassetGet(IndexesApi.V1IndexdefMultiassetGetApiResponse apiResponse)
        {
            OnV1IndexdefMultiassetGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1IndexdefMultiassetGet(Exception exception)
        {
            OnErrorV1IndexdefMultiassetGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1IndexdefMultiassetIndexIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1IndexdefMultiassetIndexIdGet;

        internal void ExecuteOnV1IndexdefMultiassetIndexIdGet(IndexesApi.V1IndexdefMultiassetIndexIdGetApiResponse apiResponse)
        {
            OnV1IndexdefMultiassetIndexIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1IndexdefMultiassetIndexIdGet(Exception exception)
        {
            OnErrorV1IndexdefMultiassetIndexIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1IndexesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1IndexesGet;

        internal void ExecuteOnV1IndexesGet(IndexesApi.V1IndexesGetApiResponse apiResponse)
        {
            OnV1IndexesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1IndexesGet(Exception exception)
        {
            OnErrorV1IndexesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1IndexesIndexDefinitionIdCurrentSnapshotGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1IndexesIndexDefinitionIdCurrentSnapshotGet;

        internal void ExecuteOnV1IndexesIndexDefinitionIdCurrentSnapshotGet(IndexesApi.V1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse apiResponse)
        {
            OnV1IndexesIndexDefinitionIdCurrentSnapshotGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1IndexesIndexDefinitionIdCurrentSnapshotGet(Exception exception)
        {
            OnErrorV1IndexesIndexDefinitionIdCurrentSnapshotGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1IndexesIndexDefinitionIdHistorySnapshotGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1IndexesIndexDefinitionIdHistorySnapshotGet;

        internal void ExecuteOnV1IndexesIndexDefinitionIdHistorySnapshotGet(IndexesApi.V1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse apiResponse)
        {
            OnV1IndexesIndexDefinitionIdHistorySnapshotGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1IndexesIndexDefinitionIdHistorySnapshotGet(Exception exception)
        {
            OnErrorV1IndexesIndexDefinitionIdHistorySnapshotGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1IndexesIndexIdCurrentGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1IndexesIndexIdCurrentGet;

        internal void ExecuteOnV1IndexesIndexIdCurrentGet(IndexesApi.V1IndexesIndexIdCurrentGetApiResponse apiResponse)
        {
            OnV1IndexesIndexIdCurrentGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1IndexesIndexIdCurrentGet(Exception exception)
        {
            OnErrorV1IndexesIndexIdCurrentGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1IndexesIndexIdHistoryGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1IndexesIndexIdHistoryGet;

        internal void ExecuteOnV1IndexesIndexIdHistoryGet(IndexesApi.V1IndexesIndexIdHistoryGetApiResponse apiResponse)
        {
            OnV1IndexesIndexIdHistoryGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1IndexesIndexIdHistoryGet(Exception exception)
        {
            OnErrorV1IndexesIndexIdHistoryGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV1IndexesIndexIdTimeseriesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV1IndexesIndexIdTimeseriesGet;

        internal void ExecuteOnV1IndexesIndexIdTimeseriesGet(IndexesApi.V1IndexesIndexIdTimeseriesGetApiResponse apiResponse)
        {
            OnV1IndexesIndexIdTimeseriesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV1IndexesIndexIdTimeseriesGet(Exception exception)
        {
            OnErrorV1IndexesIndexIdTimeseriesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class IndexesApi : IIndexesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<IndexesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public IndexesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="IndexesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IndexesApi(ILogger<IndexesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, IndexesApiEvents indexesApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<IndexesApi>();
            HttpClient = httpClient;
            Events = indexesApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatV1IndexdefInputDataIndexDefinitionIdAllGet(ref string indexDefinitionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexDefinitionId"></param>
        /// <returns></returns>
        private void ValidateV1IndexdefInputDataIndexDefinitionIdAllGet(string indexDefinitionId)
        {
            if (indexDefinitionId == null)
                throw new ArgumentNullException(nameof(indexDefinitionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexDefinitionId"></param>
        private void AfterV1IndexdefInputDataIndexDefinitionIdAllGetDefaultImplementation(IV1IndexdefInputDataIndexDefinitionIdAllGetApiResponse apiResponseLocalVar, string indexDefinitionId)
        {
            bool suppressDefaultLog = false;
            AfterV1IndexdefInputDataIndexDefinitionIdAllGet(ref suppressDefaultLog, apiResponseLocalVar, indexDefinitionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexDefinitionId"></param>
        partial void AfterV1IndexdefInputDataIndexDefinitionIdAllGet(ref bool suppressDefaultLog, IV1IndexdefInputDataIndexDefinitionIdAllGetApiResponse apiResponseLocalVar, string indexDefinitionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexDefinitionId"></param>
        private void OnErrorV1IndexdefInputDataIndexDefinitionIdAllGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string indexDefinitionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1IndexdefInputDataIndexDefinitionIdAllGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexDefinitionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexDefinitionId"></param>
        partial void OnErrorV1IndexdefInputDataIndexDefinitionIdAllGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string indexDefinitionId);

        /// <summary>
        /// Returns all data inputs for a specific index definition 
        /// </summary>
        /// <param name="indexDefinitionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexdefInputDataIndexDefinitionIdAllGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexdefInputDataIndexDefinitionIdAllGetApiResponse?> V1IndexdefInputDataIndexDefinitionIdAllGetOrDefaultAsync(string indexDefinitionId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1IndexdefInputDataIndexDefinitionIdAllGetAsync(indexDefinitionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns all data inputs for a specific index definition 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexDefinitionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexdefInputDataIndexDefinitionIdAllGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexdefInputDataIndexDefinitionIdAllGetApiResponse> V1IndexdefInputDataIndexDefinitionIdAllGetAsync(string indexDefinitionId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1IndexdefInputDataIndexDefinitionIdAllGet(indexDefinitionId);

                FormatV1IndexdefInputDataIndexDefinitionIdAllGet(ref indexDefinitionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/indexdef/input-data/{index_definition_id}/all"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/indexdef/input-data/{index_definition_id}/all");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bindex_definition_id%7D", Uri.EscapeDataString(indexDefinitionId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1IndexdefInputDataIndexDefinitionIdAllGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1IndexdefInputDataIndexDefinitionIdAllGetApiResponse>();

                        V1IndexdefInputDataIndexDefinitionIdAllGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/indexdef/input-data/{index_definition_id}/all", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1IndexdefInputDataIndexDefinitionIdAllGetDefaultImplementation(apiResponseLocalVar, indexDefinitionId);

                        Events.ExecuteOnV1IndexdefInputDataIndexDefinitionIdAllGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1IndexdefInputDataIndexDefinitionIdAllGetDefaultImplementation(e, "/v1/indexdef/input-data/{index_definition_id}/all", uriBuilderLocalVar.Path, indexDefinitionId);
                Events.ExecuteOnErrorV1IndexdefInputDataIndexDefinitionIdAllGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1IndexdefInputDataIndexDefinitionIdAllGetApiResponse"/>
        /// </summary>
        public partial class V1IndexdefInputDataIndexDefinitionIdAllGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.ApiResponse, IV1IndexdefInputDataIndexDefinitionIdAllGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1IndexdefInputDataIndexDefinitionIdAllGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1IndexdefInputDataIndexDefinitionIdAllGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1IndexdefInputDataIndexDefinitionIdAllGetApiResponse(ILogger<V1IndexdefInputDataIndexDefinitionIdAllGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<IndexesIndexDefinitionInputData>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<IndexesIndexDefinitionInputData>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<IndexesIndexDefinitionInputData>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1IndexdefInputDataIndexDefinitionIdGet(ref string indexDefinitionId, ref Option<DateTime> time, ref Option<bool> enabledOnly, ref Option<bool> pendingOnly, ref Option<string> filterAssetId, ref Option<bool> withStatusInfo);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexDefinitionId"></param>
        /// <param name="filterAssetId"></param>
        /// <returns></returns>
        private void ValidateV1IndexdefInputDataIndexDefinitionIdGet(string indexDefinitionId, Option<string> filterAssetId)
        {
            if (indexDefinitionId == null)
                throw new ArgumentNullException(nameof(indexDefinitionId));

            if (filterAssetId.IsSet && filterAssetId.Value == null)
                throw new ArgumentNullException(nameof(filterAssetId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexDefinitionId"></param>
        /// <param name="time"></param>
        /// <param name="enabledOnly"></param>
        /// <param name="pendingOnly"></param>
        /// <param name="filterAssetId"></param>
        /// <param name="withStatusInfo"></param>
        private void AfterV1IndexdefInputDataIndexDefinitionIdGetDefaultImplementation(IV1IndexdefInputDataIndexDefinitionIdGetApiResponse apiResponseLocalVar, string indexDefinitionId, Option<DateTime> time, Option<bool> enabledOnly, Option<bool> pendingOnly, Option<string> filterAssetId, Option<bool> withStatusInfo)
        {
            bool suppressDefaultLog = false;
            AfterV1IndexdefInputDataIndexDefinitionIdGet(ref suppressDefaultLog, apiResponseLocalVar, indexDefinitionId, time, enabledOnly, pendingOnly, filterAssetId, withStatusInfo);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexDefinitionId"></param>
        /// <param name="time"></param>
        /// <param name="enabledOnly"></param>
        /// <param name="pendingOnly"></param>
        /// <param name="filterAssetId"></param>
        /// <param name="withStatusInfo"></param>
        partial void AfterV1IndexdefInputDataIndexDefinitionIdGet(ref bool suppressDefaultLog, IV1IndexdefInputDataIndexDefinitionIdGetApiResponse apiResponseLocalVar, string indexDefinitionId, Option<DateTime> time, Option<bool> enabledOnly, Option<bool> pendingOnly, Option<string> filterAssetId, Option<bool> withStatusInfo);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexDefinitionId"></param>
        /// <param name="time"></param>
        /// <param name="enabledOnly"></param>
        /// <param name="pendingOnly"></param>
        /// <param name="filterAssetId"></param>
        /// <param name="withStatusInfo"></param>
        private void OnErrorV1IndexdefInputDataIndexDefinitionIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string indexDefinitionId, Option<DateTime> time, Option<bool> enabledOnly, Option<bool> pendingOnly, Option<string> filterAssetId, Option<bool> withStatusInfo)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1IndexdefInputDataIndexDefinitionIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexDefinitionId, time, enabledOnly, pendingOnly, filterAssetId, withStatusInfo);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexDefinitionId"></param>
        /// <param name="time"></param>
        /// <param name="enabledOnly"></param>
        /// <param name="pendingOnly"></param>
        /// <param name="filterAssetId"></param>
        /// <param name="withStatusInfo"></param>
        partial void OnErrorV1IndexdefInputDataIndexDefinitionIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string indexDefinitionId, Option<DateTime> time, Option<bool> enabledOnly, Option<bool> pendingOnly, Option<string> filterAssetId, Option<bool> withStatusInfo);

        /// <summary>
        /// Returns data inputs for certain index definition and time 
        /// </summary>
        /// <param name="indexDefinitionId"></param>
        /// <param name="time"> (optional)</param>
        /// <param name="enabledOnly"> (optional, default to false)</param>
        /// <param name="pendingOnly"> (optional, default to false)</param>
        /// <param name="filterAssetId"> (optional)</param>
        /// <param name="withStatusInfo"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexdefInputDataIndexDefinitionIdGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexdefInputDataIndexDefinitionIdGetApiResponse?> V1IndexdefInputDataIndexDefinitionIdGetOrDefaultAsync(string indexDefinitionId, Option<DateTime> time = default, Option<bool> enabledOnly = default, Option<bool> pendingOnly = default, Option<string> filterAssetId = default, Option<bool> withStatusInfo = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1IndexdefInputDataIndexDefinitionIdGetAsync(indexDefinitionId, time, enabledOnly, pendingOnly, filterAssetId, withStatusInfo, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns data inputs for certain index definition and time 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexDefinitionId"></param>
        /// <param name="time"> (optional)</param>
        /// <param name="enabledOnly"> (optional, default to false)</param>
        /// <param name="pendingOnly"> (optional, default to false)</param>
        /// <param name="filterAssetId"> (optional)</param>
        /// <param name="withStatusInfo"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexdefInputDataIndexDefinitionIdGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexdefInputDataIndexDefinitionIdGetApiResponse> V1IndexdefInputDataIndexDefinitionIdGetAsync(string indexDefinitionId, Option<DateTime> time = default, Option<bool> enabledOnly = default, Option<bool> pendingOnly = default, Option<string> filterAssetId = default, Option<bool> withStatusInfo = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1IndexdefInputDataIndexDefinitionIdGet(indexDefinitionId, filterAssetId);

                FormatV1IndexdefInputDataIndexDefinitionIdGet(ref indexDefinitionId, ref time, ref enabledOnly, ref pendingOnly, ref filterAssetId, ref withStatusInfo);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/indexdef/input-data/{index_definition_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/indexdef/input-data/{index_definition_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bindex_definition_id%7D", Uri.EscapeDataString(indexDefinitionId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (time.IsSet)
                        parseQueryStringLocalVar["time"] = ClientUtils.ParameterToString(time.Value);

                    if (enabledOnly.IsSet)
                        parseQueryStringLocalVar["enabled_only"] = ClientUtils.ParameterToString(enabledOnly.Value);

                    if (pendingOnly.IsSet)
                        parseQueryStringLocalVar["pending_only"] = ClientUtils.ParameterToString(pendingOnly.Value);

                    if (filterAssetId.IsSet)
                        parseQueryStringLocalVar["filter_asset_id"] = ClientUtils.ParameterToString(filterAssetId.Value);

                    if (withStatusInfo.IsSet)
                        parseQueryStringLocalVar["with_status_info"] = ClientUtils.ParameterToString(withStatusInfo.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1IndexdefInputDataIndexDefinitionIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1IndexdefInputDataIndexDefinitionIdGetApiResponse>();

                        V1IndexdefInputDataIndexDefinitionIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/indexdef/input-data/{index_definition_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1IndexdefInputDataIndexDefinitionIdGetDefaultImplementation(apiResponseLocalVar, indexDefinitionId, time, enabledOnly, pendingOnly, filterAssetId, withStatusInfo);

                        Events.ExecuteOnV1IndexdefInputDataIndexDefinitionIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1IndexdefInputDataIndexDefinitionIdGetDefaultImplementation(e, "/v1/indexdef/input-data/{index_definition_id}", uriBuilderLocalVar.Path, indexDefinitionId, time, enabledOnly, pendingOnly, filterAssetId, withStatusInfo);
                Events.ExecuteOnErrorV1IndexdefInputDataIndexDefinitionIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1IndexdefInputDataIndexDefinitionIdGetApiResponse"/>
        /// </summary>
        public partial class V1IndexdefInputDataIndexDefinitionIdGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.ApiResponse, IV1IndexdefInputDataIndexDefinitionIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1IndexdefInputDataIndexDefinitionIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1IndexdefInputDataIndexDefinitionIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1IndexdefInputDataIndexDefinitionIdGetApiResponse(ILogger<V1IndexdefInputDataIndexDefinitionIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<IndexesIndexDefinitionSnapshotEntry>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<IndexesIndexDefinitionSnapshotEntry>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<IndexesIndexDefinitionSnapshotEntry>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterV1IndexdefMultiassetGetDefaultImplementation(IV1IndexdefMultiassetGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterV1IndexdefMultiassetGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterV1IndexdefMultiassetGet(ref bool suppressDefaultLog, IV1IndexdefMultiassetGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorV1IndexdefMultiassetGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1IndexdefMultiassetGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorV1IndexdefMultiassetGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get all multi-asset weights 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexdefMultiassetGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexdefMultiassetGetApiResponse?> V1IndexdefMultiassetGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1IndexdefMultiassetGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all multi-asset weights 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexdefMultiassetGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexdefMultiassetGetApiResponse> V1IndexdefMultiassetGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/indexdef/multiasset"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/indexdef/multiasset");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1IndexdefMultiassetGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1IndexdefMultiassetGetApiResponse>();

                        V1IndexdefMultiassetGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/indexdef/multiasset", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1IndexdefMultiassetGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnV1IndexdefMultiassetGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1IndexdefMultiassetGetDefaultImplementation(e, "/v1/indexdef/multiasset", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorV1IndexdefMultiassetGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1IndexdefMultiassetGetApiResponse"/>
        /// </summary>
        public partial class V1IndexdefMultiassetGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.ApiResponse, IV1IndexdefMultiassetGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1IndexdefMultiassetGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1IndexdefMultiassetGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1IndexdefMultiassetGetApiResponse(ILogger<V1IndexdefMultiassetGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<IndexesIndexMultiAssetWeight>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<IndexesIndexMultiAssetWeight>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<IndexesIndexMultiAssetWeight>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1IndexdefMultiassetIndexIdGet(ref string indexId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexId"></param>
        /// <returns></returns>
        private void ValidateV1IndexdefMultiassetIndexIdGet(string indexId)
        {
            if (indexId == null)
                throw new ArgumentNullException(nameof(indexId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexId"></param>
        private void AfterV1IndexdefMultiassetIndexIdGetDefaultImplementation(IV1IndexdefMultiassetIndexIdGetApiResponse apiResponseLocalVar, string indexId)
        {
            bool suppressDefaultLog = false;
            AfterV1IndexdefMultiassetIndexIdGet(ref suppressDefaultLog, apiResponseLocalVar, indexId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexId"></param>
        partial void AfterV1IndexdefMultiassetIndexIdGet(ref bool suppressDefaultLog, IV1IndexdefMultiassetIndexIdGetApiResponse apiResponseLocalVar, string indexId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexId"></param>
        private void OnErrorV1IndexdefMultiassetIndexIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string indexId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1IndexdefMultiassetIndexIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexId"></param>
        partial void OnErrorV1IndexdefMultiassetIndexIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string indexId);

        /// <summary>
        /// Get multi-asset weights for specific index 
        /// </summary>
        /// <param name="indexId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexdefMultiassetIndexIdGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexdefMultiassetIndexIdGetApiResponse?> V1IndexdefMultiassetIndexIdGetOrDefaultAsync(string indexId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1IndexdefMultiassetIndexIdGetAsync(indexId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get multi-asset weights for specific index 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexdefMultiassetIndexIdGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexdefMultiassetIndexIdGetApiResponse> V1IndexdefMultiassetIndexIdGetAsync(string indexId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1IndexdefMultiassetIndexIdGet(indexId);

                FormatV1IndexdefMultiassetIndexIdGet(ref indexId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/indexdef/multiasset/{index_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/indexdef/multiasset/{index_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bindex_id%7D", Uri.EscapeDataString(indexId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1IndexdefMultiassetIndexIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1IndexdefMultiassetIndexIdGetApiResponse>();

                        V1IndexdefMultiassetIndexIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/indexdef/multiasset/{index_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1IndexdefMultiassetIndexIdGetDefaultImplementation(apiResponseLocalVar, indexId);

                        Events.ExecuteOnV1IndexdefMultiassetIndexIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1IndexdefMultiassetIndexIdGetDefaultImplementation(e, "/v1/indexdef/multiasset/{index_id}", uriBuilderLocalVar.Path, indexId);
                Events.ExecuteOnErrorV1IndexdefMultiassetIndexIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1IndexdefMultiassetIndexIdGetApiResponse"/>
        /// </summary>
        public partial class V1IndexdefMultiassetIndexIdGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.ApiResponse, IV1IndexdefMultiassetIndexIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1IndexdefMultiassetIndexIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1IndexdefMultiassetIndexIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1IndexdefMultiassetIndexIdGetApiResponse(ILogger<V1IndexdefMultiassetIndexIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<IndexesIndexMultiAssetWeight>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<IndexesIndexMultiAssetWeight>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<IndexesIndexMultiAssetWeight>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterV1IndexesGetDefaultImplementation(IV1IndexesGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterV1IndexesGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterV1IndexesGet(ref bool suppressDefaultLog, IV1IndexesGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorV1IndexesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1IndexesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorV1IndexesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// List indexes 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexesGetApiResponse?> V1IndexesGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1IndexesGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List indexes 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexesGetApiResponse> V1IndexesGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/indexes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/indexes");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1IndexesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1IndexesGetApiResponse>();

                        V1IndexesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/indexes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1IndexesGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnV1IndexesGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1IndexesGetDefaultImplementation(e, "/v1/indexes", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorV1IndexesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1IndexesGetApiResponse"/>
        /// </summary>
        public partial class V1IndexesGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.ApiResponse, IV1IndexesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1IndexesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1IndexesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1IndexesGetApiResponse(ILogger<V1IndexesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<IndexesIndexIdentifier>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<IndexesIndexIdentifier>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<IndexesIndexIdentifier>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1IndexesIndexDefinitionIdCurrentSnapshotGet(ref string indexDefinitionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexDefinitionId"></param>
        /// <returns></returns>
        private void ValidateV1IndexesIndexDefinitionIdCurrentSnapshotGet(string indexDefinitionId)
        {
            if (indexDefinitionId == null)
                throw new ArgumentNullException(nameof(indexDefinitionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexDefinitionId"></param>
        private void AfterV1IndexesIndexDefinitionIdCurrentSnapshotGetDefaultImplementation(IV1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse apiResponseLocalVar, string indexDefinitionId)
        {
            bool suppressDefaultLog = false;
            AfterV1IndexesIndexDefinitionIdCurrentSnapshotGet(ref suppressDefaultLog, apiResponseLocalVar, indexDefinitionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexDefinitionId"></param>
        partial void AfterV1IndexesIndexDefinitionIdCurrentSnapshotGet(ref bool suppressDefaultLog, IV1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse apiResponseLocalVar, string indexDefinitionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexDefinitionId"></param>
        private void OnErrorV1IndexesIndexDefinitionIdCurrentSnapshotGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string indexDefinitionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1IndexesIndexDefinitionIdCurrentSnapshotGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexDefinitionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexDefinitionId"></param>
        partial void OnErrorV1IndexesIndexDefinitionIdCurrentSnapshotGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string indexDefinitionId);

        /// <summary>
        /// Current Index Values for index definition 
        /// </summary>
        /// <param name="indexDefinitionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse?> V1IndexesIndexDefinitionIdCurrentSnapshotGetOrDefaultAsync(string indexDefinitionId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1IndexesIndexDefinitionIdCurrentSnapshotGetAsync(indexDefinitionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Current Index Values for index definition 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexDefinitionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse> V1IndexesIndexDefinitionIdCurrentSnapshotGetAsync(string indexDefinitionId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1IndexesIndexDefinitionIdCurrentSnapshotGet(indexDefinitionId);

                FormatV1IndexesIndexDefinitionIdCurrentSnapshotGet(ref indexDefinitionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/indexes/{index_definition_id}/currentSnapshot"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/indexes/{index_definition_id}/currentSnapshot");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bindex_definition_id%7D", Uri.EscapeDataString(indexDefinitionId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse>();

                        V1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/indexes/{index_definition_id}/currentSnapshot", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1IndexesIndexDefinitionIdCurrentSnapshotGetDefaultImplementation(apiResponseLocalVar, indexDefinitionId);

                        Events.ExecuteOnV1IndexesIndexDefinitionIdCurrentSnapshotGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1IndexesIndexDefinitionIdCurrentSnapshotGetDefaultImplementation(e, "/v1/indexes/{index_definition_id}/currentSnapshot", uriBuilderLocalVar.Path, indexDefinitionId);
                Events.ExecuteOnErrorV1IndexesIndexDefinitionIdCurrentSnapshotGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse"/>
        /// </summary>
        public partial class V1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.ApiResponse, IV1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse(ILogger<V1IndexesIndexDefinitionIdCurrentSnapshotGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<IndexesIndexDefinitionSnapshotEntry>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<IndexesIndexDefinitionSnapshotEntry>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<IndexesIndexDefinitionSnapshotEntry>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1IndexesIndexDefinitionIdHistorySnapshotGet(ref string indexDefinitionId, ref Option<DateTime> time);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexDefinitionId"></param>
        /// <returns></returns>
        private void ValidateV1IndexesIndexDefinitionIdHistorySnapshotGet(string indexDefinitionId)
        {
            if (indexDefinitionId == null)
                throw new ArgumentNullException(nameof(indexDefinitionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexDefinitionId"></param>
        /// <param name="time"></param>
        private void AfterV1IndexesIndexDefinitionIdHistorySnapshotGetDefaultImplementation(IV1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse apiResponseLocalVar, string indexDefinitionId, Option<DateTime> time)
        {
            bool suppressDefaultLog = false;
            AfterV1IndexesIndexDefinitionIdHistorySnapshotGet(ref suppressDefaultLog, apiResponseLocalVar, indexDefinitionId, time);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexDefinitionId"></param>
        /// <param name="time"></param>
        partial void AfterV1IndexesIndexDefinitionIdHistorySnapshotGet(ref bool suppressDefaultLog, IV1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse apiResponseLocalVar, string indexDefinitionId, Option<DateTime> time);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexDefinitionId"></param>
        /// <param name="time"></param>
        private void OnErrorV1IndexesIndexDefinitionIdHistorySnapshotGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string indexDefinitionId, Option<DateTime> time)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1IndexesIndexDefinitionIdHistorySnapshotGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexDefinitionId, time);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexDefinitionId"></param>
        /// <param name="time"></param>
        partial void OnErrorV1IndexesIndexDefinitionIdHistorySnapshotGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string indexDefinitionId, Option<DateTime> time);

        /// <summary>
        /// Historical Index Values for index definition 
        /// </summary>
        /// <param name="indexDefinitionId"></param>
        /// <param name="time"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse?> V1IndexesIndexDefinitionIdHistorySnapshotGetOrDefaultAsync(string indexDefinitionId, Option<DateTime> time = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1IndexesIndexDefinitionIdHistorySnapshotGetAsync(indexDefinitionId, time, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Historical Index Values for index definition 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexDefinitionId"></param>
        /// <param name="time"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse> V1IndexesIndexDefinitionIdHistorySnapshotGetAsync(string indexDefinitionId, Option<DateTime> time = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1IndexesIndexDefinitionIdHistorySnapshotGet(indexDefinitionId);

                FormatV1IndexesIndexDefinitionIdHistorySnapshotGet(ref indexDefinitionId, ref time);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/indexes/{index_definition_id}/historySnapshot"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/indexes/{index_definition_id}/historySnapshot");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bindex_definition_id%7D", Uri.EscapeDataString(indexDefinitionId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (time.IsSet)
                        parseQueryStringLocalVar["time"] = ClientUtils.ParameterToString(time.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse>();

                        V1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/indexes/{index_definition_id}/historySnapshot", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1IndexesIndexDefinitionIdHistorySnapshotGetDefaultImplementation(apiResponseLocalVar, indexDefinitionId, time);

                        Events.ExecuteOnV1IndexesIndexDefinitionIdHistorySnapshotGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1IndexesIndexDefinitionIdHistorySnapshotGetDefaultImplementation(e, "/v1/indexes/{index_definition_id}/historySnapshot", uriBuilderLocalVar.Path, indexDefinitionId, time);
                Events.ExecuteOnErrorV1IndexesIndexDefinitionIdHistorySnapshotGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse"/>
        /// </summary>
        public partial class V1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.ApiResponse, IV1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse(ILogger<V1IndexesIndexDefinitionIdHistorySnapshotGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<IndexesIndexDefinitionSnapshotEntry>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<IndexesIndexDefinitionSnapshotEntry>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<IndexesIndexDefinitionSnapshotEntry>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1IndexesIndexIdCurrentGet(ref string indexId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexId"></param>
        /// <returns></returns>
        private void ValidateV1IndexesIndexIdCurrentGet(string indexId)
        {
            if (indexId == null)
                throw new ArgumentNullException(nameof(indexId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexId"></param>
        private void AfterV1IndexesIndexIdCurrentGetDefaultImplementation(IV1IndexesIndexIdCurrentGetApiResponse apiResponseLocalVar, string indexId)
        {
            bool suppressDefaultLog = false;
            AfterV1IndexesIndexIdCurrentGet(ref suppressDefaultLog, apiResponseLocalVar, indexId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexId"></param>
        partial void AfterV1IndexesIndexIdCurrentGet(ref bool suppressDefaultLog, IV1IndexesIndexIdCurrentGetApiResponse apiResponseLocalVar, string indexId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexId"></param>
        private void OnErrorV1IndexesIndexIdCurrentGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string indexId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1IndexesIndexIdCurrentGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexId"></param>
        partial void OnErrorV1IndexesIndexIdCurrentGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string indexId);

        /// <summary>
        /// Current Index Value 
        /// </summary>
        /// <param name="indexId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexIdCurrentGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexesIndexIdCurrentGetApiResponse?> V1IndexesIndexIdCurrentGetOrDefaultAsync(string indexId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1IndexesIndexIdCurrentGetAsync(indexId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Current Index Value 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexIdCurrentGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexesIndexIdCurrentGetApiResponse> V1IndexesIndexIdCurrentGetAsync(string indexId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1IndexesIndexIdCurrentGet(indexId);

                FormatV1IndexesIndexIdCurrentGet(ref indexId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/indexes/{index_id}/current"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/indexes/{index_id}/current");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bindex_id%7D", Uri.EscapeDataString(indexId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1IndexesIndexIdCurrentGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1IndexesIndexIdCurrentGetApiResponse>();

                        V1IndexesIndexIdCurrentGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/indexes/{index_id}/current", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1IndexesIndexIdCurrentGetDefaultImplementation(apiResponseLocalVar, indexId);

                        Events.ExecuteOnV1IndexesIndexIdCurrentGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1IndexesIndexIdCurrentGetDefaultImplementation(e, "/v1/indexes/{index_id}/current", uriBuilderLocalVar.Path, indexId);
                Events.ExecuteOnErrorV1IndexesIndexIdCurrentGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1IndexesIndexIdCurrentGetApiResponse"/>
        /// </summary>
        public partial class V1IndexesIndexIdCurrentGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.ApiResponse, IV1IndexesIndexIdCurrentGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1IndexesIndexIdCurrentGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1IndexesIndexIdCurrentGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1IndexesIndexIdCurrentGetApiResponse(ILogger<V1IndexesIndexIdCurrentGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public APIBricks.CoinAPI.IndexesAPI.REST.V1.Model.IndexesIndexValue? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<APIBricks.CoinAPI.IndexesAPI.REST.V1.Model.IndexesIndexValue>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out APIBricks.CoinAPI.IndexesAPI.REST.V1.Model.IndexesIndexValue? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1IndexesIndexIdHistoryGet(ref string indexId, ref Option<DateTime> timeStart, ref Option<DateTime> timeEnd, ref Option<int> limit);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexId"></param>
        /// <returns></returns>
        private void ValidateV1IndexesIndexIdHistoryGet(string indexId)
        {
            if (indexId == null)
                throw new ArgumentNullException(nameof(indexId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="limit"></param>
        private void AfterV1IndexesIndexIdHistoryGetDefaultImplementation(IV1IndexesIndexIdHistoryGetApiResponse apiResponseLocalVar, string indexId, Option<DateTime> timeStart, Option<DateTime> timeEnd, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterV1IndexesIndexIdHistoryGet(ref suppressDefaultLog, apiResponseLocalVar, indexId, timeStart, timeEnd, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="limit"></param>
        partial void AfterV1IndexesIndexIdHistoryGet(ref bool suppressDefaultLog, IV1IndexesIndexIdHistoryGetApiResponse apiResponseLocalVar, string indexId, Option<DateTime> timeStart, Option<DateTime> timeEnd, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="limit"></param>
        private void OnErrorV1IndexesIndexIdHistoryGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string indexId, Option<DateTime> timeStart, Option<DateTime> timeEnd, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1IndexesIndexIdHistoryGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexId, timeStart, timeEnd, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="limit"></param>
        partial void OnErrorV1IndexesIndexIdHistoryGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string indexId, Option<DateTime> timeStart, Option<DateTime> timeEnd, Option<int> limit);

        /// <summary>
        /// Historical Index Value w/Composition 
        /// </summary>
        /// <param name="indexId"></param>
        /// <param name="timeStart"> (optional)</param>
        /// <param name="timeEnd"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexIdHistoryGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexesIndexIdHistoryGetApiResponse?> V1IndexesIndexIdHistoryGetOrDefaultAsync(string indexId, Option<DateTime> timeStart = default, Option<DateTime> timeEnd = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1IndexesIndexIdHistoryGetAsync(indexId, timeStart, timeEnd, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Historical Index Value w/Composition 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexId"></param>
        /// <param name="timeStart"> (optional)</param>
        /// <param name="timeEnd"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexIdHistoryGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexesIndexIdHistoryGetApiResponse> V1IndexesIndexIdHistoryGetAsync(string indexId, Option<DateTime> timeStart = default, Option<DateTime> timeEnd = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1IndexesIndexIdHistoryGet(indexId);

                FormatV1IndexesIndexIdHistoryGet(ref indexId, ref timeStart, ref timeEnd, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/indexes/{index_id}/history"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/indexes/{index_id}/history");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bindex_id%7D", Uri.EscapeDataString(indexId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (timeStart.IsSet)
                        parseQueryStringLocalVar["time_start"] = ClientUtils.ParameterToString(timeStart.Value);

                    if (timeEnd.IsSet)
                        parseQueryStringLocalVar["time_end"] = ClientUtils.ParameterToString(timeEnd.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1IndexesIndexIdHistoryGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1IndexesIndexIdHistoryGetApiResponse>();

                        V1IndexesIndexIdHistoryGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/indexes/{index_id}/history", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1IndexesIndexIdHistoryGetDefaultImplementation(apiResponseLocalVar, indexId, timeStart, timeEnd, limit);

                        Events.ExecuteOnV1IndexesIndexIdHistoryGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1IndexesIndexIdHistoryGetDefaultImplementation(e, "/v1/indexes/{index_id}/history", uriBuilderLocalVar.Path, indexId, timeStart, timeEnd, limit);
                Events.ExecuteOnErrorV1IndexesIndexIdHistoryGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1IndexesIndexIdHistoryGetApiResponse"/>
        /// </summary>
        public partial class V1IndexesIndexIdHistoryGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.ApiResponse, IV1IndexesIndexIdHistoryGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1IndexesIndexIdHistoryGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1IndexesIndexIdHistoryGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1IndexesIndexIdHistoryGetApiResponse(ILogger<V1IndexesIndexIdHistoryGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<IndexesIndexValue>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<IndexesIndexValue>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<IndexesIndexValue>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV1IndexesIndexIdTimeseriesGet(ref string indexId, ref string periodId, ref string timeStart, ref string timeEnd, ref Option<int> limit);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="indexId"></param>
        /// <param name="periodId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <returns></returns>
        private void ValidateV1IndexesIndexIdTimeseriesGet(string indexId, string periodId, string timeStart, string timeEnd)
        {
            if (indexId == null)
                throw new ArgumentNullException(nameof(indexId));

            if (periodId == null)
                throw new ArgumentNullException(nameof(periodId));

            if (timeStart == null)
                throw new ArgumentNullException(nameof(timeStart));

            if (timeEnd == null)
                throw new ArgumentNullException(nameof(timeEnd));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexId"></param>
        /// <param name="periodId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="limit"></param>
        private void AfterV1IndexesIndexIdTimeseriesGetDefaultImplementation(IV1IndexesIndexIdTimeseriesGetApiResponse apiResponseLocalVar, string indexId, string periodId, string timeStart, string timeEnd, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterV1IndexesIndexIdTimeseriesGet(ref suppressDefaultLog, apiResponseLocalVar, indexId, periodId, timeStart, timeEnd, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="indexId"></param>
        /// <param name="periodId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="limit"></param>
        partial void AfterV1IndexesIndexIdTimeseriesGet(ref bool suppressDefaultLog, IV1IndexesIndexIdTimeseriesGetApiResponse apiResponseLocalVar, string indexId, string periodId, string timeStart, string timeEnd, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexId"></param>
        /// <param name="periodId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="limit"></param>
        private void OnErrorV1IndexesIndexIdTimeseriesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string indexId, string periodId, string timeStart, string timeEnd, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV1IndexesIndexIdTimeseriesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, indexId, periodId, timeStart, timeEnd, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="indexId"></param>
        /// <param name="periodId"></param>
        /// <param name="timeStart"></param>
        /// <param name="timeEnd"></param>
        /// <param name="limit"></param>
        partial void OnErrorV1IndexesIndexIdTimeseriesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string indexId, string periodId, string timeStart, string timeEnd, Option<int> limit);

        /// <summary>
        /// Timeseries Index Value 
        /// </summary>
        /// <param name="indexId"></param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;)</param>
        /// <param name="timeStart">Timeseries starting time in ISO 8601</param>
        /// <param name="timeEnd">Timeseries ending time in ISO 8601</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexIdTimeseriesGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexesIndexIdTimeseriesGetApiResponse?> V1IndexesIndexIdTimeseriesGetOrDefaultAsync(string indexId, string periodId, string timeStart, string timeEnd, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V1IndexesIndexIdTimeseriesGetAsync(indexId, periodId, timeStart, timeEnd, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Timeseries Index Value 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexId"></param>
        /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;)</param>
        /// <param name="timeStart">Timeseries starting time in ISO 8601</param>
        /// <param name="timeEnd">Timeseries ending time in ISO 8601</param>
        /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV1IndexesIndexIdTimeseriesGetApiResponse"/>&gt;</returns>
        public async Task<IV1IndexesIndexIdTimeseriesGetApiResponse> V1IndexesIndexIdTimeseriesGetAsync(string indexId, string periodId, string timeStart, string timeEnd, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV1IndexesIndexIdTimeseriesGet(indexId, periodId, timeStart, timeEnd);

                FormatV1IndexesIndexIdTimeseriesGet(ref indexId, ref periodId, ref timeStart, ref timeEnd, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v1/indexes/{index_id}/timeseries"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v1/indexes/{index_id}/timeseries");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bindex_id%7D", Uri.EscapeDataString(indexId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["period_id"] = ClientUtils.ParameterToString(periodId);
                    parseQueryStringLocalVar["time_start"] = ClientUtils.ParameterToString(timeStart);
                    parseQueryStringLocalVar["time_end"] = ClientUtils.ParameterToString(timeEnd);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    ApiKeyToken apiKeyTokenLocalVar2 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar2);
                    apiKeyTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json",
                        "application/x-msgpack"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V1IndexesIndexIdTimeseriesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V1IndexesIndexIdTimeseriesGetApiResponse>();

                        V1IndexesIndexIdTimeseriesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/indexes/{index_id}/timeseries", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV1IndexesIndexIdTimeseriesGetDefaultImplementation(apiResponseLocalVar, indexId, periodId, timeStart, timeEnd, limit);

                        Events.ExecuteOnV1IndexesIndexIdTimeseriesGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV1IndexesIndexIdTimeseriesGetDefaultImplementation(e, "/v1/indexes/{index_id}/timeseries", uriBuilderLocalVar.Path, indexId, periodId, timeStart, timeEnd, limit);
                Events.ExecuteOnErrorV1IndexesIndexIdTimeseriesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V1IndexesIndexIdTimeseriesGetApiResponse"/>
        /// </summary>
        public partial class V1IndexesIndexIdTimeseriesGetApiResponse : APIBricks.CoinAPI.IndexesAPI.REST.V1.Client.ApiResponse, IV1IndexesIndexIdTimeseriesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V1IndexesIndexIdTimeseriesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V1IndexesIndexIdTimeseriesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V1IndexesIndexIdTimeseriesGetApiResponse(ILogger<V1IndexesIndexIdTimeseriesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<IndexesIndexTimeseriesItem>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<IndexesIndexTimeseriesItem>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<IndexesIndexTimeseriesItem>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
