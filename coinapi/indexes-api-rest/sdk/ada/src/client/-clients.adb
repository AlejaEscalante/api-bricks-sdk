--  CoinAPI Indexes REST API
--  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
--
--  The version of the OpenAPI document: v1
--  Contact: support@apibricks.io
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.14.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with Swagger.Streams;
package body .Clients is
   pragma Style_Checks ("-bmrIu");

   Mime_1 : aliased constant String := "application/x-msgpack";
   Mime_2 : aliased constant String := "text/json";
   Media_List_1 : constant Swagger.Mime_List := (
     1 => Swagger.Mime_Json,
   
     2 => Mime_1'Access,
   
     3 => Mime_2'Access,
   
     4 => Swagger.Mime_Text   );


   --  Returns all data inputs for a specific index definition
   procedure V_1Indexdef_Input_Data_Index_Definition_Id_All_Get
      (Client : in out Client_Type;
       Index_Definition_Id : in Swagger.UString;
       Result : out .Models.IndexesIndexDefinitionInputData_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/indexdef/input-data/{index_definition_id}/all");
      URI.Set_Path_Param ("index_definition_id", Index_Definition_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Indexdef_Input_Data_Index_Definition_Id_All_Get;

   --  Returns data inputs for certain index definition and time
   procedure V_1Indexdef_Input_Data_Index_Definition_Id_Get
      (Client : in out Client_Type;
       Index_Definition_Id : in Swagger.UString;
       Time : in Swagger.Nullable_Date;
       Enabled_Only : in Swagger.Nullable_Boolean;
       Pending_Only : in Swagger.Nullable_Boolean;
       Filter_Asset_Id : in Swagger.Nullable_UString;
       With_Status_Info : in Swagger.Nullable_Boolean;
       Result : out .Models.IndexesIndexDefinitionSnapshotEntry_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("time", Time);
      URI.Add_Param ("time", Time);
      URI.Add_Param ("enabled_only", Enabled_Only);
      URI.Add_Param ("pending_only", Pending_Only);
      URI.Add_Param ("filter_asset_id", Filter_Asset_Id);
      URI.Add_Param ("with_status_info", With_Status_Info);
      URI.Set_Path ("/v1/indexdef/input-data/{index_definition_id}");
      URI.Set_Path_Param ("index_definition_id", Index_Definition_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Indexdef_Input_Data_Index_Definition_Id_Get;

   --  Get all multi_asset weights
   procedure V_1Indexdef_Multiasset_Get
      (Client : in out Client_Type;
       Result : out .Models.IndexesIndexMultiAssetWeight_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/indexdef/multiasset");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Indexdef_Multiasset_Get;

   --  Get multi_asset weights for specific index
   procedure V_1Indexdef_Multiasset_Index_Id_Get
      (Client : in out Client_Type;
       Index_Id : in Swagger.UString;
       Result : out .Models.IndexesIndexMultiAssetWeight_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/indexdef/multiasset/{index_id}");
      URI.Set_Path_Param ("index_id", Index_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Indexdef_Multiasset_Index_Id_Get;

   --  List indexes
   procedure V_1Indexes_Get
      (Client : in out Client_Type;
       Result : out .Models.IndexesIndexIdentifier_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/indexes");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Indexes_Get;

   --  Current Index Values for index definition
   procedure V_1Indexes_Index_Definition_Id_Current_Snapshot_Get
      (Client : in out Client_Type;
       Index_Definition_Id : in Swagger.UString;
       Result : out .Models.IndexesIndexDefinitionSnapshotEntry_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/indexes/{index_definition_id}/currentSnapshot");
      URI.Set_Path_Param ("index_definition_id", Index_Definition_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Indexes_Index_Definition_Id_Current_Snapshot_Get;

   --  Historical Index Values for index definition
   procedure V_1Indexes_Index_Definition_Id_History_Snapshot_Get
      (Client : in out Client_Type;
       Index_Definition_Id : in Swagger.UString;
       Time : in Swagger.Nullable_Date;
       Result : out .Models.IndexesIndexDefinitionSnapshotEntry_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("time", Time);
      URI.Add_Param ("time", Time);
      URI.Set_Path ("/v1/indexes/{index_definition_id}/historySnapshot");
      URI.Set_Path_Param ("index_definition_id", Index_Definition_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Indexes_Index_Definition_Id_History_Snapshot_Get;

   --  Current Index Value
   procedure V_1Indexes_Index_Id_Current_Get
      (Client : in out Client_Type;
       Index_Id : in Swagger.UString;
       Result : out .Models.IndexesIndexValue_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/indexes/{index_id}/current");
      URI.Set_Path_Param ("index_id", Index_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Indexes_Index_Id_Current_Get;

   --  Historical Index Value w/Composition
   procedure V_1Indexes_Index_Id_History_Get
      (Client : in out Client_Type;
       Index_Id : in Swagger.UString;
       Time_Start : in Swagger.Nullable_Date;
       Time_End : in Swagger.Nullable_Date;
       Limit : in Swagger.Nullable_Integer;
       Result : out .Models.IndexesIndexValue_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("limit", Limit);
      URI.Set_Path ("/v1/indexes/{index_id}/history");
      URI.Set_Path_Param ("index_id", Index_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Indexes_Index_Id_History_Get;

   --  Timeseries Index Value
   procedure V_1Indexes_Index_Id_Timeseries_Get
      (Client : in out Client_Type;
       Index_Id : in Swagger.UString;
       Period_Id : in Swagger.UString;
       Time_Start : in Swagger.UString;
       Time_End : in Swagger.UString;
       Limit : in Swagger.Nullable_Integer;
       Result : out .Models.IndexesIndexTimeseriesItem_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("period_id", Period_Id);
      URI.Add_Param ("time_start", Time_Start);
      URI.Add_Param ("time_end", Time_End);
      URI.Add_Param ("limit", Limit);
      URI.Set_Path ("/v1/indexes/{index_id}/timeseries");
      URI.Set_Path_Param ("index_id", Index_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Indexes_Index_Id_Timeseries_Get;

   --  List all exchanges by exchange_id
   procedure Api_Metadata_Exchanges_Exchange_Id_Get
      (Client : in out Client_Type;
       Exchange_Id : in Swagger.UString;
       Result : out .Models.MetadataExchange_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/api/metadata/exchanges/{exchange_id}");
      URI.Set_Path_Param ("exchange_id", Exchange_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Api_Metadata_Exchanges_Exchange_Id_Get;

   --  List all exchanges
   --  Get a detailed list of exchanges provided by the system.
   --              
   --  :::info
   --  Properties of the output are providing aggregated information from across all symbols related to the specific exchange. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source.
   --  :::
   procedure Api_Metadata_Exchanges_Get
      (Client : in out Client_Type;
       Filter_Exchange_Id : in Swagger.Nullable_UString;
       Result : out .Models.MetadataExchange_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("filter_exchange_id", Filter_Exchange_Id);
      URI.Set_Path ("/api/metadata/exchanges");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Api_Metadata_Exchanges_Get;

   --  List all periods
   --  Get full list of supported time periods
   --              
   --  ### Available periods
   --              
   --  Time unit | Period identifiers
   --  --------- | -----------
   --  Second | 1SEC, 2SEC, 3SEC, 4SEC, 5SEC, 6SEC, 10SEC, 15SEC, 20SEC, 30SEC
   --  Minute | 1MIN, 2MIN, 3MIN, 4MIN, 5MIN, 6MIN, 10MIN, 15MIN, 20MIN, 30MIN
   --  Hour | 1HRS, 2HRS, 3HRS, 4HRS, 6HRS, 8HRS, 12HRS
   --  Day | 1DAY, 2DAY, 3DAY, 5DAY, 7DAY, 10DAY
   --  Month | 1MTH, 2MTH, 3MTH, 4MTH, 6MTH
   --  Year | 1YRS, 2YRS, 3YRS, 4YRS, 5YRS
   --              
   --  :::tip
   --  You can assume that we will not remove any periods from this response, however, we may add new ones.
   --  :::
   procedure V_1Metadata_Periods_Get
      (Client : in out Client_Type;
       Result : out .Models.MetadataTimeseriesPeriod_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/v1/metadata/periods");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end V_1Metadata_Periods_Get;
end .Clients;
