/*
Indexes REST API

Testing IndexesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_IndexesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IndexesAPIService V1IndexdefInputDataIndexDefinitionIdAllGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var indexDefinitionId string

		resp, httpRes, err := apiClient.IndexesAPI.V1IndexdefInputDataIndexDefinitionIdAllGet(context.Background(), indexDefinitionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IndexesAPIService V1IndexdefInputDataIndexDefinitionIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var indexDefinitionId string

		resp, httpRes, err := apiClient.IndexesAPI.V1IndexdefInputDataIndexDefinitionIdGet(context.Background(), indexDefinitionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IndexesAPIService V1IndexdefMultiassetGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IndexesAPI.V1IndexdefMultiassetGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IndexesAPIService V1IndexdefMultiassetIndexIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var indexId string

		resp, httpRes, err := apiClient.IndexesAPI.V1IndexdefMultiassetIndexIdGet(context.Background(), indexId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IndexesAPIService V1IndexesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IndexesAPI.V1IndexesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IndexesAPIService V1IndexesIndexDefinitionIdCurrentSnapshotGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var indexDefinitionId string

		resp, httpRes, err := apiClient.IndexesAPI.V1IndexesIndexDefinitionIdCurrentSnapshotGet(context.Background(), indexDefinitionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IndexesAPIService V1IndexesIndexDefinitionIdHistorySnapshotGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var indexDefinitionId string

		resp, httpRes, err := apiClient.IndexesAPI.V1IndexesIndexDefinitionIdHistorySnapshotGet(context.Background(), indexDefinitionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IndexesAPIService V1IndexesIndexIdCurrentGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var indexId string

		resp, httpRes, err := apiClient.IndexesAPI.V1IndexesIndexIdCurrentGet(context.Background(), indexId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IndexesAPIService V1IndexesIndexIdHistoryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var indexId string

		resp, httpRes, err := apiClient.IndexesAPI.V1IndexesIndexIdHistoryGet(context.Background(), indexId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IndexesAPIService V1IndexesIndexIdTimeseriesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var indexId string

		resp, httpRes, err := apiClient.IndexesAPI.V1IndexesIndexIdTimeseriesGet(context.Background(), indexId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
