#
# CoinAPI Indexes REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: v1
# Contact: support@apibricks.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ExchangeId
No description available.
.PARAMETER ExchangeSymbolId
No description available.
.PARAMETER BaseAssetId
No description available.
.PARAMETER QuoteAssetId
No description available.
.PARAMETER BeginDate
No description available.
.PARAMETER EndDate
No description available.
.PARAMETER Status
No description available.
.PARAMETER StatusInfo
No description available.
.PARAMETER LastModificationTime
No description available.
.OUTPUTS

IndexesIndexDefinitionInputData<PSCustomObject>
#>

function Initialize-IndexesIndexDefinitionInputData {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExchangeId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExchangeSymbolId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BaseAssetId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${QuoteAssetId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${BeginDate},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EndDate},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StatusInfo},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastModificationTime}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => IndexesIndexDefinitionInputData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "exchangeId" = ${ExchangeId}
            "exchangeSymbolId" = ${ExchangeSymbolId}
            "baseAssetId" = ${BaseAssetId}
            "quoteAssetId" = ${QuoteAssetId}
            "beginDate" = ${BeginDate}
            "endDate" = ${EndDate}
            "status" = ${Status}
            "statusInfo" = ${StatusInfo}
            "lastModificationTime" = ${LastModificationTime}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IndexesIndexDefinitionInputData<PSCustomObject>

.DESCRIPTION

Convert from JSON to IndexesIndexDefinitionInputData<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IndexesIndexDefinitionInputData<PSCustomObject>
#>
function ConvertFrom-JsonToIndexesIndexDefinitionInputData {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => IndexesIndexDefinitionInputData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IndexesIndexDefinitionInputData
        $AllProperties = ("exchangeId", "exchangeSymbolId", "baseAssetId", "quoteAssetId", "beginDate", "endDate", "status", "statusInfo", "lastModificationTime")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exchangeId"))) { #optional property not found
            $ExchangeId = $null
        } else {
            $ExchangeId = $JsonParameters.PSobject.Properties["exchangeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exchangeSymbolId"))) { #optional property not found
            $ExchangeSymbolId = $null
        } else {
            $ExchangeSymbolId = $JsonParameters.PSobject.Properties["exchangeSymbolId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "baseAssetId"))) { #optional property not found
            $BaseAssetId = $null
        } else {
            $BaseAssetId = $JsonParameters.PSobject.Properties["baseAssetId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "quoteAssetId"))) { #optional property not found
            $QuoteAssetId = $null
        } else {
            $QuoteAssetId = $JsonParameters.PSobject.Properties["quoteAssetId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "beginDate"))) { #optional property not found
            $BeginDate = $null
        } else {
            $BeginDate = $JsonParameters.PSobject.Properties["beginDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endDate"))) { #optional property not found
            $EndDate = $null
        } else {
            $EndDate = $JsonParameters.PSobject.Properties["endDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusInfo"))) { #optional property not found
            $StatusInfo = $null
        } else {
            $StatusInfo = $JsonParameters.PSobject.Properties["statusInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastModificationTime"))) { #optional property not found
            $LastModificationTime = $null
        } else {
            $LastModificationTime = $JsonParameters.PSobject.Properties["lastModificationTime"].value
        }

        $PSO = [PSCustomObject]@{
            "exchangeId" = ${ExchangeId}
            "exchangeSymbolId" = ${ExchangeSymbolId}
            "baseAssetId" = ${BaseAssetId}
            "quoteAssetId" = ${QuoteAssetId}
            "beginDate" = ${BeginDate}
            "endDate" = ${EndDate}
            "status" = ${Status}
            "statusInfo" = ${StatusInfo}
            "lastModificationTime" = ${LastModificationTime}
        }

        return $PSO
    }

}

