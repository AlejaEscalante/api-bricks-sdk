/**
 * Indexes REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * IndexesApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_IndexesApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_IndexesApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/Indexes_IndexDefinitionInputData.h"
#include "CppRestOpenAPIClient/model/Indexes_IndexDefinitionSnapshotEntry.h"
#include "CppRestOpenAPIClient/model/Indexes_IndexIdentifier.h"
#include "CppRestOpenAPIClient/model/Indexes_IndexMultiAssetWeight.h"
#include "CppRestOpenAPIClient/model/Indexes_IndexTimeseriesItem.h"
#include "CppRestOpenAPIClient/model/Indexes_IndexValue.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  IndexesApi 
{
public:

    explicit IndexesApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~IndexesApi();

    /// <summary>
    /// Returns all data inputs for a specific index definition
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="indexDefinitionId"></param>
    pplx::task<std::vector<std::shared_ptr<Indexes_IndexDefinitionInputData>>> v1IndexdefInputDataIndexDefinitionIdAllGet(
        utility::string_t indexDefinitionId
    ) const;
    /// <summary>
    /// Returns data inputs for certain index definition and time
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="indexDefinitionId"></param>
    /// <param name="time"> (optional, default to utility::datetime())</param>
    /// <param name="enabledOnly"> (optional, default to false)</param>
    /// <param name="pendingOnly"> (optional, default to false)</param>
    /// <param name="filterAssetId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withStatusInfo"> (optional, default to false)</param>
    pplx::task<std::vector<std::shared_ptr<Indexes_IndexDefinitionSnapshotEntry>>> v1IndexdefInputDataIndexDefinitionIdGet(
        utility::string_t indexDefinitionId,
        boost::optional<utility::datetime> time,
        boost::optional<bool> enabledOnly,
        boost::optional<bool> pendingOnly,
        boost::optional<utility::string_t> filterAssetId,
        boost::optional<bool> withStatusInfo
    ) const;
    /// <summary>
    /// Get all multi-asset weights
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Indexes_IndexMultiAssetWeight>>> v1IndexdefMultiassetGet(
    ) const;
    /// <summary>
    /// Get multi-asset weights for specific index
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="indexId"></param>
    pplx::task<std::vector<std::shared_ptr<Indexes_IndexMultiAssetWeight>>> v1IndexdefMultiassetIndexIdGet(
        utility::string_t indexId
    ) const;
    /// <summary>
    /// List indexes
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Indexes_IndexIdentifier>>> v1IndexesGet(
    ) const;
    /// <summary>
    /// Current Index Values for index definition
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="indexDefinitionId"></param>
    pplx::task<std::vector<std::shared_ptr<Indexes_IndexDefinitionSnapshotEntry>>> v1IndexesIndexDefinitionIdCurrentSnapshotGet(
        utility::string_t indexDefinitionId
    ) const;
    /// <summary>
    /// Historical Index Values for index definition
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="indexDefinitionId"></param>
    /// <param name="time"> (optional, default to utility::datetime())</param>
    pplx::task<std::vector<std::shared_ptr<Indexes_IndexDefinitionSnapshotEntry>>> v1IndexesIndexDefinitionIdHistorySnapshotGet(
        utility::string_t indexDefinitionId,
        boost::optional<utility::datetime> time
    ) const;
    /// <summary>
    /// Current Index Value
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="indexId"></param>
    pplx::task<std::shared_ptr<Indexes_IndexValue>> v1IndexesIndexIdCurrentGet(
        utility::string_t indexId
    ) const;
    /// <summary>
    /// Historical Index Value w/Composition
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="indexId"></param>
    /// <param name="timeStart"> (optional, default to utility::datetime())</param>
    /// <param name="timeEnd"> (optional, default to utility::datetime())</param>
    /// <param name="limit"> (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<Indexes_IndexValue>>> v1IndexesIndexIdHistoryGet(
        utility::string_t indexId,
        boost::optional<utility::datetime> timeStart,
        boost::optional<utility::datetime> timeEnd,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Timeseries Index Value
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="indexId"></param>
    /// <param name="periodId">Identifier of requested timeseries period (e.g. &#x60;5SEC&#x60; or &#x60;1DAY&#x60;)</param>
    /// <param name="timeStart">Timeseries starting time in ISO 8601</param>
    /// <param name="timeEnd">Timeseries ending time in ISO 8601</param>
    /// <param name="limit">Amount of items to return (optional, mininum is 1, maximum is 100000, default value is 100, if the parameter is used then every 100 output items are counted as one request) (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<Indexes_IndexTimeseriesItem>>> v1IndexesIndexIdTimeseriesGet(
        utility::string_t indexId,
        utility::string_t periodId,
        utility::string_t timeStart,
        utility::string_t timeEnd,
        boost::optional<int32_t> limit
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_IndexesApi_H_ */

