/**
 * CoinAPI Indexes REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Indexes_IndexTimeseriesItem.h
 *
 * Represents a timeseries item with value information.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Indexes_IndexTimeseriesItem_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Indexes_IndexTimeseriesItem_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Represents a timeseries item with value information.
/// </summary>
class  Indexes_IndexTimeseriesItem
    : public ModelBase
{
public:
    Indexes_IndexTimeseriesItem();
    virtual ~Indexes_IndexTimeseriesItem();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Indexes_IndexTimeseriesItem members


    /// <summary>
    /// Gets or sets the start time of the time period.
    /// </summary>
    utility::datetime getTimePeriodStart() const;
    bool timePeriodStartIsSet() const;
    void unsetTime_period_start();
    void setTimePeriodStart(const utility::datetime& value);

    /// <summary>
    /// Gets or sets the end time of the time period.
    /// </summary>
    utility::datetime getTimePeriodEnd() const;
    bool timePeriodEndIsSet() const;
    void unsetTime_period_end();
    void setTimePeriodEnd(const utility::datetime& value);

    /// <summary>
    /// Gets or sets the time when the value opened.
    /// </summary>
    utility::datetime getTimeOpen() const;
    bool timeOpenIsSet() const;
    void unsetTime_open();
    void setTimeOpen(const utility::datetime& value);

    /// <summary>
    /// Gets or sets the time when the value closed.
    /// </summary>
    utility::datetime getTimeClose() const;
    bool timeCloseIsSet() const;
    void unsetTime_close();
    void setTimeClose(const utility::datetime& value);

    /// <summary>
    /// Gets or sets the opening value.
    /// </summary>
    double getValueOpen() const;
    bool valueOpenIsSet() const;
    void unsetValue_open();
    void setValueOpen(double value);

    /// <summary>
    /// Gets or sets the highest value during the time period.
    /// </summary>
    double getValueHigh() const;
    bool valueHighIsSet() const;
    void unsetValue_high();
    void setValueHigh(double value);

    /// <summary>
    /// Gets or sets the lowest value during the time period.
    /// </summary>
    double getValueLow() const;
    bool valueLowIsSet() const;
    void unsetValue_low();
    void setValueLow(double value);

    /// <summary>
    /// Gets or sets the closing value.
    /// </summary>
    double getValueClose() const;
    bool valueCloseIsSet() const;
    void unsetValue_close();
    void setValueClose(double value);

    /// <summary>
    /// Gets or sets the number of values during the time period.
    /// </summary>
    int64_t getValueCount() const;
    bool valueCountIsSet() const;
    void unsetValue_count();
    void setValueCount(int64_t value);


protected:
    utility::datetime m_Time_period_start;
    bool m_Time_period_startIsSet;

    utility::datetime m_Time_period_end;
    bool m_Time_period_endIsSet;

    utility::datetime m_Time_open;
    bool m_Time_openIsSet;

    utility::datetime m_Time_close;
    bool m_Time_closeIsSet;

    double m_Value_open;
    bool m_Value_openIsSet;

    double m_Value_high;
    bool m_Value_highIsSet;

    double m_Value_low;
    bool m_Value_lowIsSet;

    double m_Value_close;
    bool m_Value_closeIsSet;

    int64_t m_Value_count;
    bool m_Value_countIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Indexes_IndexTimeseriesItem_H_ */
