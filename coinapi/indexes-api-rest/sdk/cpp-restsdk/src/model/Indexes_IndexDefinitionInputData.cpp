/**
 * CoinAPI Indexes REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Indexes_IndexDefinitionInputData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Indexes_IndexDefinitionInputData::Indexes_IndexDefinitionInputData()
{
    m_ExchangeId = utility::conversions::to_string_t("");
    m_ExchangeIdIsSet = false;
    m_ExchangeSymbolId = utility::conversions::to_string_t("");
    m_ExchangeSymbolIdIsSet = false;
    m_BaseAssetId = utility::conversions::to_string_t("");
    m_BaseAssetIdIsSet = false;
    m_QuoteAssetId = utility::conversions::to_string_t("");
    m_QuoteAssetIdIsSet = false;
    m_BeginDate = utility::datetime();
    m_BeginDateIsSet = false;
    m_EndDate = utility::datetime();
    m_EndDateIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_StatusInfo = utility::conversions::to_string_t("");
    m_StatusInfoIsSet = false;
    m_LastModificationTime = utility::datetime();
    m_LastModificationTimeIsSet = false;
}

Indexes_IndexDefinitionInputData::~Indexes_IndexDefinitionInputData()
{
}

void Indexes_IndexDefinitionInputData::validate()
{
    // TODO: implement validation
}

web::json::value Indexes_IndexDefinitionInputData::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_ExchangeIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("exchangeId"))] = ModelBase::toJson(m_ExchangeId);
    }
    if(m_ExchangeSymbolIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("exchangeSymbolId"))] = ModelBase::toJson(m_ExchangeSymbolId);
    }
    if(m_BaseAssetIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("baseAssetId"))] = ModelBase::toJson(m_BaseAssetId);
    }
    if(m_QuoteAssetIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("quoteAssetId"))] = ModelBase::toJson(m_QuoteAssetId);
    }
    if(m_BeginDateIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("beginDate"))] = ModelBase::toJson(m_BeginDate);
    }
    if(m_EndDateIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("endDate"))] = ModelBase::toJson(m_EndDate);
    }
    if(m_StatusIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_StatusInfoIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("statusInfo"))] = ModelBase::toJson(m_StatusInfo);
    }
    if(m_LastModificationTimeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("lastModificationTime"))] = ModelBase::toJson(m_LastModificationTime);
    }

    return val;
}

bool Indexes_IndexDefinitionInputData::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("exchangeId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exchangeId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExchangeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExchangeId);
            setExchangeId(refVal_setExchangeId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exchangeSymbolId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exchangeSymbolId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExchangeSymbolId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExchangeSymbolId);
            setExchangeSymbolId(refVal_setExchangeSymbolId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("baseAssetId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("baseAssetId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBaseAssetId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBaseAssetId);
            setBaseAssetId(refVal_setBaseAssetId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("quoteAssetId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("quoteAssetId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQuoteAssetId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuoteAssetId);
            setQuoteAssetId(refVal_setQuoteAssetId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("beginDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("beginDate")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setBeginDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBeginDate);
            setBeginDate(refVal_setBeginDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("endDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("endDate")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEndDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEndDate);
            setEndDate(refVal_setEndDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("statusInfo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("statusInfo")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatusInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatusInfo);
            setStatusInfo(refVal_setStatusInfo);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastModificationTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastModificationTime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setLastModificationTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastModificationTime);
            setLastModificationTime(refVal_setLastModificationTime);
            
        }
    }
    return ok;
}

void Indexes_IndexDefinitionInputData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ExchangeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exchangeId")), m_ExchangeId));
    }
    if(m_ExchangeSymbolIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exchangeSymbolId")), m_ExchangeSymbolId));
    }
    if(m_BaseAssetIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("baseAssetId")), m_BaseAssetId));
    }
    if(m_QuoteAssetIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("quoteAssetId")), m_QuoteAssetId));
    }
    if(m_BeginDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("beginDate")), m_BeginDate));
    }
    if(m_EndDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("endDate")), m_EndDate));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_StatusInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("statusInfo")), m_StatusInfo));
    }
    if(m_LastModificationTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastModificationTime")), m_LastModificationTime));
    }
}

bool Indexes_IndexDefinitionInputData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("exchangeId"))))
    {
        utility::string_t refVal_setExchangeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exchangeId"))), refVal_setExchangeId );
        setExchangeId(refVal_setExchangeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exchangeSymbolId"))))
    {
        utility::string_t refVal_setExchangeSymbolId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exchangeSymbolId"))), refVal_setExchangeSymbolId );
        setExchangeSymbolId(refVal_setExchangeSymbolId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("baseAssetId"))))
    {
        utility::string_t refVal_setBaseAssetId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("baseAssetId"))), refVal_setBaseAssetId );
        setBaseAssetId(refVal_setBaseAssetId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("quoteAssetId"))))
    {
        utility::string_t refVal_setQuoteAssetId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("quoteAssetId"))), refVal_setQuoteAssetId );
        setQuoteAssetId(refVal_setQuoteAssetId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("beginDate"))))
    {
        utility::datetime refVal_setBeginDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("beginDate"))), refVal_setBeginDate );
        setBeginDate(refVal_setBeginDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("endDate"))))
    {
        utility::datetime refVal_setEndDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("endDate"))), refVal_setEndDate );
        setEndDate(refVal_setEndDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("statusInfo"))))
    {
        utility::string_t refVal_setStatusInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("statusInfo"))), refVal_setStatusInfo );
        setStatusInfo(refVal_setStatusInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastModificationTime"))))
    {
        utility::datetime refVal_setLastModificationTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastModificationTime"))), refVal_setLastModificationTime );
        setLastModificationTime(refVal_setLastModificationTime);
    }
    return ok;
}


utility::string_t Indexes_IndexDefinitionInputData::getExchangeId() const
{
    return m_ExchangeId;
}


void Indexes_IndexDefinitionInputData::setExchangeId(const utility::string_t& value)
{
    m_ExchangeId = value;
    m_ExchangeIdIsSet = true;
}

bool Indexes_IndexDefinitionInputData::exchangeIdIsSet() const
{
    return m_ExchangeIdIsSet;
}

void Indexes_IndexDefinitionInputData::unsetExchangeId()
{
    m_ExchangeIdIsSet = false;
}
utility::string_t Indexes_IndexDefinitionInputData::getExchangeSymbolId() const
{
    return m_ExchangeSymbolId;
}


void Indexes_IndexDefinitionInputData::setExchangeSymbolId(const utility::string_t& value)
{
    m_ExchangeSymbolId = value;
    m_ExchangeSymbolIdIsSet = true;
}

bool Indexes_IndexDefinitionInputData::exchangeSymbolIdIsSet() const
{
    return m_ExchangeSymbolIdIsSet;
}

void Indexes_IndexDefinitionInputData::unsetExchangeSymbolId()
{
    m_ExchangeSymbolIdIsSet = false;
}
utility::string_t Indexes_IndexDefinitionInputData::getBaseAssetId() const
{
    return m_BaseAssetId;
}


void Indexes_IndexDefinitionInputData::setBaseAssetId(const utility::string_t& value)
{
    m_BaseAssetId = value;
    m_BaseAssetIdIsSet = true;
}

bool Indexes_IndexDefinitionInputData::baseAssetIdIsSet() const
{
    return m_BaseAssetIdIsSet;
}

void Indexes_IndexDefinitionInputData::unsetBaseAssetId()
{
    m_BaseAssetIdIsSet = false;
}
utility::string_t Indexes_IndexDefinitionInputData::getQuoteAssetId() const
{
    return m_QuoteAssetId;
}


void Indexes_IndexDefinitionInputData::setQuoteAssetId(const utility::string_t& value)
{
    m_QuoteAssetId = value;
    m_QuoteAssetIdIsSet = true;
}

bool Indexes_IndexDefinitionInputData::quoteAssetIdIsSet() const
{
    return m_QuoteAssetIdIsSet;
}

void Indexes_IndexDefinitionInputData::unsetQuoteAssetId()
{
    m_QuoteAssetIdIsSet = false;
}
utility::datetime Indexes_IndexDefinitionInputData::getBeginDate() const
{
    return m_BeginDate;
}


void Indexes_IndexDefinitionInputData::setBeginDate(const utility::datetime& value)
{
    m_BeginDate = value;
    m_BeginDateIsSet = true;
}

bool Indexes_IndexDefinitionInputData::beginDateIsSet() const
{
    return m_BeginDateIsSet;
}

void Indexes_IndexDefinitionInputData::unsetBeginDate()
{
    m_BeginDateIsSet = false;
}
utility::datetime Indexes_IndexDefinitionInputData::getEndDate() const
{
    return m_EndDate;
}


void Indexes_IndexDefinitionInputData::setEndDate(const utility::datetime& value)
{
    m_EndDate = value;
    m_EndDateIsSet = true;
}

bool Indexes_IndexDefinitionInputData::endDateIsSet() const
{
    return m_EndDateIsSet;
}

void Indexes_IndexDefinitionInputData::unsetEndDate()
{
    m_EndDateIsSet = false;
}
utility::string_t Indexes_IndexDefinitionInputData::getStatus() const
{
    return m_Status;
}


void Indexes_IndexDefinitionInputData::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Indexes_IndexDefinitionInputData::statusIsSet() const
{
    return m_StatusIsSet;
}

void Indexes_IndexDefinitionInputData::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t Indexes_IndexDefinitionInputData::getStatusInfo() const
{
    return m_StatusInfo;
}


void Indexes_IndexDefinitionInputData::setStatusInfo(const utility::string_t& value)
{
    m_StatusInfo = value;
    m_StatusInfoIsSet = true;
}

bool Indexes_IndexDefinitionInputData::statusInfoIsSet() const
{
    return m_StatusInfoIsSet;
}

void Indexes_IndexDefinitionInputData::unsetStatusInfo()
{
    m_StatusInfoIsSet = false;
}
utility::datetime Indexes_IndexDefinitionInputData::getLastModificationTime() const
{
    return m_LastModificationTime;
}


void Indexes_IndexDefinitionInputData::setLastModificationTime(const utility::datetime& value)
{
    m_LastModificationTime = value;
    m_LastModificationTimeIsSet = true;
}

bool Indexes_IndexDefinitionInputData::lastModificationTimeIsSet() const
{
    return m_LastModificationTimeIsSet;
}

void Indexes_IndexDefinitionInputData::unsetLastModificationTime()
{
    m_LastModificationTimeIsSet = false;
}

}
}
}
}


