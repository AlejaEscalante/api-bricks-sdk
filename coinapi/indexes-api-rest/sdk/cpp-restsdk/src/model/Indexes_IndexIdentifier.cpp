/**
 * CoinAPI Indexes REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Indexes_IndexIdentifier.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Indexes_IndexIdentifier::Indexes_IndexIdentifier()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
}

Indexes_IndexIdentifier::~Indexes_IndexIdentifier()
{
}

void Indexes_IndexIdentifier::validate()
{
    // TODO: implement validation
}

web::json::value Indexes_IndexIdentifier::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_IdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("id"))] = ModelBase::toJson(m_Id);
    }

    return val;
}

bool Indexes_IndexIdentifier::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
            
        }
    }
    return ok;
}

void Indexes_IndexIdentifier::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("id")), m_Id));
    }
}

bool Indexes_IndexIdentifier::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("id"))), refVal_setId );
        setId(refVal_setId);
    }
    return ok;
}


utility::string_t Indexes_IndexIdentifier::getId() const
{
    return m_Id;
}


void Indexes_IndexIdentifier::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Indexes_IndexIdentifier::idIsSet() const
{
    return m_IdIsSet;
}

void Indexes_IndexIdentifier::unsetId()
{
    m_IdIsSet = false;
}

}
}
}
}


