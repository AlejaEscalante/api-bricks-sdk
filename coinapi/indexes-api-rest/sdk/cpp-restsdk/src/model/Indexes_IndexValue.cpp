/**
 * CoinAPI Indexes REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Indexes_IndexValue.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Indexes_IndexValue::Indexes_IndexValue()
{
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_Value = 0.0;
    m_ValueIsSet = false;
    m_CompositionIsSet = false;
}

Indexes_IndexValue::~Indexes_IndexValue()
{
}

void Indexes_IndexValue::validate()
{
    // TODO: implement validation
}

web::json::value Indexes_IndexValue::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_TimestampIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_ValueIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }
    if(m_CompositionIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("composition"))] = ModelBase::toJson(m_Composition);
    }

    return val;
}

bool Indexes_IndexValue::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            double refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("composition"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("composition")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Indexes_IndexValueComponent>> refVal_setComposition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComposition);
            setComposition(refVal_setComposition);
            
        }
    }
    return ok;
}

void Indexes_IndexValue::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
    if(m_CompositionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("composition")), m_Composition));
    }
}

bool Indexes_IndexValue::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        double refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("composition"))))
    {
        std::vector<std::shared_ptr<Indexes_IndexValueComponent>> refVal_setComposition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("composition"))), refVal_setComposition );
        setComposition(refVal_setComposition);
    }
    return ok;
}


utility::datetime Indexes_IndexValue::getTimestamp() const
{
    return m_Timestamp;
}


void Indexes_IndexValue::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Indexes_IndexValue::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Indexes_IndexValue::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
double Indexes_IndexValue::getValue() const
{
    return m_Value;
}

void Indexes_IndexValue::setValue(double value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool Indexes_IndexValue::valueIsSet() const
{
    return m_ValueIsSet;
}

void Indexes_IndexValue::unsetValue()
{
    m_ValueIsSet = false;
}
std::vector<std::shared_ptr<Indexes_IndexValueComponent>> Indexes_IndexValue::getComposition() const
{
    return m_Composition;
}


void Indexes_IndexValue::setComposition(const std::vector<std::shared_ptr<Indexes_IndexValueComponent>>& value)
{
    m_Composition = value;
    m_CompositionIsSet = true;
}

bool Indexes_IndexValue::compositionIsSet() const
{
    return m_CompositionIsSet;
}

void Indexes_IndexValue::unsetComposition()
{
    m_CompositionIsSet = false;
}

}
}
}
}


