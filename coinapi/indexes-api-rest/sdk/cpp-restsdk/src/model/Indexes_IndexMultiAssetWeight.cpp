/**
 * CoinAPI Indexes REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Indexes_IndexMultiAssetWeight.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Indexes_IndexMultiAssetWeight::Indexes_IndexMultiAssetWeight()
{
    m_IndexId = utility::conversions::to_string_t("");
    m_IndexIdIsSet = false;
    m_AssetId = utility::conversions::to_string_t("");
    m_AssetIdIsSet = false;
    m_Weight = 0.0;
    m_WeightIsSet = false;
}

Indexes_IndexMultiAssetWeight::~Indexes_IndexMultiAssetWeight()
{
}

void Indexes_IndexMultiAssetWeight::validate()
{
    // TODO: implement validation
}

web::json::value Indexes_IndexMultiAssetWeight::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_IndexIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("indexId"))] = ModelBase::toJson(m_IndexId);
    }
    if(m_AssetIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("assetId"))] = ModelBase::toJson(m_AssetId);
    }
    if(m_WeightIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("weight"))] = ModelBase::toJson(m_Weight);
    }

    return val;
}

bool Indexes_IndexMultiAssetWeight::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("indexId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("indexId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIndexId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIndexId);
            setIndexId(refVal_setIndexId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("assetId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("assetId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetId);
            setAssetId(refVal_setAssetId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("weight"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("weight")));
        if(!fieldValue.is_null())
        {
            double refVal_setWeight;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWeight);
            setWeight(refVal_setWeight);
            
        }
    }
    return ok;
}

void Indexes_IndexMultiAssetWeight::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IndexIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("indexId")), m_IndexId));
    }
    if(m_AssetIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("assetId")), m_AssetId));
    }
    if(m_WeightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("weight")), m_Weight));
    }
}

bool Indexes_IndexMultiAssetWeight::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("indexId"))))
    {
        utility::string_t refVal_setIndexId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("indexId"))), refVal_setIndexId );
        setIndexId(refVal_setIndexId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("assetId"))))
    {
        utility::string_t refVal_setAssetId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("assetId"))), refVal_setAssetId );
        setAssetId(refVal_setAssetId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("weight"))))
    {
        double refVal_setWeight;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("weight"))), refVal_setWeight );
        setWeight(refVal_setWeight);
    }
    return ok;
}


utility::string_t Indexes_IndexMultiAssetWeight::getIndexId() const
{
    return m_IndexId;
}


void Indexes_IndexMultiAssetWeight::setIndexId(const utility::string_t& value)
{
    m_IndexId = value;
    m_IndexIdIsSet = true;
}

bool Indexes_IndexMultiAssetWeight::indexIdIsSet() const
{
    return m_IndexIdIsSet;
}

void Indexes_IndexMultiAssetWeight::unsetIndexId()
{
    m_IndexIdIsSet = false;
}
utility::string_t Indexes_IndexMultiAssetWeight::getAssetId() const
{
    return m_AssetId;
}


void Indexes_IndexMultiAssetWeight::setAssetId(const utility::string_t& value)
{
    m_AssetId = value;
    m_AssetIdIsSet = true;
}

bool Indexes_IndexMultiAssetWeight::assetIdIsSet() const
{
    return m_AssetIdIsSet;
}

void Indexes_IndexMultiAssetWeight::unsetAssetId()
{
    m_AssetIdIsSet = false;
}
double Indexes_IndexMultiAssetWeight::getWeight() const
{
    return m_Weight;
}

void Indexes_IndexMultiAssetWeight::setWeight(double value)
{
    m_Weight = value;
    m_WeightIsSet = true;
}

bool Indexes_IndexMultiAssetWeight::weightIsSet() const
{
    return m_WeightIsSet;
}

void Indexes_IndexMultiAssetWeight::unsetWeight()
{
    m_WeightIsSet = false;
}

}
}
}
}


