/**
 * CoinAPI Indexes REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Indexes_IndexTimeseriesItem.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Indexes_IndexTimeseriesItem::Indexes_IndexTimeseriesItem()
{
    m_Time_period_start = utility::datetime();
    m_Time_period_startIsSet = false;
    m_Time_period_end = utility::datetime();
    m_Time_period_endIsSet = false;
    m_Time_open = utility::datetime();
    m_Time_openIsSet = false;
    m_Time_close = utility::datetime();
    m_Time_closeIsSet = false;
    m_Value_open = 0.0;
    m_Value_openIsSet = false;
    m_Value_high = 0.0;
    m_Value_highIsSet = false;
    m_Value_low = 0.0;
    m_Value_lowIsSet = false;
    m_Value_close = 0.0;
    m_Value_closeIsSet = false;
    m_Value_count = 0L;
    m_Value_countIsSet = false;
}

Indexes_IndexTimeseriesItem::~Indexes_IndexTimeseriesItem()
{
}

void Indexes_IndexTimeseriesItem::validate()
{
    // TODO: implement validation
}

web::json::value Indexes_IndexTimeseriesItem::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Time_period_startIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("time_period_start"))] = ModelBase::toJson(m_Time_period_start);
    }
    if(m_Time_period_endIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("time_period_end"))] = ModelBase::toJson(m_Time_period_end);
    }
    if(m_Time_openIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("time_open"))] = ModelBase::toJson(m_Time_open);
    }
    if(m_Time_closeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("time_close"))] = ModelBase::toJson(m_Time_close);
    }
    if(m_Value_openIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("value_open"))] = ModelBase::toJson(m_Value_open);
    }
    if(m_Value_highIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("value_high"))] = ModelBase::toJson(m_Value_high);
    }
    if(m_Value_lowIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("value_low"))] = ModelBase::toJson(m_Value_low);
    }
    if(m_Value_closeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("value_close"))] = ModelBase::toJson(m_Value_close);
    }
    if(m_Value_countIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("value_count"))] = ModelBase::toJson(m_Value_count);
    }

    return val;
}

bool Indexes_IndexTimeseriesItem::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("time_period_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("time_period_start")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimePeriodStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimePeriodStart);
            setTimePeriodStart(refVal_setTimePeriodStart);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("time_period_end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("time_period_end")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimePeriodEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimePeriodEnd);
            setTimePeriodEnd(refVal_setTimePeriodEnd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("time_open"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("time_open")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimeOpen;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeOpen);
            setTimeOpen(refVal_setTimeOpen);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("time_close"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("time_close")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimeClose;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeClose);
            setTimeClose(refVal_setTimeClose);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("value_open"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("value_open")));
        if(!fieldValue.is_null())
        {
            double refVal_setValueOpen;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValueOpen);
            setValueOpen(refVal_setValueOpen);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("value_high"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("value_high")));
        if(!fieldValue.is_null())
        {
            double refVal_setValueHigh;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValueHigh);
            setValueHigh(refVal_setValueHigh);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("value_low"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("value_low")));
        if(!fieldValue.is_null())
        {
            double refVal_setValueLow;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValueLow);
            setValueLow(refVal_setValueLow);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("value_close"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("value_close")));
        if(!fieldValue.is_null())
        {
            double refVal_setValueClose;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValueClose);
            setValueClose(refVal_setValueClose);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("value_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("value_count")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setValueCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValueCount);
            setValueCount(refVal_setValueCount);
            
        }
    }
    return ok;
}

void Indexes_IndexTimeseriesItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Time_period_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("time_period_start")), m_Time_period_start));
    }
    if(m_Time_period_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("time_period_end")), m_Time_period_end));
    }
    if(m_Time_openIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("time_open")), m_Time_open));
    }
    if(m_Time_closeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("time_close")), m_Time_close));
    }
    if(m_Value_openIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("value_open")), m_Value_open));
    }
    if(m_Value_highIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("value_high")), m_Value_high));
    }
    if(m_Value_lowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("value_low")), m_Value_low));
    }
    if(m_Value_closeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("value_close")), m_Value_close));
    }
    if(m_Value_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("value_count")), m_Value_count));
    }
}

bool Indexes_IndexTimeseriesItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("time_period_start"))))
    {
        utility::datetime refVal_setTimePeriodStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("time_period_start"))), refVal_setTimePeriodStart );
        setTimePeriodStart(refVal_setTimePeriodStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("time_period_end"))))
    {
        utility::datetime refVal_setTimePeriodEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("time_period_end"))), refVal_setTimePeriodEnd );
        setTimePeriodEnd(refVal_setTimePeriodEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("time_open"))))
    {
        utility::datetime refVal_setTimeOpen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("time_open"))), refVal_setTimeOpen );
        setTimeOpen(refVal_setTimeOpen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("time_close"))))
    {
        utility::datetime refVal_setTimeClose;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("time_close"))), refVal_setTimeClose );
        setTimeClose(refVal_setTimeClose);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("value_open"))))
    {
        double refVal_setValueOpen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("value_open"))), refVal_setValueOpen );
        setValueOpen(refVal_setValueOpen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("value_high"))))
    {
        double refVal_setValueHigh;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("value_high"))), refVal_setValueHigh );
        setValueHigh(refVal_setValueHigh);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("value_low"))))
    {
        double refVal_setValueLow;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("value_low"))), refVal_setValueLow );
        setValueLow(refVal_setValueLow);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("value_close"))))
    {
        double refVal_setValueClose;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("value_close"))), refVal_setValueClose );
        setValueClose(refVal_setValueClose);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("value_count"))))
    {
        int64_t refVal_setValueCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("value_count"))), refVal_setValueCount );
        setValueCount(refVal_setValueCount);
    }
    return ok;
}


utility::datetime Indexes_IndexTimeseriesItem::getTimePeriodStart() const
{
    return m_Time_period_start;
}


void Indexes_IndexTimeseriesItem::setTimePeriodStart(const utility::datetime& value)
{
    m_Time_period_start = value;
    m_Time_period_startIsSet = true;
}

bool Indexes_IndexTimeseriesItem::timePeriodStartIsSet() const
{
    return m_Time_period_startIsSet;
}

void Indexes_IndexTimeseriesItem::unsetTime_period_start()
{
    m_Time_period_startIsSet = false;
}
utility::datetime Indexes_IndexTimeseriesItem::getTimePeriodEnd() const
{
    return m_Time_period_end;
}


void Indexes_IndexTimeseriesItem::setTimePeriodEnd(const utility::datetime& value)
{
    m_Time_period_end = value;
    m_Time_period_endIsSet = true;
}

bool Indexes_IndexTimeseriesItem::timePeriodEndIsSet() const
{
    return m_Time_period_endIsSet;
}

void Indexes_IndexTimeseriesItem::unsetTime_period_end()
{
    m_Time_period_endIsSet = false;
}
utility::datetime Indexes_IndexTimeseriesItem::getTimeOpen() const
{
    return m_Time_open;
}


void Indexes_IndexTimeseriesItem::setTimeOpen(const utility::datetime& value)
{
    m_Time_open = value;
    m_Time_openIsSet = true;
}

bool Indexes_IndexTimeseriesItem::timeOpenIsSet() const
{
    return m_Time_openIsSet;
}

void Indexes_IndexTimeseriesItem::unsetTime_open()
{
    m_Time_openIsSet = false;
}
utility::datetime Indexes_IndexTimeseriesItem::getTimeClose() const
{
    return m_Time_close;
}


void Indexes_IndexTimeseriesItem::setTimeClose(const utility::datetime& value)
{
    m_Time_close = value;
    m_Time_closeIsSet = true;
}

bool Indexes_IndexTimeseriesItem::timeCloseIsSet() const
{
    return m_Time_closeIsSet;
}

void Indexes_IndexTimeseriesItem::unsetTime_close()
{
    m_Time_closeIsSet = false;
}
double Indexes_IndexTimeseriesItem::getValueOpen() const
{
    return m_Value_open;
}

void Indexes_IndexTimeseriesItem::setValueOpen(double value)
{
    m_Value_open = value;
    m_Value_openIsSet = true;
}

bool Indexes_IndexTimeseriesItem::valueOpenIsSet() const
{
    return m_Value_openIsSet;
}

void Indexes_IndexTimeseriesItem::unsetValue_open()
{
    m_Value_openIsSet = false;
}
double Indexes_IndexTimeseriesItem::getValueHigh() const
{
    return m_Value_high;
}

void Indexes_IndexTimeseriesItem::setValueHigh(double value)
{
    m_Value_high = value;
    m_Value_highIsSet = true;
}

bool Indexes_IndexTimeseriesItem::valueHighIsSet() const
{
    return m_Value_highIsSet;
}

void Indexes_IndexTimeseriesItem::unsetValue_high()
{
    m_Value_highIsSet = false;
}
double Indexes_IndexTimeseriesItem::getValueLow() const
{
    return m_Value_low;
}

void Indexes_IndexTimeseriesItem::setValueLow(double value)
{
    m_Value_low = value;
    m_Value_lowIsSet = true;
}

bool Indexes_IndexTimeseriesItem::valueLowIsSet() const
{
    return m_Value_lowIsSet;
}

void Indexes_IndexTimeseriesItem::unsetValue_low()
{
    m_Value_lowIsSet = false;
}
double Indexes_IndexTimeseriesItem::getValueClose() const
{
    return m_Value_close;
}

void Indexes_IndexTimeseriesItem::setValueClose(double value)
{
    m_Value_close = value;
    m_Value_closeIsSet = true;
}

bool Indexes_IndexTimeseriesItem::valueCloseIsSet() const
{
    return m_Value_closeIsSet;
}

void Indexes_IndexTimeseriesItem::unsetValue_close()
{
    m_Value_closeIsSet = false;
}
int64_t Indexes_IndexTimeseriesItem::getValueCount() const
{
    return m_Value_count;
}

void Indexes_IndexTimeseriesItem::setValueCount(int64_t value)
{
    m_Value_count = value;
    m_Value_countIsSet = true;
}

bool Indexes_IndexTimeseriesItem::valueCountIsSet() const
{
    return m_Value_countIsSet;
}

void Indexes_IndexTimeseriesItem::unsetValue_count()
{
    m_Value_countIsSet = false;
}

}
}
}
}


