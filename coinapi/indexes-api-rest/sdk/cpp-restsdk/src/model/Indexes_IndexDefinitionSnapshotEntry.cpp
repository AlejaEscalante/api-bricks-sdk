/**
 * Indexes REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Indexes_IndexDefinitionSnapshotEntry.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Indexes_IndexDefinitionSnapshotEntry::Indexes_IndexDefinitionSnapshotEntry()
{
    m_Index_id = utility::conversions::to_string_t("");
    m_Index_idIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_Value = 0.0;
    m_ValueIsSet = false;
}

Indexes_IndexDefinitionSnapshotEntry::~Indexes_IndexDefinitionSnapshotEntry()
{
}

void Indexes_IndexDefinitionSnapshotEntry::validate()
{
    // TODO: implement validation
}

web::json::value Indexes_IndexDefinitionSnapshotEntry::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Index_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("index_id"))] = ModelBase::toJson(m_Index_id);
    }
    if(m_TimestampIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_ValueIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }

    return val;
}

bool Indexes_IndexDefinitionSnapshotEntry::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("index_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("index_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIndexId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIndexId);
            setIndexId(refVal_setIndexId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            double refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
            
        }
    }
    return ok;
}

void Indexes_IndexDefinitionSnapshotEntry::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Index_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("index_id")), m_Index_id));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
}

bool Indexes_IndexDefinitionSnapshotEntry::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("index_id"))))
    {
        utility::string_t refVal_setIndexId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("index_id"))), refVal_setIndexId );
        setIndexId(refVal_setIndexId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        double refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    return ok;
}


utility::string_t Indexes_IndexDefinitionSnapshotEntry::getIndexId() const
{
    return m_Index_id;
}


void Indexes_IndexDefinitionSnapshotEntry::setIndexId(const utility::string_t& value)
{
    m_Index_id = value;
    m_Index_idIsSet = true;
}

bool Indexes_IndexDefinitionSnapshotEntry::indexIdIsSet() const
{
    return m_Index_idIsSet;
}

void Indexes_IndexDefinitionSnapshotEntry::unsetIndex_id()
{
    m_Index_idIsSet = false;
}
utility::datetime Indexes_IndexDefinitionSnapshotEntry::getTimestamp() const
{
    return m_Timestamp;
}


void Indexes_IndexDefinitionSnapshotEntry::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Indexes_IndexDefinitionSnapshotEntry::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Indexes_IndexDefinitionSnapshotEntry::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
double Indexes_IndexDefinitionSnapshotEntry::getValue() const
{
    return m_Value;
}

void Indexes_IndexDefinitionSnapshotEntry::setValue(double value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool Indexes_IndexDefinitionSnapshotEntry::valueIsSet() const
{
    return m_ValueIsSet;
}

void Indexes_IndexDefinitionSnapshotEntry::unsetValue()
{
    m_ValueIsSet = false;
}

}
}
}
}


