/**
 * CoinAPI Indexes REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Indexes_IndexValueComponent.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Indexes_IndexValueComponent::Indexes_IndexValueComponent()
{
    m_Component_id = utility::conversions::to_string_t("");
    m_Component_idIsSet = false;
    m_Component_value = 0.0;
    m_Component_valueIsSet = false;
}

Indexes_IndexValueComponent::~Indexes_IndexValueComponent()
{
}

void Indexes_IndexValueComponent::validate()
{
    // TODO: implement validation
}

web::json::value Indexes_IndexValueComponent::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Component_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("component_id"))] = ModelBase::toJson(m_Component_id);
    }
    if(m_Component_valueIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("component_value"))] = ModelBase::toJson(m_Component_value);
    }

    return val;
}

bool Indexes_IndexValueComponent::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("component_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("component_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setComponentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComponentId);
            setComponentId(refVal_setComponentId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("component_value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("component_value")));
        if(!fieldValue.is_null())
        {
            double refVal_setComponentValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComponentValue);
            setComponentValue(refVal_setComponentValue);
            
        }
    }
    return ok;
}

void Indexes_IndexValueComponent::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Component_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("component_id")), m_Component_id));
    }
    if(m_Component_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("component_value")), m_Component_value));
    }
}

bool Indexes_IndexValueComponent::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("component_id"))))
    {
        utility::string_t refVal_setComponentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("component_id"))), refVal_setComponentId );
        setComponentId(refVal_setComponentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("component_value"))))
    {
        double refVal_setComponentValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("component_value"))), refVal_setComponentValue );
        setComponentValue(refVal_setComponentValue);
    }
    return ok;
}


utility::string_t Indexes_IndexValueComponent::getComponentId() const
{
    return m_Component_id;
}


void Indexes_IndexValueComponent::setComponentId(const utility::string_t& value)
{
    m_Component_id = value;
    m_Component_idIsSet = true;
}

bool Indexes_IndexValueComponent::componentIdIsSet() const
{
    return m_Component_idIsSet;
}

void Indexes_IndexValueComponent::unsetComponent_id()
{
    m_Component_idIsSet = false;
}
double Indexes_IndexValueComponent::getComponentValue() const
{
    return m_Component_value;
}

void Indexes_IndexValueComponent::setComponentValue(double value)
{
    m_Component_value = value;
    m_Component_valueIsSet = true;
}

bool Indexes_IndexValueComponent::componentValueIsSet() const
{
    return m_Component_valueIsSet;
}

void Indexes_IndexValueComponent::unsetComponent_value()
{
    m_Component_valueIsSet = false;
}

}
}
}
}


