# coding: utf-8

"""
    Indexes REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: support@apibricks.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class IndexesIndexTimeseriesItem(BaseModel):
    """
    Represents a timeseries item with value information.
    """ # noqa: E501
    time_period_start: Optional[datetime] = Field(default=None, description="Gets or sets the start time of the time period.")
    time_period_end: Optional[datetime] = Field(default=None, description="Gets or sets the end time of the time period.")
    time_open: Optional[datetime] = Field(default=None, description="Gets or sets the time when the value opened.")
    time_close: Optional[datetime] = Field(default=None, description="Gets or sets the time when the value closed.")
    value_open: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets the opening value.")
    value_high: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets the highest value during the time period.")
    value_low: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets the lowest value during the time period.")
    value_close: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Gets or sets the closing value.")
    value_count: Optional[StrictInt] = Field(default=None, description="Gets or sets the number of values during the time period.")
    __properties: ClassVar[List[str]] = ["time_period_start", "time_period_end", "time_open", "time_close", "value_open", "value_high", "value_low", "value_close", "value_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IndexesIndexTimeseriesItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if time_open (nullable) is None
        # and model_fields_set contains the field
        if self.time_open is None and "time_open" in self.model_fields_set:
            _dict['time_open'] = None

        # set to None if time_close (nullable) is None
        # and model_fields_set contains the field
        if self.time_close is None and "time_close" in self.model_fields_set:
            _dict['time_close'] = None

        # set to None if value_open (nullable) is None
        # and model_fields_set contains the field
        if self.value_open is None and "value_open" in self.model_fields_set:
            _dict['value_open'] = None

        # set to None if value_high (nullable) is None
        # and model_fields_set contains the field
        if self.value_high is None and "value_high" in self.model_fields_set:
            _dict['value_high'] = None

        # set to None if value_low (nullable) is None
        # and model_fields_set contains the field
        if self.value_low is None and "value_low" in self.model_fields_set:
            _dict['value_low'] = None

        # set to None if value_close (nullable) is None
        # and model_fields_set contains the field
        if self.value_close is None and "value_close" in self.model_fields_set:
            _dict['value_close'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IndexesIndexTimeseriesItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "time_period_start": obj.get("time_period_start"),
            "time_period_end": obj.get("time_period_end"),
            "time_open": obj.get("time_open"),
            "time_close": obj.get("time_close"),
            "value_open": obj.get("value_open"),
            "value_high": obj.get("value_high"),
            "value_low": obj.get("value_low"),
            "value_close": obj.get("value_close"),
            "value_count": obj.get("value_count")
        })
        return _obj


