{-
   Exchange Rates Realtime REST API

   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   OpenAPI Version: 3.0.4
   Exchange Rates Realtime REST API API version: v1
   Contact: support@apibricks.io
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : ExchangeRatesRealtimeREST.API.ExchangeRates
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module ExchangeRatesRealtimeREST.API.ExchangeRates where

import ExchangeRatesRealtimeREST.Core
import ExchangeRatesRealtimeREST.MimeTypes
import ExchangeRatesRealtimeREST.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** ExchangeRates

-- *** getSpecificRate

-- | @GET \/v1\/exchangerate\/{asset_id_base}\/{asset_id_quote}@
-- 
-- Get specific rate
-- 
-- Retrieves the exchange rate for a specific base and quote asset at a given time or the current rate.              :::info If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements. :::
-- 
-- AuthMethod: 'AuthApiKeyAPIKey', 'AuthApiKeyJWT'
-- 
getSpecificRate
  :: Accept accept -- ^ request accept ('MimeType')
  -> AssetIdBase -- ^ "assetIdBase" -  Requested exchange rate base asset identifier (from the Metadata -> Assets)
  -> AssetIdQuote -- ^ "assetIdQuote" -  Requested exchange rate quote asset identifier (from the Metadata -> Assets)
  -> ExchangeRatesRealtimeRESTRequest GetSpecificRate MimeNoContent V1ExchangeRate accept
getSpecificRate  _ (AssetIdBase assetIdBase) (AssetIdQuote assetIdQuote) =
  _mkRequest "GET" ["/v1/exchangerate/",toPath assetIdBase,"/",toPath assetIdQuote]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyAPIKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyJWT)

data GetSpecificRate  
-- | @application/json@
instance Produces GetSpecificRate MimeJSON
-- | @application/x-msgpack@
instance Produces GetSpecificRate MimeXMsgpack
-- | @text/json@
instance Produces GetSpecificRate MimeTextJson
-- | @text/plain@
instance Produces GetSpecificRate MimePlainText


-- *** v1ExchangerateAssetIdBaseGet

-- | @GET \/v1\/exchangerate\/{asset_id_base}@
-- 
-- Get all current rates
-- 
-- Get the current exchange rate between requested asset and all other assets.              :::info If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements. :::              :::info You can invert the rates by using Y = 1 / X equation, for example BTC/USD = 1 / (USD/BTC); :::
-- 
-- AuthMethod: 'AuthApiKeyAPIKey', 'AuthApiKeyJWT'
-- 
v1ExchangerateAssetIdBaseGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> AssetIdBase -- ^ "assetIdBase" -  Requested exchange rates base asset identifier (from the Metadata -> Assets)
  -> ExchangeRatesRealtimeRESTRequest V1ExchangerateAssetIdBaseGet MimeNoContent V1ExchangeRates accept
v1ExchangerateAssetIdBaseGet  _ (AssetIdBase assetIdBase) =
  _mkRequest "GET" ["/v1/exchangerate/",toPath assetIdBase]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyAPIKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyJWT)

data V1ExchangerateAssetIdBaseGet  

-- | /Optional Param/ "filter_asset_id" - Comma or semicolon delimited asset identifiers used to filter response (optional)
instance HasOptionalParam V1ExchangerateAssetIdBaseGet FilterAssetId where
  applyOptionalParam req (FilterAssetId xs) =
    req `addQuery` toQuery ("filter_asset_id", Just xs)

-- | /Optional Param/ "invert" - True will invert all the rates (optional, if true then rates will be calculated as `rate = 1 / actual_rate` eg. `USD/BTC` as `BTC/USD`)
instance HasOptionalParam V1ExchangerateAssetIdBaseGet Invert where
  applyOptionalParam req (Invert xs) =
    req `addQuery` toQuery ("invert", Just xs)
-- | @application/json@
instance Produces V1ExchangerateAssetIdBaseGet MimeJSON
-- | @application/x-msgpack@
instance Produces V1ExchangerateAssetIdBaseGet MimeXMsgpack
-- | @text/json@
instance Produces V1ExchangerateAssetIdBaseGet MimeTextJson
-- | @text/plain@
instance Produces V1ExchangerateAssetIdBaseGet MimePlainText

