/*
 * Exchange Rates Realtime REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.V1ExchangeRate;
import org.openapitools.client.model.V1ExchangeRates;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExchangeRatesApi
 */
@Disabled
public class ExchangeRatesApiTest {

    private final ExchangeRatesApi api = new ExchangeRatesApi();

    /**
     * Get specific rate
     *
     * Retrieves the exchange rate for a specific base and quote asset at a given time or the current rate.              :::info If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements. :::
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificRateTest() throws ApiException {
        String assetIdBase = null;
        String assetIdQuote = null;
        V1ExchangeRate response = api.getSpecificRate(assetIdBase, assetIdQuote);
        // TODO: test validations
    }

    /**
     * Get all current rates
     *
     * Get the current exchange rate between requested asset and all other assets.              :::info If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements. :::              :::info You can invert the rates by using Y &#x3D; 1 / X equation, for example BTC/USD &#x3D; 1 / (USD/BTC); :::
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1ExchangerateAssetIdBaseGetTest() throws ApiException {
        String assetIdBase = null;
        String filterAssetId = null;
        Boolean invert = null;
        V1ExchangeRates response = api.v1ExchangerateAssetIdBaseGet(assetIdBase, filterAssetId, invert);
        // TODO: test validations
    }

}
