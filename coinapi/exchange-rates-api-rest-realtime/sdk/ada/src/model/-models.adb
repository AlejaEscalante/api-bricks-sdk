--  Exchange Rates Realtime REST API
--  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
--
--  The version of the OpenAPI document: v1
--  Contact: support@apibricks.io
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.14.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

package body .Models is
   pragma Style_Checks ("-bmrIu");

   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1ChainNetworkAddress_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("chain_id", Value.Chain_Id);
      Into.Write_Entity ("network_id", Value.Network_Id);
      Into.Write_Entity ("address", Value.Address);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1ChainNetworkAddress_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1ChainNetworkAddress_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "chain_id", Value.Chain_Id);
      Swagger.Streams.Deserialize (Object, "network_id", Value.Network_Id);
      Swagger.Streams.Deserialize (Object, "address", Value.Address);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1ChainNetworkAddress_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1ChainNetworkAddress_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1ExchangeRate_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Time.Is_Null then
         Into.Write_Entity ("time", Value.Time);
      end if;
      Into.Write_Entity ("asset_id_base", Value.Asset_Id_Base);
      Into.Write_Entity ("asset_id_quote", Value.Asset_Id_Quote);
      Serialize (Into, "rate", Value.Rate);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1ExchangeRate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1ExchangeRate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "time", Value.Time);
      Swagger.Streams.Deserialize (Object, "asset_id_base", Value.Asset_Id_Base);
      Swagger.Streams.Deserialize (Object, "asset_id_quote", Value.Asset_Id_Quote);
      Swagger.Streams.Deserialize (Object, "rate", Value.Rate);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1ExchangeRate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1ExchangeRate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1ExchangeRatesRate_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Time.Is_Null then
         Into.Write_Entity ("time", Value.Time);
      end if;
      Into.Write_Entity ("asset_id_quote", Value.Asset_Id_Quote);
      Serialize (Into, "rate", Value.Rate);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1ExchangeRatesRate_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1ExchangeRatesRate_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "time", Value.Time);
      Swagger.Streams.Deserialize (Object, "asset_id_quote", Value.Asset_Id_Quote);
      Swagger.Streams.Deserialize (Object, "rate", Value.Rate);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1ExchangeRatesRate_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1ExchangeRatesRate_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1Icon_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("exchange_id", Value.Exchange_Id);
      Into.Write_Entity ("asset_id", Value.Asset_Id);
      Into.Write_Entity ("url", Value.Url);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1Icon_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1Icon_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "exchange_id", Value.Exchange_Id);
      Swagger.Streams.Deserialize (Object, "asset_id", Value.Asset_Id);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1Icon_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1Icon_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1Asset_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("asset_id", Value.Asset_Id);
      Into.Write_Entity ("name", Value.Name);
      if not Value.Type_Is_Crypto.Is_Null then
         Into.Write_Entity ("type_is_crypto", Value.Type_Is_Crypto);
      end if;
      Into.Write_Entity ("data_quote_start", Value.Data_Quote_Start);
      Into.Write_Entity ("data_quote_end", Value.Data_Quote_End);
      Into.Write_Entity ("data_orderbook_start", Value.Data_Orderbook_Start);
      Into.Write_Entity ("data_orderbook_end", Value.Data_Orderbook_End);
      Into.Write_Entity ("data_trade_start", Value.Data_Trade_Start);
      Into.Write_Entity ("data_trade_end", Value.Data_Trade_End);
      Into.Write_Entity ("data_symbols_count", Value.Data_Symbols_Count);
      Serialize (Into, "volume_1hrs_usd", Value.Volume_1hrs_Usd);
      Serialize (Into, "volume_1day_usd", Value.Volume_1day_Usd);
      Serialize (Into, "volume_1mth_usd", Value.Volume_1mth_Usd);
      Serialize (Into, "price_usd", Value.Price_Usd);
      Into.Write_Entity ("id_icon", Value.Id_Icon);
      Serialize (Into, "supply_current", Value.Supply_Current);
      Serialize (Into, "supply_total", Value.Supply_Total);
      Serialize (Into, "supply_max", Value.Supply_Max);
      Serialize (Into, "chain_addresses", Value.Chain_Addresses);
      Into.Write_Entity ("data_start", Value.Data_Start);
      Into.Write_Entity ("data_end", Value.Data_End);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1Asset_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1Asset_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "asset_id", Value.Asset_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "type_is_crypto", Value.Type_Is_Crypto);
      Swagger.Streams.Deserialize (Object, "data_quote_start", Value.Data_Quote_Start);
      Swagger.Streams.Deserialize (Object, "data_quote_end", Value.Data_Quote_End);
      Swagger.Streams.Deserialize (Object, "data_orderbook_start", Value.Data_Orderbook_Start);
      Swagger.Streams.Deserialize (Object, "data_orderbook_end", Value.Data_Orderbook_End);
      Swagger.Streams.Deserialize (Object, "data_trade_start", Value.Data_Trade_Start);
      Swagger.Streams.Deserialize (Object, "data_trade_end", Value.Data_Trade_End);
      Swagger.Streams.Deserialize (Object, "data_symbols_count", Value.Data_Symbols_Count);
      Swagger.Streams.Deserialize (Object, "volume_1hrs_usd", Value.Volume_1hrs_Usd);
      Swagger.Streams.Deserialize (Object, "volume_1day_usd", Value.Volume_1day_Usd);
      Swagger.Streams.Deserialize (Object, "volume_1mth_usd", Value.Volume_1mth_Usd);
      Swagger.Streams.Deserialize (Object, "price_usd", Value.Price_Usd);
      Swagger.Streams.Deserialize (Object, "id_icon", Value.Id_Icon);
      Swagger.Streams.Deserialize (Object, "supply_current", Value.Supply_Current);
      Swagger.Streams.Deserialize (Object, "supply_total", Value.Supply_Total);
      Swagger.Streams.Deserialize (Object, "supply_max", Value.Supply_Max);
      Deserialize (Object, "chain_addresses", Value.Chain_Addresses);
      Swagger.Streams.Deserialize (Object, "data_start", Value.Data_Start);
      Swagger.Streams.Deserialize (Object, "data_end", Value.Data_End);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1Asset_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1Asset_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.V1ExchangeRates_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("asset_id_base", Value.Asset_Id_Base);
      Serialize (Into, "rates", Value.Rates);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in V1ExchangeRates_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.V1ExchangeRates_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "asset_id_base", Value.Asset_Id_Base);
      Deserialize (Object, "rates", Value.Rates);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out V1ExchangeRates_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.V1ExchangeRates_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


end .Models;
