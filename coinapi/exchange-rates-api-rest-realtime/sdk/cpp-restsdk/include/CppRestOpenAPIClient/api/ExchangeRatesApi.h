/**
 * Exchange Rates Realtime REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ExchangeRatesApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_ExchangeRatesApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_ExchangeRatesApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/V1_ExchangeRate.h"
#include "CppRestOpenAPIClient/model/V1_ExchangeRates.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  ExchangeRatesApi 
{
public:

    explicit ExchangeRatesApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~ExchangeRatesApi();

    /// <summary>
    /// Get specific rate
    /// </summary>
    /// <remarks>
    /// Retrieves the exchange rate for a specific base and quote asset at a given time or the current rate.              :::info If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements. :::
    /// </remarks>
    /// <param name="assetIdBase">Requested exchange rate base asset identifier (from the Metadata -&gt; Assets)</param>
    /// <param name="assetIdQuote">Requested exchange rate quote asset identifier (from the Metadata -&gt; Assets)</param>
    pplx::task<std::shared_ptr<V1_ExchangeRate>> get_specific_rate(
        utility::string_t assetIdBase,
        utility::string_t assetIdQuote
    ) const;
    /// <summary>
    /// Get all current rates
    /// </summary>
    /// <remarks>
    /// Get the current exchange rate between requested asset and all other assets.              :::info If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements. :::              :::info You can invert the rates by using Y &#x3D; 1 / X equation, for example BTC/USD &#x3D; 1 / (USD/BTC); :::
    /// </remarks>
    /// <param name="assetIdBase">Requested exchange rates base asset identifier (from the Metadata -&gt; Assets)</param>
    /// <param name="filterAssetId">Comma or semicolon delimited asset identifiers used to filter response (optional) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="invert">True will invert all the rates (optional, if true then rates will be calculated as &#x60;rate &#x3D; 1 / actual_rate&#x60; eg. &#x60;USD/BTC&#x60; as &#x60;BTC/USD&#x60;) (optional, default to false)</param>
    pplx::task<std::shared_ptr<V1_ExchangeRates>> v1ExchangerateAssetIdBaseGet(
        utility::string_t assetIdBase,
        boost::optional<utility::string_t> filterAssetId,
        boost::optional<bool> invert
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_ExchangeRatesApi_H_ */

