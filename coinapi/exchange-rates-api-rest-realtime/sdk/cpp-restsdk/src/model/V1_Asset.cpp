/**
 * Exchange Rates Realtime REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.15.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/V1_Asset.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

V1_Asset::V1_Asset()
{
    m_Asset_id = utility::conversions::to_string_t("");
    m_Asset_idIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Type_is_crypto = 0;
    m_Type_is_cryptoIsSet = false;
    m_Data_quote_start = utility::datetime();
    m_Data_quote_startIsSet = false;
    m_Data_quote_end = utility::datetime();
    m_Data_quote_endIsSet = false;
    m_Data_orderbook_start = utility::datetime();
    m_Data_orderbook_startIsSet = false;
    m_Data_orderbook_end = utility::datetime();
    m_Data_orderbook_endIsSet = false;
    m_Data_trade_start = utility::datetime();
    m_Data_trade_startIsSet = false;
    m_Data_trade_end = utility::datetime();
    m_Data_trade_endIsSet = false;
    m_Data_symbols_count = 0L;
    m_Data_symbols_countIsSet = false;
    m_Volume_1hrs_usd = 0.0;
    m_Volume_1hrs_usdIsSet = false;
    m_Volume_1day_usd = 0.0;
    m_Volume_1day_usdIsSet = false;
    m_Volume_1mth_usd = 0.0;
    m_Volume_1mth_usdIsSet = false;
    m_Price_usd = 0.0;
    m_Price_usdIsSet = false;
    m_Id_icon = utility::conversions::to_string_t("");
    m_Id_iconIsSet = false;
    m_Supply_current = 0.0;
    m_Supply_currentIsSet = false;
    m_Supply_total = 0.0;
    m_Supply_totalIsSet = false;
    m_Supply_max = 0.0;
    m_Supply_maxIsSet = false;
    m_Chain_addressesIsSet = false;
    m_Data_start = utility::conversions::to_string_t("");
    m_Data_startIsSet = false;
    m_Data_end = utility::conversions::to_string_t("");
    m_Data_endIsSet = false;
}

V1_Asset::~V1_Asset()
{
}

void V1_Asset::validate()
{
    // TODO: implement validation
}

web::json::value V1_Asset::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Asset_idIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("asset_id"))] = ModelBase::toJson(m_Asset_id);
    }
    if(m_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Type_is_cryptoIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("type_is_crypto"))] = ModelBase::toJson(m_Type_is_crypto);
    }
    if(m_Data_quote_startIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_quote_start"))] = ModelBase::toJson(m_Data_quote_start);
    }
    if(m_Data_quote_endIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_quote_end"))] = ModelBase::toJson(m_Data_quote_end);
    }
    if(m_Data_orderbook_startIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_orderbook_start"))] = ModelBase::toJson(m_Data_orderbook_start);
    }
    if(m_Data_orderbook_endIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_orderbook_end"))] = ModelBase::toJson(m_Data_orderbook_end);
    }
    if(m_Data_trade_startIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_trade_start"))] = ModelBase::toJson(m_Data_trade_start);
    }
    if(m_Data_trade_endIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_trade_end"))] = ModelBase::toJson(m_Data_trade_end);
    }
    if(m_Data_symbols_countIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_symbols_count"))] = ModelBase::toJson(m_Data_symbols_count);
    }
    if(m_Volume_1hrs_usdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("volume_1hrs_usd"))] = ModelBase::toJson(m_Volume_1hrs_usd);
    }
    if(m_Volume_1day_usdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("volume_1day_usd"))] = ModelBase::toJson(m_Volume_1day_usd);
    }
    if(m_Volume_1mth_usdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("volume_1mth_usd"))] = ModelBase::toJson(m_Volume_1mth_usd);
    }
    if(m_Price_usdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("price_usd"))] = ModelBase::toJson(m_Price_usd);
    }
    if(m_Id_iconIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("id_icon"))] = ModelBase::toJson(m_Id_icon);
    }
    if(m_Supply_currentIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("supply_current"))] = ModelBase::toJson(m_Supply_current);
    }
    if(m_Supply_totalIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("supply_total"))] = ModelBase::toJson(m_Supply_total);
    }
    if(m_Supply_maxIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("supply_max"))] = ModelBase::toJson(m_Supply_max);
    }
    if(m_Chain_addressesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("chain_addresses"))] = ModelBase::toJson(m_Chain_addresses);
    }
    if(m_Data_startIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_start"))] = ModelBase::toJson(m_Data_start);
    }
    if(m_Data_endIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data_end"))] = ModelBase::toJson(m_Data_end);
    }

    return val;
}

bool V1_Asset::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("asset_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("asset_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssetId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssetId);
            setAssetId(refVal_setAssetId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("type_is_crypto"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("type_is_crypto")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTypeIsCrypto;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTypeIsCrypto);
            setTypeIsCrypto(refVal_setTypeIsCrypto);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_quote_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_quote_start")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDataQuoteStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataQuoteStart);
            setDataQuoteStart(refVal_setDataQuoteStart);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_quote_end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_quote_end")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDataQuoteEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataQuoteEnd);
            setDataQuoteEnd(refVal_setDataQuoteEnd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_start")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDataOrderbookStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataOrderbookStart);
            setDataOrderbookStart(refVal_setDataOrderbookStart);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_end")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDataOrderbookEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataOrderbookEnd);
            setDataOrderbookEnd(refVal_setDataOrderbookEnd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_trade_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_trade_start")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDataTradeStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataTradeStart);
            setDataTradeStart(refVal_setDataTradeStart);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_trade_end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_trade_end")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDataTradeEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataTradeEnd);
            setDataTradeEnd(refVal_setDataTradeEnd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_symbols_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_symbols_count")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setDataSymbolsCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataSymbolsCount);
            setDataSymbolsCount(refVal_setDataSymbolsCount);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("volume_1hrs_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("volume_1hrs_usd")));
        if(!fieldValue.is_null())
        {
            double refVal_setVolume1hrsUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolume1hrsUsd);
            setVolume1hrsUsd(refVal_setVolume1hrsUsd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("volume_1day_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("volume_1day_usd")));
        if(!fieldValue.is_null())
        {
            double refVal_setVolume1dayUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolume1dayUsd);
            setVolume1dayUsd(refVal_setVolume1dayUsd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("volume_1mth_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("volume_1mth_usd")));
        if(!fieldValue.is_null())
        {
            double refVal_setVolume1mthUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolume1mthUsd);
            setVolume1mthUsd(refVal_setVolume1mthUsd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("price_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("price_usd")));
        if(!fieldValue.is_null())
        {
            double refVal_setPriceUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriceUsd);
            setPriceUsd(refVal_setPriceUsd);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("id_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("id_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIdIcon;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIdIcon);
            setIdIcon(refVal_setIdIcon);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("supply_current"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("supply_current")));
        if(!fieldValue.is_null())
        {
            double refVal_setSupplyCurrent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupplyCurrent);
            setSupplyCurrent(refVal_setSupplyCurrent);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("supply_total"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("supply_total")));
        if(!fieldValue.is_null())
        {
            double refVal_setSupplyTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupplyTotal);
            setSupplyTotal(refVal_setSupplyTotal);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("supply_max"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("supply_max")));
        if(!fieldValue.is_null())
        {
            double refVal_setSupplyMax;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupplyMax);
            setSupplyMax(refVal_setSupplyMax);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("chain_addresses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("chain_addresses")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V1_ChainNetworkAddress>> refVal_setChainAddresses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChainAddresses);
            setChainAddresses(refVal_setChainAddresses);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_start")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDataStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataStart);
            setDataStart(refVal_setDataStart);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data_end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data_end")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDataEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataEnd);
            setDataEnd(refVal_setDataEnd);
            
        }
    }
    return ok;
}

void V1_Asset::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Asset_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("asset_id")), m_Asset_id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("name")), m_Name));
    }
    if(m_Type_is_cryptoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("type_is_crypto")), m_Type_is_crypto));
    }
    if(m_Data_quote_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_quote_start")), m_Data_quote_start));
    }
    if(m_Data_quote_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_quote_end")), m_Data_quote_end));
    }
    if(m_Data_orderbook_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_orderbook_start")), m_Data_orderbook_start));
    }
    if(m_Data_orderbook_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_orderbook_end")), m_Data_orderbook_end));
    }
    if(m_Data_trade_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_trade_start")), m_Data_trade_start));
    }
    if(m_Data_trade_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_trade_end")), m_Data_trade_end));
    }
    if(m_Data_symbols_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_symbols_count")), m_Data_symbols_count));
    }
    if(m_Volume_1hrs_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("volume_1hrs_usd")), m_Volume_1hrs_usd));
    }
    if(m_Volume_1day_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("volume_1day_usd")), m_Volume_1day_usd));
    }
    if(m_Volume_1mth_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("volume_1mth_usd")), m_Volume_1mth_usd));
    }
    if(m_Price_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("price_usd")), m_Price_usd));
    }
    if(m_Id_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("id_icon")), m_Id_icon));
    }
    if(m_Supply_currentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("supply_current")), m_Supply_current));
    }
    if(m_Supply_totalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("supply_total")), m_Supply_total));
    }
    if(m_Supply_maxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("supply_max")), m_Supply_max));
    }
    if(m_Chain_addressesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("chain_addresses")), m_Chain_addresses));
    }
    if(m_Data_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_start")), m_Data_start));
    }
    if(m_Data_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data_end")), m_Data_end));
    }
}

bool V1_Asset::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("asset_id"))))
    {
        utility::string_t refVal_setAssetId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("asset_id"))), refVal_setAssetId );
        setAssetId(refVal_setAssetId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("type_is_crypto"))))
    {
        int32_t refVal_setTypeIsCrypto;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("type_is_crypto"))), refVal_setTypeIsCrypto );
        setTypeIsCrypto(refVal_setTypeIsCrypto);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_quote_start"))))
    {
        utility::datetime refVal_setDataQuoteStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_quote_start"))), refVal_setDataQuoteStart );
        setDataQuoteStart(refVal_setDataQuoteStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_quote_end"))))
    {
        utility::datetime refVal_setDataQuoteEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_quote_end"))), refVal_setDataQuoteEnd );
        setDataQuoteEnd(refVal_setDataQuoteEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_start"))))
    {
        utility::datetime refVal_setDataOrderbookStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_start"))), refVal_setDataOrderbookStart );
        setDataOrderbookStart(refVal_setDataOrderbookStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_end"))))
    {
        utility::datetime refVal_setDataOrderbookEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_orderbook_end"))), refVal_setDataOrderbookEnd );
        setDataOrderbookEnd(refVal_setDataOrderbookEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_trade_start"))))
    {
        utility::datetime refVal_setDataTradeStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_trade_start"))), refVal_setDataTradeStart );
        setDataTradeStart(refVal_setDataTradeStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_trade_end"))))
    {
        utility::datetime refVal_setDataTradeEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_trade_end"))), refVal_setDataTradeEnd );
        setDataTradeEnd(refVal_setDataTradeEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_symbols_count"))))
    {
        int64_t refVal_setDataSymbolsCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_symbols_count"))), refVal_setDataSymbolsCount );
        setDataSymbolsCount(refVal_setDataSymbolsCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("volume_1hrs_usd"))))
    {
        double refVal_setVolume1hrsUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("volume_1hrs_usd"))), refVal_setVolume1hrsUsd );
        setVolume1hrsUsd(refVal_setVolume1hrsUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("volume_1day_usd"))))
    {
        double refVal_setVolume1dayUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("volume_1day_usd"))), refVal_setVolume1dayUsd );
        setVolume1dayUsd(refVal_setVolume1dayUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("volume_1mth_usd"))))
    {
        double refVal_setVolume1mthUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("volume_1mth_usd"))), refVal_setVolume1mthUsd );
        setVolume1mthUsd(refVal_setVolume1mthUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("price_usd"))))
    {
        double refVal_setPriceUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("price_usd"))), refVal_setPriceUsd );
        setPriceUsd(refVal_setPriceUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("id_icon"))))
    {
        utility::string_t refVal_setIdIcon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("id_icon"))), refVal_setIdIcon );
        setIdIcon(refVal_setIdIcon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("supply_current"))))
    {
        double refVal_setSupplyCurrent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("supply_current"))), refVal_setSupplyCurrent );
        setSupplyCurrent(refVal_setSupplyCurrent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("supply_total"))))
    {
        double refVal_setSupplyTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("supply_total"))), refVal_setSupplyTotal );
        setSupplyTotal(refVal_setSupplyTotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("supply_max"))))
    {
        double refVal_setSupplyMax;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("supply_max"))), refVal_setSupplyMax );
        setSupplyMax(refVal_setSupplyMax);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("chain_addresses"))))
    {
        std::vector<std::shared_ptr<V1_ChainNetworkAddress>> refVal_setChainAddresses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("chain_addresses"))), refVal_setChainAddresses );
        setChainAddresses(refVal_setChainAddresses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_start"))))
    {
        utility::string_t refVal_setDataStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_start"))), refVal_setDataStart );
        setDataStart(refVal_setDataStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data_end"))))
    {
        utility::string_t refVal_setDataEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data_end"))), refVal_setDataEnd );
        setDataEnd(refVal_setDataEnd);
    }
    return ok;
}


utility::string_t V1_Asset::getAssetId() const
{
    return m_Asset_id;
}


void V1_Asset::setAssetId(const utility::string_t& value)
{
    m_Asset_id = value;
    m_Asset_idIsSet = true;
}

bool V1_Asset::assetIdIsSet() const
{
    return m_Asset_idIsSet;
}

void V1_Asset::unsetAsset_id()
{
    m_Asset_idIsSet = false;
}
utility::string_t V1_Asset::getName() const
{
    return m_Name;
}


void V1_Asset::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool V1_Asset::nameIsSet() const
{
    return m_NameIsSet;
}

void V1_Asset::unsetName()
{
    m_NameIsSet = false;
}
int32_t V1_Asset::getTypeIsCrypto() const
{
    return m_Type_is_crypto;
}

void V1_Asset::setTypeIsCrypto(int32_t value)
{
    m_Type_is_crypto = value;
    m_Type_is_cryptoIsSet = true;
}

bool V1_Asset::typeIsCryptoIsSet() const
{
    return m_Type_is_cryptoIsSet;
}

void V1_Asset::unsetType_is_crypto()
{
    m_Type_is_cryptoIsSet = false;
}
utility::datetime V1_Asset::getDataQuoteStart() const
{
    return m_Data_quote_start;
}


void V1_Asset::setDataQuoteStart(const utility::datetime& value)
{
    m_Data_quote_start = value;
    m_Data_quote_startIsSet = true;
}

bool V1_Asset::dataQuoteStartIsSet() const
{
    return m_Data_quote_startIsSet;
}

void V1_Asset::unsetData_quote_start()
{
    m_Data_quote_startIsSet = false;
}
utility::datetime V1_Asset::getDataQuoteEnd() const
{
    return m_Data_quote_end;
}


void V1_Asset::setDataQuoteEnd(const utility::datetime& value)
{
    m_Data_quote_end = value;
    m_Data_quote_endIsSet = true;
}

bool V1_Asset::dataQuoteEndIsSet() const
{
    return m_Data_quote_endIsSet;
}

void V1_Asset::unsetData_quote_end()
{
    m_Data_quote_endIsSet = false;
}
utility::datetime V1_Asset::getDataOrderbookStart() const
{
    return m_Data_orderbook_start;
}


void V1_Asset::setDataOrderbookStart(const utility::datetime& value)
{
    m_Data_orderbook_start = value;
    m_Data_orderbook_startIsSet = true;
}

bool V1_Asset::dataOrderbookStartIsSet() const
{
    return m_Data_orderbook_startIsSet;
}

void V1_Asset::unsetData_orderbook_start()
{
    m_Data_orderbook_startIsSet = false;
}
utility::datetime V1_Asset::getDataOrderbookEnd() const
{
    return m_Data_orderbook_end;
}


void V1_Asset::setDataOrderbookEnd(const utility::datetime& value)
{
    m_Data_orderbook_end = value;
    m_Data_orderbook_endIsSet = true;
}

bool V1_Asset::dataOrderbookEndIsSet() const
{
    return m_Data_orderbook_endIsSet;
}

void V1_Asset::unsetData_orderbook_end()
{
    m_Data_orderbook_endIsSet = false;
}
utility::datetime V1_Asset::getDataTradeStart() const
{
    return m_Data_trade_start;
}


void V1_Asset::setDataTradeStart(const utility::datetime& value)
{
    m_Data_trade_start = value;
    m_Data_trade_startIsSet = true;
}

bool V1_Asset::dataTradeStartIsSet() const
{
    return m_Data_trade_startIsSet;
}

void V1_Asset::unsetData_trade_start()
{
    m_Data_trade_startIsSet = false;
}
utility::datetime V1_Asset::getDataTradeEnd() const
{
    return m_Data_trade_end;
}


void V1_Asset::setDataTradeEnd(const utility::datetime& value)
{
    m_Data_trade_end = value;
    m_Data_trade_endIsSet = true;
}

bool V1_Asset::dataTradeEndIsSet() const
{
    return m_Data_trade_endIsSet;
}

void V1_Asset::unsetData_trade_end()
{
    m_Data_trade_endIsSet = false;
}
int64_t V1_Asset::getDataSymbolsCount() const
{
    return m_Data_symbols_count;
}

void V1_Asset::setDataSymbolsCount(int64_t value)
{
    m_Data_symbols_count = value;
    m_Data_symbols_countIsSet = true;
}

bool V1_Asset::dataSymbolsCountIsSet() const
{
    return m_Data_symbols_countIsSet;
}

void V1_Asset::unsetData_symbols_count()
{
    m_Data_symbols_countIsSet = false;
}
double V1_Asset::getVolume1hrsUsd() const
{
    return m_Volume_1hrs_usd;
}

void V1_Asset::setVolume1hrsUsd(double value)
{
    m_Volume_1hrs_usd = value;
    m_Volume_1hrs_usdIsSet = true;
}

bool V1_Asset::volume1hrsUsdIsSet() const
{
    return m_Volume_1hrs_usdIsSet;
}

void V1_Asset::unsetVolume_1hrs_usd()
{
    m_Volume_1hrs_usdIsSet = false;
}
double V1_Asset::getVolume1dayUsd() const
{
    return m_Volume_1day_usd;
}

void V1_Asset::setVolume1dayUsd(double value)
{
    m_Volume_1day_usd = value;
    m_Volume_1day_usdIsSet = true;
}

bool V1_Asset::volume1dayUsdIsSet() const
{
    return m_Volume_1day_usdIsSet;
}

void V1_Asset::unsetVolume_1day_usd()
{
    m_Volume_1day_usdIsSet = false;
}
double V1_Asset::getVolume1mthUsd() const
{
    return m_Volume_1mth_usd;
}

void V1_Asset::setVolume1mthUsd(double value)
{
    m_Volume_1mth_usd = value;
    m_Volume_1mth_usdIsSet = true;
}

bool V1_Asset::volume1mthUsdIsSet() const
{
    return m_Volume_1mth_usdIsSet;
}

void V1_Asset::unsetVolume_1mth_usd()
{
    m_Volume_1mth_usdIsSet = false;
}
double V1_Asset::getPriceUsd() const
{
    return m_Price_usd;
}

void V1_Asset::setPriceUsd(double value)
{
    m_Price_usd = value;
    m_Price_usdIsSet = true;
}

bool V1_Asset::priceUsdIsSet() const
{
    return m_Price_usdIsSet;
}

void V1_Asset::unsetPrice_usd()
{
    m_Price_usdIsSet = false;
}
utility::string_t V1_Asset::getIdIcon() const
{
    return m_Id_icon;
}


void V1_Asset::setIdIcon(const utility::string_t& value)
{
    m_Id_icon = value;
    m_Id_iconIsSet = true;
}

bool V1_Asset::idIconIsSet() const
{
    return m_Id_iconIsSet;
}

void V1_Asset::unsetId_icon()
{
    m_Id_iconIsSet = false;
}
double V1_Asset::getSupplyCurrent() const
{
    return m_Supply_current;
}

void V1_Asset::setSupplyCurrent(double value)
{
    m_Supply_current = value;
    m_Supply_currentIsSet = true;
}

bool V1_Asset::supplyCurrentIsSet() const
{
    return m_Supply_currentIsSet;
}

void V1_Asset::unsetSupply_current()
{
    m_Supply_currentIsSet = false;
}
double V1_Asset::getSupplyTotal() const
{
    return m_Supply_total;
}

void V1_Asset::setSupplyTotal(double value)
{
    m_Supply_total = value;
    m_Supply_totalIsSet = true;
}

bool V1_Asset::supplyTotalIsSet() const
{
    return m_Supply_totalIsSet;
}

void V1_Asset::unsetSupply_total()
{
    m_Supply_totalIsSet = false;
}
double V1_Asset::getSupplyMax() const
{
    return m_Supply_max;
}

void V1_Asset::setSupplyMax(double value)
{
    m_Supply_max = value;
    m_Supply_maxIsSet = true;
}

bool V1_Asset::supplyMaxIsSet() const
{
    return m_Supply_maxIsSet;
}

void V1_Asset::unsetSupply_max()
{
    m_Supply_maxIsSet = false;
}
std::vector<std::shared_ptr<V1_ChainNetworkAddress>> V1_Asset::getChainAddresses() const
{
    return m_Chain_addresses;
}


void V1_Asset::setChainAddresses(const std::vector<std::shared_ptr<V1_ChainNetworkAddress>>& value)
{
    m_Chain_addresses = value;
    m_Chain_addressesIsSet = true;
}

bool V1_Asset::chainAddressesIsSet() const
{
    return m_Chain_addressesIsSet;
}

void V1_Asset::unsetChain_addresses()
{
    m_Chain_addressesIsSet = false;
}
utility::string_t V1_Asset::getDataStart() const
{
    return m_Data_start;
}


void V1_Asset::setDataStart(const utility::string_t& value)
{
    m_Data_start = value;
    m_Data_startIsSet = true;
}

bool V1_Asset::dataStartIsSet() const
{
    return m_Data_startIsSet;
}

void V1_Asset::unsetData_start()
{
    m_Data_startIsSet = false;
}
utility::string_t V1_Asset::getDataEnd() const
{
    return m_Data_end;
}


void V1_Asset::setDataEnd(const utility::string_t& value)
{
    m_Data_end = value;
    m_Data_endIsSet = true;
}

bool V1_Asset::dataEndIsSet() const
{
    return m_Data_endIsSet;
}

void V1_Asset::unsetData_end()
{
    m_Data_endIsSet = false;
}

}
}
}
}


