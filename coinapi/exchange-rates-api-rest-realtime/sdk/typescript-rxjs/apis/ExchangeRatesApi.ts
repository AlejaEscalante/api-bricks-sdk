// tslint:disable
/**
 * Exchange Rates Realtime REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    V1ExchangeRate,
    V1ExchangeRates,
} from '../models';

export interface GetSpecificRateRequest {
    assetIdBase: string;
    assetIdQuote: string;
}

export interface V1ExchangerateAssetIdBaseGetRequest {
    assetIdBase: string;
    filterAssetId?: string;
    invert?: boolean;
}

/**
 * no description
 */
export class ExchangeRatesApi extends BaseAPI {

    /**
     * Retrieves the exchange rate for a specific base and quote asset at a given time or the current rate.                :::info  If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements.  :::
     * Get specific rate
     */
    getSpecificRate({ assetIdBase, assetIdQuote }: GetSpecificRateRequest): Observable<V1ExchangeRate>
    getSpecificRate({ assetIdBase, assetIdQuote }: GetSpecificRateRequest, opts?: OperationOpts): Observable<AjaxResponse<V1ExchangeRate>>
    getSpecificRate({ assetIdBase, assetIdQuote }: GetSpecificRateRequest, opts?: OperationOpts): Observable<V1ExchangeRate | AjaxResponse<V1ExchangeRate>> {
        throwIfNullOrUndefined(assetIdBase, 'assetIdBase', 'getSpecificRate');
        throwIfNullOrUndefined(assetIdQuote, 'assetIdQuote', 'getSpecificRate');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // APIKey authentication
        };

        return this.request<V1ExchangeRate>({
            url: '/v1/exchangerate/{asset_id_base}/{asset_id_quote}'.replace('{asset_id_base}', encodeURI(assetIdBase)).replace('{asset_id_quote}', encodeURI(assetIdQuote)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get the current exchange rate between requested asset and all other assets.                :::info  If you are using an exchange rate for mission-critical operations, then for best reliability, you should measure the difference between current time and the time returned from the response to ensure that value of the difference between those meets your internal requirements.  :::                :::info  You can invert the rates by using Y = 1 / X equation, for example BTC/USD = 1 / (USD/BTC);  :::
     * Get all current rates
     */
    v1ExchangerateAssetIdBaseGet({ assetIdBase, filterAssetId, invert }: V1ExchangerateAssetIdBaseGetRequest): Observable<V1ExchangeRates>
    v1ExchangerateAssetIdBaseGet({ assetIdBase, filterAssetId, invert }: V1ExchangerateAssetIdBaseGetRequest, opts?: OperationOpts): Observable<AjaxResponse<V1ExchangeRates>>
    v1ExchangerateAssetIdBaseGet({ assetIdBase, filterAssetId, invert }: V1ExchangerateAssetIdBaseGetRequest, opts?: OperationOpts): Observable<V1ExchangeRates | AjaxResponse<V1ExchangeRates>> {
        throwIfNullOrUndefined(assetIdBase, 'assetIdBase', 'v1ExchangerateAssetIdBaseGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // APIKey authentication
        };

        const query: HttpQuery = {};

        if (filterAssetId != null) { query['filter_asset_id'] = filterAssetId; }
        if (invert != null) { query['invert'] = invert; }

        return this.request<V1ExchangeRates>({
            url: '/v1/exchangerate/{asset_id_base}'.replace('{asset_id_base}', encodeURI(assetIdBase)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
