// tslint:disable
/**
 * Exchange Rates Realtime REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    V1Asset,
    V1Icon,
} from '../models';

export interface V1AssetsAssetIdGetRequest {
    assetId: string;
}

export interface V1AssetsGetRequest {
    filterAssetId?: string;
}

export interface V1AssetsIconsSizeGetRequest {
    size: number;
}

/**
 * no description
 */
export class MetadataApi extends BaseAPI {

    /**
     * List all assets by asset ID
     */
    v1AssetsAssetIdGet({ assetId }: V1AssetsAssetIdGetRequest): Observable<Array<V1Asset>>
    v1AssetsAssetIdGet({ assetId }: V1AssetsAssetIdGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1Asset>>>
    v1AssetsAssetIdGet({ assetId }: V1AssetsAssetIdGetRequest, opts?: OperationOpts): Observable<Array<V1Asset> | AjaxResponse<Array<V1Asset>>> {
        throwIfNullOrUndefined(assetId, 'assetId', 'v1AssetsAssetIdGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // APIKey authentication
        };

        return this.request<Array<V1Asset>>({
            url: '/v1/assets/{asset_id}'.replace('{asset_id}', encodeURI(assetId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieves all assets.                :::info  Our asset identifiers are aligned with the ISO 4217 currency codes standard only for fiat money (government or law regulated currency).  :::                :::info  Properties of the output are providing aggregated information from across all symbols related to the specific asset. If you need to calculate your aggregation (e.g., limiting only the particular type of symbols), you should use /v1/symbols endpoint as a data source.  :::
     * List all assets
     */
    v1AssetsGet({ filterAssetId }: V1AssetsGetRequest): Observable<Array<V1Asset>>
    v1AssetsGet({ filterAssetId }: V1AssetsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1Asset>>>
    v1AssetsGet({ filterAssetId }: V1AssetsGetRequest, opts?: OperationOpts): Observable<Array<V1Asset> | AjaxResponse<Array<V1Asset>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // APIKey authentication
        };

        const query: HttpQuery = {};

        if (filterAssetId != null) { query['filter_asset_id'] = filterAssetId; }

        return this.request<Array<V1Asset>>({
            url: '/v1/assets',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets the list of icons (of the given size) for all the assets.
     * List all asset icons
     */
    v1AssetsIconsSizeGet({ size }: V1AssetsIconsSizeGetRequest): Observable<Array<V1Icon>>
    v1AssetsIconsSizeGet({ size }: V1AssetsIconsSizeGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<V1Icon>>>
    v1AssetsIconsSizeGet({ size }: V1AssetsIconsSizeGetRequest, opts?: OperationOpts): Observable<Array<V1Icon> | AjaxResponse<Array<V1Icon>>> {
        throwIfNullOrUndefined(size, 'size', 'v1AssetsIconsSizeGet');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // APIKey authentication
        };

        return this.request<Array<V1Icon>>({
            url: '/v1/assets/icons/{size}'.replace('{size}', encodeURI(size)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}
