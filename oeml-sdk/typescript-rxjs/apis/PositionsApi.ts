// tslint:disable
/**
 * EMS - REST API
 * This section will provide necessary information about the `CoinAPI EMS REST API` protocol. <br/> This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       <br/><br/> Implemented Standards:   * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)  * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)  * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540) 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpQuery, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    MessageReject,
    Position,
} from '../models';

export interface V1PositionsGetRequest {
    exchangeId?: string;
}

/**
 * no description
 */
export class PositionsApi extends BaseAPI {

    /**
     * Get current open positions across all or single exchange.
     * Get open positions
     */
    v1PositionsGet({ exchangeId }: V1PositionsGetRequest): Observable<Array<Position>>
    v1PositionsGet({ exchangeId }: V1PositionsGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<Position>>>
    v1PositionsGet({ exchangeId }: V1PositionsGetRequest, opts?: OperationOpts): Observable<Array<Position> | RawAjaxResponse<Array<Position>>> {

        const query: HttpQuery = {};

        if (exchangeId != null) { query['exchange_id'] = exchangeId; }

        return this.request<Array<Position>>({
            url: '/v1/positions',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

}
