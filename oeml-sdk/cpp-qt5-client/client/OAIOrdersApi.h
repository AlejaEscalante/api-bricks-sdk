/**
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrdersApi_H
#define OAI_OAIOrdersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"

#include "OAIMessage.h"
#include "OAIOrderCancelAllRequest.h"
#include "OAIOrderCancelSingleRequest.h"
#include "OAIOrderExecutionReport.h"
#include "OAIOrderNewSingleRequest.h"
#include "OAIValidationError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrdersApi : public QObject {
    Q_OBJECT

public:
    OAIOrdersApi(const int timeOut = 0);
    ~OAIOrdersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(QString style);
    QString getParamStyleSuffix(QString style);
    QString getParamStyleDelimiter(QString style, QString name, bool isExplode);

    /**
    * @param[in]  oai_order_cancel_all_request OAIOrderCancelAllRequest [required]
    */
    void v1OrdersCancelAllPost(const OAIOrderCancelAllRequest &oai_order_cancel_all_request);

    /**
    * @param[in]  oai_order_cancel_single_request OAIOrderCancelSingleRequest [required]
    */
    void v1OrdersCancelPost(const OAIOrderCancelSingleRequest &oai_order_cancel_single_request);

    /**
    * @param[in]  exchange_id QString [optional]
    */
    void v1OrdersGet(const ::OpenAPI::OptionalParam<QString> &exchange_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_order_new_single_request OAIOrderNewSingleRequest [required]
    */
    void v1OrdersPost(const OAIOrderNewSingleRequest &oai_order_new_single_request);

    /**
    * @param[in]  client_order_id QString [required]
    */
    void v1OrdersStatusClientOrderIdGet(const QString &client_order_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void v1OrdersCancelAllPostCallback(OAIHttpRequestWorker *worker);
    void v1OrdersCancelPostCallback(OAIHttpRequestWorker *worker);
    void v1OrdersGetCallback(OAIHttpRequestWorker *worker);
    void v1OrdersPostCallback(OAIHttpRequestWorker *worker);
    void v1OrdersStatusClientOrderIdGetCallback(OAIHttpRequestWorker *worker);

signals:

    void v1OrdersCancelAllPostSignal(OAIMessage summary);
    void v1OrdersCancelPostSignal(OAIOrderExecutionReport summary);
    void v1OrdersGetSignal(QList<OAIOrderExecutionReport> summary);
    void v1OrdersPostSignal(OAIOrderExecutionReport summary);
    void v1OrdersStatusClientOrderIdGetSignal(OAIOrderExecutionReport summary);

    void v1OrdersCancelAllPostSignalFull(OAIHttpRequestWorker *worker, OAIMessage summary);
    void v1OrdersCancelPostSignalFull(OAIHttpRequestWorker *worker, OAIOrderExecutionReport summary);
    void v1OrdersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrderExecutionReport> summary);
    void v1OrdersPostSignalFull(OAIHttpRequestWorker *worker, OAIOrderExecutionReport summary);
    void v1OrdersStatusClientOrderIdGetSignalFull(OAIHttpRequestWorker *worker, OAIOrderExecutionReport summary);

    void v1OrdersCancelAllPostSignalE(OAIMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1OrdersCancelPostSignalE(OAIOrderExecutionReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1OrdersGetSignalE(QList<OAIOrderExecutionReport> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1OrdersPostSignalE(OAIOrderExecutionReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1OrdersStatusClientOrderIdGetSignalE(OAIOrderExecutionReport summary, QNetworkReply::NetworkError error_type, QString error_str);

    void v1OrdersCancelAllPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1OrdersCancelPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1OrdersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1OrdersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1OrdersStatusClientOrderIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();
};

} // namespace OpenAPI
#endif
