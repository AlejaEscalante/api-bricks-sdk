/*
EMS - Managed Cloud REST API

This section will provide necessary information about the `CoinAPI EMS Managed Cloud REST API` protocol.  <br/><br/> This API is used to manage the overall deployment of **Execution Management System API** (`EMS API`) software,  which means that in this API, you define the accounts, credentials, and configurations for the order destinations or identify the CoinAPI endpoints where you need to connect to access the `EMS API`.  <br/><br/> Implemented Standards:   * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)  * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)  * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)   ### Endpoints <table>   <thead>     <tr>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Production</td>       <td><code>https://ems-mgmt.coinapi.io/</code></td>     </tr>     <tr>       <td>Sandbox</td>       <td><code>https://ems-mgmt-sandbox.coinapi.io/</code></td>     </tr>   </tbody> </table>  ### Authentication  To use resources that require authorized access, you will need to provide an API key to us when making HTTP requests.  There are 2 methods for passing the API key to us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key`  2. Query string parameter named `apikey`  #### Custom authorization header  You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value.  Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: <br/><br/> `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY`  <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside>  #### Query string authorization parameter  You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request.  Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all accounts, then your query string should look like this:  <br/><br/> `GET /v1/accounts?apikey=73034021-THIS-IS-SAMPLE-KEY`  <aside class=\"notice\"> Query string method may be more practical for development activities. </aside> 

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AccountEndpoint struct for AccountEndpoint
type AccountEndpoint struct {
	// Exchange identifier and optional tag identifying specific account configured when the software will be managing multiple accounts on the same exchange; for eg:  <code>BITSTAMP</code> <code>BITSTAMP/7c177641-74bd-4dbe-9b01-2497c12a5f70`</code> <code>BITSTAMP/2574</code> Allowed separators between the exchange identifier and the tag: <code>~/.,:;\\!@#$%^&*-_+=.</code> 
	ExchangeId *string `json:"exchange_id,omitempty"`
	// Location identifier
	LocationId *string `json:"location_id,omitempty"`
	// Endpoint schema
	EndpointSchema *string `json:"endpoint_schema,omitempty"`
	// Endpoint host
	EndpointHost *string `json:"endpoint_host,omitempty"`
	// Endpoint URL
	EndpointUrl *string `json:"endpoint_url,omitempty"`
}

// NewAccountEndpoint instantiates a new AccountEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountEndpoint() *AccountEndpoint {
	this := AccountEndpoint{}
	return &this
}

// NewAccountEndpointWithDefaults instantiates a new AccountEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountEndpointWithDefaults() *AccountEndpoint {
	this := AccountEndpoint{}
	return &this
}

// GetExchangeId returns the ExchangeId field value if set, zero value otherwise.
func (o *AccountEndpoint) GetExchangeId() string {
	if o == nil || o.ExchangeId == nil {
		var ret string
		return ret
	}
	return *o.ExchangeId
}

// GetExchangeIdOk returns a tuple with the ExchangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountEndpoint) GetExchangeIdOk() (*string, bool) {
	if o == nil || o.ExchangeId == nil {
		return nil, false
	}
	return o.ExchangeId, true
}

// HasExchangeId returns a boolean if a field has been set.
func (o *AccountEndpoint) HasExchangeId() bool {
	if o != nil && o.ExchangeId != nil {
		return true
	}

	return false
}

// SetExchangeId gets a reference to the given string and assigns it to the ExchangeId field.
func (o *AccountEndpoint) SetExchangeId(v string) {
	o.ExchangeId = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise.
func (o *AccountEndpoint) GetLocationId() string {
	if o == nil || o.LocationId == nil {
		var ret string
		return ret
	}
	return *o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountEndpoint) GetLocationIdOk() (*string, bool) {
	if o == nil || o.LocationId == nil {
		return nil, false
	}
	return o.LocationId, true
}

// HasLocationId returns a boolean if a field has been set.
func (o *AccountEndpoint) HasLocationId() bool {
	if o != nil && o.LocationId != nil {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given string and assigns it to the LocationId field.
func (o *AccountEndpoint) SetLocationId(v string) {
	o.LocationId = &v
}

// GetEndpointSchema returns the EndpointSchema field value if set, zero value otherwise.
func (o *AccountEndpoint) GetEndpointSchema() string {
	if o == nil || o.EndpointSchema == nil {
		var ret string
		return ret
	}
	return *o.EndpointSchema
}

// GetEndpointSchemaOk returns a tuple with the EndpointSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountEndpoint) GetEndpointSchemaOk() (*string, bool) {
	if o == nil || o.EndpointSchema == nil {
		return nil, false
	}
	return o.EndpointSchema, true
}

// HasEndpointSchema returns a boolean if a field has been set.
func (o *AccountEndpoint) HasEndpointSchema() bool {
	if o != nil && o.EndpointSchema != nil {
		return true
	}

	return false
}

// SetEndpointSchema gets a reference to the given string and assigns it to the EndpointSchema field.
func (o *AccountEndpoint) SetEndpointSchema(v string) {
	o.EndpointSchema = &v
}

// GetEndpointHost returns the EndpointHost field value if set, zero value otherwise.
func (o *AccountEndpoint) GetEndpointHost() string {
	if o == nil || o.EndpointHost == nil {
		var ret string
		return ret
	}
	return *o.EndpointHost
}

// GetEndpointHostOk returns a tuple with the EndpointHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountEndpoint) GetEndpointHostOk() (*string, bool) {
	if o == nil || o.EndpointHost == nil {
		return nil, false
	}
	return o.EndpointHost, true
}

// HasEndpointHost returns a boolean if a field has been set.
func (o *AccountEndpoint) HasEndpointHost() bool {
	if o != nil && o.EndpointHost != nil {
		return true
	}

	return false
}

// SetEndpointHost gets a reference to the given string and assigns it to the EndpointHost field.
func (o *AccountEndpoint) SetEndpointHost(v string) {
	o.EndpointHost = &v
}

// GetEndpointUrl returns the EndpointUrl field value if set, zero value otherwise.
func (o *AccountEndpoint) GetEndpointUrl() string {
	if o == nil || o.EndpointUrl == nil {
		var ret string
		return ret
	}
	return *o.EndpointUrl
}

// GetEndpointUrlOk returns a tuple with the EndpointUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountEndpoint) GetEndpointUrlOk() (*string, bool) {
	if o == nil || o.EndpointUrl == nil {
		return nil, false
	}
	return o.EndpointUrl, true
}

// HasEndpointUrl returns a boolean if a field has been set.
func (o *AccountEndpoint) HasEndpointUrl() bool {
	if o != nil && o.EndpointUrl != nil {
		return true
	}

	return false
}

// SetEndpointUrl gets a reference to the given string and assigns it to the EndpointUrl field.
func (o *AccountEndpoint) SetEndpointUrl(v string) {
	o.EndpointUrl = &v
}

func (o AccountEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExchangeId != nil {
		toSerialize["exchange_id"] = o.ExchangeId
	}
	if o.LocationId != nil {
		toSerialize["location_id"] = o.LocationId
	}
	if o.EndpointSchema != nil {
		toSerialize["endpoint_schema"] = o.EndpointSchema
	}
	if o.EndpointHost != nil {
		toSerialize["endpoint_host"] = o.EndpointHost
	}
	if o.EndpointUrl != nil {
		toSerialize["endpoint_url"] = o.EndpointUrl
	}
	return json.Marshal(toSerialize)
}

type NullableAccountEndpoint struct {
	value *AccountEndpoint
	isSet bool
}

func (v NullableAccountEndpoint) Get() *AccountEndpoint {
	return v.value
}

func (v *NullableAccountEndpoint) Set(val *AccountEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountEndpoint(val *AccountEndpoint) *NullableAccountEndpoint {
	return &NullableAccountEndpoint{value: val, isSet: true}
}

func (v NullableAccountEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


