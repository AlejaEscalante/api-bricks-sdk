/**
 * EMS - Managed Cloud REST API
 * This section will provide necessary information about the `CoinAPI EMS Managed Cloud REST API` protocol.  <br/><br/> This API is used to manage the overall deployment of **Execution Management System API** (`EMS API`) software,  which means that in this API, you define the accounts, credentials, and configurations for the order destinations or identify the CoinAPI endpoints where you need to connect to access the `EMS API`.  <br/><br/> Implemented Standards:   * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)  * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)  * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)   ### Endpoints <table>   <thead>     <tr>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Production</td>       <td><code>https://ems-mgmt.coinapi.io/</code></td>     </tr>     <tr>       <td>Sandbox</td>       <td><code>https://ems-mgmt-sandbox.coinapi.io/</code></td>     </tr>   </tbody> </table>  ### Authentication  To use resources that require authorized access, you will need to provide an API key to us when making HTTP requests.  There are 2 methods for passing the API key to us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key`  2. Query string parameter named `apikey`  #### Custom authorization header  You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value.  Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: <br/><br/> `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY`  <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside>  #### Query string authorization parameter  You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request.  Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all accounts, then your query string should look like this:  <br/><br/> `GET /v1/accounts?apikey=73034021-THIS-IS-SAMPLE-KEY`  <aside class=\"notice\"> Query string method may be more practical for development activities. </aside> 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import org.openapitools.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AccountData".equalsIgnoreCase(className)) {
      return new TypeToken<List<AccountData>>(){}.getType();
    }
    
    if ("AccountEndpoint".equalsIgnoreCase(className)) {
      return new TypeToken<List<AccountEndpoint>>(){}.getType();
    }
    
    if ("AccountInfo".equalsIgnoreCase(className)) {
      return new TypeToken<List<AccountInfo>>(){}.getType();
    }
    
    if ("ExchangeLoginRequire".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExchangeLoginRequire>>(){}.getType();
    }
    
    if ("GetAccount".equalsIgnoreCase(className)) {
      return new TypeToken<List<GetAccount>>(){}.getType();
    }
    
    if ("KeyValue".equalsIgnoreCase(className)) {
      return new TypeToken<List<KeyValue>>(){}.getType();
    }
    
    if ("Locations".equalsIgnoreCase(className)) {
      return new TypeToken<List<Locations>>(){}.getType();
    }
    
    if ("UpdateAccount".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpdateAccount>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AccountData".equalsIgnoreCase(className)) {
      return new TypeToken<AccountData>(){}.getType();
    }
    
    if ("AccountEndpoint".equalsIgnoreCase(className)) {
      return new TypeToken<AccountEndpoint>(){}.getType();
    }
    
    if ("AccountInfo".equalsIgnoreCase(className)) {
      return new TypeToken<AccountInfo>(){}.getType();
    }
    
    if ("ExchangeLoginRequire".equalsIgnoreCase(className)) {
      return new TypeToken<ExchangeLoginRequire>(){}.getType();
    }
    
    if ("GetAccount".equalsIgnoreCase(className)) {
      return new TypeToken<GetAccount>(){}.getType();
    }
    
    if ("KeyValue".equalsIgnoreCase(className)) {
      return new TypeToken<KeyValue>(){}.getType();
    }
    
    if ("Locations".equalsIgnoreCase(className)) {
      return new TypeToken<Locations>(){}.getType();
    }
    
    if ("UpdateAccount".equalsIgnoreCase(className)) {
      return new TypeToken<UpdateAccount>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
