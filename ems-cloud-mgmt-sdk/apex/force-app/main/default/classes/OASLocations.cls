/*
 * EMS - Managed Cloud REST API
 * This section will provide necessary information about the `CoinAPI EMS Managed Cloud REST API` protocol. \n<br/><br/>\nThis API is used to manage the overall deployment of **Execution Management System API** (`EMS API`) software, \nwhich means that in this API, you define the accounts, credentials, and configurations for the order destinations or identify the CoinAPI endpoints where you need to connect to access the `EMS API`. \n<br/><br/>\nImplemented Standards:\n\n * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)\n * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)\n * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)\n \n### Endpoints\n<table>\n  <thead>\n    <tr>\n      <th>Environment</th>\n      <th>Url</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Production</td>\n      <td><code>https://ems-mgmt.coinapi.io/</code></td>\n    </tr>\n    <tr>\n      <td>Sandbox</td>\n      <td><code>https://ems-mgmt-sandbox.coinapi.io/</code></td>\n    </tr>\n  </tbody>\n</table>\n\n### Authentication\n\nTo use resources that require authorized access, you will need to provide an API key to us when making HTTP requests.\n\nThere are 2 methods for passing the API key to us, you only need to use one:\n\n 1. Custom authorization header named `X-CoinAPI-Key`\n 2. Query string parameter named `apikey`\n\n#### Custom authorization header\n\nYou can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value.\n\nAssuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like:\n<br/><br/>\n`X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY`\n\n<aside class="success">This method is recommended by us and you should use it in production environments.</aside>\n\n#### Query string authorization parameter\n\nYou can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request.\n\nAssuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all accounts, then your query string should look like this: \n<br/><br/>\n`GET /v1/accounts?apikey=73034021-THIS-IS-SAMPLE-KEY`\n\n<aside class="notice">\nQuery string method may be more practical for development activities.\n</aside>\n
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASLocations
 */
public class OASLocations implements OAS.MappedProperties {
    /**
     * CoinAPI location identifier
     * @return locationId
     */
    public String locationId { get; set; }

    /**
     * Identifier of the region by the location provider
     * @return regionName
     */
    public String regionName { get; set; }

    /**
     * Identifier of the location provider
     * @return providerName
     */
    public String providerName { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'location_id' => 'locationId',
        'region_name' => 'regionName',
        'provider_name' => 'providerName'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'location_id' => 'locationId',
        'region_name' => 'regionName',
        'provider_name' => 'providerName'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'location_id' => 'locationId',
        'region_name' => 'regionName',
        'provider_name' => 'providerName'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASLocations getExample() {
        OASLocations locations = new OASLocations();
          locations.locationId = 'aws-us-east-1';
          locations.regionName = 'us-east-1';
          locations.providerName = 'aws';
        return locations;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASLocations) {           
            OASLocations locations = (OASLocations) obj;
            return this.locationId == locations.locationId
                && this.regionName == locations.regionName
                && this.providerName == locations.providerName;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (locationId == null ? 0 : System.hashCode(locationId));
        hashCode = (17 * hashCode) + (regionName == null ? 0 : System.hashCode(regionName));
        hashCode = (17 * hashCode) + (providerName == null ? 0 : System.hashCode(providerName));
        return hashCode;
    }
}

