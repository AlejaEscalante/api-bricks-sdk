// tslint:disable
/**
 * EMS - Managed Cloud REST API
 * This section will provide necessary information about the `CoinAPI EMS Managed Cloud REST API` protocol.  <br/><br/> This API is used to manage the overall deployment of **Execution Management System API** (`EMS API`) software,  which means that in this API, you define the accounts, credentials, and configurations for the order destinations or identify the CoinAPI endpoints where you need to connect to access the `EMS API`.  <br/><br/> Implemented Standards:   * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)  * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)  * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)   ### Endpoints <table>   <thead>     <tr>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Production</td>       <td><code>https://ems-mgmt.coinapi.io/</code></td>     </tr>     <tr>       <td>Sandbox</td>       <td><code>https://ems-mgmt-sandbox.coinapi.io/</code></td>     </tr>   </tbody> </table>  ### Authentication  To use resources that require authorized access, you will need to provide an API key to us when making HTTP requests.  There are 2 methods for passing the API key to us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key`  2. Query string parameter named `apikey`  #### Custom authorization header  You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value.  Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: <br/><br/> `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY`  <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside>  #### Query string authorization parameter  You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request.  Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all accounts, then your query string should look like this:  <br/><br/> `GET /v1/accounts?apikey=73034021-THIS-IS-SAMPLE-KEY`  <aside class=\"notice\"> Query string method may be more practical for development activities. </aside> 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    AccountData,
    GetAccount,
} from '../models';

export interface DeleteAccountRequest {
    exchangeId: Array<string>;
}

export interface GetAccountRequest {
    filterExchangeId?: Array<string>;
}

export interface PersistAccountRequest {
    body: AccountData;
}

/**
 * no description
 */
export class AccountApi extends BaseAPI {

    /**
     * Delete specific exchange account maintained by the EMS API for your subscription.
     * Delete account
     */
    deleteAccount({ exchangeId }: DeleteAccountRequest): Observable<void>
    deleteAccount({ exchangeId }: DeleteAccountRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    deleteAccount({ exchangeId }: DeleteAccountRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(exchangeId, 'exchangeId', 'deleteAccount');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // APIKeyHeader authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'exchange_id': exchangeId,
        };
        if (this.configuration.apiKey != null) { query['apikey'] = this.configuration.apiKey('apikey'); } // APIKeyQueryParam authentication

        return this.request<void>({
            url: '/v1/accounts',
            method: 'DELETE',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Delete all exchange accounts maintained by the EMS API for your subscription.
     * Delete all accounts
     */
    deleteAccountAll(): Observable<void>
    deleteAccountAll(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    deleteAccountAll(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // APIKeyHeader authentication
        };

        return this.request<void>({
            url: '/v1/accounts/all',
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get all accounts maintained for your subscription in the EMS API.
     * Get accounts
     */
    getAccount({ filterExchangeId }: GetAccountRequest): Observable<Array<GetAccount>>
    getAccount({ filterExchangeId }: GetAccountRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<GetAccount>>>
    getAccount({ filterExchangeId }: GetAccountRequest, opts?: OperationOpts): Observable<Array<GetAccount> | RawAjaxResponse<Array<GetAccount>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // APIKeyHeader authentication
        };

        const query: HttpQuery = {};

        if (filterExchangeId != null) { query['filter_exchange_id'] = filterExchangeId; }
        if (this.configuration.apiKey != null) { query['apikey'] = this.configuration.apiKey('apikey'); } // APIKeyQueryParam authentication

        return this.request<Array<GetAccount>>({
            url: '/v1/accounts',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Add new or update existing exchange account for your subscription in the EMS API.
     * Add or update account
     */
    persistAccount({ body }: PersistAccountRequest): Observable<void>
    persistAccount({ body }: PersistAccountRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    persistAccount({ body }: PersistAccountRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(body, 'body', 'persistAccount');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-CoinAPI-Key': this.configuration.apiKey('X-CoinAPI-Key') }), // APIKeyHeader authentication
        };

        return this.request<void>({
            url: '/v1/accounts',
            method: 'POST',
            headers,
            body: body,
        }, opts?.responseOpts);
    };

}
