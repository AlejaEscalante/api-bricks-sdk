{-
   EMS - Managed Cloud REST API

   This section will provide necessary information about the `CoinAPI EMS Managed Cloud REST API` protocol.  <br/><br/> This API is used to manage the overall deployment of **Execution Management System API** (`EMS API`) software,  which means that in this API, you define the accounts, credentials, and configurations for the order destinations or identify the CoinAPI endpoints where you need to connect to access the `EMS API`.  <br/><br/> Implemented Standards:   * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)  * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)  * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)   ### Endpoints <table>   <thead>     <tr>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Production</td>       <td><code>https://ems-mgmt.coinapi.io/</code></td>     </tr>     <tr>       <td>Sandbox</td>       <td><code>https://ems-mgmt-sandbox.coinapi.io/</code></td>     </tr>   </tbody> </table>  ### Authentication  To use resources that require authorized access, you will need to provide an API key to us when making HTTP requests.  There are 2 methods for passing the API key to us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key`  2. Query string parameter named `apikey`  #### Custom authorization header  You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value.  Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: <br/><br/> `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY`  <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside>  #### Query string authorization parameter  You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request.  Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all accounts, then your query string should look like this:  <br/><br/> `GET /v1/accounts?apikey=73034021-THIS-IS-SAMPLE-KEY`  <aside class=\"notice\"> Query string method may be more practical for development activities. </aside> 

   OpenAPI Version: 3.0.1
   EMS - Managed Cloud REST API API version: v1
   Contact: support@coinapi.io
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : EMS-ManagedCloudREST.API.Account
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module EMS-ManagedCloudREST.API.Account where

import EMS-ManagedCloudREST.Core
import EMS-ManagedCloudREST.MimeTypes
import EMS-ManagedCloudREST.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Account

-- *** deleteAccount

-- | @DELETE \/v1\/accounts@
-- 
-- Delete account
-- 
-- Delete specific exchange account maintained by the EMS API for your subscription.
-- 
-- AuthMethod: 'AuthApiKeyAPIKeyHeader', 'AuthApiKeyAPIKeyQueryParam'
-- 
deleteAccount
  :: ExchangeId -- ^ "exchangeId" -  Exchange identifier of the account to delete
  -> EMS-ManagedCloudRESTRequest DeleteAccount MimeNoContent NoContent MimeNoContent
deleteAccount (ExchangeId exchangeId) =
  _mkRequest "DELETE" ["/v1/accounts"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyAPIKeyHeader)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyAPIKeyQueryParam)
    `addQuery` toQueryColl MultiParamArray ("exchange_id", Just exchangeId)

data DeleteAccount  
instance Produces DeleteAccount MimeNoContent


-- *** deleteAccountAll

-- | @DELETE \/v1\/accounts\/all@
-- 
-- Delete all accounts
-- 
-- Delete all exchange accounts maintained by the EMS API for your subscription.
-- 
-- AuthMethod: 'AuthApiKeyAPIKeyHeader', 'AuthApiKeyAPIKeyQueryParam'
-- 
deleteAccountAll
  :: EMS-ManagedCloudRESTRequest DeleteAccountAll MimeNoContent NoContent MimeNoContent
deleteAccountAll =
  _mkRequest "DELETE" ["/v1/accounts/all"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyAPIKeyHeader)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyAPIKeyQueryParam)

data DeleteAccountAll  
instance Produces DeleteAccountAll MimeNoContent


-- *** getAccount0

-- | @GET \/v1\/accounts@
-- 
-- Get accounts
-- 
-- Get all accounts maintained for your subscription in the EMS API.
-- 
-- AuthMethod: 'AuthApiKeyAPIKeyHeader', 'AuthApiKeyAPIKeyQueryParam'
-- 
getAccount0
  :: EMS-ManagedCloudRESTRequest GetAccount0 MimeNoContent [GetAccount] MimeJSON
getAccount0 =
  _mkRequest "GET" ["/v1/accounts"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyAPIKeyHeader)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyAPIKeyQueryParam)

data GetAccount0  

-- | /Optional Param/ "filter_exchange_id" - Exchange id of the specific account to provide single account instead of the list of all accounts
instance HasOptionalParam GetAccount0 FilterExchangeId where
  applyOptionalParam req (FilterExchangeId xs) =
    req `addQuery` toQueryColl MultiParamArray ("filter_exchange_id", Just xs)
-- | @application/json@
instance Produces GetAccount0 MimeJSON


-- *** persistAccount

-- | @POST \/v1\/accounts@
-- 
-- Add or update account
-- 
-- Add new or update existing exchange account for your subscription in the EMS API.
-- 
-- AuthMethod: 'AuthApiKeyAPIKeyHeader', 'AuthApiKeyAPIKeyQueryParam'
-- 
persistAccount
  :: (Consumes PersistAccount MimeJSON, MimeRender MimeJSON AccountData)
  => AccountData -- ^ "body" -  Exchange account object that needs to be add/update to the EMS
  -> EMS-ManagedCloudRESTRequest PersistAccount MimeJSON NoContent MimeNoContent
persistAccount body =
  _mkRequest "POST" ["/v1/accounts"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyAPIKeyHeader)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyAPIKeyQueryParam)
    `setBodyParam` body

data PersistAccount 

-- | /Body Param/ "body" - Exchange account object that needs to be add/update to the EMS
instance HasBodyParam PersistAccount AccountData 

-- | @application/json@
instance Consumes PersistAccount MimeJSON

instance Produces PersistAccount MimeNoContent

