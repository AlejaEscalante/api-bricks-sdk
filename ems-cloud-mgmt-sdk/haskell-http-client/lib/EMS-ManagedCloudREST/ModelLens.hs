{-
   EMS - Managed Cloud REST API

   This section will provide necessary information about the `CoinAPI EMS Managed Cloud REST API` protocol.  <br/><br/> This API is used to manage the overall deployment of **Execution Management System API** (`EMS API`) software,  which means that in this API, you define the accounts, credentials, and configurations for the order destinations or identify the CoinAPI endpoints where you need to connect to access the `EMS API`.  <br/><br/> Implemented Standards:   * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)  * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)  * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)   ### Endpoints <table>   <thead>     <tr>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Production</td>       <td><code>https://ems-mgmt.coinapi.io/</code></td>     </tr>     <tr>       <td>Sandbox</td>       <td><code>https://ems-mgmt-sandbox.coinapi.io/</code></td>     </tr>   </tbody> </table>  ### Authentication  To use resources that require authorized access, you will need to provide an API key to us when making HTTP requests.  There are 2 methods for passing the API key to us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key`  2. Query string parameter named `apikey`  #### Custom authorization header  You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value.  Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: <br/><br/> `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY`  <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside>  #### Query string authorization parameter  You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request.  Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all accounts, then your query string should look like this:  <br/><br/> `GET /v1/accounts?apikey=73034021-THIS-IS-SAMPLE-KEY`  <aside class=\"notice\"> Query string method may be more practical for development activities. </aside> 

   OpenAPI Version: 3.0.1
   EMS - Managed Cloud REST API API version: v1
   Contact: support@coinapi.io
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : EMS-ManagedCloudREST.Lens
-}

{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module EMS-ManagedCloudREST.ModelLens where

import qualified Data.Aeson as A
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Data, Typeable)
import qualified Data.Map as Map
import qualified Data.Set as Set
import qualified Data.Time as TI

import Data.Text (Text)

import Prelude (($), (.),(<$>),(<*>),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

import EMS-ManagedCloudREST.Model
import EMS-ManagedCloudREST.Core


-- * AccountData

-- | 'accountDataExchangeId' Lens
accountDataExchangeIdL :: Lens_' AccountData (Maybe Text)
accountDataExchangeIdL f AccountData{..} = (\accountDataExchangeId -> AccountData { accountDataExchangeId, ..} ) <$> f accountDataExchangeId
{-# INLINE accountDataExchangeIdL #-}

-- | 'accountDataParameters' Lens
accountDataParametersL :: Lens_' AccountData (Maybe [KeyValue])
accountDataParametersL f AccountData{..} = (\accountDataParameters -> AccountData { accountDataParameters, ..} ) <$> f accountDataParameters
{-# INLINE accountDataParametersL #-}



-- * AccountEndpoint

-- | 'accountEndpointExchangeId' Lens
accountEndpointExchangeIdL :: Lens_' AccountEndpoint (Maybe Text)
accountEndpointExchangeIdL f AccountEndpoint{..} = (\accountEndpointExchangeId -> AccountEndpoint { accountEndpointExchangeId, ..} ) <$> f accountEndpointExchangeId
{-# INLINE accountEndpointExchangeIdL #-}

-- | 'accountEndpointLocationId' Lens
accountEndpointLocationIdL :: Lens_' AccountEndpoint (Maybe Text)
accountEndpointLocationIdL f AccountEndpoint{..} = (\accountEndpointLocationId -> AccountEndpoint { accountEndpointLocationId, ..} ) <$> f accountEndpointLocationId
{-# INLINE accountEndpointLocationIdL #-}

-- | 'accountEndpointEndpointSchema' Lens
accountEndpointEndpointSchemaL :: Lens_' AccountEndpoint (Maybe Text)
accountEndpointEndpointSchemaL f AccountEndpoint{..} = (\accountEndpointEndpointSchema -> AccountEndpoint { accountEndpointEndpointSchema, ..} ) <$> f accountEndpointEndpointSchema
{-# INLINE accountEndpointEndpointSchemaL #-}

-- | 'accountEndpointEndpointHost' Lens
accountEndpointEndpointHostL :: Lens_' AccountEndpoint (Maybe Text)
accountEndpointEndpointHostL f AccountEndpoint{..} = (\accountEndpointEndpointHost -> AccountEndpoint { accountEndpointEndpointHost, ..} ) <$> f accountEndpointEndpointHost
{-# INLINE accountEndpointEndpointHostL #-}

-- | 'accountEndpointEndpointUrl' Lens
accountEndpointEndpointUrlL :: Lens_' AccountEndpoint (Maybe Text)
accountEndpointEndpointUrlL f AccountEndpoint{..} = (\accountEndpointEndpointUrl -> AccountEndpoint { accountEndpointEndpointUrl, ..} ) <$> f accountEndpointEndpointUrl
{-# INLINE accountEndpointEndpointUrlL #-}



-- * AccountInfo

-- | 'accountInfoExchangeId' Lens
accountInfoExchangeIdL :: Lens_' AccountInfo (Maybe Text)
accountInfoExchangeIdL f AccountInfo{..} = (\accountInfoExchangeId -> AccountInfo { accountInfoExchangeId, ..} ) <$> f accountInfoExchangeId
{-# INLINE accountInfoExchangeIdL #-}



-- * ExchangeLoginRequire

-- | 'exchangeLoginRequireExchangeId' Lens
exchangeLoginRequireExchangeIdL :: Lens_' ExchangeLoginRequire (Maybe Text)
exchangeLoginRequireExchangeIdL f ExchangeLoginRequire{..} = (\exchangeLoginRequireExchangeId -> ExchangeLoginRequire { exchangeLoginRequireExchangeId, ..} ) <$> f exchangeLoginRequireExchangeId
{-# INLINE exchangeLoginRequireExchangeIdL #-}

-- | 'exchangeLoginRequireLocationId' Lens
exchangeLoginRequireLocationIdL :: Lens_' ExchangeLoginRequire (Maybe Text)
exchangeLoginRequireLocationIdL f ExchangeLoginRequire{..} = (\exchangeLoginRequireLocationId -> ExchangeLoginRequire { exchangeLoginRequireLocationId, ..} ) <$> f exchangeLoginRequireLocationId
{-# INLINE exchangeLoginRequireLocationIdL #-}

-- | 'exchangeLoginRequireRequiredParameters' Lens
exchangeLoginRequireRequiredParametersL :: Lens_' ExchangeLoginRequire (Maybe [Text])
exchangeLoginRequireRequiredParametersL f ExchangeLoginRequire{..} = (\exchangeLoginRequireRequiredParameters -> ExchangeLoginRequire { exchangeLoginRequireRequiredParameters, ..} ) <$> f exchangeLoginRequireRequiredParameters
{-# INLINE exchangeLoginRequireRequiredParametersL #-}



-- * GetAccount

-- | 'getAccountExchangeId' Lens
getAccountExchangeIdL :: Lens_' GetAccount (Maybe Text)
getAccountExchangeIdL f GetAccount{..} = (\getAccountExchangeId -> GetAccount { getAccountExchangeId, ..} ) <$> f getAccountExchangeId
{-# INLINE getAccountExchangeIdL #-}

-- | 'getAccountParameters' Lens
getAccountParametersL :: Lens_' GetAccount (Maybe [KeyValue])
getAccountParametersL f GetAccount{..} = (\getAccountParameters -> GetAccount { getAccountParameters, ..} ) <$> f getAccountParameters
{-# INLINE getAccountParametersL #-}



-- * KeyValue

-- | 'keyValueKey' Lens
keyValueKeyL :: Lens_' KeyValue (Maybe Text)
keyValueKeyL f KeyValue{..} = (\keyValueKey -> KeyValue { keyValueKey, ..} ) <$> f keyValueKey
{-# INLINE keyValueKeyL #-}

-- | 'keyValueValue' Lens
keyValueValueL :: Lens_' KeyValue (Maybe Text)
keyValueValueL f KeyValue{..} = (\keyValueValue -> KeyValue { keyValueValue, ..} ) <$> f keyValueValue
{-# INLINE keyValueValueL #-}



-- * Locations

-- | 'locationsLocationId' Lens
locationsLocationIdL :: Lens_' Locations (Maybe Text)
locationsLocationIdL f Locations{..} = (\locationsLocationId -> Locations { locationsLocationId, ..} ) <$> f locationsLocationId
{-# INLINE locationsLocationIdL #-}

-- | 'locationsRegionName' Lens
locationsRegionNameL :: Lens_' Locations (Maybe Text)
locationsRegionNameL f Locations{..} = (\locationsRegionName -> Locations { locationsRegionName, ..} ) <$> f locationsRegionName
{-# INLINE locationsRegionNameL #-}

-- | 'locationsProviderName' Lens
locationsProviderNameL :: Lens_' Locations (Maybe Text)
locationsProviderNameL f Locations{..} = (\locationsProviderName -> Locations { locationsProviderName, ..} ) <$> f locationsProviderName
{-# INLINE locationsProviderNameL #-}



-- * UpdateAccount

-- | 'updateAccountExchangeId' Lens
updateAccountExchangeIdL :: Lens_' UpdateAccount (Maybe Text)
updateAccountExchangeIdL f UpdateAccount{..} = (\updateAccountExchangeId -> UpdateAccount { updateAccountExchangeId, ..} ) <$> f updateAccountExchangeId
{-# INLINE updateAccountExchangeIdL #-}

-- | 'updateAccountParameters' Lens
updateAccountParametersL :: Lens_' UpdateAccount (Maybe [KeyValue])
updateAccountParametersL f UpdateAccount{..} = (\updateAccountParameters -> UpdateAccount { updateAccountParameters, ..} ) <$> f updateAccountParameters
{-# INLINE updateAccountParametersL #-}


