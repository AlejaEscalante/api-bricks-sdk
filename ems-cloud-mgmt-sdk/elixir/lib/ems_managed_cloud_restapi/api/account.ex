# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule EMS-ManagedCloudRESTAPI.Api.Account do
  @moduledoc """
  API calls for all endpoints tagged `Account`.
  """

  alias EMS-ManagedCloudRESTAPI.Connection
  import EMS-ManagedCloudRESTAPI.RequestBuilder


  @doc """
  Delete account
  Delete specific exchange account maintained by the EMS API for your subscription.

  ## Parameters

  - connection (EMS-ManagedCloudRESTAPI.Connection): Connection to server
  - exchange_id ([String.t]): Exchange identifier of the account to delete
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_account(Tesla.Env.client, list(String.t), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_account(connection, exchange_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/v1/accounts")
    |> add_param(:query, :"exchange_id", exchange_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 404, false}
    ])
  end

  @doc """
  Delete all accounts
  Delete all exchange accounts maintained by the EMS API for your subscription.

  ## Parameters

  - connection (EMS-ManagedCloudRESTAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_account_all(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_account_all(connection, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/v1/accounts/all")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false}
    ])
  end

  @doc """
  Get accounts
  Get all accounts maintained for your subscription in the EMS API.

  ## Parameters

  - connection (EMS-ManagedCloudRESTAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :filter_exchange_id ([String.t]): Exchange id of the specific account to provide single account instead of the list of all accounts
  ## Returns

  {:ok, [%GetAccount{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_account(Tesla.Env.client, keyword()) :: {:ok, list(EMS-ManagedCloudRESTAPI.Model.GetAccount.t)} | {:error, Tesla.Env.t}
  def get_account(connection, opts \\ []) do
    optional_params = %{
      :"filter_exchange_id" => :query
    }
    %{}
    |> method(:get)
    |> url("/v1/accounts")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%EMS-ManagedCloudRESTAPI.Model.GetAccount{}]}
    ])
  end

  @doc """
  Add or update account
  Add new or update existing exchange account for your subscription in the EMS API.

  ## Parameters

  - connection (EMS-ManagedCloudRESTAPI.Connection): Connection to server
  - body (AccountData): Exchange account object that needs to be add/update to the EMS
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec persist_account(Tesla.Env.client, EMS-ManagedCloudRESTAPI.Model.AccountData.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def persist_account(connection, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/v1/accounts")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 400, false},
      { 405, false}
    ])
  end
end
