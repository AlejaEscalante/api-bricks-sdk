note
 description:"[
		EMS - Managed Cloud REST API
 		This section will provide necessary information about the `CoinAPI EMS Managed Cloud REST API` protocol.  <br/><br/> This API is used to manage the overall deployment of **Execution Management System API** (`EMS API`) software,  which means that in this API, you define the accounts, credentials, and configurations for the order destinations or identify the CoinAPI endpoints where you need to connect to access the `EMS API`.  <br/><br/> Implemented Standards:   * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)  * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)  * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)   ### Endpoints <table>   <thead>     <tr>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Production</td>       <td><code>https://ems-mgmt.coinapi.io/</code></td>     </tr>     <tr>       <td>Sandbox</td>       <td><code>https://ems-mgmt-sandbox.coinapi.io/</code></td>     </tr>   </tbody> </table>  ### Authentication  To use resources that require authorized access, you will need to provide an API key to us when making HTTP requests.  There are 2 methods for passing the API key to us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key`  2. Query string parameter named `apikey`  #### Custom authorization header  You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value.  Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: <br/><br/> `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY`  <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside>  #### Query string authorization parameter  You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request.  Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all accounts, then your query string should look like this:  <br/><br/> `GET /v1/accounts?apikey=73034021-THIS-IS-SAMPLE-KEY`  <aside class=\"notice\"> Query string method may be more practical for development activities. </aside> 
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class LOCATIONS




feature --Access

    location_id: detachable STRING_32
      -- CoinAPI location identifier
    region_name: detachable STRING_32
      -- Identifier of the region by the location provider
    provider_name: detachable STRING_32
      -- Identifier of the location provider

feature -- Change Element

    set_location_id (a_name: like location_id)
        -- Set 'location_id' with 'a_name'.
      do
        location_id := a_name
      ensure
        location_id_set: location_id = a_name
      end

    set_region_name (a_name: like region_name)
        -- Set 'region_name' with 'a_name'.
      do
        region_name := a_name
      ensure
        region_name_set: region_name = a_name
      end

    set_provider_name (a_name: like provider_name)
        -- Set 'provider_name' with 'a_name'.
      do
        provider_name := a_name
      ensure
        provider_name_set: provider_name = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass LOCATIONS%N")
        if attached location_id as l_location_id then
          Result.append ("%Nlocation_id:")
          Result.append (l_location_id.out)
          Result.append ("%N")
        end
        if attached region_name as l_region_name then
          Result.append ("%Nregion_name:")
          Result.append (l_region_name.out)
          Result.append ("%N")
        end
        if attached provider_name as l_provider_name then
          Result.append ("%Nprovider_name:")
          Result.append (l_provider_name.out)
          Result.append ("%N")
        end
      end
end

