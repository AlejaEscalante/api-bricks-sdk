// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.FinFeedAPI.SECAPI.REST.V1.Client.ClientUtils;
using APIBricks.FinFeedAPI.SECAPI.REST.V1.Client;

namespace APIBricks.FinFeedAPI.SECAPI.REST.V1.Model
{
    /// <summary>
    /// MvcProblemDetails
    /// </summary>
    public partial class MvcProblemDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MvcProblemDetails" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="title">title</param>
        /// <param name="status">status</param>
        /// <param name="detail">detail</param>
        /// <param name="instance">instance</param>
        [JsonConstructor]
        public MvcProblemDetails(Option<string?> type = default, Option<string?> title = default, Option<int?> status = default, Option<string?> detail = default, Option<string?> instance = default)
        {
            TypeOption = type;
            TitleOption = title;
            StatusOption = status;
            DetailOption = detail;
            InstanceOption = instance;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public int? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of Detail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DetailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [JsonPropertyName("detail")]
        public string? Detail { get { return this.DetailOption; } set { this.DetailOption = new(value); } }

        /// <summary>
        /// Used to track the state of Instance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InstanceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Instance
        /// </summary>
        [JsonPropertyName("instance")]
        public string? Instance { get { return this.InstanceOption; } set { this.InstanceOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MvcProblemDetails {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Instance: ").Append(Instance).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MvcProblemDetails" />
    /// </summary>
    public class MvcProblemDetailsJsonConverter : JsonConverter<MvcProblemDetails>
    {
        /// <summary>
        /// Deserializes json to <see cref="MvcProblemDetails" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MvcProblemDetails Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> type = default;
            Option<string?> title = default;
            Option<int?> status = default;
            Option<string?> detail = default;
            Option<string?> instance = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "status":
                            status = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "detail":
                            detail = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "instance":
                            instance = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new MvcProblemDetails(type, title, status, detail, instance);
        }

        /// <summary>
        /// Serializes a <see cref="MvcProblemDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mvcProblemDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MvcProblemDetails mvcProblemDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, mvcProblemDetails, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MvcProblemDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mvcProblemDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MvcProblemDetails mvcProblemDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            if (mvcProblemDetails.TypeOption.IsSet)
                if (mvcProblemDetails.TypeOption.Value != null)
                    writer.WriteString("type", mvcProblemDetails.Type);
                else
                    writer.WriteNull("type");

            if (mvcProblemDetails.TitleOption.IsSet)
                if (mvcProblemDetails.TitleOption.Value != null)
                    writer.WriteString("title", mvcProblemDetails.Title);
                else
                    writer.WriteNull("title");

            if (mvcProblemDetails.StatusOption.IsSet)
                if (mvcProblemDetails.StatusOption.Value != null)
                    writer.WriteNumber("status", mvcProblemDetails.StatusOption.Value!.Value);
                else
                    writer.WriteNull("status");

            if (mvcProblemDetails.DetailOption.IsSet)
                if (mvcProblemDetails.DetailOption.Value != null)
                    writer.WriteString("detail", mvcProblemDetails.Detail);
                else
                    writer.WriteNull("detail");

            if (mvcProblemDetails.InstanceOption.IsSet)
                if (mvcProblemDetails.InstanceOption.Value != null)
                    writer.WriteString("instance", mvcProblemDetails.Instance);
                else
                    writer.WriteNull("instance");
        }
    }
}
