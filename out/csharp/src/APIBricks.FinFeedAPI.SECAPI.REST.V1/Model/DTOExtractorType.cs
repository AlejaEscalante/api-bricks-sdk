// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.FinFeedAPI.SECAPI.REST.V1.Client.ClientUtils;
using APIBricks.FinFeedAPI.SECAPI.REST.V1.Client;

namespace APIBricks.FinFeedAPI.SECAPI.REST.V1.Model
{
    /// <summary>
    /// Defines DTO.ExtractorType
    /// </summary>
    public enum DTOExtractorType
    {
        /// <summary>
        /// Enum Text for value: text
        /// </summary>
        Text = 1,

        /// <summary>
        /// Enum Html for value: html
        /// </summary>
        Html = 2
    }

    /// <summary>
    /// Converts <see cref="DTOExtractorType"/> to and from the JSON value
    /// </summary>
    public static class DTOExtractorTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="DTOExtractorType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DTOExtractorType FromString(string value)
        {
            if (value.Equals("text"))
                return DTOExtractorType.Text;

            if (value.Equals("html"))
                return DTOExtractorType.Html;

            throw new NotImplementedException($"Could not convert value to type DTOExtractorType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="DTOExtractorType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DTOExtractorType? FromStringOrDefault(string value)
        {
            if (value.Equals("text"))
                return DTOExtractorType.Text;

            if (value.Equals("html"))
                return DTOExtractorType.Html;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DTOExtractorType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(DTOExtractorType value)
        {
            if (value == DTOExtractorType.Text)
                return "text";

            if (value == DTOExtractorType.Html)
                return "html";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DTOExtractorType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class DTOExtractorTypeJsonConverter : JsonConverter<DTOExtractorType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DTOExtractorType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DTOExtractorType? result = rawValue == null
                ? null
                : DTOExtractorTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DTOExtractorType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dTOExtractorType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DTOExtractorType dTOExtractorType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dTOExtractorType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DTOExtractorType"/>
    /// </summary>
    public class DTOExtractorTypeNullableJsonConverter : JsonConverter<DTOExtractorType?>
    {
        /// <summary>
        /// Returns a DTOExtractorType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DTOExtractorType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DTOExtractorType? result = rawValue == null
                ? null
                : DTOExtractorTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dTOExtractorType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DTOExtractorType? dTOExtractorType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(dTOExtractorType?.ToString() ?? "null");
        }
    }
}
