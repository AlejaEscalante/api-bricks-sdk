/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ContentExtractionApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_ContentExtractionApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_ContentExtractionApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/DTO_ExtractorType.h"
#include "CppRestOpenAPIClient/model/DTO_FilingExtractResultDto.h"
#include "CppRestOpenAPIClient/model/Mvc_ProblemDetails.h"
#include "CppRestOpenAPIClient/model/Mvc_ValidationProblemDetails.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  ContentExtractionApi 
{
public:

    explicit ContentExtractionApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~ContentExtractionApi();

    /// <summary>
    /// Extract and classify SEC filing content 
    /// </summary>
    /// <remarks>
    /// Retrieves filing content from the EDGAR database and intelligently classifies it according to form type and item categories.    ### Supported Form Types    Form Type | Description  ----------|------------  8-K      | Current report filing  10-K     | Annual report filing  10-Q     | Quarterly report filing    ### Content Classification  - 8-K forms: Content classified by item numbers (e.g., 1.01, 2.01)  - 10-K/10-Q forms: Items categorized by their respective part and item structure    :::note  Both HTML and plain text documents are supported for content extraction.  :::
    /// </remarks>
    /// <param name="accessionNumber">The SEC filing accession number used to retrieve the filing from EDGAR database.</param>
    /// <param name="type">Result type (text or html, default: text) (optional, default to new DTO_ExtractorType())</param>
    pplx::task<std::shared_ptr<DTO_FilingExtractResultDto>> v1ExtractorGet(
        utility::string_t accessionNumber,
        boost::optional<std::shared_ptr<DTO_ExtractorType>> type
    ) const;
    /// <summary>
    /// Extract specific item content from SEC filing
    /// </summary>
    /// <remarks>
    /// Retrieves filing content from the EDGAR database and returns only the text content of the specified item number.    ### Item Number Format    Form Type | Item Format Examples  -----------|-------------------  8-K       | 1.01, 2.01, 7.01  10-K      | 1, 2, 3  10-K/10-Q | PartI 1, PartII 2    :::tip  For best results, ensure the item number matches exactly with the filing&#39;s structure.  :::
    /// </remarks>
    /// <param name="accessionNumber">The SEC filing accession number used to retrieve the filing from EDGAR database.</param>
    /// <param name="itemNumber">The specific item number to extract (e.g., \&quot;1.01\&quot;, \&quot;2.01\&quot;, \&quot;7.01\&quot;).</param>
    /// <param name="type">Result type (text or html, default: text) (optional, default to new DTO_ExtractorType())</param>
    pplx::task<utility::string_t> v1ExtractorItemGet(
        utility::string_t accessionNumber,
        utility::string_t itemNumber,
        boost::optional<std::shared_ptr<DTO_ExtractorType>> type
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_ContentExtractionApi_H_ */

