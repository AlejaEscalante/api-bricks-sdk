/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.13.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Mvc_ValidationProblemDetails.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Mvc_ValidationProblemDetails_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Mvc_ValidationProblemDetails_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>
#include "CppRestOpenAPIClient/AnyType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



class  Mvc_ValidationProblemDetails
    : public ModelBase
{
public:
    Mvc_ValidationProblemDetails();
    virtual ~Mvc_ValidationProblemDetails();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Mvc_ValidationProblemDetails members


    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();
    void setType(const utility::string_t& value);

    utility::string_t getTitle() const;
    bool titleIsSet() const;
    void unsetTitle();
    void setTitle(const utility::string_t& value);

    int32_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();
    void setStatus(int32_t value);

    utility::string_t getDetail() const;
    bool detailIsSet() const;
    void unsetDetail();
    void setDetail(const utility::string_t& value);

    utility::string_t getInstance() const;
    bool instanceIsSet() const;
    void unsetInstance();
    void setInstance(const utility::string_t& value);

    std::map<utility::string_t, std::vector<utility::string_t>> getErrors() const;
    bool errorsIsSet() const;
    void unsetErrors();
    void setErrors(const std::map<utility::string_t, std::vector<utility::string_t>>& value);


protected:
    utility::string_t m_Type;
    bool m_TypeIsSet;

    utility::string_t m_Title;
    bool m_TitleIsSet;

    int32_t m_Status;
    bool m_StatusIsSet;

    utility::string_t m_Detail;
    bool m_DetailIsSet;

    utility::string_t m_Instance;
    bool m_InstanceIsSet;

    std::map<utility::string_t, std::vector<utility::string_t>> m_Errors;
    bool m_ErrorsIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Mvc_ValidationProblemDetails_H_ */
