// @flow
/* eslint-disable no-use-before-define */
/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "https://api-historical.sec.finfeedapi.com".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}

/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @enum {string}
 */
export type DTOExtractorType = 'text' | 'html';

/**
 * Represents the result of a filing extraction.
 * @export
 */
export type DTOFilingExtractResultDto = {
    /**
     * 
     * @type {string}
     * @memberof DTOFilingExtractResultDto
     */
    accession_number?: string;
    /**
     * 
     * @type {string}
     * @memberof DTOFilingExtractResultDto
     */
    form_type?: string;
    /**
     * 
     * @type {Array<DTOFilingItemDto>}
     * @memberof DTOFilingExtractResultDto
     */
    items?: Array<DTOFilingItemDto>;
}

/**
 * 
 * @export
 */
export type DTOFilingItemDto = {
    /**
     * 
     * @type {string}
     * @memberof DTOFilingItemDto
     */
    item_number?: string;
    /**
     * 
     * @type {string}
     * @memberof DTOFilingItemDto
     */
    item_title?: string;
    /**
     * 
     * @type {string}
     * @memberof DTOFilingItemDto
     */
    content?: string;
}

/**
 * Represents the response for a single SEC filing metadata record.  Maps fields from the edgar_submissions table.
 * @export
 */
export type DTOFilingMetadataDto = {
    /**
     * 
     * @type {number}
     * @memberof DTOFilingMetadataDto
     */
    cik?: number;
    /**
     * 
     * @type {string}
     * @memberof DTOFilingMetadataDto
     */
    accession_number?: string;
    /**
     * 
     * @type {Date}
     * @memberof DTOFilingMetadataDto
     */
    filing_date?: Date;
    /**
     * 
     * @type {Date}
     * @memberof DTOFilingMetadataDto
     */
    report_date?: Date;
    /**
     * 
     * @type {Date}
     * @memberof DTOFilingMetadataDto
     */
    acceptance_date_time?: Date;
    /**
     * 
     * @type {string}
     * @memberof DTOFilingMetadataDto
     */
    act?: string;
    /**
     * 
     * @type {string}
     * @memberof DTOFilingMetadataDto
     */
    form?: string;
    /**
     * 
     * @type {string}
     * @memberof DTOFilingMetadataDto
     */
    file_number?: string;
    /**
     * 
     * @type {string}
     * @memberof DTOFilingMetadataDto
     */
    film_number?: string;
    /**
     * 
     * @type {string}
     * @memberof DTOFilingMetadataDto
     */
    items?: string;
    /**
     * 
     * @type {string}
     * @memberof DTOFilingMetadataDto
     */
    core_type?: string;
    /**
     * 
     * @type {number}
     * @memberof DTOFilingMetadataDto
     */
    size?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DTOFilingMetadataDto
     */
    is_xbrl?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DTOFilingMetadataDto
     */
    is_inline_xbrl?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DTOFilingMetadataDto
     */
    primary_document?: string;
    /**
     * 
     * @type {string}
     * @memberof DTOFilingMetadataDto
     */
    primary_doc_description?: string;
    /**
     * 
     * @type {string}
     * @memberof DTOFilingMetadataDto
     */
    source_file?: string;
}

/**
 * Defines sorting options for the filing query.
 * @export
 * @enum {string}
 */
export type DTOFilingSortBy = 'AccessionNumber' | 'FilingDate' | 'ReportDate' | 'AcceptanceDateTime' | 'Size';

/**
 * 
 * @export
 */
export type DTOSecFilingResultDto = {
    /**
     * 
     * @type {string}
     * @memberof DTOSecFilingResultDto
     */
    accession_number?: string;
    /**
     * 
     * @type {string}
     * @memberof DTOSecFilingResultDto
     */
    form_type?: string;
    /**
     * 
     * @type {Date}
     * @memberof DTOSecFilingResultDto
     */
    filing_date?: Date;
    /**
     * 
     * @type {string}
     * @memberof DTOSecFilingResultDto
     */
    company_name?: string;
    /**
     * 
     * @type {number}
     * @memberof DTOSecFilingResultDto
     */
    cik?: number;
    /**
     * 
     * @type {string}
     * @memberof DTOSecFilingResultDto
     */
    document_filename?: string;
    /**
     * 
     * @type {string}
     * @memberof DTOSecFilingResultDto
     */
    document_description?: string;
    /**
     * 
     * @type {string}
     * @memberof DTOSecFilingResultDto
     */
    source_file?: string;
}

/**
 * 
 * @export
 */
export type MvcProblemDetails = {
    [key: string]: AnyType | any;

    /**
     * 
     * @type {string}
     * @memberof MvcProblemDetails
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof MvcProblemDetails
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof MvcProblemDetails
     */
    status?: number;
    /**
     * 
     * @type {string}
     * @memberof MvcProblemDetails
     */
    detail?: string;
    /**
     * 
     * @type {string}
     * @memberof MvcProblemDetails
     */
    instance?: string;
}

/**
 * 
 * @export
 */
export type MvcValidationProblemDetails = {
    [key: string]: AnyType | any;

    /**
     * 
     * @type {string}
     * @memberof MvcValidationProblemDetails
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof MvcValidationProblemDetails
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof MvcValidationProblemDetails
     */
    status?: number;
    /**
     * 
     * @type {string}
     * @memberof MvcValidationProblemDetails
     */
    detail?: string;
    /**
     * 
     * @type {string}
     * @memberof MvcValidationProblemDetails
     */
    instance?: string;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof MvcValidationProblemDetails
     */
    errors?: { [key: string]: Array<string>; };
}



/**
 * ContentExtractionApi - fetch parameter creator
 * @export
 */
export const ContentExtractionApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves filing content from the EDGAR database and intelligently classifies it according to form type and item categories.    ### Supported Form Types    Form Type | Description  ----------|------------  8-K      | Current report filing  10-K     | Annual report filing  10-Q     | Quarterly report filing    ### Content Classification  - 8-K forms: Content classified by item numbers (e.g., 1.01, 2.01)  - 10-K/10-Q forms: Items categorized by their respective part and item structure    :::note  Both HTML and plain text documents are supported for content extraction.  :::
         * @summary Extract and classify SEC filing content 
         * @throws {RequiredError}
         */
        v1ExtractorGet(accessionNumber: string, type?: DTOExtractorType, options: RequestOptions): FetchArgs {
            // verify required parameter 'accessionNumber' is not null or undefined
            if (accessionNumber === null || accessionNumber === undefined) {
                throw new RequiredError('accessionNumber','Required parameter accessionNumber was null or undefined when calling v1ExtractorGet.');
            }
            const localVarPath = `/v1/extractor`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (accessionNumber !== undefined) {
                localVarQueryParameter['accession_number'] = ((accessionNumber:any):string);
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = ((type:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves filing content from the EDGAR database and returns only the text content of the specified item number.    ### Item Number Format    Form Type | Item Format Examples  -----------|-------------------  8-K       | 1.01, 2.01, 7.01  10-K      | 1, 2, 3  10-K/10-Q | PartI 1, PartII 2    :::tip  For best results, ensure the item number matches exactly with the filing\'s structure.  :::
         * @summary Extract specific item content from SEC filing
         * @throws {RequiredError}
         */
        v1ExtractorItemGet(accessionNumber: string, itemNumber: string, type?: DTOExtractorType, options: RequestOptions): FetchArgs {
            // verify required parameter 'accessionNumber' is not null or undefined
            if (accessionNumber === null || accessionNumber === undefined) {
                throw new RequiredError('accessionNumber','Required parameter accessionNumber was null or undefined when calling v1ExtractorItemGet.');
            }
            // verify required parameter 'itemNumber' is not null or undefined
            if (itemNumber === null || itemNumber === undefined) {
                throw new RequiredError('itemNumber','Required parameter itemNumber was null or undefined when calling v1ExtractorItemGet.');
            }
            const localVarPath = `/v1/extractor/item`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (accessionNumber !== undefined) {
                localVarQueryParameter['accession_number'] = ((accessionNumber:any):string);
            }

            if (itemNumber !== undefined) {
                localVarQueryParameter['item_number'] = ((itemNumber:any):string);
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = ((type:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ContentExtractionApiType = { 
    v1ExtractorGet(accessionNumber: string, type?: DTOExtractorType, options?: RequestOptions): Promise<DTOFilingExtractResultDto>,

    v1ExtractorItemGet(accessionNumber: string, itemNumber: string, type?: DTOExtractorType, options?: RequestOptions): Promise<string>,
}

/**
 * ContentExtractionApi - factory function to inject configuration 
 * @export
 */
export const ContentExtractionApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ContentExtractionApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Retrieves filing content from the EDGAR database and intelligently classifies it according to form type and item categories.    ### Supported Form Types    Form Type | Description  ----------|------------  8-K      | Current report filing  10-K     | Annual report filing  10-Q     | Quarterly report filing    ### Content Classification  - 8-K forms: Content classified by item numbers (e.g., 1.01, 2.01)  - 10-K/10-Q forms: Items categorized by their respective part and item structure    :::note  Both HTML and plain text documents are supported for content extraction.  :::
         * @summary Extract and classify SEC filing content 
         * @throws {RequiredError}
         */
        v1ExtractorGet(accessionNumber: string, type?: DTOExtractorType, options?: RequestOptions = {}): Promise<DTOFilingExtractResultDto> {
            const localVarFetchArgs = ContentExtractionApiFetchParamCreator(configuration).v1ExtractorGet(accessionNumber, type, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Retrieves filing content from the EDGAR database and returns only the text content of the specified item number.    ### Item Number Format    Form Type | Item Format Examples  -----------|-------------------  8-K       | 1.01, 2.01, 7.01  10-K      | 1, 2, 3  10-K/10-Q | PartI 1, PartII 2    :::tip  For best results, ensure the item number matches exactly with the filing\'s structure.  :::
         * @summary Extract specific item content from SEC filing
         * @throws {RequiredError}
         */
        v1ExtractorItemGet(accessionNumber: string, itemNumber: string, type?: DTOExtractorType, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = ContentExtractionApiFetchParamCreator(configuration).v1ExtractorItemGet(accessionNumber, itemNumber, type, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * FilingMetadataApi - fetch parameter creator
 * @export
 */
export const FilingMetadataApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves metadata for SEC filings based on various filter criteria with pagination and sorting support.    ### Available Sort Fields    Field Name | Description  -----------|-------------  AccessionNumber | SEC filing accession number  FilingDate | Date when filing was submitted  AcceptanceDateTime | Date and time of filing acceptance  ReportDate | Date of the report  Size | Size of the filing document    ### Date Format  All dates must be provided in YYYY-MM-DD format    ### Form Types  Form types can be provided as comma-separated values, e.g.: \"10-K,8-K,10-Q\"    :::tip  For optimal performance, use date ranges and form types to narrow down your search  :::
         * @summary Query SEC filing metadata
         * @throws {RequiredError}
         */
        v1FilingsGet(cik?: number, formType?: string, fillingDateStart?: string, fillingDateEnd?: string, reportDateStart?: string, reportDateEnd?: string, itemsContain?: string, pageSize?: number, pageNumber?: number, sortBy?: DTOFilingSortBy, sortOrder?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/v1/filings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (cik !== undefined) {
                localVarQueryParameter['cik'] = ((cik:any):string);
            }

            if (formType !== undefined) {
                localVarQueryParameter['form_type'] = ((formType:any):string);
            }

            if (fillingDateStart !== undefined) {
                localVarQueryParameter['filling_date_start'] = ((fillingDateStart:any):string);
            }

            if (fillingDateEnd !== undefined) {
                localVarQueryParameter['filling_date_end'] = ((fillingDateEnd:any):string);
            }

            if (reportDateStart !== undefined) {
                localVarQueryParameter['report_date_start'] = ((reportDateStart:any):string);
            }

            if (reportDateEnd !== undefined) {
                localVarQueryParameter['report_date_end'] = ((reportDateEnd:any):string);
            }

            if (itemsContain !== undefined) {
                localVarQueryParameter['items_contain'] = ((itemsContain:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = ((pageNumber:any):string);
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = ((sortBy:any):string);
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = ((sortOrder:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type FilingMetadataApiType = { 
    v1FilingsGet(cik?: number, formType?: string, fillingDateStart?: string, fillingDateEnd?: string, reportDateStart?: string, reportDateEnd?: string, itemsContain?: string, pageSize?: number, pageNumber?: number, sortBy?: DTOFilingSortBy, sortOrder?: string, options?: RequestOptions): Promise<Array<DTOFilingMetadataDto>>,
}

/**
 * FilingMetadataApi - factory function to inject configuration 
 * @export
 */
export const FilingMetadataApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): FilingMetadataApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Retrieves metadata for SEC filings based on various filter criteria with pagination and sorting support.    ### Available Sort Fields    Field Name | Description  -----------|-------------  AccessionNumber | SEC filing accession number  FilingDate | Date when filing was submitted  AcceptanceDateTime | Date and time of filing acceptance  ReportDate | Date of the report  Size | Size of the filing document    ### Date Format  All dates must be provided in YYYY-MM-DD format    ### Form Types  Form types can be provided as comma-separated values, e.g.: \"10-K,8-K,10-Q\"    :::tip  For optimal performance, use date ranges and form types to narrow down your search  :::
         * @summary Query SEC filing metadata
         * @throws {RequiredError}
         */
        v1FilingsGet(cik?: number, formType?: string, fillingDateStart?: string, fillingDateEnd?: string, reportDateStart?: string, reportDateEnd?: string, itemsContain?: string, pageSize?: number, pageNumber?: number, sortBy?: DTOFilingSortBy, sortOrder?: string, options?: RequestOptions = {}): Promise<Array<DTOFilingMetadataDto>> {
            const localVarFetchArgs = FilingMetadataApiFetchParamCreator(configuration).v1FilingsGet(cik, formType, fillingDateStart, fillingDateEnd, reportDateStart, reportDateEnd, itemsContain, pageSize, pageNumber, sortBy, sortOrder, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * FullTextSearchApi - fetch parameter creator
 * @export
 */
export const FullTextSearchApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Search across SEC filing documents with advanced filtering and sorting capabilities.    ### Available Sort Fields    Field Name | Description  -----------|-------------  AccessionNumber | SEC filing accession number  FormType | Type of the filing document  FilingDate | Date when filing was submitted  CompanyName | Name of the company  CIK | Central Index Key  DocumentFilename | Name of the filing document  DocumentDescription | Description of the document    ### Search Options    Option | Description  --------|-------------  text_contains | Keywords that must appear in the document  text_not_contain | Keywords that must not appear in the document    ### Date Format  All dates must be provided in YYYY-MM-DD format    :::tip  Use text_contains and text_not_contain with multiple keywords separated by commas for more precise searches  :::    :::note  The search is case-insensitive and supports partial word matches  :::
         * @summary Full-text search of SEC filing documents
         * @throws {RequiredError}
         */
        v1FullTextGet(formType?: string, fillingDateStart?: string, fillingDateEnd?: string, textContains?: string, textNotContain?: string, pageSize?: number, pageNumber?: number, sortBy?: string, sortOrder?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/v1/full-text`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (formType !== undefined) {
                localVarQueryParameter['form_type'] = ((formType:any):string);
            }

            if (fillingDateStart !== undefined) {
                localVarQueryParameter['filling_date_start'] = ((fillingDateStart:any):string);
            }

            if (fillingDateEnd !== undefined) {
                localVarQueryParameter['filling_date_end'] = ((fillingDateEnd:any):string);
            }

            if (textContains !== undefined) {
                localVarQueryParameter['text_contains'] = ((textContains:any):string);
            }

            if (textNotContain !== undefined) {
                localVarQueryParameter['text_not_contain'] = ((textNotContain:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = ((pageSize:any):string);
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = ((pageNumber:any):string);
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = ((sortBy:any):string);
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = ((sortOrder:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type FullTextSearchApiType = { 
    v1FullTextGet(formType?: string, fillingDateStart?: string, fillingDateEnd?: string, textContains?: string, textNotContain?: string, pageSize?: number, pageNumber?: number, sortBy?: string, sortOrder?: string, options?: RequestOptions): Promise<Array<DTOSecFilingResultDto>>,
}

/**
 * FullTextSearchApi - factory function to inject configuration 
 * @export
 */
export const FullTextSearchApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): FullTextSearchApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Search across SEC filing documents with advanced filtering and sorting capabilities.    ### Available Sort Fields    Field Name | Description  -----------|-------------  AccessionNumber | SEC filing accession number  FormType | Type of the filing document  FilingDate | Date when filing was submitted  CompanyName | Name of the company  CIK | Central Index Key  DocumentFilename | Name of the filing document  DocumentDescription | Description of the document    ### Search Options    Option | Description  --------|-------------  text_contains | Keywords that must appear in the document  text_not_contain | Keywords that must not appear in the document    ### Date Format  All dates must be provided in YYYY-MM-DD format    :::tip  Use text_contains and text_not_contain with multiple keywords separated by commas for more precise searches  :::    :::note  The search is case-insensitive and supports partial word matches  :::
         * @summary Full-text search of SEC filing documents
         * @throws {RequiredError}
         */
        v1FullTextGet(formType?: string, fillingDateStart?: string, fillingDateEnd?: string, textContains?: string, textNotContain?: string, pageSize?: number, pageNumber?: number, sortBy?: string, sortOrder?: string, options?: RequestOptions = {}): Promise<Array<DTOSecFilingResultDto>> {
            const localVarFetchArgs = FullTextSearchApiFetchParamCreator(configuration).v1FullTextGet(formType, fillingDateStart, fillingDateEnd, textContains, textNotContain, pageSize, pageNumber, sortBy, sortOrder, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


export type ApiTypes = { 
    ContentExtractionApi: ContentExtractionApiType,

    FilingMetadataApi: FilingMetadataApiType,

    FullTextSearchApi: FullTextSearchApiType,
 }
