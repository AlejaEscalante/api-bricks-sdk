// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.FinFeedAPI.SECAPI.REST.V1.Client.ClientUtils;
using APIBricks.FinFeedAPI.SECAPI.REST.V1.Client;

namespace APIBricks.FinFeedAPI.SECAPI.REST.V1.Model
{
    /// <summary>
    /// Represents the response for a single SEC filing metadata record.  Maps fields from the edgar_submissions table.
    /// </summary>
    public partial class DTOFilingMetadataDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DTOFilingMetadataDto" /> class.
        /// </summary>
        /// <param name="cik">cik</param>
        /// <param name="accessionNumber">accessionNumber</param>
        /// <param name="filingDate">filingDate</param>
        /// <param name="reportDate">reportDate</param>
        /// <param name="acceptanceDateTime">acceptanceDateTime</param>
        /// <param name="act">act</param>
        /// <param name="form">form</param>
        /// <param name="fileNumber">fileNumber</param>
        /// <param name="filmNumber">filmNumber</param>
        /// <param name="items">items</param>
        /// <param name="coreType">coreType</param>
        /// <param name="size">size</param>
        /// <param name="isXbrl">isXbrl</param>
        /// <param name="isInlineXbrl">isInlineXbrl</param>
        /// <param name="primaryDocument">primaryDocument</param>
        /// <param name="primaryDocDescription">primaryDocDescription</param>
        /// <param name="sourceFile">sourceFile</param>
        [JsonConstructor]
        public DTOFilingMetadataDto(Option<long?> cik = default, Option<string?> accessionNumber = default, Option<DateOnly?> filingDate = default, Option<DateOnly?> reportDate = default, Option<DateTime?> acceptanceDateTime = default, Option<string?> act = default, Option<string?> form = default, Option<string?> fileNumber = default, Option<string?> filmNumber = default, Option<string?> items = default, Option<string?> coreType = default, Option<int?> size = default, Option<bool?> isXbrl = default, Option<bool?> isInlineXbrl = default, Option<string?> primaryDocument = default, Option<string?> primaryDocDescription = default, Option<string?> sourceFile = default)
        {
            CikOption = cik;
            AccessionNumberOption = accessionNumber;
            FilingDateOption = filingDate;
            ReportDateOption = reportDate;
            AcceptanceDateTimeOption = acceptanceDateTime;
            ActOption = act;
            FormOption = form;
            FileNumberOption = fileNumber;
            FilmNumberOption = filmNumber;
            ItemsOption = items;
            CoreTypeOption = coreType;
            SizeOption = size;
            IsXbrlOption = isXbrl;
            IsInlineXbrlOption = isInlineXbrl;
            PrimaryDocumentOption = primaryDocument;
            PrimaryDocDescriptionOption = primaryDocDescription;
            SourceFileOption = sourceFile;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Cik
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CikOption { get; private set; }

        /// <summary>
        /// Gets or Sets Cik
        /// </summary>
        [JsonPropertyName("cik")]
        public long? Cik { get { return this.CikOption; } set { this.CikOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccessionNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AccessionNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccessionNumber
        /// </summary>
        [JsonPropertyName("accession_number")]
        public string? AccessionNumber { get { return this.AccessionNumberOption; } set { this.AccessionNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of FilingDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> FilingDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets FilingDate
        /// </summary>
        [JsonPropertyName("filing_date")]
        public DateOnly? FilingDate { get { return this.FilingDateOption; } set { this.FilingDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReportDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> ReportDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReportDate
        /// </summary>
        [JsonPropertyName("report_date")]
        public DateOnly? ReportDate { get { return this.ReportDateOption; } set { this.ReportDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of AcceptanceDateTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> AcceptanceDateTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets AcceptanceDateTime
        /// </summary>
        [JsonPropertyName("acceptance_date_time")]
        public DateTime? AcceptanceDateTime { get { return this.AcceptanceDateTimeOption; } set { this.AcceptanceDateTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Act
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ActOption { get; private set; }

        /// <summary>
        /// Gets or Sets Act
        /// </summary>
        [JsonPropertyName("act")]
        public string? Act { get { return this.ActOption; } set { this.ActOption = new(value); } }

        /// <summary>
        /// Used to track the state of Form
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FormOption { get; private set; }

        /// <summary>
        /// Gets or Sets Form
        /// </summary>
        [JsonPropertyName("form")]
        public string? Form { get { return this.FormOption; } set { this.FormOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FileNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileNumber
        /// </summary>
        [JsonPropertyName("file_number")]
        public string? FileNumber { get { return this.FileNumberOption; } set { this.FileNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of FilmNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FilmNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets FilmNumber
        /// </summary>
        [JsonPropertyName("film_number")]
        public string? FilmNumber { get { return this.FilmNumberOption; } set { this.FilmNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Items
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ItemsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [JsonPropertyName("items")]
        public string? Items { get { return this.ItemsOption; } set { this.ItemsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CoreType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CoreTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CoreType
        /// </summary>
        [JsonPropertyName("core_type")]
        public string? CoreType { get { return this.CoreTypeOption; } set { this.CoreTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsXbrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsXbrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsXbrl
        /// </summary>
        [JsonPropertyName("is_xbrl")]
        public bool? IsXbrl { get { return this.IsXbrlOption; } set { this.IsXbrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsInlineXbrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsInlineXbrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsInlineXbrl
        /// </summary>
        [JsonPropertyName("is_inline_xbrl")]
        public bool? IsInlineXbrl { get { return this.IsInlineXbrlOption; } set { this.IsInlineXbrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrimaryDocument
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryDocumentOption { get; private set; }

        /// <summary>
        /// Gets or Sets PrimaryDocument
        /// </summary>
        [JsonPropertyName("primary_document")]
        public string? PrimaryDocument { get { return this.PrimaryDocumentOption; } set { this.PrimaryDocumentOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrimaryDocDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrimaryDocDescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets PrimaryDocDescription
        /// </summary>
        [JsonPropertyName("primary_doc_description")]
        public string? PrimaryDocDescription { get { return this.PrimaryDocDescriptionOption; } set { this.PrimaryDocDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of SourceFile
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceFileOption { get; private set; }

        /// <summary>
        /// Gets or Sets SourceFile
        /// </summary>
        [JsonPropertyName("source_file")]
        public string? SourceFile { get { return this.SourceFileOption; } set { this.SourceFileOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DTOFilingMetadataDto {\n");
            sb.Append("  Cik: ").Append(Cik).Append("\n");
            sb.Append("  AccessionNumber: ").Append(AccessionNumber).Append("\n");
            sb.Append("  FilingDate: ").Append(FilingDate).Append("\n");
            sb.Append("  ReportDate: ").Append(ReportDate).Append("\n");
            sb.Append("  AcceptanceDateTime: ").Append(AcceptanceDateTime).Append("\n");
            sb.Append("  Act: ").Append(Act).Append("\n");
            sb.Append("  Form: ").Append(Form).Append("\n");
            sb.Append("  FileNumber: ").Append(FileNumber).Append("\n");
            sb.Append("  FilmNumber: ").Append(FilmNumber).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  CoreType: ").Append(CoreType).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  IsXbrl: ").Append(IsXbrl).Append("\n");
            sb.Append("  IsInlineXbrl: ").Append(IsInlineXbrl).Append("\n");
            sb.Append("  PrimaryDocument: ").Append(PrimaryDocument).Append("\n");
            sb.Append("  PrimaryDocDescription: ").Append(PrimaryDocDescription).Append("\n");
            sb.Append("  SourceFile: ").Append(SourceFile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DTOFilingMetadataDto" />
    /// </summary>
    public class DTOFilingMetadataDtoJsonConverter : JsonConverter<DTOFilingMetadataDto>
    {
        /// <summary>
        /// The format to use to serialize FilingDate
        /// </summary>
        public static string FilingDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize ReportDate
        /// </summary>
        public static string ReportDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize AcceptanceDateTime
        /// </summary>
        public static string AcceptanceDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DTOFilingMetadataDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DTOFilingMetadataDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> cik = default;
            Option<string?> accessionNumber = default;
            Option<DateOnly?> filingDate = default;
            Option<DateOnly?> reportDate = default;
            Option<DateTime?> acceptanceDateTime = default;
            Option<string?> act = default;
            Option<string?> form = default;
            Option<string?> fileNumber = default;
            Option<string?> filmNumber = default;
            Option<string?> items = default;
            Option<string?> coreType = default;
            Option<int?> size = default;
            Option<bool?> isXbrl = default;
            Option<bool?> isInlineXbrl = default;
            Option<string?> primaryDocument = default;
            Option<string?> primaryDocDescription = default;
            Option<string?> sourceFile = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "cik":
                            cik = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "accession_number":
                            accessionNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "filing_date":
                            filingDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "report_date":
                            reportDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "acceptance_date_time":
                            acceptanceDateTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "act":
                            act = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "form":
                            form = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "file_number":
                            fileNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "film_number":
                            filmNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "items":
                            items = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "core_type":
                            coreType = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "is_xbrl":
                            isXbrl = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_inline_xbrl":
                            isInlineXbrl = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "primary_document":
                            primaryDocument = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "primary_doc_description":
                            primaryDocDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "source_file":
                            sourceFile = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (cik.IsSet && cik.Value == null)
                throw new ArgumentNullException(nameof(cik), "Property is not nullable for class DTOFilingMetadataDto.");

            if (filingDate.IsSet && filingDate.Value == null)
                throw new ArgumentNullException(nameof(filingDate), "Property is not nullable for class DTOFilingMetadataDto.");

            return new DTOFilingMetadataDto(cik, accessionNumber, filingDate, reportDate, acceptanceDateTime, act, form, fileNumber, filmNumber, items, coreType, size, isXbrl, isInlineXbrl, primaryDocument, primaryDocDescription, sourceFile);
        }

        /// <summary>
        /// Serializes a <see cref="DTOFilingMetadataDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dTOFilingMetadataDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DTOFilingMetadataDto dTOFilingMetadataDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dTOFilingMetadataDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DTOFilingMetadataDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dTOFilingMetadataDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DTOFilingMetadataDto dTOFilingMetadataDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dTOFilingMetadataDto.CikOption.IsSet)
                writer.WriteNumber("cik", dTOFilingMetadataDto.CikOption.Value!.Value);

            if (dTOFilingMetadataDto.AccessionNumberOption.IsSet)
                if (dTOFilingMetadataDto.AccessionNumberOption.Value != null)
                    writer.WriteString("accession_number", dTOFilingMetadataDto.AccessionNumber);
                else
                    writer.WriteNull("accession_number");

            if (dTOFilingMetadataDto.FilingDateOption.IsSet)
                writer.WriteString("filing_date", dTOFilingMetadataDto.FilingDateOption.Value!.Value.ToString(FilingDateFormat));

            if (dTOFilingMetadataDto.ReportDateOption.IsSet)
                if (dTOFilingMetadataDto.ReportDateOption.Value != null)
                    writer.WriteString("report_date", dTOFilingMetadataDto.ReportDateOption.Value!.Value.ToString(ReportDateFormat));
                else
                    writer.WriteNull("report_date");

            if (dTOFilingMetadataDto.AcceptanceDateTimeOption.IsSet)
                if (dTOFilingMetadataDto.AcceptanceDateTimeOption.Value != null)
                    writer.WriteString("acceptance_date_time", dTOFilingMetadataDto.AcceptanceDateTimeOption.Value!.Value.ToString(AcceptanceDateTimeFormat));
                else
                    writer.WriteNull("acceptance_date_time");

            if (dTOFilingMetadataDto.ActOption.IsSet)
                if (dTOFilingMetadataDto.ActOption.Value != null)
                    writer.WriteString("act", dTOFilingMetadataDto.Act);
                else
                    writer.WriteNull("act");

            if (dTOFilingMetadataDto.FormOption.IsSet)
                if (dTOFilingMetadataDto.FormOption.Value != null)
                    writer.WriteString("form", dTOFilingMetadataDto.Form);
                else
                    writer.WriteNull("form");

            if (dTOFilingMetadataDto.FileNumberOption.IsSet)
                if (dTOFilingMetadataDto.FileNumberOption.Value != null)
                    writer.WriteString("file_number", dTOFilingMetadataDto.FileNumber);
                else
                    writer.WriteNull("file_number");

            if (dTOFilingMetadataDto.FilmNumberOption.IsSet)
                if (dTOFilingMetadataDto.FilmNumberOption.Value != null)
                    writer.WriteString("film_number", dTOFilingMetadataDto.FilmNumber);
                else
                    writer.WriteNull("film_number");

            if (dTOFilingMetadataDto.ItemsOption.IsSet)
                if (dTOFilingMetadataDto.ItemsOption.Value != null)
                    writer.WriteString("items", dTOFilingMetadataDto.Items);
                else
                    writer.WriteNull("items");

            if (dTOFilingMetadataDto.CoreTypeOption.IsSet)
                if (dTOFilingMetadataDto.CoreTypeOption.Value != null)
                    writer.WriteString("core_type", dTOFilingMetadataDto.CoreType);
                else
                    writer.WriteNull("core_type");

            if (dTOFilingMetadataDto.SizeOption.IsSet)
                if (dTOFilingMetadataDto.SizeOption.Value != null)
                    writer.WriteNumber("size", dTOFilingMetadataDto.SizeOption.Value!.Value);
                else
                    writer.WriteNull("size");

            if (dTOFilingMetadataDto.IsXbrlOption.IsSet)
                if (dTOFilingMetadataDto.IsXbrlOption.Value != null)
                    writer.WriteBoolean("is_xbrl", dTOFilingMetadataDto.IsXbrlOption.Value!.Value);
                else
                    writer.WriteNull("is_xbrl");

            if (dTOFilingMetadataDto.IsInlineXbrlOption.IsSet)
                if (dTOFilingMetadataDto.IsInlineXbrlOption.Value != null)
                    writer.WriteBoolean("is_inline_xbrl", dTOFilingMetadataDto.IsInlineXbrlOption.Value!.Value);
                else
                    writer.WriteNull("is_inline_xbrl");

            if (dTOFilingMetadataDto.PrimaryDocumentOption.IsSet)
                if (dTOFilingMetadataDto.PrimaryDocumentOption.Value != null)
                    writer.WriteString("primary_document", dTOFilingMetadataDto.PrimaryDocument);
                else
                    writer.WriteNull("primary_document");

            if (dTOFilingMetadataDto.PrimaryDocDescriptionOption.IsSet)
                if (dTOFilingMetadataDto.PrimaryDocDescriptionOption.Value != null)
                    writer.WriteString("primary_doc_description", dTOFilingMetadataDto.PrimaryDocDescription);
                else
                    writer.WriteNull("primary_doc_description");

            if (dTOFilingMetadataDto.SourceFileOption.IsSet)
                if (dTOFilingMetadataDto.SourceFileOption.Value != null)
                    writer.WriteString("source_file", dTOFilingMetadataDto.SourceFile);
                else
                    writer.WriteNull("source_file");
        }
    }
}
