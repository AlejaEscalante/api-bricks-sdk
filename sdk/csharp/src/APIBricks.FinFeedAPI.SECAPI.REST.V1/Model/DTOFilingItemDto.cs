// <auto-generated>
/*
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: support@apibricks.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = APIBricks.FinFeedAPI.SECAPI.REST.V1.Client.ClientUtils;
using APIBricks.FinFeedAPI.SECAPI.REST.V1.Client;

namespace APIBricks.FinFeedAPI.SECAPI.REST.V1.Model
{
    /// <summary>
    /// DTOFilingItemDto
    /// </summary>
    public partial class DTOFilingItemDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DTOFilingItemDto" /> class.
        /// </summary>
        /// <param name="itemNumber">itemNumber</param>
        /// <param name="itemTitle">itemTitle</param>
        /// <param name="content">content</param>
        [JsonConstructor]
        public DTOFilingItemDto(Option<string?> itemNumber = default, Option<string?> itemTitle = default, Option<string?> content = default)
        {
            ItemNumberOption = itemNumber;
            ItemTitleOption = itemTitle;
            ContentOption = content;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ItemNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ItemNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets ItemNumber
        /// </summary>
        [JsonPropertyName("item_number")]
        public string? ItemNumber { get { return this.ItemNumberOption; } set { this.ItemNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of ItemTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ItemTitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets ItemTitle
        /// </summary>
        [JsonPropertyName("item_title")]
        public string? ItemTitle { get { return this.ItemTitleOption; } set { this.ItemTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Content
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [JsonPropertyName("content")]
        public string? Content { get { return this.ContentOption; } set { this.ContentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DTOFilingItemDto {\n");
            sb.Append("  ItemNumber: ").Append(ItemNumber).Append("\n");
            sb.Append("  ItemTitle: ").Append(ItemTitle).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DTOFilingItemDto" />
    /// </summary>
    public class DTOFilingItemDtoJsonConverter : JsonConverter<DTOFilingItemDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="DTOFilingItemDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DTOFilingItemDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> itemNumber = default;
            Option<string?> itemTitle = default;
            Option<string?> content = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "item_number":
                            itemNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "item_title":
                            itemTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new DTOFilingItemDto(itemNumber, itemTitle, content);
        }

        /// <summary>
        /// Serializes a <see cref="DTOFilingItemDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dTOFilingItemDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DTOFilingItemDto dTOFilingItemDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dTOFilingItemDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DTOFilingItemDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dTOFilingItemDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DTOFilingItemDto dTOFilingItemDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dTOFilingItemDto.ItemNumberOption.IsSet)
                if (dTOFilingItemDto.ItemNumberOption.Value != null)
                    writer.WriteString("item_number", dTOFilingItemDto.ItemNumber);
                else
                    writer.WriteNull("item_number");

            if (dTOFilingItemDto.ItemTitleOption.IsSet)
                if (dTOFilingItemDto.ItemTitleOption.Value != null)
                    writer.WriteString("item_title", dTOFilingItemDto.ItemTitle);
                else
                    writer.WriteNull("item_title");

            if (dTOFilingItemDto.ContentOption.IsSet)
                if (dTOFilingItemDto.ContentOption.Value != null)
                    writer.WriteString("content", dTOFilingItemDto.Content);
                else
                    writer.WriteNull("content");
        }
    }
}
