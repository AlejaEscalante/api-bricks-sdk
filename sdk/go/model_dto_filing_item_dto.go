/*
REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: support@apibricks.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DTOFilingItemDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DTOFilingItemDto{}

// DTOFilingItemDto struct for DTOFilingItemDto
type DTOFilingItemDto struct {
	ItemNumber NullableString `json:"item_number,omitempty"`
	ItemTitle NullableString `json:"item_title,omitempty"`
	Content NullableString `json:"content,omitempty"`
}

// NewDTOFilingItemDto instantiates a new DTOFilingItemDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDTOFilingItemDto() *DTOFilingItemDto {
	this := DTOFilingItemDto{}
	return &this
}

// NewDTOFilingItemDtoWithDefaults instantiates a new DTOFilingItemDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDTOFilingItemDtoWithDefaults() *DTOFilingItemDto {
	this := DTOFilingItemDto{}
	return &this
}

// GetItemNumber returns the ItemNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DTOFilingItemDto) GetItemNumber() string {
	if o == nil || IsNil(o.ItemNumber.Get()) {
		var ret string
		return ret
	}
	return *o.ItemNumber.Get()
}

// GetItemNumberOk returns a tuple with the ItemNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DTOFilingItemDto) GetItemNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemNumber.Get(), o.ItemNumber.IsSet()
}

// HasItemNumber returns a boolean if a field has been set.
func (o *DTOFilingItemDto) HasItemNumber() bool {
	if o != nil && o.ItemNumber.IsSet() {
		return true
	}

	return false
}

// SetItemNumber gets a reference to the given NullableString and assigns it to the ItemNumber field.
func (o *DTOFilingItemDto) SetItemNumber(v string) {
	o.ItemNumber.Set(&v)
}
// SetItemNumberNil sets the value for ItemNumber to be an explicit nil
func (o *DTOFilingItemDto) SetItemNumberNil() {
	o.ItemNumber.Set(nil)
}

// UnsetItemNumber ensures that no value is present for ItemNumber, not even an explicit nil
func (o *DTOFilingItemDto) UnsetItemNumber() {
	o.ItemNumber.Unset()
}

// GetItemTitle returns the ItemTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DTOFilingItemDto) GetItemTitle() string {
	if o == nil || IsNil(o.ItemTitle.Get()) {
		var ret string
		return ret
	}
	return *o.ItemTitle.Get()
}

// GetItemTitleOk returns a tuple with the ItemTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DTOFilingItemDto) GetItemTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemTitle.Get(), o.ItemTitle.IsSet()
}

// HasItemTitle returns a boolean if a field has been set.
func (o *DTOFilingItemDto) HasItemTitle() bool {
	if o != nil && o.ItemTitle.IsSet() {
		return true
	}

	return false
}

// SetItemTitle gets a reference to the given NullableString and assigns it to the ItemTitle field.
func (o *DTOFilingItemDto) SetItemTitle(v string) {
	o.ItemTitle.Set(&v)
}
// SetItemTitleNil sets the value for ItemTitle to be an explicit nil
func (o *DTOFilingItemDto) SetItemTitleNil() {
	o.ItemTitle.Set(nil)
}

// UnsetItemTitle ensures that no value is present for ItemTitle, not even an explicit nil
func (o *DTOFilingItemDto) UnsetItemTitle() {
	o.ItemTitle.Unset()
}

// GetContent returns the Content field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DTOFilingItemDto) GetContent() string {
	if o == nil || IsNil(o.Content.Get()) {
		var ret string
		return ret
	}
	return *o.Content.Get()
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DTOFilingItemDto) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Content.Get(), o.Content.IsSet()
}

// HasContent returns a boolean if a field has been set.
func (o *DTOFilingItemDto) HasContent() bool {
	if o != nil && o.Content.IsSet() {
		return true
	}

	return false
}

// SetContent gets a reference to the given NullableString and assigns it to the Content field.
func (o *DTOFilingItemDto) SetContent(v string) {
	o.Content.Set(&v)
}
// SetContentNil sets the value for Content to be an explicit nil
func (o *DTOFilingItemDto) SetContentNil() {
	o.Content.Set(nil)
}

// UnsetContent ensures that no value is present for Content, not even an explicit nil
func (o *DTOFilingItemDto) UnsetContent() {
	o.Content.Unset()
}

func (o DTOFilingItemDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DTOFilingItemDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ItemNumber.IsSet() {
		toSerialize["item_number"] = o.ItemNumber.Get()
	}
	if o.ItemTitle.IsSet() {
		toSerialize["item_title"] = o.ItemTitle.Get()
	}
	if o.Content.IsSet() {
		toSerialize["content"] = o.Content.Get()
	}
	return toSerialize, nil
}

type NullableDTOFilingItemDto struct {
	value *DTOFilingItemDto
	isSet bool
}

func (v NullableDTOFilingItemDto) Get() *DTOFilingItemDto {
	return v.value
}

func (v *NullableDTOFilingItemDto) Set(val *DTOFilingItemDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDTOFilingItemDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDTOFilingItemDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDTOFilingItemDto(val *DTOFilingItemDto) *NullableDTOFilingItemDto {
	return &NullableDTOFilingItemDto{value: val, isSet: true}
}

func (v NullableDTOFilingItemDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDTOFilingItemDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


